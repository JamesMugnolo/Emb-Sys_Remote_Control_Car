
ESC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011da8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bec  08011f88  08011f88  00021f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b74  08014b74  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014b74  08014b74  00024b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b7c  08014b7c  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b7c  08014b7c  00024b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b80  08014b80  00024b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08014b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005918  200000ec  08014c70  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005a04  08014c70  00035a04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042585  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075d8  00000000  00000000  000726a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000031a8  00000000  00000000  00079c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002e98  00000000  00000000  0007ce28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c5ee  00000000  00000000  0007fcc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c824  00000000  00000000  0008c2ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdfdb  00000000  00000000  000b8ad2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6aad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d60c  00000000  00000000  001b6b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011f70 	.word	0x08011f70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f0 	.word	0x200000f0
 800021c:	08011f70 	.word	0x08011f70

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <MapToSwitch>:


int FlagBuffer[4];

int MapToSwitch(uint16_t swVal)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	80fb      	strh	r3, [r7, #6]
	if(swVal < SWITCH_LOW_THRESHOLD)
 800052a:	88fb      	ldrh	r3, [r7, #6]
 800052c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000530:	d201      	bcs.n	8000536 <MapToSwitch+0x16>
		return SWITCH_LOW;
 8000532:	2300      	movs	r3, #0
 8000534:	e007      	b.n	8000546 <MapToSwitch+0x26>
	else if(swVal > SWITCH_HIGH_THRESHOLD)
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800053c:	4293      	cmp	r3, r2
 800053e:	d901      	bls.n	8000544 <MapToSwitch+0x24>
		return SWITCH_HIGH;
 8000540:	2302      	movs	r3, #2
 8000542:	e000      	b.n	8000546 <MapToSwitch+0x26>
	else
		return SWITCH_MID;
 8000544:	2301      	movs	r3, #1
}
 8000546:	4618      	mov	r0, r3
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
	...

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f002 ffc6 	bl	80034e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f870 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 fc3e 	bl	8000de0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000564:	f000 fc1c 	bl	8000da0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000568:	f000 f90a 	bl	8000780 <MX_ADC1_Init>
  MX_DAC_Init();
 800056c:	f000 f95a 	bl	8000824 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000570:	f000 f982 	bl	8000878 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000574:	f000 f9b8 	bl	80008e8 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000578:	f000 fa20 	bl	80009bc <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800057c:	f000 fda4 	bl	80010c8 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000580:	f000 fa80 	bl	8000a84 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000584:	f000 faac 	bl	8000ae0 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000588:	f000 fad6 	bl	8000b38 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800058c:	f000 fbb4 	bl	8000cf8 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000590:	f000 fbdc 	bl	8000d4c <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000594:	f000 fa48 	bl	8000a28 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000598:	f000 fafe 	bl	8000b98 <MX_TIM3_Init>
  MX_UART7_Init();
 800059c:	f000 fb7e 	bl	8000c9c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80005a0:	f002 fc63 	bl	8002e6a <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005a8:	f002 fd1e 	bl	8002fe8 <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80005ac:	2100      	movs	r1, #0
 80005ae:	2000      	movs	r0, #0
 80005b0:	f002 faa6 	bl	8002b00 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <main+0xc0>)
 80005b6:	f002 fd07 	bl	8002fc8 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80005ba:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80005be:	f002 fce3 	bl	8002f88 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80005c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005c6:	f002 fcef 	bl	8002fa8 <BSP_LCD_SetBackColor>
  //BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project...", CENTER_MODE);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80005ca:	2104      	movs	r1, #4
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0xc4>)
 80005ce:	f008 fd59 	bl	8009084 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80005d2:	2108      	movs	r1, #8
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0xc4>)
 80005d6:	f008 fd55 	bl	8009084 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005da:	f00e f955 	bl	800e888 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RunMoters */
  RunMotersHandle = osThreadNew(StartDefaultTask, NULL, &RunMoters_attributes);
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <main+0xc8>)
 80005e0:	2100      	movs	r1, #0
 80005e2:	480f      	ldr	r0, [pc, #60]	; (8000620 <main+0xcc>)
 80005e4:	f00e f9ba 	bl	800e95c <osThreadNew>
 80005e8:	4602      	mov	r2, r0
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <main+0xd0>)
 80005ec:	601a      	str	r2, [r3, #0]

  /* creation of Radio_Receiver */
  Radio_ReceiverHandle = osThreadNew(Receive_Radio_Signal, NULL, &Radio_Receiver_attributes);
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <main+0xd4>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <main+0xd8>)
 80005f4:	f00e f9b2 	bl	800e95c <osThreadNew>
 80005f8:	4602      	mov	r2, r0
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <main+0xdc>)
 80005fc:	601a      	str	r2, [r3, #0]

  /* creation of RadioToPercent */
  RadioToPercentHandle = osThreadNew(StartRadioToPercent, NULL, &RadioToPercent_attributes);
 80005fe:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <main+0xe0>)
 8000600:	2100      	movs	r1, #0
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <main+0xe4>)
 8000604:	f00e f9aa 	bl	800e95c <osThreadNew>
 8000608:	4602      	mov	r2, r0
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <main+0xe8>)
 800060c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060e:	f00e f96f 	bl	800e8f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000612:	e7fe      	b.n	8000612 <main+0xbe>
 8000614:	2000004c 	.word	0x2000004c
 8000618:	20004c38 	.word	0x20004c38
 800061c:	08011fdc 	.word	0x08011fdc
 8000620:	08001243 	.word	0x08001243
 8000624:	20004b68 	.word	0x20004b68
 8000628:	08012000 	.word	0x08012000
 800062c:	08001259 	.word	0x08001259
 8000630:	20004aa8 	.word	0x20004aa8
 8000634:	08012024 	.word	0x08012024
 8000638:	080013cd 	.word	0x080013cd
 800063c:	20004b0c 	.word	0x20004b0c

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0aa      	sub	sp, #168	; 0xa8
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f011 fbcb 	bl	8011dea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2258      	movs	r2, #88	; 0x58
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f011 fbbc 	bl	8011dea <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b40      	ldr	r3, [pc, #256]	; (8000778 <SystemClock_Config+0x138>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	4a3f      	ldr	r2, [pc, #252]	; (8000778 <SystemClock_Config+0x138>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	6413      	str	r3, [r2, #64]	; 0x40
 8000682:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemClock_Config+0x138>)
 8000684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	4b3a      	ldr	r3, [pc, #232]	; (800077c <SystemClock_Config+0x13c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a39      	ldr	r2, [pc, #228]	; (800077c <SystemClock_Config+0x13c>)
 8000698:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069c:	6013      	str	r3, [r2, #0]
 800069e:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemClock_Config+0x13c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a6:	603b      	str	r3, [r7, #0]
 80006a8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006aa:	2303      	movs	r3, #3
 80006ac:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ba:	2310      	movs	r3, #16
 80006bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006ce:	230f      	movs	r3, #15
 80006d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006e0:	2305      	movs	r3, #5
 80006e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006f0:	4618      	mov	r0, r3
 80006f2:	f007 fc51 	bl	8007f98 <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006fc:	f000 fe80 	bl	8001400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000704:	2300      	movs	r3, #0
 8000706:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000714:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fe62 	bl	80073e4 <HAL_RCC_ClockConfig>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000726:	f000 fe6b 	bl	8001400 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800072a:	f240 1371 	movw	r3, #369	; 0x171
 800072e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000734:	230c      	movs	r3, #12
 8000736:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000744:	2300      	movs	r3, #0
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000748:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800074c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800074e:	2300      	movs	r3, #0
 8000750:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000752:	2300      	movs	r3, #0
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000756:	2300      	movs	r3, #0
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	4618      	mov	r0, r3
 8000760:	f007 f83e 	bl	80077e0 <HAL_RCCEx_PeriphCLKConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800076a:	f000 fe49 	bl	8001400 <Error_Handler>
  }
}
 800076e:	bf00      	nop
 8000770:	37a8      	adds	r7, #168	; 0xa8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	463b      	mov	r3, r7
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_ADC1_Init+0x98>)
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <MX_ADC1_Init+0x9c>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_ADC1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_ADC1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007a4:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_ADC1_Init+0x98>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_ADC1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_ADC1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0x98>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_ADC1_Init+0x98>)
 80007c0:	4a17      	ldr	r2, [pc, #92]	; (8000820 <MX_ADC1_Init+0xa0>)
 80007c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0x98>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_ADC1_Init+0x98>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0x98>)
 80007da:	2201      	movs	r2, #1
 80007dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <MX_ADC1_Init+0x98>)
 80007e0:	f002 fee6 	bl	80035b0 <HAL_ADC_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 fe09 	bl	8001400 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007ee:	230a      	movs	r3, #10
 80007f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fa:	463b      	mov	r3, r7
 80007fc:	4619      	mov	r1, r3
 80007fe:	4806      	ldr	r0, [pc, #24]	; (8000818 <MX_ADC1_Init+0x98>)
 8000800:	f002 ff1a 	bl	8003638 <HAL_ADC_ConfigChannel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800080a:	f000 fdf9 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20004d78 	.word	0x20004d78
 800081c:	40012000 	.word	0x40012000
 8000820:	0f000001 	.word	0x0f000001

08000824 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_DAC_Init+0x4c>)
 8000834:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MX_DAC_Init+0x50>)
 8000836:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000838:	480d      	ldr	r0, [pc, #52]	; (8000870 <MX_DAC_Init+0x4c>)
 800083a:	f003 fa0d 	bl	8003c58 <HAL_DAC_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000844:	f000 fddc 	bl	8001400 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	4806      	ldr	r0, [pc, #24]	; (8000870 <MX_DAC_Init+0x4c>)
 8000858:	f003 fa74 	bl	8003d44 <HAL_DAC_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000862:	f000 fdcd 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20005088 	.word	0x20005088
 8000874:	40007400 	.word	0x40007400

08000878 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 800087e:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <MX_DFSDM1_Init+0x6c>)
 8000880:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000882:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 8000884:	2201      	movs	r2, #1
 8000886:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 8000890:	2202      	movs	r2, #2
 8000892:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_DFSDM1_Init+0x68>)
 80008cc:	f003 fa92 	bl	8003df4 <HAL_DFSDM_ChannelInit>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008d6:	f000 fd93 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20004a70 	.word	0x20004a70
 80008e4:	40016020 	.word	0x40016020

080008e8 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80008ec:	4b2f      	ldr	r3, [pc, #188]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 80008ee:	4a30      	ldr	r2, [pc, #192]	; (80009b0 <MX_DFSDM2_Init+0xc8>)
 80008f0:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 8000900:	2202      	movs	r2, #2
 8000902:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000904:	4b29      	ldr	r3, [pc, #164]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000910:	4b26      	ldr	r3, [pc, #152]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 8000918:	2202      	movs	r2, #2
 800091a:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800091c:	4b23      	ldr	r3, [pc, #140]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000922:	4b22      	ldr	r3, [pc, #136]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 800092a:	2201      	movs	r2, #1
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 800092e:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 8000930:	2200      	movs	r2, #0
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000934:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800093a:	481c      	ldr	r0, [pc, #112]	; (80009ac <MX_DFSDM2_Init+0xc4>)
 800093c:	f003 fa5a 	bl	8003df4 <HAL_DFSDM_ChannelInit>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000946:	f000 fd5b 	bl	8001400 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 800094c:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <MX_DFSDM2_Init+0xd0>)
 800094e:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 8000952:	2201      	movs	r2, #1
 8000954:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 800095e:	2202      	movs	r2, #2
 8000960:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 8000976:	2202      	movs	r2, #2
 8000978:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 8000988:	2201      	movs	r2, #1
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 8000994:	2200      	movs	r2, #0
 8000996:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000998:	4806      	ldr	r0, [pc, #24]	; (80009b4 <MX_DFSDM2_Init+0xcc>)
 800099a:	f003 fa2b 	bl	8003df4 <HAL_DFSDM_ChannelInit>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 80009a4:	f000 fd2c 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20004c78 	.word	0x20004c78
 80009b0:	40016420 	.word	0x40016420
 80009b4:	20004b6c 	.word	0x20004b6c
 80009b8:	400164e0 	.word	0x400164e0

080009bc <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80009c0:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <MX_FMPI2C1_Init+0x64>)
 80009c4:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 80009c6:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009c8:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <MX_FMPI2C1_Init+0x68>)
 80009ca:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 80009f6:	4809      	ldr	r0, [pc, #36]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 80009f8:	f003 fee0 	bl	80047bc <HAL_FMPI2C_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000a02:	f000 fcfd 	bl	8001400 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_FMPI2C1_Init+0x60>)
 8000a0a:	f003 ff66 	bl	80048da <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f000 fcf4 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000509c 	.word	0x2000509c
 8000a20:	40006000 	.word	0x40006000
 8000a24:	00303d5b 	.word	0x00303d5b

08000a28 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <MX_I2C2_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_I2C2_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_I2C2_Init+0x50>)
 8000a66:	f005 fe1f 	bl	80066a8 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 fcc6 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20004b14 	.word	0x20004b14
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	000186a0 	.word	0x000186a0

08000a84 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <MX_I2S2_Init+0x58>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a94:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000aac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_I2S2_Init+0x54>)
 8000ac6:	f005 ff27 	bl	8006918 <HAL_I2S_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000ad0:	f000 fc96 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20005210 	.word	0x20005210
 8000adc:	40003800 	.word	0x40003800

08000ae0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000ae6:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <MX_QUADSPI_Init+0x54>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_QUADSPI_Init+0x50>)
 8000b1c:	f006 fba0 	bl	8007260 <HAL_QSPI_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b26:	f000 fc6b 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20005258 	.word	0x20005258
 8000b34:	a0001000 	.word	0xa0001000

08000b38 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b3e:	4a15      	ldr	r2, [pc, #84]	; (8000b94 <MX_SDIO_SD_Init+0x5c>)
 8000b40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000b66:	480a      	ldr	r0, [pc, #40]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b68:	f007 fc58 	bl	800841c <HAL_SD_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000b72:	f000 fc45 	bl	8001400 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000b76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_SDIO_SD_Init+0x58>)
 8000b7c:	f007 fe82 	bl	8008884 <HAL_SD_ConfigWideBusOperation>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000b86:	f000 fc3b 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000513c 	.word	0x2000513c
 8000b94:	40012c00 	.word	0x40012c00

08000b98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	; 0x38
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]
 8000bc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bc8:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000bca:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <MX_TIM3_Init+0x100>)
 8000bcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000bce:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000bd0:	220f      	movs	r2, #15
 8000bd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000bda:	4b2e      	ldr	r3, [pc, #184]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000bdc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000be0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bee:	4829      	ldr	r0, [pc, #164]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000bf0:	f008 f9c4 	bl	8008f7c <HAL_TIM_Base_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bfa:	f000 fc01 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4822      	ldr	r0, [pc, #136]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000c0c:	f008 fc46 	bl	800949c <HAL_TIM_ConfigClockSource>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c16:	f000 fbf3 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c1a:	481e      	ldr	r0, [pc, #120]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000c1c:	f008 f9fd 	bl	800901a <HAL_TIM_PWM_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c26:	f000 fbeb 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c32:	f107 0320 	add.w	r3, r7, #32
 8000c36:	4619      	mov	r1, r3
 8000c38:	4816      	ldr	r0, [pc, #88]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000c3a:	f009 f81f 	bl	8009c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c44:	f000 fbdc 	bl	8001400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c48:	2360      	movs	r3, #96	; 0x60
 8000c4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000c4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000c62:	f008 fb55 	bl	8009310 <HAL_TIM_PWM_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c6c:	f000 fbc8 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2208      	movs	r2, #8
 8000c74:	4619      	mov	r1, r3
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000c78:	f008 fb4a 	bl	8009310 <HAL_TIM_PWM_ConfigChannel>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c82:	f000 fbbd 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <MX_TIM3_Init+0xfc>)
 8000c88:	f001 f862 	bl	8001d50 <HAL_TIM_MspPostInit>

}
 8000c8c:	bf00      	nop
 8000c8e:	3738      	adds	r7, #56	; 0x38
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20004c38 	.word	0x20004c38
 8000c98:	40000400 	.word	0x40000400

08000c9c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_UART7_Init+0x50>)
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <MX_UART7_Init+0x54>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_UART7_Init+0x50>)
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <MX_UART7_Init+0x58>)
 8000caa:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_UART7_Init+0x50>)
 8000cae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cb2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <MX_UART7_Init+0x50>)
 8000cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cba:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_UART7_Init+0x50>)
 8000cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_UART7_Init+0x50>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_UART7_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_UART7_Init+0x50>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_UART7_Init+0x50>)
 8000cd8:	f009 f860 	bl	8009d9c <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8000ce2:	f000 fb8d 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20004acc 	.word	0x20004acc
 8000cf0:	40007800 	.word	0x40007800
 8000cf4:	000186a0 	.word	0x000186a0

08000cf8 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <MX_UART10_Init+0x50>)
 8000d00:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000d04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d08:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000d1e:	220c      	movs	r2, #12
 8000d20:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d22:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <MX_UART10_Init+0x4c>)
 8000d30:	f009 f834 	bl	8009d9c <HAL_UART_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000d3a:	f000 fb61 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20004ba8 	.word	0x20004ba8
 8000d48:	40011c00 	.word	0x40011c00

08000d4c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <MX_USART6_UART_Init+0x50>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_USART6_UART_Init+0x4c>)
 8000d84:	f009 f80a 	bl	8009d9c <HAL_UART_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d8e:	f000 fb37 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200051c0 	.word	0x200051c0
 8000d9c:	40011400 	.word	0x40011400

08000da0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_DMA_Init+0x3c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <MX_DMA_Init+0x3c>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_DMA_Init+0x3c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200e      	movs	r0, #14
 8000dc8:	f002 ff1c 	bl	8003c04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dcc:	200e      	movs	r0, #14
 8000dce:	f002 ff35 	bl	8003c3c <HAL_NVIC_EnableIRQ>

}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
 8000dfa:	4bab      	ldr	r3, [pc, #684]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4aaa      	ldr	r2, [pc, #680]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e00:	f043 0310 	orr.w	r3, r3, #16
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4ba8      	ldr	r3, [pc, #672]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0310 	and.w	r3, r3, #16
 8000e0e:	623b      	str	r3, [r7, #32]
 8000e10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
 8000e16:	4ba4      	ldr	r3, [pc, #656]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4aa3      	ldr	r2, [pc, #652]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4ba1      	ldr	r3, [pc, #644]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	61fb      	str	r3, [r7, #28]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
 8000e32:	4b9d      	ldr	r3, [pc, #628]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a9c      	ldr	r2, [pc, #624]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e38:	f043 0320 	orr.w	r3, r3, #32
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b9a      	ldr	r3, [pc, #616]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0320 	and.w	r3, r3, #32
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	4b96      	ldr	r3, [pc, #600]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a95      	ldr	r2, [pc, #596]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b93      	ldr	r3, [pc, #588]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b8f      	ldr	r3, [pc, #572]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a8e      	ldr	r2, [pc, #568]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b8c      	ldr	r3, [pc, #560]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b88      	ldr	r3, [pc, #544]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a87      	ldr	r2, [pc, #540]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b85      	ldr	r3, [pc, #532]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b81      	ldr	r3, [pc, #516]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a80      	ldr	r2, [pc, #512]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b7e      	ldr	r3, [pc, #504]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b7a      	ldr	r3, [pc, #488]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a79      	ldr	r2, [pc, #484]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000ec4:	f043 0308 	orr.w	r3, r3, #8
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b77      	ldr	r3, [pc, #476]	; (80010a8 <MX_GPIO_Init+0x2c8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0308 	and.w	r3, r3, #8
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2138      	movs	r1, #56	; 0x38
 8000eda:	4874      	ldr	r0, [pc, #464]	; (80010ac <MX_GPIO_Init+0x2cc>)
 8000edc:	f003 feda 	bl	8004c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2120      	movs	r1, #32
 8000ee4:	4872      	ldr	r0, [pc, #456]	; (80010b0 <MX_GPIO_Init+0x2d0>)
 8000ee6:	f003 fed5 	bl	8004c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000ef0:	4870      	ldr	r0, [pc, #448]	; (80010b4 <MX_GPIO_Init+0x2d4>)
 8000ef2:	f003 fecf 	bl	8004c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000efc:	486e      	ldr	r0, [pc, #440]	; (80010b8 <MX_GPIO_Init+0x2d8>)
 8000efe:	f003 fec9 	bl	8004c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f08:	486c      	ldr	r0, [pc, #432]	; (80010bc <MX_GPIO_Init+0x2dc>)
 8000f0a:	f003 fec3 	bl	8004c94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000f0e:	2338      	movs	r3, #56	; 0x38
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	4861      	ldr	r0, [pc, #388]	; (80010ac <MX_GPIO_Init+0x2cc>)
 8000f26:	f003 fd23 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000f2a:	2340      	movs	r3, #64	; 0x40
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4619      	mov	r1, r3
 8000f44:	4859      	ldr	r0, [pc, #356]	; (80010ac <MX_GPIO_Init+0x2cc>)
 8000f46:	f003 fd13 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f64:	4619      	mov	r1, r3
 8000f66:	4856      	ldr	r0, [pc, #344]	; (80010c0 <MX_GPIO_Init+0x2e0>)
 8000f68:	f003 fd02 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f70:	4b54      	ldr	r3, [pc, #336]	; (80010c4 <MX_GPIO_Init+0x2e4>)
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	484c      	ldr	r0, [pc, #304]	; (80010b0 <MX_GPIO_Init+0x2d0>)
 8000f80:	f003 fcf6 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000f84:	2301      	movs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f88:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <MX_GPIO_Init+0x2e4>)
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4849      	ldr	r0, [pc, #292]	; (80010bc <MX_GPIO_Init+0x2dc>)
 8000f98:	f003 fcea 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000f9c:	2320      	movs	r3, #32
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	483f      	ldr	r0, [pc, #252]	; (80010b0 <MX_GPIO_Init+0x2d0>)
 8000fb4:	f003 fcdc 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fbe:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <MX_GPIO_Init+0x2e4>)
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fca:	4619      	mov	r1, r3
 8000fcc:	483c      	ldr	r0, [pc, #240]	; (80010c0 <MX_GPIO_Init+0x2e0>)
 8000fce:	f003 fccf 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	4831      	ldr	r0, [pc, #196]	; (80010b4 <MX_GPIO_Init+0x2d4>)
 8000ff0:	f003 fcbe 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin PB8 */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8;
 8000ff4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	4829      	ldr	r0, [pc, #164]	; (80010b4 <MX_GPIO_Init+0x2d4>)
 800100e:	f003 fcaf 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001012:	f248 0380 	movw	r3, #32896	; 0x8080
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001018:	4b2a      	ldr	r3, [pc, #168]	; (80010c4 <MX_GPIO_Init+0x2e4>)
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	4824      	ldr	r0, [pc, #144]	; (80010b8 <MX_GPIO_Init+0x2d8>)
 8001028:	f003 fca2 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13;
 800102c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	481c      	ldr	r0, [pc, #112]	; (80010b8 <MX_GPIO_Init+0x2d8>)
 8001046:	f003 fc93 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800104a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4816      	ldr	r0, [pc, #88]	; (80010bc <MX_GPIO_Init+0x2dc>)
 8001064:	f003 fc84 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin;
 8001068:	2310      	movs	r3, #16
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001078:	2306      	movs	r3, #6
 800107a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D12_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001080:	4619      	mov	r1, r3
 8001082:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MX_GPIO_Init+0x2d4>)
 8001084:	f003 fc74 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001088:	2340      	movs	r3, #64	; 0x40
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_GPIO_Init+0x2e4>)
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_GPIO_Init+0x2d4>)
 800109c:	f003 fc68 	bl	8004970 <HAL_GPIO_Init>

}
 80010a0:	bf00      	nop
 80010a2:	3738      	adds	r7, #56	; 0x38
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020400 	.word	0x40020400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40021400 	.word	0x40021400
 80010c4:	10110000 	.word	0x10110000

080010c8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	615a      	str	r2, [r3, #20]
 80010de:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010e0:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <MX_FSMC_Init+0x158>)
 80010e2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010e6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010e8:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <MX_FSMC_Init+0x158>)
 80010ea:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <MX_FSMC_Init+0x15c>)
 80010ec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010ee:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <MX_FSMC_Init+0x158>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <MX_FSMC_Init+0x158>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010fa:	4b49      	ldr	r3, [pc, #292]	; (8001220 <MX_FSMC_Init+0x158>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001100:	4b47      	ldr	r3, [pc, #284]	; (8001220 <MX_FSMC_Init+0x158>)
 8001102:	2210      	movs	r2, #16
 8001104:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001106:	4b46      	ldr	r3, [pc, #280]	; (8001220 <MX_FSMC_Init+0x158>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800110c:	4b44      	ldr	r3, [pc, #272]	; (8001220 <MX_FSMC_Init+0x158>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001112:	4b43      	ldr	r3, [pc, #268]	; (8001220 <MX_FSMC_Init+0x158>)
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001118:	4b41      	ldr	r3, [pc, #260]	; (8001220 <MX_FSMC_Init+0x158>)
 800111a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800111e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001120:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <MX_FSMC_Init+0x158>)
 8001122:	2200      	movs	r2, #0
 8001124:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001126:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <MX_FSMC_Init+0x158>)
 8001128:	2200      	movs	r2, #0
 800112a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <MX_FSMC_Init+0x158>)
 800112e:	2200      	movs	r2, #0
 8001130:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <MX_FSMC_Init+0x158>)
 8001134:	2200      	movs	r2, #0
 8001136:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001138:	4b39      	ldr	r3, [pc, #228]	; (8001220 <MX_FSMC_Init+0x158>)
 800113a:	2200      	movs	r2, #0
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <MX_FSMC_Init+0x158>)
 8001140:	2200      	movs	r2, #0
 8001142:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001144:	4b36      	ldr	r3, [pc, #216]	; (8001220 <MX_FSMC_Init+0x158>)
 8001146:	2200      	movs	r2, #0
 8001148:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800114a:	230f      	movs	r3, #15
 800114c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800114e:	230f      	movs	r3, #15
 8001150:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001152:	23ff      	movs	r3, #255	; 0xff
 8001154:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001156:	230f      	movs	r3, #15
 8001158:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800115a:	2310      	movs	r3, #16
 800115c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800115e:	2311      	movs	r3, #17
 8001160:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	482c      	ldr	r0, [pc, #176]	; (8001220 <MX_FSMC_Init+0x158>)
 800116e:	f007 fec1 	bl	8008ef4 <HAL_SRAM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001178:	f000 f942 	bl	8001400 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800117c:	4b2a      	ldr	r3, [pc, #168]	; (8001228 <MX_FSMC_Init+0x160>)
 800117e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001182:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <MX_FSMC_Init+0x160>)
 8001186:	4a27      	ldr	r2, [pc, #156]	; (8001224 <MX_FSMC_Init+0x15c>)
 8001188:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800118a:	4b27      	ldr	r3, [pc, #156]	; (8001228 <MX_FSMC_Init+0x160>)
 800118c:	2204      	movs	r2, #4
 800118e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001190:	4b25      	ldr	r3, [pc, #148]	; (8001228 <MX_FSMC_Init+0x160>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <MX_FSMC_Init+0x160>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <MX_FSMC_Init+0x160>)
 800119e:	2210      	movs	r2, #16
 80011a0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <MX_FSMC_Init+0x160>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <MX_FSMC_Init+0x160>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011ae:	4b1e      	ldr	r3, [pc, #120]	; (8001228 <MX_FSMC_Init+0x160>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <MX_FSMC_Init+0x160>)
 80011b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_FSMC_Init+0x160>)
 80011be:	2200      	movs	r2, #0
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <MX_FSMC_Init+0x160>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <MX_FSMC_Init+0x160>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_FSMC_Init+0x160>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_FSMC_Init+0x160>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_FSMC_Init+0x160>)
 80011dc:	2200      	movs	r2, #0
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_FSMC_Init+0x160>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80011e6:	230f      	movs	r3, #15
 80011e8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011ea:	230f      	movs	r3, #15
 80011ec:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80011ee:	23ff      	movs	r3, #255	; 0xff
 80011f0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011f2:	230f      	movs	r3, #15
 80011f4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011f6:	2310      	movs	r3, #16
 80011f8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011fa:	2311      	movs	r3, #17
 80011fc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <MX_FSMC_Init+0x160>)
 800120a:	f007 fe73 	bl	8008ef4 <HAL_SRAM_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8001214:	f000 f8f4 	bl	8001400 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20004be8 	.word	0x20004be8
 8001224:	a0000104 	.word	0xa0000104
 8001228:	200050ec 	.word	0x200050ec

0800122c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	__NOP(); //checks if we receive all data
 8001234:	bf00      	nop
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800124a:	f010 fa87 	bl	801175c <MX_USB_HOST_Init>
	  //itoa(motor1Val,buffer,10);
	  //BSP_LCD_SetTextColor(LCD_COLOR_RED);
	  //BSP_LCD_DisplayStringAtLine(1, buffer);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,motor1Val);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,motor1Val);
	  osDelay(1);
 800124e:	2001      	movs	r0, #1
 8001250:	f00d fc2a 	bl	800eaa8 <osDelay>
 8001254:	e7fb      	b.n	800124e <StartDefaultTask+0xc>
	...

08001258 <Receive_Radio_Signal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receive_Radio_Signal */
void Receive_Radio_Signal(void *argument)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09c      	sub	sp, #112	; 0x70
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
	 //char buffer[20];
	  //itoa(motor1Val,buffer,10);
	SBUS sbus;
	sbus.arm = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sbus.disarm = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	bool connection = false;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	int arm = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	64fb      	str	r3, [r7, #76]	; 0x4c
	int preArm = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	64bb      	str	r3, [r7, #72]	; 0x48
	int count = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	66fb      	str	r3, [r7, #108]	; 0x6c
  for(;;)
  {
		if (RC_READ_SBUS(&huart7 ,&sbus)) {
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	4619      	mov	r1, r3
 8001284:	4849      	ldr	r0, [pc, #292]	; (80013ac <Receive_Radio_Signal+0x154>)
 8001286:	f001 ff97 	bl	80031b8 <RC_READ_SBUS>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d039      	beq.n	8001304 <Receive_Radio_Signal+0xac>


			for(int i =0; i < sizeof(ChannelVals); i++ ) {
 8001290:	2300      	movs	r3, #0
 8001292:	66bb      	str	r3, [r7, #104]	; 0x68
 8001294:	e00d      	b.n	80012b2 <Receive_Radio_Signal+0x5a>
			ChannelVals[i] = sbus.PWM_US_RC_CH[i];
 8001296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800129e:	4413      	add	r3, r2
 80012a0:	f833 1c68 	ldrh.w	r1, [r3, #-104]
 80012a4:	4a42      	ldr	r2, [pc, #264]	; (80013b0 <Receive_Radio_Signal+0x158>)
 80012a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i =0; i < sizeof(ChannelVals); i++ ) {
 80012ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ae:	3301      	adds	r3, #1
 80012b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80012b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d9ee      	bls.n	8001296 <Receive_Radio_Signal+0x3e>
			}

			if(MapToSwitch(ChannelVals[RX_ARM]) == SWITCH_HIGH)
 80012b8:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <Receive_Radio_Signal+0x158>)
 80012ba:	891b      	ldrh	r3, [r3, #8]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f92f 	bl	8000520 <MapToSwitch>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d102      	bne.n	80012ce <Receive_Radio_Signal+0x76>
				FlagBuffer[ARM_FG] = 1;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <Receive_Radio_Signal+0x15c>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]


			//debug stuff
			position1Vals[count] = sbus.PWM_US_RC_CH[0];
 80012ce:	893b      	ldrh	r3, [r7, #8]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4a39      	ldr	r2, [pc, #228]	; (80013b8 <Receive_Radio_Signal+0x160>)
 80012d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position2Vals[count] = sbus.PWM_US_RC_CH[1];
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	4619      	mov	r1, r3
 80012de:	4a37      	ldr	r2, [pc, #220]	; (80013bc <Receive_Radio_Signal+0x164>)
 80012e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position3Vals[count] = sbus.PWM_US_RC_CH[2];
 80012e6:	89bb      	ldrh	r3, [r7, #12]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4a35      	ldr	r2, [pc, #212]	; (80013c0 <Receive_Radio_Signal+0x168>)
 80012ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position4Vals[count] = sbus.PWM_US_RC_CH[3];
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4a33      	ldr	r2, [pc, #204]	; (80013c4 <Receive_Radio_Signal+0x16c>)
 80012f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80012fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			count++;
 80012fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001300:	3301      	adds	r3, #1
 8001302:	66fb      	str	r3, [r7, #108]	; 0x6c
			//end debug stuff
	  	}

		//more debug stuff
		if(count >= 50) {
 8001304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001306:	2b31      	cmp	r3, #49	; 0x31
 8001308:	ddb9      	ble.n	800127e <Receive_Radio_Signal+0x26>
			count = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	66fb      	str	r3, [r7, #108]	; 0x6c
			int tot1 = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	667b      	str	r3, [r7, #100]	; 0x64
			int tot2 = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	663b      	str	r3, [r7, #96]	; 0x60
			int tot3 = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	65fb      	str	r3, [r7, #92]	; 0x5c
			int tot4 = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	65bb      	str	r3, [r7, #88]	; 0x58
			for(int i=0; i< 50; i++) {
 800131e:	2300      	movs	r3, #0
 8001320:	657b      	str	r3, [r7, #84]	; 0x54
 8001322:	e01e      	b.n	8001362 <Receive_Radio_Signal+0x10a>
				tot1 += position1Vals[i];
 8001324:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <Receive_Radio_Signal+0x160>)
 8001326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800132e:	4413      	add	r3, r2
 8001330:	667b      	str	r3, [r7, #100]	; 0x64
				tot2 += position2Vals[i];
 8001332:	4a22      	ldr	r2, [pc, #136]	; (80013bc <Receive_Radio_Signal+0x164>)
 8001334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800133c:	4413      	add	r3, r2
 800133e:	663b      	str	r3, [r7, #96]	; 0x60
				tot3 += position3Vals[i];
 8001340:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <Receive_Radio_Signal+0x168>)
 8001342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800134a:	4413      	add	r3, r2
 800134c:	65fb      	str	r3, [r7, #92]	; 0x5c
				tot4 += position4Vals[i];
 800134e:	4a1d      	ldr	r2, [pc, #116]	; (80013c4 <Receive_Radio_Signal+0x16c>)
 8001350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001358:	4413      	add	r3, r2
 800135a:	65bb      	str	r3, [r7, #88]	; 0x58
			for(int i=0; i< 50; i++) {
 800135c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800135e:	3301      	adds	r3, #1
 8001360:	657b      	str	r3, [r7, #84]	; 0x54
 8001362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001364:	2b31      	cmp	r3, #49	; 0x31
 8001366:	dddd      	ble.n	8001324 <Receive_Radio_Signal+0xcc>
			}
			tot1 = tot1 / 50;
 8001368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <Receive_Radio_Signal+0x170>)
 800136c:	fb82 1203 	smull	r1, r2, r2, r3
 8001370:	1112      	asrs	r2, r2, #4
 8001372:	17db      	asrs	r3, r3, #31
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	667b      	str	r3, [r7, #100]	; 0x64
			tot2 = tot2 / 50;
 8001378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800137a:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <Receive_Radio_Signal+0x170>)
 800137c:	fb82 1203 	smull	r1, r2, r2, r3
 8001380:	1112      	asrs	r2, r2, #4
 8001382:	17db      	asrs	r3, r3, #31
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	663b      	str	r3, [r7, #96]	; 0x60
			tot3 = tot3 / 50;
 8001388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <Receive_Radio_Signal+0x170>)
 800138c:	fb82 1203 	smull	r1, r2, r2, r3
 8001390:	1112      	asrs	r2, r2, #4
 8001392:	17db      	asrs	r3, r3, #31
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	65fb      	str	r3, [r7, #92]	; 0x5c
			tot4 = tot4 / 50;
 8001398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <Receive_Radio_Signal+0x170>)
 800139c:	fb82 1203 	smull	r1, r2, r2, r3
 80013a0:	1112      	asrs	r2, r2, #4
 80013a2:	17db      	asrs	r3, r3, #31
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	65bb      	str	r3, [r7, #88]	; 0x58
			__NOP();
 80013a8:	bf00      	nop
		if (RC_READ_SBUS(&huart7 ,&sbus)) {
 80013aa:	e768      	b.n	800127e <Receive_Radio_Signal+0x26>
 80013ac:	20004acc 	.word	0x20004acc
 80013b0:	20005200 	.word	0x20005200
 80013b4:	20004e20 	.word	0x20004e20
 80013b8:	20004cb0 	.word	0x20004cb0
 80013bc:	20004ef8 	.word	0x20004ef8
 80013c0:	20004e30 	.word	0x20004e30
 80013c4:	20004fc0 	.word	0x20004fc0
 80013c8:	51eb851f 	.word	0x51eb851f

080013cc <StartRadioToPercent>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadioToPercent */
void StartRadioToPercent(void *argument)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRadioToPercent */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013d4:	2001      	movs	r0, #1
 80013d6:	f00d fb67 	bl	800eaa8 <osDelay>
 80013da:	e7fb      	b.n	80013d4 <StartRadioToPercent+0x8>

080013dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013ee:	f002 f89d 	bl	800352c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40001000 	.word	0x40001000

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_MspInit+0x4c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a31      	ldr	r2, [pc, #196]	; (8001544 <HAL_ADC_MspInit+0xe4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d15b      	bne.n	800153a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	4b30      	ldr	r3, [pc, #192]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	61bb      	str	r3, [r7, #24]
 800149c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	4b29      	ldr	r3, [pc, #164]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a28      	ldr	r2, [pc, #160]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b26      	ldr	r3, [pc, #152]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a21      	ldr	r2, [pc, #132]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a1a      	ldr	r2, [pc, #104]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_ADC_MspInit+0xe8>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80014f2:	2311      	movs	r3, #17
 80014f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	4811      	ldr	r0, [pc, #68]	; (800154c <HAL_ADC_MspInit+0xec>)
 8001506:	f003 fa33 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800150a:	2326      	movs	r3, #38	; 0x26
 800150c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800150e:	2303      	movs	r3, #3
 8001510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <HAL_ADC_MspInit+0xf0>)
 800151e:	f003 fa27 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001522:	2302      	movs	r3, #2
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4807      	ldr	r0, [pc, #28]	; (8001554 <HAL_ADC_MspInit+0xf4>)
 8001536:	f003 fa1b 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	; 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40012000 	.word	0x40012000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020800 	.word	0x40020800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400

08001558 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	; 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <HAL_DAC_MspInit+0x8c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d12f      	bne.n	80015da <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_DAC_MspInit+0x90>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_DAC_MspInit+0x90>)
 8001584:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_DAC_MspInit+0x90>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_DAC_MspInit+0x90>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a12      	ldr	r2, [pc, #72]	; (80015e8 <HAL_DAC_MspInit+0x90>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_DAC_MspInit+0x90>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80015b2:	2310      	movs	r3, #16
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <HAL_DAC_MspInit+0x94>)
 80015c6:	f003 f9d3 	bl	8004970 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	2036      	movs	r0, #54	; 0x36
 80015d0:	f002 fb18 	bl	8003c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015d4:	2036      	movs	r0, #54	; 0x36
 80015d6:	f002 fb31 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40007400 	.word	0x40007400
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a77      	ldr	r2, [pc, #476]	; (80017ec <HAL_DFSDM_ChannelMspInit+0x1fc>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00e      	beq.n	8001630 <HAL_DFSDM_ChannelMspInit+0x40>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a76      	ldr	r2, [pc, #472]	; (80017f0 <HAL_DFSDM_ChannelMspInit+0x200>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d009      	beq.n	8001630 <HAL_DFSDM_ChannelMspInit+0x40>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a74      	ldr	r2, [pc, #464]	; (80017f4 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d004      	beq.n	8001630 <HAL_DFSDM_ChannelMspInit+0x40>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a73      	ldr	r2, [pc, #460]	; (80017f8 <HAL_DFSDM_ChannelMspInit+0x208>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d154      	bne.n	80016da <HAL_DFSDM_ChannelMspInit+0xea>
 8001630:	4b72      	ldr	r3, [pc, #456]	; (80017fc <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d150      	bne.n	80016da <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
 800163c:	4b70      	ldr	r3, [pc, #448]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 800163e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001640:	4a6f      	ldr	r2, [pc, #444]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001646:	6453      	str	r3, [r2, #68]	; 0x44
 8001648:	4b6d      	ldr	r3, [pc, #436]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001650:	623b      	str	r3, [r7, #32]
 8001652:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	4b69      	ldr	r3, [pc, #420]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 800165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165c:	4a68      	ldr	r2, [pc, #416]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	4b62      	ldr	r3, [pc, #392]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	4a61      	ldr	r2, [pc, #388]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 800167a:	f043 0308 	orr.w	r3, r3, #8
 800167e:	6313      	str	r3, [r2, #48]	; 0x30
 8001680:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	61bb      	str	r3, [r7, #24]
 800168a:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 800168c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800169e:	2306      	movs	r3, #6
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4856      	ldr	r0, [pc, #344]	; (8001804 <HAL_DFSDM_ChannelMspInit+0x214>)
 80016aa:	f003 f961 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80016ae:	2340      	movs	r3, #64	; 0x40
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80016be:	2306      	movs	r3, #6
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c6:	4619      	mov	r1, r3
 80016c8:	484f      	ldr	r0, [pc, #316]	; (8001808 <HAL_DFSDM_ChannelMspInit+0x218>)
 80016ca:	f003 f951 	bl	8004970 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80016ce:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <HAL_DFSDM_ChannelMspInit+0x20c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a49      	ldr	r2, [pc, #292]	; (80017fc <HAL_DFSDM_ChannelMspInit+0x20c>)
 80016d6:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80016d8:	e084      	b.n	80017e4 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a43      	ldr	r2, [pc, #268]	; (80017ec <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d07f      	beq.n	80017e4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a41      	ldr	r2, [pc, #260]	; (80017f0 <HAL_DFSDM_ChannelMspInit+0x200>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d07a      	beq.n	80017e4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a40      	ldr	r2, [pc, #256]	; (80017f4 <HAL_DFSDM_ChannelMspInit+0x204>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d075      	beq.n	80017e4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a3e      	ldr	r2, [pc, #248]	; (80017f8 <HAL_DFSDM_ChannelMspInit+0x208>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d070      	beq.n	80017e4 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001702:	4b42      	ldr	r3, [pc, #264]	; (800180c <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d16c      	bne.n	80017e4 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a3b      	ldr	r2, [pc, #236]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001714:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a34      	ldr	r2, [pc, #208]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a2d      	ldr	r2, [pc, #180]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b2b      	ldr	r3, [pc, #172]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a26      	ldr	r2, [pc, #152]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177e:	2302      	movs	r3, #2
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 800178a:	2307      	movs	r3, #7
 800178c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	481b      	ldr	r0, [pc, #108]	; (8001804 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001796:	f003 f8eb 	bl	8004970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 800179a:	2304      	movs	r3, #4
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80017aa:	2303      	movs	r3, #3
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b2:	4619      	mov	r1, r3
 80017b4:	4814      	ldr	r0, [pc, #80]	; (8001808 <HAL_DFSDM_ChannelMspInit+0x218>)
 80017b6:	f003 f8db 	bl	8004970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80017ca:	2306      	movs	r3, #6
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	480e      	ldr	r0, [pc, #56]	; (8001810 <HAL_DFSDM_ChannelMspInit+0x220>)
 80017d6:	f003 f8cb 	bl	8004970 <HAL_GPIO_Init>
  DFSDM2_Init++;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_DFSDM_ChannelMspInit+0x21c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_DFSDM_ChannelMspInit+0x21c>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3738      	adds	r7, #56	; 0x38
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40016000 	.word	0x40016000
 80017f0:	40016020 	.word	0x40016020
 80017f4:	40016040 	.word	0x40016040
 80017f8:	40016060 	.word	0x40016060
 80017fc:	20000108 	.word	0x20000108
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020c00 	.word	0x40020c00
 800180c:	2000010c 	.word	0x2000010c
 8001810:	40020400 	.word	0x40020400

08001814 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <HAL_FMPI2C_MspInit+0x84>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d12b      	bne.n	800188e <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_FMPI2C_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_FMPI2C_MspInit+0x88>)
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_FMPI2C_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0304 	and.w	r3, r3, #4
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001852:	23c0      	movs	r3, #192	; 0xc0
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001856:	2312      	movs	r3, #18
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800185a:	2301      	movs	r3, #1
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001862:	2304      	movs	r3, #4
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <HAL_FMPI2C_MspInit+0x8c>)
 800186e:	f003 f87f 	bl	8004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_FMPI2C_MspInit+0x88>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_FMPI2C_MspInit+0x88>)
 800187c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001880:	6413      	str	r3, [r2, #64]	; 0x40
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_FMPI2C_MspInit+0x88>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40006000 	.word	0x40006000
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020800 	.word	0x40020800

080018a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_I2C_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12c      	bne.n	8001920 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_I2C_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_I2C_MspInit+0x88>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_I2C_MspInit+0x88>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80018e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e8:	2312      	movs	r3, #18
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018f4:	2304      	movs	r3, #4
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	480c      	ldr	r0, [pc, #48]	; (8001930 <HAL_I2C_MspInit+0x8c>)
 8001900:	f003 f836 	bl	8004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_I2C_MspInit+0x88>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_I2C_MspInit+0x88>)
 800190e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001912:	6413      	str	r3, [r2, #64]	; 0x40
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_I2C_MspInit+0x88>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3728      	adds	r7, #40	; 0x28
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40005800 	.word	0x40005800
 800192c:	40023800 	.word	0x40023800
 8001930:	40020400 	.word	0x40020400

08001934 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a4f      	ldr	r2, [pc, #316]	; (8001a90 <HAL_I2S_MspInit+0x15c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	f040 8097 	bne.w	8001a86 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	4a4c      	ldr	r2, [pc, #304]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001966:	6413      	str	r3, [r2, #64]	; 0x40
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	4a45      	ldr	r2, [pc, #276]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	6313      	str	r3, [r2, #48]	; 0x30
 8001984:	4b43      	ldr	r3, [pc, #268]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	4b3f      	ldr	r3, [pc, #252]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	4a3e      	ldr	r2, [pc, #248]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6313      	str	r3, [r2, #48]	; 0x30
 80019a0:	4b3c      	ldr	r3, [pc, #240]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	f003 0301 	and.w	r3, r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	4a37      	ldr	r2, [pc, #220]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 80019b6:	f043 0308 	orr.w	r3, r3, #8
 80019ba:	6313      	str	r3, [r2, #48]	; 0x30
 80019bc:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	f003 0308 	and.w	r3, r3, #8
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a30      	ldr	r2, [pc, #192]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 80019d2:	f043 0302 	orr.w	r3, r3, #2
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <HAL_I2S_MspInit+0x160>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80019e4:	2304      	movs	r3, #4
 80019e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80019f4:	2306      	movs	r3, #6
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	4619      	mov	r1, r3
 80019fe:	4826      	ldr	r0, [pc, #152]	; (8001a98 <HAL_I2S_MspInit+0x164>)
 8001a00:	f002 ffb6 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001a04:	2308      	movs	r3, #8
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a14:	2305      	movs	r3, #5
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481e      	ldr	r0, [pc, #120]	; (8001a98 <HAL_I2S_MspInit+0x164>)
 8001a20:	f002 ffa6 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001a24:	2308      	movs	r3, #8
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a34:	2305      	movs	r3, #5
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4817      	ldr	r0, [pc, #92]	; (8001a9c <HAL_I2S_MspInit+0x168>)
 8001a40:	f002 ff96 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001a44:	2308      	movs	r3, #8
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a54:	2305      	movs	r3, #5
 8001a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 031c 	add.w	r3, r7, #28
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4810      	ldr	r0, [pc, #64]	; (8001aa0 <HAL_I2S_MspInit+0x16c>)
 8001a60:	f002 ff86 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001a64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a76:	2305      	movs	r3, #5
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4808      	ldr	r0, [pc, #32]	; (8001aa4 <HAL_I2S_MspInit+0x170>)
 8001a82:	f002 ff75 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3730      	adds	r7, #48	; 0x30
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40003800 	.word	0x40003800
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40020800 	.word	0x40020800
 8001a9c:	40020000 	.word	0x40020000
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40020400 	.word	0x40020400

08001aa8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08e      	sub	sp, #56	; 0x38
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a56      	ldr	r2, [pc, #344]	; (8001c20 <HAL_QSPI_MspInit+0x178>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	f040 80a6 	bne.w	8001c18 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	4a53      	ldr	r2, [pc, #332]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	6393      	str	r3, [r2, #56]	; 0x38
 8001adc:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001af2:	f043 0310 	orr.w	r3, r3, #16
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	4b46      	ldr	r3, [pc, #280]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	4a45      	ldr	r2, [pc, #276]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b0e:	f043 0320 	orr.w	r3, r3, #32
 8001b12:	6313      	str	r3, [r2, #48]	; 0x30
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4a3e      	ldr	r2, [pc, #248]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b30:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4a37      	ldr	r2, [pc, #220]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4c:	4b35      	ldr	r3, [pc, #212]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	4b31      	ldr	r3, [pc, #196]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	4a30      	ldr	r2, [pc, #192]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b66:	6313      	str	r3, [r2, #48]	; 0x30
 8001b68:	4b2e      	ldr	r3, [pc, #184]	; (8001c24 <HAL_QSPI_MspInit+0x17c>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001b74:	2304      	movs	r3, #4
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001b84:	2309      	movs	r3, #9
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4826      	ldr	r0, [pc, #152]	; (8001c28 <HAL_QSPI_MspInit+0x180>)
 8001b90:	f002 feee 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001b94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bae:	4619      	mov	r1, r3
 8001bb0:	481e      	ldr	r0, [pc, #120]	; (8001c2c <HAL_QSPI_MspInit+0x184>)
 8001bb2:	f002 fedd 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001bc6:	2309      	movs	r3, #9
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4817      	ldr	r0, [pc, #92]	; (8001c30 <HAL_QSPI_MspInit+0x188>)
 8001bd2:	f002 fecd 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001bd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001be8:	2309      	movs	r3, #9
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4810      	ldr	r0, [pc, #64]	; (8001c34 <HAL_QSPI_MspInit+0x18c>)
 8001bf4:	f002 febc 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001bf8:	2340      	movs	r3, #64	; 0x40
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c08:	230a      	movs	r3, #10
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c10:	4619      	mov	r1, r3
 8001c12:	4809      	ldr	r0, [pc, #36]	; (8001c38 <HAL_QSPI_MspInit+0x190>)
 8001c14:	f002 feac 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001c18:	bf00      	nop
 8001c1a:	3738      	adds	r7, #56	; 0x38
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	a0001000 	.word	0xa0001000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40021400 	.word	0x40021400
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020c00 	.word	0x40020c00
 8001c38:	40021800 	.word	0x40021800

08001c3c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <HAL_SD_MspInit+0xc0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d14a      	bne.n	8001cf4 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001c68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a1f      	ldr	r2, [pc, #124]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b1d      	ldr	r3, [pc, #116]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca6:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_SD_MspInit+0xc4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480d      	ldr	r0, [pc, #52]	; (8001d04 <HAL_SD_MspInit+0xc8>)
 8001cce:	f002 fe4f 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001cd2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001cd6:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	; (8001d08 <HAL_SD_MspInit+0xcc>)
 8001cf0:	f002 fe3e 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40012c00 	.word	0x40012c00
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020800 	.word	0x40020800

08001d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_TIM_Base_MspInit+0x3c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10d      	bne.n	8001d3a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_TIM_Base_MspInit+0x40>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_TIM_Base_MspInit+0x40>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_TIM_Base_MspInit+0x40>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_TIM_MspPostInit+0x68>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d11d      	bne.n	8001dae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_TIM_MspPostInit+0x6c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <HAL_TIM_MspPostInit+0x6c>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_TIM_MspPostInit+0x6c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001d8e:	2321      	movs	r3, #33	; 0x21
 8001d90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d92:	2302      	movs	r3, #2
 8001d94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	4619      	mov	r1, r3
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <HAL_TIM_MspPostInit+0x70>)
 8001daa:	f002 fde1 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dae:	bf00      	nop
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020400 	.word	0x40020400

08001dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08e      	sub	sp, #56	; 0x38
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a67      	ldr	r2, [pc, #412]	; (8001f80 <HAL_UART_MspInit+0x1bc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d163      	bne.n	8001eae <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
 8001dea:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a65      	ldr	r2, [pc, #404]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001df0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001dfe:	623b      	str	r3, [r7, #32]
 8001e00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a5e      	ldr	r2, [pc, #376]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001e0c:	f043 0320 	orr.w	r3, r3, #32
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001e2e:	2308      	movs	r3, #8
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	4619      	mov	r1, r3
 8001e38:	4853      	ldr	r0, [pc, #332]	; (8001f88 <HAL_UART_MspInit+0x1c4>)
 8001e3a:	f002 fd99 	bl	8004970 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001e3e:	4b53      	ldr	r3, [pc, #332]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e40:	4a53      	ldr	r2, [pc, #332]	; (8001f90 <HAL_UART_MspInit+0x1cc>)
 8001e42:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001e44:	4b51      	ldr	r3, [pc, #324]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e46:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001e4a:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e52:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e58:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e5e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e60:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e66:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001e6c:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001e72:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e78:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e7a:	4b44      	ldr	r3, [pc, #272]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001e80:	4842      	ldr	r0, [pc, #264]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e82:	f002 f90b 	bl	800409c <HAL_DMA_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e8c:	f7ff fab8 	bl	8001400 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a3e      	ldr	r2, [pc, #248]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
 8001e96:	4a3d      	ldr	r2, [pc, #244]	; (8001f8c <HAL_UART_MspInit+0x1c8>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2052      	movs	r0, #82	; 0x52
 8001ea2:	f001 feaf 	bl	8003c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001ea6:	2052      	movs	r0, #82	; 0x52
 8001ea8:	f001 fec8 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001eac:	e064      	b.n	8001f78 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==UART10)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a38      	ldr	r2, [pc, #224]	; (8001f94 <HAL_UART_MspInit+0x1d0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d12d      	bne.n	8001f14 <HAL_UART_MspInit+0x150>
    __HAL_RCC_UART10_CLK_ENABLE();
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee4:	4b27      	ldr	r3, [pc, #156]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001ef0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001efe:	2303      	movs	r3, #3
 8001f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001f02:	230b      	movs	r3, #11
 8001f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4822      	ldr	r0, [pc, #136]	; (8001f98 <HAL_UART_MspInit+0x1d4>)
 8001f0e:	f002 fd2f 	bl	8004970 <HAL_GPIO_Init>
}
 8001f12:	e031      	b.n	8001f78 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_UART_MspInit+0x1d8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d12c      	bne.n	8001f78 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001f28:	f043 0320 	orr.w	r3, r3, #32
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	613b      	str	r3, [r7, #16]
 8001f38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a10      	ldr	r2, [pc, #64]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f48:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_UART_MspInit+0x1c0>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001f56:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f70:	4619      	mov	r1, r3
 8001f72:	4809      	ldr	r0, [pc, #36]	; (8001f98 <HAL_UART_MspInit+0x1d4>)
 8001f74:	f002 fcfc 	bl	8004970 <HAL_GPIO_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	3738      	adds	r7, #56	; 0x38
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40007800 	.word	0x40007800
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40021400 	.word	0x40021400
 8001f8c:	20004dc0 	.word	0x20004dc0
 8001f90:	40026058 	.word	0x40026058
 8001f94:	40011c00 	.word	0x40011c00
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40011400 	.word	0x40011400

08001fa0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_FSMC_MspInit+0xc8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d151      	bne.n	8002060 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_FSMC_MspInit+0xc8>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_FSMC_MspInit+0xcc>)
 8001fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fca:	4a28      	ldr	r2, [pc, #160]	; (800206c <HAL_FSMC_MspInit+0xcc>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6393      	str	r3, [r2, #56]	; 0x38
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_FSMC_MspInit+0xcc>)
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001fde:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001fe2:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fec:	2303      	movs	r3, #3
 8001fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ff0:	230c      	movs	r3, #12
 8001ff2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	481d      	ldr	r0, [pc, #116]	; (8002070 <HAL_FSMC_MspInit+0xd0>)
 8001ffa:	f002 fcb9 	bl	8004970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001ffe:	f240 433f 	movw	r3, #1087	; 0x43f
 8002002:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	2302      	movs	r3, #2
 8002006:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002010:	230c      	movs	r3, #12
 8002012:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	4619      	mov	r1, r3
 8002018:	4816      	ldr	r0, [pc, #88]	; (8002074 <HAL_FSMC_MspInit+0xd4>)
 800201a:	f002 fca9 	bl	8004970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 800201e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002022:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002030:	230c      	movs	r3, #12
 8002032:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4619      	mov	r1, r3
 8002038:	480f      	ldr	r0, [pc, #60]	; (8002078 <HAL_FSMC_MspInit+0xd8>)
 800203a:	f002 fc99 	bl	8004970 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 800203e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002042:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204c:	2303      	movs	r3, #3
 800204e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002050:	230c      	movs	r3, #12
 8002052:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	4619      	mov	r1, r3
 8002058:	4808      	ldr	r0, [pc, #32]	; (800207c <HAL_FSMC_MspInit+0xdc>)
 800205a:	f002 fc89 	bl	8004970 <HAL_GPIO_Init>
 800205e:	e000      	b.n	8002062 <HAL_FSMC_MspInit+0xc2>
    return;
 8002060:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20000110 	.word	0x20000110
 800206c:	40023800 	.word	0x40023800
 8002070:	40021400 	.word	0x40021400
 8002074:	40021800 	.word	0x40021800
 8002078:	40021000 	.word	0x40021000
 800207c:	40020c00 	.word	0x40020c00

08002080 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002088:	f7ff ff8a 	bl	8001fa0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b08c      	sub	sp, #48	; 0x30
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	2036      	movs	r0, #54	; 0x36
 80020aa:	f001 fdab 	bl	8003c04 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020ae:	2036      	movs	r0, #54	; 0x36
 80020b0:	f001 fdc4 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_InitTick+0xa0>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	4a1d      	ldr	r2, [pc, #116]	; (8002134 <HAL_InitTick+0xa0>)
 80020be:	f043 0310 	orr.w	r3, r3, #16
 80020c2:	6413      	str	r3, [r2, #64]	; 0x40
 80020c4:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_InitTick+0xa0>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020d0:	f107 0210 	add.w	r2, r7, #16
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f005 fb4e 	bl	800777c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020e0:	f005 fb24 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 80020e4:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	4a13      	ldr	r2, [pc, #76]	; (8002138 <HAL_InitTick+0xa4>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0c9b      	lsrs	r3, r3, #18
 80020f0:	3b01      	subs	r3, #1
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_InitTick+0xa8>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <HAL_InitTick+0xac>)
 80020f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_InitTick+0xa8>)
 80020fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002100:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002102:	4a0e      	ldr	r2, [pc, #56]	; (800213c <HAL_InitTick+0xa8>)
 8002104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002106:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <HAL_InitTick+0xa8>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_InitTick+0xa8>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002114:	4809      	ldr	r0, [pc, #36]	; (800213c <HAL_InitTick+0xa8>)
 8002116:	f006 ff31 	bl	8008f7c <HAL_TIM_Base_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d104      	bne.n	800212a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002120:	4806      	ldr	r0, [pc, #24]	; (800213c <HAL_InitTick+0xa8>)
 8002122:	f006 ff56 	bl	8008fd2 <HAL_TIM_Base_Start_IT>
 8002126:	4603      	mov	r3, r0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3730      	adds	r7, #48	; 0x30
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	431bde83 	.word	0x431bde83
 800213c:	200052a4 	.word	0x200052a4
 8002140:	40001000 	.word	0x40001000

08002144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler+0x4>

08002158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <MemManage_Handler+0x4>

0800215e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <BusFault_Handler+0x4>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <UsageFault_Handler+0x4>

0800216a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <DMA1_Stream3_IRQHandler+0x10>)
 800217e:	f002 f8b5 	bl	80042ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20004dc0 	.word	0x20004dc0

0800218c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <TIM6_DAC_IRQHandler+0x14>)
 8002192:	f001 fd83 	bl	8003c9c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002196:	4803      	ldr	r0, [pc, #12]	; (80021a4 <TIM6_DAC_IRQHandler+0x18>)
 8002198:	f006 ffb2 	bl	8009100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20005088 	.word	0x20005088
 80021a4:	200052a4 	.word	0x200052a4

080021a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <OTG_FS_IRQHandler+0x10>)
 80021ae:	f003 f819 	bl	80051e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000573c 	.word	0x2000573c

080021bc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <UART7_IRQHandler+0x10>)
 80021c2:	f007 feb9 	bl	8009f38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20004acc 	.word	0x20004acc

080021d0 <_sbrk>:
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	4a14      	ldr	r2, [pc, #80]	; (800222c <_sbrk+0x5c>)
 80021da:	4b15      	ldr	r3, [pc, #84]	; (8002230 <_sbrk+0x60>)
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <_sbrk+0x22>
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <_sbrk+0x64>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <_sbrk+0x68>)
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	4b10      	ldr	r3, [pc, #64]	; (8002234 <_sbrk+0x64>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d207      	bcs.n	8002210 <_sbrk+0x40>
 8002200:	f00f fdae 	bl	8011d60 <__errno>
 8002204:	4602      	mov	r2, r0
 8002206:	230c      	movs	r3, #12
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	f04f 33ff 	mov.w	r3, #4294967295
 800220e:	e009      	b.n	8002224 <_sbrk+0x54>
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <_sbrk+0x64>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <_sbrk+0x64>)
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	20050000 	.word	0x20050000
 8002230:	00000400 	.word	0x00000400
 8002234:	20000114 	.word	0x20000114
 8002238:	20005a08 	.word	0x20005a08

0800223c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <SystemInit+0x28>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4a07      	ldr	r2, [pc, #28]	; (8002264 <SystemInit+0x28>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <SystemInit+0x28>)
 8002252:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002256:	609a      	str	r2, [r3, #8]
#endif
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800226c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800226e:	e003      	b.n	8002278 <LoopCopyDataInit>

08002270 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002272:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002274:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002276:	3104      	adds	r1, #4

08002278 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002278:	480b      	ldr	r0, [pc, #44]	; (80022a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800227c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800227e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002280:	d3f6      	bcc.n	8002270 <CopyDataInit>
  ldr  r2, =_sbss
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002284:	e002      	b.n	800228c <LoopFillZerobss>

08002286 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002286:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002288:	f842 3b04 	str.w	r3, [r2], #4

0800228c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800228c:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800228e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002290:	d3f9      	bcc.n	8002286 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002292:	f7ff ffd3 	bl	800223c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002296:	f00f fd69 	bl	8011d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229a:	f7fe f95b 	bl	8000554 <main>
  bx  lr    
 800229e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022a0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80022a4:	08014b84 	.word	0x08014b84
  ldr  r0, =_sdata
 80022a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022ac:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 80022b0:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 80022b4:	20005a04 	.word	0x20005a04

080022b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC_IRQHandler>

080022ba <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b084      	sub	sp, #16
 80022be:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80022c0:	f000 fd6e 	bl	8002da0 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80022c4:	2200      	movs	r2, #0
 80022c6:	2100      	movs	r1, #0
 80022c8:	2010      	movs	r0, #16
 80022ca:	f000 f9e4 	bl	8002696 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80022ce:	200a      	movs	r0, #10
 80022d0:	f000 fd8d 	bl	8002dee <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	2001      	movs	r0, #1
 80022da:	f000 f9dc 	bl	8002696 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80022de:	20c8      	movs	r0, #200	; 0xc8
 80022e0:	f000 fd85 	bl	8002dee <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80022e4:	2200      	movs	r2, #0
 80022e6:	2100      	movs	r1, #0
 80022e8:	2011      	movs	r0, #17
 80022ea:	f000 f9d4 	bl	8002696 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80022ee:	2078      	movs	r0, #120	; 0x78
 80022f0:	f000 fd7d 	bl	8002dee <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80022f4:	2300      	movs	r3, #0
 80022f6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80022f8:	463b      	mov	r3, r7
 80022fa:	2201      	movs	r2, #1
 80022fc:	4619      	mov	r1, r3
 80022fe:	2036      	movs	r0, #54	; 0x36
 8002300:	f000 f9c9 	bl	8002696 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8002304:	2305      	movs	r3, #5
 8002306:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8002308:	463b      	mov	r3, r7
 800230a:	2201      	movs	r2, #1
 800230c:	4619      	mov	r1, r3
 800230e:	203a      	movs	r0, #58	; 0x3a
 8002310:	f000 f9c1 	bl	8002696 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	2021      	movs	r0, #33	; 0x21
 800231a:	f000 f9bc 	bl	8002696 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 800231e:	2300      	movs	r3, #0
 8002320:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002322:	2300      	movs	r3, #0
 8002324:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002326:	2300      	movs	r3, #0
 8002328:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800232a:	23ef      	movs	r3, #239	; 0xef
 800232c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 800232e:	463b      	mov	r3, r7
 8002330:	2204      	movs	r2, #4
 8002332:	4619      	mov	r1, r3
 8002334:	202a      	movs	r0, #42	; 0x2a
 8002336:	f000 f9ae 	bl	8002696 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 800233a:	2300      	movs	r3, #0
 800233c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800233e:	2300      	movs	r3, #0
 8002340:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002342:	2300      	movs	r3, #0
 8002344:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8002346:	23ef      	movs	r3, #239	; 0xef
 8002348:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800234a:	463b      	mov	r3, r7
 800234c:	2204      	movs	r2, #4
 800234e:	4619      	mov	r1, r3
 8002350:	202b      	movs	r0, #43	; 0x2b
 8002352:	f000 f9a0 	bl	8002696 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8002356:	230c      	movs	r3, #12
 8002358:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800235a:	230c      	movs	r3, #12
 800235c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800235e:	2300      	movs	r3, #0
 8002360:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8002362:	2333      	movs	r3, #51	; 0x33
 8002364:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8002366:	2333      	movs	r3, #51	; 0x33
 8002368:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800236a:	463b      	mov	r3, r7
 800236c:	2205      	movs	r2, #5
 800236e:	4619      	mov	r1, r3
 8002370:	20b2      	movs	r0, #178	; 0xb2
 8002372:	f000 f990 	bl	8002696 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8002376:	2335      	movs	r3, #53	; 0x35
 8002378:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800237a:	463b      	mov	r3, r7
 800237c:	2201      	movs	r2, #1
 800237e:	4619      	mov	r1, r3
 8002380:	20b7      	movs	r0, #183	; 0xb7
 8002382:	f000 f988 	bl	8002696 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8002386:	231f      	movs	r3, #31
 8002388:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800238a:	463b      	mov	r3, r7
 800238c:	2201      	movs	r2, #1
 800238e:	4619      	mov	r1, r3
 8002390:	20bb      	movs	r0, #187	; 0xbb
 8002392:	f000 f980 	bl	8002696 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8002396:	232c      	movs	r3, #44	; 0x2c
 8002398:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800239a:	463b      	mov	r3, r7
 800239c:	2201      	movs	r2, #1
 800239e:	4619      	mov	r1, r3
 80023a0:	20c0      	movs	r0, #192	; 0xc0
 80023a2:	f000 f978 	bl	8002696 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80023a6:	2301      	movs	r3, #1
 80023a8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80023aa:	23c3      	movs	r3, #195	; 0xc3
 80023ac:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80023ae:	463b      	mov	r3, r7
 80023b0:	2202      	movs	r2, #2
 80023b2:	4619      	mov	r1, r3
 80023b4:	20c2      	movs	r0, #194	; 0xc2
 80023b6:	f000 f96e 	bl	8002696 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80023ba:	2320      	movs	r3, #32
 80023bc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80023be:	463b      	mov	r3, r7
 80023c0:	2201      	movs	r2, #1
 80023c2:	4619      	mov	r1, r3
 80023c4:	20c4      	movs	r0, #196	; 0xc4
 80023c6:	f000 f966 	bl	8002696 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80023ca:	230f      	movs	r3, #15
 80023cc:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80023ce:	463b      	mov	r3, r7
 80023d0:	2201      	movs	r2, #1
 80023d2:	4619      	mov	r1, r3
 80023d4:	20c6      	movs	r0, #198	; 0xc6
 80023d6:	f000 f95e 	bl	8002696 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80023da:	23a4      	movs	r3, #164	; 0xa4
 80023dc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80023de:	23a1      	movs	r3, #161	; 0xa1
 80023e0:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 80023e2:	463b      	mov	r3, r7
 80023e4:	2201      	movs	r2, #1
 80023e6:	4619      	mov	r1, r3
 80023e8:	20d0      	movs	r0, #208	; 0xd0
 80023ea:	f000 f954 	bl	8002696 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80023ee:	23d0      	movs	r3, #208	; 0xd0
 80023f0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80023f2:	2308      	movs	r3, #8
 80023f4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80023f6:	2311      	movs	r3, #17
 80023f8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80023fa:	2308      	movs	r3, #8
 80023fc:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80023fe:	230c      	movs	r3, #12
 8002400:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8002402:	2315      	movs	r3, #21
 8002404:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002406:	2339      	movs	r3, #57	; 0x39
 8002408:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 800240a:	2333      	movs	r3, #51	; 0x33
 800240c:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 800240e:	2350      	movs	r3, #80	; 0x50
 8002410:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8002412:	2336      	movs	r3, #54	; 0x36
 8002414:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8002416:	2313      	movs	r3, #19
 8002418:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800241a:	2314      	movs	r3, #20
 800241c:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 800241e:	2329      	movs	r3, #41	; 0x29
 8002420:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002422:	232d      	movs	r3, #45	; 0x2d
 8002424:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8002426:	463b      	mov	r3, r7
 8002428:	220e      	movs	r2, #14
 800242a:	4619      	mov	r1, r3
 800242c:	20e0      	movs	r0, #224	; 0xe0
 800242e:	f000 f932 	bl	8002696 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002432:	23d0      	movs	r3, #208	; 0xd0
 8002434:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002436:	2308      	movs	r3, #8
 8002438:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 800243a:	2310      	movs	r3, #16
 800243c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800243e:	2308      	movs	r3, #8
 8002440:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002442:	2306      	movs	r3, #6
 8002444:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8002446:	2306      	movs	r3, #6
 8002448:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800244a:	2339      	movs	r3, #57	; 0x39
 800244c:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 800244e:	2344      	movs	r3, #68	; 0x44
 8002450:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002452:	2351      	movs	r3, #81	; 0x51
 8002454:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8002456:	230b      	movs	r3, #11
 8002458:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800245a:	2316      	movs	r3, #22
 800245c:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800245e:	2314      	movs	r3, #20
 8002460:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002462:	232f      	movs	r3, #47	; 0x2f
 8002464:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8002466:	2331      	movs	r3, #49	; 0x31
 8002468:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800246a:	463b      	mov	r3, r7
 800246c:	220e      	movs	r2, #14
 800246e:	4619      	mov	r1, r3
 8002470:	20e1      	movs	r0, #225	; 0xe1
 8002472:	f000 f910 	bl	8002696 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8002476:	f000 f847 	bl	8002508 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800247a:	2300      	movs	r3, #0
 800247c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800247e:	463b      	mov	r3, r7
 8002480:	2201      	movs	r2, #1
 8002482:	4619      	mov	r1, r3
 8002484:	2035      	movs	r0, #53	; 0x35
 8002486:	f000 f906 	bl	8002696 <ST7789H2_WriteReg>

}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d102      	bne.n	80024a6 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80024a0:	2300      	movs	r3, #0
 80024a2:	723b      	strb	r3, [r7, #8]
 80024a4:	e025      	b.n	80024f2 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d120      	bne.n	80024ee <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80024ac:	2300      	movs	r3, #0
 80024ae:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80024b0:	2300      	movs	r3, #0
 80024b2:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80024b4:	2301      	movs	r3, #1
 80024b6:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80024b8:	23f0      	movs	r3, #240	; 0xf0
 80024ba:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80024bc:	2300      	movs	r3, #0
 80024be:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80024c0:	2300      	movs	r3, #0
 80024c2:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	2206      	movs	r2, #6
 80024ca:	4619      	mov	r1, r3
 80024cc:	2033      	movs	r0, #51	; 0x33
 80024ce:	f000 f8e2 	bl	8002696 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80024d6:	2350      	movs	r3, #80	; 0x50
 80024d8:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	2202      	movs	r2, #2
 80024e0:	4619      	mov	r1, r3
 80024e2:	2037      	movs	r0, #55	; 0x37
 80024e4:	f000 f8d7 	bl	8002696 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80024e8:	23c0      	movs	r3, #192	; 0xc0
 80024ea:	723b      	strb	r3, [r7, #8]
 80024ec:	e001      	b.n	80024f2 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80024ee:	2360      	movs	r3, #96	; 0x60
 80024f0:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80024f2:	f107 0308 	add.w	r3, r7, #8
 80024f6:	2201      	movs	r2, #1
 80024f8:	4619      	mov	r1, r3
 80024fa:	2036      	movs	r0, #54	; 0x36
 80024fc:	f000 f8cb 	bl	8002696 <ST7789H2_WriteReg>
}
 8002500:	bf00      	nop
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2100      	movs	r1, #0
 8002510:	2029      	movs	r0, #41	; 0x29
 8002512:	f000 f8c0 	bl	8002696 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2011      	movs	r0, #17
 800251c:	f000 f8bb 	bl	8002696 <ST7789H2_WriteReg>
}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}

08002524 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800252a:	23fe      	movs	r3, #254	; 0xfe
 800252c:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2201      	movs	r2, #1
 8002532:	4619      	mov	r1, r3
 8002534:	20bd      	movs	r0, #189	; 0xbd
 8002536:	f000 f8ae 	bl	8002696 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2010      	movs	r0, #16
 8002540:	f000 f8a9 	bl	8002696 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002544:	200a      	movs	r0, #10
 8002546:	f000 fc52 	bl	8002dee <LCD_IO_Delay>
}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8002556:	23f0      	movs	r3, #240	; 0xf0
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002566:	23f0      	movs	r3, #240	; 0xf0
}
 8002568:	4618      	mov	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002576:	f000 fc13 	bl	8002da0 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800257a:	2004      	movs	r0, #4
 800257c:	f000 f8ad 	bl	80026da <ST7789H2_ReadReg>
 8002580:	4603      	mov	r3, r0
 8002582:	b29b      	uxth	r3, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	bd80      	pop	{r7, pc}

08002588 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	460a      	mov	r2, r1
 8002592:	80fb      	strh	r3, [r7, #6]
 8002594:	4613      	mov	r3, r2
 8002596:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002598:	2300      	movs	r3, #0
 800259a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3b11      	subs	r3, #17
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	2204      	movs	r2, #4
 80025b6:	4619      	mov	r1, r3
 80025b8:	202a      	movs	r0, #42	; 0x2a
 80025ba:	f000 f86c 	bl	8002696 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80025be:	2300      	movs	r3, #0
 80025c0:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80025cc:	88bb      	ldrh	r3, [r7, #4]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3b11      	subs	r3, #17
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	2204      	movs	r2, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	202b      	movs	r0, #43	; 0x2b
 80025e0:	f000 f859 	bl	8002696 <ST7789H2_WriteReg>
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
 80025f6:	460b      	mov	r3, r1
 80025f8:	80bb      	strh	r3, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80025fe:	88ba      	ldrh	r2, [r7, #4]
 8002600:	88fb      	ldrh	r3, [r7, #6]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ffbf 	bl	8002588 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	202c      	movs	r0, #44	; 0x2c
 8002610:	f000 f841 	bl	8002696 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8002614:	887b      	ldrh	r3, [r7, #2]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fbc8 	bl	8002dac <LCD_IO_WriteData>
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	460a      	mov	r2, r1
 800262e:	80fb      	strh	r3, [r7, #6]
 8002630:	4613      	mov	r3, r2
 8002632:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002634:	88ba      	ldrh	r2, [r7, #4]
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ffa4 	bl	8002588 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002640:	88ba      	ldrh	r2, [r7, #4]
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f9bd 	bl	80029c6 <ST7789H2_ReadPixel_rgb888>
 800264c:	4603      	mov	r3, r0
 800264e:	461a      	mov	r2, r3
 8002650:	733a      	strb	r2, [r7, #12]
 8002652:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002656:	737a      	strb	r2, [r7, #13]
 8002658:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800265c:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800265e:	7b3b      	ldrb	r3, [r7, #12]
 8002660:	08db      	lsrs	r3, r3, #3
 8002662:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800266a:	7bbb      	ldrb	r3, [r7, #14]
 800266c:	08db      	lsrs	r3, r3, #3
 800266e:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002670:	7dfb      	ldrb	r3, [r7, #23]
 8002672:	b29b      	uxth	r3, r3
 8002674:	02db      	lsls	r3, r3, #11
 8002676:	b29a      	uxth	r2, r3
 8002678:	7dbb      	ldrb	r3, [r7, #22]
 800267a:	b29b      	uxth	r3, r3
 800267c:	015b      	lsls	r3, r3, #5
 800267e:	b29b      	uxth	r3, r3
 8002680:	4413      	add	r3, r2
 8002682:	b29a      	uxth	r2, r3
 8002684:	7d7b      	ldrb	r3, [r7, #21]
 8002686:	b29b      	uxth	r3, r3
 8002688:	4413      	add	r3, r2
 800268a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800268c:	8a7b      	ldrh	r3, [r7, #18]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	6039      	str	r1, [r7, #0]
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	4613      	mov	r3, r2
 80026a4:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fb8c 	bl	8002dc6 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e00a      	b.n	80026ca <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	4413      	add	r3, r2
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fb74 	bl	8002dac <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	3301      	adds	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	79bb      	ldrb	r3, [r7, #6]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d3f0      	bcc.n	80026b4 <ST7789H2_WriteReg+0x1e>
  }
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	4603      	mov	r3, r0
 80026e2:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fb6d 	bl	8002dc6 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80026ec:	f000 fb78 	bl	8002de0 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80026f0:	f000 fb76 	bl	8002de0 <LCD_IO_ReadData>
 80026f4:	4603      	mov	r3, r0
 80026f6:	b2db      	uxtb	r3, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002700:	b490      	push	{r4, r7}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4623      	mov	r3, r4
 8002710:	80fb      	strh	r3, [r7, #6]
 8002712:	4603      	mov	r3, r0
 8002714:	80bb      	strh	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]
 800271a:	4613      	mov	r3, r2
 800271c:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	2bef      	cmp	r3, #239	; 0xef
 8002722:	d803      	bhi.n	800272c <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002724:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <ST7789H2_SetDisplayWindow+0x94>)
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	8013      	strh	r3, [r2, #0]
 800272a:	e002      	b.n	8002732 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <ST7789H2_SetDisplayWindow+0x94>)
 800272e:	2200      	movs	r2, #0
 8002730:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002732:	88bb      	ldrh	r3, [r7, #4]
 8002734:	2bef      	cmp	r3, #239	; 0xef
 8002736:	d803      	bhi.n	8002740 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002738:	4a17      	ldr	r2, [pc, #92]	; (8002798 <ST7789H2_SetDisplayWindow+0x98>)
 800273a:	88bb      	ldrh	r3, [r7, #4]
 800273c:	8013      	strh	r3, [r2, #0]
 800273e:	e002      	b.n	8002746 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <ST7789H2_SetDisplayWindow+0x98>)
 8002742:	2200      	movs	r2, #0
 8002744:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	4413      	add	r3, r2
 800274c:	2bf0      	cmp	r3, #240	; 0xf0
 800274e:	dc08      	bgt.n	8002762 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002750:	887a      	ldrh	r2, [r7, #2]
 8002752:	88fb      	ldrh	r3, [r7, #6]
 8002754:	4413      	add	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <ST7789H2_SetDisplayWindow+0x9c>)
 800275e:	801a      	strh	r2, [r3, #0]
 8002760:	e002      	b.n	8002768 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <ST7789H2_SetDisplayWindow+0x9c>)
 8002764:	22ef      	movs	r2, #239	; 0xef
 8002766:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002768:	883a      	ldrh	r2, [r7, #0]
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	2bf0      	cmp	r3, #240	; 0xf0
 8002770:	dc08      	bgt.n	8002784 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002772:	883a      	ldrh	r2, [r7, #0]
 8002774:	88bb      	ldrh	r3, [r7, #4]
 8002776:	4413      	add	r3, r2
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <ST7789H2_SetDisplayWindow+0xa0>)
 8002780:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002782:	e002      	b.n	800278a <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002784:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <ST7789H2_SetDisplayWindow+0xa0>)
 8002786:	22ef      	movs	r2, #239	; 0xef
 8002788:	801a      	strh	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bc90      	pop	{r4, r7}
 8002792:	4770      	bx	lr
 8002794:	20000118 	.word	0x20000118
 8002798:	2000011a 	.word	0x2000011a
 800279c:	2000003c 	.word	0x2000003c
 80027a0:	2000003e 	.word	0x2000003e

080027a4 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4604      	mov	r4, r0
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4623      	mov	r3, r4
 80027b4:	80fb      	strh	r3, [r7, #6]
 80027b6:	4603      	mov	r3, r0
 80027b8:	80bb      	strh	r3, [r7, #4]
 80027ba:	460b      	mov	r3, r1
 80027bc:	807b      	strh	r3, [r7, #2]
 80027be:	4613      	mov	r3, r2
 80027c0:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	88bb      	ldrh	r3, [r7, #4]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fedb 	bl	8002588 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	202c      	movs	r0, #44	; 0x2c
 80027d8:	f7ff ff5d 	bl	8002696 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80027dc:	2300      	movs	r3, #0
 80027de:	81fb      	strh	r3, [r7, #14]
 80027e0:	e006      	b.n	80027f0 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fae1 	bl	8002dac <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80027ea:	89fb      	ldrh	r3, [r7, #14]
 80027ec:	3301      	adds	r3, #1
 80027ee:	81fb      	strh	r3, [r7, #14]
 80027f0:	89fa      	ldrh	r2, [r7, #14]
 80027f2:	883b      	ldrh	r3, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d3f4      	bcc.n	80027e2 <ST7789H2_DrawHLine+0x3e>
  }  
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd90      	pop	{r4, r7, pc}

08002800 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002800:	b590      	push	{r4, r7, lr}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	4604      	mov	r4, r0
 8002808:	4608      	mov	r0, r1
 800280a:	4611      	mov	r1, r2
 800280c:	461a      	mov	r2, r3
 800280e:	4623      	mov	r3, r4
 8002810:	80fb      	strh	r3, [r7, #6]
 8002812:	4603      	mov	r3, r0
 8002814:	80bb      	strh	r3, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	807b      	strh	r3, [r7, #2]
 800281a:	4613      	mov	r3, r2
 800281c:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	88bb      	ldrh	r3, [r7, #4]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fead 	bl	8002588 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	202c      	movs	r0, #44	; 0x2c
 8002834:	f7ff ff2f 	bl	8002696 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002838:	2300      	movs	r3, #0
 800283a:	81fb      	strh	r3, [r7, #14]
 800283c:	e00b      	b.n	8002856 <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	89fb      	ldrh	r3, [r7, #14]
 8002842:	4413      	add	r3, r2
 8002844:	b299      	uxth	r1, r3
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	88bb      	ldrh	r3, [r7, #4]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fece 	bl	80025ec <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002850:	89fb      	ldrh	r3, [r7, #14]
 8002852:	3301      	adds	r3, #1
 8002854:	81fb      	strh	r3, [r7, #14]
 8002856:	89fa      	ldrh	r2, [r7, #14]
 8002858:	883b      	ldrh	r3, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3ef      	bcc.n	800283e <ST7789H2_DrawVLine+0x3e>
  }
}
 800285e:	bf00      	nop
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
	...

08002868 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	603a      	str	r2, [r7, #0]
 8002872:	80fb      	strh	r3, [r7, #6]
 8002874:	460b      	mov	r3, r1
 8002876:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002884:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <ST7789H2_DrawBitmap+0xdc>)
 8002886:	881a      	ldrh	r2, [r3, #0]
 8002888:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <ST7789H2_DrawBitmap+0xe0>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b29b      	uxth	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002894:	4b2d      	ldr	r3, [pc, #180]	; (800294c <ST7789H2_DrawBitmap+0xe4>)
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	4b2d      	ldr	r3, [pc, #180]	; (8002950 <ST7789H2_DrawBitmap+0xe8>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3302      	adds	r3, #2
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	3304      	adds	r3, #4
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	461a      	mov	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	330a      	adds	r3, #10
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	461a      	mov	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	085b      	lsrs	r3, r3, #1
 80028e4:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	4413      	add	r3, r2
 80028ec:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80028ee:	88ba      	ldrh	r2, [r7, #4]
 80028f0:	89bb      	ldrh	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e01d      	b.n	8002934 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fe3f 	bl	8002588 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b299      	uxth	r1, r3
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	89fa      	ldrh	r2, [r7, #14]
 8002922:	88f8      	ldrh	r0, [r7, #6]
 8002924:	f000 f898 	bl	8002a58 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	3301      	adds	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b01      	subs	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	88bb      	ldrh	r3, [r7, #4]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8dd      	bhi.n	80028f8 <ST7789H2_DrawBitmap+0x90>
  }
}
 800293c:	bf00      	nop
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000003c 	.word	0x2000003c
 8002948:	20000118 	.word	0x20000118
 800294c:	2000003e 	.word	0x2000003e
 8002950:	2000011a 	.word	0x2000011a

08002954 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	4604      	mov	r4, r0
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4623      	mov	r3, r4
 8002964:	80fb      	strh	r3, [r7, #6]
 8002966:	4603      	mov	r3, r0
 8002968:	80bb      	strh	r3, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	807b      	strh	r3, [r7, #2]
 800296e:	4613      	mov	r3, r2
 8002970:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002976:	88bb      	ldrh	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e019      	b.n	80029b0 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	b29a      	uxth	r2, r3
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fdff 	bl	8002588 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	b299      	uxth	r1, r3
 800298e:	887b      	ldrh	r3, [r7, #2]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	4413      	add	r3, r2
 800299c:	887a      	ldrh	r2, [r7, #2]
 800299e:	88f8      	ldrh	r0, [r7, #6]
 80029a0:	f000 f85a 	bl	8002a58 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	3301      	adds	r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3301      	adds	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	88ba      	ldrh	r2, [r7, #4]
 80029b2:	883b      	ldrh	r3, [r7, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d3de      	bcc.n	800297c <ST7789H2_DrawRGBImage+0x28>
  }
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd90      	pop	{r4, r7, pc}

080029c6 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	460a      	mov	r2, r1
 80029d0:	80fb      	strh	r3, [r7, #6]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80029d6:	88ba      	ldrh	r2, [r7, #4]
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fdd3 	bl	8002588 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80029e2:	2200      	movs	r2, #0
 80029e4:	2100      	movs	r1, #0
 80029e6:	202e      	movs	r0, #46	; 0x2e
 80029e8:	f7ff fe55 	bl	8002696 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80029ec:	f000 f9f8 	bl	8002de0 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80029f0:	f000 f9f6 	bl	8002de0 <LCD_IO_ReadData>
 80029f4:	4603      	mov	r3, r0
 80029f6:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80029f8:	f000 f9f2 	bl	8002de0 <LCD_IO_ReadData>
 80029fc:	4603      	mov	r3, r0
 80029fe:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002a00:	8afb      	ldrh	r3, [r7, #22]
 8002a02:	121b      	asrs	r3, r3, #8
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002a0e:	8afb      	ldrh	r3, [r7, #22]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002a1a:	8abb      	ldrh	r3, [r7, #20]
 8002a1c:	121b      	asrs	r3, r3, #8
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f023 0303 	bic.w	r3, r3, #3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	f107 020c 	add.w	r2, r7, #12
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	4611      	mov	r1, r2
 8002a34:	8019      	strh	r1, [r3, #0]
 8002a36:	3302      	adds	r3, #2
 8002a38:	0c12      	lsrs	r2, r2, #16
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	7c3a      	ldrb	r2, [r7, #16]
 8002a40:	f362 0307 	bfi	r3, r2, #0, #8
 8002a44:	7c7a      	ldrb	r2, [r7, #17]
 8002a46:	f362 230f 	bfi	r3, r2, #8, #8
 8002a4a:	7cba      	ldrb	r2, [r7, #18]
 8002a4c:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	4603      	mov	r3, r0
 8002a62:	81fb      	strh	r3, [r7, #14]
 8002a64:	460b      	mov	r3, r1
 8002a66:	81bb      	strh	r3, [r7, #12]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	202c      	movs	r0, #44	; 0x2c
 8002a7a:	f7ff fe0c 	bl	8002696 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002a7e:	89fb      	ldrh	r3, [r7, #14]
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	e02a      	b.n	8002ada <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <ST7789H2_DrawRGBHLine+0x98>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d321      	bcc.n	8002ad4 <ST7789H2_DrawRGBHLine+0x7c>
 8002a90:	4b18      	ldr	r3, [pc, #96]	; (8002af4 <ST7789H2_DrawRGBHLine+0x9c>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	89ba      	ldrh	r2, [r7, #12]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d31c      	bcc.n	8002ad4 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <ST7789H2_DrawRGBHLine+0xa0>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d816      	bhi.n	8002ad4 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002aa6:	4b15      	ldr	r3, [pc, #84]	; (8002afc <ST7789H2_DrawRGBHLine+0xa4>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	89ba      	ldrh	r2, [r7, #12]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d811      	bhi.n	8002ad4 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002ab0:	897a      	ldrh	r2, [r7, #10]
 8002ab2:	89fb      	ldrh	r3, [r7, #14]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 f96f 	bl	8002dac <LCD_IO_WriteData>
      }      
      i++;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	897a      	ldrh	r2, [r7, #10]
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	4413      	add	r3, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d3cd      	bcc.n	8002a84 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000118 	.word	0x20000118
 8002af4:	2000011a 	.word	0x2000011a
 8002af8:	2000003c 	.word	0x2000003c
 8002afc:	2000003e 	.word	0x2000003e

08002b00 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	460a      	mov	r2, r1
 8002b0a:	71fb      	strb	r3, [r7, #7]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <BSP_PB_Init+0xa0>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <BSP_PB_Init+0xa0>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b20:	4b1f      	ldr	r3, [pc, #124]	; (8002ba0 <BSP_PB_Init+0xa0>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002b2c:	79bb      	ldrb	r3, [r7, #6]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d111      	bne.n	8002b56 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002b32:	2301      	movs	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002b36:	2300      	movs	r3, #0
 8002b38:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002b3e:	2302      	movs	r3, #2
 8002b40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <BSP_PB_Init+0xa4>)
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	f107 020c 	add.w	r2, r7, #12
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 ff0d 	bl	8004970 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002b56:	79bb      	ldrb	r3, [r7, #6]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d11d      	bne.n	8002b98 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002b60:	2302      	movs	r3, #2
 8002b62:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b64:	2303      	movs	r3, #3
 8002b66:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <BSP_PB_Init+0xa8>)
 8002b6a:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <BSP_PB_Init+0xa4>)
 8002b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b74:	f107 020c 	add.w	r2, r7, #12
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 fef8 	bl	8004970 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002b80:	2306      	movs	r3, #6
 8002b82:	b25b      	sxtb	r3, r3
 8002b84:	2200      	movs	r2, #0
 8002b86:	210f      	movs	r1, #15
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 f83b 	bl	8003c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002b8e:	2306      	movs	r3, #6
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 f852 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	20000040 	.word	0x20000040
 8002ba8:	10110000 	.word	0x10110000

08002bac <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	4b3a      	ldr	r3, [pc, #232]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	4a39      	ldr	r2, [pc, #228]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002bbc:	f043 0301 	orr.w	r3, r3, #1
 8002bc0:	6393      	str	r3, [r2, #56]	; 0x38
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002bf4:	f043 0310 	orr.w	r3, r3, #16
 8002bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002c10:	f043 0320 	orr.w	r3, r3, #32
 8002c14:	6313      	str	r3, [r2, #48]	; 0x30
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <FMC_BANK3_MspInit+0xf4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c46:	2303      	movs	r3, #3
 8002c48:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002c4a:	230c      	movs	r3, #12
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002c4e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002c52:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002c54:	f107 0314 	add.w	r3, r7, #20
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4812      	ldr	r0, [pc, #72]	; (8002ca4 <FMC_BANK3_MspInit+0xf8>)
 8002c5c:	f001 fe88 	bl	8004970 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002c60:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002c64:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	480e      	ldr	r0, [pc, #56]	; (8002ca8 <FMC_BANK3_MspInit+0xfc>)
 8002c6e:	f001 fe7f 	bl	8004970 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002c72:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002c76:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	480b      	ldr	r0, [pc, #44]	; (8002cac <FMC_BANK3_MspInit+0x100>)
 8002c80:	f001 fe76 	bl	8004970 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002c84:	f240 433f 	movw	r3, #1087	; 0x43f
 8002c88:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002c8a:	f107 0314 	add.w	r3, r7, #20
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4807      	ldr	r0, [pc, #28]	; (8002cb0 <FMC_BANK3_MspInit+0x104>)
 8002c92:	f001 fe6d 	bl	8004970 <HAL_GPIO_Init>
}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40020c00 	.word	0x40020c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40021400 	.word	0x40021400
 8002cb0:	40021800 	.word	0x40021800

08002cb4 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b09c      	sub	sp, #112	; 0x70
 8002cb8:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002cba:	f7ff ff77 	bl	8002bac <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002cbe:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002cc2:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002cc4:	4b1e      	ldr	r3, [pc, #120]	; (8002d40 <FMC_BANK3_Init+0x8c>)
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002cec:	2300      	movs	r3, #0
 8002cee:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d08:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002d0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d12:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002d14:	2300      	movs	r3, #0
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d20:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002d26:	2300      	movs	r3, #0
 8002d28:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002d2a:	1d3a      	adds	r2, r7, #4
 8002d2c:	1d39      	adds	r1, r7, #4
 8002d2e:	f107 0320 	add.w	r3, r7, #32
 8002d32:	4618      	mov	r0, r3
 8002d34:	f006 f8de 	bl	8008ef4 <HAL_SRAM_Init>
}
 8002d38:	bf00      	nop
 8002d3a:	3770      	adds	r7, #112	; 0x70
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	a0000104 	.word	0xa0000104

08002d44 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002d4e:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002d52:	88fb      	ldrh	r3, [r7, #6]
 8002d54:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d56:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002d70:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002d74:	79fa      	ldrb	r2, [r7, #7]
 8002d76:	b292      	uxth	r2, r2
 8002d78:	801a      	strh	r2, [r3, #0]
 8002d7a:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002d8e:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002d92:	885b      	ldrh	r3, [r3, #2]
 8002d94:	b29b      	uxth	r3, r3
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002da4:	f7ff ff86 	bl	8002cb4 <FMC_BANK3_Init>
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}

08002dac <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ffc3 	bl	8002d44 <FMC_BANK3_WriteData>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff ffc7 	bl	8002d66 <FMC_BANK3_WriteReg>
}
 8002dd8:	bf00      	nop
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002de4:	f7ff ffd1 	bl	8002d8a <FMC_BANK3_ReadData>
 8002de8:	4603      	mov	r3, r0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}

08002dee <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fbb8 	bl	800356c <HAL_Delay>
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002e0c:	f000 f80e 	bl	8002e2c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002e20:	f000 f80b 	bl	8002e3a <BSP_AUDIO_OUT_Error_CallBack>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002e50:	f000 f804 	bl	8002e5c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f000 f804 	bl	8002e7c <BSP_LCD_InitEx>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002e88:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <BSP_LCD_InitEx+0xc0>)
 8002e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e8e:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002e90:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <BSP_LCD_InitEx+0xc0>)
 8002e92:	4a2b      	ldr	r2, [pc, #172]	; (8002f40 <BSP_LCD_InitEx+0xc4>)
 8002e94:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002e96:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <BSP_LCD_InitEx+0xc0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002e9c:	f000 f930 	bl	8003100 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	2120      	movs	r1, #32
 8002ea4:	4827      	ldr	r0, [pc, #156]	; (8002f44 <BSP_LCD_InitEx+0xc8>)
 8002ea6:	f001 fef5 	bl	8004c94 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002eb0:	4825      	ldr	r0, [pc, #148]	; (8002f48 <BSP_LCD_InitEx+0xcc>)
 8002eb2:	f001 feef 	bl	8004c94 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002eb6:	2005      	movs	r0, #5
 8002eb8:	f000 fb58 	bl	800356c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ec2:	4821      	ldr	r0, [pc, #132]	; (8002f48 <BSP_LCD_InitEx+0xcc>)
 8002ec4:	f001 fee6 	bl	8004c94 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002ec8:	200a      	movs	r0, #10
 8002eca:	f000 fb4f 	bl	800356c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ed4:	481c      	ldr	r0, [pc, #112]	; (8002f48 <BSP_LCD_InitEx+0xcc>)
 8002ed6:	f001 fedd 	bl	8004c94 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002eda:	2014      	movs	r0, #20
 8002edc:	f000 fb46 	bl	800356c <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ee6:	4818      	ldr	r0, [pc, #96]	; (8002f48 <BSP_LCD_InitEx+0xcc>)
 8002ee8:	f001 fed4 	bl	8004c94 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002eec:	200a      	movs	r0, #10
 8002eee:	f000 fb3d 	bl	800356c <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002ef2:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <BSP_LCD_InitEx+0xd0>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4798      	blx	r3
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b85      	cmp	r3, #133	; 0x85
 8002efc:	d118      	bne.n	8002f30 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <BSP_LCD_InitEx+0xd4>)
 8002f00:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <BSP_LCD_InitEx+0xd0>)
 8002f02:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <BSP_LCD_InitEx+0xd4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d103      	bne.n	8002f1a <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002f12:	2000      	movs	r0, #0
 8002f14:	f7ff fabd 	bl	8002492 <ST7789H2_SetOrientation>
 8002f18:	e005      	b.n	8002f26 <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d102      	bne.n	8002f26 <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002f20:	2002      	movs	r0, #2
 8002f22:	f7ff fab6 	bl	8002492 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002f26:	480b      	ldr	r0, [pc, #44]	; (8002f54 <BSP_LCD_InitEx+0xd8>)
 8002f28:	f000 f84e 	bl	8002fc8 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200052e4 	.word	0x200052e4
 8002f40:	20000044 	.word	0x20000044
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	2000011c 	.word	0x2000011c
 8002f54:	20000054 	.word	0x20000054

08002f58 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <BSP_LCD_GetXSize+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	4798      	blx	r3
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2000011c 	.word	0x2000011c

08002f70 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <BSP_LCD_GetYSize+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	4798      	blx	r3
 8002f7c:	4603      	mov	r3, r0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	2000011c 	.word	0x2000011c

08002f88 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	4a03      	ldr	r2, [pc, #12]	; (8002fa4 <BSP_LCD_SetTextColor+0x1c>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	200052e4 	.word	0x200052e4

08002fa8 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002fb2:	88fb      	ldrh	r3, [r7, #6]
 8002fb4:	4a03      	ldr	r2, [pc, #12]	; (8002fc4 <BSP_LCD_SetBackColor+0x1c>)
 8002fb6:	6053      	str	r3, [r2, #4]
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	200052e4 	.word	0x200052e4

08002fc8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <BSP_LCD_SetFont+0x1c>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6093      	str	r3, [r2, #8]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	200052e4 	.word	0x200052e4

08002fe8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <BSP_LCD_Clear+0x68>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	4a13      	ldr	r2, [pc, #76]	; (8003050 <BSP_LCD_Clear+0x68>)
 8003004:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8003006:	f7ff ffb3 	bl	8002f70 <BSP_LCD_GetYSize>
 800300a:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e00d      	b.n	800302e <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	b29c      	uxth	r4, r3
 8003016:	f7ff ff9f 	bl	8002f58 <BSP_LCD_GetXSize>
 800301a:	4603      	mov	r3, r0
 800301c:	b29b      	uxth	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	4621      	mov	r1, r4
 8003022:	2000      	movs	r0, #0
 8003024:	f000 f832 	bl	800308c <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	3301      	adds	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	429a      	cmp	r2, r3
 8003034:	d3ed      	bcc.n	8003012 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8003036:	4a06      	ldr	r2, [pc, #24]	; (8003050 <BSP_LCD_Clear+0x68>)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800303c:	4b04      	ldr	r3, [pc, #16]	; (8003050 <BSP_LCD_Clear+0x68>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ffa0 	bl	8002f88 <BSP_LCD_SetTextColor>
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd90      	pop	{r4, r7, pc}
 8003050:	200052e4 	.word	0x200052e4

08003054 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	80fb      	strh	r3, [r7, #6]
 800305e:	460b      	mov	r3, r1
 8003060:	80bb      	strh	r3, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <BSP_LCD_DrawPixel+0x34>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d006      	beq.n	800307e <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <BSP_LCD_DrawPixel+0x34>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	887a      	ldrh	r2, [r7, #2]
 8003078:	88b9      	ldrh	r1, [r7, #4]
 800307a:	88f8      	ldrh	r0, [r7, #6]
 800307c:	4798      	blx	r3
  }
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2000011c 	.word	0x2000011c

0800308c <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	80fb      	strh	r3, [r7, #6]
 8003096:	460b      	mov	r3, r1
 8003098:	80bb      	strh	r3, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <BSP_LCD_DrawHLine+0x6c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80030ac:	4b12      	ldr	r3, [pc, #72]	; (80030f8 <BSP_LCD_DrawHLine+0x6c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a1c      	ldr	r4, [r3, #32]
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <BSP_LCD_DrawHLine+0x70>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b298      	uxth	r0, r3
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	88ba      	ldrh	r2, [r7, #4]
 80030bc:	88f9      	ldrh	r1, [r7, #6]
 80030be:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80030c0:	e015      	b.n	80030ee <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e00e      	b.n	80030e6 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	88fb      	ldrh	r3, [r7, #6]
 80030ce:	4413      	add	r3, r2
 80030d0:	b298      	uxth	r0, r3
 80030d2:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <BSP_LCD_DrawHLine+0x70>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	88bb      	ldrh	r3, [r7, #4]
 80030da:	4619      	mov	r1, r3
 80030dc:	f7ff ffba 	bl	8003054 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	3301      	adds	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d3ec      	bcc.n	80030c8 <BSP_LCD_DrawHLine+0x3c>
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd90      	pop	{r4, r7, pc}
 80030f6:	bf00      	nop
 80030f8:	2000011c 	.word	0x2000011c
 80030fc:	200052e4 	.word	0x200052e4

08003100 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	4b28      	ldr	r3, [pc, #160]	; (80031ac <BSP_LCD_MspInit+0xac>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	4a27      	ldr	r2, [pc, #156]	; (80031ac <BSP_LCD_MspInit+0xac>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	6313      	str	r3, [r2, #48]	; 0x30
 8003116:	4b25      	ldr	r3, [pc, #148]	; (80031ac <BSP_LCD_MspInit+0xac>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <BSP_LCD_MspInit+0xac>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a20      	ldr	r2, [pc, #128]	; (80031ac <BSP_LCD_MspInit+0xac>)
 800312c:	f043 0302 	orr.w	r3, r3, #2
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <BSP_LCD_MspInit+0xac>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <BSP_LCD_MspInit+0xac>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a19      	ldr	r2, [pc, #100]	; (80031ac <BSP_LCD_MspInit+0xac>)
 8003148:	f043 0310 	orr.w	r3, r3, #16
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b17      	ldr	r3, [pc, #92]	; (80031ac <BSP_LCD_MspInit+0xac>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 800315a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800315e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003164:	2302      	movs	r3, #2
 8003166:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003168:	2301      	movs	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	4619      	mov	r1, r3
 8003172:	480f      	ldr	r0, [pc, #60]	; (80031b0 <BSP_LCD_MspInit+0xb0>)
 8003174:	f001 fbfc 	bl	8004970 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8003178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800317c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8003182:	f107 030c 	add.w	r3, r7, #12
 8003186:	4619      	mov	r1, r3
 8003188:	4809      	ldr	r0, [pc, #36]	; (80031b0 <BSP_LCD_MspInit+0xb0>)
 800318a:	f001 fbf1 	bl	8004970 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800318e:	2320      	movs	r3, #32
 8003190:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003192:	2301      	movs	r3, #1
 8003194:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003196:	f107 030c 	add.w	r3, r7, #12
 800319a:	4619      	mov	r1, r3
 800319c:	4805      	ldr	r0, [pc, #20]	; (80031b4 <BSP_LCD_MspInit+0xb4>)
 800319e:	f001 fbe7 	bl	8004970 <HAL_GPIO_Init>
}
 80031a2:	bf00      	nop
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40021000 	.word	0x40021000

080031b8 <RC_READ_SBUS>:
 * Purpose: To read RC SBUS data
 * Language:  C
 */
#include <rc_input_sbus.h>

uint8_t RC_READ_SBUS(UART_HandleTypeDef *huart,SBUS *sbus) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]

	HAL_UART_Receive_DMA(huart, sbus->sbus_msg_bytes, 25);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	3325      	adds	r3, #37	; 0x25
 80031c6:	2219      	movs	r2, #25
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f006 fe34 	bl	8009e38 <HAL_UART_Receive_DMA>

	if (sbus->sbus_msg_bytes[0] != 0x0F) {
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031d6:	2b0f      	cmp	r3, #15
 80031d8:	d012      	beq.n	8003200 <RC_READ_SBUS+0x48>
		//Error out of sync
		sbus->error_cnt++;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031e0:	3301      	adds	r3, #1
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		if (sbus->error_cnt > SBUS_ERROR_CNT) {
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031f0:	2b0a      	cmp	r3, #10
 80031f2:	d903      	bls.n	80031fc <RC_READ_SBUS+0x44>
			sbus->error = 1;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		return 0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	e16e      	b.n	80034de <RC_READ_SBUS+0x326>
	}

	sbus->error = 0;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sbus->error_cnt = 0;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sbus->frame_lost = 0;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2020 	strb.w	r2, [r3, #32]
	sbus->failsafe = 0;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003226:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[2] << 8)) & 0x07FF;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800322e:	021b      	lsls	r3, r3, #8
 8003230:	b21b      	sxth	r3, r3
 8003232:	4313      	orrs	r3, r2
 8003234:	b21b      	sxth	r3, r3
 8003236:	b29b      	uxth	r3, r3
 8003238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800323c:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	801a      	strh	r2, [r3, #0]
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
				| ((uint16_t) sbus->sbus_msg_bytes[3] << 5)) & 0x07FF;
 8003248:	08db      	lsrs	r3, r3, #3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	b21a      	sxth	r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003254:	015b      	lsls	r3, r3, #5
 8003256:	b21b      	sxth	r3, r3
 8003258:	4313      	orrs	r3, r2
 800325a:	b21b      	sxth	r3, r3
 800325c:	b29b      	uxth	r3, r3
 800325e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003262:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	805a      	strh	r2, [r3, #2]
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
				| ((uint16_t) sbus->sbus_msg_bytes[4] << 2)
 800326e:	099b      	lsrs	r3, r3, #6
 8003270:	b2db      	uxtb	r3, r3
 8003272:	b21a      	sxth	r2, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	b21b      	sxth	r3, r3
 800327e:	4313      	orrs	r3, r2
 8003280:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[5] << 10)) & 0x07FF;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	b21b      	sxth	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b21b      	sxth	r3, r3
 8003290:	b29b      	uxth	r3, r3
 8003292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003296:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	809a      	strh	r2, [r3, #4]
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
				| ((uint16_t) sbus->sbus_msg_bytes[6] << 7)) & 0x07FF;
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	b21a      	sxth	r2, r3
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80032ae:	01db      	lsls	r3, r3, #7
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032bc:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	80da      	strh	r2, [r3, #6]
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
				| ((uint16_t) sbus->sbus_msg_bytes[7] << 4)) & 0x07FF;
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	b21a      	sxth	r2, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	4313      	orrs	r3, r2
 80032da:	b21b      	sxth	r3, r3
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032e2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	811a      	strh	r2, [r3, #8]
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
				| ((uint16_t) sbus->sbus_msg_bytes[8] << 1)
 80032ee:	09db      	lsrs	r3, r3, #7
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	b21a      	sxth	r2, r3
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	4313      	orrs	r3, r2
 8003300:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[9] << 9)) & 0x07FF;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003308:	025b      	lsls	r3, r3, #9
 800330a:	b21b      	sxth	r3, r3
 800330c:	4313      	orrs	r3, r2
 800330e:	b21b      	sxth	r3, r3
 8003310:	b29b      	uxth	r3, r3
 8003312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003316:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	815a      	strh	r2, [r3, #10]
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				| ((uint16_t) sbus->sbus_msg_bytes[10] << 6)) & 0x07FF;
 8003322:	089b      	lsrs	r3, r3, #2
 8003324:	b2db      	uxtb	r3, r3
 8003326:	b21a      	sxth	r2, r3
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800332e:	019b      	lsls	r3, r3, #6
 8003330:	b21b      	sxth	r3, r3
 8003332:	4313      	orrs	r3, r2
 8003334:	b21b      	sxth	r3, r3
 8003336:	b29b      	uxth	r3, r3
 8003338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333c:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	819a      	strh	r2, [r3, #12]
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
				| ((uint16_t) sbus->sbus_msg_bytes[11] << 3)) & 0x07FF;
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	b2db      	uxtb	r3, r3
 800334c:	b21a      	sxth	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	b21b      	sxth	r3, r3
 8003358:	4313      	orrs	r3, r2
 800335a:	b21b      	sxth	r3, r3
 800335c:	b29b      	uxth	r3, r3
 800335e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003362:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	81da      	strh	r2, [r3, #14]
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800336e:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[13] << 8)) & 0x07FF;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	b21b      	sxth	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b21b      	sxth	r3, r3
 800337e:	b29b      	uxth	r3, r3
 8003380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003384:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	821a      	strh	r2, [r3, #16]
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
				| ((uint16_t) sbus->sbus_msg_bytes[14] << 5)) & 0x07FF;
 8003390:	08db      	lsrs	r3, r3, #3
 8003392:	b2db      	uxtb	r3, r3
 8003394:	b21a      	sxth	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800339c:	015b      	lsls	r3, r3, #5
 800339e:	b21b      	sxth	r3, r3
 80033a0:	4313      	orrs	r3, r2
 80033a2:	b21b      	sxth	r3, r3
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033aa:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	825a      	strh	r2, [r3, #18]
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
				| ((uint16_t) sbus->sbus_msg_bytes[15] << 2)
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	b21a      	sxth	r2, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	b21b      	sxth	r3, r3
 80033c6:	4313      	orrs	r3, r2
 80033c8:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[16] << 10)) & 0x07FF;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d0:	029b      	lsls	r3, r3, #10
 80033d2:	b21b      	sxth	r3, r3
 80033d4:	4313      	orrs	r3, r2
 80033d6:	b21b      	sxth	r3, r3
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033de:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	829a      	strh	r2, [r3, #20]
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				| ((uint16_t) sbus->sbus_msg_bytes[17] << 7)) & 0x07FF;
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	b21a      	sxth	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80033f6:	01db      	lsls	r3, r3, #7
 80033f8:	b21b      	sxth	r3, r3
 80033fa:	4313      	orrs	r3, r2
 80033fc:	b21b      	sxth	r3, r3
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003404:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	82da      	strh	r2, [r3, #22]
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
				| ((uint16_t) sbus->sbus_msg_bytes[18] << 4)) & 0x07FF;
 8003410:	091b      	lsrs	r3, r3, #4
 8003412:	b2db      	uxtb	r3, r3
 8003414:	b21a      	sxth	r2, r3
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	b21b      	sxth	r3, r3
 8003420:	4313      	orrs	r3, r2
 8003422:	b21b      	sxth	r3, r3
 8003424:	b29b      	uxth	r3, r3
 8003426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	831a      	strh	r2, [r3, #24]
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
				| ((uint16_t) sbus->sbus_msg_bytes[19] << 1)
 8003436:	09db      	lsrs	r3, r3, #7
 8003438:	b2db      	uxtb	r3, r3
 800343a:	b21a      	sxth	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	b21b      	sxth	r3, r3
 8003446:	4313      	orrs	r3, r2
 8003448:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[20] << 9)) & 0x07FF;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003450:	025b      	lsls	r3, r3, #9
 8003452:	b21b      	sxth	r3, r3
 8003454:	4313      	orrs	r3, r2
 8003456:	b21b      	sxth	r3, r3
 8003458:	b29b      	uxth	r3, r3
 800345a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800345e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	835a      	strh	r2, [r3, #26]
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				| ((uint16_t) sbus->sbus_msg_bytes[21] << 6)) & 0x07FF;
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	b2db      	uxtb	r3, r3
 800346e:	b21a      	sxth	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003476:	019b      	lsls	r3, r3, #6
 8003478:	b21b      	sxth	r3, r3
 800347a:	4313      	orrs	r3, r2
 800347c:	b21b      	sxth	r3, r3
 800347e:	b29b      	uxth	r3, r3
 8003480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003484:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	839a      	strh	r2, [r3, #28]
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
				| ((uint16_t) sbus->sbus_msg_bytes[22] << 3)) & 0x07FF;
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	b2db      	uxtb	r3, r3
 8003494:	b21a      	sxth	r2, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	b21b      	sxth	r3, r3
 80034a0:	4313      	orrs	r3, r2
 80034a2:	b21b      	sxth	r3, r3
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034aa:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	83da      	strh	r2, [r3, #30]
	//for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
	//	sbus->PWM_US_RC_CH[i] = MAP(sbus->PWM_US_RC_CH[i], SBUS_IN_MIN_PWM,
	//			SBUS_IN_MAX_PWM, SBUS_OUT_MIN_PWM, SBUS_OUT_MAX_PWM);
	//}

	if (sbus->sbus_msg_bytes[23] & (1 << 2)) {
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <RC_READ_SBUS+0x30e>
		sbus->frame_lost = 1;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2020 	strb.w	r2, [r3, #32]
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 3)) {
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <RC_READ_SBUS+0x324>
		sbus->failsafe = 1;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		sbus->arm = 0;
		sbus->disarm = 0;
	}
#endif

	return 1;
 80034dc:	2301      	movs	r3, #1
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034ec:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <HAL_Init+0x40>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a0d      	ldr	r2, [pc, #52]	; (8003528 <HAL_Init+0x40>)
 80034f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_Init+0x40>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <HAL_Init+0x40>)
 80034fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <HAL_Init+0x40>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a07      	ldr	r2, [pc, #28]	; (8003528 <HAL_Init+0x40>)
 800350a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003510:	2003      	movs	r0, #3
 8003512:	f000 fb6c 	bl	8003bee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003516:	2000      	movs	r0, #0
 8003518:	f7fe fdbc 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800351c:	f7fd ff78 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40023c00 	.word	0x40023c00

0800352c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_IncTick+0x20>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_IncTick+0x24>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4413      	add	r3, r2
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_IncTick+0x24>)
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000060 	.word	0x20000060
 8003550:	200052f0 	.word	0x200052f0

08003554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return uwTick;
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_GetTick+0x14>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	200052f0 	.word	0x200052f0

0800356c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7ff ffee 	bl	8003554 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d005      	beq.n	8003592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_Delay+0x40>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003592:	bf00      	nop
 8003594:	f7ff ffde 	bl	8003554 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d8f7      	bhi.n	8003594 <HAL_Delay+0x28>
  {
  }
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000060 	.word	0x20000060

080035b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e033      	b.n	800362e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd ff46 	bl	8001460 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035f6:	f023 0302 	bic.w	r3, r3, #2
 80035fa:	f043 0202 	orr.w	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f94a 	bl	800389c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
 800361e:	e001      	b.n	8003624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x1c>
 8003650:	2302      	movs	r3, #2
 8003652:	e113      	b.n	800387c <HAL_ADC_ConfigChannel+0x244>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b09      	cmp	r3, #9
 8003662:	d925      	bls.n	80036b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68d9      	ldr	r1, [r3, #12]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	461a      	mov	r2, r3
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	3b1e      	subs	r3, #30
 800367a:	2207      	movs	r2, #7
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43da      	mvns	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	400a      	ands	r2, r1
 8003688:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68d9      	ldr	r1, [r3, #12]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	4618      	mov	r0, r3
 800369c:	4603      	mov	r3, r0
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	4403      	add	r3, r0
 80036a2:	3b1e      	subs	r3, #30
 80036a4:	409a      	lsls	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	60da      	str	r2, [r3, #12]
 80036ae:	e022      	b.n	80036f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6919      	ldr	r1, [r3, #16]
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	2207      	movs	r2, #7
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	400a      	ands	r2, r1
 80036d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6919      	ldr	r1, [r3, #16]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	4603      	mov	r3, r0
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4403      	add	r3, r0
 80036ec:	409a      	lsls	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d824      	bhi.n	8003748 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	3b05      	subs	r3, #5
 8003710:	221f      	movs	r2, #31
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	400a      	ands	r2, r1
 800371e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	b29b      	uxth	r3, r3
 800372c:	4618      	mov	r0, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	3b05      	subs	r3, #5
 800373a:	fa00 f203 	lsl.w	r2, r0, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	635a      	str	r2, [r3, #52]	; 0x34
 8003746:	e04c      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b0c      	cmp	r3, #12
 800374e:	d824      	bhi.n	800379a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	3b23      	subs	r3, #35	; 0x23
 8003762:	221f      	movs	r2, #31
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43da      	mvns	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	400a      	ands	r2, r1
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	4618      	mov	r0, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	3b23      	subs	r3, #35	; 0x23
 800378c:	fa00 f203 	lsl.w	r2, r0, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	631a      	str	r2, [r3, #48]	; 0x30
 8003798:	e023      	b.n	80037e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	3b41      	subs	r3, #65	; 0x41
 80037ac:	221f      	movs	r2, #31
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43da      	mvns	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	400a      	ands	r2, r1
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	3b41      	subs	r3, #65	; 0x41
 80037d6:	fa00 f203 	lsl.w	r2, r0, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <HAL_ADC_ConfigChannel+0x250>)
 80037e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a28      	ldr	r2, [pc, #160]	; (800388c <HAL_ADC_ConfigChannel+0x254>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d10f      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x1d8>
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b12      	cmp	r3, #18
 80037f6:	d10b      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1d      	ldr	r2, [pc, #116]	; (800388c <HAL_ADC_ConfigChannel+0x254>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d12b      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x23a>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_ADC_ConfigChannel+0x258>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <HAL_ADC_ConfigChannel+0x1f4>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b11      	cmp	r3, #17
 800382a:	d122      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a11      	ldr	r2, [pc, #68]	; (8003890 <HAL_ADC_ConfigChannel+0x258>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d111      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_ADC_ConfigChannel+0x25c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a11      	ldr	r2, [pc, #68]	; (8003898 <HAL_ADC_ConfigChannel+0x260>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	0c9a      	lsrs	r2, r3, #18
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003864:	e002      	b.n	800386c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3b01      	subs	r3, #1
 800386a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f9      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr
 8003888:	40012300 	.word	0x40012300
 800388c:	40012000 	.word	0x40012000
 8003890:	10000012 	.word	0x10000012
 8003894:	20000000 	.word	0x20000000
 8003898:	431bde83 	.word	0x431bde83

0800389c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038a4:	4b79      	ldr	r3, [pc, #484]	; (8003a8c <ADC_Init+0x1f0>)
 80038a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	431a      	orrs	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	021a      	lsls	r2, r3, #8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6899      	ldr	r1, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	4a58      	ldr	r2, [pc, #352]	; (8003a90 <ADC_Init+0x1f4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d022      	beq.n	800397a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003942:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6899      	ldr	r1, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	e00f      	b.n	800399a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003998:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0202 	bic.w	r2, r2, #2
 80039a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6899      	ldr	r1, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7e1b      	ldrb	r3, [r3, #24]
 80039b4:	005a      	lsls	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	3b01      	subs	r3, #1
 80039f4:	035a      	lsls	r2, r3, #13
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	e007      	b.n	8003a10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	051a      	lsls	r2, r3, #20
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6899      	ldr	r1, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a52:	025a      	lsls	r2, r3, #9
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	029a      	lsls	r2, r3, #10
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	40012300 	.word	0x40012300
 8003a90:	0f000001 	.word	0x0f000001

08003a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	60d3      	str	r3, [r2, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0307 	and.w	r3, r3, #7
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4907      	ldr	r1, [pc, #28]	; (8003b30 <__NVIC_EnableIRQ+0x38>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	db0a      	blt.n	8003b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	490c      	ldr	r1, [pc, #48]	; (8003b80 <__NVIC_SetPriority+0x4c>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	440b      	add	r3, r1
 8003b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b5c:	e00a      	b.n	8003b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4908      	ldr	r1, [pc, #32]	; (8003b84 <__NVIC_SetPriority+0x50>)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	440b      	add	r3, r1
 8003b72:	761a      	strb	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	; 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf28      	it	cs
 8003ba6:	2304      	movcs	r3, #4
 8003ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d902      	bls.n	8003bb8 <NVIC_EncodePriority+0x30>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3b03      	subs	r3, #3
 8003bb6:	e000      	b.n	8003bba <NVIC_EncodePriority+0x32>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	401a      	ands	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	4313      	orrs	r3, r2
         );
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b082      	sub	sp, #8
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ff4c 	bl	8003a94 <__NVIC_SetPriorityGrouping>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c16:	f7ff ff61 	bl	8003adc <__NVIC_GetPriorityGrouping>
 8003c1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	6978      	ldr	r0, [r7, #20]
 8003c22:	f7ff ffb1 	bl	8003b88 <NVIC_EncodePriority>
 8003c26:	4602      	mov	r2, r0
 8003c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff ff80 	bl	8003b34 <__NVIC_SetPriority>
}
 8003c34:	bf00      	nop
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7ff ff54 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003c50:	bf00      	nop
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e014      	b.n	8003c94 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	791b      	ldrb	r3, [r3, #4]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fd fc6c 	bl	8001558 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb2:	d118      	bne.n	8003ce6 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f043 0201 	orr.w	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cde:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f825 	bl	8003d30 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cf4:	d118      	bne.n	8003d28 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f043 0202 	orr.w	r2, r3, #2
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003d20:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f85b 	bl	8003dde <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003d28:	bf00      	nop
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	2300      	movs	r3, #0
 8003d56:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	795b      	ldrb	r3, [r3, #5]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_DAC_ConfigChannel+0x20>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e036      	b.n	8003dd2 <HAL_DAC_ConfigChannel+0x8e>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2201      	movs	r2, #1
 8003d68:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003d78:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4013      	ands	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	22c0      	movs	r2, #192	; 0xc0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0cf      	b.n	8003fa6 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a69      	ldr	r2, [pc, #420]	; (8003fb0 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DFSDM_ChannelInit+0x3a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a67      	ldr	r2, [pc, #412]	; (8003fb4 <HAL_DFSDM_ChannelInit+0x1c0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_DFSDM_ChannelInit+0x3a>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a66      	ldr	r2, [pc, #408]	; (8003fb8 <HAL_DFSDM_ChannelInit+0x1c4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_DFSDM_ChannelInit+0x3a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a64      	ldr	r2, [pc, #400]	; (8003fbc <HAL_DFSDM_ChannelInit+0x1c8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d106      	bne.n	8003e3c <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003e2e:	4b64      	ldr	r3, [pc, #400]	; (8003fc0 <HAL_DFSDM_ChannelInit+0x1cc>)
 8003e30:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8003e32:	4b64      	ldr	r3, [pc, #400]	; (8003fc4 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003e34:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003e36:	4b5e      	ldr	r3, [pc, #376]	; (8003fb0 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	e005      	b.n	8003e48 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003e3c:	4b62      	ldr	r3, [pc, #392]	; (8003fc8 <HAL_DFSDM_ChannelInit+0x1d4>)
 8003e3e:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8003e40:	4b62      	ldr	r3, [pc, #392]	; (8003fcc <HAL_DFSDM_ChannelInit+0x1d8>)
 8003e42:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003e44:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <HAL_DFSDM_ChannelInit+0x1dc>)
 8003e46:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 f8c1 	bl	8003fd4 <DFSDM_GetChannelFromInstance>
 8003e52:	4603      	mov	r3, r0
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4413      	add	r3, r2
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0a0      	b.n	8003fa6 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7fd fbc3 	bl	80015f0 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d125      	bne.n	8003ec8 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	791b      	ldrb	r3, [r3, #4]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	041b      	lsls	r3, r3, #16
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003ed6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003ee6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003eec:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 020f 	bic.w	r2, r2, #15
 8003f04:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6819      	ldr	r1, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003f2c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6899      	ldr	r1, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f002 0207 	and.w	r2, r2, #7
 8003f58:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f84:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f81e 	bl	8003fd4 <DFSDM_GetChannelFromInstance>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40016000 	.word	0x40016000
 8003fb4:	40016020 	.word	0x40016020
 8003fb8:	40016040 	.word	0x40016040
 8003fbc:	40016060 	.word	0x40016060
 8003fc0:	20000120 	.word	0x20000120
 8003fc4:	20000124 	.word	0x20000124
 8003fc8:	20000134 	.word	0x20000134
 8003fcc:	20000138 	.word	0x20000138
 8003fd0:	40016400 	.word	0x40016400

08003fd4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a24      	ldr	r2, [pc, #144]	; (8004070 <DFSDM_GetChannelFromInstance+0x9c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d003      	beq.n	8003fec <DFSDM_GetChannelFromInstance+0x18>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a23      	ldr	r2, [pc, #140]	; (8004074 <DFSDM_GetChannelFromInstance+0xa0>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d102      	bne.n	8003ff2 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e037      	b.n	8004062 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a20      	ldr	r2, [pc, #128]	; (8004078 <DFSDM_GetChannelFromInstance+0xa4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <DFSDM_GetChannelFromInstance+0x2e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1f      	ldr	r2, [pc, #124]	; (800407c <DFSDM_GetChannelFromInstance+0xa8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d102      	bne.n	8004008 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8004002:	2301      	movs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e02c      	b.n	8004062 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <DFSDM_GetChannelFromInstance+0xac>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d003      	beq.n	8004018 <DFSDM_GetChannelFromInstance+0x44>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a1c      	ldr	r2, [pc, #112]	; (8004084 <DFSDM_GetChannelFromInstance+0xb0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d102      	bne.n	800401e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8004018:	2302      	movs	r3, #2
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e021      	b.n	8004062 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <DFSDM_GetChannelFromInstance+0xb4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <DFSDM_GetChannelFromInstance+0x5a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <DFSDM_GetChannelFromInstance+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d102      	bne.n	8004034 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 800402e:	2303      	movs	r3, #3
 8004030:	60fb      	str	r3, [r7, #12]
 8004032:	e016      	b.n	8004062 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a16      	ldr	r2, [pc, #88]	; (8004090 <DFSDM_GetChannelFromInstance+0xbc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d102      	bne.n	8004042 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 800403c:	2304      	movs	r3, #4
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e00f      	b.n	8004062 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <DFSDM_GetChannelFromInstance+0xc0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d102      	bne.n	8004050 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800404a:	2305      	movs	r3, #5
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e008      	b.n	8004062 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a11      	ldr	r2, [pc, #68]	; (8004098 <DFSDM_GetChannelFromInstance+0xc4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d102      	bne.n	800405e <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8004058:	2306      	movs	r3, #6
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e001      	b.n	8004062 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 800405e:	2307      	movs	r3, #7
 8004060:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8004062:	68fb      	ldr	r3, [r7, #12]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40016000 	.word	0x40016000
 8004074:	40016400 	.word	0x40016400
 8004078:	40016020 	.word	0x40016020
 800407c:	40016420 	.word	0x40016420
 8004080:	40016040 	.word	0x40016040
 8004084:	40016440 	.word	0x40016440
 8004088:	40016060 	.word	0x40016060
 800408c:	40016460 	.word	0x40016460
 8004090:	40016480 	.word	0x40016480
 8004094:	400164a0 	.word	0x400164a0
 8004098:	400164c0 	.word	0x400164c0

0800409c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040a8:	f7ff fa54 	bl	8003554 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e099      	b.n	80041ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040d8:	e00f      	b.n	80040fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040da:	f7ff fa3b 	bl	8003554 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d908      	bls.n	80040fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e078      	b.n	80041ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e8      	bne.n	80040da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <HAL_DMA_Init+0x158>)
 8004114:	4013      	ands	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004126:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004132:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	2b04      	cmp	r3, #4
 8004152:	d107      	bne.n	8004164 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	4313      	orrs	r3, r2
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0307 	bic.w	r3, r3, #7
 800417a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b04      	cmp	r3, #4
 800418c:	d117      	bne.n	80041be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00e      	beq.n	80041be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fa91 	bl	80046c8 <DMA_CheckFifoParam>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2240      	movs	r2, #64	; 0x40
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041ba:	2301      	movs	r3, #1
 80041bc:	e016      	b.n	80041ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fa48 	bl	800465c <DMA_CalcBaseAndBitshift>
 80041cc:	4603      	mov	r3, r0
 80041ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d4:	223f      	movs	r2, #63	; 0x3f
 80041d6:	409a      	lsls	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	e010803f 	.word	0xe010803f

080041f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_DMA_Start_IT+0x26>
 800421a:	2302      	movs	r3, #2
 800421c:	e040      	b.n	80042a0 <HAL_DMA_Start_IT+0xa8>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b01      	cmp	r3, #1
 8004230:	d12f      	bne.n	8004292 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f9da 	bl	8004600 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	223f      	movs	r2, #63	; 0x3f
 8004252:	409a      	lsls	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0216 	orr.w	r2, r2, #22
 8004266:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0208 	orr.w	r2, r2, #8
 800427e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	e005      	b.n	800429e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800429a:	2302      	movs	r3, #2
 800429c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d004      	beq.n	80042c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e00c      	b.n	80042e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2205      	movs	r2, #5
 80042ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0201 	bic.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042f8:	4b92      	ldr	r3, [pc, #584]	; (8004544 <HAL_DMA_IRQHandler+0x258>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a92      	ldr	r2, [pc, #584]	; (8004548 <HAL_DMA_IRQHandler+0x25c>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0a9b      	lsrs	r3, r3, #10
 8004304:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	2208      	movs	r2, #8
 8004318:	409a      	lsls	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d01a      	beq.n	8004358 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d013      	beq.n	8004358 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0204 	bic.w	r2, r2, #4
 800433e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004344:	2208      	movs	r2, #8
 8004346:	409a      	lsls	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435c:	2201      	movs	r2, #1
 800435e:	409a      	lsls	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4013      	ands	r3, r2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d012      	beq.n	800438e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437a:	2201      	movs	r2, #1
 800437c:	409a      	lsls	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	f043 0202 	orr.w	r2, r3, #2
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004392:	2204      	movs	r2, #4
 8004394:	409a      	lsls	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4013      	ands	r3, r2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d012      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00b      	beq.n	80043c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	2204      	movs	r2, #4
 80043b2:	409a      	lsls	r2, r3
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	f043 0204 	orr.w	r2, r3, #4
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c8:	2210      	movs	r2, #16
 80043ca:	409a      	lsls	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4013      	ands	r3, r2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d043      	beq.n	800445c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d03c      	beq.n	800445c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	2210      	movs	r2, #16
 80043e8:	409a      	lsls	r2, r3
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d018      	beq.n	800442e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d024      	beq.n	800445c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	4798      	blx	r3
 800441a:	e01f      	b.n	800445c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01b      	beq.n	800445c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
 800442c:	e016      	b.n	800445c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d107      	bne.n	800444c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0208 	bic.w	r2, r2, #8
 800444a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	2220      	movs	r2, #32
 8004462:	409a      	lsls	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4013      	ands	r3, r2
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 808e 	beq.w	800458a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8086 	beq.w	800458a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004482:	2220      	movs	r2, #32
 8004484:	409a      	lsls	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b05      	cmp	r3, #5
 8004494:	d136      	bne.n	8004504 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0216 	bic.w	r2, r2, #22
 80044a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <HAL_DMA_IRQHandler+0x1da>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0208 	bic.w	r2, r2, #8
 80044d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044da:	223f      	movs	r2, #63	; 0x3f
 80044dc:	409a      	lsls	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d07d      	beq.n	80045f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
        }
        return;
 8004502:	e078      	b.n	80045f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d01c      	beq.n	800454c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d108      	bne.n	8004532 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	2b00      	cmp	r3, #0
 8004526:	d030      	beq.n	800458a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
 8004530:	e02b      	b.n	800458a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d027      	beq.n	800458a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
 8004542:	e022      	b.n	800458a <HAL_DMA_IRQHandler+0x29e>
 8004544:	20000000 	.word	0x20000000
 8004548:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10f      	bne.n	800457a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0210 	bic.w	r2, r2, #16
 8004568:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	2b00      	cmp	r3, #0
 8004590:	d032      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d022      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2205      	movs	r2, #5
 80045a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0201 	bic.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3301      	adds	r3, #1
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d307      	bcc.n	80045d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1f2      	bne.n	80045b6 <HAL_DMA_IRQHandler+0x2ca>
 80045d0:	e000      	b.n	80045d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
 80045f4:	e000      	b.n	80045f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80045f6:	bf00      	nop
    }
  }
}
 80045f8:	3718      	adds	r7, #24
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop

08004600 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
 800460c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800461c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d108      	bne.n	8004640 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800463e:	e007      	b.n	8004650 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	60da      	str	r2, [r3, #12]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	3b10      	subs	r3, #16
 800466c:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <DMA_CalcBaseAndBitshift+0x64>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004676:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d909      	bls.n	800469e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004692:	f023 0303 	bic.w	r3, r3, #3
 8004696:	1d1a      	adds	r2, r3, #4
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	659a      	str	r2, [r3, #88]	; 0x58
 800469c:	e007      	b.n	80046ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046a6:	f023 0303 	bic.w	r3, r3, #3
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	aaaaaaab 	.word	0xaaaaaaab
 80046c4:	08014b6c 	.word	0x08014b6c

080046c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11f      	bne.n	8004722 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b03      	cmp	r3, #3
 80046e6:	d855      	bhi.n	8004794 <DMA_CheckFifoParam+0xcc>
 80046e8:	a201      	add	r2, pc, #4	; (adr r2, 80046f0 <DMA_CheckFifoParam+0x28>)
 80046ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ee:	bf00      	nop
 80046f0:	08004701 	.word	0x08004701
 80046f4:	08004713 	.word	0x08004713
 80046f8:	08004701 	.word	0x08004701
 80046fc:	08004795 	.word	0x08004795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d045      	beq.n	8004798 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004710:	e042      	b.n	8004798 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800471a:	d13f      	bne.n	800479c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004720:	e03c      	b.n	800479c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472a:	d121      	bne.n	8004770 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b03      	cmp	r3, #3
 8004730:	d836      	bhi.n	80047a0 <DMA_CheckFifoParam+0xd8>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <DMA_CheckFifoParam+0x70>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	08004749 	.word	0x08004749
 800473c:	0800474f 	.word	0x0800474f
 8004740:	08004749 	.word	0x08004749
 8004744:	08004761 	.word	0x08004761
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      break;
 800474c:	e02f      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d024      	beq.n	80047a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800475e:	e021      	b.n	80047a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004768:	d11e      	bne.n	80047a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800476e:	e01b      	b.n	80047a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	2b02      	cmp	r3, #2
 8004774:	d902      	bls.n	800477c <DMA_CheckFifoParam+0xb4>
 8004776:	2b03      	cmp	r3, #3
 8004778:	d003      	beq.n	8004782 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800477a:	e018      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e015      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00e      	beq.n	80047ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
      break;
 8004792:	e00b      	b.n	80047ac <DMA_CheckFifoParam+0xe4>
      break;
 8004794:	bf00      	nop
 8004796:	e00a      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
      break;
 8004798:	bf00      	nop
 800479a:	e008      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
      break;
 800479c:	bf00      	nop
 800479e:	e006      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
      break;
 80047a0:	bf00      	nop
 80047a2:	e004      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
      break;
 80047a4:	bf00      	nop
 80047a6:	e002      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
      break;   
 80047a8:	bf00      	nop
 80047aa:	e000      	b.n	80047ae <DMA_CheckFifoParam+0xe6>
      break;
 80047ac:	bf00      	nop
    }
  } 
  
  return status; 
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e081      	b.n	80048d2 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd f816 	bl	8001814 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2224      	movs	r2, #36	; 0x24
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800480c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800481c:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	e006      	b.n	8004844 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689a      	ldr	r2, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004842:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d104      	bne.n	8004856 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004854:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004868:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004878:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	ea42 0103 	orr.w	r1, r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69d9      	ldr	r1, [r3, #28]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1a      	ldr	r2, [r3, #32]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d138      	bne.n	8004962 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e032      	b.n	8004964 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2224      	movs	r2, #36	; 0x24
 800490a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 0201 	bic.w	r2, r2, #1
 800491c:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800492c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6819      	ldr	r1, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004962:	2302      	movs	r3, #2
  }
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	; 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e165      	b.n	8004c58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800498c:	2201      	movs	r2, #1
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4013      	ands	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	f040 8154 	bne.w	8004c52 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d00b      	beq.n	80049ca <HAL_GPIO_Init+0x5a>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d007      	beq.n	80049ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049be:	2b11      	cmp	r3, #17
 80049c0:	d003      	beq.n	80049ca <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b12      	cmp	r3, #18
 80049c8:	d130      	bne.n	8004a2c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	2203      	movs	r2, #3
 80049d6:	fa02 f303 	lsl.w	r3, r2, r3
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a00:	2201      	movs	r2, #1
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	fa02 f303 	lsl.w	r3, r2, r3
 8004a08:	43db      	mvns	r3, r3
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 0201 	and.w	r2, r3, #1
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	2203      	movs	r2, #3
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0xfc>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b12      	cmp	r3, #18
 8004a6a:	d123      	bne.n	8004ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	08da      	lsrs	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3208      	adds	r2, #8
 8004a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	220f      	movs	r2, #15
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	08da      	lsrs	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3208      	adds	r2, #8
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0203 	and.w	r2, r3, #3
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80ae 	beq.w	8004c52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	4b5c      	ldr	r3, [pc, #368]	; (8004c6c <HAL_GPIO_Init+0x2fc>)
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	4a5b      	ldr	r2, [pc, #364]	; (8004c6c <HAL_GPIO_Init+0x2fc>)
 8004b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b04:	6453      	str	r3, [r2, #68]	; 0x44
 8004b06:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <HAL_GPIO_Init+0x2fc>)
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b12:	4a57      	ldr	r2, [pc, #348]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	3302      	adds	r3, #2
 8004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a4e      	ldr	r2, [pc, #312]	; (8004c74 <HAL_GPIO_Init+0x304>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d025      	beq.n	8004b8a <HAL_GPIO_Init+0x21a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a4d      	ldr	r2, [pc, #308]	; (8004c78 <HAL_GPIO_Init+0x308>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01f      	beq.n	8004b86 <HAL_GPIO_Init+0x216>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a4c      	ldr	r2, [pc, #304]	; (8004c7c <HAL_GPIO_Init+0x30c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d019      	beq.n	8004b82 <HAL_GPIO_Init+0x212>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4b      	ldr	r2, [pc, #300]	; (8004c80 <HAL_GPIO_Init+0x310>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_GPIO_Init+0x20e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4a      	ldr	r2, [pc, #296]	; (8004c84 <HAL_GPIO_Init+0x314>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00d      	beq.n	8004b7a <HAL_GPIO_Init+0x20a>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a49      	ldr	r2, [pc, #292]	; (8004c88 <HAL_GPIO_Init+0x318>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0x206>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a48      	ldr	r2, [pc, #288]	; (8004c8c <HAL_GPIO_Init+0x31c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_GPIO_Init+0x202>
 8004b6e:	2306      	movs	r3, #6
 8004b70:	e00c      	b.n	8004b8c <HAL_GPIO_Init+0x21c>
 8004b72:	2307      	movs	r3, #7
 8004b74:	e00a      	b.n	8004b8c <HAL_GPIO_Init+0x21c>
 8004b76:	2305      	movs	r3, #5
 8004b78:	e008      	b.n	8004b8c <HAL_GPIO_Init+0x21c>
 8004b7a:	2304      	movs	r3, #4
 8004b7c:	e006      	b.n	8004b8c <HAL_GPIO_Init+0x21c>
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e004      	b.n	8004b8c <HAL_GPIO_Init+0x21c>
 8004b82:	2302      	movs	r3, #2
 8004b84:	e002      	b.n	8004b8c <HAL_GPIO_Init+0x21c>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <HAL_GPIO_Init+0x21c>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	f002 0203 	and.w	r2, r2, #3
 8004b92:	0092      	lsls	r2, r2, #2
 8004b94:	4093      	lsls	r3, r2
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b9c:	4934      	ldr	r1, [pc, #208]	; (8004c70 <HAL_GPIO_Init+0x300>)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	089b      	lsrs	r3, r3, #2
 8004ba2:	3302      	adds	r3, #2
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004baa:	4b39      	ldr	r3, [pc, #228]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bce:	4a30      	ldr	r2, [pc, #192]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004bd4:	4b2e      	ldr	r3, [pc, #184]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	43db      	mvns	r3, r3
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4013      	ands	r3, r2
 8004be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bf8:	4a25      	ldr	r2, [pc, #148]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bfe:	4b24      	ldr	r3, [pc, #144]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c22:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c28:	4b19      	ldr	r3, [pc, #100]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4013      	ands	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c4c:	4a10      	ldr	r2, [pc, #64]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3301      	adds	r3, #1
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	2b0f      	cmp	r3, #15
 8004c5c:	f67f ae96 	bls.w	800498c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c60:	bf00      	nop
 8004c62:	3724      	adds	r7, #36	; 0x24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40020000 	.word	0x40020000
 8004c78:	40020400 	.word	0x40020400
 8004c7c:	40020800 	.word	0x40020800
 8004c80:	40020c00 	.word	0x40020c00
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40021400 	.word	0x40021400
 8004c8c:	40021800 	.word	0x40021800
 8004c90:	40013c00 	.word	0x40013c00

08004c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	807b      	strh	r3, [r7, #2]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ca4:	787b      	ldrb	r3, [r7, #1]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004caa:	887a      	ldrh	r2, [r7, #2]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cb0:	e003      	b.n	8004cba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cb2:	887b      	ldrh	r3, [r7, #2]
 8004cb4:	041a      	lsls	r2, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	619a      	str	r2, [r3, #24]
}
 8004cba:	bf00      	nop
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc8:	b08f      	sub	sp, #60	; 0x3c
 8004cca:	af0a      	add	r7, sp, #40	; 0x28
 8004ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e054      	b.n	8004d82 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f00c fd86 	bl	8011804 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d102      	bne.n	8004d12 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f006 fd86 	bl	800b828 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	687e      	ldr	r6, [r7, #4]
 8004d24:	466d      	mov	r5, sp
 8004d26:	f106 0410 	add.w	r4, r6, #16
 8004d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d3a:	1d33      	adds	r3, r6, #4
 8004d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d3e:	6838      	ldr	r0, [r7, #0]
 8004d40:	f006 fd00 	bl	800b744 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f006 fd7d 	bl	800b84a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	687e      	ldr	r6, [r7, #4]
 8004d58:	466d      	mov	r5, sp
 8004d5a:	f106 0410 	add.w	r4, r6, #16
 8004d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d6e:	1d33      	adds	r3, r6, #4
 8004d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	f006 fe90 	bl	800ba98 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d8a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004d8a:	b590      	push	{r4, r7, lr}
 8004d8c:	b089      	sub	sp, #36	; 0x24
 8004d8e:	af04      	add	r7, sp, #16
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	4608      	mov	r0, r1
 8004d94:	4611      	mov	r1, r2
 8004d96:	461a      	mov	r2, r3
 8004d98:	4603      	mov	r3, r0
 8004d9a:	70fb      	strb	r3, [r7, #3]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70bb      	strb	r3, [r7, #2]
 8004da0:	4613      	mov	r3, r2
 8004da2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_HCD_HC_Init+0x28>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e07f      	b.n	8004eb2 <HAL_HCD_HC_Init+0x128>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004dba:	78fa      	ldrb	r2, [r7, #3]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4413      	add	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	440b      	add	r3, r1
 8004dc8:	333d      	adds	r3, #61	; 0x3d
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	440b      	add	r3, r1
 8004ddc:	3338      	adds	r3, #56	; 0x38
 8004dde:	787a      	ldrb	r2, [r7, #1]
 8004de0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004de2:	78fa      	ldrb	r2, [r7, #3]
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	440b      	add	r3, r1
 8004df0:	3340      	adds	r3, #64	; 0x40
 8004df2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004df4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	440b      	add	r3, r1
 8004e04:	3339      	adds	r3, #57	; 0x39
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004e0a:	78fa      	ldrb	r2, [r7, #3]
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	440b      	add	r3, r1
 8004e18:	333f      	adds	r3, #63	; 0x3f
 8004e1a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004e1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	78bb      	ldrb	r3, [r7, #2]
 8004e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e28:	b2d8      	uxtb	r0, r3
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	440b      	add	r3, r1
 8004e36:	333a      	adds	r3, #58	; 0x3a
 8004e38:	4602      	mov	r2, r0
 8004e3a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004e3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da0a      	bge.n	8004e5a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004e44:	78fa      	ldrb	r2, [r7, #3]
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	4413      	add	r3, r2
 8004e4e:	00db      	lsls	r3, r3, #3
 8004e50:	440b      	add	r3, r1
 8004e52:	333b      	adds	r3, #59	; 0x3b
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
 8004e58:	e009      	b.n	8004e6e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	440b      	add	r3, r1
 8004e68:	333b      	adds	r3, #59	; 0x3b
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	440b      	add	r3, r1
 8004e7c:	333c      	adds	r3, #60	; 0x3c
 8004e7e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004e82:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	787c      	ldrb	r4, [r7, #1]
 8004e8a:	78ba      	ldrb	r2, [r7, #2]
 8004e8c:	78f9      	ldrb	r1, [r7, #3]
 8004e8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e90:	9302      	str	r3, [sp, #8]
 8004e92:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	f006 ff76 	bl	800bd90 <USB_HC_Init>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd90      	pop	{r4, r7, pc}

08004eba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_HCD_HC_Halt+0x1e>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e00f      	b.n	8004ef8 <HAL_HCD_HC_Halt+0x3e>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	78fa      	ldrb	r2, [r7, #3]
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f007 f9b2 	bl	800c252 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	4608      	mov	r0, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	70fb      	strb	r3, [r7, #3]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70bb      	strb	r3, [r7, #2]
 8004f16:	4613      	mov	r3, r2
 8004f18:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	440b      	add	r3, r1
 8004f28:	333b      	adds	r3, #59	; 0x3b
 8004f2a:	78ba      	ldrb	r2, [r7, #2]
 8004f2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	6879      	ldr	r1, [r7, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	440b      	add	r3, r1
 8004f3c:	333f      	adds	r3, #63	; 0x3f
 8004f3e:	787a      	ldrb	r2, [r7, #1]
 8004f40:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004f42:	7c3b      	ldrb	r3, [r7, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d114      	bne.n	8004f72 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	440b      	add	r3, r1
 8004f56:	3342      	adds	r3, #66	; 0x42
 8004f58:	2203      	movs	r2, #3
 8004f5a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	440b      	add	r3, r1
 8004f6a:	333d      	adds	r3, #61	; 0x3d
 8004f6c:	7f3a      	ldrb	r2, [r7, #28]
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	e009      	b.n	8004f86 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	3342      	adds	r3, #66	; 0x42
 8004f82:	2202      	movs	r2, #2
 8004f84:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004f86:	787b      	ldrb	r3, [r7, #1]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	f200 80d6 	bhi.w	800513a <HAL_HCD_HC_SubmitRequest+0x23a>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fa5 	.word	0x08004fa5
 8004f98:	08005125 	.word	0x08005125
 8004f9c:	08005011 	.word	0x08005011
 8004fa0:	0800509b 	.word	0x0800509b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004fa4:	7c3b      	ldrb	r3, [r7, #16]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	f040 80c9 	bne.w	800513e <HAL_HCD_HC_SubmitRequest+0x23e>
 8004fac:	78bb      	ldrb	r3, [r7, #2]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 80c5 	bne.w	800513e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004fb4:	8b3b      	ldrh	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004fba:	78fa      	ldrb	r2, [r7, #3]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	440b      	add	r3, r1
 8004fc8:	3351      	adds	r3, #81	; 0x51
 8004fca:	2201      	movs	r2, #1
 8004fcc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004fce:	78fa      	ldrb	r2, [r7, #3]
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	440b      	add	r3, r1
 8004fdc:	3351      	adds	r3, #81	; 0x51
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fe4:	78fa      	ldrb	r2, [r7, #3]
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3342      	adds	r3, #66	; 0x42
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004ff8:	e0a1      	b.n	800513e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	440b      	add	r3, r1
 8005008:	3342      	adds	r3, #66	; 0x42
 800500a:	2202      	movs	r2, #2
 800500c:	701a      	strb	r2, [r3, #0]
      break;
 800500e:	e096      	b.n	800513e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005010:	78bb      	ldrb	r3, [r7, #2]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d120      	bne.n	8005058 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005016:	78fa      	ldrb	r2, [r7, #3]
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	440b      	add	r3, r1
 8005024:	3351      	adds	r3, #81	; 0x51
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800502c:	78fa      	ldrb	r2, [r7, #3]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	440b      	add	r3, r1
 800503a:	3342      	adds	r3, #66	; 0x42
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005040:	e07e      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	3342      	adds	r3, #66	; 0x42
 8005052:	2202      	movs	r2, #2
 8005054:	701a      	strb	r2, [r3, #0]
      break;
 8005056:	e073      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005058:	78fa      	ldrb	r2, [r7, #3]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	440b      	add	r3, r1
 8005066:	3350      	adds	r3, #80	; 0x50
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10a      	bne.n	8005084 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	440b      	add	r3, r1
 800507c:	3342      	adds	r3, #66	; 0x42
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
      break;
 8005082:	e05d      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005084:	78fa      	ldrb	r2, [r7, #3]
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	440b      	add	r3, r1
 8005092:	3342      	adds	r3, #66	; 0x42
 8005094:	2202      	movs	r2, #2
 8005096:	701a      	strb	r2, [r3, #0]
      break;
 8005098:	e052      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800509a:	78bb      	ldrb	r3, [r7, #2]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d120      	bne.n	80050e2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80050a0:	78fa      	ldrb	r2, [r7, #3]
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	3351      	adds	r3, #81	; 0x51
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80050b6:	78fa      	ldrb	r2, [r7, #3]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	3342      	adds	r3, #66	; 0x42
 80050c6:	2200      	movs	r2, #0
 80050c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80050ca:	e039      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80050cc:	78fa      	ldrb	r2, [r7, #3]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	3342      	adds	r3, #66	; 0x42
 80050dc:	2202      	movs	r2, #2
 80050de:	701a      	strb	r2, [r3, #0]
      break;
 80050e0:	e02e      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	440b      	add	r3, r1
 80050f0:	3350      	adds	r3, #80	; 0x50
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10a      	bne.n	800510e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	440b      	add	r3, r1
 8005106:	3342      	adds	r3, #66	; 0x42
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
      break;
 800510c:	e018      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	440b      	add	r3, r1
 800511c:	3342      	adds	r3, #66	; 0x42
 800511e:	2202      	movs	r2, #2
 8005120:	701a      	strb	r2, [r3, #0]
      break;
 8005122:	e00d      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	440b      	add	r3, r1
 8005132:	3342      	adds	r3, #66	; 0x42
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
      break;
 8005138:	e002      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800513a:	bf00      	nop
 800513c:	e000      	b.n	8005140 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800513e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005140:	78fa      	ldrb	r2, [r7, #3]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	440b      	add	r3, r1
 800514e:	3344      	adds	r3, #68	; 0x44
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8005154:	78fa      	ldrb	r2, [r7, #3]
 8005156:	8b39      	ldrh	r1, [r7, #24]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	4403      	add	r3, r0
 8005164:	3348      	adds	r3, #72	; 0x48
 8005166:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	440b      	add	r3, r1
 8005176:	335c      	adds	r3, #92	; 0x5c
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	440b      	add	r3, r1
 800518a:	334c      	adds	r3, #76	; 0x4c
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	4413      	add	r3, r2
 800519a:	00db      	lsls	r3, r3, #3
 800519c:	440b      	add	r3, r1
 800519e:	3339      	adds	r3, #57	; 0x39
 80051a0:	78fa      	ldrb	r2, [r7, #3]
 80051a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80051a4:	78fa      	ldrb	r2, [r7, #3]
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	335d      	adds	r3, #93	; 0x5d
 80051b4:	2200      	movs	r2, #0
 80051b6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	3338      	adds	r3, #56	; 0x38
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	18d1      	adds	r1, r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	f006 fee6 	bl	800bfa4 <USB_HC_StartXfer>
 80051d8:	4603      	mov	r3, r0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop

080051e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f006 fc09 	bl	800ba12 <USB_GetMode>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	f040 80ef 	bne.w	80053e6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4618      	mov	r0, r3
 800520e:	f006 fbed 	bl	800b9ec <USB_ReadInterrupts>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80e5 	beq.w	80053e4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f006 fbe4 	bl	800b9ec <USB_ReadInterrupts>
 8005224:	4603      	mov	r3, r0
 8005226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800522e:	d104      	bne.n	800523a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005238:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4618      	mov	r0, r3
 8005240:	f006 fbd4 	bl	800b9ec <USB_ReadInterrupts>
 8005244:	4603      	mov	r3, r0
 8005246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800524e:	d104      	bne.n	800525a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005258:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f006 fbc4 	bl	800b9ec <USB_ReadInterrupts>
 8005264:	4603      	mov	r3, r0
 8005266:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800526a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800526e:	d104      	bne.n	800527a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005278:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f006 fbb4 	bl	800b9ec <USB_ReadInterrupts>
 8005284:	4603      	mov	r3, r0
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b02      	cmp	r3, #2
 800528c:	d103      	bne.n	8005296 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2202      	movs	r2, #2
 8005294:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f006 fba6 	bl	800b9ec <USB_ReadInterrupts>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052aa:	d115      	bne.n	80052d8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80052b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d108      	bne.n	80052d8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f00c fb1a 	bl	8011900 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2101      	movs	r1, #1
 80052d2:	4618      	mov	r0, r3
 80052d4:	f006 fc96 	bl	800bc04 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f006 fb85 	bl	800b9ec <USB_ReadInterrupts>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80052ec:	d102      	bne.n	80052f4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 f966 	bl	80065c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f006 fb77 	bl	800b9ec <USB_ReadInterrupts>
 80052fe:	4603      	mov	r3, r0
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b08      	cmp	r3, #8
 8005306:	d106      	bne.n	8005316 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f00c fadd 	bl	80118c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2208      	movs	r2, #8
 8005314:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f006 fb66 	bl	800b9ec <USB_ReadInterrupts>
 8005320:	4603      	mov	r3, r0
 8005322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800532a:	d138      	bne.n	800539e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	f006 ff7d 	bl	800c230 <USB_HC_ReadInterrupt>
 8005336:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e025      	b.n	800538a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	fa22 f303 	lsr.w	r3, r2, r3
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005368:	d106      	bne.n	8005378 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f8cf 	bl	8005514 <HCD_HC_IN_IRQHandler>
 8005376:	e005      	b.n	8005384 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	4619      	mov	r1, r3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fcfd 	bl	8005d7e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	3301      	adds	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	429a      	cmp	r2, r3
 8005392:	d3d4      	bcc.n	800533e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800539c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f006 fb22 	bl	800b9ec <USB_ReadInterrupts>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	2b10      	cmp	r3, #16
 80053b0:	d101      	bne.n	80053b6 <HAL_HCD_IRQHandler+0x1d2>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <HAL_HCD_IRQHandler+0x1d4>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d014      	beq.n	80053e6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0210 	bic.w	r2, r2, #16
 80053ca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 f84b 	bl	8006468 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0210 	orr.w	r2, r2, #16
 80053e0:	619a      	str	r2, [r3, #24]
 80053e2:	e000      	b.n	80053e6 <HAL_HCD_IRQHandler+0x202>
      return;
 80053e4:	bf00      	nop
    }
  }
}
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_HCD_Start+0x16>
 80053fe:	2302      	movs	r3, #2
 8005400:	e013      	b.n	800542a <HAL_HCD_Start+0x3e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f006 f9f9 	bl	800b806 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2101      	movs	r1, #1
 800541a:	4618      	mov	r0, r3
 800541c:	f006 fc56 	bl	800bccc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b082      	sub	sp, #8
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_HCD_Stop+0x16>
 8005444:	2302      	movs	r3, #2
 8005446:	e00d      	b.n	8005464 <HAL_HCD_Stop+0x32>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f007 f837 	bl	800c4c8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f006 fbfd 	bl	800bc78 <USB_ResetPort>
 800547e:	4603      	mov	r3, r0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	440b      	add	r3, r1
 80054a2:	335c      	adds	r3, #92	; 0x5c
 80054a4:	781b      	ldrb	r3, [r3, #0]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6879      	ldr	r1, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	440b      	add	r3, r1
 80054cc:	334c      	adds	r3, #76	; 0x4c
 80054ce:	681b      	ldr	r3, [r3, #0]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f006 fc3f 	bl	800bd6c <USB_GetCurrentFrame>
 80054ee:	4603      	mov	r3, r0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4618      	mov	r0, r3
 8005506:	f006 fc1a 	bl	800bd3e <USB_GetHostSpeed>
 800550a:	4603      	mov	r3, r0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800552a:	78fb      	ldrb	r3, [r7, #3]
 800552c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4413      	add	r3, r2
 8005536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b04      	cmp	r3, #4
 8005542:	d119      	bne.n	8005578 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4413      	add	r3, r2
 800554c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005550:	461a      	mov	r2, r3
 8005552:	2304      	movs	r3, #4
 8005554:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4413      	add	r3, r2
 800555e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	440a      	add	r2, r1
 800556c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005570:	f043 0302 	orr.w	r3, r3, #2
 8005574:	60d3      	str	r3, [r2, #12]
 8005576:	e0ce      	b.n	8005716 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558e:	d12c      	bne.n	80055ea <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559c:	461a      	mov	r2, r3
 800559e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	335d      	adds	r3, #93	; 0x5d
 80055b4:	2207      	movs	r2, #7
 80055b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d2:	f043 0302 	orr.w	r3, r3, #2
 80055d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f006 fe35 	bl	800c252 <USB_HC_Halt>
 80055e8:	e095      	b.n	8005716 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 0320 	and.w	r3, r3, #32
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d109      	bne.n	8005614 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560c:	461a      	mov	r2, r3
 800560e:	2320      	movs	r3, #32
 8005610:	6093      	str	r3, [r2, #8]
 8005612:	e080      	b.n	8005716 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d134      	bne.n	8005694 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	4413      	add	r3, r2
 8005632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	440a      	add	r2, r1
 8005640:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	335d      	adds	r3, #93	; 0x5d
 800565a:	2205      	movs	r2, #5
 800565c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	461a      	mov	r2, r3
 800566c:	2310      	movs	r3, #16
 800566e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567c:	461a      	mov	r2, r3
 800567e:	2308      	movs	r3, #8
 8005680:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	4611      	mov	r1, r2
 800568c:	4618      	mov	r0, r3
 800568e:	f006 fde0 	bl	800c252 <USB_HC_Halt>
 8005692:	e040      	b.n	8005716 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056aa:	d134      	bne.n	8005716 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056c6:	f043 0302 	orr.w	r3, r3, #2
 80056ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f006 fdbb 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e8:	461a      	mov	r2, r3
 80056ea:	2310      	movs	r3, #16
 80056ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	440b      	add	r3, r1
 80056fc:	335d      	adds	r3, #93	; 0x5d
 80056fe:	2208      	movs	r2, #8
 8005700:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570e:	461a      	mov	r2, r3
 8005710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005714:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572c:	d122      	bne.n	8005774 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	440a      	add	r2, r1
 8005744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005748:	f043 0302 	orr.w	r3, r3, #2
 800574c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f006 fd7a 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	461a      	mov	r2, r3
 800576c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005770:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005772:	e300      	b.n	8005d76 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	f040 80fd 	bne.w	8005986 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01b      	beq.n	80057cc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3348      	adds	r3, #72	; 0x48
 80057a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	0159      	lsls	r1, r3, #5
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	440b      	add	r3, r1
 80057ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80057b8:	1ad1      	subs	r1, r2, r3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4613      	mov	r3, r2
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4403      	add	r3, r0
 80057c8:	334c      	adds	r3, #76	; 0x4c
 80057ca:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	335d      	adds	r3, #93	; 0x5d
 80057dc:	2201      	movs	r2, #1
 80057de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80057e0:	6879      	ldr	r1, [r7, #4]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	440b      	add	r3, r1
 80057ee:	3358      	adds	r3, #88	; 0x58
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005800:	461a      	mov	r2, r3
 8005802:	2301      	movs	r3, #1
 8005804:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	440b      	add	r3, r1
 8005814:	333f      	adds	r3, #63	; 0x3f
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00a      	beq.n	8005832 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	440b      	add	r3, r1
 800582a:	333f      	adds	r3, #63	; 0x3f
 800582c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800582e:	2b02      	cmp	r3, #2
 8005830:	d121      	bne.n	8005876 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	440a      	add	r2, r1
 8005848:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800584c:	f043 0302 	orr.w	r3, r3, #2
 8005850:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	4611      	mov	r1, r2
 800585c:	4618      	mov	r0, r3
 800585e:	f006 fcf8 	bl	800c252 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586e:	461a      	mov	r2, r3
 8005870:	2310      	movs	r3, #16
 8005872:	6093      	str	r3, [r2, #8]
 8005874:	e070      	b.n	8005958 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4613      	mov	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	4413      	add	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	440b      	add	r3, r1
 8005884:	333f      	adds	r3, #63	; 0x3f
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b03      	cmp	r3, #3
 800588a:	d12a      	bne.n	80058e2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4613      	mov	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	440b      	add	r3, r1
 80058ba:	335c      	adds	r3, #92	; 0x5c
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	b2d8      	uxtb	r0, r3
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	440b      	add	r3, r1
 80058d2:	335c      	adds	r3, #92	; 0x5c
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	4601      	mov	r1, r0
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f00c f81e 	bl	801191c <HAL_HCD_HC_NotifyURBChange_Callback>
 80058e0:	e03a      	b.n	8005958 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80058e2:	6879      	ldr	r1, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	00db      	lsls	r3, r3, #3
 80058ee:	440b      	add	r3, r1
 80058f0:	333f      	adds	r3, #63	; 0x3f
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d12f      	bne.n	8005958 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	440b      	add	r3, r1
 8005906:	335c      	adds	r3, #92	; 0x5c
 8005908:	2201      	movs	r2, #1
 800590a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4613      	mov	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	4413      	add	r3, r2
 8005916:	00db      	lsls	r3, r3, #3
 8005918:	440b      	add	r3, r1
 800591a:	3350      	adds	r3, #80	; 0x50
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f083 0301 	eor.w	r3, r3, #1
 8005922:	b2d8      	uxtb	r0, r3
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	440b      	add	r3, r1
 8005932:	3350      	adds	r3, #80	; 0x50
 8005934:	4602      	mov	r2, r0
 8005936:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	b2d8      	uxtb	r0, r3
 800593c:	6879      	ldr	r1, [r7, #4]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	440b      	add	r3, r1
 800594a:	335c      	adds	r3, #92	; 0x5c
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	4601      	mov	r1, r0
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f00b ffe2 	bl	801191c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	440b      	add	r3, r1
 8005966:	3350      	adds	r3, #80	; 0x50
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f083 0301 	eor.w	r3, r3, #1
 800596e:	b2d8      	uxtb	r0, r3
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	440b      	add	r3, r1
 800597e:	3350      	adds	r3, #80	; 0x50
 8005980:	4602      	mov	r2, r0
 8005982:	701a      	strb	r2, [r3, #0]
}
 8005984:	e1f7      	b.n	8005d76 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4413      	add	r3, r2
 800598e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	f040 811a 	bne.w	8005bd2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b8:	f023 0302 	bic.w	r3, r3, #2
 80059bc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	440b      	add	r3, r1
 80059cc:	335d      	adds	r3, #93	; 0x5d
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d10a      	bne.n	80059ea <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	440b      	add	r3, r1
 80059e2:	335c      	adds	r3, #92	; 0x5c
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
 80059e8:	e0d9      	b.n	8005b9e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	440b      	add	r3, r1
 80059f8:	335d      	adds	r3, #93	; 0x5d
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d10a      	bne.n	8005a16 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	440b      	add	r3, r1
 8005a0e:	335c      	adds	r3, #92	; 0x5c
 8005a10:	2205      	movs	r2, #5
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e0c3      	b.n	8005b9e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	440b      	add	r3, r1
 8005a24:	335d      	adds	r3, #93	; 0x5d
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	2b06      	cmp	r3, #6
 8005a2a:	d00a      	beq.n	8005a42 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	440b      	add	r3, r1
 8005a3a:	335d      	adds	r3, #93	; 0x5d
 8005a3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005a3e:	2b08      	cmp	r3, #8
 8005a40:	d156      	bne.n	8005af0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005a42:	6879      	ldr	r1, [r7, #4]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	440b      	add	r3, r1
 8005a50:	3358      	adds	r3, #88	; 0x58
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	1c59      	adds	r1, r3, #1
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4403      	add	r3, r0
 8005a64:	3358      	adds	r3, #88	; 0x58
 8005a66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	440b      	add	r3, r1
 8005a76:	3358      	adds	r3, #88	; 0x58
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d914      	bls.n	8005aa8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3358      	adds	r3, #88	; 0x58
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	440b      	add	r3, r1
 8005aa0:	335c      	adds	r3, #92	; 0x5c
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e009      	b.n	8005abc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	440b      	add	r3, r1
 8005ab6:	335c      	adds	r3, #92	; 0x5c
 8005ab8:	2202      	movs	r2, #2
 8005aba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ad2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ada:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	e056      	b.n	8005b9e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	440b      	add	r3, r1
 8005afe:	335d      	adds	r3, #93	; 0x5d
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d123      	bne.n	8005b4e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	440b      	add	r3, r1
 8005b14:	335c      	adds	r3, #92	; 0x5c
 8005b16:	2202      	movs	r2, #2
 8005b18:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b30:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b38:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b46:	461a      	mov	r2, r3
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e027      	b.n	8005b9e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	440b      	add	r3, r1
 8005b5c:	335d      	adds	r3, #93	; 0x5d
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b07      	cmp	r3, #7
 8005b62:	d11c      	bne.n	8005b9e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	440b      	add	r3, r1
 8005b72:	3358      	adds	r3, #88	; 0x58
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1c59      	adds	r1, r3, #1
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4403      	add	r3, r0
 8005b86:	3358      	adds	r3, #88	; 0x58
 8005b88:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	440b      	add	r3, r1
 8005b98:	335c      	adds	r3, #92	; 0x5c
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005baa:	461a      	mov	r2, r3
 8005bac:	2302      	movs	r3, #2
 8005bae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	b2d8      	uxtb	r0, r3
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	440b      	add	r3, r1
 8005bc2:	335c      	adds	r3, #92	; 0x5c
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4601      	mov	r1, r0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f00b fea6 	bl	801191c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005bd0:	e0d1      	b.n	8005d76 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b80      	cmp	r3, #128	; 0x80
 8005be6:	d13e      	bne.n	8005c66 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c02:	f043 0302 	orr.w	r3, r3, #2
 8005c06:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	440b      	add	r3, r1
 8005c16:	3358      	adds	r3, #88	; 0x58
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	1c59      	adds	r1, r3, #1
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4613      	mov	r3, r2
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	4403      	add	r3, r0
 8005c2a:	3358      	adds	r3, #88	; 0x58
 8005c2c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005c2e:	6879      	ldr	r1, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	00db      	lsls	r3, r3, #3
 8005c3a:	440b      	add	r3, r1
 8005c3c:	335d      	adds	r3, #93	; 0x5d
 8005c3e:	2206      	movs	r2, #6
 8005c40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f006 fb00 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5e:	461a      	mov	r2, r3
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	6093      	str	r3, [r2, #8]
}
 8005c64:	e087      	b.n	8005d76 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 0310 	and.w	r3, r3, #16
 8005c78:	2b10      	cmp	r3, #16
 8005c7a:	d17c      	bne.n	8005d76 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	440b      	add	r3, r1
 8005c8a:	333f      	adds	r3, #63	; 0x3f
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d122      	bne.n	8005cd8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3358      	adds	r3, #88	; 0x58
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	0151      	lsls	r1, r2, #5
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	440a      	add	r2, r1
 8005cbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cc0:	f043 0302 	orr.w	r3, r3, #2
 8005cc4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	4611      	mov	r1, r2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f006 fabe 	bl	800c252 <USB_HC_Halt>
 8005cd6:	e045      	b.n	8005d64 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	440b      	add	r3, r1
 8005ce6:	333f      	adds	r3, #63	; 0x3f
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	333f      	adds	r3, #63	; 0x3f
 8005cfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d12f      	bne.n	8005d64 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	440b      	add	r3, r1
 8005d12:	3358      	adds	r3, #88	; 0x58
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d121      	bne.n	8005d64 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	440b      	add	r3, r1
 8005d2e:	335d      	adds	r3, #93	; 0x5d
 8005d30:	2203      	movs	r2, #3
 8005d32:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4e:	f043 0302 	orr.w	r3, r3, #2
 8005d52:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f006 fa77 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	461a      	mov	r2, r3
 8005d72:	2310      	movs	r3, #16
 8005d74:	6093      	str	r3, [r2, #8]
}
 8005d76:	bf00      	nop
 8005d78:	3718      	adds	r7, #24
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b086      	sub	sp, #24
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	460b      	mov	r3, r1
 8005d88:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d119      	bne.n	8005de2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	0151      	lsls	r1, r2, #5
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	440a      	add	r2, r1
 8005dd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dda:	f043 0302 	orr.w	r3, r3, #2
 8005dde:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005de0:	e33e      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	d141      	bne.n	8005e7c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	461a      	mov	r2, r3
 8005e06:	2320      	movs	r3, #32
 8005e08:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	00db      	lsls	r3, r3, #3
 8005e16:	440b      	add	r3, r1
 8005e18:	333d      	adds	r3, #61	; 0x3d
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	f040 831f 	bne.w	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	440b      	add	r3, r1
 8005e30:	333d      	adds	r3, #61	; 0x3d
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005e36:	6879      	ldr	r1, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	440b      	add	r3, r1
 8005e44:	335c      	adds	r3, #92	; 0x5c
 8005e46:	2202      	movs	r2, #2
 8005e48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	0151      	lsls	r1, r2, #5
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	440a      	add	r2, r1
 8005e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f006 f9ec 	bl	800c252 <USB_HC_Halt>
}
 8005e7a:	e2f1      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8e:	2b40      	cmp	r3, #64	; 0x40
 8005e90:	d13f      	bne.n	8005f12 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	00db      	lsls	r3, r3, #3
 8005e9e:	440b      	add	r3, r1
 8005ea0:	335d      	adds	r3, #93	; 0x5d
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	333d      	adds	r3, #61	; 0x3d
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	00db      	lsls	r3, r3, #3
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3358      	adds	r3, #88	; 0x58
 8005eca:	2200      	movs	r2, #0
 8005ecc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	0151      	lsls	r1, r2, #5
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	440a      	add	r2, r1
 8005ee4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee8:	f043 0302 	orr.w	r3, r3, #2
 8005eec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f006 f9aa 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2340      	movs	r3, #64	; 0x40
 8005f0e:	6093      	str	r3, [r2, #8]
}
 8005f10:	e2a6      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f28:	d122      	bne.n	8005f70 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	015a      	lsls	r2, r3, #5
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4413      	add	r3, r2
 8005f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	0151      	lsls	r1, r2, #5
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	440a      	add	r2, r1
 8005f40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f44:	f043 0302 	orr.w	r3, r3, #2
 8005f48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	4611      	mov	r1, r2
 8005f54:	4618      	mov	r0, r3
 8005f56:	f006 f97c 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f66:	461a      	mov	r2, r3
 8005f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6c:	6093      	str	r3, [r2, #8]
}
 8005f6e:	e277      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d135      	bne.n	8005ff2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	440b      	add	r3, r1
 8005f94:	3358      	adds	r3, #88	; 0x58
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb4:	f043 0302 	orr.w	r3, r3, #2
 8005fb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	b2d2      	uxtb	r2, r2
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f006 f944 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	2301      	movs	r3, #1
 8005fda:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	440b      	add	r3, r1
 8005fea:	335d      	adds	r3, #93	; 0x5d
 8005fec:	2201      	movs	r2, #1
 8005fee:	701a      	strb	r2, [r3, #0]
}
 8005ff0:	e236      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b08      	cmp	r3, #8
 8006006:	d12b      	bne.n	8006060 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006014:	461a      	mov	r2, r3
 8006016:	2308      	movs	r3, #8
 8006018:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4413      	add	r3, r2
 8006022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	440a      	add	r2, r1
 8006030:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006034:	f043 0302 	orr.w	r3, r3, #2
 8006038:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	4611      	mov	r1, r2
 8006044:	4618      	mov	r0, r3
 8006046:	f006 f904 	bl	800c252 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	335d      	adds	r3, #93	; 0x5d
 800605a:	2205      	movs	r2, #5
 800605c:	701a      	strb	r2, [r3, #0]
}
 800605e:	e1ff      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4413      	add	r3, r2
 8006068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0310 	and.w	r3, r3, #16
 8006072:	2b10      	cmp	r3, #16
 8006074:	d155      	bne.n	8006122 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	440b      	add	r3, r1
 8006084:	3358      	adds	r3, #88	; 0x58
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	440b      	add	r3, r1
 8006098:	335d      	adds	r3, #93	; 0x5d
 800609a:	2203      	movs	r2, #3
 800609c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800609e:	6879      	ldr	r1, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	440b      	add	r3, r1
 80060ac:	333d      	adds	r3, #61	; 0x3d
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d114      	bne.n	80060de <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4613      	mov	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4413      	add	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	440b      	add	r3, r1
 80060c2:	333c      	adds	r3, #60	; 0x3c
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d109      	bne.n	80060de <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	440b      	add	r3, r1
 80060d8:	333d      	adds	r3, #61	; 0x3d
 80060da:	2201      	movs	r2, #1
 80060dc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	0151      	lsls	r1, r2, #5
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	440a      	add	r2, r1
 80060f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f8:	f043 0302 	orr.w	r3, r3, #2
 80060fc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	4611      	mov	r1, r2
 8006108:	4618      	mov	r0, r3
 800610a:	f006 f8a2 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4413      	add	r3, r2
 8006116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611a:	461a      	mov	r2, r3
 800611c:	2310      	movs	r3, #16
 800611e:	6093      	str	r3, [r2, #8]
}
 8006120:	e19e      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006134:	2b80      	cmp	r3, #128	; 0x80
 8006136:	d12b      	bne.n	8006190 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4413      	add	r3, r2
 8006140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	440a      	add	r2, r1
 800614e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006152:	f043 0302 	orr.w	r3, r3, #2
 8006156:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f006 f875 	bl	800c252 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006168:	6879      	ldr	r1, [r7, #4]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	00db      	lsls	r3, r3, #3
 8006174:	440b      	add	r3, r1
 8006176:	335d      	adds	r3, #93	; 0x5d
 8006178:	2206      	movs	r2, #6
 800617a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4413      	add	r3, r2
 8006184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006188:	461a      	mov	r2, r3
 800618a:	2380      	movs	r3, #128	; 0x80
 800618c:	6093      	str	r3, [r2, #8]
}
 800618e:	e167      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061a6:	d135      	bne.n	8006214 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c2:	f043 0302 	orr.w	r3, r3, #2
 80061c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	b2d2      	uxtb	r2, r2
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f006 f83d 	bl	800c252 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	461a      	mov	r2, r3
 80061e6:	2310      	movs	r3, #16
 80061e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061f6:	461a      	mov	r2, r3
 80061f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80061fe:	6879      	ldr	r1, [r7, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4613      	mov	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4413      	add	r3, r2
 8006208:	00db      	lsls	r3, r3, #3
 800620a:	440b      	add	r3, r1
 800620c:	335d      	adds	r3, #93	; 0x5d
 800620e:	2208      	movs	r2, #8
 8006210:	701a      	strb	r2, [r3, #0]
}
 8006212:	e125      	b.n	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4413      	add	r3, r2
 800621c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b02      	cmp	r3, #2
 8006228:	f040 811a 	bne.w	8006460 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	4413      	add	r3, r2
 8006234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	440a      	add	r2, r1
 8006242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006246:	f023 0302 	bic.w	r3, r3, #2
 800624a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	440b      	add	r3, r1
 800625a:	335d      	adds	r3, #93	; 0x5d
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d137      	bne.n	80062d2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	440b      	add	r3, r1
 8006270:	335c      	adds	r3, #92	; 0x5c
 8006272:	2201      	movs	r2, #1
 8006274:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	00db      	lsls	r3, r3, #3
 8006282:	440b      	add	r3, r1
 8006284:	333f      	adds	r3, #63	; 0x3f
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d00b      	beq.n	80062a4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	440b      	add	r3, r1
 800629a:	333f      	adds	r3, #63	; 0x3f
 800629c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800629e:	2b03      	cmp	r3, #3
 80062a0:	f040 80c5 	bne.w	800642e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	440b      	add	r3, r1
 80062b2:	3351      	adds	r3, #81	; 0x51
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f083 0301 	eor.w	r3, r3, #1
 80062ba:	b2d8      	uxtb	r0, r3
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	440b      	add	r3, r1
 80062ca:	3351      	adds	r3, #81	; 0x51
 80062cc:	4602      	mov	r2, r0
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	e0ad      	b.n	800642e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	440b      	add	r3, r1
 80062e0:	335d      	adds	r3, #93	; 0x5d
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d10a      	bne.n	80062fe <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	440b      	add	r3, r1
 80062f6:	335c      	adds	r3, #92	; 0x5c
 80062f8:	2202      	movs	r2, #2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	e097      	b.n	800642e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80062fe:	6879      	ldr	r1, [r7, #4]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	440b      	add	r3, r1
 800630c:	335d      	adds	r3, #93	; 0x5d
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d10a      	bne.n	800632a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006314:	6879      	ldr	r1, [r7, #4]
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4613      	mov	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	440b      	add	r3, r1
 8006322:	335c      	adds	r3, #92	; 0x5c
 8006324:	2202      	movs	r2, #2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	e081      	b.n	800642e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	440b      	add	r3, r1
 8006338:	335d      	adds	r3, #93	; 0x5d
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b05      	cmp	r3, #5
 800633e:	d10a      	bne.n	8006356 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	440b      	add	r3, r1
 800634e:	335c      	adds	r3, #92	; 0x5c
 8006350:	2205      	movs	r2, #5
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	e06b      	b.n	800642e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006356:	6879      	ldr	r1, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	440b      	add	r3, r1
 8006364:	335d      	adds	r3, #93	; 0x5d
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b06      	cmp	r3, #6
 800636a:	d00a      	beq.n	8006382 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	440b      	add	r3, r1
 800637a:	335d      	adds	r3, #93	; 0x5d
 800637c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800637e:	2b08      	cmp	r3, #8
 8006380:	d155      	bne.n	800642e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006382:	6879      	ldr	r1, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	440b      	add	r3, r1
 8006390:	3358      	adds	r3, #88	; 0x58
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	1c59      	adds	r1, r3, #1
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4613      	mov	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4403      	add	r3, r0
 80063a4:	3358      	adds	r3, #88	; 0x58
 80063a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	440b      	add	r3, r1
 80063b6:	3358      	adds	r3, #88	; 0x58
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d914      	bls.n	80063e8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	00db      	lsls	r3, r3, #3
 80063ca:	440b      	add	r3, r1
 80063cc:	3358      	adds	r3, #88	; 0x58
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	440b      	add	r3, r1
 80063e0:	335c      	adds	r3, #92	; 0x5c
 80063e2:	2204      	movs	r2, #4
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e009      	b.n	80063fc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4613      	mov	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	4413      	add	r3, r2
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	440b      	add	r3, r1
 80063f6:	335c      	adds	r3, #92	; 0x5c
 80063f8:	2202      	movs	r2, #2
 80063fa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	4413      	add	r3, r2
 8006404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006412:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800641a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	4413      	add	r3, r2
 8006424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006428:	461a      	mov	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	4413      	add	r3, r2
 8006436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643a:	461a      	mov	r2, r3
 800643c:	2302      	movs	r3, #2
 800643e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	b2d8      	uxtb	r0, r3
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	440b      	add	r3, r1
 8006452:	335c      	adds	r3, #92	; 0x5c
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	4601      	mov	r1, r0
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f00b fa5e 	bl	801191c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006460:	bf00      	nop
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	0c5b      	lsrs	r3, r3, #17
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	091b      	lsrs	r3, r3, #4
 8006498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800649c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d003      	beq.n	80064ac <HCD_RXQLVL_IRQHandler+0x44>
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	f000 8082 	beq.w	80065ae <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80064aa:	e083      	b.n	80065b4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d07f      	beq.n	80065b2 <HCD_RXQLVL_IRQHandler+0x14a>
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	69ba      	ldr	r2, [r7, #24]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	00db      	lsls	r3, r3, #3
 80064be:	440b      	add	r3, r1
 80064c0:	3344      	adds	r3, #68	; 0x44
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d074      	beq.n	80065b2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	440b      	add	r3, r1
 80064da:	3344      	adds	r3, #68	; 0x44
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	b292      	uxth	r2, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	f005 fa59 	bl	800b99a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80064e8:	6879      	ldr	r1, [r7, #4]
 80064ea:	69ba      	ldr	r2, [r7, #24]
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	440b      	add	r3, r1
 80064f6:	3344      	adds	r3, #68	; 0x44
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	18d1      	adds	r1, r2, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	00db      	lsls	r3, r3, #3
 800650a:	4403      	add	r3, r0
 800650c:	3344      	adds	r3, #68	; 0x44
 800650e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	69ba      	ldr	r2, [r7, #24]
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	440b      	add	r3, r1
 800651e:	334c      	adds	r3, #76	; 0x4c
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	18d1      	adds	r1, r2, r3
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4403      	add	r3, r0
 8006534:	334c      	adds	r3, #76	; 0x4c
 8006536:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006544:	691a      	ldr	r2, [r3, #16]
 8006546:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <HCD_RXQLVL_IRQHandler+0x154>)
 8006548:	4013      	ands	r3, r2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d031      	beq.n	80065b2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006564:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800656c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657a:	461a      	mov	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006580:	6879      	ldr	r1, [r7, #4]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	440b      	add	r3, r1
 800658e:	3350      	adds	r3, #80	; 0x50
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f083 0301 	eor.w	r3, r3, #1
 8006596:	b2d8      	uxtb	r0, r3
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	440b      	add	r3, r1
 80065a6:	3350      	adds	r3, #80	; 0x50
 80065a8:	4602      	mov	r2, r0
 80065aa:	701a      	strb	r2, [r3, #0]
      break;
 80065ac:	e001      	b.n	80065b2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80065ae:	bf00      	nop
 80065b0:	e000      	b.n	80065b4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80065b2:	bf00      	nop
  }
}
 80065b4:	bf00      	nop
 80065b6:	3728      	adds	r7, #40	; 0x28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	1ff80000 	.word	0x1ff80000

080065c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d10b      	bne.n	8006610 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d102      	bne.n	8006608 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f00b f96e 	bl	80118e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	f043 0302 	orr.w	r3, r3, #2
 800660e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b08      	cmp	r3, #8
 8006618:	d132      	bne.n	8006680 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f043 0308 	orr.w	r3, r3, #8
 8006620:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b04      	cmp	r3, #4
 800662a:	d126      	bne.n	800667a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d113      	bne.n	800665c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800663a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800663e:	d106      	bne.n	800664e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2102      	movs	r1, #2
 8006646:	4618      	mov	r0, r3
 8006648:	f005 fadc 	bl	800bc04 <USB_InitFSLSPClkSel>
 800664c:	e011      	b.n	8006672 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2101      	movs	r1, #1
 8006654:	4618      	mov	r0, r3
 8006656:	f005 fad5 	bl	800bc04 <USB_InitFSLSPClkSel>
 800665a:	e00a      	b.n	8006672 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d106      	bne.n	8006672 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800666a:	461a      	mov	r2, r3
 800666c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006670:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f00b f964 	bl	8011940 <HAL_HCD_PortEnabled_Callback>
 8006678:	e002      	b.n	8006680 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f00b f96e 	bl	801195c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b20      	cmp	r3, #32
 8006688:	d103      	bne.n	8006692 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	f043 0320 	orr.w	r3, r3, #32
 8006690:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006698:	461a      	mov	r2, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6013      	str	r3, [r2, #0]
}
 800669e:	bf00      	nop
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e11f      	b.n	80068fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d106      	bne.n	80066d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f7fb f8e8 	bl	80018a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2224      	movs	r2, #36	; 0x24
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800670a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800670c:	f001 f80e 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 8006710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	4a7b      	ldr	r2, [pc, #492]	; (8006904 <HAL_I2C_Init+0x25c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d807      	bhi.n	800672c <HAL_I2C_Init+0x84>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	4a7a      	ldr	r2, [pc, #488]	; (8006908 <HAL_I2C_Init+0x260>)
 8006720:	4293      	cmp	r3, r2
 8006722:	bf94      	ite	ls
 8006724:	2301      	movls	r3, #1
 8006726:	2300      	movhi	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	e006      	b.n	800673a <HAL_I2C_Init+0x92>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	4a77      	ldr	r2, [pc, #476]	; (800690c <HAL_I2C_Init+0x264>)
 8006730:	4293      	cmp	r3, r2
 8006732:	bf94      	ite	ls
 8006734:	2301      	movls	r3, #1
 8006736:	2300      	movhi	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e0db      	b.n	80068fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4a72      	ldr	r2, [pc, #456]	; (8006910 <HAL_I2C_Init+0x268>)
 8006746:	fba2 2303 	umull	r2, r3, r2, r3
 800674a:	0c9b      	lsrs	r3, r3, #18
 800674c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	430a      	orrs	r2, r1
 8006760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	4a64      	ldr	r2, [pc, #400]	; (8006904 <HAL_I2C_Init+0x25c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d802      	bhi.n	800677c <HAL_I2C_Init+0xd4>
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	3301      	adds	r3, #1
 800677a:	e009      	b.n	8006790 <HAL_I2C_Init+0xe8>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006782:	fb02 f303 	mul.w	r3, r2, r3
 8006786:	4a63      	ldr	r2, [pc, #396]	; (8006914 <HAL_I2C_Init+0x26c>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	099b      	lsrs	r3, r3, #6
 800678e:	3301      	adds	r3, #1
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	430b      	orrs	r3, r1
 8006796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80067a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4956      	ldr	r1, [pc, #344]	; (8006904 <HAL_I2C_Init+0x25c>)
 80067ac:	428b      	cmp	r3, r1
 80067ae:	d80d      	bhi.n	80067cc <HAL_I2C_Init+0x124>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1e59      	subs	r1, r3, #1
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80067be:	3301      	adds	r3, #1
 80067c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c4:	2b04      	cmp	r3, #4
 80067c6:	bf38      	it	cc
 80067c8:	2304      	movcc	r3, #4
 80067ca:	e04f      	b.n	800686c <HAL_I2C_Init+0x1c4>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d111      	bne.n	80067f8 <HAL_I2C_Init+0x150>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	1e58      	subs	r0, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6859      	ldr	r1, [r3, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	005b      	lsls	r3, r3, #1
 80067e0:	440b      	add	r3, r1
 80067e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067e6:	3301      	adds	r3, #1
 80067e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e012      	b.n	800681e <HAL_I2C_Init+0x176>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	1e58      	subs	r0, r3, #1
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6859      	ldr	r1, [r3, #4]
 8006800:	460b      	mov	r3, r1
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	0099      	lsls	r1, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	fbb0 f3f3 	udiv	r3, r0, r3
 800680e:	3301      	adds	r3, #1
 8006810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf0c      	ite	eq
 8006818:	2301      	moveq	r3, #1
 800681a:	2300      	movne	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_I2C_Init+0x17e>
 8006822:	2301      	movs	r3, #1
 8006824:	e022      	b.n	800686c <HAL_I2C_Init+0x1c4>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10e      	bne.n	800684c <HAL_I2C_Init+0x1a4>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1e58      	subs	r0, r3, #1
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	440b      	add	r3, r1
 800683c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006840:	3301      	adds	r3, #1
 8006842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800684a:	e00f      	b.n	800686c <HAL_I2C_Init+0x1c4>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	1e58      	subs	r0, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6859      	ldr	r1, [r3, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	440b      	add	r3, r1
 800685a:	0099      	lsls	r1, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006862:	3301      	adds	r3, #1
 8006864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006868:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	6809      	ldr	r1, [r1, #0]
 8006870:	4313      	orrs	r3, r2
 8006872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69da      	ldr	r2, [r3, #28]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800689a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6911      	ldr	r1, [r2, #16]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	68d2      	ldr	r2, [r2, #12]
 80068a6:	4311      	orrs	r1, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	695a      	ldr	r2, [r3, #20]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f042 0201 	orr.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	000186a0 	.word	0x000186a0
 8006908:	001e847f 	.word	0x001e847f
 800690c:	003d08ff 	.word	0x003d08ff
 8006910:	431bde83 	.word	0x431bde83
 8006914:	10624dd3 	.word	0x10624dd3

08006918 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e154      	b.n	8006bd4 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a98      	ldr	r2, [pc, #608]	; (8006ba4 <HAL_I2S_Init+0x28c>)
 8006942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7fa fff5 	bl	8001934 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2202      	movs	r2, #2
 800694e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	6812      	ldr	r2, [r2, #0]
 800695c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006960:	f023 030f 	bic.w	r3, r3, #15
 8006964:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2202      	movs	r2, #2
 800696c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	2b02      	cmp	r3, #2
 8006974:	d06f      	beq.n	8006a56 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800697e:	2310      	movs	r3, #16
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	e001      	b.n	8006988 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006984:	2320      	movs	r3, #32
 8006986:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2b20      	cmp	r3, #32
 800698e:	d802      	bhi.n	8006996 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	005b      	lsls	r3, r3, #1
 8006994:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a83      	ldr	r2, [pc, #524]	; (8006ba8 <HAL_I2S_Init+0x290>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d004      	beq.n	80069aa <HAL_I2S_Init+0x92>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a81      	ldr	r2, [pc, #516]	; (8006bac <HAL_I2S_Init+0x294>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d104      	bne.n	80069b4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80069aa:	2001      	movs	r0, #1
 80069ac:	f001 f9a4 	bl	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	e003      	b.n	80069bc <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80069b4:	2002      	movs	r0, #2
 80069b6:	f001 f99f 	bl	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq>
 80069ba:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c4:	d125      	bne.n	8006a12 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d010      	beq.n	80069f0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	461a      	mov	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ea:	3305      	adds	r3, #5
 80069ec:	613b      	str	r3, [r7, #16]
 80069ee:	e01f      	b.n	8006a30 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	005b      	lsls	r3, r3, #1
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	3305      	adds	r3, #5
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	e00e      	b.n	8006a30 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	461a      	mov	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2c:	3305      	adds	r3, #5
 8006a2e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	4a5f      	ldr	r2, [pc, #380]	; (8006bb0 <HAL_I2S_Init+0x298>)
 8006a34:	fba2 2303 	umull	r2, r3, r2, r3
 8006a38:	08db      	lsrs	r3, r3, #3
 8006a3a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	021b      	lsls	r3, r3, #8
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e003      	b.n	8006a5e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006a56:	2302      	movs	r3, #2
 8006a58:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d902      	bls.n	8006a6a <HAL_I2S_Init+0x152>
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2bff      	cmp	r3, #255	; 0xff
 8006a68:	d907      	bls.n	8006a7a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	f043 0210 	orr.w	r2, r3, #16
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e0ac      	b.n	8006bd4 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	ea42 0103 	orr.w	r1, r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a98:	f023 030f 	bic.w	r3, r3, #15
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	6851      	ldr	r1, [r2, #4]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6892      	ldr	r2, [r2, #8]
 8006aa4:	4311      	orrs	r1, r2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	68d2      	ldr	r2, [r2, #12]
 8006aaa:	4311      	orrs	r1, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6992      	ldr	r2, [r2, #24]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006abc:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	2b30      	cmp	r3, #48	; 0x30
 8006ac4:	d003      	beq.n	8006ace <HAL_I2S_Init+0x1b6>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	2bb0      	cmp	r3, #176	; 0xb0
 8006acc:	d107      	bne.n	8006ade <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006adc:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d16e      	bne.n	8006bc4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a32      	ldr	r2, [pc, #200]	; (8006bb4 <HAL_I2S_Init+0x29c>)
 8006aea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a2d      	ldr	r2, [pc, #180]	; (8006ba8 <HAL_I2S_Init+0x290>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d101      	bne.n	8006afa <HAL_I2S_Init+0x1e2>
 8006af6:	4b30      	ldr	r3, [pc, #192]	; (8006bb8 <HAL_I2S_Init+0x2a0>)
 8006af8:	e001      	b.n	8006afe <HAL_I2S_Init+0x1e6>
 8006afa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	4928      	ldr	r1, [pc, #160]	; (8006ba8 <HAL_I2S_Init+0x290>)
 8006b06:	428a      	cmp	r2, r1
 8006b08:	d101      	bne.n	8006b0e <HAL_I2S_Init+0x1f6>
 8006b0a:	4a2b      	ldr	r2, [pc, #172]	; (8006bb8 <HAL_I2S_Init+0x2a0>)
 8006b0c:	e001      	b.n	8006b12 <HAL_I2S_Init+0x1fa>
 8006b0e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006b12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006b16:	f023 030f 	bic.w	r3, r3, #15
 8006b1a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a21      	ldr	r2, [pc, #132]	; (8006ba8 <HAL_I2S_Init+0x290>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d101      	bne.n	8006b2a <HAL_I2S_Init+0x212>
 8006b26:	4b24      	ldr	r3, [pc, #144]	; (8006bb8 <HAL_I2S_Init+0x2a0>)
 8006b28:	e001      	b.n	8006b2e <HAL_I2S_Init+0x216>
 8006b2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b2e:	2202      	movs	r2, #2
 8006b30:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1c      	ldr	r2, [pc, #112]	; (8006ba8 <HAL_I2S_Init+0x290>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d101      	bne.n	8006b40 <HAL_I2S_Init+0x228>
 8006b3c:	4b1e      	ldr	r3, [pc, #120]	; (8006bb8 <HAL_I2S_Init+0x2a0>)
 8006b3e:	e001      	b.n	8006b44 <HAL_I2S_Init+0x22c>
 8006b40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b50:	d003      	beq.n	8006b5a <HAL_I2S_Init+0x242>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006b5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	e001      	b.n	8006b66 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006b62:	2300      	movs	r3, #0
 8006b64:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	b299      	uxth	r1, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	699b      	ldr	r3, [r3, #24]
 8006b7a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006b7c:	4303      	orrs	r3, r0
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	430b      	orrs	r3, r1
 8006b82:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	897b      	ldrh	r3, [r7, #10]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b92:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a03      	ldr	r2, [pc, #12]	; (8006ba8 <HAL_I2S_Init+0x290>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10e      	bne.n	8006bbc <HAL_I2S_Init+0x2a4>
 8006b9e:	4b06      	ldr	r3, [pc, #24]	; (8006bb8 <HAL_I2S_Init+0x2a0>)
 8006ba0:	e00e      	b.n	8006bc0 <HAL_I2S_Init+0x2a8>
 8006ba2:	bf00      	nop
 8006ba4:	08006c97 	.word	0x08006c97
 8006ba8:	40003800 	.word	0x40003800
 8006bac:	40003c00 	.word	0x40003c00
 8006bb0:	cccccccd 	.word	0xcccccccd
 8006bb4:	08006dad 	.word	0x08006dad
 8006bb8:	40003400 	.word	0x40003400
 8006bbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bc0:	897a      	ldrh	r2, [r7, #10]
 8006bc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	881a      	ldrh	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	1c9a      	adds	r2, r3, #2
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10e      	bne.n	8006c30 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c20:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fc f8ea 	bl	8002e04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68da      	ldr	r2, [r3, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c52:	1c9a      	adds	r2, r3, #2
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10e      	bne.n	8006c8e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c7e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7fc f8dd 	bl	8002e48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b086      	sub	sp, #24
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d13a      	bne.n	8006d28 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d109      	bne.n	8006cd0 <I2S_IRQHandler+0x3a>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc6:	2b40      	cmp	r3, #64	; 0x40
 8006cc8:	d102      	bne.n	8006cd0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7ff ffb4 	bl	8006c38 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d126      	bne.n	8006d28 <I2S_IRQHandler+0x92>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b20      	cmp	r3, #32
 8006ce6:	d11f      	bne.n	8006d28 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cf6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	613b      	str	r3, [r7, #16]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	613b      	str	r3, [r7, #16]
 8006d0c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1a:	f043 0202 	orr.w	r2, r3, #2
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fc f878 	bl	8002e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d136      	bne.n	8006da2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d109      	bne.n	8006d52 <I2S_IRQHandler+0xbc>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d48:	2b80      	cmp	r3, #128	; 0x80
 8006d4a:	d102      	bne.n	8006d52 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7ff ff45 	bl	8006bdc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f003 0308 	and.w	r3, r3, #8
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d122      	bne.n	8006da2 <I2S_IRQHandler+0x10c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f003 0320 	and.w	r3, r3, #32
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d11b      	bne.n	8006da2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d78:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d94:	f043 0204 	orr.w	r2, r3, #4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7fc f83b 	bl	8002e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006da2:	bf00      	nop
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4aa2      	ldr	r2, [pc, #648]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d101      	bne.n	8006dca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006dc6:	4ba2      	ldr	r3, [pc, #648]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006dc8:	e001      	b.n	8006dce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a9b      	ldr	r2, [pc, #620]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d101      	bne.n	8006de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006de4:	4b9a      	ldr	r3, [pc, #616]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006de6:	e001      	b.n	8006dec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df8:	d004      	beq.n	8006e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f040 8099 	bne.w	8006f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d107      	bne.n	8006e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d002      	beq.n	8006e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f925 	bl	8007068 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d107      	bne.n	8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f9c8 	bl	80071c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d13a      	bne.n	8006eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d035      	beq.n	8006eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a7e      	ldr	r2, [pc, #504]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d101      	bne.n	8006e5a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006e56:	4b7e      	ldr	r3, [pc, #504]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006e58:	e001      	b.n	8006e5e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e5e:	685a      	ldr	r2, [r3, #4]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4979      	ldr	r1, [pc, #484]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006e66:	428b      	cmp	r3, r1
 8006e68:	d101      	bne.n	8006e6e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006e6a:	4b79      	ldr	r3, [pc, #484]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006e6c:	e001      	b.n	8006e72 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e76:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006e88:	2300      	movs	r3, #0
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	f043 0202 	orr.w	r2, r3, #2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fb ffb0 	bl	8002e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	f040 80be 	bne.w	8007040 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 80b8 	beq.w	8007040 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ede:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a59      	ldr	r2, [pc, #356]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d101      	bne.n	8006eee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006eea:	4b59      	ldr	r3, [pc, #356]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006eec:	e001      	b.n	8006ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4954      	ldr	r1, [pc, #336]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006efa:	428b      	cmp	r3, r1
 8006efc:	d101      	bne.n	8006f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006efe:	4b54      	ldr	r3, [pc, #336]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f00:	e001      	b.n	8006f06 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f0a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60bb      	str	r3, [r7, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f26:	f043 0204 	orr.w	r2, r3, #4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fb ff72 	bl	8002e18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006f34:	e084      	b.n	8007040 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d107      	bne.n	8006f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f8be 	bl	80070cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d107      	bne.n	8006f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f8fd 	bl	8007164 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	d12f      	bne.n	8006fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d02a      	beq.n	8006fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f8c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a2e      	ldr	r2, [pc, #184]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d101      	bne.n	8006f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006f98:	4b2d      	ldr	r3, [pc, #180]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f9a:	e001      	b.n	8006fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006f9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4929      	ldr	r1, [pc, #164]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006fa8:	428b      	cmp	r3, r1
 8006faa:	d101      	bne.n	8006fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006fac:	4b28      	ldr	r3, [pc, #160]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006fae:	e001      	b.n	8006fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006fb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	f043 0202 	orr.w	r2, r3, #2
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fb ff22 	bl	8002e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	f003 0308 	and.w	r3, r3, #8
 8006fda:	2b08      	cmp	r3, #8
 8006fdc:	d131      	bne.n	8007042 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d02c      	beq.n	8007042 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a17      	ldr	r2, [pc, #92]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d101      	bne.n	8006ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ff4:	e001      	b.n	8006ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4912      	ldr	r1, [pc, #72]	; (800704c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007002:	428b      	cmp	r3, r1
 8007004:	d101      	bne.n	800700a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007008:	e001      	b.n	800700e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800700a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800700e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007012:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007022:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007030:	f043 0204 	orr.w	r2, r3, #4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7fb feed 	bl	8002e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800703e:	e000      	b.n	8007042 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007040:	bf00      	nop
}
 8007042:	bf00      	nop
 8007044:	3720      	adds	r7, #32
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	40003800 	.word	0x40003800
 8007050:	40003400 	.word	0x40003400

08007054 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007074:	1c99      	adds	r1, r3, #2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	6251      	str	r1, [r2, #36]	; 0x24
 800707a:	881a      	ldrh	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d113      	bne.n	80070c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f7ff ffc9 	bl	8007054 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070c2:	bf00      	nop
 80070c4:	3708      	adds	r7, #8
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	1c99      	adds	r1, r3, #2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	6251      	str	r1, [r2, #36]	; 0x24
 80070de:	8819      	ldrh	r1, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1d      	ldr	r2, [pc, #116]	; (800715c <I2SEx_TxISR_I2SExt+0x90>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d101      	bne.n	80070ee <I2SEx_TxISR_I2SExt+0x22>
 80070ea:	4b1d      	ldr	r3, [pc, #116]	; (8007160 <I2SEx_TxISR_I2SExt+0x94>)
 80070ec:	e001      	b.n	80070f2 <I2SEx_TxISR_I2SExt+0x26>
 80070ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070f2:	460a      	mov	r2, r1
 80070f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007108:	b29b      	uxth	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d121      	bne.n	8007152 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a12      	ldr	r2, [pc, #72]	; (800715c <I2SEx_TxISR_I2SExt+0x90>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d101      	bne.n	800711c <I2SEx_TxISR_I2SExt+0x50>
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <I2SEx_TxISR_I2SExt+0x94>)
 800711a:	e001      	b.n	8007120 <I2SEx_TxISR_I2SExt+0x54>
 800711c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	490d      	ldr	r1, [pc, #52]	; (800715c <I2SEx_TxISR_I2SExt+0x90>)
 8007128:	428b      	cmp	r3, r1
 800712a:	d101      	bne.n	8007130 <I2SEx_TxISR_I2SExt+0x64>
 800712c:	4b0c      	ldr	r3, [pc, #48]	; (8007160 <I2SEx_TxISR_I2SExt+0x94>)
 800712e:	e001      	b.n	8007134 <I2SEx_TxISR_I2SExt+0x68>
 8007130:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007134:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007138:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d106      	bne.n	8007152 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff ff81 	bl	8007054 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007152:	bf00      	nop
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40003800 	.word	0x40003800
 8007160:	40003400 	.word	0x40003400

08007164 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b082      	sub	sp, #8
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68d8      	ldr	r0, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007176:	1c99      	adds	r1, r3, #2
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800717c:	b282      	uxth	r2, r0
 800717e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007184:	b29b      	uxth	r3, r3
 8007186:	3b01      	subs	r3, #1
 8007188:	b29a      	uxth	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007192:	b29b      	uxth	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d113      	bne.n	80071c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff ff4a 	bl	8007054 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a20      	ldr	r2, [pc, #128]	; (8007258 <I2SEx_RxISR_I2SExt+0x90>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d101      	bne.n	80071de <I2SEx_RxISR_I2SExt+0x16>
 80071da:	4b20      	ldr	r3, [pc, #128]	; (800725c <I2SEx_RxISR_I2SExt+0x94>)
 80071dc:	e001      	b.n	80071e2 <I2SEx_RxISR_I2SExt+0x1a>
 80071de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071e2:	68d8      	ldr	r0, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e8:	1c99      	adds	r1, r3, #2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80071ee:	b282      	uxth	r2, r0
 80071f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007204:	b29b      	uxth	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d121      	bne.n	800724e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a12      	ldr	r2, [pc, #72]	; (8007258 <I2SEx_RxISR_I2SExt+0x90>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d101      	bne.n	8007218 <I2SEx_RxISR_I2SExt+0x50>
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <I2SEx_RxISR_I2SExt+0x94>)
 8007216:	e001      	b.n	800721c <I2SEx_RxISR_I2SExt+0x54>
 8007218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800721c:	685a      	ldr	r2, [r3, #4]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	490d      	ldr	r1, [pc, #52]	; (8007258 <I2SEx_RxISR_I2SExt+0x90>)
 8007224:	428b      	cmp	r3, r1
 8007226:	d101      	bne.n	800722c <I2SEx_RxISR_I2SExt+0x64>
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <I2SEx_RxISR_I2SExt+0x94>)
 800722a:	e001      	b.n	8007230 <I2SEx_RxISR_I2SExt+0x68>
 800722c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007230:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007234:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800723a:	b29b      	uxth	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f7ff ff03 	bl	8007054 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800724e:	bf00      	nop
 8007250:	3708      	adds	r7, #8
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40003800 	.word	0x40003800
 800725c:	40003400 	.word	0x40003400

08007260 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af02      	add	r7, sp, #8
 8007266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8007268:	f7fc f974 	bl	8003554 <HAL_GetTick>
 800726c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e069      	b.n	800734c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7fa fc0b 	bl	8001aa8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007292:	f241 3188 	movw	r1, #5000	; 0x1388
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f85e 	bl	8007358 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	021a      	lsls	r2, r3, #8
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	2120      	movs	r1, #32
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 f856 	bl	8007374 <QSPI_WaitFlagStateUntilTimeout>
 80072c8:	4603      	mov	r3, r0
 80072ca:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d137      	bne.n	8007342 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072dc:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	6852      	ldr	r2, [r2, #4]
 80072e4:	0611      	lsls	r1, r2, #24
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	68d2      	ldr	r2, [r2, #12]
 80072ea:	4311      	orrs	r1, r2
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	69d2      	ldr	r2, [r2, #28]
 80072f0:	4311      	orrs	r1, r2
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6a12      	ldr	r2, [r2, #32]
 80072f6:	4311      	orrs	r1, r2
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	6812      	ldr	r2, [r2, #0]
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	4b13      	ldr	r3, [pc, #76]	; (8007354 <HAL_QSPI_Init+0xf4>)
 8007308:	4013      	ands	r3, r2
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6912      	ldr	r2, [r2, #16]
 800730e:	0411      	lsls	r1, r2, #16
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	6952      	ldr	r2, [r2, #20]
 8007314:	4311      	orrs	r1, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6992      	ldr	r2, [r2, #24]
 800731a:	4311      	orrs	r1, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	6812      	ldr	r2, [r2, #0]
 8007320:	430b      	orrs	r3, r1
 8007322:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0201 	orr.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2201      	movs	r2, #1
 800733e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800734a:	7afb      	ldrb	r3, [r7, #11]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	ffe0f8fe 	.word	0xffe0f8fe

08007358 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	649a      	str	r2, [r3, #72]	; 0x48
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007384:	e01a      	b.n	80073bc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800738c:	d016      	beq.n	80073bc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800738e:	f7fc f8e1 	bl	8003554 <HAL_GetTick>
 8007392:	4602      	mov	r2, r0
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	429a      	cmp	r2, r3
 800739c:	d302      	bcc.n	80073a4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10b      	bne.n	80073bc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2204      	movs	r2, #4
 80073a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	f043 0201 	orr.w	r2, r3, #1
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e00e      	b.n	80073da <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4013      	ands	r3, r2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bf14      	ite	ne
 80073ca:	2301      	movne	r3, #1
 80073cc:	2300      	moveq	r3, #0
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	461a      	mov	r2, r3
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d1d6      	bne.n	8007386 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
	...

080073e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0cc      	b.n	8007592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073f8:	4b68      	ldr	r3, [pc, #416]	; (800759c <HAL_RCC_ClockConfig+0x1b8>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d90c      	bls.n	8007420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007406:	4b65      	ldr	r3, [pc, #404]	; (800759c <HAL_RCC_ClockConfig+0x1b8>)
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800740e:	4b63      	ldr	r3, [pc, #396]	; (800759c <HAL_RCC_ClockConfig+0x1b8>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 030f 	and.w	r3, r3, #15
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	429a      	cmp	r2, r3
 800741a:	d001      	beq.n	8007420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e0b8      	b.n	8007592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d020      	beq.n	800746e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0304 	and.w	r3, r3, #4
 8007434:	2b00      	cmp	r3, #0
 8007436:	d005      	beq.n	8007444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007438:	4b59      	ldr	r3, [pc, #356]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4a58      	ldr	r2, [pc, #352]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 800743e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007450:	4b53      	ldr	r3, [pc, #332]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4a52      	ldr	r2, [pc, #328]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800745a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800745c:	4b50      	ldr	r3, [pc, #320]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	494d      	ldr	r1, [pc, #308]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	4313      	orrs	r3, r2
 800746c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	d044      	beq.n	8007504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d107      	bne.n	8007492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007482:	4b47      	ldr	r3, [pc, #284]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d119      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e07f      	b.n	8007592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b02      	cmp	r3, #2
 8007498:	d003      	beq.n	80074a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d107      	bne.n	80074b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074a2:	4b3f      	ldr	r3, [pc, #252]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d109      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e06f      	b.n	8007592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074b2:	4b3b      	ldr	r3, [pc, #236]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d101      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e067      	b.n	8007592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074c2:	4b37      	ldr	r3, [pc, #220]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f023 0203 	bic.w	r2, r3, #3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	4934      	ldr	r1, [pc, #208]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074d4:	f7fc f83e 	bl	8003554 <HAL_GetTick>
 80074d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074da:	e00a      	b.n	80074f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074dc:	f7fc f83a 	bl	8003554 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e04f      	b.n	8007592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074f2:	4b2b      	ldr	r3, [pc, #172]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 020c 	and.w	r2, r3, #12
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	429a      	cmp	r2, r3
 8007502:	d1eb      	bne.n	80074dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007504:	4b25      	ldr	r3, [pc, #148]	; (800759c <HAL_RCC_ClockConfig+0x1b8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	429a      	cmp	r2, r3
 8007510:	d20c      	bcs.n	800752c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007512:	4b22      	ldr	r3, [pc, #136]	; (800759c <HAL_RCC_ClockConfig+0x1b8>)
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800751a:	4b20      	ldr	r3, [pc, #128]	; (800759c <HAL_RCC_ClockConfig+0x1b8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 030f 	and.w	r3, r3, #15
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	429a      	cmp	r2, r3
 8007526:	d001      	beq.n	800752c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e032      	b.n	8007592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d008      	beq.n	800754a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007538:	4b19      	ldr	r3, [pc, #100]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	4916      	ldr	r1, [pc, #88]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	4313      	orrs	r3, r2
 8007548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007556:	4b12      	ldr	r3, [pc, #72]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	490e      	ldr	r1, [pc, #56]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007566:	4313      	orrs	r3, r2
 8007568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800756a:	f000 f821 	bl	80075b0 <HAL_RCC_GetSysClockFreq>
 800756e:	4601      	mov	r1, r0
 8007570:	4b0b      	ldr	r3, [pc, #44]	; (80075a0 <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	4a0a      	ldr	r2, [pc, #40]	; (80075a4 <HAL_RCC_ClockConfig+0x1c0>)
 800757c:	5cd3      	ldrb	r3, [r2, r3]
 800757e:	fa21 f303 	lsr.w	r3, r1, r3
 8007582:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <HAL_RCC_ClockConfig+0x1c4>)
 8007584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007586:	4b09      	ldr	r3, [pc, #36]	; (80075ac <HAL_RCC_ClockConfig+0x1c8>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4618      	mov	r0, r3
 800758c:	f7fa fd82 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	40023c00 	.word	0x40023c00
 80075a0:	40023800 	.word	0x40023800
 80075a4:	08012048 	.word	0x08012048
 80075a8:	20000000 	.word	0x20000000
 80075ac:	2000005c 	.word	0x2000005c

080075b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	607b      	str	r3, [r7, #4]
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	2300      	movs	r3, #0
 80075c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075c6:	4b50      	ldr	r3, [pc, #320]	; (8007708 <HAL_RCC_GetSysClockFreq+0x158>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 030c 	and.w	r3, r3, #12
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d007      	beq.n	80075e2 <HAL_RCC_GetSysClockFreq+0x32>
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d008      	beq.n	80075e8 <HAL_RCC_GetSysClockFreq+0x38>
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f040 808d 	bne.w	80076f6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075dc:	4b4b      	ldr	r3, [pc, #300]	; (800770c <HAL_RCC_GetSysClockFreq+0x15c>)
 80075de:	60bb      	str	r3, [r7, #8]
       break;
 80075e0:	e08c      	b.n	80076fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075e2:	4b4b      	ldr	r3, [pc, #300]	; (8007710 <HAL_RCC_GetSysClockFreq+0x160>)
 80075e4:	60bb      	str	r3, [r7, #8]
      break;
 80075e6:	e089      	b.n	80076fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075e8:	4b47      	ldr	r3, [pc, #284]	; (8007708 <HAL_RCC_GetSysClockFreq+0x158>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075f2:	4b45      	ldr	r3, [pc, #276]	; (8007708 <HAL_RCC_GetSysClockFreq+0x158>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d023      	beq.n	8007646 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075fe:	4b42      	ldr	r3, [pc, #264]	; (8007708 <HAL_RCC_GetSysClockFreq+0x158>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	099b      	lsrs	r3, r3, #6
 8007604:	f04f 0400 	mov.w	r4, #0
 8007608:	f240 11ff 	movw	r1, #511	; 0x1ff
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	ea03 0501 	and.w	r5, r3, r1
 8007614:	ea04 0602 	and.w	r6, r4, r2
 8007618:	4a3d      	ldr	r2, [pc, #244]	; (8007710 <HAL_RCC_GetSysClockFreq+0x160>)
 800761a:	fb02 f106 	mul.w	r1, r2, r6
 800761e:	2200      	movs	r2, #0
 8007620:	fb02 f205 	mul.w	r2, r2, r5
 8007624:	440a      	add	r2, r1
 8007626:	493a      	ldr	r1, [pc, #232]	; (8007710 <HAL_RCC_GetSysClockFreq+0x160>)
 8007628:	fba5 0101 	umull	r0, r1, r5, r1
 800762c:	1853      	adds	r3, r2, r1
 800762e:	4619      	mov	r1, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f04f 0400 	mov.w	r4, #0
 8007636:	461a      	mov	r2, r3
 8007638:	4623      	mov	r3, r4
 800763a:	f7f8 fdf1 	bl	8000220 <__aeabi_uldivmod>
 800763e:	4603      	mov	r3, r0
 8007640:	460c      	mov	r4, r1
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	e049      	b.n	80076da <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007646:	4b30      	ldr	r3, [pc, #192]	; (8007708 <HAL_RCC_GetSysClockFreq+0x158>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	099b      	lsrs	r3, r3, #6
 800764c:	f04f 0400 	mov.w	r4, #0
 8007650:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007654:	f04f 0200 	mov.w	r2, #0
 8007658:	ea03 0501 	and.w	r5, r3, r1
 800765c:	ea04 0602 	and.w	r6, r4, r2
 8007660:	4629      	mov	r1, r5
 8007662:	4632      	mov	r2, r6
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	f04f 0400 	mov.w	r4, #0
 800766c:	0154      	lsls	r4, r2, #5
 800766e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007672:	014b      	lsls	r3, r1, #5
 8007674:	4619      	mov	r1, r3
 8007676:	4622      	mov	r2, r4
 8007678:	1b49      	subs	r1, r1, r5
 800767a:	eb62 0206 	sbc.w	r2, r2, r6
 800767e:	f04f 0300 	mov.w	r3, #0
 8007682:	f04f 0400 	mov.w	r4, #0
 8007686:	0194      	lsls	r4, r2, #6
 8007688:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800768c:	018b      	lsls	r3, r1, #6
 800768e:	1a5b      	subs	r3, r3, r1
 8007690:	eb64 0402 	sbc.w	r4, r4, r2
 8007694:	f04f 0100 	mov.w	r1, #0
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	00e2      	lsls	r2, r4, #3
 800769e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80076a2:	00d9      	lsls	r1, r3, #3
 80076a4:	460b      	mov	r3, r1
 80076a6:	4614      	mov	r4, r2
 80076a8:	195b      	adds	r3, r3, r5
 80076aa:	eb44 0406 	adc.w	r4, r4, r6
 80076ae:	f04f 0100 	mov.w	r1, #0
 80076b2:	f04f 0200 	mov.w	r2, #0
 80076b6:	02a2      	lsls	r2, r4, #10
 80076b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80076bc:	0299      	lsls	r1, r3, #10
 80076be:	460b      	mov	r3, r1
 80076c0:	4614      	mov	r4, r2
 80076c2:	4618      	mov	r0, r3
 80076c4:	4621      	mov	r1, r4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f04f 0400 	mov.w	r4, #0
 80076cc:	461a      	mov	r2, r3
 80076ce:	4623      	mov	r3, r4
 80076d0:	f7f8 fda6 	bl	8000220 <__aeabi_uldivmod>
 80076d4:	4603      	mov	r3, r0
 80076d6:	460c      	mov	r4, r1
 80076d8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <HAL_RCC_GetSysClockFreq+0x158>)
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	0c1b      	lsrs	r3, r3, #16
 80076e0:	f003 0303 	and.w	r3, r3, #3
 80076e4:	3301      	adds	r3, #1
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f2:	60bb      	str	r3, [r7, #8]
      break;
 80076f4:	e002      	b.n	80076fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <HAL_RCC_GetSysClockFreq+0x15c>)
 80076f8:	60bb      	str	r3, [r7, #8]
      break;
 80076fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80076fc:	68bb      	ldr	r3, [r7, #8]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800
 800770c:	00f42400 	.word	0x00f42400
 8007710:	017d7840 	.word	0x017d7840

08007714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007714:	b480      	push	{r7}
 8007716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <HAL_RCC_GetHCLKFreq+0x14>)
 800771a:	681b      	ldr	r3, [r3, #0]
}
 800771c:	4618      	mov	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	20000000 	.word	0x20000000

0800772c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007730:	f7ff fff0 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 8007734:	4601      	mov	r1, r0
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	0a9b      	lsrs	r3, r3, #10
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	4a03      	ldr	r2, [pc, #12]	; (8007750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007742:	5cd3      	ldrb	r3, [r2, r3]
 8007744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007748:	4618      	mov	r0, r3
 800774a:	bd80      	pop	{r7, pc}
 800774c:	40023800 	.word	0x40023800
 8007750:	08012058 	.word	0x08012058

08007754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007758:	f7ff ffdc 	bl	8007714 <HAL_RCC_GetHCLKFreq>
 800775c:	4601      	mov	r1, r0
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	0b5b      	lsrs	r3, r3, #13
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	4a03      	ldr	r2, [pc, #12]	; (8007778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800776a:	5cd3      	ldrb	r3, [r2, r3]
 800776c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007770:	4618      	mov	r0, r3
 8007772:	bd80      	pop	{r7, pc}
 8007774:	40023800 	.word	0x40023800
 8007778:	08012058 	.word	0x08012058

0800777c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	220f      	movs	r2, #15
 800778a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800778c:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 0203 	and.w	r2, r3, #3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007798:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80077a4:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <HAL_RCC_GetClockConfig+0x5c>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	08db      	lsrs	r3, r3, #3
 80077b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <HAL_RCC_GetClockConfig+0x60>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 020f 	and.w	r2, r3, #15
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	601a      	str	r2, [r3, #0]
}
 80077ca:	bf00      	nop
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800
 80077dc:	40023c00 	.word	0x40023c00

080077e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d010      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007804:	4b7a      	ldr	r3, [pc, #488]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800780a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	4977      	ldr	r1, [pc, #476]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007814:	4313      	orrs	r3, r2
 8007816:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007822:	2301      	movs	r3, #1
 8007824:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d010      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007832:	4b6f      	ldr	r3, [pc, #444]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007838:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	496b      	ldr	r1, [pc, #428]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007842:	4313      	orrs	r3, r2
 8007844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a1b      	ldr	r3, [r3, #32]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007850:	2301      	movs	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d022      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007860:	4b63      	ldr	r3, [pc, #396]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800786e:	4960      	ldr	r1, [pc, #384]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007870:	4313      	orrs	r3, r2
 8007872:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800787e:	2301      	movs	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800788a:	d10c      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800788c:	4b58      	ldr	r3, [pc, #352]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800788e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007892:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	3b01      	subs	r3, #1
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	4954      	ldr	r1, [pc, #336]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d022      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80078b2:	4b4f      	ldr	r3, [pc, #316]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c0:	494b      	ldr	r1, [pc, #300]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80078d0:	2301      	movs	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078dc:	d10c      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80078de:	4b44      	ldr	r3, [pc, #272]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	021b      	lsls	r3, r3, #8
 80078f0:	493f      	ldr	r1, [pc, #252]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0308 	and.w	r3, r3, #8
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 808a 	beq.w	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	4b39      	ldr	r3, [pc, #228]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	4a38      	ldr	r2, [pc, #224]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007914:	6413      	str	r3, [r2, #64]	; 0x40
 8007916:	4b36      	ldr	r3, [pc, #216]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007922:	4b34      	ldr	r3, [pc, #208]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a33      	ldr	r2, [pc, #204]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800792e:	f7fb fe11 	bl	8003554 <HAL_GetTick>
 8007932:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007934:	e008      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007936:	f7fb fe0d 	bl	8003554 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	2b02      	cmp	r3, #2
 8007942:	d901      	bls.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007944:	2303      	movs	r3, #3
 8007946:	e1d1      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007948:	4b2a      	ldr	r3, [pc, #168]	; (80079f4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0f0      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007954:	4b26      	ldr	r3, [pc, #152]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d02f      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	429a      	cmp	r2, r3
 8007970:	d028      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007972:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800797c:	4b1e      	ldr	r3, [pc, #120]	; (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800797e:	2201      	movs	r2, #1
 8007980:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007982:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007988:	4a19      	ldr	r2, [pc, #100]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800798e:	4b18      	ldr	r3, [pc, #96]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	f003 0301 	and.w	r3, r3, #1
 8007996:	2b01      	cmp	r3, #1
 8007998:	d114      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800799a:	f7fb fddb 	bl	8003554 <HAL_GetTick>
 800799e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079a0:	e00a      	b.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a2:	f7fb fdd7 	bl	8003554 <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e199      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b8:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80079ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079bc:	f003 0302 	and.w	r3, r3, #2
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0ee      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d0:	d114      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80079d2:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80079e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079e6:	4902      	ldr	r1, [pc, #8]	; (80079f0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	608b      	str	r3, [r1, #8]
 80079ec:	e00c      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80079ee:	bf00      	nop
 80079f0:	40023800 	.word	0x40023800
 80079f4:	40007000 	.word	0x40007000
 80079f8:	42470e40 	.word	0x42470e40
 80079fc:	4b89      	ldr	r3, [pc, #548]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	4a88      	ldr	r2, [pc, #544]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a06:	6093      	str	r3, [r2, #8]
 8007a08:	4b86      	ldr	r3, [pc, #536]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a14:	4983      	ldr	r1, [pc, #524]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007a2c:	4b7e      	ldr	r3, [pc, #504]	; (8007c28 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007a2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 0310 	and.w	r3, r3, #16
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00a      	beq.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007a3c:	4b79      	ldr	r3, [pc, #484]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	4976      	ldr	r1, [pc, #472]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0320 	and.w	r3, r3, #32
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d011      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007a5e:	4b71      	ldr	r3, [pc, #452]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6c:	496d      	ldr	r1, [pc, #436]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a7c:	d101      	bne.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00a      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007a8e:	4b65      	ldr	r3, [pc, #404]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a94:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9c:	4961      	ldr	r1, [pc, #388]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d004      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b80      	cmp	r3, #128	; 0x80
 8007ab0:	f040 80c6 	bne.w	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ab4:	4b5d      	ldr	r3, [pc, #372]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007aba:	f7fb fd4b 	bl	8003554 <HAL_GetTick>
 8007abe:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ac0:	e008      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ac2:	f7fb fd47 	bl	8003554 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d901      	bls.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e10b      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ad4:	4b53      	ldr	r3, [pc, #332]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1f0      	bne.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007ae0:	4a53      	ldr	r2, [pc, #332]	; (8007c30 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d003      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d023      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a1b      	ldr	r3, [r3, #32]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d019      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b24:	d00e      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d019      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d115      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b42:	d110      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	019b      	lsls	r3, r3, #6
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	061b      	lsls	r3, r3, #24
 8007b56:	431a      	orrs	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	071b      	lsls	r3, r3, #28
 8007b5e:	4931      	ldr	r1, [pc, #196]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d026      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d122      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b8e:	4b25      	ldr	r3, [pc, #148]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b94:	0e1b      	lsrs	r3, r3, #24
 8007b96:	f003 030f 	and.w	r3, r3, #15
 8007b9a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	019b      	lsls	r3, r3, #6
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	061b      	lsls	r3, r3, #24
 8007bac:	431a      	orrs	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	071b      	lsls	r3, r3, #28
 8007bb4:	491b      	ldr	r1, [pc, #108]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007bbc:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc2:	f023 021f 	bic.w	r2, r3, #31
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	699b      	ldr	r3, [r3, #24]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	4915      	ldr	r1, [pc, #84]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d010      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	019b      	lsls	r3, r3, #6
 8007bea:	431a      	orrs	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	061b      	lsls	r3, r3, #24
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	071b      	lsls	r3, r3, #28
 8007bfa:	490a      	ldr	r1, [pc, #40]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c02:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c08:	f7fb fca4 	bl	8003554 <HAL_GetTick>
 8007c0c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c0e:	e011      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c10:	f7fb fca0 	bl	8003554 <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d90a      	bls.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e064      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007c22:	bf00      	nop
 8007c24:	40023800 	.word	0x40023800
 8007c28:	424711e0 	.word	0x424711e0
 8007c2c:	42470068 	.word	0x42470068
 8007c30:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c34:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d0e7      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c4c:	4b29      	ldr	r3, [pc, #164]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5a:	4926      	ldr	r1, [pc, #152]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007c6e:	4b21      	ldr	r3, [pc, #132]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c74:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	491d      	ldr	r1, [pc, #116]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007c90:	4b18      	ldr	r3, [pc, #96]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	4915      	ldr	r1, [pc, #84]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8007cb2:	4b10      	ldr	r3, [pc, #64]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc0:	490c      	ldr	r1, [pc, #48]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cd4:	4b07      	ldr	r3, [pc, #28]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cda:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce2:	4904      	ldr	r1, [pc, #16]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	40023800 	.word	0x40023800

08007cf8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d003      	beq.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	f000 8098 	beq.w	8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007d1c:	e12d      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007d1e:	4b9a      	ldr	r3, [pc, #616]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d24:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007d28:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d30:	d00c      	beq.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d36:	d802      	bhi.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8007d3c:	e082      	b.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007d3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d42:	d047      	beq.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007d44:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007d48:	d06f      	beq.n	8007e2a <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8007d4a:	e07b      	b.n	8007e44 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007d4c:	4b8f      	ldr	r3, [pc, #572]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d4e:	617b      	str	r3, [r7, #20]
          break;
 8007d50:	e07b      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007d52:	4b8d      	ldr	r3, [pc, #564]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d60:	d109      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007d62:	4b89      	ldr	r3, [pc, #548]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d6c:	4a87      	ldr	r2, [pc, #540]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d72:	613b      	str	r3, [r7, #16]
 8007d74:	e019      	b.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007d76:	4b84      	ldr	r3, [pc, #528]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d82:	d109      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007d84:	4b80      	ldr	r3, [pc, #512]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d8e:	4a80      	ldr	r2, [pc, #512]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	613b      	str	r3, [r7, #16]
 8007d96:	e008      	b.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007d98:	4b7b      	ldr	r3, [pc, #492]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007da2:	4a7c      	ldr	r2, [pc, #496]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da8:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007daa:	4b77      	ldr	r3, [pc, #476]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007db0:	099b      	lsrs	r3, r3, #6
 8007db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	fb02 f303 	mul.w	r3, r2, r3
 8007dbc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007dbe:	4b72      	ldr	r3, [pc, #456]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dc4:	0f1b      	lsrs	r3, r3, #28
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd0:	617b      	str	r3, [r7, #20]
          break;
 8007dd2:	e03a      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007dd4:	4b6c      	ldr	r3, [pc, #432]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007de0:	d108      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007de2:	4b69      	ldr	r3, [pc, #420]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dea:	4a69      	ldr	r2, [pc, #420]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	e007      	b.n	8007e04 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007df4:	4b64      	ldr	r3, [pc, #400]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dfc:	4a65      	ldr	r2, [pc, #404]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e02:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007e04:	4b60      	ldr	r3, [pc, #384]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	099b      	lsrs	r3, r3, #6
 8007e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007e16:	4b5c      	ldr	r3, [pc, #368]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	0f1b      	lsrs	r3, r3, #28
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e26:	617b      	str	r3, [r7, #20]
          break;
 8007e28:	e00f      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007e2a:	4b57      	ldr	r3, [pc, #348]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e36:	d102      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8007e38:	4b55      	ldr	r3, [pc, #340]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e3a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007e3c:	e005      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8007e3e:	4b55      	ldr	r3, [pc, #340]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e40:	617b      	str	r3, [r7, #20]
          break;
 8007e42:	e002      	b.n	8007e4a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]
          break;
 8007e48:	bf00      	nop
        }
      }
      break;
 8007e4a:	e096      	b.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007e4c:	4b4e      	ldr	r3, [pc, #312]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e52:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8007e56:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e5e:	d00c      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8007e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e64:	d802      	bhi.n	8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00a      	beq.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007e6a:	e082      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007e6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e70:	d047      	beq.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007e72:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007e76:	d06f      	beq.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8007e78:	e07b      	b.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e7a:	4b44      	ldr	r3, [pc, #272]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e7c:	617b      	str	r3, [r7, #20]
          break;
 8007e7e:	e07b      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007e80:	4b41      	ldr	r3, [pc, #260]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e8e:	d109      	bne.n	8007ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007e90:	4b3d      	ldr	r3, [pc, #244]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007e92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e9a:	4a3c      	ldr	r2, [pc, #240]	; (8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	e019      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007ea4:	4b38      	ldr	r3, [pc, #224]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb0:	d109      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007eb2:	4b35      	ldr	r3, [pc, #212]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ebc:	4a34      	ldr	r2, [pc, #208]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec2:	613b      	str	r3, [r7, #16]
 8007ec4:	e008      	b.n	8007ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007ec6:	4b30      	ldr	r3, [pc, #192]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ed0:	4a30      	ldr	r2, [pc, #192]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ed6:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007ed8:	4b2b      	ldr	r3, [pc, #172]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ede:	099b      	lsrs	r3, r3, #6
 8007ee0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	fb02 f303 	mul.w	r3, r2, r3
 8007eea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007eec:	4b26      	ldr	r3, [pc, #152]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef2:	0f1b      	lsrs	r3, r3, #28
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	617b      	str	r3, [r7, #20]
          break;
 8007f00:	e03a      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f02:	4b21      	ldr	r3, [pc, #132]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f0e:	d108      	bne.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f10:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f18:	4a1d      	ldr	r2, [pc, #116]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f1e:	613b      	str	r3, [r7, #16]
 8007f20:	e007      	b.n	8007f32 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f22:	4b19      	ldr	r3, [pc, #100]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f2a:	4a1a      	ldr	r2, [pc, #104]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f30:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007f32:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	099b      	lsrs	r3, r3, #6
 8007f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	fb02 f303 	mul.w	r3, r2, r3
 8007f42:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007f44:	4b10      	ldr	r3, [pc, #64]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	0f1b      	lsrs	r3, r3, #28
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f54:	617b      	str	r3, [r7, #20]
          break;
 8007f56:	e00f      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f58:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f64:	d102      	bne.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8007f66:	4b0a      	ldr	r3, [pc, #40]	; (8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f68:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007f6a:	e005      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8007f6c:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f6e:	617b      	str	r3, [r7, #20]
          break;
 8007f70:	e002      	b.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	617b      	str	r3, [r7, #20]
          break;
 8007f76:	bf00      	nop
        }
      }
      break;
 8007f78:	bf00      	nop
    }
  }
  return frequency;
 8007f7a:	697b      	ldr	r3, [r7, #20]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	00bb8000 	.word	0x00bb8000
 8007f90:	017d7840 	.word	0x017d7840
 8007f94:	00f42400 	.word	0x00f42400

08007f98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d075      	beq.n	800809c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007fb0:	4ba2      	ldr	r3, [pc, #648]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 030c 	and.w	r3, r3, #12
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d00c      	beq.n	8007fd6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fbc:	4b9f      	ldr	r3, [pc, #636]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007fc4:	2b08      	cmp	r3, #8
 8007fc6:	d112      	bne.n	8007fee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fc8:	4b9c      	ldr	r3, [pc, #624]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fd4:	d10b      	bne.n	8007fee <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fd6:	4b99      	ldr	r3, [pc, #612]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d05b      	beq.n	800809a <HAL_RCC_OscConfig+0x102>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d157      	bne.n	800809a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e20b      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ff6:	d106      	bne.n	8008006 <HAL_RCC_OscConfig+0x6e>
 8007ff8:	4b90      	ldr	r3, [pc, #576]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a8f      	ldr	r2, [pc, #572]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8007ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e01d      	b.n	8008042 <HAL_RCC_OscConfig+0xaa>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800800e:	d10c      	bne.n	800802a <HAL_RCC_OscConfig+0x92>
 8008010:	4b8a      	ldr	r3, [pc, #552]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a89      	ldr	r2, [pc, #548]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008016:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	4b87      	ldr	r3, [pc, #540]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a86      	ldr	r2, [pc, #536]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	e00b      	b.n	8008042 <HAL_RCC_OscConfig+0xaa>
 800802a:	4b84      	ldr	r3, [pc, #528]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a83      	ldr	r2, [pc, #524]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	4b81      	ldr	r3, [pc, #516]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a80      	ldr	r2, [pc, #512]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 800803c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008040:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d013      	beq.n	8008072 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804a:	f7fb fa83 	bl	8003554 <HAL_GetTick>
 800804e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008052:	f7fb fa7f 	bl	8003554 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b64      	cmp	r3, #100	; 0x64
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e1d0      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008064:	4b75      	ldr	r3, [pc, #468]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d0f0      	beq.n	8008052 <HAL_RCC_OscConfig+0xba>
 8008070:	e014      	b.n	800809c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008072:	f7fb fa6f 	bl	8003554 <HAL_GetTick>
 8008076:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008078:	e008      	b.n	800808c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800807a:	f7fb fa6b 	bl	8003554 <HAL_GetTick>
 800807e:	4602      	mov	r2, r0
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	2b64      	cmp	r3, #100	; 0x64
 8008086:	d901      	bls.n	800808c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008088:	2303      	movs	r3, #3
 800808a:	e1bc      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800808c:	4b6b      	ldr	r3, [pc, #428]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f0      	bne.n	800807a <HAL_RCC_OscConfig+0xe2>
 8008098:	e000      	b.n	800809c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800809a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 0302 	and.w	r3, r3, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d063      	beq.n	8008170 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80080a8:	4b64      	ldr	r3, [pc, #400]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f003 030c 	and.w	r3, r3, #12
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080b4:	4b61      	ldr	r3, [pc, #388]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80080bc:	2b08      	cmp	r3, #8
 80080be:	d11c      	bne.n	80080fa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080c0:	4b5e      	ldr	r3, [pc, #376]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d116      	bne.n	80080fa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080cc:	4b5b      	ldr	r3, [pc, #364]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0302 	and.w	r3, r3, #2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <HAL_RCC_OscConfig+0x14c>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d001      	beq.n	80080e4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	e190      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080e4:	4b55      	ldr	r3, [pc, #340]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	4952      	ldr	r1, [pc, #328]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080f8:	e03a      	b.n	8008170 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d020      	beq.n	8008144 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008102:	4b4f      	ldr	r3, [pc, #316]	; (8008240 <HAL_RCC_OscConfig+0x2a8>)
 8008104:	2201      	movs	r2, #1
 8008106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008108:	f7fb fa24 	bl	8003554 <HAL_GetTick>
 800810c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008110:	f7fb fa20 	bl	8003554 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e171      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008122:	4b46      	ldr	r3, [pc, #280]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f0      	beq.n	8008110 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812e:	4b43      	ldr	r3, [pc, #268]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	00db      	lsls	r3, r3, #3
 800813c:	493f      	ldr	r1, [pc, #252]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 800813e:	4313      	orrs	r3, r2
 8008140:	600b      	str	r3, [r1, #0]
 8008142:	e015      	b.n	8008170 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008144:	4b3e      	ldr	r3, [pc, #248]	; (8008240 <HAL_RCC_OscConfig+0x2a8>)
 8008146:	2200      	movs	r2, #0
 8008148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814a:	f7fb fa03 	bl	8003554 <HAL_GetTick>
 800814e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008152:	f7fb f9ff 	bl	8003554 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e150      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008164:	4b35      	ldr	r3, [pc, #212]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d1f0      	bne.n	8008152 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0308 	and.w	r3, r3, #8
 8008178:	2b00      	cmp	r3, #0
 800817a:	d030      	beq.n	80081de <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d016      	beq.n	80081b2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008184:	4b2f      	ldr	r3, [pc, #188]	; (8008244 <HAL_RCC_OscConfig+0x2ac>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800818a:	f7fb f9e3 	bl	8003554 <HAL_GetTick>
 800818e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008190:	e008      	b.n	80081a4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008192:	f7fb f9df 	bl	8003554 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e130      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081a4:	4b25      	ldr	r3, [pc, #148]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80081a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f0      	beq.n	8008192 <HAL_RCC_OscConfig+0x1fa>
 80081b0:	e015      	b.n	80081de <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081b2:	4b24      	ldr	r3, [pc, #144]	; (8008244 <HAL_RCC_OscConfig+0x2ac>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b8:	f7fb f9cc 	bl	8003554 <HAL_GetTick>
 80081bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081c0:	f7fb f9c8 	bl	8003554 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e119      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081d2:	4b1a      	ldr	r3, [pc, #104]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80081d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f0      	bne.n	80081c0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 809f 	beq.w	800832a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ec:	2300      	movs	r3, #0
 80081ee:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081f0:	4b12      	ldr	r3, [pc, #72]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 80081f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10f      	bne.n	800821c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	4b0e      	ldr	r3, [pc, #56]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008204:	4a0d      	ldr	r2, [pc, #52]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 8008206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800820a:	6413      	str	r3, [r2, #64]	; 0x40
 800820c:	4b0b      	ldr	r3, [pc, #44]	; (800823c <HAL_RCC_OscConfig+0x2a4>)
 800820e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008218:	2301      	movs	r3, #1
 800821a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800821c:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <HAL_RCC_OscConfig+0x2b0>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008224:	2b00      	cmp	r3, #0
 8008226:	d120      	bne.n	800826a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <HAL_RCC_OscConfig+0x2b0>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a06      	ldr	r2, [pc, #24]	; (8008248 <HAL_RCC_OscConfig+0x2b0>)
 800822e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008232:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008234:	f7fb f98e 	bl	8003554 <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800823a:	e010      	b.n	800825e <HAL_RCC_OscConfig+0x2c6>
 800823c:	40023800 	.word	0x40023800
 8008240:	42470000 	.word	0x42470000
 8008244:	42470e80 	.word	0x42470e80
 8008248:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800824c:	f7fb f982 	bl	8003554 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	2b02      	cmp	r3, #2
 8008258:	d901      	bls.n	800825e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e0d3      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800825e:	4b6c      	ldr	r3, [pc, #432]	; (8008410 <HAL_RCC_OscConfig+0x478>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0f0      	beq.n	800824c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d106      	bne.n	8008280 <HAL_RCC_OscConfig+0x2e8>
 8008272:	4b68      	ldr	r3, [pc, #416]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 8008274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008276:	4a67      	ldr	r2, [pc, #412]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 8008278:	f043 0301 	orr.w	r3, r3, #1
 800827c:	6713      	str	r3, [r2, #112]	; 0x70
 800827e:	e01c      	b.n	80082ba <HAL_RCC_OscConfig+0x322>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	2b05      	cmp	r3, #5
 8008286:	d10c      	bne.n	80082a2 <HAL_RCC_OscConfig+0x30a>
 8008288:	4b62      	ldr	r3, [pc, #392]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 800828a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828c:	4a61      	ldr	r2, [pc, #388]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 800828e:	f043 0304 	orr.w	r3, r3, #4
 8008292:	6713      	str	r3, [r2, #112]	; 0x70
 8008294:	4b5f      	ldr	r3, [pc, #380]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 8008296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008298:	4a5e      	ldr	r2, [pc, #376]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6713      	str	r3, [r2, #112]	; 0x70
 80082a0:	e00b      	b.n	80082ba <HAL_RCC_OscConfig+0x322>
 80082a2:	4b5c      	ldr	r3, [pc, #368]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 80082a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a6:	4a5b      	ldr	r2, [pc, #364]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 80082a8:	f023 0301 	bic.w	r3, r3, #1
 80082ac:	6713      	str	r3, [r2, #112]	; 0x70
 80082ae:	4b59      	ldr	r3, [pc, #356]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 80082b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082b2:	4a58      	ldr	r2, [pc, #352]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 80082b4:	f023 0304 	bic.w	r3, r3, #4
 80082b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d015      	beq.n	80082ee <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c2:	f7fb f947 	bl	8003554 <HAL_GetTick>
 80082c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082c8:	e00a      	b.n	80082e0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082ca:	f7fb f943 	bl	8003554 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d8:	4293      	cmp	r3, r2
 80082da:	d901      	bls.n	80082e0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e092      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082e0:	4b4c      	ldr	r3, [pc, #304]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 80082e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e4:	f003 0302 	and.w	r3, r3, #2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0ee      	beq.n	80082ca <HAL_RCC_OscConfig+0x332>
 80082ec:	e014      	b.n	8008318 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ee:	f7fb f931 	bl	8003554 <HAL_GetTick>
 80082f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082f4:	e00a      	b.n	800830c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082f6:	f7fb f92d 	bl	8003554 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	f241 3288 	movw	r2, #5000	; 0x1388
 8008304:	4293      	cmp	r3, r2
 8008306:	d901      	bls.n	800830c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e07c      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800830c:	4b41      	ldr	r3, [pc, #260]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 800830e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008310:	f003 0302 	and.w	r3, r3, #2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1ee      	bne.n	80082f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d105      	bne.n	800832a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800831e:	4b3d      	ldr	r3, [pc, #244]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	4a3c      	ldr	r2, [pc, #240]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 8008324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d068      	beq.n	8008404 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008332:	4b38      	ldr	r3, [pc, #224]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	f003 030c 	and.w	r3, r3, #12
 800833a:	2b08      	cmp	r3, #8
 800833c:	d060      	beq.n	8008400 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	699b      	ldr	r3, [r3, #24]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d145      	bne.n	80083d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008346:	4b34      	ldr	r3, [pc, #208]	; (8008418 <HAL_RCC_OscConfig+0x480>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834c:	f7fb f902 	bl	8003554 <HAL_GetTick>
 8008350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008354:	f7fb f8fe 	bl	8003554 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e04f      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008366:	4b2b      	ldr	r3, [pc, #172]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1f0      	bne.n	8008354 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69da      	ldr	r2, [r3, #28]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a1b      	ldr	r3, [r3, #32]
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	019b      	lsls	r3, r3, #6
 8008382:	431a      	orrs	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	085b      	lsrs	r3, r3, #1
 800838a:	3b01      	subs	r3, #1
 800838c:	041b      	lsls	r3, r3, #16
 800838e:	431a      	orrs	r2, r3
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	061b      	lsls	r3, r3, #24
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839c:	071b      	lsls	r3, r3, #28
 800839e:	491d      	ldr	r1, [pc, #116]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083a4:	4b1c      	ldr	r3, [pc, #112]	; (8008418 <HAL_RCC_OscConfig+0x480>)
 80083a6:	2201      	movs	r2, #1
 80083a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083aa:	f7fb f8d3 	bl	8003554 <HAL_GetTick>
 80083ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083b0:	e008      	b.n	80083c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083b2:	f7fb f8cf 	bl	8003554 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d901      	bls.n	80083c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e020      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083c4:	4b13      	ldr	r3, [pc, #76]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0f0      	beq.n	80083b2 <HAL_RCC_OscConfig+0x41a>
 80083d0:	e018      	b.n	8008404 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083d2:	4b11      	ldr	r3, [pc, #68]	; (8008418 <HAL_RCC_OscConfig+0x480>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d8:	f7fb f8bc 	bl	8003554 <HAL_GetTick>
 80083dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083de:	e008      	b.n	80083f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083e0:	f7fb f8b8 	bl	8003554 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d901      	bls.n	80083f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e009      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083f2:	4b08      	ldr	r3, [pc, #32]	; (8008414 <HAL_RCC_OscConfig+0x47c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1f0      	bne.n	80083e0 <HAL_RCC_OscConfig+0x448>
 80083fe:	e001      	b.n	8008404 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e000      	b.n	8008406 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40007000 	.word	0x40007000
 8008414:	40023800 	.word	0x40023800
 8008418:	42470060 	.word	0x42470060

0800841c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e022      	b.n	8008474 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d105      	bne.n	8008446 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7f9 fbfb 	bl	8001c3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2203      	movs	r2, #3
 800844a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f814 	bl	800847c <HAL_SD_InitCard>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e00a      	b.n	8008474 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800847c:	b5b0      	push	{r4, r5, r7, lr}
 800847e:	b08e      	sub	sp, #56	; 0x38
 8008480:	af04      	add	r7, sp, #16
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008484:	2300      	movs	r3, #0
 8008486:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008488:	2300      	movs	r3, #0
 800848a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800848c:	2300      	movs	r3, #0
 800848e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008490:	2300      	movs	r3, #0
 8008492:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008494:	2300      	movs	r3, #0
 8008496:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008498:	2376      	movs	r3, #118	; 0x76
 800849a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681d      	ldr	r5, [r3, #0]
 80084a0:	466c      	mov	r4, sp
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80084aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084b4:	4628      	mov	r0, r5
 80084b6:	f002 fcbd 	bl	800ae34 <SDIO_Init>
 80084ba:	4603      	mov	r3, r0
 80084bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80084c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e031      	b.n	8008530 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80084cc:	4b1a      	ldr	r3, [pc, #104]	; (8008538 <HAL_SD_InitCard+0xbc>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f002 fce4 	bl	800aea4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80084dc:	4b16      	ldr	r3, [pc, #88]	; (8008538 <HAL_SD_InitCard+0xbc>)
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb18 	bl	8008b18 <SD_PowerON>
 80084e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	431a      	orrs	r2, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e013      	b.n	8008530 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fa37 	bl	800897c <SD_InitCard>
 800850e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	431a      	orrs	r2, r3
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e000      	b.n	8008530 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3728      	adds	r7, #40	; 0x28
 8008534:	46bd      	mov	sp, r7
 8008536:	bdb0      	pop	{r4, r5, r7, pc}
 8008538:	422580a0 	.word	0x422580a0

0800853c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800854a:	0f9b      	lsrs	r3, r3, #30
 800854c:	b2da      	uxtb	r2, r3
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008556:	0e9b      	lsrs	r3, r3, #26
 8008558:	b2db      	uxtb	r3, r3
 800855a:	f003 030f 	and.w	r3, r3, #15
 800855e:	b2da      	uxtb	r2, r3
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008568:	0e1b      	lsrs	r3, r3, #24
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f003 0303 	and.w	r3, r3, #3
 8008570:	b2da      	uxtb	r2, r3
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800857a:	0c1b      	lsrs	r3, r3, #16
 800857c:	b2da      	uxtb	r2, r3
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	b2da      	uxtb	r2, r3
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008592:	b2da      	uxtb	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800859c:	0d1b      	lsrs	r3, r3, #20
 800859e:	b29a      	uxth	r2, r3
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085a8:	0c1b      	lsrs	r3, r3, #16
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 030f 	and.w	r3, r3, #15
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085ba:	0bdb      	lsrs	r3, r3, #15
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	b2da      	uxtb	r2, r3
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085cc:	0b9b      	lsrs	r3, r3, #14
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085de:	0b5b      	lsrs	r3, r3, #13
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085f0:	0b1b      	lsrs	r3, r3, #12
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	2200      	movs	r2, #0
 8008602:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008608:	2b00      	cmp	r3, #0
 800860a:	d163      	bne.n	80086d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008610:	009a      	lsls	r2, r3, #2
 8008612:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008616:	4013      	ands	r3, r2
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800861c:	0f92      	lsrs	r2, r2, #30
 800861e:	431a      	orrs	r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008628:	0edb      	lsrs	r3, r3, #27
 800862a:	b2db      	uxtb	r3, r3
 800862c:	f003 0307 	and.w	r3, r3, #7
 8008630:	b2da      	uxtb	r2, r3
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800863a:	0e1b      	lsrs	r3, r3, #24
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	b2da      	uxtb	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800864c:	0d5b      	lsrs	r3, r3, #21
 800864e:	b2db      	uxtb	r3, r3
 8008650:	f003 0307 	and.w	r3, r3, #7
 8008654:	b2da      	uxtb	r2, r3
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800865e:	0c9b      	lsrs	r3, r3, #18
 8008660:	b2db      	uxtb	r3, r3
 8008662:	f003 0307 	and.w	r3, r3, #7
 8008666:	b2da      	uxtb	r2, r3
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008670:	0bdb      	lsrs	r3, r3, #15
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	b2da      	uxtb	r2, r3
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	7e1b      	ldrb	r3, [r3, #24]
 800868c:	b2db      	uxtb	r3, r3
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	3302      	adds	r3, #2
 8008694:	2201      	movs	r2, #1
 8008696:	fa02 f303 	lsl.w	r3, r2, r3
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800869e:	fb02 f203 	mul.w	r2, r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	7a1b      	ldrb	r3, [r3, #8]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f003 030f 	and.w	r3, r3, #15
 80086b0:	2201      	movs	r2, #1
 80086b2:	409a      	lsls	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80086c0:	0a52      	lsrs	r2, r2, #9
 80086c2:	fb02 f203 	mul.w	r2, r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086d0:	661a      	str	r2, [r3, #96]	; 0x60
 80086d2:	e031      	b.n	8008738 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d11d      	bne.n	8008718 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086e0:	041b      	lsls	r3, r3, #16
 80086e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ea:	0c1b      	lsrs	r3, r3, #16
 80086ec:	431a      	orrs	r2, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	3301      	adds	r3, #1
 80086f8:	029a      	lsls	r2, r3, #10
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800870c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	661a      	str	r2, [r3, #96]	; 0x60
 8008716:	e00f      	b.n	8008738 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a58      	ldr	r2, [pc, #352]	; (8008880 <HAL_SD_GetCardCSD+0x344>)
 800871e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e09d      	b.n	8008874 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800873c:	0b9b      	lsrs	r3, r3, #14
 800873e:	b2db      	uxtb	r3, r3
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	b2da      	uxtb	r2, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800874e:	09db      	lsrs	r3, r3, #7
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008756:	b2da      	uxtb	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008760:	b2db      	uxtb	r3, r3
 8008762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008766:	b2da      	uxtb	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008770:	0fdb      	lsrs	r3, r3, #31
 8008772:	b2da      	uxtb	r2, r3
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800877c:	0f5b      	lsrs	r3, r3, #29
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 0303 	and.w	r3, r3, #3
 8008784:	b2da      	uxtb	r2, r3
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800878e:	0e9b      	lsrs	r3, r3, #26
 8008790:	b2db      	uxtb	r3, r3
 8008792:	f003 0307 	and.w	r3, r3, #7
 8008796:	b2da      	uxtb	r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a0:	0d9b      	lsrs	r3, r3, #22
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b2:	0d5b      	lsrs	r3, r3, #21
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ce:	0c1b      	lsrs	r3, r3, #16
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	b2da      	uxtb	r2, r3
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e2:	0bdb      	lsrs	r3, r3, #15
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f6:	0b9b      	lsrs	r3, r3, #14
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	b2da      	uxtb	r2, r3
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	0b5b      	lsrs	r3, r3, #13
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	b2da      	uxtb	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881e:	0b1b      	lsrs	r3, r3, #12
 8008820:	b2db      	uxtb	r3, r3
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	b2da      	uxtb	r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008832:	0a9b      	lsrs	r3, r3, #10
 8008834:	b2db      	uxtb	r3, r3
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	b2da      	uxtb	r2, r3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	b2db      	uxtb	r3, r3
 800884a:	f003 0303 	and.w	r3, r3, #3
 800884e:	b2da      	uxtb	r2, r3
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	b2db      	uxtb	r3, r3
 800885e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008862:	b2da      	uxtb	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	004005ff 	.word	0x004005ff

08008884 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008884:	b5b0      	push	{r4, r5, r7, lr}
 8008886:	b08e      	sub	sp, #56	; 0x38
 8008888:	af04      	add	r7, sp, #16
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2203      	movs	r2, #3
 8008892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889a:	2b03      	cmp	r3, #3
 800889c:	d02e      	beq.n	80088fc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a4:	d106      	bne.n	80088b4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	639a      	str	r2, [r3, #56]	; 0x38
 80088b2:	e029      	b.n	8008908 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ba:	d10a      	bne.n	80088d2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f9b9 	bl	8008c34 <SD_WideBus_Enable>
 80088c2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	639a      	str	r2, [r3, #56]	; 0x38
 80088d0:	e01a      	b.n	8008908 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f9f6 	bl	8008cca <SD_WideBus_Disable>
 80088de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
 80088ec:	e00c      	b.n	8008908 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	639a      	str	r2, [r3, #56]	; 0x38
 80088fa:	e005      	b.n	8008908 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a18      	ldr	r2, [pc, #96]	; (8008978 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008916:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e024      	b.n	800896e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	699b      	ldr	r3, [r3, #24]
 8008944:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681d      	ldr	r5, [r3, #0]
 800894a:	466c      	mov	r4, sp
 800894c:	f107 0318 	add.w	r3, r7, #24
 8008950:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008954:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008958:	f107 030c 	add.w	r3, r7, #12
 800895c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800895e:	4628      	mov	r0, r5
 8008960:	f002 fa68 	bl	800ae34 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3728      	adds	r7, #40	; 0x28
 8008972:	46bd      	mov	sp, r7
 8008974:	bdb0      	pop	{r4, r5, r7, pc}
 8008976:	bf00      	nop
 8008978:	004005ff 	.word	0x004005ff

0800897c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800897c:	b5b0      	push	{r4, r5, r7, lr}
 800897e:	b094      	sub	sp, #80	; 0x50
 8008980:	af04      	add	r7, sp, #16
 8008982:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008984:	2301      	movs	r3, #1
 8008986:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4618      	mov	r0, r3
 800898e:	f002 fa98 	bl	800aec2 <SDIO_GetPowerState>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d102      	bne.n	800899e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008998:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800899c:	e0b7      	b.n	8008b0e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d02f      	beq.n	8008a06 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4618      	mov	r0, r3
 80089ac:	f002 fc17 	bl	800b1de <SDMMC_CmdSendCID>
 80089b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80089b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <SD_InitCard+0x40>
    {
      return errorstate;
 80089b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089ba:	e0a8      	b.n	8008b0e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f002 fac2 	bl	800af4c <SDIO_GetResponse>
 80089c8:	4602      	mov	r2, r0
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2104      	movs	r1, #4
 80089d4:	4618      	mov	r0, r3
 80089d6:	f002 fab9 	bl	800af4c <SDIO_GetResponse>
 80089da:	4602      	mov	r2, r0
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2108      	movs	r1, #8
 80089e6:	4618      	mov	r0, r3
 80089e8:	f002 fab0 	bl	800af4c <SDIO_GetResponse>
 80089ec:	4602      	mov	r2, r0
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	210c      	movs	r1, #12
 80089f8:	4618      	mov	r0, r3
 80089fa:	f002 faa7 	bl	800af4c <SDIO_GetResponse>
 80089fe:	4602      	mov	r2, r0
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d00d      	beq.n	8008a2a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f107 020e 	add.w	r2, r7, #14
 8008a16:	4611      	mov	r1, r2
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f002 fc1d 	bl	800b258 <SDMMC_CmdSetRelAdd>
 8008a1e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <SD_InitCard+0xae>
    {
      return errorstate;
 8008a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a28:	e071      	b.n	8008b0e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2e:	2b03      	cmp	r3, #3
 8008a30:	d036      	beq.n	8008aa0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008a32:	89fb      	ldrh	r3, [r7, #14]
 8008a34:	461a      	mov	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a42:	041b      	lsls	r3, r3, #16
 8008a44:	4619      	mov	r1, r3
 8008a46:	4610      	mov	r0, r2
 8008a48:	f002 fbe7 	bl	800b21a <SDMMC_CmdSendCSD>
 8008a4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d001      	beq.n	8008a58 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a56:	e05a      	b.n	8008b0e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f002 fa74 	bl	800af4c <SDIO_GetResponse>
 8008a64:	4602      	mov	r2, r0
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2104      	movs	r1, #4
 8008a70:	4618      	mov	r0, r3
 8008a72:	f002 fa6b 	bl	800af4c <SDIO_GetResponse>
 8008a76:	4602      	mov	r2, r0
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2108      	movs	r1, #8
 8008a82:	4618      	mov	r0, r3
 8008a84:	f002 fa62 	bl	800af4c <SDIO_GetResponse>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	210c      	movs	r1, #12
 8008a94:	4618      	mov	r0, r3
 8008a96:	f002 fa59 	bl	800af4c <SDIO_GetResponse>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2104      	movs	r1, #4
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f002 fa50 	bl	800af4c <SDIO_GetResponse>
 8008aac:	4603      	mov	r3, r0
 8008aae:	0d1a      	lsrs	r2, r3, #20
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008ab4:	f107 0310 	add.w	r3, r7, #16
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7ff fd3e 	bl	800853c <HAL_SD_GetCardCSD>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ac6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008aca:	e020      	b.n	8008b0e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6819      	ldr	r1, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad4:	041b      	lsls	r3, r3, #16
 8008ad6:	f04f 0400 	mov.w	r4, #0
 8008ada:	461a      	mov	r2, r3
 8008adc:	4623      	mov	r3, r4
 8008ade:	4608      	mov	r0, r1
 8008ae0:	f002 fa95 	bl	800b00e <SDMMC_CmdSelDesel>
 8008ae4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d001      	beq.n	8008af0 <SD_InitCard+0x174>
  {
    return errorstate;
 8008aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aee:	e00e      	b.n	8008b0e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681d      	ldr	r5, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	466c      	mov	r4, sp
 8008af8:	f103 0210 	add.w	r2, r3, #16
 8008afc:	ca07      	ldmia	r2, {r0, r1, r2}
 8008afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b02:	3304      	adds	r3, #4
 8008b04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b06:	4628      	mov	r0, r5
 8008b08:	f002 f994 	bl	800ae34 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3740      	adds	r7, #64	; 0x40
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008b18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008b24:	2300      	movs	r3, #0
 8008b26:	617b      	str	r3, [r7, #20]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f002 fa8f 	bl	800b054 <SDMMC_CmdGoIdleState>
 8008b36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	e072      	b.n	8008c28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f002 faa2 	bl	800b090 <SDMMC_CmdOperCond>
 8008b4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00d      	beq.n	8008b70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f002 fa78 	bl	800b054 <SDMMC_CmdGoIdleState>
 8008b64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	e05b      	b.n	8008c28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d137      	bne.n	8008bee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2100      	movs	r1, #0
 8008b84:	4618      	mov	r0, r3
 8008b86:	f002 faa2 	bl	800b0ce <SDMMC_CmdAppCommand>
 8008b8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d02d      	beq.n	8008bee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008b96:	e047      	b.n	8008c28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f002 fa95 	bl	800b0ce <SDMMC_CmdAppCommand>
 8008ba4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <SD_PowerON+0x98>
    {
      return errorstate;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	e03b      	b.n	8008c28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	491e      	ldr	r1, [pc, #120]	; (8008c30 <SD_PowerON+0x118>)
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f002 faab 	bl	800b112 <SDMMC_CmdAppOperCommand>
 8008bbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008bc8:	e02e      	b.n	8008c28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2100      	movs	r1, #0
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f002 f9bb 	bl	800af4c <SDIO_GetResponse>
 8008bd6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	0fdb      	lsrs	r3, r3, #31
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <SD_PowerON+0xcc>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e000      	b.n	8008be6 <SD_PowerON+0xce>
 8008be4:	2300      	movs	r3, #0
 8008be6:	613b      	str	r3, [r7, #16]

    count++;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	3301      	adds	r3, #1
 8008bec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d802      	bhi.n	8008bfe <SD_PowerON+0xe6>
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0cc      	beq.n	8008b98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d902      	bls.n	8008c0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008c08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c0c:	e00c      	b.n	8008c28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	645a      	str	r2, [r3, #68]	; 0x44
 8008c1e:	e002      	b.n	8008c26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	c1100000 	.word	0xc1100000

08008c34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	2300      	movs	r3, #0
 8008c42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f002 f97e 	bl	800af4c <SDIO_GetResponse>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c5a:	d102      	bne.n	8008c62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c60:	e02f      	b.n	8008cc2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008c62:	f107 030c 	add.w	r3, r7, #12
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f879 	bl	8008d60 <SD_FindSCR>
 8008c6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	e023      	b.n	8008cc2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d01c      	beq.n	8008cbe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c8c:	041b      	lsls	r3, r3, #16
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f002 fa1c 	bl	800b0ce <SDMMC_CmdAppCommand>
 8008c96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	e00f      	b.n	8008cc2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2102      	movs	r1, #2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f002 fa55 	bl	800b158 <SDMMC_CmdBusWidth>
 8008cae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	e003      	b.n	8008cc2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e001      	b.n	8008cc2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008cbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3718      	adds	r7, #24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b086      	sub	sp, #24
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2100      	movs	r1, #0
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f002 f933 	bl	800af4c <SDIO_GetResponse>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cf0:	d102      	bne.n	8008cf8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cf6:	e02f      	b.n	8008d58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008cf8:	f107 030c 	add.w	r3, r7, #12
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f82e 	bl	8008d60 <SD_FindSCR>
 8008d04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	e023      	b.n	8008d58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d01c      	beq.n	8008d54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f002 f9d1 	bl	800b0ce <SDMMC_CmdAppCommand>
 8008d2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	e00f      	b.n	8008d58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f002 fa0a 	bl	800b158 <SDMMC_CmdBusWidth>
 8008d44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	e003      	b.n	8008d58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008d50:	2300      	movs	r3, #0
 8008d52:	e001      	b.n	8008d58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008d60:	b590      	push	{r4, r7, lr}
 8008d62:	b08f      	sub	sp, #60	; 0x3c
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008d6a:	f7fa fbf3 	bl	8003554 <HAL_GetTick>
 8008d6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008d74:	2300      	movs	r3, #0
 8008d76:	60bb      	str	r3, [r7, #8]
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2108      	movs	r1, #8
 8008d86:	4618      	mov	r0, r3
 8008d88:	f002 f91f 	bl	800afca <SDMMC_CmdBlockLength>
 8008d8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	e0a9      	b.n	8008eec <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da0:	041b      	lsls	r3, r3, #16
 8008da2:	4619      	mov	r1, r3
 8008da4:	4610      	mov	r0, r2
 8008da6:	f002 f992 	bl	800b0ce <SDMMC_CmdAppCommand>
 8008daa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	e09a      	b.n	8008eec <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008db6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008dc0:	2330      	movs	r3, #48	; 0x30
 8008dc2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008dc4:	2302      	movs	r3, #2
 8008dc6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f107 0210 	add.w	r2, r7, #16
 8008dd8:	4611      	mov	r1, r2
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f002 f8c9 	bl	800af72 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f002 f9d9 	bl	800b19c <SDMMC_CmdSendSCR>
 8008dea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d022      	beq.n	8008e38 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df4:	e07a      	b.n	8008eec <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00e      	beq.n	8008e22 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6819      	ldr	r1, [r3, #0]
 8008e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	f107 0208 	add.w	r2, r7, #8
 8008e10:	18d4      	adds	r4, r2, r3
 8008e12:	4608      	mov	r0, r1
 8008e14:	f002 f839 	bl	800ae8a <SDIO_ReadFIFO>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	6023      	str	r3, [r4, #0]
      index++;
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1e:	3301      	adds	r3, #1
 8008e20:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008e22:	f7fa fb97 	bl	8003554 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e30:	d102      	bne.n	8008e38 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008e32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e36:	e059      	b.n	8008eec <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e3e:	f240 432a 	movw	r3, #1066	; 0x42a
 8008e42:	4013      	ands	r3, r2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d0d6      	beq.n	8008df6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2208      	movs	r2, #8
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008e5e:	2308      	movs	r3, #8
 8008e60:	e044      	b.n	8008eec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2202      	movs	r2, #2
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008e78:	2302      	movs	r3, #2
 8008e7a:	e037      	b.n	8008eec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e82:	f003 0320 	and.w	r3, r3, #32
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d005      	beq.n	8008e96 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2220      	movs	r2, #32
 8008e90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008e92:	2320      	movs	r3, #32
 8008e94:	e02a      	b.n	8008eec <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e9e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	061a      	lsls	r2, r3, #24
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	021b      	lsls	r3, r3, #8
 8008ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008eac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	0a1b      	lsrs	r3, r3, #8
 8008eb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008eb6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	0e1b      	lsrs	r3, r3, #24
 8008ebc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec0:	601a      	str	r2, [r3, #0]
    scr++;
 8008ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	061a      	lsls	r2, r3, #24
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	021b      	lsls	r3, r3, #8
 8008ed0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ed4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	0a1b      	lsrs	r3, r3, #8
 8008eda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ede:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	0e1b      	lsrs	r3, r3, #24
 8008ee4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	373c      	adds	r7, #60	; 0x3c
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd90      	pop	{r4, r7, pc}

08008ef4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e034      	b.n	8008f74 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d106      	bne.n	8008f24 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f7f9 f8ae 	bl	8002080 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	3308      	adds	r3, #8
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	4610      	mov	r0, r2
 8008f30:	f001 fe7c 	bl	800ac2c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	68b9      	ldr	r1, [r7, #8]
 8008f40:	f001 fee4 	bl	800ad0c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6858      	ldr	r0, [r3, #4]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	689a      	ldr	r2, [r3, #8]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	f001 ff2f 	bl	800adb4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	6892      	ldr	r2, [r2, #8]
 8008f5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	6892      	ldr	r2, [r2, #8]
 8008f6a:	f041 0101 	orr.w	r1, r1, #1
 8008f6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e01d      	b.n	8008fca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d106      	bne.n	8008fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7f8 feb2 	bl	8001d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	f000 fb4e 	bl	800965c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0201 	orr.w	r2, r2, #1
 8008fe8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f003 0307 	and.w	r3, r3, #7
 8008ff4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2b06      	cmp	r3, #6
 8008ffa:	d007      	beq.n	800900c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f042 0201 	orr.w	r2, r2, #1
 800900a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e01d      	b.n	8009068 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f815 	bl	8009070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2202      	movs	r2, #2
 800904a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	3304      	adds	r3, #4
 8009056:	4619      	mov	r1, r3
 8009058:	4610      	mov	r0, r2
 800905a:	f000 faff 	bl	800965c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2201      	movs	r2, #1
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2201      	movs	r2, #1
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fdca 	bl	8009c30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a15      	ldr	r2, [pc, #84]	; (80090f8 <HAL_TIM_PWM_Start+0x74>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d004      	beq.n	80090b0 <HAL_TIM_PWM_Start+0x2c>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a14      	ldr	r2, [pc, #80]	; (80090fc <HAL_TIM_PWM_Start+0x78>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d101      	bne.n	80090b4 <HAL_TIM_PWM_Start+0x30>
 80090b0:	2301      	movs	r3, #1
 80090b2:	e000      	b.n	80090b6 <HAL_TIM_PWM_Start+0x32>
 80090b4:	2300      	movs	r3, #0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2b06      	cmp	r3, #6
 80090da:	d007      	beq.n	80090ec <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f042 0201 	orr.w	r2, r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	40010000 	.word	0x40010000
 80090fc:	40010400 	.word	0x40010400

08009100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b02      	cmp	r3, #2
 8009114:	d122      	bne.n	800915c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b02      	cmp	r3, #2
 8009122:	d11b      	bne.n	800915c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0202 	mvn.w	r2, #2
 800912c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fa6b 	bl	800961e <HAL_TIM_IC_CaptureCallback>
 8009148:	e005      	b.n	8009156 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 fa5d 	bl	800960a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fa6e 	bl	8009632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b04      	cmp	r3, #4
 8009168:	d122      	bne.n	80091b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f003 0304 	and.w	r3, r3, #4
 8009174:	2b04      	cmp	r3, #4
 8009176:	d11b      	bne.n	80091b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0204 	mvn.w	r2, #4
 8009180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2202      	movs	r2, #2
 8009186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa41 	bl	800961e <HAL_TIM_IC_CaptureCallback>
 800919c:	e005      	b.n	80091aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fa33 	bl	800960a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 fa44 	bl	8009632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0308 	and.w	r3, r3, #8
 80091ba:	2b08      	cmp	r3, #8
 80091bc:	d122      	bne.n	8009204 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0308 	and.w	r3, r3, #8
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d11b      	bne.n	8009204 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0208 	mvn.w	r2, #8
 80091d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2204      	movs	r2, #4
 80091da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	f003 0303 	and.w	r3, r3, #3
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa17 	bl	800961e <HAL_TIM_IC_CaptureCallback>
 80091f0:	e005      	b.n	80091fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa09 	bl	800960a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fa1a 	bl	8009632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f003 0310 	and.w	r3, r3, #16
 800920e:	2b10      	cmp	r3, #16
 8009210:	d122      	bne.n	8009258 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f003 0310 	and.w	r3, r3, #16
 800921c:	2b10      	cmp	r3, #16
 800921e:	d11b      	bne.n	8009258 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f06f 0210 	mvn.w	r2, #16
 8009228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2208      	movs	r2, #8
 800922e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	69db      	ldr	r3, [r3, #28]
 8009236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800923a:	2b00      	cmp	r3, #0
 800923c:	d003      	beq.n	8009246 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9ed 	bl	800961e <HAL_TIM_IC_CaptureCallback>
 8009244:	e005      	b.n	8009252 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f9df 	bl	800960a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f9f0 	bl	8009632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b01      	cmp	r3, #1
 8009264:	d10e      	bne.n	8009284 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	f003 0301 	and.w	r3, r3, #1
 8009270:	2b01      	cmp	r3, #1
 8009272:	d107      	bne.n	8009284 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f06f 0201 	mvn.w	r2, #1
 800927c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7f8 f8ac 	bl	80013dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800928e:	2b80      	cmp	r3, #128	; 0x80
 8009290:	d10e      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800929c:	2b80      	cmp	r3, #128	; 0x80
 800929e:	d107      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80092a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fd6c 	bl	8009d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ba:	2b40      	cmp	r3, #64	; 0x40
 80092bc:	d10e      	bne.n	80092dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d107      	bne.n	80092dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80092d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f9b5 	bl	8009646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f003 0320 	and.w	r3, r3, #32
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d10e      	bne.n	8009308 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	f003 0320 	and.w	r3, r3, #32
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d107      	bne.n	8009308 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0220 	mvn.w	r2, #32
 8009300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fd36 	bl	8009d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009326:	2302      	movs	r3, #2
 8009328:	e0b4      	b.n	8009494 <HAL_TIM_PWM_ConfigChannel+0x184>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2202      	movs	r2, #2
 8009336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b0c      	cmp	r3, #12
 800933e:	f200 809f 	bhi.w	8009480 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009342:	a201      	add	r2, pc, #4	; (adr r2, 8009348 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	0800937d 	.word	0x0800937d
 800934c:	08009481 	.word	0x08009481
 8009350:	08009481 	.word	0x08009481
 8009354:	08009481 	.word	0x08009481
 8009358:	080093bd 	.word	0x080093bd
 800935c:	08009481 	.word	0x08009481
 8009360:	08009481 	.word	0x08009481
 8009364:	08009481 	.word	0x08009481
 8009368:	080093ff 	.word	0x080093ff
 800936c:	08009481 	.word	0x08009481
 8009370:	08009481 	.word	0x08009481
 8009374:	08009481 	.word	0x08009481
 8009378:	0800943f 	.word	0x0800943f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fa0a 	bl	800979c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	699a      	ldr	r2, [r3, #24]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f042 0208 	orr.w	r2, r2, #8
 8009396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f022 0204 	bic.w	r2, r2, #4
 80093a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6999      	ldr	r1, [r3, #24]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691a      	ldr	r2, [r3, #16]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	430a      	orrs	r2, r1
 80093b8:	619a      	str	r2, [r3, #24]
      break;
 80093ba:	e062      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68b9      	ldr	r1, [r7, #8]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fa5a 	bl	800987c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	6999      	ldr	r1, [r3, #24]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	021a      	lsls	r2, r3, #8
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	619a      	str	r2, [r3, #24]
      break;
 80093fc:	e041      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68b9      	ldr	r1, [r7, #8]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 faaf 	bl	8009968 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	69da      	ldr	r2, [r3, #28]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0208 	orr.w	r2, r2, #8
 8009418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69da      	ldr	r2, [r3, #28]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0204 	bic.w	r2, r2, #4
 8009428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69d9      	ldr	r1, [r3, #28]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	61da      	str	r2, [r3, #28]
      break;
 800943c:	e021      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fb03 	bl	8009a50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	69da      	ldr	r2, [r3, #28]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009458:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	69da      	ldr	r2, [r3, #28]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009468:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69d9      	ldr	r1, [r3, #28]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	021a      	lsls	r2, r3, #8
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	61da      	str	r2, [r3, #28]
      break;
 800947e:	e000      	b.n	8009482 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009480:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2201      	movs	r2, #1
 8009486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2200      	movs	r2, #0
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d101      	bne.n	80094b4 <HAL_TIM_ConfigClockSource+0x18>
 80094b0:	2302      	movs	r3, #2
 80094b2:	e0a6      	b.n	8009602 <HAL_TIM_ConfigClockSource+0x166>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2202      	movs	r2, #2
 80094c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80094d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2b40      	cmp	r3, #64	; 0x40
 80094ea:	d067      	beq.n	80095bc <HAL_TIM_ConfigClockSource+0x120>
 80094ec:	2b40      	cmp	r3, #64	; 0x40
 80094ee:	d80b      	bhi.n	8009508 <HAL_TIM_ConfigClockSource+0x6c>
 80094f0:	2b10      	cmp	r3, #16
 80094f2:	d073      	beq.n	80095dc <HAL_TIM_ConfigClockSource+0x140>
 80094f4:	2b10      	cmp	r3, #16
 80094f6:	d802      	bhi.n	80094fe <HAL_TIM_ConfigClockSource+0x62>
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d06f      	beq.n	80095dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80094fc:	e078      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80094fe:	2b20      	cmp	r3, #32
 8009500:	d06c      	beq.n	80095dc <HAL_TIM_ConfigClockSource+0x140>
 8009502:	2b30      	cmp	r3, #48	; 0x30
 8009504:	d06a      	beq.n	80095dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009506:	e073      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009508:	2b70      	cmp	r3, #112	; 0x70
 800950a:	d00d      	beq.n	8009528 <HAL_TIM_ConfigClockSource+0x8c>
 800950c:	2b70      	cmp	r3, #112	; 0x70
 800950e:	d804      	bhi.n	800951a <HAL_TIM_ConfigClockSource+0x7e>
 8009510:	2b50      	cmp	r3, #80	; 0x50
 8009512:	d033      	beq.n	800957c <HAL_TIM_ConfigClockSource+0xe0>
 8009514:	2b60      	cmp	r3, #96	; 0x60
 8009516:	d041      	beq.n	800959c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009518:	e06a      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800951a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800951e:	d066      	beq.n	80095ee <HAL_TIM_ConfigClockSource+0x152>
 8009520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009524:	d017      	beq.n	8009556 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009526:	e063      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	6899      	ldr	r1, [r3, #8]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685a      	ldr	r2, [r3, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f000 fb5a 	bl	8009bf0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800954a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	609a      	str	r2, [r3, #8]
      break;
 8009554:	e04c      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	6899      	ldr	r1, [r3, #8]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	f000 fb43 	bl	8009bf0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009578:	609a      	str	r2, [r3, #8]
      break;
 800957a:	e039      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	6859      	ldr	r1, [r3, #4]
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	461a      	mov	r2, r3
 800958a:	f000 fab7 	bl	8009afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2150      	movs	r1, #80	; 0x50
 8009594:	4618      	mov	r0, r3
 8009596:	f000 fb10 	bl	8009bba <TIM_ITRx_SetConfig>
      break;
 800959a:	e029      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	6859      	ldr	r1, [r3, #4]
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	461a      	mov	r2, r3
 80095aa:	f000 fad6 	bl	8009b5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2160      	movs	r1, #96	; 0x60
 80095b4:	4618      	mov	r0, r3
 80095b6:	f000 fb00 	bl	8009bba <TIM_ITRx_SetConfig>
      break;
 80095ba:	e019      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6818      	ldr	r0, [r3, #0]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	6859      	ldr	r1, [r3, #4]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	461a      	mov	r2, r3
 80095ca:	f000 fa97 	bl	8009afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2140      	movs	r1, #64	; 0x40
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 faf0 	bl	8009bba <TIM_ITRx_SetConfig>
      break;
 80095da:	e009      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4619      	mov	r1, r3
 80095e6:	4610      	mov	r0, r2
 80095e8:	f000 fae7 	bl	8009bba <TIM_ITRx_SetConfig>
      break;
 80095ec:	e000      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80095ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009612:	bf00      	nop
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800961e:	b480      	push	{r7}
 8009620:	b083      	sub	sp, #12
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009626:	bf00      	nop
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr

08009632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009632:	b480      	push	{r7}
 8009634:	b083      	sub	sp, #12
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800963a:	bf00      	nop
 800963c:	370c      	adds	r7, #12
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
	...

0800965c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a40      	ldr	r2, [pc, #256]	; (8009770 <TIM_Base_SetConfig+0x114>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d013      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800967a:	d00f      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a3d      	ldr	r2, [pc, #244]	; (8009774 <TIM_Base_SetConfig+0x118>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d00b      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a3c      	ldr	r2, [pc, #240]	; (8009778 <TIM_Base_SetConfig+0x11c>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d007      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a3b      	ldr	r2, [pc, #236]	; (800977c <TIM_Base_SetConfig+0x120>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d003      	beq.n	800969c <TIM_Base_SetConfig+0x40>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a3a      	ldr	r2, [pc, #232]	; (8009780 <TIM_Base_SetConfig+0x124>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d108      	bne.n	80096ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a2f      	ldr	r2, [pc, #188]	; (8009770 <TIM_Base_SetConfig+0x114>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d02b      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096bc:	d027      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a2c      	ldr	r2, [pc, #176]	; (8009774 <TIM_Base_SetConfig+0x118>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d023      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a2b      	ldr	r2, [pc, #172]	; (8009778 <TIM_Base_SetConfig+0x11c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d01f      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a2a      	ldr	r2, [pc, #168]	; (800977c <TIM_Base_SetConfig+0x120>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d01b      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a29      	ldr	r2, [pc, #164]	; (8009780 <TIM_Base_SetConfig+0x124>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d017      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a28      	ldr	r2, [pc, #160]	; (8009784 <TIM_Base_SetConfig+0x128>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d013      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a27      	ldr	r2, [pc, #156]	; (8009788 <TIM_Base_SetConfig+0x12c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00f      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a26      	ldr	r2, [pc, #152]	; (800978c <TIM_Base_SetConfig+0x130>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00b      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a25      	ldr	r2, [pc, #148]	; (8009790 <TIM_Base_SetConfig+0x134>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d007      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a24      	ldr	r2, [pc, #144]	; (8009794 <TIM_Base_SetConfig+0x138>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d003      	beq.n	800970e <TIM_Base_SetConfig+0xb2>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4a23      	ldr	r2, [pc, #140]	; (8009798 <TIM_Base_SetConfig+0x13c>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d108      	bne.n	8009720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	4313      	orrs	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	4313      	orrs	r3, r2
 800972c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689a      	ldr	r2, [r3, #8]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a0a      	ldr	r2, [pc, #40]	; (8009770 <TIM_Base_SetConfig+0x114>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d003      	beq.n	8009754 <TIM_Base_SetConfig+0xf8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a0c      	ldr	r2, [pc, #48]	; (8009780 <TIM_Base_SetConfig+0x124>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d103      	bne.n	800975c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	691a      	ldr	r2, [r3, #16]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	615a      	str	r2, [r3, #20]
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	40010000 	.word	0x40010000
 8009774:	40000400 	.word	0x40000400
 8009778:	40000800 	.word	0x40000800
 800977c:	40000c00 	.word	0x40000c00
 8009780:	40010400 	.word	0x40010400
 8009784:	40014000 	.word	0x40014000
 8009788:	40014400 	.word	0x40014400
 800978c:	40014800 	.word	0x40014800
 8009790:	40001800 	.word	0x40001800
 8009794:	40001c00 	.word	0x40001c00
 8009798:	40002000 	.word	0x40002000

0800979c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	f023 0201 	bic.w	r2, r3, #1
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	699b      	ldr	r3, [r3, #24]
 80097c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 0303 	bic.w	r3, r3, #3
 80097d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68fa      	ldr	r2, [r7, #12]
 80097da:	4313      	orrs	r3, r2
 80097dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f023 0302 	bic.w	r3, r3, #2
 80097e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a20      	ldr	r2, [pc, #128]	; (8009874 <TIM_OC1_SetConfig+0xd8>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d003      	beq.n	8009800 <TIM_OC1_SetConfig+0x64>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a1f      	ldr	r2, [pc, #124]	; (8009878 <TIM_OC1_SetConfig+0xdc>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d10c      	bne.n	800981a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f023 0308 	bic.w	r3, r3, #8
 8009806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	4313      	orrs	r3, r2
 8009810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	f023 0304 	bic.w	r3, r3, #4
 8009818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a15      	ldr	r2, [pc, #84]	; (8009874 <TIM_OC1_SetConfig+0xd8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d003      	beq.n	800982a <TIM_OC1_SetConfig+0x8e>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a14      	ldr	r2, [pc, #80]	; (8009878 <TIM_OC1_SetConfig+0xdc>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d111      	bne.n	800984e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	4313      	orrs	r3, r2
 8009842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	693a      	ldr	r2, [r7, #16]
 800984a:	4313      	orrs	r3, r2
 800984c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	621a      	str	r2, [r3, #32]
}
 8009868:	bf00      	nop
 800986a:	371c      	adds	r7, #28
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	40010000 	.word	0x40010000
 8009878:	40010400 	.word	0x40010400

0800987c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	f023 0210 	bic.w	r2, r3, #16
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f023 0320 	bic.w	r3, r3, #32
 80098c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	011b      	lsls	r3, r3, #4
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a22      	ldr	r2, [pc, #136]	; (8009960 <TIM_OC2_SetConfig+0xe4>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d003      	beq.n	80098e4 <TIM_OC2_SetConfig+0x68>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a21      	ldr	r2, [pc, #132]	; (8009964 <TIM_OC2_SetConfig+0xe8>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d10d      	bne.n	8009900 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	011b      	lsls	r3, r3, #4
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a17      	ldr	r2, [pc, #92]	; (8009960 <TIM_OC2_SetConfig+0xe4>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d003      	beq.n	8009910 <TIM_OC2_SetConfig+0x94>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a16      	ldr	r2, [pc, #88]	; (8009964 <TIM_OC2_SetConfig+0xe8>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d113      	bne.n	8009938 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009916:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800991e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	693a      	ldr	r2, [r7, #16]
 8009928:	4313      	orrs	r3, r2
 800992a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	4313      	orrs	r3, r2
 8009936:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	621a      	str	r2, [r3, #32]
}
 8009952:	bf00      	nop
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	40010000 	.word	0x40010000
 8009964:	40010400 	.word	0x40010400

08009968 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009968:	b480      	push	{r7}
 800996a:	b087      	sub	sp, #28
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6a1b      	ldr	r3, [r3, #32]
 8009976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69db      	ldr	r3, [r3, #28]
 800998e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f023 0303 	bic.w	r3, r3, #3
 800999e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	021b      	lsls	r3, r3, #8
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a21      	ldr	r2, [pc, #132]	; (8009a48 <TIM_OC3_SetConfig+0xe0>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d003      	beq.n	80099ce <TIM_OC3_SetConfig+0x66>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a20      	ldr	r2, [pc, #128]	; (8009a4c <TIM_OC3_SetConfig+0xe4>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d10d      	bne.n	80099ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	021b      	lsls	r3, r3, #8
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a16      	ldr	r2, [pc, #88]	; (8009a48 <TIM_OC3_SetConfig+0xe0>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d003      	beq.n	80099fa <TIM_OC3_SetConfig+0x92>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a15      	ldr	r2, [pc, #84]	; (8009a4c <TIM_OC3_SetConfig+0xe4>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d113      	bne.n	8009a22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	695b      	ldr	r3, [r3, #20]
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	011b      	lsls	r3, r3, #4
 8009a1c:	693a      	ldr	r2, [r7, #16]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	621a      	str	r2, [r3, #32]
}
 8009a3c:	bf00      	nop
 8009a3e:	371c      	adds	r7, #28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr
 8009a48:	40010000 	.word	0x40010000
 8009a4c:	40010400 	.word	0x40010400

08009a50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	021b      	lsls	r3, r3, #8
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	031b      	lsls	r3, r3, #12
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a12      	ldr	r2, [pc, #72]	; (8009af4 <TIM_OC4_SetConfig+0xa4>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d003      	beq.n	8009ab8 <TIM_OC4_SetConfig+0x68>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a11      	ldr	r2, [pc, #68]	; (8009af8 <TIM_OC4_SetConfig+0xa8>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d109      	bne.n	8009acc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009abe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	019b      	lsls	r3, r3, #6
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	621a      	str	r2, [r3, #32]
}
 8009ae6:	bf00      	nop
 8009ae8:	371c      	adds	r7, #28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	40010000 	.word	0x40010000
 8009af8:	40010400 	.word	0x40010400

08009afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	f023 0201 	bic.w	r2, r3, #1
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	011b      	lsls	r3, r3, #4
 8009b2c:	693a      	ldr	r2, [r7, #16]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f023 030a 	bic.w	r3, r3, #10
 8009b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	693a      	ldr	r2, [r7, #16]
 8009b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	621a      	str	r2, [r3, #32]
}
 8009b4e:	bf00      	nop
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b087      	sub	sp, #28
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	60b9      	str	r1, [r7, #8]
 8009b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6a1b      	ldr	r3, [r3, #32]
 8009b6a:	f023 0210 	bic.w	r2, r3, #16
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a1b      	ldr	r3, [r3, #32]
 8009b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	031b      	lsls	r3, r3, #12
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	011b      	lsls	r3, r3, #4
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	621a      	str	r2, [r3, #32]
}
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr

08009bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b085      	sub	sp, #20
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	f043 0307 	orr.w	r3, r3, #7
 8009bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	609a      	str	r2, [r3, #8]
}
 8009be4:	bf00      	nop
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	021a      	lsls	r2, r3, #8
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	431a      	orrs	r2, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	609a      	str	r2, [r3, #8]
}
 8009c24:	bf00      	nop
 8009c26:	371c      	adds	r7, #28
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	f003 031f 	and.w	r3, r3, #31
 8009c42:	2201      	movs	r2, #1
 8009c44:	fa02 f303 	lsl.w	r3, r2, r3
 8009c48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6a1a      	ldr	r2, [r3, #32]
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	43db      	mvns	r3, r3
 8009c52:	401a      	ands	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6a1a      	ldr	r2, [r3, #32]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 031f 	and.w	r3, r3, #31
 8009c62:	6879      	ldr	r1, [r7, #4]
 8009c64:	fa01 f303 	lsl.w	r3, r1, r3
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	621a      	str	r2, [r3, #32]
}
 8009c6e:	bf00      	nop
 8009c70:	371c      	adds	r7, #28
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
	...

08009c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d101      	bne.n	8009c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c90:	2302      	movs	r3, #2
 8009c92:	e05a      	b.n	8009d4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a21      	ldr	r2, [pc, #132]	; (8009d58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d022      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce0:	d01d      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a1d      	ldr	r2, [pc, #116]	; (8009d5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d018      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a1b      	ldr	r2, [pc, #108]	; (8009d60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d013      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a1a      	ldr	r2, [pc, #104]	; (8009d64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d00e      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a18      	ldr	r2, [pc, #96]	; (8009d68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d009      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a17      	ldr	r2, [pc, #92]	; (8009d6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d004      	beq.n	8009d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d10c      	bne.n	8009d38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68ba      	ldr	r2, [r7, #8]
 8009d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2200      	movs	r2, #0
 8009d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3714      	adds	r7, #20
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	40010000 	.word	0x40010000
 8009d5c:	40000400 	.word	0x40000400
 8009d60:	40000800 	.word	0x40000800
 8009d64:	40000c00 	.word	0x40000c00
 8009d68:	40010400 	.word	0x40010400
 8009d6c:	40014000 	.word	0x40014000
 8009d70:	40001800 	.word	0x40001800

08009d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e03f      	b.n	8009e2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d106      	bne.n	8009dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7f7 fffe 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2224      	movs	r2, #36	; 0x24
 8009dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	68da      	ldr	r2, [r3, #12]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fb8b 	bl	800a4fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	691a      	ldr	r2, [r3, #16]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	695a      	ldr	r2, [r3, #20]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68da      	ldr	r2, [r3, #12]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2220      	movs	r2, #32
 8009e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009e2c:	2300      	movs	r3, #0
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	4613      	mov	r3, r2
 8009e44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	d166      	bne.n	8009f20 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d002      	beq.n	8009e5e <HAL_UART_Receive_DMA+0x26>
 8009e58:	88fb      	ldrh	r3, [r7, #6]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e05f      	b.n	8009f22 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <HAL_UART_Receive_DMA+0x38>
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e058      	b.n	8009f22 <HAL_UART_Receive_DMA+0xea>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	88fa      	ldrh	r2, [r7, #6]
 8009e82:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2222      	movs	r2, #34	; 0x22
 8009e8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e96:	4a25      	ldr	r2, [pc, #148]	; (8009f2c <HAL_UART_Receive_DMA+0xf4>)
 8009e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e9e:	4a24      	ldr	r2, [pc, #144]	; (8009f30 <HAL_UART_Receive_DMA+0xf8>)
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ea6:	4a23      	ldr	r2, [pc, #140]	; (8009f34 <HAL_UART_Receive_DMA+0xfc>)
 8009ea8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eae:	2200      	movs	r2, #0
 8009eb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8009eb2:	f107 0308 	add.w	r3, r7, #8
 8009eb6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	88fb      	ldrh	r3, [r7, #6]
 8009eca:	f7fa f995 	bl	80041f8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009ece:	2300      	movs	r3, #0
 8009ed0:	613b      	str	r3, [r7, #16]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	613b      	str	r3, [r7, #16]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	613b      	str	r3, [r7, #16]
 8009ee2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	68da      	ldr	r2, [r3, #12]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009efa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	695a      	ldr	r2, [r3, #20]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f042 0201 	orr.w	r2, r2, #1
 8009f0a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	695a      	ldr	r2, [r3, #20]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f1a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	e000      	b.n	8009f22 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009f20:	2302      	movs	r3, #2
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	0800a175 	.word	0x0800a175
 8009f30:	0800a1dd 	.word	0x0800a1dd
 8009f34:	0800a1f9 	.word	0x0800a1f9

08009f38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b088      	sub	sp, #32
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68db      	ldr	r3, [r3, #12]
 8009f4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	f003 030f 	and.w	r3, r3, #15
 8009f66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10d      	bne.n	8009f8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	f003 0320 	and.w	r3, r3, #32
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d008      	beq.n	8009f8a <HAL_UART_IRQHandler+0x52>
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	f003 0320 	and.w	r3, r3, #32
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 fa38 	bl	800a3f8 <UART_Receive_IT>
      return;
 8009f88:	e0d1      	b.n	800a12e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80b0 	beq.w	800a0f2 <HAL_UART_IRQHandler+0x1ba>
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d105      	bne.n	8009fa8 <HAL_UART_IRQHandler+0x70>
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 80a5 	beq.w	800a0f2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d00a      	beq.n	8009fc8 <HAL_UART_IRQHandler+0x90>
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d005      	beq.n	8009fc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc0:	f043 0201 	orr.w	r2, r3, #1
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	f003 0304 	and.w	r3, r3, #4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <HAL_UART_IRQHandler+0xb0>
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d005      	beq.n	8009fe8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe0:	f043 0202 	orr.w	r2, r3, #2
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d00a      	beq.n	800a008 <HAL_UART_IRQHandler+0xd0>
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d005      	beq.n	800a008 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a000:	f043 0204 	orr.w	r2, r3, #4
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	f003 0308 	and.w	r3, r3, #8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00f      	beq.n	800a032 <HAL_UART_IRQHandler+0xfa>
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f003 0320 	and.w	r3, r3, #32
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d104      	bne.n	800a026 <HAL_UART_IRQHandler+0xee>
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f003 0301 	and.w	r3, r3, #1
 800a022:	2b00      	cmp	r3, #0
 800a024:	d005      	beq.n	800a032 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02a:	f043 0208 	orr.w	r2, r3, #8
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d078      	beq.n	800a12c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	f003 0320 	and.w	r3, r3, #32
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <HAL_UART_IRQHandler+0x11c>
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	f003 0320 	and.w	r3, r3, #32
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d002      	beq.n	800a054 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f9d2 	bl	800a3f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a05e:	2b40      	cmp	r3, #64	; 0x40
 800a060:	bf0c      	ite	eq
 800a062:	2301      	moveq	r3, #1
 800a064:	2300      	movne	r3, #0
 800a066:	b2db      	uxtb	r3, r3
 800a068:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	2b00      	cmp	r3, #0
 800a074:	d102      	bne.n	800a07c <HAL_UART_IRQHandler+0x144>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d031      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f91b 	bl	800a2b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	d123      	bne.n	800a0d8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	695a      	ldr	r2, [r3, #20]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a09e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d013      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ac:	4a21      	ldr	r2, [pc, #132]	; (800a134 <HAL_UART_IRQHandler+0x1fc>)
 800a0ae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fa f8f7 	bl	80042a8 <HAL_DMA_Abort_IT>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d016      	beq.n	800a0ee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a0ca:	4610      	mov	r0, r2
 800a0cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ce:	e00e      	b.n	800a0ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f845 	bl	800a160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0d6:	e00a      	b.n	800a0ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 f841 	bl	800a160 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0de:	e006      	b.n	800a0ee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f000 f83d 	bl	800a160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a0ec:	e01e      	b.n	800a12c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ee:	bf00      	nop
    return;
 800a0f0:	e01c      	b.n	800a12c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d008      	beq.n	800a10e <HAL_UART_IRQHandler+0x1d6>
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f908 	bl	800a31c <UART_Transmit_IT>
    return;
 800a10c:	e00f      	b.n	800a12e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00a      	beq.n	800a12e <HAL_UART_IRQHandler+0x1f6>
 800a118:	69bb      	ldr	r3, [r7, #24]
 800a11a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d005      	beq.n	800a12e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f950 	bl	800a3c8 <UART_EndTransmit_IT>
    return;
 800a128:	bf00      	nop
 800a12a:	e000      	b.n	800a12e <HAL_UART_IRQHandler+0x1f6>
    return;
 800a12c:	bf00      	nop
  }
}
 800a12e:	3720      	adds	r7, #32
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	0800a2f5 	.word	0x0800a2f5

0800a138 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a180:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d11e      	bne.n	800a1ce <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68da      	ldr	r2, [r3, #12]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1a4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	695a      	ldr	r2, [r3, #20]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f022 0201 	bic.w	r2, r2, #1
 800a1b4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	695a      	ldr	r2, [r3, #20]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1c4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7f7 f82c 	bl	800122c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff ffae 	bl	800a14c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a200:	2300      	movs	r3, #0
 800a202:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a208:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a214:	2b80      	cmp	r3, #128	; 0x80
 800a216:	bf0c      	ite	eq
 800a218:	2301      	moveq	r3, #1
 800a21a:	2300      	movne	r3, #0
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b21      	cmp	r3, #33	; 0x21
 800a22a:	d108      	bne.n	800a23e <UART_DMAError+0x46>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d005      	beq.n	800a23e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	2200      	movs	r2, #0
 800a236:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a238:	68b8      	ldr	r0, [r7, #8]
 800a23a:	f000 f827 	bl	800a28c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a248:	2b40      	cmp	r3, #64	; 0x40
 800a24a:	bf0c      	ite	eq
 800a24c:	2301      	moveq	r3, #1
 800a24e:	2300      	movne	r3, #0
 800a250:	b2db      	uxtb	r3, r3
 800a252:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b22      	cmp	r3, #34	; 0x22
 800a25e:	d108      	bne.n	800a272 <UART_DMAError+0x7a>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d005      	beq.n	800a272 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	2200      	movs	r2, #0
 800a26a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a26c:	68b8      	ldr	r0, [r7, #8]
 800a26e:	f000 f823 	bl	800a2b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a276:	f043 0210 	orr.w	r2, r3, #16
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a27e:	68b8      	ldr	r0, [r7, #8]
 800a280:	f7ff ff6e 	bl	800a160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	68da      	ldr	r2, [r3, #12]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a2a2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2220      	movs	r2, #32
 800a2a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68da      	ldr	r2, [r3, #12]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a2ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	695a      	ldr	r2, [r3, #20]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f022 0201 	bic.w	r2, r2, #1
 800a2de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a300:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a30e:	68f8      	ldr	r0, [r7, #12]
 800a310:	f7ff ff26 	bl	800a160 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a314:	bf00      	nop
 800a316:	3710      	adds	r7, #16
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b21      	cmp	r3, #33	; 0x21
 800a32e:	d144      	bne.n	800a3ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a338:	d11a      	bne.n	800a370 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	461a      	mov	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a34e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a1b      	ldr	r3, [r3, #32]
 800a35c:	1c9a      	adds	r2, r3, #2
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	621a      	str	r2, [r3, #32]
 800a362:	e00e      	b.n	800a382 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	1c5a      	adds	r2, r3, #1
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	621a      	str	r2, [r3, #32]
 800a36e:	e008      	b.n	800a382 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	1c59      	adds	r1, r3, #1
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	6211      	str	r1, [r2, #32]
 800a37a:	781a      	ldrb	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a386:	b29b      	uxth	r3, r3
 800a388:	3b01      	subs	r3, #1
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	4619      	mov	r1, r3
 800a390:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10f      	bne.n	800a3b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68da      	ldr	r2, [r3, #12]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	e000      	b.n	800a3bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a3ba:	2302      	movs	r3, #2
  }
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68da      	ldr	r2, [r3, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff fea5 	bl	800a138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a406:	b2db      	uxtb	r3, r3
 800a408:	2b22      	cmp	r3, #34	; 0x22
 800a40a:	d171      	bne.n	800a4f0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a414:	d123      	bne.n	800a45e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10e      	bne.n	800a442 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a430:	b29a      	uxth	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43a:	1c9a      	adds	r2, r3, #2
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	629a      	str	r2, [r3, #40]	; 0x28
 800a440:	e029      	b.n	800a496 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a456:	1c5a      	adds	r2, r3, #1
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	629a      	str	r2, [r3, #40]	; 0x28
 800a45c:	e01b      	b.n	800a496 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10a      	bne.n	800a47c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	6858      	ldr	r0, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	1c59      	adds	r1, r3, #1
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	6291      	str	r1, [r2, #40]	; 0x28
 800a476:	b2c2      	uxtb	r2, r0
 800a478:	701a      	strb	r2, [r3, #0]
 800a47a:	e00c      	b.n	800a496 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	b2da      	uxtb	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a488:	1c58      	adds	r0, r3, #1
 800a48a:	6879      	ldr	r1, [r7, #4]
 800a48c:	6288      	str	r0, [r1, #40]	; 0x28
 800a48e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a492:	b2d2      	uxtb	r2, r2
 800a494:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	3b01      	subs	r3, #1
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d120      	bne.n	800a4ec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f022 0220 	bic.w	r2, r2, #32
 800a4b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68da      	ldr	r2, [r3, #12]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	695a      	ldr	r2, [r3, #20]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 0201 	bic.w	r2, r2, #1
 800a4d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7f6 fea2 	bl	800122c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e002      	b.n	800a4f2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e000      	b.n	800a4f2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a4f0:	2302      	movs	r3, #2
  }
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
	...

0800a4fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a500:	b085      	sub	sp, #20
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	430a      	orrs	r2, r1
 800a51a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	689a      	ldr	r2, [r3, #8]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	431a      	orrs	r2, r3
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	431a      	orrs	r2, r3
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	4313      	orrs	r3, r2
 800a532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a53e:	f023 030c 	bic.w	r3, r3, #12
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	6812      	ldr	r2, [r2, #0]
 800a546:	68f9      	ldr	r1, [r7, #12]
 800a548:	430b      	orrs	r3, r1
 800a54a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	699a      	ldr	r2, [r3, #24]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	430a      	orrs	r2, r1
 800a560:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	69db      	ldr	r3, [r3, #28]
 800a566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a56a:	f040 8199 	bne.w	800a8a0 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4ac6      	ldr	r2, [pc, #792]	; (800a88c <UART_SetConfig+0x390>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d00f      	beq.n	800a598 <UART_SetConfig+0x9c>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4ac4      	ldr	r2, [pc, #784]	; (800a890 <UART_SetConfig+0x394>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d00a      	beq.n	800a598 <UART_SetConfig+0x9c>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4ac3      	ldr	r2, [pc, #780]	; (800a894 <UART_SetConfig+0x398>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d005      	beq.n	800a598 <UART_SetConfig+0x9c>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4ac1      	ldr	r2, [pc, #772]	; (800a898 <UART_SetConfig+0x39c>)
 800a592:	4293      	cmp	r3, r2
 800a594:	f040 80bd 	bne.w	800a712 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a598:	f7fd f8dc 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 800a59c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	461d      	mov	r5, r3
 800a5a2:	f04f 0600 	mov.w	r6, #0
 800a5a6:	46a8      	mov	r8, r5
 800a5a8:	46b1      	mov	r9, r6
 800a5aa:	eb18 0308 	adds.w	r3, r8, r8
 800a5ae:	eb49 0409 	adc.w	r4, r9, r9
 800a5b2:	4698      	mov	r8, r3
 800a5b4:	46a1      	mov	r9, r4
 800a5b6:	eb18 0805 	adds.w	r8, r8, r5
 800a5ba:	eb49 0906 	adc.w	r9, r9, r6
 800a5be:	f04f 0100 	mov.w	r1, #0
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a5ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a5ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a5d2:	4688      	mov	r8, r1
 800a5d4:	4691      	mov	r9, r2
 800a5d6:	eb18 0005 	adds.w	r0, r8, r5
 800a5da:	eb49 0106 	adc.w	r1, r9, r6
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	461d      	mov	r5, r3
 800a5e4:	f04f 0600 	mov.w	r6, #0
 800a5e8:	196b      	adds	r3, r5, r5
 800a5ea:	eb46 0406 	adc.w	r4, r6, r6
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4623      	mov	r3, r4
 800a5f2:	f7f5 fe15 	bl	8000220 <__aeabi_uldivmod>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	4ba7      	ldr	r3, [pc, #668]	; (800a89c <UART_SetConfig+0x3a0>)
 800a5fe:	fba3 2302 	umull	r2, r3, r3, r2
 800a602:	095b      	lsrs	r3, r3, #5
 800a604:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	461d      	mov	r5, r3
 800a60c:	f04f 0600 	mov.w	r6, #0
 800a610:	46a9      	mov	r9, r5
 800a612:	46b2      	mov	sl, r6
 800a614:	eb19 0309 	adds.w	r3, r9, r9
 800a618:	eb4a 040a 	adc.w	r4, sl, sl
 800a61c:	4699      	mov	r9, r3
 800a61e:	46a2      	mov	sl, r4
 800a620:	eb19 0905 	adds.w	r9, r9, r5
 800a624:	eb4a 0a06 	adc.w	sl, sl, r6
 800a628:	f04f 0100 	mov.w	r1, #0
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a634:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a638:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a63c:	4689      	mov	r9, r1
 800a63e:	4692      	mov	sl, r2
 800a640:	eb19 0005 	adds.w	r0, r9, r5
 800a644:	eb4a 0106 	adc.w	r1, sl, r6
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	461d      	mov	r5, r3
 800a64e:	f04f 0600 	mov.w	r6, #0
 800a652:	196b      	adds	r3, r5, r5
 800a654:	eb46 0406 	adc.w	r4, r6, r6
 800a658:	461a      	mov	r2, r3
 800a65a:	4623      	mov	r3, r4
 800a65c:	f7f5 fde0 	bl	8000220 <__aeabi_uldivmod>
 800a660:	4603      	mov	r3, r0
 800a662:	460c      	mov	r4, r1
 800a664:	461a      	mov	r2, r3
 800a666:	4b8d      	ldr	r3, [pc, #564]	; (800a89c <UART_SetConfig+0x3a0>)
 800a668:	fba3 1302 	umull	r1, r3, r3, r2
 800a66c:	095b      	lsrs	r3, r3, #5
 800a66e:	2164      	movs	r1, #100	; 0x64
 800a670:	fb01 f303 	mul.w	r3, r1, r3
 800a674:	1ad3      	subs	r3, r2, r3
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	3332      	adds	r3, #50	; 0x32
 800a67a:	4a88      	ldr	r2, [pc, #544]	; (800a89c <UART_SetConfig+0x3a0>)
 800a67c:	fba2 2303 	umull	r2, r3, r2, r3
 800a680:	095b      	lsrs	r3, r3, #5
 800a682:	005b      	lsls	r3, r3, #1
 800a684:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a688:	4498      	add	r8, r3
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	461d      	mov	r5, r3
 800a68e:	f04f 0600 	mov.w	r6, #0
 800a692:	46a9      	mov	r9, r5
 800a694:	46b2      	mov	sl, r6
 800a696:	eb19 0309 	adds.w	r3, r9, r9
 800a69a:	eb4a 040a 	adc.w	r4, sl, sl
 800a69e:	4699      	mov	r9, r3
 800a6a0:	46a2      	mov	sl, r4
 800a6a2:	eb19 0905 	adds.w	r9, r9, r5
 800a6a6:	eb4a 0a06 	adc.w	sl, sl, r6
 800a6aa:	f04f 0100 	mov.w	r1, #0
 800a6ae:	f04f 0200 	mov.w	r2, #0
 800a6b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a6ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a6be:	4689      	mov	r9, r1
 800a6c0:	4692      	mov	sl, r2
 800a6c2:	eb19 0005 	adds.w	r0, r9, r5
 800a6c6:	eb4a 0106 	adc.w	r1, sl, r6
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	461d      	mov	r5, r3
 800a6d0:	f04f 0600 	mov.w	r6, #0
 800a6d4:	196b      	adds	r3, r5, r5
 800a6d6:	eb46 0406 	adc.w	r4, r6, r6
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4623      	mov	r3, r4
 800a6de:	f7f5 fd9f 	bl	8000220 <__aeabi_uldivmod>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	4b6c      	ldr	r3, [pc, #432]	; (800a89c <UART_SetConfig+0x3a0>)
 800a6ea:	fba3 1302 	umull	r1, r3, r3, r2
 800a6ee:	095b      	lsrs	r3, r3, #5
 800a6f0:	2164      	movs	r1, #100	; 0x64
 800a6f2:	fb01 f303 	mul.w	r3, r1, r3
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	00db      	lsls	r3, r3, #3
 800a6fa:	3332      	adds	r3, #50	; 0x32
 800a6fc:	4a67      	ldr	r2, [pc, #412]	; (800a89c <UART_SetConfig+0x3a0>)
 800a6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a702:	095b      	lsrs	r3, r3, #5
 800a704:	f003 0207 	and.w	r2, r3, #7
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4442      	add	r2, r8
 800a70e:	609a      	str	r2, [r3, #8]
 800a710:	e27d      	b.n	800ac0e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a712:	f7fd f80b 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 800a716:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	461d      	mov	r5, r3
 800a71c:	f04f 0600 	mov.w	r6, #0
 800a720:	46a8      	mov	r8, r5
 800a722:	46b1      	mov	r9, r6
 800a724:	eb18 0308 	adds.w	r3, r8, r8
 800a728:	eb49 0409 	adc.w	r4, r9, r9
 800a72c:	4698      	mov	r8, r3
 800a72e:	46a1      	mov	r9, r4
 800a730:	eb18 0805 	adds.w	r8, r8, r5
 800a734:	eb49 0906 	adc.w	r9, r9, r6
 800a738:	f04f 0100 	mov.w	r1, #0
 800a73c:	f04f 0200 	mov.w	r2, #0
 800a740:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a744:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a748:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a74c:	4688      	mov	r8, r1
 800a74e:	4691      	mov	r9, r2
 800a750:	eb18 0005 	adds.w	r0, r8, r5
 800a754:	eb49 0106 	adc.w	r1, r9, r6
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	461d      	mov	r5, r3
 800a75e:	f04f 0600 	mov.w	r6, #0
 800a762:	196b      	adds	r3, r5, r5
 800a764:	eb46 0406 	adc.w	r4, r6, r6
 800a768:	461a      	mov	r2, r3
 800a76a:	4623      	mov	r3, r4
 800a76c:	f7f5 fd58 	bl	8000220 <__aeabi_uldivmod>
 800a770:	4603      	mov	r3, r0
 800a772:	460c      	mov	r4, r1
 800a774:	461a      	mov	r2, r3
 800a776:	4b49      	ldr	r3, [pc, #292]	; (800a89c <UART_SetConfig+0x3a0>)
 800a778:	fba3 2302 	umull	r2, r3, r3, r2
 800a77c:	095b      	lsrs	r3, r3, #5
 800a77e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	461d      	mov	r5, r3
 800a786:	f04f 0600 	mov.w	r6, #0
 800a78a:	46a9      	mov	r9, r5
 800a78c:	46b2      	mov	sl, r6
 800a78e:	eb19 0309 	adds.w	r3, r9, r9
 800a792:	eb4a 040a 	adc.w	r4, sl, sl
 800a796:	4699      	mov	r9, r3
 800a798:	46a2      	mov	sl, r4
 800a79a:	eb19 0905 	adds.w	r9, r9, r5
 800a79e:	eb4a 0a06 	adc.w	sl, sl, r6
 800a7a2:	f04f 0100 	mov.w	r1, #0
 800a7a6:	f04f 0200 	mov.w	r2, #0
 800a7aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a7ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a7b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a7b6:	4689      	mov	r9, r1
 800a7b8:	4692      	mov	sl, r2
 800a7ba:	eb19 0005 	adds.w	r0, r9, r5
 800a7be:	eb4a 0106 	adc.w	r1, sl, r6
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	461d      	mov	r5, r3
 800a7c8:	f04f 0600 	mov.w	r6, #0
 800a7cc:	196b      	adds	r3, r5, r5
 800a7ce:	eb46 0406 	adc.w	r4, r6, r6
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	4623      	mov	r3, r4
 800a7d6:	f7f5 fd23 	bl	8000220 <__aeabi_uldivmod>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	460c      	mov	r4, r1
 800a7de:	461a      	mov	r2, r3
 800a7e0:	4b2e      	ldr	r3, [pc, #184]	; (800a89c <UART_SetConfig+0x3a0>)
 800a7e2:	fba3 1302 	umull	r1, r3, r3, r2
 800a7e6:	095b      	lsrs	r3, r3, #5
 800a7e8:	2164      	movs	r1, #100	; 0x64
 800a7ea:	fb01 f303 	mul.w	r3, r1, r3
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	00db      	lsls	r3, r3, #3
 800a7f2:	3332      	adds	r3, #50	; 0x32
 800a7f4:	4a29      	ldr	r2, [pc, #164]	; (800a89c <UART_SetConfig+0x3a0>)
 800a7f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7fa:	095b      	lsrs	r3, r3, #5
 800a7fc:	005b      	lsls	r3, r3, #1
 800a7fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a802:	4498      	add	r8, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	461d      	mov	r5, r3
 800a808:	f04f 0600 	mov.w	r6, #0
 800a80c:	46a9      	mov	r9, r5
 800a80e:	46b2      	mov	sl, r6
 800a810:	eb19 0309 	adds.w	r3, r9, r9
 800a814:	eb4a 040a 	adc.w	r4, sl, sl
 800a818:	4699      	mov	r9, r3
 800a81a:	46a2      	mov	sl, r4
 800a81c:	eb19 0905 	adds.w	r9, r9, r5
 800a820:	eb4a 0a06 	adc.w	sl, sl, r6
 800a824:	f04f 0100 	mov.w	r1, #0
 800a828:	f04f 0200 	mov.w	r2, #0
 800a82c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a830:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a834:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a838:	4689      	mov	r9, r1
 800a83a:	4692      	mov	sl, r2
 800a83c:	eb19 0005 	adds.w	r0, r9, r5
 800a840:	eb4a 0106 	adc.w	r1, sl, r6
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	461d      	mov	r5, r3
 800a84a:	f04f 0600 	mov.w	r6, #0
 800a84e:	196b      	adds	r3, r5, r5
 800a850:	eb46 0406 	adc.w	r4, r6, r6
 800a854:	461a      	mov	r2, r3
 800a856:	4623      	mov	r3, r4
 800a858:	f7f5 fce2 	bl	8000220 <__aeabi_uldivmod>
 800a85c:	4603      	mov	r3, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	461a      	mov	r2, r3
 800a862:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <UART_SetConfig+0x3a0>)
 800a864:	fba3 1302 	umull	r1, r3, r3, r2
 800a868:	095b      	lsrs	r3, r3, #5
 800a86a:	2164      	movs	r1, #100	; 0x64
 800a86c:	fb01 f303 	mul.w	r3, r1, r3
 800a870:	1ad3      	subs	r3, r2, r3
 800a872:	00db      	lsls	r3, r3, #3
 800a874:	3332      	adds	r3, #50	; 0x32
 800a876:	4a09      	ldr	r2, [pc, #36]	; (800a89c <UART_SetConfig+0x3a0>)
 800a878:	fba2 2303 	umull	r2, r3, r2, r3
 800a87c:	095b      	lsrs	r3, r3, #5
 800a87e:	f003 0207 	and.w	r2, r3, #7
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4442      	add	r2, r8
 800a888:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a88a:	e1c0      	b.n	800ac0e <UART_SetConfig+0x712>
 800a88c:	40011000 	.word	0x40011000
 800a890:	40011400 	.word	0x40011400
 800a894:	40011800 	.word	0x40011800
 800a898:	40011c00 	.word	0x40011c00
 800a89c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4adc      	ldr	r2, [pc, #880]	; (800ac18 <UART_SetConfig+0x71c>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d00f      	beq.n	800a8ca <UART_SetConfig+0x3ce>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4adb      	ldr	r2, [pc, #876]	; (800ac1c <UART_SetConfig+0x720>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d00a      	beq.n	800a8ca <UART_SetConfig+0x3ce>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4ad9      	ldr	r2, [pc, #868]	; (800ac20 <UART_SetConfig+0x724>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d005      	beq.n	800a8ca <UART_SetConfig+0x3ce>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4ad8      	ldr	r2, [pc, #864]	; (800ac24 <UART_SetConfig+0x728>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	f040 80d1 	bne.w	800aa6c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8ca:	f7fc ff43 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 800a8ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	469a      	mov	sl, r3
 800a8d4:	f04f 0b00 	mov.w	fp, #0
 800a8d8:	46d0      	mov	r8, sl
 800a8da:	46d9      	mov	r9, fp
 800a8dc:	eb18 0308 	adds.w	r3, r8, r8
 800a8e0:	eb49 0409 	adc.w	r4, r9, r9
 800a8e4:	4698      	mov	r8, r3
 800a8e6:	46a1      	mov	r9, r4
 800a8e8:	eb18 080a 	adds.w	r8, r8, sl
 800a8ec:	eb49 090b 	adc.w	r9, r9, fp
 800a8f0:	f04f 0100 	mov.w	r1, #0
 800a8f4:	f04f 0200 	mov.w	r2, #0
 800a8f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a900:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a904:	4688      	mov	r8, r1
 800a906:	4691      	mov	r9, r2
 800a908:	eb1a 0508 	adds.w	r5, sl, r8
 800a90c:	eb4b 0609 	adc.w	r6, fp, r9
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	4619      	mov	r1, r3
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	f04f 0300 	mov.w	r3, #0
 800a91e:	f04f 0400 	mov.w	r4, #0
 800a922:	0094      	lsls	r4, r2, #2
 800a924:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a928:	008b      	lsls	r3, r1, #2
 800a92a:	461a      	mov	r2, r3
 800a92c:	4623      	mov	r3, r4
 800a92e:	4628      	mov	r0, r5
 800a930:	4631      	mov	r1, r6
 800a932:	f7f5 fc75 	bl	8000220 <__aeabi_uldivmod>
 800a936:	4603      	mov	r3, r0
 800a938:	460c      	mov	r4, r1
 800a93a:	461a      	mov	r2, r3
 800a93c:	4bba      	ldr	r3, [pc, #744]	; (800ac28 <UART_SetConfig+0x72c>)
 800a93e:	fba3 2302 	umull	r2, r3, r3, r2
 800a942:	095b      	lsrs	r3, r3, #5
 800a944:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	469b      	mov	fp, r3
 800a94c:	f04f 0c00 	mov.w	ip, #0
 800a950:	46d9      	mov	r9, fp
 800a952:	46e2      	mov	sl, ip
 800a954:	eb19 0309 	adds.w	r3, r9, r9
 800a958:	eb4a 040a 	adc.w	r4, sl, sl
 800a95c:	4699      	mov	r9, r3
 800a95e:	46a2      	mov	sl, r4
 800a960:	eb19 090b 	adds.w	r9, r9, fp
 800a964:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a968:	f04f 0100 	mov.w	r1, #0
 800a96c:	f04f 0200 	mov.w	r2, #0
 800a970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a974:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a978:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a97c:	4689      	mov	r9, r1
 800a97e:	4692      	mov	sl, r2
 800a980:	eb1b 0509 	adds.w	r5, fp, r9
 800a984:	eb4c 060a 	adc.w	r6, ip, sl
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	4619      	mov	r1, r3
 800a98e:	f04f 0200 	mov.w	r2, #0
 800a992:	f04f 0300 	mov.w	r3, #0
 800a996:	f04f 0400 	mov.w	r4, #0
 800a99a:	0094      	lsls	r4, r2, #2
 800a99c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a9a0:	008b      	lsls	r3, r1, #2
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	4623      	mov	r3, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	f7f5 fc39 	bl	8000220 <__aeabi_uldivmod>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	460c      	mov	r4, r1
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	4b9c      	ldr	r3, [pc, #624]	; (800ac28 <UART_SetConfig+0x72c>)
 800a9b6:	fba3 1302 	umull	r1, r3, r3, r2
 800a9ba:	095b      	lsrs	r3, r3, #5
 800a9bc:	2164      	movs	r1, #100	; 0x64
 800a9be:	fb01 f303 	mul.w	r3, r1, r3
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	011b      	lsls	r3, r3, #4
 800a9c6:	3332      	adds	r3, #50	; 0x32
 800a9c8:	4a97      	ldr	r2, [pc, #604]	; (800ac28 <UART_SetConfig+0x72c>)
 800a9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ce:	095b      	lsrs	r3, r3, #5
 800a9d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9d4:	4498      	add	r8, r3
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	469b      	mov	fp, r3
 800a9da:	f04f 0c00 	mov.w	ip, #0
 800a9de:	46d9      	mov	r9, fp
 800a9e0:	46e2      	mov	sl, ip
 800a9e2:	eb19 0309 	adds.w	r3, r9, r9
 800a9e6:	eb4a 040a 	adc.w	r4, sl, sl
 800a9ea:	4699      	mov	r9, r3
 800a9ec:	46a2      	mov	sl, r4
 800a9ee:	eb19 090b 	adds.w	r9, r9, fp
 800a9f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a9f6:	f04f 0100 	mov.w	r1, #0
 800a9fa:	f04f 0200 	mov.w	r2, #0
 800a9fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa0a:	4689      	mov	r9, r1
 800aa0c:	4692      	mov	sl, r2
 800aa0e:	eb1b 0509 	adds.w	r5, fp, r9
 800aa12:	eb4c 060a 	adc.w	r6, ip, sl
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	4619      	mov	r1, r3
 800aa1c:	f04f 0200 	mov.w	r2, #0
 800aa20:	f04f 0300 	mov.w	r3, #0
 800aa24:	f04f 0400 	mov.w	r4, #0
 800aa28:	0094      	lsls	r4, r2, #2
 800aa2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aa2e:	008b      	lsls	r3, r1, #2
 800aa30:	461a      	mov	r2, r3
 800aa32:	4623      	mov	r3, r4
 800aa34:	4628      	mov	r0, r5
 800aa36:	4631      	mov	r1, r6
 800aa38:	f7f5 fbf2 	bl	8000220 <__aeabi_uldivmod>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	461a      	mov	r2, r3
 800aa42:	4b79      	ldr	r3, [pc, #484]	; (800ac28 <UART_SetConfig+0x72c>)
 800aa44:	fba3 1302 	umull	r1, r3, r3, r2
 800aa48:	095b      	lsrs	r3, r3, #5
 800aa4a:	2164      	movs	r1, #100	; 0x64
 800aa4c:	fb01 f303 	mul.w	r3, r1, r3
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	011b      	lsls	r3, r3, #4
 800aa54:	3332      	adds	r3, #50	; 0x32
 800aa56:	4a74      	ldr	r2, [pc, #464]	; (800ac28 <UART_SetConfig+0x72c>)
 800aa58:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	f003 020f 	and.w	r2, r3, #15
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4442      	add	r2, r8
 800aa68:	609a      	str	r2, [r3, #8]
 800aa6a:	e0d0      	b.n	800ac0e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa6c:	f7fc fe5e 	bl	800772c <HAL_RCC_GetPCLK1Freq>
 800aa70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	469a      	mov	sl, r3
 800aa76:	f04f 0b00 	mov.w	fp, #0
 800aa7a:	46d0      	mov	r8, sl
 800aa7c:	46d9      	mov	r9, fp
 800aa7e:	eb18 0308 	adds.w	r3, r8, r8
 800aa82:	eb49 0409 	adc.w	r4, r9, r9
 800aa86:	4698      	mov	r8, r3
 800aa88:	46a1      	mov	r9, r4
 800aa8a:	eb18 080a 	adds.w	r8, r8, sl
 800aa8e:	eb49 090b 	adc.w	r9, r9, fp
 800aa92:	f04f 0100 	mov.w	r1, #0
 800aa96:	f04f 0200 	mov.w	r2, #0
 800aa9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aaa2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aaa6:	4688      	mov	r8, r1
 800aaa8:	4691      	mov	r9, r2
 800aaaa:	eb1a 0508 	adds.w	r5, sl, r8
 800aaae:	eb4b 0609 	adc.w	r6, fp, r9
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	4619      	mov	r1, r3
 800aab8:	f04f 0200 	mov.w	r2, #0
 800aabc:	f04f 0300 	mov.w	r3, #0
 800aac0:	f04f 0400 	mov.w	r4, #0
 800aac4:	0094      	lsls	r4, r2, #2
 800aac6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aaca:	008b      	lsls	r3, r1, #2
 800aacc:	461a      	mov	r2, r3
 800aace:	4623      	mov	r3, r4
 800aad0:	4628      	mov	r0, r5
 800aad2:	4631      	mov	r1, r6
 800aad4:	f7f5 fba4 	bl	8000220 <__aeabi_uldivmod>
 800aad8:	4603      	mov	r3, r0
 800aada:	460c      	mov	r4, r1
 800aadc:	461a      	mov	r2, r3
 800aade:	4b52      	ldr	r3, [pc, #328]	; (800ac28 <UART_SetConfig+0x72c>)
 800aae0:	fba3 2302 	umull	r2, r3, r3, r2
 800aae4:	095b      	lsrs	r3, r3, #5
 800aae6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	469b      	mov	fp, r3
 800aaee:	f04f 0c00 	mov.w	ip, #0
 800aaf2:	46d9      	mov	r9, fp
 800aaf4:	46e2      	mov	sl, ip
 800aaf6:	eb19 0309 	adds.w	r3, r9, r9
 800aafa:	eb4a 040a 	adc.w	r4, sl, sl
 800aafe:	4699      	mov	r9, r3
 800ab00:	46a2      	mov	sl, r4
 800ab02:	eb19 090b 	adds.w	r9, r9, fp
 800ab06:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab0a:	f04f 0100 	mov.w	r1, #0
 800ab0e:	f04f 0200 	mov.w	r2, #0
 800ab12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab1e:	4689      	mov	r9, r1
 800ab20:	4692      	mov	sl, r2
 800ab22:	eb1b 0509 	adds.w	r5, fp, r9
 800ab26:	eb4c 060a 	adc.w	r6, ip, sl
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	f04f 0200 	mov.w	r2, #0
 800ab34:	f04f 0300 	mov.w	r3, #0
 800ab38:	f04f 0400 	mov.w	r4, #0
 800ab3c:	0094      	lsls	r4, r2, #2
 800ab3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab42:	008b      	lsls	r3, r1, #2
 800ab44:	461a      	mov	r2, r3
 800ab46:	4623      	mov	r3, r4
 800ab48:	4628      	mov	r0, r5
 800ab4a:	4631      	mov	r1, r6
 800ab4c:	f7f5 fb68 	bl	8000220 <__aeabi_uldivmod>
 800ab50:	4603      	mov	r3, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	461a      	mov	r2, r3
 800ab56:	4b34      	ldr	r3, [pc, #208]	; (800ac28 <UART_SetConfig+0x72c>)
 800ab58:	fba3 1302 	umull	r1, r3, r3, r2
 800ab5c:	095b      	lsrs	r3, r3, #5
 800ab5e:	2164      	movs	r1, #100	; 0x64
 800ab60:	fb01 f303 	mul.w	r3, r1, r3
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	011b      	lsls	r3, r3, #4
 800ab68:	3332      	adds	r3, #50	; 0x32
 800ab6a:	4a2f      	ldr	r2, [pc, #188]	; (800ac28 <UART_SetConfig+0x72c>)
 800ab6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab70:	095b      	lsrs	r3, r3, #5
 800ab72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab76:	4498      	add	r8, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	469b      	mov	fp, r3
 800ab7c:	f04f 0c00 	mov.w	ip, #0
 800ab80:	46d9      	mov	r9, fp
 800ab82:	46e2      	mov	sl, ip
 800ab84:	eb19 0309 	adds.w	r3, r9, r9
 800ab88:	eb4a 040a 	adc.w	r4, sl, sl
 800ab8c:	4699      	mov	r9, r3
 800ab8e:	46a2      	mov	sl, r4
 800ab90:	eb19 090b 	adds.w	r9, r9, fp
 800ab94:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab98:	f04f 0100 	mov.w	r1, #0
 800ab9c:	f04f 0200 	mov.w	r2, #0
 800aba0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aba4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aba8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800abac:	4689      	mov	r9, r1
 800abae:	4692      	mov	sl, r2
 800abb0:	eb1b 0509 	adds.w	r5, fp, r9
 800abb4:	eb4c 060a 	adc.w	r6, ip, sl
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	4619      	mov	r1, r3
 800abbe:	f04f 0200 	mov.w	r2, #0
 800abc2:	f04f 0300 	mov.w	r3, #0
 800abc6:	f04f 0400 	mov.w	r4, #0
 800abca:	0094      	lsls	r4, r2, #2
 800abcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abd0:	008b      	lsls	r3, r1, #2
 800abd2:	461a      	mov	r2, r3
 800abd4:	4623      	mov	r3, r4
 800abd6:	4628      	mov	r0, r5
 800abd8:	4631      	mov	r1, r6
 800abda:	f7f5 fb21 	bl	8000220 <__aeabi_uldivmod>
 800abde:	4603      	mov	r3, r0
 800abe0:	460c      	mov	r4, r1
 800abe2:	461a      	mov	r2, r3
 800abe4:	4b10      	ldr	r3, [pc, #64]	; (800ac28 <UART_SetConfig+0x72c>)
 800abe6:	fba3 1302 	umull	r1, r3, r3, r2
 800abea:	095b      	lsrs	r3, r3, #5
 800abec:	2164      	movs	r1, #100	; 0x64
 800abee:	fb01 f303 	mul.w	r3, r1, r3
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	011b      	lsls	r3, r3, #4
 800abf6:	3332      	adds	r3, #50	; 0x32
 800abf8:	4a0b      	ldr	r2, [pc, #44]	; (800ac28 <UART_SetConfig+0x72c>)
 800abfa:	fba2 2303 	umull	r2, r3, r2, r3
 800abfe:	095b      	lsrs	r3, r3, #5
 800ac00:	f003 020f 	and.w	r2, r3, #15
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4442      	add	r2, r8
 800ac0a:	609a      	str	r2, [r3, #8]
}
 800ac0c:	e7ff      	b.n	800ac0e <UART_SetConfig+0x712>
 800ac0e:	bf00      	nop
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac18:	40011000 	.word	0x40011000
 800ac1c:	40011400 	.word	0x40011400
 800ac20:	40011800 	.word	0x40011800
 800ac24:	40011c00 	.word	0x40011c00
 800ac28:	51eb851f 	.word	0x51eb851f

0800ac2c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac44:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4b2f      	ldr	r3, [pc, #188]	; (800ad08 <FSMC_NORSRAM_Init+0xdc>)
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ac56:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800ac5c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800ac62:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ac68:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800ac6e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800ac74:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800ac7a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800ac80:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800ac86:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800ac8c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800ac92:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800ac98:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800ac9e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	2b08      	cmp	r3, #8
 800acac:	d103      	bne.n	800acb6 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb4:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68f9      	ldr	r1, [r7, #12]
 800acbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acca:	d10a      	bne.n	800ace2 <FSMC_NORSRAM_Init+0xb6>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d006      	beq.n	800ace2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acdc:	431a      	orrs	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d006      	beq.n	800acf8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf2:	431a      	orrs	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	ffc00480 	.word	0xffc00480

0800ad0c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b087      	sub	sp, #28
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad26:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ad2e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ad3a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800ad42:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800ad4a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ad54:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	3b02      	subs	r3, #2
 800ad5c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800ad5e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ad64:	4313      	orrs	r3, r2
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6979      	ldr	r1, [r7, #20]
 800ad74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad84:	d10e      	bne.n	800ada4 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ad8e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	691b      	ldr	r3, [r3, #16]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	051b      	lsls	r3, r3, #20
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	371c      	adds	r7, #28
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
	...

0800adb4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800adc2:	2300      	movs	r3, #0
 800adc4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adcc:	d122      	bne.n	800ae14 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800addc:	4013      	ands	r3, r2
 800adde:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800adea:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800adf2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	68db      	ldr	r3, [r3, #12]
 800adf8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800adfa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800ae00:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	6979      	ldr	r1, [r7, #20]
 800ae0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ae12:	e005      	b.n	800ae20 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ae1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ae20:	2300      	movs	r3, #0
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	371c      	adds	r7, #28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop
 800ae30:	cff00000 	.word	0xcff00000

0800ae34 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ae34:	b084      	sub	sp, #16
 800ae36:	b480      	push	{r7}
 800ae38:	b085      	sub	sp, #20
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	f107 001c 	add.w	r0, r7, #28
 800ae42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ae46:	2300      	movs	r3, #0
 800ae48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ae4a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ae4e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ae52:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ae56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ae58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ae5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ae5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ae6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae72:	68fa      	ldr	r2, [r7, #12]
 800ae74:	431a      	orrs	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	b004      	add	sp, #16
 800ae88:	4770      	bx	lr

0800ae8a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2203      	movs	r2, #3
 800aeb0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800aeb2:	2002      	movs	r0, #2
 800aeb4:	f7f8 fb5a 	bl	800356c <HAL_Delay>
  
  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800aec2:	b480      	push	{r7}
 800aec4:	b083      	sub	sp, #12
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0303 	and.w	r3, r3, #3
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800aede:	b480      	push	{r7}
 800aee0:	b085      	sub	sp, #20
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aee8:	2300      	movs	r3, #0
 800aeea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aefc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800af02:	431a      	orrs	r2, r3
                       Command->CPSM);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800af08:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800af18:	f023 030f 	bic.w	r3, r3, #15
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	431a      	orrs	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3714      	adds	r7, #20
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800af32:	b480      	push	{r7}
 800af34:	b083      	sub	sp, #12
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	b2db      	uxtb	r3, r3
}
 800af40:	4618      	mov	r0, r3
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b085      	sub	sp, #20
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3314      	adds	r3, #20
 800af5a:	461a      	mov	r2, r3
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	4413      	add	r3, r2
 800af60:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
}  
 800af66:	4618      	mov	r0, r3
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800af72:	b480      	push	{r7}
 800af74:	b085      	sub	sp, #20
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
 800af7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800af7c:	2300      	movs	r3, #0
 800af7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	685a      	ldr	r2, [r3, #4]
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800af98:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800af9e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800afa4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	431a      	orrs	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0

}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3714      	adds	r7, #20
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b088      	sub	sp, #32
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800afd8:	2310      	movs	r3, #16
 800afda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afdc:	2340      	movs	r3, #64	; 0x40
 800afde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afea:	f107 0308 	add.w	r3, r7, #8
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7ff ff74 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800aff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800affa:	2110      	movs	r1, #16
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f975 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b004:	69fb      	ldr	r3, [r7, #28]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3720      	adds	r7, #32
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b08a      	sub	sp, #40	; 0x28
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b01e:	2307      	movs	r3, #7
 800b020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b022:	2340      	movs	r3, #64	; 0x40
 800b024:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b026:	2300      	movs	r3, #0
 800b028:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b02a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b02e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b030:	f107 0310 	add.w	r3, r7, #16
 800b034:	4619      	mov	r1, r3
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7ff ff51 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b040:	2107      	movs	r1, #7
 800b042:	68f8      	ldr	r0, [r7, #12]
 800b044:	f000 f952 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b048:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3728      	adds	r7, #40	; 0x28
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b088      	sub	sp, #32
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b05c:	2300      	movs	r3, #0
 800b05e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b060:	2300      	movs	r3, #0
 800b062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b064:	2300      	movs	r3, #0
 800b066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b068:	2300      	movs	r3, #0
 800b06a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b06c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b070:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b072:	f107 0308 	add.w	r3, r7, #8
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff ff30 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f90c 	bl	800b29c <SDMMC_GetCmdError>
 800b084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b086:	69fb      	ldr	r3, [r7, #28]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3720      	adds	r7, #32
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b098:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b09c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b09e:	2308      	movs	r3, #8
 800b0a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0a2:	2340      	movs	r3, #64	; 0x40
 800b0a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0b0:	f107 0308 	add.w	r3, r7, #8
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff ff11 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 faf5 	bl	800b6ac <SDMMC_GetCmdResp7>
 800b0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3720      	adds	r7, #32
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b088      	sub	sp, #32
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
 800b0d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b0dc:	2337      	movs	r3, #55	; 0x37
 800b0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0ee:	f107 0308 	add.w	r3, r7, #8
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f7ff fef2 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0fe:	2137      	movs	r1, #55	; 0x37
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f8f3 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b108:	69fb      	ldr	r3, [r7, #28]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3720      	adds	r7, #32
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b088      	sub	sp, #32
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b128:	2329      	movs	r3, #41	; 0x29
 800b12a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b12c:	2340      	movs	r3, #64	; 0x40
 800b12e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b130:	2300      	movs	r3, #0
 800b132:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b138:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b13a:	f107 0308 	add.w	r3, r7, #8
 800b13e:	4619      	mov	r1, r3
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff fecc 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa02 	bl	800b550 <SDMMC_GetCmdResp3>
 800b14c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b14e:	69fb      	ldr	r3, [r7, #28]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3720      	adds	r7, #32
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b166:	2306      	movs	r3, #6
 800b168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b16a:	2340      	movs	r3, #64	; 0x40
 800b16c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b16e:	2300      	movs	r3, #0
 800b170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b176:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b178:	f107 0308 	add.w	r3, r7, #8
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7ff fead 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b184:	f241 3288 	movw	r2, #5000	; 0x1388
 800b188:	2106      	movs	r1, #6
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 f8ae 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b192:	69fb      	ldr	r3, [r7, #28]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3720      	adds	r7, #32
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b088      	sub	sp, #32
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b1a8:	2333      	movs	r3, #51	; 0x33
 800b1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1ac:	2340      	movs	r3, #64	; 0x40
 800b1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1ba:	f107 0308 	add.w	r3, r7, #8
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f7ff fe8c 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1ca:	2133      	movs	r1, #51	; 0x33
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 f88d 	bl	800b2ec <SDMMC_GetCmdResp1>
 800b1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1d4:	69fb      	ldr	r3, [r7, #28]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3720      	adds	r7, #32
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b088      	sub	sp, #32
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b1ee:	23c0      	movs	r3, #192	; 0xc0
 800b1f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b1fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b1fc:	f107 0308 	add.w	r3, r7, #8
 800b200:	4619      	mov	r1, r3
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7ff fe6b 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 f95b 	bl	800b4c4 <SDMMC_GetCmdResp2>
 800b20e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b210:	69fb      	ldr	r3, [r7, #28]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3720      	adds	r7, #32
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b088      	sub	sp, #32
 800b21e:	af00      	add	r7, sp, #0
 800b220:	6078      	str	r0, [r7, #4]
 800b222:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b228:	2309      	movs	r3, #9
 800b22a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b22c:	23c0      	movs	r3, #192	; 0xc0
 800b22e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b230:	2300      	movs	r3, #0
 800b232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b238:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b23a:	f107 0308 	add.w	r3, r7, #8
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff fe4c 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f93c 	bl	800b4c4 <SDMMC_GetCmdResp2>
 800b24c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b24e:	69fb      	ldr	r3, [r7, #28]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3720      	adds	r7, #32
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b088      	sub	sp, #32
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b262:	2300      	movs	r3, #0
 800b264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b266:	2303      	movs	r3, #3
 800b268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b26a:	2340      	movs	r3, #64	; 0x40
 800b26c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b26e:	2300      	movs	r3, #0
 800b270:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b276:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b278:	f107 0308 	add.w	r3, r7, #8
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7ff fe2d 	bl	800aede <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	2103      	movs	r1, #3
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f99b 	bl	800b5c4 <SDMMC_GetCmdResp6>
 800b28e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b290:	69fb      	ldr	r3, [r7, #28]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3720      	adds	r7, #32
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
	...

0800b29c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b29c:	b490      	push	{r4, r7}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2a4:	4b0f      	ldr	r3, [pc, #60]	; (800b2e4 <SDMMC_GetCmdError+0x48>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a0f      	ldr	r2, [pc, #60]	; (800b2e8 <SDMMC_GetCmdError+0x4c>)
 800b2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ae:	0a5b      	lsrs	r3, r3, #9
 800b2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b2b8:	4623      	mov	r3, r4
 800b2ba:	1e5c      	subs	r4, r3, #1
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d102      	bne.n	800b2c6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2c4:	e009      	b.n	800b2da <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0f2      	beq.n	800b2b8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	22c5      	movs	r2, #197	; 0xc5
 800b2d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bc90      	pop	{r4, r7}
 800b2e2:	4770      	bx	lr
 800b2e4:	20000000 	.word	0x20000000
 800b2e8:	10624dd3 	.word	0x10624dd3

0800b2ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b2ec:	b590      	push	{r4, r7, lr}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	607a      	str	r2, [r7, #4]
 800b2f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b2fa:	4b6f      	ldr	r3, [pc, #444]	; (800b4b8 <SDMMC_GetCmdResp1+0x1cc>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a6f      	ldr	r2, [pc, #444]	; (800b4bc <SDMMC_GetCmdResp1+0x1d0>)
 800b300:	fba2 2303 	umull	r2, r3, r2, r3
 800b304:	0a5b      	lsrs	r3, r3, #9
 800b306:	687a      	ldr	r2, [r7, #4]
 800b308:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b30c:	4623      	mov	r3, r4
 800b30e:	1e5c      	subs	r4, r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	d102      	bne.n	800b31a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b314:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b318:	e0c9      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b326:	2b00      	cmp	r3, #0
 800b328:	d0f0      	beq.n	800b30c <SDMMC_GetCmdResp1+0x20>
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1eb      	bne.n	800b30c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b338:	f003 0304 	and.w	r3, r3, #4
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d004      	beq.n	800b34a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2204      	movs	r2, #4
 800b344:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b346:	2304      	movs	r3, #4
 800b348:	e0b1      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34e:	f003 0301 	and.w	r3, r3, #1
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2201      	movs	r2, #1
 800b35a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e0a6      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	22c5      	movs	r2, #197	; 0xc5
 800b364:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7ff fde3 	bl	800af32 <SDIO_GetCommandResponse>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	7afb      	ldrb	r3, [r7, #11]
 800b372:	4293      	cmp	r3, r2
 800b374:	d001      	beq.n	800b37a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b376:	2301      	movs	r3, #1
 800b378:	e099      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b37a:	2100      	movs	r1, #0
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f7ff fde5 	bl	800af4c <SDIO_GetResponse>
 800b382:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	4b4e      	ldr	r3, [pc, #312]	; (800b4c0 <SDMMC_GetCmdResp1+0x1d4>)
 800b388:	4013      	ands	r3, r2
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b38e:	2300      	movs	r3, #0
 800b390:	e08d      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2b00      	cmp	r3, #0
 800b396:	da02      	bge.n	800b39e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b39c:	e087      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b3a8:	2340      	movs	r3, #64	; 0x40
 800b3aa:	e080      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b3b6:	2380      	movs	r3, #128	; 0x80
 800b3b8:	e079      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b3c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3c8:	e071      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b3d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3d8:	e069      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b3e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3e8:	e061      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b3f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b3f8:	e059      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b408:	e051      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b418:	e049      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b420:	2b00      	cmp	r3, #0
 800b422:	d002      	beq.n	800b42a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b424:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b428:	e041      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b434:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b438:	e039      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d002      	beq.n	800b44a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b448:	e031      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b454:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b458:	e029      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d002      	beq.n	800b46a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b464:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b468:	e021      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b474:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b478:	e019      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b484:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b488:	e011      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b494:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b498:	e009      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	f003 0308 	and.w	r3, r3, #8
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d002      	beq.n	800b4aa <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b4a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b4a8:	e001      	b.n	800b4ae <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	371c      	adds	r7, #28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd90      	pop	{r4, r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20000000 	.word	0x20000000
 800b4bc:	10624dd3 	.word	0x10624dd3
 800b4c0:	fdffe008 	.word	0xfdffe008

0800b4c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b4c4:	b490      	push	{r4, r7}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4cc:	4b1e      	ldr	r3, [pc, #120]	; (800b548 <SDMMC_GetCmdResp2+0x84>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a1e      	ldr	r2, [pc, #120]	; (800b54c <SDMMC_GetCmdResp2+0x88>)
 800b4d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4d6:	0a5b      	lsrs	r3, r3, #9
 800b4d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4e0:	4623      	mov	r3, r4
 800b4e2:	1e5c      	subs	r4, r3, #1
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d102      	bne.n	800b4ee <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4ec:	e026      	b.n	800b53c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0f0      	beq.n	800b4e0 <SDMMC_GetCmdResp2+0x1c>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1eb      	bne.n	800b4e0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b00      	cmp	r3, #0
 800b512:	d004      	beq.n	800b51e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2204      	movs	r2, #4
 800b518:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b51a:	2304      	movs	r3, #4
 800b51c:	e00e      	b.n	800b53c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b522:	f003 0301 	and.w	r3, r3, #1
 800b526:	2b00      	cmp	r3, #0
 800b528:	d004      	beq.n	800b534 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b530:	2301      	movs	r3, #1
 800b532:	e003      	b.n	800b53c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	22c5      	movs	r2, #197	; 0xc5
 800b538:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bc90      	pop	{r4, r7}
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop
 800b548:	20000000 	.word	0x20000000
 800b54c:	10624dd3 	.word	0x10624dd3

0800b550 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b550:	b490      	push	{r4, r7}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b558:	4b18      	ldr	r3, [pc, #96]	; (800b5bc <SDMMC_GetCmdResp3+0x6c>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a18      	ldr	r2, [pc, #96]	; (800b5c0 <SDMMC_GetCmdResp3+0x70>)
 800b55e:	fba2 2303 	umull	r2, r3, r2, r3
 800b562:	0a5b      	lsrs	r3, r3, #9
 800b564:	f241 3288 	movw	r2, #5000	; 0x1388
 800b568:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b56c:	4623      	mov	r3, r4
 800b56e:	1e5c      	subs	r4, r3, #1
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b574:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b578:	e01b      	b.n	800b5b2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0f0      	beq.n	800b56c <SDMMC_GetCmdResp3+0x1c>
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1eb      	bne.n	800b56c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d004      	beq.n	800b5aa <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2204      	movs	r2, #4
 800b5a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5a6:	2304      	movs	r3, #4
 800b5a8:	e003      	b.n	800b5b2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	22c5      	movs	r2, #197	; 0xc5
 800b5ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b5b0:	2300      	movs	r3, #0
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bc90      	pop	{r4, r7}
 800b5ba:	4770      	bx	lr
 800b5bc:	20000000 	.word	0x20000000
 800b5c0:	10624dd3 	.word	0x10624dd3

0800b5c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b5c4:	b590      	push	{r4, r7, lr}
 800b5c6:	b087      	sub	sp, #28
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	607a      	str	r2, [r7, #4]
 800b5d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5d2:	4b34      	ldr	r3, [pc, #208]	; (800b6a4 <SDMMC_GetCmdResp6+0xe0>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a34      	ldr	r2, [pc, #208]	; (800b6a8 <SDMMC_GetCmdResp6+0xe4>)
 800b5d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5dc:	0a5b      	lsrs	r3, r3, #9
 800b5de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b5e6:	4623      	mov	r3, r4
 800b5e8:	1e5c      	subs	r4, r3, #1
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d102      	bne.n	800b5f4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5f2:	e052      	b.n	800b69a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b600:	2b00      	cmp	r3, #0
 800b602:	d0f0      	beq.n	800b5e6 <SDMMC_GetCmdResp6+0x22>
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1eb      	bne.n	800b5e6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b612:	f003 0304 	and.w	r3, r3, #4
 800b616:	2b00      	cmp	r3, #0
 800b618:	d004      	beq.n	800b624 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2204      	movs	r2, #4
 800b61e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b620:	2304      	movs	r3, #4
 800b622:	e03a      	b.n	800b69a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b628:	f003 0301 	and.w	r3, r3, #1
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d004      	beq.n	800b63a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2201      	movs	r2, #1
 800b634:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b636:	2301      	movs	r3, #1
 800b638:	e02f      	b.n	800b69a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f7ff fc79 	bl	800af32 <SDIO_GetCommandResponse>
 800b640:	4603      	mov	r3, r0
 800b642:	461a      	mov	r2, r3
 800b644:	7afb      	ldrb	r3, [r7, #11]
 800b646:	4293      	cmp	r3, r2
 800b648:	d001      	beq.n	800b64e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e025      	b.n	800b69a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	22c5      	movs	r2, #197	; 0xc5
 800b652:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b654:	2100      	movs	r1, #0
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f7ff fc78 	bl	800af4c <SDIO_GetResponse>
 800b65c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	0c1b      	lsrs	r3, r3, #16
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b672:	2300      	movs	r3, #0
 800b674:	e011      	b.n	800b69a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b684:	e009      	b.n	800b69a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d002      	beq.n	800b696 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b694:	e001      	b.n	800b69a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd90      	pop	{r4, r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000000 	.word	0x20000000
 800b6a8:	10624dd3 	.word	0x10624dd3

0800b6ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b6ac:	b490      	push	{r4, r7}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6b4:	4b21      	ldr	r3, [pc, #132]	; (800b73c <SDMMC_GetCmdResp7+0x90>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a21      	ldr	r2, [pc, #132]	; (800b740 <SDMMC_GetCmdResp7+0x94>)
 800b6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b6be:	0a5b      	lsrs	r3, r3, #9
 800b6c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b6c8:	4623      	mov	r3, r4
 800b6ca:	1e5c      	subs	r4, r3, #1
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d102      	bne.n	800b6d6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b6d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b6d4:	e02c      	b.n	800b730 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6da:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d0f0      	beq.n	800b6c8 <SDMMC_GetCmdResp7+0x1c>
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d1eb      	bne.n	800b6c8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d004      	beq.n	800b706 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2204      	movs	r2, #4
 800b700:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b702:	2304      	movs	r3, #4
 800b704:	e014      	b.n	800b730 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70a:	f003 0301 	and.w	r3, r3, #1
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d004      	beq.n	800b71c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2201      	movs	r2, #1
 800b716:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b718:	2301      	movs	r3, #1
 800b71a:	e009      	b.n	800b730 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2240      	movs	r2, #64	; 0x40
 800b72c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b72e:	2300      	movs	r3, #0
  
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bc90      	pop	{r4, r7}
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	20000000 	.word	0x20000000
 800b740:	10624dd3 	.word	0x10624dd3

0800b744 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b744:	b084      	sub	sp, #16
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
 800b74e:	f107 001c 	add.w	r0, r7, #28
 800b752:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d122      	bne.n	800b7a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b760:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b786:	2b01      	cmp	r3, #1
 800b788:	d105      	bne.n	800b796 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	68db      	ldr	r3, [r3, #12]
 800b78e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f94a 	bl	800ba30 <USB_CoreReset>
 800b79c:	4603      	mov	r3, r0
 800b79e:	73fb      	strb	r3, [r7, #15]
 800b7a0:	e01a      	b.n	800b7d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f93e 	bl	800ba30 <USB_CoreReset>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d106      	bne.n	800b7cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	639a      	str	r2, [r3, #56]	; 0x38
 800b7ca:	e005      	b.n	800b7d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d10b      	bne.n	800b7f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f043 0206 	orr.w	r2, r3, #6
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	f043 0220 	orr.w	r2, r3, #32
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b802:	b004      	add	sp, #16
 800b804:	4770      	bx	lr

0800b806 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b806:	b480      	push	{r7}
 800b808:	b083      	sub	sp, #12
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f043 0201 	orr.w	r2, r3, #1
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b81a:	2300      	movs	r3, #0
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	370c      	adds	r7, #12
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	f023 0201 	bic.w	r2, r3, #1
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b082      	sub	sp, #8
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
 800b852:	460b      	mov	r3, r1
 800b854:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b862:	78fb      	ldrb	r3, [r7, #3]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d106      	bne.n	800b876 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	60da      	str	r2, [r3, #12]
 800b874:	e00b      	b.n	800b88e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d106      	bne.n	800b88a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	60da      	str	r2, [r3, #12]
 800b888:	e001      	b.n	800b88e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e003      	b.n	800b896 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b88e:	2032      	movs	r0, #50	; 0x32
 800b890:	f7f7 fe6c 	bl	800356c <HAL_Delay>

  return HAL_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	019b      	lsls	r3, r3, #6
 800b8b2:	f043 0220 	orr.w	r2, r3, #32
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	60fb      	str	r3, [r7, #12]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	4a09      	ldr	r2, [pc, #36]	; (800b8e8 <USB_FlushTxFifo+0x48>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d901      	bls.n	800b8cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e006      	b.n	800b8da <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	691b      	ldr	r3, [r3, #16]
 800b8d0:	f003 0320 	and.w	r3, r3, #32
 800b8d4:	2b20      	cmp	r3, #32
 800b8d6:	d0f0      	beq.n	800b8ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	00030d40 	.word	0x00030d40

0800b8ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3301      	adds	r3, #1
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	4a09      	ldr	r2, [pc, #36]	; (800b92c <USB_FlushRxFifo+0x40>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d901      	bls.n	800b910 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e006      	b.n	800b91e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	f003 0310 	and.w	r3, r3, #16
 800b918:	2b10      	cmp	r3, #16
 800b91a:	d0f0      	beq.n	800b8fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	00030d40 	.word	0x00030d40

0800b930 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b930:	b480      	push	{r7}
 800b932:	b089      	sub	sp, #36	; 0x24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	4611      	mov	r1, r2
 800b93c:	461a      	mov	r2, r3
 800b93e:	460b      	mov	r3, r1
 800b940:	71fb      	strb	r3, [r7, #7]
 800b942:	4613      	mov	r3, r2
 800b944:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b94e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b952:	2b00      	cmp	r3, #0
 800b954:	d11a      	bne.n	800b98c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b956:	88bb      	ldrh	r3, [r7, #4]
 800b958:	3303      	adds	r3, #3
 800b95a:	089b      	lsrs	r3, r3, #2
 800b95c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b95e:	2300      	movs	r3, #0
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	e00f      	b.n	800b984 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	031a      	lsls	r2, r3, #12
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b970:	461a      	mov	r2, r3
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	3304      	adds	r3, #4
 800b97c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	3301      	adds	r3, #1
 800b982:	61bb      	str	r3, [r7, #24]
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d3eb      	bcc.n	800b964 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3724      	adds	r7, #36	; 0x24
 800b992:	46bd      	mov	sp, r7
 800b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b089      	sub	sp, #36	; 0x24
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	60f8      	str	r0, [r7, #12]
 800b9a2:	60b9      	str	r1, [r7, #8]
 800b9a4:	4613      	mov	r3, r2
 800b9a6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b9b0:	88fb      	ldrh	r3, [r7, #6]
 800b9b2:	3303      	adds	r3, #3
 800b9b4:	089b      	lsrs	r3, r3, #2
 800b9b6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	61bb      	str	r3, [r7, #24]
 800b9bc:	e00b      	b.n	800b9d6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b9c4:	681a      	ldr	r2, [r3, #0]
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	61bb      	str	r3, [r7, #24]
 800b9d6:	69ba      	ldr	r2, [r7, #24]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d3ef      	bcc.n	800b9be <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b9de:	69fb      	ldr	r3, [r7, #28]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3724      	adds	r7, #36	; 0x24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b085      	sub	sp, #20
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	695b      	ldr	r3, [r3, #20]
 800b9f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	699b      	ldr	r3, [r3, #24]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	4013      	ands	r3, r2
 800ba02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ba04:	68fb      	ldr	r3, [r7, #12]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b083      	sub	sp, #12
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	f003 0301 	and.w	r3, r3, #1
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
	...

0800ba30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b085      	sub	sp, #20
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	60fb      	str	r3, [r7, #12]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	4a13      	ldr	r2, [pc, #76]	; (800ba94 <USB_CoreReset+0x64>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d901      	bls.n	800ba4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ba4a:	2303      	movs	r3, #3
 800ba4c:	e01b      	b.n	800ba86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	daf2      	bge.n	800ba3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ba56:	2300      	movs	r3, #0
 800ba58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	f043 0201 	orr.w	r2, r3, #1
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4a09      	ldr	r2, [pc, #36]	; (800ba94 <USB_CoreReset+0x64>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d901      	bls.n	800ba78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ba74:	2303      	movs	r3, #3
 800ba76:	e006      	b.n	800ba86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	691b      	ldr	r3, [r3, #16]
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d0f0      	beq.n	800ba66 <USB_CoreReset+0x36>

  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	00030d40 	.word	0x00030d40

0800ba98 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba98:	b084      	sub	sp, #16
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	f107 001c 	add.w	r0, r7, #28
 800baa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bab4:	461a      	mov	r2, r3
 800bab6:	2300      	movs	r3, #0
 800bab8:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800babe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bada:	2b00      	cmp	r3, #0
 800badc:	d018      	beq.n	800bb10 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d10a      	bne.n	800bafa <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800baf2:	f043 0304 	orr.w	r3, r3, #4
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	e014      	b.n	800bb24 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb08:	f023 0304 	bic.w	r3, r3, #4
 800bb0c:	6013      	str	r3, [r2, #0]
 800bb0e:	e009      	b.n	800bb24 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bb1e:	f023 0304 	bic.w	r3, r3, #4
 800bb22:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800bb24:	2110      	movs	r1, #16
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff feba 	bl	800b8a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7ff fedd 	bl	800b8ec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bb32:	2300      	movs	r3, #0
 800bb34:	60fb      	str	r3, [r7, #12]
 800bb36:	e015      	b.n	800bb64 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	015a      	lsls	r2, r3, #5
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	4413      	add	r3, r2
 800bb40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb44:	461a      	mov	r2, r3
 800bb46:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb58:	461a      	mov	r2, r3
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	3301      	adds	r3, #1
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	68fa      	ldr	r2, [r7, #12]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d3e5      	bcc.n	800bb38 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800bb6c:	2101      	movs	r1, #1
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 f8ac 	bl	800bccc <USB_DriveVbus>

  HAL_Delay(200U);
 800bb74:	20c8      	movs	r0, #200	; 0xc8
 800bb76:	f7f7 fcf9 	bl	800356c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f04f 32ff 	mov.w	r2, #4294967295
 800bb86:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00b      	beq.n	800bbac <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb9a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a14      	ldr	r2, [pc, #80]	; (800bbf0 <USB_HostInit+0x158>)
 800bba0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	4a13      	ldr	r2, [pc, #76]	; (800bbf4 <USB_HostInit+0x15c>)
 800bba6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bbaa:	e009      	b.n	800bbc0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2280      	movs	r2, #128	; 0x80
 800bbb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a10      	ldr	r2, [pc, #64]	; (800bbf8 <USB_HostInit+0x160>)
 800bbb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a10      	ldr	r2, [pc, #64]	; (800bbfc <USB_HostInit+0x164>)
 800bbbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d105      	bne.n	800bbd2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	f043 0210 	orr.w	r2, r3, #16
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	699a      	ldr	r2, [r3, #24]
 800bbd6:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <USB_HostInit+0x168>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bbea:	b004      	add	sp, #16
 800bbec:	4770      	bx	lr
 800bbee:	bf00      	nop
 800bbf0:	01000200 	.word	0x01000200
 800bbf4:	00e00300 	.word	0x00e00300
 800bbf8:	00600080 	.word	0x00600080
 800bbfc:	004000e0 	.word	0x004000e0
 800bc00:	a3200008 	.word	0xa3200008

0800bc04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bc22:	f023 0303 	bic.w	r3, r3, #3
 800bc26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	f003 0303 	and.w	r3, r3, #3
 800bc36:	68f9      	ldr	r1, [r7, #12]
 800bc38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bc40:	78fb      	ldrb	r3, [r7, #3]
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d107      	bne.n	800bc56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bc52:	6053      	str	r3, [r2, #4]
 800bc54:	e009      	b.n	800bc6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bc56:	78fb      	ldrb	r3, [r7, #3]
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d106      	bne.n	800bc6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc62:	461a      	mov	r2, r3
 800bc64:	f241 7370 	movw	r3, #6000	; 0x1770
 800bc68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3714      	adds	r7, #20
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bc84:	2300      	movs	r3, #0
 800bc86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bc98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bca6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bca8:	2064      	movs	r0, #100	; 0x64
 800bcaa:	f7f7 fc5f 	bl	800356c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bcb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bcbc:	200a      	movs	r0, #10
 800bcbe:	f7f7 fc55 	bl	800356c <HAL_Delay>

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bcf0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d109      	bne.n	800bd10 <USB_DriveVbus+0x44>
 800bcfc:	78fb      	ldrb	r3, [r7, #3]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d106      	bne.n	800bd10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bd0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bd0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1a:	d109      	bne.n	800bd30 <USB_DriveVbus+0x64>
 800bd1c:	78fb      	ldrb	r3, [r7, #3]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d106      	bne.n	800bd30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bd2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr

0800bd3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bd3e:	b480      	push	{r7}
 800bd40:	b085      	sub	sp, #20
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	0c5b      	lsrs	r3, r3, #17
 800bd5c:	f003 0303 	and.w	r3, r3, #3
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	b29b      	uxth	r3, r3
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
	...

0800bd90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b087      	sub	sp, #28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	4603      	mov	r3, r0
 800bda0:	70fb      	strb	r3, [r7, #3]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70bb      	strb	r3, [r7, #2]
 800bda6:	4613      	mov	r3, r2
 800bda8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bdb2:	78fb      	ldrb	r3, [r7, #3]
 800bdb4:	015a      	lsls	r2, r3, #5
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	4413      	add	r3, r2
 800bdba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bdc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d87e      	bhi.n	800becc <USB_HC_Init+0x13c>
 800bdce:	a201      	add	r2, pc, #4	; (adr r2, 800bdd4 <USB_HC_Init+0x44>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800be8f 	.word	0x0800be8f
 800bddc:	0800bde5 	.word	0x0800bde5
 800bde0:	0800be51 	.word	0x0800be51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bde4:	78fb      	ldrb	r3, [r7, #3]
 800bde6:	015a      	lsls	r2, r3, #5
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	4413      	add	r3, r2
 800bdec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	f240 439d 	movw	r3, #1181	; 0x49d
 800bdf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bdf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	da10      	bge.n	800be22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800be00:	78fb      	ldrb	r3, [r7, #3]
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	4413      	add	r3, r2
 800be08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	78fa      	ldrb	r2, [r7, #3]
 800be10:	0151      	lsls	r1, r2, #5
 800be12:	68ba      	ldr	r2, [r7, #8]
 800be14:	440a      	add	r2, r1
 800be16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be1e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800be20:	e057      	b.n	800bed2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d051      	beq.n	800bed2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	015a      	lsls	r2, r3, #5
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	4413      	add	r3, r2
 800be36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	78fa      	ldrb	r2, [r7, #3]
 800be3e:	0151      	lsls	r1, r2, #5
 800be40:	68ba      	ldr	r2, [r7, #8]
 800be42:	440a      	add	r2, r1
 800be44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800be4c:	60d3      	str	r3, [r2, #12]
      break;
 800be4e:	e040      	b.n	800bed2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800be50:	78fb      	ldrb	r3, [r7, #3]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	4413      	add	r3, r2
 800be58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be5c:	461a      	mov	r2, r3
 800be5e:	f240 639d 	movw	r3, #1693	; 0x69d
 800be62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800be64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	da34      	bge.n	800bed6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800be6c:	78fb      	ldrb	r3, [r7, #3]
 800be6e:	015a      	lsls	r2, r3, #5
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	4413      	add	r3, r2
 800be74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	78fa      	ldrb	r2, [r7, #3]
 800be7c:	0151      	lsls	r1, r2, #5
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	440a      	add	r2, r1
 800be82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800be8c:	e023      	b.n	800bed6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800be8e:	78fb      	ldrb	r3, [r7, #3]
 800be90:	015a      	lsls	r2, r3, #5
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	4413      	add	r3, r2
 800be96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be9a:	461a      	mov	r2, r3
 800be9c:	f240 2325 	movw	r3, #549	; 0x225
 800bea0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bea2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	da17      	bge.n	800beda <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800beaa:	78fb      	ldrb	r3, [r7, #3]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	78fa      	ldrb	r2, [r7, #3]
 800beba:	0151      	lsls	r1, r2, #5
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	440a      	add	r2, r1
 800bec0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bec4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bec8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800beca:	e006      	b.n	800beda <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	75fb      	strb	r3, [r7, #23]
      break;
 800bed0:	e004      	b.n	800bedc <USB_HC_Init+0x14c>
      break;
 800bed2:	bf00      	nop
 800bed4:	e002      	b.n	800bedc <USB_HC_Init+0x14c>
      break;
 800bed6:	bf00      	nop
 800bed8:	e000      	b.n	800bedc <USB_HC_Init+0x14c>
      break;
 800beda:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bee2:	699a      	ldr	r2, [r3, #24]
 800bee4:	78fb      	ldrb	r3, [r7, #3]
 800bee6:	f003 030f 	and.w	r3, r3, #15
 800beea:	2101      	movs	r1, #1
 800beec:	fa01 f303 	lsl.w	r3, r1, r3
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bef6:	4313      	orrs	r3, r2
 800bef8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	699b      	ldr	r3, [r3, #24]
 800befe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bf06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	da03      	bge.n	800bf16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bf0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf12:	613b      	str	r3, [r7, #16]
 800bf14:	e001      	b.n	800bf1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bf16:	2300      	movs	r3, #0
 800bf18:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bf1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d103      	bne.n	800bf2a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bf22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bf26:	60fb      	str	r3, [r7, #12]
 800bf28:	e001      	b.n	800bf2e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bf2e:	787b      	ldrb	r3, [r7, #1]
 800bf30:	059b      	lsls	r3, r3, #22
 800bf32:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bf36:	78bb      	ldrb	r3, [r7, #2]
 800bf38:	02db      	lsls	r3, r3, #11
 800bf3a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bf3e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bf40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf44:	049b      	lsls	r3, r3, #18
 800bf46:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bf4a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bf4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bf4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bf52:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bf54:	693b      	ldr	r3, [r7, #16]
 800bf56:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	0159      	lsls	r1, r3, #5
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	440b      	add	r3, r1
 800bf60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf64:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bf6a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bf6c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bf70:	2b03      	cmp	r3, #3
 800bf72:	d10f      	bne.n	800bf94 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bf74:	78fb      	ldrb	r3, [r7, #3]
 800bf76:	015a      	lsls	r2, r3, #5
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	78fa      	ldrb	r2, [r7, #3]
 800bf84:	0151      	lsls	r1, r2, #5
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	440a      	add	r2, r1
 800bf8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bf8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf92:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	371c      	adds	r7, #28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
 800bfa2:	bf00      	nop

0800bfa4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08c      	sub	sp, #48	; 0x30
 800bfa8:	af02      	add	r7, sp, #8
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	785b      	ldrb	r3, [r3, #1]
 800bfba:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bfbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bfc0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d028      	beq.n	800c020 <USB_HC_StartXfer+0x7c>
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	791b      	ldrb	r3, [r3, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d124      	bne.n	800c020 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bfd6:	79fb      	ldrb	r3, [r7, #7]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10b      	bne.n	800bff4 <USB_HC_StartXfer+0x50>
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	795b      	ldrb	r3, [r3, #5]
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d107      	bne.n	800bff4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 fa30 	bl	800c450 <USB_DoPing>
      return HAL_OK;
 800bff0:	2300      	movs	r3, #0
 800bff2:	e114      	b.n	800c21e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800bff4:	79fb      	ldrb	r3, [r7, #7]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d112      	bne.n	800c020 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	015a      	lsls	r2, r3, #5
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	4413      	add	r3, r2
 800c002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c006:	68db      	ldr	r3, [r3, #12]
 800c008:	69fa      	ldr	r2, [r7, #28]
 800c00a:	0151      	lsls	r1, r2, #5
 800c00c:	6a3a      	ldr	r2, [r7, #32]
 800c00e:	440a      	add	r2, r1
 800c010:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c014:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800c018:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	2200      	movs	r2, #0
 800c01e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d018      	beq.n	800c05a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	8912      	ldrh	r2, [r2, #8]
 800c030:	4413      	add	r3, r2
 800c032:	3b01      	subs	r3, #1
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	8912      	ldrh	r2, [r2, #8]
 800c038:	fbb3 f3f2 	udiv	r3, r3, r2
 800c03c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c03e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c040:	8b7b      	ldrh	r3, [r7, #26]
 800c042:	429a      	cmp	r2, r3
 800c044:	d90b      	bls.n	800c05e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800c046:	8b7b      	ldrh	r3, [r7, #26]
 800c048:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c04a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	8912      	ldrh	r2, [r2, #8]
 800c050:	fb02 f203 	mul.w	r2, r2, r3
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	611a      	str	r2, [r3, #16]
 800c058:	e001      	b.n	800c05e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800c05a:	2301      	movs	r3, #1
 800c05c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	78db      	ldrb	r3, [r3, #3]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d006      	beq.n	800c074 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c066:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c068:	68ba      	ldr	r2, [r7, #8]
 800c06a:	8912      	ldrh	r2, [r2, #8]
 800c06c:	fb02 f203 	mul.w	r2, r2, r3
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c07c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c07e:	04d9      	lsls	r1, r3, #19
 800c080:	4b69      	ldr	r3, [pc, #420]	; (800c228 <USB_HC_StartXfer+0x284>)
 800c082:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c084:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	7a9b      	ldrb	r3, [r3, #10]
 800c08a:	075b      	lsls	r3, r3, #29
 800c08c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c090:	69f9      	ldr	r1, [r7, #28]
 800c092:	0148      	lsls	r0, r1, #5
 800c094:	6a39      	ldr	r1, [r7, #32]
 800c096:	4401      	add	r1, r0
 800c098:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c09c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c09e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c0a0:	79fb      	ldrb	r3, [r7, #7]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d009      	beq.n	800c0ba <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	68d9      	ldr	r1, [r3, #12]
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	015a      	lsls	r2, r3, #5
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0b6:	460a      	mov	r2, r1
 800c0b8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0c0:	689b      	ldr	r3, [r3, #8]
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	bf0c      	ite	eq
 800c0ca:	2301      	moveq	r3, #1
 800c0cc:	2300      	movne	r3, #0
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	015a      	lsls	r2, r3, #5
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	4413      	add	r3, r2
 800c0da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	69fa      	ldr	r2, [r7, #28]
 800c0e2:	0151      	lsls	r1, r2, #5
 800c0e4:	6a3a      	ldr	r2, [r7, #32]
 800c0e6:	440a      	add	r2, r1
 800c0e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c0f0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	015a      	lsls	r2, r3, #5
 800c0f6:	6a3b      	ldr	r3, [r7, #32]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	7e7b      	ldrb	r3, [r7, #25]
 800c102:	075b      	lsls	r3, r3, #29
 800c104:	69f9      	ldr	r1, [r7, #28]
 800c106:	0148      	lsls	r0, r1, #5
 800c108:	6a39      	ldr	r1, [r7, #32]
 800c10a:	4401      	add	r1, r0
 800c10c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c110:	4313      	orrs	r3, r2
 800c112:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	6a3b      	ldr	r3, [r7, #32]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a42      	ldr	r2, [pc, #264]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c124:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c126:	4b41      	ldr	r3, [pc, #260]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c12e:	4a3f      	ldr	r2, [pc, #252]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c130:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	78db      	ldrb	r3, [r3, #3]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d006      	beq.n	800c148 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c13a:	4b3c      	ldr	r3, [pc, #240]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c142:	4a3a      	ldr	r2, [pc, #232]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	e005      	b.n	800c154 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c148:	4b38      	ldr	r3, [pc, #224]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c150:	4a36      	ldr	r2, [pc, #216]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c152:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c154:	4b35      	ldr	r3, [pc, #212]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c15c:	4a33      	ldr	r2, [pc, #204]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c15e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	4413      	add	r3, r2
 800c168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c16c:	461a      	mov	r2, r3
 800c16e:	4b2f      	ldr	r3, [pc, #188]	; (800c22c <USB_HC_StartXfer+0x288>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c17a:	2300      	movs	r3, #0
 800c17c:	e04f      	b.n	800c21e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	78db      	ldrb	r3, [r3, #3]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d14a      	bne.n	800c21c <USB_HC_StartXfer+0x278>
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	691b      	ldr	r3, [r3, #16]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d046      	beq.n	800c21c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	79db      	ldrb	r3, [r3, #7]
 800c192:	2b03      	cmp	r3, #3
 800c194:	d830      	bhi.n	800c1f8 <USB_HC_StartXfer+0x254>
 800c196:	a201      	add	r2, pc, #4	; (adr r2, 800c19c <USB_HC_StartXfer+0x1f8>)
 800c198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c19c:	0800c1ad 	.word	0x0800c1ad
 800c1a0:	0800c1d1 	.word	0x0800c1d1
 800c1a4:	0800c1ad 	.word	0x0800c1ad
 800c1a8:	0800c1d1 	.word	0x0800c1d1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	691b      	ldr	r3, [r3, #16]
 800c1b0:	3303      	adds	r3, #3
 800c1b2:	089b      	lsrs	r3, r3, #2
 800c1b4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c1b6:	8afa      	ldrh	r2, [r7, #22]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d91c      	bls.n	800c1fc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	699b      	ldr	r3, [r3, #24]
 800c1c6:	f043 0220 	orr.w	r2, r3, #32
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	619a      	str	r2, [r3, #24]
        }
        break;
 800c1ce:	e015      	b.n	800c1fc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	3303      	adds	r3, #3
 800c1d6:	089b      	lsrs	r3, r3, #2
 800c1d8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c1da:	8afa      	ldrh	r2, [r7, #22]
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d90a      	bls.n	800c200 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	699b      	ldr	r3, [r3, #24]
 800c1ee:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	619a      	str	r2, [r3, #24]
        }
        break;
 800c1f6:	e003      	b.n	800c200 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c1f8:	bf00      	nop
 800c1fa:	e002      	b.n	800c202 <USB_HC_StartXfer+0x25e>
        break;
 800c1fc:	bf00      	nop
 800c1fe:	e000      	b.n	800c202 <USB_HC_StartXfer+0x25e>
        break;
 800c200:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	68d9      	ldr	r1, [r3, #12]
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	785a      	ldrb	r2, [r3, #1]
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	691b      	ldr	r3, [r3, #16]
 800c20e:	b298      	uxth	r0, r3
 800c210:	2300      	movs	r3, #0
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	4603      	mov	r3, r0
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f7ff fb8a 	bl	800b930 <USB_WritePacket>
  }

  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3728      	adds	r7, #40	; 0x28
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	1ff80000 	.word	0x1ff80000
 800c22c:	20000158 	.word	0x20000158

0800c230 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c230:	b480      	push	{r7}
 800c232:	b085      	sub	sp, #20
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c242:	695b      	ldr	r3, [r3, #20]
 800c244:	b29b      	uxth	r3, r3
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr

0800c252 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c252:	b480      	push	{r7}
 800c254:	b087      	sub	sp, #28
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	460b      	mov	r3, r1
 800c25c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c262:	78fb      	ldrb	r3, [r7, #3]
 800c264:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c266:	2300      	movs	r3, #0
 800c268:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	015a      	lsls	r2, r3, #5
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	4413      	add	r3, r2
 800c272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	0c9b      	lsrs	r3, r3, #18
 800c27a:	f003 0303 	and.w	r3, r3, #3
 800c27e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <USB_HC_Halt+0x3a>
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d16c      	bne.n	800c366 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	015a      	lsls	r2, r3, #5
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	4413      	add	r3, r2
 800c294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	0151      	lsls	r1, r2, #5
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	440a      	add	r2, r1
 800c2a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2aa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d143      	bne.n	800c340 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	015a      	lsls	r2, r3, #5
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	4413      	add	r3, r2
 800c2c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	0151      	lsls	r1, r2, #5
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	440a      	add	r2, r1
 800c2ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2d6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68fa      	ldr	r2, [r7, #12]
 800c2e8:	0151      	lsls	r1, r2, #5
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	440a      	add	r2, r1
 800c2ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	015a      	lsls	r2, r3, #5
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	4413      	add	r3, r2
 800c300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	0151      	lsls	r1, r2, #5
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	440a      	add	r2, r1
 800c30e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c312:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c316:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	3301      	adds	r3, #1
 800c31c:	617b      	str	r3, [r7, #20]
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c324:	d81d      	bhi.n	800c362 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	015a      	lsls	r2, r3, #5
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	4413      	add	r3, r2
 800c32e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c33c:	d0ec      	beq.n	800c318 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c33e:	e080      	b.n	800c442 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	015a      	lsls	r2, r3, #5
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	4413      	add	r3, r2
 800c348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	68fa      	ldr	r2, [r7, #12]
 800c350:	0151      	lsls	r1, r2, #5
 800c352:	693a      	ldr	r2, [r7, #16]
 800c354:	440a      	add	r2, r1
 800c356:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c35a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c35e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c360:	e06f      	b.n	800c442 <USB_HC_Halt+0x1f0>
          break;
 800c362:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c364:	e06d      	b.n	800c442 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	015a      	lsls	r2, r3, #5
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	4413      	add	r3, r2
 800c36e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	0151      	lsls	r1, r2, #5
 800c378:	693a      	ldr	r2, [r7, #16]
 800c37a:	440a      	add	r2, r1
 800c37c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c384:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c38c:	691b      	ldr	r3, [r3, #16]
 800c38e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c392:	2b00      	cmp	r3, #0
 800c394:	d143      	bne.n	800c41e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	015a      	lsls	r2, r3, #5
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	4413      	add	r3, r2
 800c39e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	0151      	lsls	r1, r2, #5
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	440a      	add	r2, r1
 800c3ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3b4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	0151      	lsls	r1, r2, #5
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	440a      	add	r2, r1
 800c3cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	015a      	lsls	r2, r3, #5
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	4413      	add	r3, r2
 800c3de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	0151      	lsls	r1, r2, #5
 800c3e8:	693a      	ldr	r2, [r7, #16]
 800c3ea:	440a      	add	r2, r1
 800c3ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3f4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	617b      	str	r3, [r7, #20]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c402:	d81d      	bhi.n	800c440 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c41a:	d0ec      	beq.n	800c3f6 <USB_HC_Halt+0x1a4>
 800c41c:	e011      	b.n	800c442 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	015a      	lsls	r2, r3, #5
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	4413      	add	r3, r2
 800c426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	0151      	lsls	r1, r2, #5
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	440a      	add	r2, r1
 800c434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c43c:	6013      	str	r3, [r2, #0]
 800c43e:	e000      	b.n	800c442 <USB_HC_Halt+0x1f0>
          break;
 800c440:	bf00      	nop
    }
  }

  return HAL_OK;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	371c      	adds	r7, #28
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c460:	78fb      	ldrb	r3, [r7, #3]
 800c462:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c464:	2301      	movs	r3, #1
 800c466:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	04da      	lsls	r2, r3, #19
 800c46c:	4b15      	ldr	r3, [pc, #84]	; (800c4c4 <USB_DoPing+0x74>)
 800c46e:	4013      	ands	r3, r2
 800c470:	693a      	ldr	r2, [r7, #16]
 800c472:	0151      	lsls	r1, r2, #5
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	440a      	add	r2, r1
 800c478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c47c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c480:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c482:	693b      	ldr	r3, [r7, #16]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c498:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4a0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	371c      	adds	r7, #28
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	1ff80000 	.word	0x1ff80000

0800c4c8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b086      	sub	sp, #24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f7ff f9a5 	bl	800b828 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c4de:	2110      	movs	r1, #16
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f7ff f9dd 	bl	800b8a0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f7ff fa00 	bl	800b8ec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	613b      	str	r3, [r7, #16]
 800c4f0:	e01f      	b.n	800c532 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	015a      	lsls	r2, r3, #5
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c508:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c510:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c518:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	4413      	add	r3, r2
 800c522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c526:	461a      	mov	r2, r3
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	3301      	adds	r3, #1
 800c530:	613b      	str	r3, [r7, #16]
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b0f      	cmp	r3, #15
 800c536:	d9dc      	bls.n	800c4f2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c538:	2300      	movs	r3, #0
 800c53a:	613b      	str	r3, [r7, #16]
 800c53c:	e034      	b.n	800c5a8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4413      	add	r3, r2
 800c546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c554:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c55c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c564:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c572:	461a      	mov	r2, r3
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	3301      	adds	r3, #1
 800c57c:	617b      	str	r3, [r7, #20]
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c584:	d80c      	bhi.n	800c5a0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	015a      	lsls	r2, r3, #5
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	4413      	add	r3, r2
 800c58e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c59c:	d0ec      	beq.n	800c578 <USB_StopHost+0xb0>
 800c59e:	e000      	b.n	800c5a2 <USB_StopHost+0xda>
        break;
 800c5a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	613b      	str	r3, [r7, #16]
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2b0f      	cmp	r3, #15
 800c5ac:	d9c7      	bls.n	800c53e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f04f 32ff 	mov.w	r2, #4294967295
 800c5c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f7ff f91e 	bl	800b806 <USB_EnableGlobalInt>

  return HAL_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3718      	adds	r7, #24
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c5d4:	b590      	push	{r4, r7, lr}
 800c5d6:	b089      	sub	sp, #36	; 0x24
 800c5d8:	af04      	add	r7, sp, #16
 800c5da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c5dc:	2301      	movs	r3, #1
 800c5de:	2202      	movs	r2, #2
 800c5e0:	2102      	movs	r1, #2
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fcb4 	bl	800cf50 <USBH_FindInterface>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c5ec:	7bfb      	ldrb	r3, [r7, #15]
 800c5ee:	2bff      	cmp	r3, #255	; 0xff
 800c5f0:	d002      	beq.n	800c5f8 <USBH_CDC_InterfaceInit+0x24>
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	d901      	bls.n	800c5fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c5f8:	2302      	movs	r3, #2
 800c5fa:	e13d      	b.n	800c878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c5fc:	7bfb      	ldrb	r3, [r7, #15]
 800c5fe:	4619      	mov	r1, r3
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 fc89 	bl	800cf18 <USBH_SelectInterface>
 800c606:	4603      	mov	r3, r0
 800c608:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c60a:	7bbb      	ldrb	r3, [r7, #14]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d001      	beq.n	800c614 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c610:	2302      	movs	r3, #2
 800c612:	e131      	b.n	800c878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c61a:	2050      	movs	r0, #80	; 0x50
 800c61c:	f005 fbca 	bl	8011db4 <malloc>
 800c620:	4603      	mov	r3, r0
 800c622:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c62a:	69db      	ldr	r3, [r3, #28]
 800c62c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c634:	2302      	movs	r3, #2
 800c636:	e11f      	b.n	800c878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c638:	2250      	movs	r2, #80	; 0x50
 800c63a:	2100      	movs	r1, #0
 800c63c:	68b8      	ldr	r0, [r7, #8]
 800c63e:	f005 fbd4 	bl	8011dea <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c642:	7bfb      	ldrb	r3, [r7, #15]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	211a      	movs	r1, #26
 800c648:	fb01 f303 	mul.w	r3, r1, r3
 800c64c:	4413      	add	r3, r2
 800c64e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	b25b      	sxtb	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	da15      	bge.n	800c686 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c65a:	7bfb      	ldrb	r3, [r7, #15]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	211a      	movs	r1, #26
 800c660:	fb01 f303 	mul.w	r3, r1, r3
 800c664:	4413      	add	r3, r2
 800c666:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c66a:	781a      	ldrb	r2, [r3, #0]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c670:	7bfb      	ldrb	r3, [r7, #15]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	211a      	movs	r1, #26
 800c676:	fb01 f303 	mul.w	r3, r1, r3
 800c67a:	4413      	add	r3, r2
 800c67c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c680:	881a      	ldrh	r2, [r3, #0]
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	785b      	ldrb	r3, [r3, #1]
 800c68a:	4619      	mov	r1, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f002 f890 	bl	800e7b2 <USBH_AllocPipe>
 800c692:	4603      	mov	r3, r0
 800c694:	461a      	mov	r2, r3
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	7819      	ldrb	r1, [r3, #0]
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	7858      	ldrb	r0, [r3, #1]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	8952      	ldrh	r2, [r2, #10]
 800c6b2:	9202      	str	r2, [sp, #8]
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	9201      	str	r2, [sp, #4]
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	4623      	mov	r3, r4
 800c6bc:	4602      	mov	r2, r0
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f002 f848 	bl	800e754 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f005 fac1 	bl	8011c54 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	210a      	movs	r1, #10
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fc39 	bl	800cf50 <USBH_FindInterface>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c6e2:	7bfb      	ldrb	r3, [r7, #15]
 800c6e4:	2bff      	cmp	r3, #255	; 0xff
 800c6e6:	d002      	beq.n	800c6ee <USBH_CDC_InterfaceInit+0x11a>
 800c6e8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d901      	bls.n	800c6f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c6ee:	2302      	movs	r3, #2
 800c6f0:	e0c2      	b.n	800c878 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c6f2:	7bfb      	ldrb	r3, [r7, #15]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	211a      	movs	r1, #26
 800c6f8:	fb01 f303 	mul.w	r3, r1, r3
 800c6fc:	4413      	add	r3, r2
 800c6fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	b25b      	sxtb	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	da16      	bge.n	800c738 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	211a      	movs	r1, #26
 800c710:	fb01 f303 	mul.w	r3, r1, r3
 800c714:	4413      	add	r3, r2
 800c716:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c71a:	781a      	ldrb	r2, [r3, #0]
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c720:	7bfb      	ldrb	r3, [r7, #15]
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	211a      	movs	r1, #26
 800c726:	fb01 f303 	mul.w	r3, r1, r3
 800c72a:	4413      	add	r3, r2
 800c72c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c730:	881a      	ldrh	r2, [r3, #0]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	835a      	strh	r2, [r3, #26]
 800c736:	e015      	b.n	800c764 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c738:	7bfb      	ldrb	r3, [r7, #15]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	211a      	movs	r1, #26
 800c73e:	fb01 f303 	mul.w	r3, r1, r3
 800c742:	4413      	add	r3, r2
 800c744:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c748:	781a      	ldrb	r2, [r3, #0]
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c74e:	7bfb      	ldrb	r3, [r7, #15]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	211a      	movs	r1, #26
 800c754:	fb01 f303 	mul.w	r3, r1, r3
 800c758:	4413      	add	r3, r2
 800c75a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c75e:	881a      	ldrh	r2, [r3, #0]
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c764:	7bfb      	ldrb	r3, [r7, #15]
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	211a      	movs	r1, #26
 800c76a:	fb01 f303 	mul.w	r3, r1, r3
 800c76e:	4413      	add	r3, r2
 800c770:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	b25b      	sxtb	r3, r3
 800c778:	2b00      	cmp	r3, #0
 800c77a:	da16      	bge.n	800c7aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	211a      	movs	r1, #26
 800c782:	fb01 f303 	mul.w	r3, r1, r3
 800c786:	4413      	add	r3, r2
 800c788:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c78c:	781a      	ldrb	r2, [r3, #0]
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c792:	7bfb      	ldrb	r3, [r7, #15]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	211a      	movs	r1, #26
 800c798:	fb01 f303 	mul.w	r3, r1, r3
 800c79c:	4413      	add	r3, r2
 800c79e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c7a2:	881a      	ldrh	r2, [r3, #0]
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	835a      	strh	r2, [r3, #26]
 800c7a8:	e015      	b.n	800c7d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	211a      	movs	r1, #26
 800c7b0:	fb01 f303 	mul.w	r3, r1, r3
 800c7b4:	4413      	add	r3, r2
 800c7b6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c7ba:	781a      	ldrb	r2, [r3, #0]
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	211a      	movs	r1, #26
 800c7c6:	fb01 f303 	mul.w	r3, r1, r3
 800c7ca:	4413      	add	r3, r2
 800c7cc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c7d0:	881a      	ldrh	r2, [r3, #0]
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	7b9b      	ldrb	r3, [r3, #14]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f001 ffe8 	bl	800e7b2 <USBH_AllocPipe>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	7bdb      	ldrb	r3, [r3, #15]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f001 ffde 	bl	800e7b2 <USBH_AllocPipe>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	7b59      	ldrb	r1, [r3, #13]
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	7b98      	ldrb	r0, [r3, #14]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	8b12      	ldrh	r2, [r2, #24]
 800c816:	9202      	str	r2, [sp, #8]
 800c818:	2202      	movs	r2, #2
 800c81a:	9201      	str	r2, [sp, #4]
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	4623      	mov	r3, r4
 800c820:	4602      	mov	r2, r0
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f001 ff96 	bl	800e754 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	7b19      	ldrb	r1, [r3, #12]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	7bd8      	ldrb	r0, [r3, #15]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	8b52      	ldrh	r2, [r2, #26]
 800c840:	9202      	str	r2, [sp, #8]
 800c842:	2202      	movs	r2, #2
 800c844:	9201      	str	r2, [sp, #4]
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	4623      	mov	r3, r4
 800c84a:	4602      	mov	r2, r0
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f001 ff81 	bl	800e754 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	7b5b      	ldrb	r3, [r3, #13]
 800c85e:	2200      	movs	r2, #0
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f005 f9f6 	bl	8011c54 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	7b1b      	ldrb	r3, [r3, #12]
 800c86c:	2200      	movs	r2, #0
 800c86e:	4619      	mov	r1, r3
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f005 f9ef 	bl	8011c54 <USBH_LL_SetToggle>

  return USBH_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd90      	pop	{r4, r7, pc}

0800c880 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00e      	beq.n	800c8b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 ff76 	bl	800e792 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 ffa1 	bl	800e7f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	7b1b      	ldrb	r3, [r3, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d00e      	beq.n	800c8de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	7b1b      	ldrb	r3, [r3, #12]
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f001 ff63 	bl	800e792 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	7b1b      	ldrb	r3, [r3, #12]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f001 ff8e 	bl	800e7f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	7b5b      	ldrb	r3, [r3, #13]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d00e      	beq.n	800c904 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	7b5b      	ldrb	r3, [r3, #13]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f001 ff50 	bl	800e792 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	7b5b      	ldrb	r3, [r3, #13]
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f001 ff7b 	bl	800e7f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c90a:	69db      	ldr	r3, [r3, #28]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d00b      	beq.n	800c928 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c916:	69db      	ldr	r3, [r3, #28]
 800c918:	4618      	mov	r0, r3
 800c91a:	f005 fa53 	bl	8011dc4 <free>
    phost->pActiveClass->pData = 0U;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c924:	2200      	movs	r2, #0
 800c926:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3710      	adds	r7, #16
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c932:	b580      	push	{r7, lr}
 800c934:	b084      	sub	sp, #16
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	3340      	adds	r3, #64	; 0x40
 800c948:	4619      	mov	r1, r3
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 f8b1 	bl	800cab2 <GetLineCoding>
 800c950:	4603      	mov	r3, r0
 800c952:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c954:	7afb      	ldrb	r3, [r7, #11]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d105      	bne.n	800c966 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c960:	2102      	movs	r1, #2
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c966:	7afb      	ldrb	r3, [r7, #11]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c978:	2301      	movs	r3, #1
 800c97a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c986:	69db      	ldr	r3, [r3, #28]
 800c988:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c990:	2b04      	cmp	r3, #4
 800c992:	d877      	bhi.n	800ca84 <USBH_CDC_Process+0x114>
 800c994:	a201      	add	r2, pc, #4	; (adr r2, 800c99c <USBH_CDC_Process+0x2c>)
 800c996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99a:	bf00      	nop
 800c99c:	0800c9b1 	.word	0x0800c9b1
 800c9a0:	0800c9b7 	.word	0x0800c9b7
 800c9a4:	0800c9e7 	.word	0x0800c9e7
 800c9a8:	0800ca5b 	.word	0x0800ca5b
 800c9ac:	0800ca69 	.word	0x0800ca69
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c9b4:	e06d      	b.n	800ca92 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 f897 	bl	800caf0 <SetLineCoding>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c9c6:	7bbb      	ldrb	r3, [r7, #14]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d104      	bne.n	800c9d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	2202      	movs	r2, #2
 800c9d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c9d4:	e058      	b.n	800ca88 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c9d6:	7bbb      	ldrb	r3, [r7, #14]
 800c9d8:	2b01      	cmp	r3, #1
 800c9da:	d055      	beq.n	800ca88 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2204      	movs	r2, #4
 800c9e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800c9e4:	e050      	b.n	800ca88 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	3340      	adds	r3, #64	; 0x40
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f860 	bl	800cab2 <GetLineCoding>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c9f6:	7bbb      	ldrb	r3, [r7, #14]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d126      	bne.n	800ca4a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca0e:	791b      	ldrb	r3, [r3, #4]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d13b      	bne.n	800ca8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca1e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d133      	bne.n	800ca8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca2e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ca30:	429a      	cmp	r2, r3
 800ca32:	d12b      	bne.n	800ca8c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca3c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d124      	bne.n	800ca8c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 f984 	bl	800cd50 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ca48:	e020      	b.n	800ca8c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ca4a:	7bbb      	ldrb	r3, [r7, #14]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d01d      	beq.n	800ca8c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	2204      	movs	r2, #4
 800ca54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ca58:	e018      	b.n	800ca8c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f867 	bl	800cb2e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f8f8 	bl	800cc56 <CDC_ProcessReception>
      break;
 800ca66:	e014      	b.n	800ca92 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ca68:	2100      	movs	r1, #0
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f001 f94f 	bl	800dd0e <USBH_ClrFeature>
 800ca70:	4603      	mov	r3, r0
 800ca72:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ca74:	7bbb      	ldrb	r3, [r7, #14]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d10a      	bne.n	800ca90 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ca82:	e005      	b.n	800ca90 <USBH_CDC_Process+0x120>

    default:
      break;
 800ca84:	bf00      	nop
 800ca86:	e004      	b.n	800ca92 <USBH_CDC_Process+0x122>
      break;
 800ca88:	bf00      	nop
 800ca8a:	e002      	b.n	800ca92 <USBH_CDC_Process+0x122>
      break;
 800ca8c:	bf00      	nop
 800ca8e:	e000      	b.n	800ca92 <USBH_CDC_Process+0x122>
      break;
 800ca90:	bf00      	nop

  }

  return status;
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800caa4:	2300      	movs	r3, #0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr

0800cab2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cab2:	b580      	push	{r7, lr}
 800cab4:	b082      	sub	sp, #8
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
 800caba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	22a1      	movs	r2, #161	; 0xa1
 800cac0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2221      	movs	r2, #33	; 0x21
 800cac6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2207      	movs	r2, #7
 800cad8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	2207      	movs	r2, #7
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f001 faf4 	bl	800e0ce <USBH_CtlReq>
 800cae6:	4603      	mov	r3, r0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}

0800caf0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2221      	movs	r2, #33	; 0x21
 800cafe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2220      	movs	r2, #32
 800cb04:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2207      	movs	r2, #7
 800cb16:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	2207      	movs	r2, #7
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f001 fad5 	bl	800e0ce <USBH_CtlReq>
 800cb24:	4603      	mov	r3, r0
}
 800cb26:	4618      	mov	r0, r3
 800cb28:	3708      	adds	r7, #8
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}

0800cb2e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800cb2e:	b580      	push	{r7, lr}
 800cb30:	b086      	sub	sp, #24
 800cb32:	af02      	add	r7, sp, #8
 800cb34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb3c:	69db      	ldr	r3, [r3, #28]
 800cb3e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cb40:	2300      	movs	r3, #0
 800cb42:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d002      	beq.n	800cb54 <CDC_ProcessTransmission+0x26>
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d025      	beq.n	800cb9e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800cb52:	e07c      	b.n	800cc4e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	8b12      	ldrh	r2, [r2, #24]
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d90c      	bls.n	800cb7a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	69d9      	ldr	r1, [r3, #28]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	8b1a      	ldrh	r2, [r3, #24]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	7b58      	ldrb	r0, [r3, #13]
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	4603      	mov	r3, r0
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f001 fdab 	bl	800e6ce <USBH_BulkSendData>
 800cb78:	e00c      	b.n	800cb94 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	7b58      	ldrb	r0, [r3, #13]
 800cb88:	2301      	movs	r3, #1
 800cb8a:	9300      	str	r3, [sp, #0]
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f001 fd9d 	bl	800e6ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2202      	movs	r2, #2
 800cb98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cb9c:	e057      	b.n	800cc4e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	7b5b      	ldrb	r3, [r3, #13]
 800cba2:	4619      	mov	r1, r3
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f005 f82b 	bl	8011c00 <USBH_LL_GetURBState>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800cbae:	7afb      	ldrb	r3, [r7, #11]
 800cbb0:	2b01      	cmp	r3, #1
 800cbb2:	d136      	bne.n	800cc22 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	8b12      	ldrh	r2, [r2, #24]
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d90e      	bls.n	800cbde <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbc4:	68fa      	ldr	r2, [r7, #12]
 800cbc6:	8b12      	ldrh	r2, [r2, #24]
 800cbc8:	1a9a      	subs	r2, r3, r2
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	69db      	ldr	r3, [r3, #28]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	8b12      	ldrh	r2, [r2, #24]
 800cbd6:	441a      	add	r2, r3
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	61da      	str	r2, [r3, #28]
 800cbdc:	e002      	b.n	800cbe4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d004      	beq.n	800cbf6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800cbf4:	e006      	b.n	800cc04 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f892 	bl	800cd28 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2204      	movs	r2, #4
 800cc08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc18:	2300      	movs	r3, #0
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f001 fff8 	bl	800ec10 <osMessageQueuePut>
      break;
 800cc20:	e014      	b.n	800cc4c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800cc22:	7afb      	ldrb	r3, [r7, #11]
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	d111      	bne.n	800cc4c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2204      	movs	r2, #4
 800cc34:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cc44:	2300      	movs	r3, #0
 800cc46:	2200      	movs	r2, #0
 800cc48:	f001 ffe2 	bl	800ec10 <osMessageQueuePut>
      break;
 800cc4c:	bf00      	nop
  }
}
 800cc4e:	bf00      	nop
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b086      	sub	sp, #24
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d002      	beq.n	800cc7c <CDC_ProcessReception+0x26>
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	d00e      	beq.n	800cc98 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800cc7a:	e051      	b.n	800cd20 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	6a19      	ldr	r1, [r3, #32]
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	8b5a      	ldrh	r2, [r3, #26]
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	7b1b      	ldrb	r3, [r3, #12]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f001 fd45 	bl	800e718 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2204      	movs	r2, #4
 800cc92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cc96:	e043      	b.n	800cd20 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	7b1b      	ldrb	r3, [r3, #12]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f004 ffae 	bl	8011c00 <USBH_LL_GetURBState>
 800cca4:	4603      	mov	r3, r0
 800cca6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cca8:	7cfb      	ldrb	r3, [r7, #19]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d137      	bne.n	800cd1e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	7b1b      	ldrb	r3, [r3, #12]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f004 ff11 	bl	8011adc <USBH_LL_GetLastXferSize>
 800ccba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d016      	beq.n	800ccf4 <CDC_ProcessReception+0x9e>
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	8b5b      	ldrh	r3, [r3, #26]
 800ccca:	461a      	mov	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d910      	bls.n	800ccf4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	1ad2      	subs	r2, r2, r3
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	6a1a      	ldr	r2, [r3, #32]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	441a      	add	r2, r3
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	2203      	movs	r2, #3
 800ccee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ccf2:	e006      	b.n	800cd02 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 f81d 	bl	800cd3c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2204      	movs	r2, #4
 800cd06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cd16:	2300      	movs	r3, #0
 800cd18:	2200      	movs	r2, #0
 800cd1a:	f001 ff79 	bl	800ec10 <osMessageQueuePut>
      break;
 800cd1e:	bf00      	nop
  }
}
 800cd20:	bf00      	nop
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cd30:	bf00      	nop
 800cd32:	370c      	adds	r7, #12
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cd44:	bf00      	nop
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4e:	4770      	bx	lr

0800cd50 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cd50:	b480      	push	{r7}
 800cd52:	b083      	sub	sp, #12
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cd58:	bf00      	nop
 800cd5a:	370c      	adds	r7, #12
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d101      	bne.n	800cd7c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e044      	b.n	800ce06 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	79fa      	ldrb	r2, [r7, #7]
 800cd80:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f000 f841 	bl	800ce1c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d003      	beq.n	800cdc8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800cdc8:	2200      	movs	r2, #0
 800cdca:	2104      	movs	r1, #4
 800cdcc:	2010      	movs	r0, #16
 800cdce:	f001 fe99 	bl	800eb04 <osMessageQueueNew>
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800cdda:	4b0d      	ldr	r3, [pc, #52]	; (800ce10 <USBH_Init+0xac>)
 800cddc:	4a0d      	ldr	r2, [pc, #52]	; (800ce14 <USBH_Init+0xb0>)
 800cdde:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800cde0:	4b0b      	ldr	r3, [pc, #44]	; (800ce10 <USBH_Init+0xac>)
 800cde2:	2280      	movs	r2, #128	; 0x80
 800cde4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800cde6:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <USBH_Init+0xac>)
 800cde8:	2218      	movs	r2, #24
 800cdea:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800cdec:	4a08      	ldr	r2, [pc, #32]	; (800ce10 <USBH_Init+0xac>)
 800cdee:	68f9      	ldr	r1, [r7, #12]
 800cdf0:	4809      	ldr	r0, [pc, #36]	; (800ce18 <USBH_Init+0xb4>)
 800cdf2:	f001 fdb3 	bl	800e95c <osThreadNew>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f004 fdba 	bl	8011978 <USBH_LL_Init>

  return USBH_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	200052f4 	.word	0x200052f4
 800ce14:	08011fb8 	.word	0x08011fb8
 800ce18:	0800da85 	.word	0x0800da85

0800ce1c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ce24:	2300      	movs	r3, #0
 800ce26:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ce28:	2300      	movs	r3, #0
 800ce2a:	60fb      	str	r3, [r7, #12]
 800ce2c:	e009      	b.n	800ce42 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	33e0      	adds	r3, #224	; 0xe0
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4413      	add	r3, r2
 800ce38:	2200      	movs	r2, #0
 800ce3a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	3301      	adds	r3, #1
 800ce40:	60fb      	str	r3, [r7, #12]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2b0e      	cmp	r3, #14
 800ce46:	d9f2      	bls.n	800ce2e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ce48:	2300      	movs	r3, #0
 800ce4a:	60fb      	str	r3, [r7, #12]
 800ce4c:	e009      	b.n	800ce62 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	4413      	add	r3, r2
 800ce54:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ce58:	2200      	movs	r2, #0
 800ce5a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	3301      	adds	r3, #1
 800ce60:	60fb      	str	r3, [r7, #12]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ce68:	d3f1      	bcc.n	800ce4e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2240      	movs	r2, #64	; 0x40
 800ce8e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3714      	adds	r7, #20
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cece:	2300      	movs	r3, #0
 800ced0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d016      	beq.n	800cf06 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10e      	bne.n	800cf00 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cee8:	1c59      	adds	r1, r3, #1
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cef0:	687a      	ldr	r2, [r7, #4]
 800cef2:	33de      	adds	r3, #222	; 0xde
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	73fb      	strb	r3, [r7, #15]
 800cefe:	e004      	b.n	800cf0a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cf00:	2302      	movs	r3, #2
 800cf02:	73fb      	strb	r3, [r7, #15]
 800cf04:	e001      	b.n	800cf0a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cf06:	2302      	movs	r3, #2
 800cf08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b085      	sub	sp, #20
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cf24:	2300      	movs	r3, #0
 800cf26:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800cf2e:	78fa      	ldrb	r2, [r7, #3]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d204      	bcs.n	800cf3e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	78fa      	ldrb	r2, [r7, #3]
 800cf38:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800cf3c:	e001      	b.n	800cf42 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cf3e:	2302      	movs	r3, #2
 800cf40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	4608      	mov	r0, r1
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	4603      	mov	r3, r0
 800cf60:	70fb      	strb	r3, [r7, #3]
 800cf62:	460b      	mov	r3, r1
 800cf64:	70bb      	strb	r3, [r7, #2]
 800cf66:	4613      	mov	r3, r2
 800cf68:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cf78:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cf7a:	e025      	b.n	800cfc8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cf7c:	7dfb      	ldrb	r3, [r7, #23]
 800cf7e:	221a      	movs	r2, #26
 800cf80:	fb02 f303 	mul.w	r3, r2, r3
 800cf84:	3308      	adds	r3, #8
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4413      	add	r3, r2
 800cf8a:	3302      	adds	r3, #2
 800cf8c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	795b      	ldrb	r3, [r3, #5]
 800cf92:	78fa      	ldrb	r2, [r7, #3]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d002      	beq.n	800cf9e <USBH_FindInterface+0x4e>
 800cf98:	78fb      	ldrb	r3, [r7, #3]
 800cf9a:	2bff      	cmp	r3, #255	; 0xff
 800cf9c:	d111      	bne.n	800cfc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cfa2:	78ba      	ldrb	r2, [r7, #2]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d002      	beq.n	800cfae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cfa8:	78bb      	ldrb	r3, [r7, #2]
 800cfaa:	2bff      	cmp	r3, #255	; 0xff
 800cfac:	d109      	bne.n	800cfc2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cfb2:	787a      	ldrb	r2, [r7, #1]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d002      	beq.n	800cfbe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cfb8:	787b      	ldrb	r3, [r7, #1]
 800cfba:	2bff      	cmp	r3, #255	; 0xff
 800cfbc:	d101      	bne.n	800cfc2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cfbe:	7dfb      	ldrb	r3, [r7, #23]
 800cfc0:	e006      	b.n	800cfd0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cfc8:	7dfb      	ldrb	r3, [r7, #23]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d9d6      	bls.n	800cf7c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cfce:	23ff      	movs	r3, #255	; 0xff
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	371c      	adds	r7, #28
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f004 fd03 	bl	80119f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800cfea:	2101      	movs	r1, #1
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f004 fe1a 	bl	8011c26 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cff2:	2300      	movs	r3, #0
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af04      	add	r7, sp, #16
 800d002:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d004:	2302      	movs	r3, #2
 800d006:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d008:	2300      	movs	r3, #0
 800d00a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d012:	b2db      	uxtb	r3, r3
 800d014:	2b01      	cmp	r3, #1
 800d016:	d102      	bne.n	800d01e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2203      	movs	r2, #3
 800d01c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	b2db      	uxtb	r3, r3
 800d024:	2b0b      	cmp	r3, #11
 800d026:	f200 823c 	bhi.w	800d4a2 <USBH_Process+0x4a6>
 800d02a:	a201      	add	r2, pc, #4	; (adr r2, 800d030 <USBH_Process+0x34>)
 800d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d030:	0800d061 	.word	0x0800d061
 800d034:	0800d0af 	.word	0x0800d0af
 800d038:	0800d133 	.word	0x0800d133
 800d03c:	0800d421 	.word	0x0800d421
 800d040:	0800d4a3 	.word	0x0800d4a3
 800d044:	0800d1f3 	.word	0x0800d1f3
 800d048:	0800d3ab 	.word	0x0800d3ab
 800d04c:	0800d245 	.word	0x0800d245
 800d050:	0800d281 	.word	0x0800d281
 800d054:	0800d2bb 	.word	0x0800d2bb
 800d058:	0800d303 	.word	0x0800d303
 800d05c:	0800d409 	.word	0x0800d409
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f000 821c 	beq.w	800d4a6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d074:	20c8      	movs	r0, #200	; 0xc8
 800d076:	f004 fe20 	bl	8011cba <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f004 fd13 	bl	8011aa6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2201      	movs	r2, #1
 800d094:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f001 fdb2 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d0ac:	e1fb      	b.n	800d4a6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d107      	bne.n	800d0c8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2202      	movs	r2, #2
 800d0c4:	701a      	strb	r2, [r3, #0]
 800d0c6:	e025      	b.n	800d114 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d0ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0d2:	d914      	bls.n	800d0fe <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d0da:	3301      	adds	r3, #1
 800d0dc:	b2da      	uxtb	r2, r3
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d0ea:	2b03      	cmp	r3, #3
 800d0ec:	d903      	bls.n	800d0f6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	220d      	movs	r2, #13
 800d0f2:	701a      	strb	r2, [r3, #0]
 800d0f4:	e00e      	b.n	800d114 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	701a      	strb	r2, [r3, #0]
 800d0fc:	e00a      	b.n	800d114 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d104:	f103 020a 	add.w	r2, r3, #10
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d10e:	200a      	movs	r0, #10
 800d110:	f004 fdd3 	bl	8011cba <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	2201      	movs	r2, #1
 800d118:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d128:	2300      	movs	r3, #0
 800d12a:	2200      	movs	r2, #0
 800d12c:	f001 fd70 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      break;
 800d130:	e1c0      	b.n	800d4b4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d005      	beq.n	800d148 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d142:	2104      	movs	r1, #4
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d148:	2064      	movs	r0, #100	; 0x64
 800d14a:	f004 fdb6 	bl	8011cba <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f004 fc84 	bl	8011a5c <USBH_LL_GetSpeed>
 800d154:	4603      	mov	r3, r0
 800d156:	461a      	mov	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2205      	movs	r2, #5
 800d162:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d164:	2100      	movs	r1, #0
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f001 fb23 	bl	800e7b2 <USBH_AllocPipe>
 800d16c:	4603      	mov	r3, r0
 800d16e:	461a      	mov	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d174:	2180      	movs	r1, #128	; 0x80
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f001 fb1b 	bl	800e7b2 <USBH_AllocPipe>
 800d17c:	4603      	mov	r3, r0
 800d17e:	461a      	mov	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	7919      	ldrb	r1, [r3, #4]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d198:	b292      	uxth	r2, r2
 800d19a:	9202      	str	r2, [sp, #8]
 800d19c:	2200      	movs	r2, #0
 800d19e:	9201      	str	r2, [sp, #4]
 800d1a0:	9300      	str	r3, [sp, #0]
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2280      	movs	r2, #128	; 0x80
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f001 fad4 	bl	800e754 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	7959      	ldrb	r1, [r3, #5]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d1c0:	b292      	uxth	r2, r2
 800d1c2:	9202      	str	r2, [sp, #8]
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	9201      	str	r2, [sp, #4]
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	6878      	ldr	r0, [r7, #4]
 800d1d0:	f001 fac0 	bl	800e754 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f001 fd10 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      break;
 800d1f0:	e160      	b.n	800d4b4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 f964 	bl	800d4c0 <USBH_HandleEnum>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d1fc:	7bbb      	ldrb	r3, [r7, #14]
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	f040 8152 	bne.w	800d4aa <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d214:	2b01      	cmp	r3, #1
 800d216:	d103      	bne.n	800d220 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2208      	movs	r2, #8
 800d21c:	701a      	strb	r2, [r3, #0]
 800d21e:	e002      	b.n	800d226 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2207      	movs	r2, #7
 800d224:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2205      	movs	r2, #5
 800d22a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d23a:	2300      	movs	r3, #0
 800d23c:	2200      	movs	r2, #0
 800d23e:	f001 fce7 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d242:	e132      	b.n	800d4aa <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	f000 812f 	beq.w	800d4ae <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d256:	2101      	movs	r1, #1
 800d258:	6878      	ldr	r0, [r7, #4]
 800d25a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2208      	movs	r2, #8
 800d260:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2205      	movs	r2, #5
 800d266:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d276:	2300      	movs	r3, #0
 800d278:	2200      	movs	r2, #0
 800d27a:	f001 fcc9 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800d27e:	e116      	b.n	800d4ae <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d286:	b29b      	uxth	r3, r3
 800d288:	4619      	mov	r1, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fcf8 	bl	800dc80 <USBH_SetCfg>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d102      	bne.n	800d29c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2209      	movs	r2, #9
 800d29a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f001 fcac 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      break;
 800d2b8:	e0fc      	b.n	800d4b4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d2c0:	f003 0320 	and.w	r3, r3, #32
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00a      	beq.n	800d2de <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 fcfb 	bl	800dcc6 <USBH_SetFeature>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d106      	bne.n	800d2e4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	220a      	movs	r2, #10
 800d2da:	701a      	strb	r2, [r3, #0]
 800d2dc:	e002      	b.n	800d2e4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	220a      	movs	r2, #10
 800d2e2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f001 fc88 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      break;
 800d300:	e0d8      	b.n	800d4b4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d03f      	beq.n	800d38c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]
 800d318:	e016      	b.n	800d348 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d31a:	7bfa      	ldrb	r2, [r7, #15]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	32de      	adds	r2, #222	; 0xde
 800d320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d324:	791a      	ldrb	r2, [r3, #4]
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d108      	bne.n	800d342 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d330:	7bfa      	ldrb	r2, [r7, #15]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	32de      	adds	r2, #222	; 0xde
 800d336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d340:	e005      	b.n	800d34e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d342:	7bfb      	ldrb	r3, [r7, #15]
 800d344:	3301      	adds	r3, #1
 800d346:	73fb      	strb	r3, [r7, #15]
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d0e5      	beq.n	800d31a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d354:	2b00      	cmp	r3, #0
 800d356:	d016      	beq.n	800d386 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	4798      	blx	r3
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d109      	bne.n	800d37e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2206      	movs	r2, #6
 800d36e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d376:	2103      	movs	r1, #3
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	4798      	blx	r3
 800d37c:	e006      	b.n	800d38c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	220d      	movs	r2, #13
 800d382:	701a      	strb	r2, [r3, #0]
 800d384:	e002      	b.n	800d38c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	220d      	movs	r2, #13
 800d38a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2205      	movs	r2, #5
 800d390:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f001 fc34 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      break;
 800d3a8:	e084      	b.n	800d4b4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d017      	beq.n	800d3e4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	4798      	blx	r3
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d3c4:	7bbb      	ldrb	r3, [r7, #14]
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d103      	bne.n	800d3d4 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	220b      	movs	r2, #11
 800d3d0:	701a      	strb	r2, [r3, #0]
 800d3d2:	e00a      	b.n	800d3ea <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b02      	cmp	r3, #2
 800d3da:	d106      	bne.n	800d3ea <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	220d      	movs	r2, #13
 800d3e0:	701a      	strb	r2, [r3, #0]
 800d3e2:	e002      	b.n	800d3ea <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	220d      	movs	r2, #13
 800d3e8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2205      	movs	r2, #5
 800d3ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3fe:	2300      	movs	r3, #0
 800d400:	2200      	movs	r2, #0
 800d402:	f001 fc05 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      break;
 800d406:	e055      	b.n	800d4b4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d04f      	beq.n	800d4b2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	4798      	blx	r3
      }
      break;
 800d41e:	e048      	b.n	800d4b2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff fcf7 	bl	800ce1c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d434:	2b00      	cmp	r3, #0
 800d436:	d009      	beq.n	800d44c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d452:	2b00      	cmp	r3, #0
 800d454:	d005      	beq.n	800d462 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d45c:	2105      	movs	r1, #5
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d107      	bne.n	800d47e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff fdb0 	bl	800cfdc <USBH_Start>
 800d47c:	e002      	b.n	800d484 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f004 fab6 	bl	80119f0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2201      	movs	r2, #1
 800d488:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d498:	2300      	movs	r3, #0
 800d49a:	2200      	movs	r2, #0
 800d49c:	f001 fbb8 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      break;
 800d4a0:	e008      	b.n	800d4b4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d4a2:	bf00      	nop
 800d4a4:	e006      	b.n	800d4b4 <USBH_Process+0x4b8>
      break;
 800d4a6:	bf00      	nop
 800d4a8:	e004      	b.n	800d4b4 <USBH_Process+0x4b8>
      break;
 800d4aa:	bf00      	nop
 800d4ac:	e002      	b.n	800d4b4 <USBH_Process+0x4b8>
    break;
 800d4ae:	bf00      	nop
 800d4b0:	e000      	b.n	800d4b4 <USBH_Process+0x4b8>
      break;
 800d4b2:	bf00      	nop
  }
  return USBH_OK;
 800d4b4:	2300      	movs	r3, #0
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop

0800d4c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b088      	sub	sp, #32
 800d4c4:	af04      	add	r7, sp, #16
 800d4c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	785b      	ldrb	r3, [r3, #1]
 800d4d4:	2b07      	cmp	r3, #7
 800d4d6:	f200 8208 	bhi.w	800d8ea <USBH_HandleEnum+0x42a>
 800d4da:	a201      	add	r2, pc, #4	; (adr r2, 800d4e0 <USBH_HandleEnum+0x20>)
 800d4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e0:	0800d501 	.word	0x0800d501
 800d4e4:	0800d5bf 	.word	0x0800d5bf
 800d4e8:	0800d629 	.word	0x0800d629
 800d4ec:	0800d6b7 	.word	0x0800d6b7
 800d4f0:	0800d721 	.word	0x0800d721
 800d4f4:	0800d791 	.word	0x0800d791
 800d4f8:	0800d82d 	.word	0x0800d82d
 800d4fc:	0800d8ab 	.word	0x0800d8ab
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d500:	2108      	movs	r1, #8
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 faec 	bl	800dae0 <USBH_Get_DevDesc>
 800d508:	4603      	mov	r3, r0
 800d50a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d50c:	7bbb      	ldrb	r3, [r7, #14]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d130      	bne.n	800d574 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2201      	movs	r2, #1
 800d520:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	7919      	ldrb	r1, [r3, #4]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d536:	b292      	uxth	r2, r2
 800d538:	9202      	str	r2, [sp, #8]
 800d53a:	2200      	movs	r2, #0
 800d53c:	9201      	str	r2, [sp, #4]
 800d53e:	9300      	str	r3, [sp, #0]
 800d540:	4603      	mov	r3, r0
 800d542:	2280      	movs	r2, #128	; 0x80
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f001 f905 	bl	800e754 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	7959      	ldrb	r1, [r3, #5]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d55e:	b292      	uxth	r2, r2
 800d560:	9202      	str	r2, [sp, #8]
 800d562:	2200      	movs	r2, #0
 800d564:	9201      	str	r2, [sp, #4]
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	4603      	mov	r3, r0
 800d56a:	2200      	movs	r2, #0
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 f8f1 	bl	800e754 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d572:	e1bc      	b.n	800d8ee <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d574:	7bbb      	ldrb	r3, [r7, #14]
 800d576:	2b03      	cmp	r3, #3
 800d578:	f040 81b9 	bne.w	800d8ee <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d582:	3301      	adds	r3, #1
 800d584:	b2da      	uxtb	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d592:	2b03      	cmp	r3, #3
 800d594:	d903      	bls.n	800d59e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	220d      	movs	r2, #13
 800d59a:	701a      	strb	r2, [r3, #0]
      break;
 800d59c:	e1a7      	b.n	800d8ee <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	795b      	ldrb	r3, [r3, #5]
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f001 f925 	bl	800e7f4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	791b      	ldrb	r3, [r3, #4]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f001 f91f 	bl	800e7f4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	701a      	strb	r2, [r3, #0]
      break;
 800d5bc:	e197      	b.n	800d8ee <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d5be:	2112      	movs	r1, #18
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fa8d 	bl	800dae0 <USBH_Get_DevDesc>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d5ca:	7bbb      	ldrb	r3, [r7, #14]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d103      	bne.n	800d5d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2202      	movs	r2, #2
 800d5d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d5d6:	e18c      	b.n	800d8f2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	f040 8189 	bne.w	800d8f2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d5f6:	2b03      	cmp	r3, #3
 800d5f8:	d903      	bls.n	800d602 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	220d      	movs	r2, #13
 800d5fe:	701a      	strb	r2, [r3, #0]
      break;
 800d600:	e177      	b.n	800d8f2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	795b      	ldrb	r3, [r3, #5]
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f001 f8f3 	bl	800e7f4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	791b      	ldrb	r3, [r3, #4]
 800d612:	4619      	mov	r1, r3
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f001 f8ed 	bl	800e7f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	701a      	strb	r2, [r3, #0]
      break;
 800d626:	e164      	b.n	800d8f2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d628:	2101      	movs	r1, #1
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 fb04 	bl	800dc38 <USBH_SetAddress>
 800d630:	4603      	mov	r3, r0
 800d632:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d634:	7bbb      	ldrb	r3, [r7, #14]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d132      	bne.n	800d6a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d63a:	2002      	movs	r0, #2
 800d63c:	f004 fb3d 	bl	8011cba <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2203      	movs	r2, #3
 800d64c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	7919      	ldrb	r1, [r3, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d662:	b292      	uxth	r2, r2
 800d664:	9202      	str	r2, [sp, #8]
 800d666:	2200      	movs	r2, #0
 800d668:	9201      	str	r2, [sp, #4]
 800d66a:	9300      	str	r3, [sp, #0]
 800d66c:	4603      	mov	r3, r0
 800d66e:	2280      	movs	r2, #128	; 0x80
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f001 f86f 	bl	800e754 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	7959      	ldrb	r1, [r3, #5]
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d68a:	b292      	uxth	r2, r2
 800d68c:	9202      	str	r2, [sp, #8]
 800d68e:	2200      	movs	r2, #0
 800d690:	9201      	str	r2, [sp, #4]
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	4603      	mov	r3, r0
 800d696:	2200      	movs	r2, #0
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f001 f85b 	bl	800e754 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d69e:	e12a      	b.n	800d8f6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6a0:	7bbb      	ldrb	r3, [r7, #14]
 800d6a2:	2b03      	cmp	r3, #3
 800d6a4:	f040 8127 	bne.w	800d8f6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	220d      	movs	r2, #13
 800d6ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	705a      	strb	r2, [r3, #1]
      break;
 800d6b4:	e11f      	b.n	800d8f6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d6b6:	2109      	movs	r1, #9
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 fa39 	bl	800db30 <USBH_Get_CfgDesc>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d6c2:	7bbb      	ldrb	r3, [r7, #14]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d103      	bne.n	800d6d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2204      	movs	r2, #4
 800d6cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d6ce:	e114      	b.n	800d8fa <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6d0:	7bbb      	ldrb	r3, [r7, #14]
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	f040 8111 	bne.w	800d8fa <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6de:	3301      	adds	r3, #1
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d903      	bls.n	800d6fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	220d      	movs	r2, #13
 800d6f6:	701a      	strb	r2, [r3, #0]
      break;
 800d6f8:	e0ff      	b.n	800d8fa <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	795b      	ldrb	r3, [r3, #5]
 800d6fe:	4619      	mov	r1, r3
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f001 f877 	bl	800e7f4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	791b      	ldrb	r3, [r3, #4]
 800d70a:	4619      	mov	r1, r3
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f001 f871 	bl	800e7f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	701a      	strb	r2, [r3, #0]
      break;
 800d71e:	e0ec      	b.n	800d8fa <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d726:	4619      	mov	r1, r3
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 fa01 	bl	800db30 <USBH_Get_CfgDesc>
 800d72e:	4603      	mov	r3, r0
 800d730:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d732:	7bbb      	ldrb	r3, [r7, #14]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d103      	bne.n	800d740 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2205      	movs	r2, #5
 800d73c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d73e:	e0de      	b.n	800d8fe <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d740:	7bbb      	ldrb	r3, [r7, #14]
 800d742:	2b03      	cmp	r3, #3
 800d744:	f040 80db 	bne.w	800d8fe <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d74e:	3301      	adds	r3, #1
 800d750:	b2da      	uxtb	r2, r3
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d75e:	2b03      	cmp	r3, #3
 800d760:	d903      	bls.n	800d76a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	220d      	movs	r2, #13
 800d766:	701a      	strb	r2, [r3, #0]
      break;
 800d768:	e0c9      	b.n	800d8fe <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	795b      	ldrb	r3, [r3, #5]
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f001 f83f 	bl	800e7f4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	791b      	ldrb	r3, [r3, #4]
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f001 f839 	bl	800e7f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	701a      	strb	r2, [r3, #0]
      break;
 800d78e:	e0b6      	b.n	800d8fe <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d796:	2b00      	cmp	r3, #0
 800d798:	d036      	beq.n	800d808 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d7a6:	23ff      	movs	r3, #255	; 0xff
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 f9e5 	bl	800db78 <USBH_Get_StringDesc>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d7b2:	7bbb      	ldrb	r3, [r7, #14]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d111      	bne.n	800d7dc <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2206      	movs	r2, #6
 800d7bc:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2205      	movs	r2, #5
 800d7c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f001 fa1b 	bl	800ec10 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d7da:	e092      	b.n	800d902 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7dc:	7bbb      	ldrb	r3, [r7, #14]
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	f040 808f 	bne.w	800d902 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2206      	movs	r2, #6
 800d7e8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2205      	movs	r2, #5
 800d7ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7fe:	2300      	movs	r3, #0
 800d800:	2200      	movs	r2, #0
 800d802:	f001 fa05 	bl	800ec10 <osMessageQueuePut>
      break;
 800d806:	e07c      	b.n	800d902 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2206      	movs	r2, #6
 800d80c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2205      	movs	r2, #5
 800d812:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d822:	2300      	movs	r3, #0
 800d824:	2200      	movs	r2, #0
 800d826:	f001 f9f3 	bl	800ec10 <osMessageQueuePut>
      break;
 800d82a:	e06a      	b.n	800d902 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d832:	2b00      	cmp	r3, #0
 800d834:	d027      	beq.n	800d886 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d842:	23ff      	movs	r3, #255	; 0xff
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 f997 	bl	800db78 <USBH_Get_StringDesc>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d84e:	7bbb      	ldrb	r3, [r7, #14]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d103      	bne.n	800d85c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2207      	movs	r2, #7
 800d858:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d85a:	e054      	b.n	800d906 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d85c:	7bbb      	ldrb	r3, [r7, #14]
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d151      	bne.n	800d906 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2207      	movs	r2, #7
 800d866:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2205      	movs	r2, #5
 800d86c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d87c:	2300      	movs	r3, #0
 800d87e:	2200      	movs	r2, #0
 800d880:	f001 f9c6 	bl	800ec10 <osMessageQueuePut>
      break;
 800d884:	e03f      	b.n	800d906 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2207      	movs	r2, #7
 800d88a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2205      	movs	r2, #5
 800d890:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f001 f9b4 	bl	800ec10 <osMessageQueuePut>
      break;
 800d8a8:	e02d      	b.n	800d906 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d017      	beq.n	800d8e4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d8c0:	23ff      	movs	r3, #255	; 0xff
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f958 	bl	800db78 <USBH_Get_StringDesc>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d8cc:	7bbb      	ldrb	r3, [r7, #14]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d102      	bne.n	800d8d8 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d8d6:	e018      	b.n	800d90a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8d8:	7bbb      	ldrb	r3, [r7, #14]
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d115      	bne.n	800d90a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800d8e2:	e012      	b.n	800d90a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73fb      	strb	r3, [r7, #15]
      break;
 800d8e8:	e00f      	b.n	800d90a <USBH_HandleEnum+0x44a>

    default:
      break;
 800d8ea:	bf00      	nop
 800d8ec:	e00e      	b.n	800d90c <USBH_HandleEnum+0x44c>
      break;
 800d8ee:	bf00      	nop
 800d8f0:	e00c      	b.n	800d90c <USBH_HandleEnum+0x44c>
      break;
 800d8f2:	bf00      	nop
 800d8f4:	e00a      	b.n	800d90c <USBH_HandleEnum+0x44c>
      break;
 800d8f6:	bf00      	nop
 800d8f8:	e008      	b.n	800d90c <USBH_HandleEnum+0x44c>
      break;
 800d8fa:	bf00      	nop
 800d8fc:	e006      	b.n	800d90c <USBH_HandleEnum+0x44c>
      break;
 800d8fe:	bf00      	nop
 800d900:	e004      	b.n	800d90c <USBH_HandleEnum+0x44c>
      break;
 800d902:	bf00      	nop
 800d904:	e002      	b.n	800d90c <USBH_HandleEnum+0x44c>
      break;
 800d906:	bf00      	nop
 800d908:	e000      	b.n	800d90c <USBH_HandleEnum+0x44c>
      break;
 800d90a:	bf00      	nop
  }
  return Status;
 800d90c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop

0800d918 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	683a      	ldr	r2, [r7, #0]
 800d926:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d92a:	bf00      	nop
 800d92c:	370c      	adds	r7, #12
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr

0800d936 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d944:	1c5a      	adds	r2, r3, #1
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 f804 	bl	800d95a <USBH_HandleSof>
}
 800d952:	bf00      	nop
 800d954:	3708      	adds	r7, #8
 800d956:	46bd      	mov	sp, r7
 800d958:	bd80      	pop	{r7, pc}

0800d95a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d95a:	b580      	push	{r7, lr}
 800d95c:	b082      	sub	sp, #8
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b0b      	cmp	r3, #11
 800d96a:	d10a      	bne.n	800d982 <USBH_HandleSof+0x28>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d972:	2b00      	cmp	r3, #0
 800d974:	d005      	beq.n	800d982 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d97c:	699b      	ldr	r3, [r3, #24]
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	4798      	blx	r3
  }
}
 800d982:	bf00      	nop
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b082      	sub	sp, #8
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2201      	movs	r2, #1
 800d996:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2201      	movs	r2, #1
 800d99e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f001 f92d 	bl	800ec10 <osMessageQueuePut>
#endif
#endif

  return;
 800d9b6:	bf00      	nop
}
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b083      	sub	sp, #12
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d9ce:	bf00      	nop
}
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr

0800d9da <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b082      	sub	sp, #8
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da0e:	2300      	movs	r3, #0
 800da10:	2200      	movs	r2, #0
 800da12:	f001 f8fd 	bl	800ec10 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3708      	adds	r7, #8
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bd80      	pop	{r7, pc}

0800da20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f003 fff0 	bl	8011a26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	791b      	ldrb	r3, [r3, #4]
 800da4a:	4619      	mov	r1, r3
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fed1 	bl	800e7f4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	795b      	ldrb	r3, [r3, #5]
 800da56:	4619      	mov	r1, r3
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 fecb 	bl	800e7f4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2201      	movs	r2, #1
 800da62:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da72:	2300      	movs	r3, #0
 800da74:	2200      	movs	r2, #0
 800da76:	f001 f8cb 	bl	800ec10 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b084      	sub	sp, #16
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800da98:	f04f 33ff 	mov.w	r3, #4294967295
 800da9c:	2200      	movs	r2, #0
 800da9e:	f001 f92b 	bl	800ecf8 <osMessageQueueGet>
 800daa2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d1f0      	bne.n	800da8c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff faa6 	bl	800cffc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800dab0:	e7ec      	b.n	800da8c <USBH_Process_OS+0x8>

0800dab2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b082      	sub	sp, #8
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2201      	movs	r2, #1
 800dabe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dace:	2300      	movs	r3, #0
 800dad0:	2200      	movs	r2, #0
 800dad2:	f001 f89d 	bl	800ec10 <osMessageQueuePut>
#endif

  return USBH_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800daf2:	78fb      	ldrb	r3, [r7, #3]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	4613      	mov	r3, r2
 800dafa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dafe:	2100      	movs	r1, #0
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f864 	bl	800dbce <USBH_GetDescriptor>
 800db06:	4603      	mov	r3, r0
 800db08:	73fb      	strb	r3, [r7, #15]
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10a      	bne.n	800db26 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f203 3026 	addw	r0, r3, #806	; 0x326
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800db1c:	78fa      	ldrb	r2, [r7, #3]
 800db1e:	b292      	uxth	r2, r2
 800db20:	4619      	mov	r1, r3
 800db22:	f000 f918 	bl	800dd56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800db26:	7bfb      	ldrb	r3, [r7, #15]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af02      	add	r7, sp, #8
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	331c      	adds	r3, #28
 800db40:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800db42:	887b      	ldrh	r3, [r7, #2]
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db4c:	2100      	movs	r1, #0
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f83d 	bl	800dbce <USBH_GetDescriptor>
 800db54:	4603      	mov	r3, r0
 800db56:	72fb      	strb	r3, [r7, #11]
 800db58:	7afb      	ldrb	r3, [r7, #11]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d107      	bne.n	800db6e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800db64:	887a      	ldrh	r2, [r7, #2]
 800db66:	68f9      	ldr	r1, [r7, #12]
 800db68:	4618      	mov	r0, r3
 800db6a:	f000 f964 	bl	800de36 <USBH_ParseCfgDesc>
  }

  return status;
 800db6e:	7afb      	ldrb	r3, [r7, #11]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b088      	sub	sp, #32
 800db7c:	af02      	add	r7, sp, #8
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	607a      	str	r2, [r7, #4]
 800db82:	461a      	mov	r2, r3
 800db84:	460b      	mov	r3, r1
 800db86:	72fb      	strb	r3, [r7, #11]
 800db88:	4613      	mov	r3, r2
 800db8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800db8c:	7afb      	ldrb	r3, [r7, #11]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800db94:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800db9c:	893b      	ldrh	r3, [r7, #8]
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	460b      	mov	r3, r1
 800dba2:	2100      	movs	r1, #0
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f000 f812 	bl	800dbce <USBH_GetDescriptor>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	75fb      	strb	r3, [r7, #23]
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d107      	bne.n	800dbc4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dbba:	893a      	ldrh	r2, [r7, #8]
 800dbbc:	6879      	ldr	r1, [r7, #4]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 fa37 	bl	800e032 <USBH_ParseStringDesc>
  }

  return status;
 800dbc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	60f8      	str	r0, [r7, #12]
 800dbd6:	607b      	str	r3, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	72fb      	strb	r3, [r7, #11]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	789b      	ldrb	r3, [r3, #2]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d11c      	bne.n	800dc22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dbe8:	7afb      	ldrb	r3, [r7, #11]
 800dbea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2206      	movs	r2, #6
 800dbf8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	893a      	ldrh	r2, [r7, #8]
 800dbfe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dc00:	893b      	ldrh	r3, [r7, #8]
 800dc02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc0a:	d104      	bne.n	800dc16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f240 4209 	movw	r2, #1033	; 0x409
 800dc12:	829a      	strh	r2, [r3, #20]
 800dc14:	e002      	b.n	800dc1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	8b3a      	ldrh	r2, [r7, #24]
 800dc20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dc22:	8b3b      	ldrh	r3, [r7, #24]
 800dc24:	461a      	mov	r2, r3
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f000 fa50 	bl	800e0ce <USBH_CtlReq>
 800dc2e:	4603      	mov	r3, r0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	789b      	ldrb	r3, [r3, #2]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d10f      	bne.n	800dc6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2205      	movs	r2, #5
 800dc56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dc58:	78fb      	ldrb	r3, [r7, #3]
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2100      	movs	r1, #0
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fa2c 	bl	800e0ce <USBH_CtlReq>
 800dc76:	4603      	mov	r3, r0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	789b      	ldrb	r3, [r3, #2]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d10e      	bne.n	800dcb2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2209      	movs	r2, #9
 800dc9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	887a      	ldrh	r2, [r7, #2]
 800dca4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 fa09 	bl	800e0ce <USBH_CtlReq>
 800dcbc:	4603      	mov	r3, r0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	789b      	ldrb	r3, [r3, #2]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d10f      	bne.n	800dcfa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2203      	movs	r2, #3
 800dce4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dce6:	78fb      	ldrb	r3, [r7, #3]
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f9e5 	bl	800e0ce <USBH_CtlReq>
 800dd04:	4603      	mov	r3, r0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b082      	sub	sp, #8
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	460b      	mov	r3, r1
 800dd18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	789b      	ldrb	r3, [r3, #2]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d10f      	bne.n	800dd42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2202      	movs	r2, #2
 800dd26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dd34:	78fb      	ldrb	r3, [r7, #3]
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800dd42:	2200      	movs	r2, #0
 800dd44:	2100      	movs	r1, #0
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 f9c1 	bl	800e0ce <USBH_CtlReq>
 800dd4c:	4603      	mov	r3, r0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b085      	sub	sp, #20
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	60f8      	str	r0, [r7, #12]
 800dd5e:	60b9      	str	r1, [r7, #8]
 800dd60:	4613      	mov	r3, r2
 800dd62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	781a      	ldrb	r2, [r3, #0]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	785a      	ldrb	r2, [r3, #1]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	3302      	adds	r3, #2
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	3303      	adds	r3, #3
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	021b      	lsls	r3, r3, #8
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	791a      	ldrb	r2, [r3, #4]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	795a      	ldrb	r2, [r3, #5]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	799a      	ldrb	r2, [r3, #6]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	79da      	ldrb	r2, [r3, #7]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ddb0:	88fb      	ldrh	r3, [r7, #6]
 800ddb2:	2b08      	cmp	r3, #8
 800ddb4:	d939      	bls.n	800de2a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	3308      	adds	r3, #8
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	b29a      	uxth	r2, r3
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	3309      	adds	r3, #9
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	021b      	lsls	r3, r3, #8
 800ddc8:	b29b      	uxth	r3, r3
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	330a      	adds	r3, #10
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	b29a      	uxth	r2, r3
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	330b      	adds	r3, #11
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	b29b      	uxth	r3, r3
 800dde2:	021b      	lsls	r3, r3, #8
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	4313      	orrs	r3, r2
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	330c      	adds	r3, #12
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	330d      	adds	r3, #13
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	021b      	lsls	r3, r3, #8
 800de00:	b29b      	uxth	r3, r3
 800de02:	4313      	orrs	r3, r2
 800de04:	b29a      	uxth	r2, r3
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	7b9a      	ldrb	r2, [r3, #14]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	7bda      	ldrb	r2, [r3, #15]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	7c1a      	ldrb	r2, [r3, #16]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	7c5a      	ldrb	r2, [r3, #17]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	745a      	strb	r2, [r3, #17]
  }
}
 800de2a:	bf00      	nop
 800de2c:	3714      	adds	r7, #20
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr

0800de36 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b08a      	sub	sp, #40	; 0x28
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	4613      	mov	r3, r2
 800de42:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800de44:	68bb      	ldr	r3, [r7, #8]
 800de46:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800de48:	2300      	movs	r3, #0
 800de4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800de4e:	2300      	movs	r3, #0
 800de50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	781a      	ldrb	r2, [r3, #0]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	785a      	ldrb	r2, [r3, #1]
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	3302      	adds	r3, #2
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	b29a      	uxth	r2, r3
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	3303      	adds	r3, #3
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	b29b      	uxth	r3, r3
 800de78:	021b      	lsls	r3, r3, #8
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	4313      	orrs	r3, r2
 800de7e:	b29a      	uxth	r2, r3
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	791a      	ldrb	r2, [r3, #4]
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	795a      	ldrb	r2, [r3, #5]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	799a      	ldrb	r2, [r3, #6]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	79da      	ldrb	r2, [r3, #7]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	7a1a      	ldrb	r2, [r3, #8]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800deac:	88fb      	ldrh	r3, [r7, #6]
 800deae:	2b09      	cmp	r3, #9
 800deb0:	d95f      	bls.n	800df72 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800deb2:	2309      	movs	r3, #9
 800deb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800deba:	e051      	b.n	800df60 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800debc:	f107 0316 	add.w	r3, r7, #22
 800dec0:	4619      	mov	r1, r3
 800dec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dec4:	f000 f8e8 	bl	800e098 <USBH_GetNextDesc>
 800dec8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800decc:	785b      	ldrb	r3, [r3, #1]
 800dece:	2b04      	cmp	r3, #4
 800ded0:	d146      	bne.n	800df60 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ded2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ded6:	221a      	movs	r2, #26
 800ded8:	fb02 f303 	mul.w	r3, r2, r3
 800dedc:	3308      	adds	r3, #8
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	4413      	add	r3, r2
 800dee2:	3302      	adds	r3, #2
 800dee4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dee6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dee8:	69f8      	ldr	r0, [r7, #28]
 800deea:	f000 f846 	bl	800df7a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800deee:	2300      	movs	r3, #0
 800def0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800def4:	2300      	movs	r3, #0
 800def6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800def8:	e022      	b.n	800df40 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800defa:	f107 0316 	add.w	r3, r7, #22
 800defe:	4619      	mov	r1, r3
 800df00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df02:	f000 f8c9 	bl	800e098 <USBH_GetNextDesc>
 800df06:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	785b      	ldrb	r3, [r3, #1]
 800df0c:	2b05      	cmp	r3, #5
 800df0e:	d117      	bne.n	800df40 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800df10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df14:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df18:	3201      	adds	r2, #1
 800df1a:	00d2      	lsls	r2, r2, #3
 800df1c:	211a      	movs	r1, #26
 800df1e:	fb01 f303 	mul.w	r3, r1, r3
 800df22:	4413      	add	r3, r2
 800df24:	3308      	adds	r3, #8
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	4413      	add	r3, r2
 800df2a:	3304      	adds	r3, #4
 800df2c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800df2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df30:	69b8      	ldr	r0, [r7, #24]
 800df32:	f000 f851 	bl	800dfd8 <USBH_ParseEPDesc>
            ep_ix++;
 800df36:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800df3a:	3301      	adds	r3, #1
 800df3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	791b      	ldrb	r3, [r3, #4]
 800df44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800df48:	429a      	cmp	r2, r3
 800df4a:	d204      	bcs.n	800df56 <USBH_ParseCfgDesc+0x120>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	885a      	ldrh	r2, [r3, #2]
 800df50:	8afb      	ldrh	r3, [r7, #22]
 800df52:	429a      	cmp	r2, r3
 800df54:	d8d1      	bhi.n	800defa <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800df56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df5a:	3301      	adds	r3, #1
 800df5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800df60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800df64:	2b01      	cmp	r3, #1
 800df66:	d804      	bhi.n	800df72 <USBH_ParseCfgDesc+0x13c>
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	885a      	ldrh	r2, [r3, #2]
 800df6c:	8afb      	ldrh	r3, [r7, #22]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d8a4      	bhi.n	800debc <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800df72:	bf00      	nop
 800df74:	3728      	adds	r7, #40	; 0x28
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b083      	sub	sp, #12
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	781a      	ldrb	r2, [r3, #0]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	785a      	ldrb	r2, [r3, #1]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	789a      	ldrb	r2, [r3, #2]
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	78da      	ldrb	r2, [r3, #3]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	791a      	ldrb	r2, [r3, #4]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	795a      	ldrb	r2, [r3, #5]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	799a      	ldrb	r2, [r3, #6]
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	79da      	ldrb	r2, [r3, #7]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	7a1a      	ldrb	r2, [r3, #8]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	721a      	strb	r2, [r3, #8]
}
 800dfcc:	bf00      	nop
 800dfce:	370c      	adds	r7, #12
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	b083      	sub	sp, #12
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	781a      	ldrb	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	785a      	ldrb	r2, [r3, #1]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	789a      	ldrb	r2, [r3, #2]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	78da      	ldrb	r2, [r3, #3]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	3304      	adds	r3, #4
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	b29a      	uxth	r2, r3
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	3305      	adds	r3, #5
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	b29b      	uxth	r3, r3
 800e012:	021b      	lsls	r3, r3, #8
 800e014:	b29b      	uxth	r3, r3
 800e016:	4313      	orrs	r3, r2
 800e018:	b29a      	uxth	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	799a      	ldrb	r2, [r3, #6]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	719a      	strb	r2, [r3, #6]
}
 800e026:	bf00      	nop
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e032:	b480      	push	{r7}
 800e034:	b087      	sub	sp, #28
 800e036:	af00      	add	r7, sp, #0
 800e038:	60f8      	str	r0, [r7, #12]
 800e03a:	60b9      	str	r1, [r7, #8]
 800e03c:	4613      	mov	r3, r2
 800e03e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	3301      	adds	r3, #1
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	2b03      	cmp	r3, #3
 800e048:	d120      	bne.n	800e08c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	1e9a      	subs	r2, r3, #2
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	4293      	cmp	r3, r2
 800e054:	bf28      	it	cs
 800e056:	4613      	movcs	r3, r2
 800e058:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3302      	adds	r3, #2
 800e05e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e060:	2300      	movs	r3, #0
 800e062:	82fb      	strh	r3, [r7, #22]
 800e064:	e00b      	b.n	800e07e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e066:	8afb      	ldrh	r3, [r7, #22]
 800e068:	68fa      	ldr	r2, [r7, #12]
 800e06a:	4413      	add	r3, r2
 800e06c:	781a      	ldrb	r2, [r3, #0]
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	3301      	adds	r3, #1
 800e076:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e078:	8afb      	ldrh	r3, [r7, #22]
 800e07a:	3302      	adds	r3, #2
 800e07c:	82fb      	strh	r3, [r7, #22]
 800e07e:	8afa      	ldrh	r2, [r7, #22]
 800e080:	8abb      	ldrh	r3, [r7, #20]
 800e082:	429a      	cmp	r2, r3
 800e084:	d3ef      	bcc.n	800e066 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	2200      	movs	r2, #0
 800e08a:	701a      	strb	r2, [r3, #0]
  }
}
 800e08c:	bf00      	nop
 800e08e:	371c      	adds	r7, #28
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e098:	b480      	push	{r7}
 800e09a:	b085      	sub	sp, #20
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	881a      	ldrh	r2, [r3, #0]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	b29b      	uxth	r3, r3
 800e0ac:	4413      	add	r3, r2
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4413      	add	r3, r2
 800e0be:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3714      	adds	r7, #20
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b086      	sub	sp, #24
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	60f8      	str	r0, [r7, #12]
 800e0d6:	60b9      	str	r1, [r7, #8]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e0dc:	2301      	movs	r3, #1
 800e0de:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	789b      	ldrb	r3, [r3, #2]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d002      	beq.n	800e0ee <USBH_CtlReq+0x20>
 800e0e8:	2b02      	cmp	r3, #2
 800e0ea:	d01d      	beq.n	800e128 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e0ec:	e043      	b.n	800e176 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	68ba      	ldr	r2, [r7, #8]
 800e0f2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	88fa      	ldrh	r2, [r7, #6]
 800e0f8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2202      	movs	r2, #2
 800e104:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e106:	2301      	movs	r3, #1
 800e108:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2203      	movs	r2, #3
 800e10e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e11e:	2300      	movs	r3, #0
 800e120:	2200      	movs	r2, #0
 800e122:	f000 fd75 	bl	800ec10 <osMessageQueuePut>
      break;
 800e126:	e026      	b.n	800e176 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800e128:	68f8      	ldr	r0, [r7, #12]
 800e12a:	f000 f829 	bl	800e180 <USBH_HandleControl>
 800e12e:	4603      	mov	r3, r0
 800e130:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e132:	7dfb      	ldrb	r3, [r7, #23]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <USBH_CtlReq+0x70>
 800e138:	7dfb      	ldrb	r3, [r7, #23]
 800e13a:	2b03      	cmp	r3, #3
 800e13c:	d106      	bne.n	800e14c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2201      	movs	r2, #1
 800e142:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2200      	movs	r2, #0
 800e148:	761a      	strb	r2, [r3, #24]
 800e14a:	e005      	b.n	800e158 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e14c:	7dfb      	ldrb	r3, [r7, #23]
 800e14e:	2b02      	cmp	r3, #2
 800e150:	d102      	bne.n	800e158 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2201      	movs	r2, #1
 800e156:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2203      	movs	r2, #3
 800e15c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e16c:	2300      	movs	r3, #0
 800e16e:	2200      	movs	r2, #0
 800e170:	f000 fd4e 	bl	800ec10 <osMessageQueuePut>
      break;
 800e174:	bf00      	nop
  }
  return status;
 800e176:	7dfb      	ldrb	r3, [r7, #23]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3718      	adds	r7, #24
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b086      	sub	sp, #24
 800e184:	af02      	add	r7, sp, #8
 800e186:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e188:	2301      	movs	r3, #1
 800e18a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e18c:	2300      	movs	r3, #0
 800e18e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7e1b      	ldrb	r3, [r3, #24]
 800e194:	3b01      	subs	r3, #1
 800e196:	2b0a      	cmp	r3, #10
 800e198:	f200 822b 	bhi.w	800e5f2 <USBH_HandleControl+0x472>
 800e19c:	a201      	add	r2, pc, #4	; (adr r2, 800e1a4 <USBH_HandleControl+0x24>)
 800e19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a2:	bf00      	nop
 800e1a4:	0800e1d1 	.word	0x0800e1d1
 800e1a8:	0800e1eb 	.word	0x0800e1eb
 800e1ac:	0800e28d 	.word	0x0800e28d
 800e1b0:	0800e2b3 	.word	0x0800e2b3
 800e1b4:	0800e33f 	.word	0x0800e33f
 800e1b8:	0800e36b 	.word	0x0800e36b
 800e1bc:	0800e42d 	.word	0x0800e42d
 800e1c0:	0800e44f 	.word	0x0800e44f
 800e1c4:	0800e4e1 	.word	0x0800e4e1
 800e1c8:	0800e509 	.word	0x0800e509
 800e1cc:	0800e59b 	.word	0x0800e59b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f103 0110 	add.w	r1, r3, #16
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	795b      	ldrb	r3, [r3, #5]
 800e1da:	461a      	mov	r2, r3
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 fa19 	bl	800e614 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2202      	movs	r2, #2
 800e1e6:	761a      	strb	r2, [r3, #24]
      break;
 800e1e8:	e20e      	b.n	800e608 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	795b      	ldrb	r3, [r3, #5]
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f003 fd05 	bl	8011c00 <USBH_LL_GetURBState>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e1fa:	7bbb      	ldrb	r3, [r7, #14]
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d12c      	bne.n	800e25a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	7c1b      	ldrb	r3, [r3, #16]
 800e204:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e208:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	8adb      	ldrh	r3, [r3, #22]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d00a      	beq.n	800e228 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e212:	7b7b      	ldrb	r3, [r7, #13]
 800e214:	2b80      	cmp	r3, #128	; 0x80
 800e216:	d103      	bne.n	800e220 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2203      	movs	r2, #3
 800e21c:	761a      	strb	r2, [r3, #24]
 800e21e:	e00d      	b.n	800e23c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2205      	movs	r2, #5
 800e224:	761a      	strb	r2, [r3, #24]
 800e226:	e009      	b.n	800e23c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e228:	7b7b      	ldrb	r3, [r7, #13]
 800e22a:	2b80      	cmp	r3, #128	; 0x80
 800e22c:	d103      	bne.n	800e236 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2209      	movs	r2, #9
 800e232:	761a      	strb	r2, [r3, #24]
 800e234:	e002      	b.n	800e23c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2207      	movs	r2, #7
 800e23a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2203      	movs	r2, #3
 800e240:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e250:	2300      	movs	r3, #0
 800e252:	2200      	movs	r2, #0
 800e254:	f000 fcdc 	bl	800ec10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e258:	e1cd      	b.n	800e5f6 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e25a:	7bbb      	ldrb	r3, [r7, #14]
 800e25c:	2b04      	cmp	r3, #4
 800e25e:	d003      	beq.n	800e268 <USBH_HandleControl+0xe8>
 800e260:	7bbb      	ldrb	r3, [r7, #14]
 800e262:	2b02      	cmp	r3, #2
 800e264:	f040 81c7 	bne.w	800e5f6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	220b      	movs	r2, #11
 800e26c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2203      	movs	r2, #3
 800e272:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e282:	2300      	movs	r3, #0
 800e284:	2200      	movs	r2, #0
 800e286:	f000 fcc3 	bl	800ec10 <osMessageQueuePut>
      break;
 800e28a:	e1b4      	b.n	800e5f6 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e292:	b29a      	uxth	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6899      	ldr	r1, [r3, #8]
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	899a      	ldrh	r2, [r3, #12]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	791b      	ldrb	r3, [r3, #4]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f9f4 	bl	800e692 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2204      	movs	r2, #4
 800e2ae:	761a      	strb	r2, [r3, #24]
      break;
 800e2b0:	e1aa      	b.n	800e608 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	791b      	ldrb	r3, [r3, #4]
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f003 fca1 	bl	8011c00 <USBH_LL_GetURBState>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e2c2:	7bbb      	ldrb	r3, [r7, #14]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d110      	bne.n	800e2ea <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2209      	movs	r2, #9
 800e2cc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f000 fc93 	bl	800ec10 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e2ea:	7bbb      	ldrb	r3, [r7, #14]
 800e2ec:	2b05      	cmp	r3, #5
 800e2ee:	d110      	bne.n	800e312 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e2f0:	2303      	movs	r3, #3
 800e2f2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2203      	movs	r2, #3
 800e2f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e308:	2300      	movs	r3, #0
 800e30a:	2200      	movs	r2, #0
 800e30c:	f000 fc80 	bl	800ec10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e310:	e173      	b.n	800e5fa <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e312:	7bbb      	ldrb	r3, [r7, #14]
 800e314:	2b04      	cmp	r3, #4
 800e316:	f040 8170 	bne.w	800e5fa <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	220b      	movs	r2, #11
 800e31e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2203      	movs	r2, #3
 800e324:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e334:	2300      	movs	r3, #0
 800e336:	2200      	movs	r2, #0
 800e338:	f000 fc6a 	bl	800ec10 <osMessageQueuePut>
      break;
 800e33c:	e15d      	b.n	800e5fa <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6899      	ldr	r1, [r3, #8]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	899a      	ldrh	r2, [r3, #12]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	7958      	ldrb	r0, [r3, #5]
 800e34a:	2301      	movs	r3, #1
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	4603      	mov	r3, r0
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 f979 	bl	800e648 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2206      	movs	r2, #6
 800e366:	761a      	strb	r2, [r3, #24]
      break;
 800e368:	e14e      	b.n	800e608 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	795b      	ldrb	r3, [r3, #5]
 800e36e:	4619      	mov	r1, r3
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f003 fc45 	bl	8011c00 <USBH_LL_GetURBState>
 800e376:	4603      	mov	r3, r0
 800e378:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e37a:	7bbb      	ldrb	r3, [r7, #14]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d111      	bne.n	800e3a4 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2207      	movs	r2, #7
 800e384:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2203      	movs	r2, #3
 800e38a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e39a:	2300      	movs	r3, #0
 800e39c:	2200      	movs	r2, #0
 800e39e:	f000 fc37 	bl	800ec10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e3a2:	e12c      	b.n	800e5fe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800e3a4:	7bbb      	ldrb	r3, [r7, #14]
 800e3a6:	2b05      	cmp	r3, #5
 800e3a8:	d113      	bne.n	800e3d2 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	220c      	movs	r2, #12
 800e3ae:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e3b0:	2303      	movs	r3, #3
 800e3b2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2203      	movs	r2, #3
 800e3b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f000 fc20 	bl	800ec10 <osMessageQueuePut>
      break;
 800e3d0:	e115      	b.n	800e5fe <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e3d2:	7bbb      	ldrb	r3, [r7, #14]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d111      	bne.n	800e3fc <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2205      	movs	r2, #5
 800e3dc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2203      	movs	r2, #3
 800e3e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f000 fc0b 	bl	800ec10 <osMessageQueuePut>
      break;
 800e3fa:	e100      	b.n	800e5fe <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	2b04      	cmp	r3, #4
 800e400:	f040 80fd 	bne.w	800e5fe <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	220b      	movs	r2, #11
 800e408:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e40a:	2302      	movs	r3, #2
 800e40c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2203      	movs	r2, #3
 800e412:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e422:	2300      	movs	r3, #0
 800e424:	2200      	movs	r2, #0
 800e426:	f000 fbf3 	bl	800ec10 <osMessageQueuePut>
      break;
 800e42a:	e0e8      	b.n	800e5fe <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	791b      	ldrb	r3, [r3, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	2100      	movs	r1, #0
 800e434:	6878      	ldr	r0, [r7, #4]
 800e436:	f000 f92c 	bl	800e692 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e440:	b29a      	uxth	r2, r3
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2208      	movs	r2, #8
 800e44a:	761a      	strb	r2, [r3, #24]

      break;
 800e44c:	e0dc      	b.n	800e608 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	791b      	ldrb	r3, [r3, #4]
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f003 fbd3 	bl	8011c00 <USBH_LL_GetURBState>
 800e45a:	4603      	mov	r3, r0
 800e45c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e45e:	7bbb      	ldrb	r3, [r7, #14]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d113      	bne.n	800e48c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	220d      	movs	r2, #13
 800e468:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e46a:	2300      	movs	r3, #0
 800e46c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2203      	movs	r2, #3
 800e472:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e482:	2300      	movs	r3, #0
 800e484:	2200      	movs	r2, #0
 800e486:	f000 fbc3 	bl	800ec10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e48a:	e0ba      	b.n	800e602 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800e48c:	7bbb      	ldrb	r3, [r7, #14]
 800e48e:	2b04      	cmp	r3, #4
 800e490:	d111      	bne.n	800e4b6 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	220b      	movs	r2, #11
 800e496:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2203      	movs	r2, #3
 800e49c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f000 fbae 	bl	800ec10 <osMessageQueuePut>
      break;
 800e4b4:	e0a5      	b.n	800e602 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800e4b6:	7bbb      	ldrb	r3, [r7, #14]
 800e4b8:	2b05      	cmp	r3, #5
 800e4ba:	f040 80a2 	bne.w	800e602 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2203      	movs	r2, #3
 800e4c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	2200      	movs	r2, #0
 800e4da:	f000 fb99 	bl	800ec10 <osMessageQueuePut>
      break;
 800e4de:	e090      	b.n	800e602 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	795a      	ldrb	r2, [r3, #5]
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	9300      	str	r3, [sp, #0]
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 f8aa 	bl	800e648 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	220a      	movs	r2, #10
 800e504:	761a      	strb	r2, [r3, #24]
      break;
 800e506:	e07f      	b.n	800e608 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	795b      	ldrb	r3, [r3, #5]
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f003 fb76 	bl	8011c00 <USBH_LL_GetURBState>
 800e514:	4603      	mov	r3, r0
 800e516:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e518:	7bbb      	ldrb	r3, [r7, #14]
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	d113      	bne.n	800e546 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800e51e:	2300      	movs	r3, #0
 800e520:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	220d      	movs	r2, #13
 800e526:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2203      	movs	r2, #3
 800e52c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e53c:	2300      	movs	r3, #0
 800e53e:	2200      	movs	r2, #0
 800e540:	f000 fb66 	bl	800ec10 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e544:	e05f      	b.n	800e606 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e546:	7bbb      	ldrb	r3, [r7, #14]
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d111      	bne.n	800e570 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2209      	movs	r2, #9
 800e550:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2203      	movs	r2, #3
 800e556:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e566:	2300      	movs	r3, #0
 800e568:	2200      	movs	r2, #0
 800e56a:	f000 fb51 	bl	800ec10 <osMessageQueuePut>
      break;
 800e56e:	e04a      	b.n	800e606 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800e570:	7bbb      	ldrb	r3, [r7, #14]
 800e572:	2b04      	cmp	r3, #4
 800e574:	d147      	bne.n	800e606 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	220b      	movs	r2, #11
 800e57a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2203      	movs	r2, #3
 800e580:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e590:	2300      	movs	r3, #0
 800e592:	2200      	movs	r2, #0
 800e594:	f000 fb3c 	bl	800ec10 <osMessageQueuePut>
      break;
 800e598:	e035      	b.n	800e606 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	7e5b      	ldrb	r3, [r3, #25]
 800e59e:	3301      	adds	r3, #1
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	765a      	strb	r2, [r3, #25]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	7e5b      	ldrb	r3, [r3, #25]
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d806      	bhi.n	800e5bc <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2201      	movs	r2, #1
 800e5b8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e5ba:	e025      	b.n	800e608 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5c2:	2106      	movs	r1, #6
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	795b      	ldrb	r3, [r3, #5]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f000 f90d 	bl	800e7f4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	791b      	ldrb	r3, [r3, #4]
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f000 f907 	bl	800e7f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e5ec:	2302      	movs	r3, #2
 800e5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e5f0:	e00a      	b.n	800e608 <USBH_HandleControl+0x488>

    default:
      break;
 800e5f2:	bf00      	nop
 800e5f4:	e008      	b.n	800e608 <USBH_HandleControl+0x488>
      break;
 800e5f6:	bf00      	nop
 800e5f8:	e006      	b.n	800e608 <USBH_HandleControl+0x488>
      break;
 800e5fa:	bf00      	nop
 800e5fc:	e004      	b.n	800e608 <USBH_HandleControl+0x488>
      break;
 800e5fe:	bf00      	nop
 800e600:	e002      	b.n	800e608 <USBH_HandleControl+0x488>
      break;
 800e602:	bf00      	nop
 800e604:	e000      	b.n	800e608 <USBH_HandleControl+0x488>
      break;
 800e606:	bf00      	nop
  }

  return status;
 800e608:	7bfb      	ldrb	r3, [r7, #15]
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop

0800e614 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b088      	sub	sp, #32
 800e618:	af04      	add	r7, sp, #16
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	4613      	mov	r3, r2
 800e620:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e622:	79f9      	ldrb	r1, [r7, #7]
 800e624:	2300      	movs	r3, #0
 800e626:	9303      	str	r3, [sp, #12]
 800e628:	2308      	movs	r3, #8
 800e62a:	9302      	str	r3, [sp, #8]
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	2300      	movs	r3, #0
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	2300      	movs	r3, #0
 800e636:	2200      	movs	r2, #0
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f003 fab0 	bl	8011b9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b088      	sub	sp, #32
 800e64c:	af04      	add	r7, sp, #16
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	4611      	mov	r1, r2
 800e654:	461a      	mov	r2, r3
 800e656:	460b      	mov	r3, r1
 800e658:	80fb      	strh	r3, [r7, #6]
 800e65a:	4613      	mov	r3, r2
 800e65c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e668:	2300      	movs	r3, #0
 800e66a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e66c:	7979      	ldrb	r1, [r7, #5]
 800e66e:	7e3b      	ldrb	r3, [r7, #24]
 800e670:	9303      	str	r3, [sp, #12]
 800e672:	88fb      	ldrh	r3, [r7, #6]
 800e674:	9302      	str	r3, [sp, #8]
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	9301      	str	r3, [sp, #4]
 800e67a:	2301      	movs	r3, #1
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	2300      	movs	r3, #0
 800e680:	2200      	movs	r2, #0
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f003 fa8b 	bl	8011b9e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e688:	2300      	movs	r3, #0
}
 800e68a:	4618      	mov	r0, r3
 800e68c:	3710      	adds	r7, #16
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}

0800e692 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e692:	b580      	push	{r7, lr}
 800e694:	b088      	sub	sp, #32
 800e696:	af04      	add	r7, sp, #16
 800e698:	60f8      	str	r0, [r7, #12]
 800e69a:	60b9      	str	r1, [r7, #8]
 800e69c:	4611      	mov	r1, r2
 800e69e:	461a      	mov	r2, r3
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	80fb      	strh	r3, [r7, #6]
 800e6a4:	4613      	mov	r3, r2
 800e6a6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e6a8:	7979      	ldrb	r1, [r7, #5]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	9303      	str	r3, [sp, #12]
 800e6ae:	88fb      	ldrh	r3, [r7, #6]
 800e6b0:	9302      	str	r3, [sp, #8]
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	9301      	str	r3, [sp, #4]
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	9300      	str	r3, [sp, #0]
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	2201      	movs	r2, #1
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f003 fa6d 	bl	8011b9e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e6c4:	2300      	movs	r3, #0

}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b088      	sub	sp, #32
 800e6d2:	af04      	add	r7, sp, #16
 800e6d4:	60f8      	str	r0, [r7, #12]
 800e6d6:	60b9      	str	r1, [r7, #8]
 800e6d8:	4611      	mov	r1, r2
 800e6da:	461a      	mov	r2, r3
 800e6dc:	460b      	mov	r3, r1
 800e6de:	80fb      	strh	r3, [r7, #6]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e6f2:	7979      	ldrb	r1, [r7, #5]
 800e6f4:	7e3b      	ldrb	r3, [r7, #24]
 800e6f6:	9303      	str	r3, [sp, #12]
 800e6f8:	88fb      	ldrh	r3, [r7, #6]
 800e6fa:	9302      	str	r3, [sp, #8]
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	2301      	movs	r3, #1
 800e702:	9300      	str	r3, [sp, #0]
 800e704:	2302      	movs	r3, #2
 800e706:	2200      	movs	r2, #0
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	f003 fa48 	bl	8011b9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b088      	sub	sp, #32
 800e71c:	af04      	add	r7, sp, #16
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	4611      	mov	r1, r2
 800e724:	461a      	mov	r2, r3
 800e726:	460b      	mov	r3, r1
 800e728:	80fb      	strh	r3, [r7, #6]
 800e72a:	4613      	mov	r3, r2
 800e72c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e72e:	7979      	ldrb	r1, [r7, #5]
 800e730:	2300      	movs	r3, #0
 800e732:	9303      	str	r3, [sp, #12]
 800e734:	88fb      	ldrh	r3, [r7, #6]
 800e736:	9302      	str	r3, [sp, #8]
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	9301      	str	r3, [sp, #4]
 800e73c:	2301      	movs	r3, #1
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	2302      	movs	r3, #2
 800e742:	2201      	movs	r2, #1
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f003 fa2a 	bl	8011b9e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3710      	adds	r7, #16
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af04      	add	r7, sp, #16
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	4608      	mov	r0, r1
 800e75e:	4611      	mov	r1, r2
 800e760:	461a      	mov	r2, r3
 800e762:	4603      	mov	r3, r0
 800e764:	70fb      	strb	r3, [r7, #3]
 800e766:	460b      	mov	r3, r1
 800e768:	70bb      	strb	r3, [r7, #2]
 800e76a:	4613      	mov	r3, r2
 800e76c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e76e:	7878      	ldrb	r0, [r7, #1]
 800e770:	78ba      	ldrb	r2, [r7, #2]
 800e772:	78f9      	ldrb	r1, [r7, #3]
 800e774:	8b3b      	ldrh	r3, [r7, #24]
 800e776:	9302      	str	r3, [sp, #8]
 800e778:	7d3b      	ldrb	r3, [r7, #20]
 800e77a:	9301      	str	r3, [sp, #4]
 800e77c:	7c3b      	ldrb	r3, [r7, #16]
 800e77e:	9300      	str	r3, [sp, #0]
 800e780:	4603      	mov	r3, r0
 800e782:	6878      	ldr	r0, [r7, #4]
 800e784:	f003 f9bd 	bl	8011b02 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e788:	2300      	movs	r3, #0
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3708      	adds	r7, #8
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b082      	sub	sp, #8
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	460b      	mov	r3, r1
 800e79c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e79e:	78fb      	ldrb	r3, [r7, #3]
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f003 f9dc 	bl	8011b60 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b084      	sub	sp, #16
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	6078      	str	r0, [r7, #4]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 f836 	bl	800e830 <USBH_GetFreePipe>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e7c8:	89fb      	ldrh	r3, [r7, #14]
 800e7ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d00a      	beq.n	800e7e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e7d2:	78fa      	ldrb	r2, [r7, #3]
 800e7d4:	89fb      	ldrh	r3, [r7, #14]
 800e7d6:	f003 030f 	and.w	r3, r3, #15
 800e7da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e7de:	6879      	ldr	r1, [r7, #4]
 800e7e0:	33e0      	adds	r3, #224	; 0xe0
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	440b      	add	r3, r1
 800e7e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e7e8:	89fb      	ldrh	r3, [r7, #14]
 800e7ea:	b2db      	uxtb	r3, r3
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3710      	adds	r7, #16
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
 800e7fc:	460b      	mov	r3, r1
 800e7fe:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e800:	78fb      	ldrb	r3, [r7, #3]
 800e802:	2b0a      	cmp	r3, #10
 800e804:	d80d      	bhi.n	800e822 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e806:	78fb      	ldrb	r3, [r7, #3]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	33e0      	adds	r3, #224	; 0xe0
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	4413      	add	r3, r2
 800e810:	685a      	ldr	r2, [r3, #4]
 800e812:	78fb      	ldrb	r3, [r7, #3]
 800e814:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e818:	6879      	ldr	r1, [r7, #4]
 800e81a:	33e0      	adds	r3, #224	; 0xe0
 800e81c:	009b      	lsls	r3, r3, #2
 800e81e:	440b      	add	r3, r1
 800e820:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e822:	2300      	movs	r3, #0
}
 800e824:	4618      	mov	r0, r3
 800e826:	370c      	adds	r7, #12
 800e828:	46bd      	mov	sp, r7
 800e82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82e:	4770      	bx	lr

0800e830 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e830:	b480      	push	{r7}
 800e832:	b085      	sub	sp, #20
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e838:	2300      	movs	r3, #0
 800e83a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e83c:	2300      	movs	r3, #0
 800e83e:	73fb      	strb	r3, [r7, #15]
 800e840:	e00f      	b.n	800e862 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e842:	7bfb      	ldrb	r3, [r7, #15]
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	33e0      	adds	r3, #224	; 0xe0
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	4413      	add	r3, r2
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e852:	2b00      	cmp	r3, #0
 800e854:	d102      	bne.n	800e85c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e856:	7bfb      	ldrb	r3, [r7, #15]
 800e858:	b29b      	uxth	r3, r3
 800e85a:	e007      	b.n	800e86c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e85c:	7bfb      	ldrb	r3, [r7, #15]
 800e85e:	3301      	adds	r3, #1
 800e860:	73fb      	strb	r3, [r7, #15]
 800e862:	7bfb      	ldrb	r3, [r7, #15]
 800e864:	2b0a      	cmp	r3, #10
 800e866:	d9ec      	bls.n	800e842 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e868:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3714      	adds	r7, #20
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e878:	b480      	push	{r7}
 800e87a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e87c:	bf00      	nop
 800e87e:	46bd      	mov	sp, r7
 800e880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e884:	4770      	bx	lr
	...

0800e888 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e88e:	f3ef 8305 	mrs	r3, IPSR
 800e892:	60bb      	str	r3, [r7, #8]
  return(result);
 800e894:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10f      	bne.n	800e8ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e89a:	f3ef 8310 	mrs	r3, PRIMASK
 800e89e:	607b      	str	r3, [r7, #4]
  return(result);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d105      	bne.n	800e8b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8a6:	f3ef 8311 	mrs	r3, BASEPRI
 800e8aa:	603b      	str	r3, [r7, #0]
  return(result);
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d007      	beq.n	800e8c2 <osKernelInitialize+0x3a>
 800e8b2:	4b0e      	ldr	r3, [pc, #56]	; (800e8ec <osKernelInitialize+0x64>)
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	d103      	bne.n	800e8c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e8ba:	f06f 0305 	mvn.w	r3, #5
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	e00c      	b.n	800e8dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e8c2:	4b0a      	ldr	r3, [pc, #40]	; (800e8ec <osKernelInitialize+0x64>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d105      	bne.n	800e8d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e8ca:	4b08      	ldr	r3, [pc, #32]	; (800e8ec <osKernelInitialize+0x64>)
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	60fb      	str	r3, [r7, #12]
 800e8d4:	e002      	b.n	800e8dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3714      	adds	r7, #20
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e8:	4770      	bx	lr
 800e8ea:	bf00      	nop
 800e8ec:	2000015c 	.word	0x2000015c

0800e8f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b084      	sub	sp, #16
 800e8f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8f6:	f3ef 8305 	mrs	r3, IPSR
 800e8fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d10f      	bne.n	800e922 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e902:	f3ef 8310 	mrs	r3, PRIMASK
 800e906:	607b      	str	r3, [r7, #4]
  return(result);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d105      	bne.n	800e91a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e90e:	f3ef 8311 	mrs	r3, BASEPRI
 800e912:	603b      	str	r3, [r7, #0]
  return(result);
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d007      	beq.n	800e92a <osKernelStart+0x3a>
 800e91a:	4b0f      	ldr	r3, [pc, #60]	; (800e958 <osKernelStart+0x68>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	d103      	bne.n	800e92a <osKernelStart+0x3a>
    stat = osErrorISR;
 800e922:	f06f 0305 	mvn.w	r3, #5
 800e926:	60fb      	str	r3, [r7, #12]
 800e928:	e010      	b.n	800e94c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e92a:	4b0b      	ldr	r3, [pc, #44]	; (800e958 <osKernelStart+0x68>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d109      	bne.n	800e946 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e932:	f7ff ffa1 	bl	800e878 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e936:	4b08      	ldr	r3, [pc, #32]	; (800e958 <osKernelStart+0x68>)
 800e938:	2202      	movs	r2, #2
 800e93a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e93c:	f001 fa9a 	bl	800fe74 <vTaskStartScheduler>
      stat = osOK;
 800e940:	2300      	movs	r3, #0
 800e942:	60fb      	str	r3, [r7, #12]
 800e944:	e002      	b.n	800e94c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e946:	f04f 33ff 	mov.w	r3, #4294967295
 800e94a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e94c:	68fb      	ldr	r3, [r7, #12]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3710      	adds	r7, #16
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	2000015c 	.word	0x2000015c

0800e95c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b090      	sub	sp, #64	; 0x40
 800e960:	af04      	add	r7, sp, #16
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e968:	2300      	movs	r3, #0
 800e96a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e96c:	f3ef 8305 	mrs	r3, IPSR
 800e970:	61fb      	str	r3, [r7, #28]
  return(result);
 800e972:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e974:	2b00      	cmp	r3, #0
 800e976:	f040 808f 	bne.w	800ea98 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e97a:	f3ef 8310 	mrs	r3, PRIMASK
 800e97e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d105      	bne.n	800e992 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e986:	f3ef 8311 	mrs	r3, BASEPRI
 800e98a:	617b      	str	r3, [r7, #20]
  return(result);
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <osThreadNew+0x3e>
 800e992:	4b44      	ldr	r3, [pc, #272]	; (800eaa4 <osThreadNew+0x148>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b02      	cmp	r3, #2
 800e998:	d07e      	beq.n	800ea98 <osThreadNew+0x13c>
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d07b      	beq.n	800ea98 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e9a0:	2380      	movs	r3, #128	; 0x80
 800e9a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e9a4:	2318      	movs	r3, #24
 800e9a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d045      	beq.n	800ea44 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d002      	beq.n	800e9c6 <osThreadNew+0x6a>
        name = attr->name;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	699b      	ldr	r3, [r3, #24]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d002      	beq.n	800e9d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	699b      	ldr	r3, [r3, #24]
 800e9d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d008      	beq.n	800e9ec <osThreadNew+0x90>
 800e9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9dc:	2b38      	cmp	r3, #56	; 0x38
 800e9de:	d805      	bhi.n	800e9ec <osThreadNew+0x90>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <osThreadNew+0x94>
        return (NULL);
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	e054      	b.n	800ea9a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	695b      	ldr	r3, [r3, #20]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d003      	beq.n	800ea00 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	695b      	ldr	r3, [r3, #20]
 800e9fc:	089b      	lsrs	r3, r3, #2
 800e9fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00e      	beq.n	800ea26 <osThreadNew+0xca>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	2b5b      	cmp	r3, #91	; 0x5b
 800ea0e:	d90a      	bls.n	800ea26 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d006      	beq.n	800ea26 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	695b      	ldr	r3, [r3, #20]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d002      	beq.n	800ea26 <osThreadNew+0xca>
        mem = 1;
 800ea20:	2301      	movs	r3, #1
 800ea22:	623b      	str	r3, [r7, #32]
 800ea24:	e010      	b.n	800ea48 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	689b      	ldr	r3, [r3, #8]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d10c      	bne.n	800ea48 <osThreadNew+0xec>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68db      	ldr	r3, [r3, #12]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d108      	bne.n	800ea48 <osThreadNew+0xec>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d104      	bne.n	800ea48 <osThreadNew+0xec>
          mem = 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	623b      	str	r3, [r7, #32]
 800ea42:	e001      	b.n	800ea48 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ea44:	2300      	movs	r3, #0
 800ea46:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ea48:	6a3b      	ldr	r3, [r7, #32]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d110      	bne.n	800ea70 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ea52:	687a      	ldr	r2, [r7, #4]
 800ea54:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea56:	9202      	str	r2, [sp, #8]
 800ea58:	9301      	str	r3, [sp, #4]
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f001 f833 	bl	800fad0 <xTaskCreateStatic>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	613b      	str	r3, [r7, #16]
 800ea6e:	e013      	b.n	800ea98 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ea70:	6a3b      	ldr	r3, [r7, #32]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d110      	bne.n	800ea98 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	b29a      	uxth	r2, r3
 800ea7a:	f107 0310 	add.w	r3, r7, #16
 800ea7e:	9301      	str	r3, [sp, #4]
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f001 f87b 	bl	800fb84 <xTaskCreate>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d001      	beq.n	800ea98 <osThreadNew+0x13c>
          hTask = NULL;
 800ea94:	2300      	movs	r3, #0
 800ea96:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea98:	693b      	ldr	r3, [r7, #16]
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3730      	adds	r7, #48	; 0x30
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	bd80      	pop	{r7, pc}
 800eaa2:	bf00      	nop
 800eaa4:	2000015c 	.word	0x2000015c

0800eaa8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b086      	sub	sp, #24
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eab0:	f3ef 8305 	mrs	r3, IPSR
 800eab4:	613b      	str	r3, [r7, #16]
  return(result);
 800eab6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d10f      	bne.n	800eadc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eabc:	f3ef 8310 	mrs	r3, PRIMASK
 800eac0:	60fb      	str	r3, [r7, #12]
  return(result);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d105      	bne.n	800ead4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eac8:	f3ef 8311 	mrs	r3, BASEPRI
 800eacc:	60bb      	str	r3, [r7, #8]
  return(result);
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d007      	beq.n	800eae4 <osDelay+0x3c>
 800ead4:	4b0a      	ldr	r3, [pc, #40]	; (800eb00 <osDelay+0x58>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	2b02      	cmp	r3, #2
 800eada:	d103      	bne.n	800eae4 <osDelay+0x3c>
    stat = osErrorISR;
 800eadc:	f06f 0305 	mvn.w	r3, #5
 800eae0:	617b      	str	r3, [r7, #20]
 800eae2:	e007      	b.n	800eaf4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d002      	beq.n	800eaf4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f001 f98c 	bl	800fe0c <vTaskDelay>
    }
  }

  return (stat);
 800eaf4:	697b      	ldr	r3, [r7, #20]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3718      	adds	r7, #24
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	2000015c 	.word	0x2000015c

0800eb04 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b08c      	sub	sp, #48	; 0x30
 800eb08:	af02      	add	r7, sp, #8
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800eb10:	2300      	movs	r3, #0
 800eb12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb14:	f3ef 8305 	mrs	r3, IPSR
 800eb18:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb1a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d170      	bne.n	800ec02 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb20:	f3ef 8310 	mrs	r3, PRIMASK
 800eb24:	617b      	str	r3, [r7, #20]
  return(result);
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d105      	bne.n	800eb38 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb2c:	f3ef 8311 	mrs	r3, BASEPRI
 800eb30:	613b      	str	r3, [r7, #16]
  return(result);
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d003      	beq.n	800eb40 <osMessageQueueNew+0x3c>
 800eb38:	4b34      	ldr	r3, [pc, #208]	; (800ec0c <osMessageQueueNew+0x108>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2b02      	cmp	r3, #2
 800eb3e:	d060      	beq.n	800ec02 <osMessageQueueNew+0xfe>
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d05d      	beq.n	800ec02 <osMessageQueueNew+0xfe>
 800eb46:	68bb      	ldr	r3, [r7, #8]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d05a      	beq.n	800ec02 <osMessageQueueNew+0xfe>
    mem = -1;
 800eb4c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb50:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d029      	beq.n	800ebac <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d012      	beq.n	800eb86 <osMessageQueueNew+0x82>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	68db      	ldr	r3, [r3, #12]
 800eb64:	2b4f      	cmp	r3, #79	; 0x4f
 800eb66:	d90e      	bls.n	800eb86 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00a      	beq.n	800eb86 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	695a      	ldr	r2, [r3, #20]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	68b9      	ldr	r1, [r7, #8]
 800eb78:	fb01 f303 	mul.w	r3, r1, r3
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d302      	bcc.n	800eb86 <osMessageQueueNew+0x82>
        mem = 1;
 800eb80:	2301      	movs	r3, #1
 800eb82:	623b      	str	r3, [r7, #32]
 800eb84:	e014      	b.n	800ebb0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d110      	bne.n	800ebb0 <osMessageQueueNew+0xac>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d10c      	bne.n	800ebb0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d108      	bne.n	800ebb0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	695b      	ldr	r3, [r3, #20]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d104      	bne.n	800ebb0 <osMessageQueueNew+0xac>
          mem = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	623b      	str	r3, [r7, #32]
 800ebaa:	e001      	b.n	800ebb0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	2b01      	cmp	r3, #1
 800ebb4:	d10c      	bne.n	800ebd0 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	691a      	ldr	r2, [r3, #16]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6899      	ldr	r1, [r3, #8]
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	9300      	str	r3, [sp, #0]
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	68b9      	ldr	r1, [r7, #8]
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f000 fa58 	bl	800f07c <xQueueGenericCreateStatic>
 800ebcc:	6278      	str	r0, [r7, #36]	; 0x24
 800ebce:	e008      	b.n	800ebe2 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800ebd0:	6a3b      	ldr	r3, [r7, #32]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d105      	bne.n	800ebe2 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	68b9      	ldr	r1, [r7, #8]
 800ebda:	68f8      	ldr	r0, [r7, #12]
 800ebdc:	f000 fac1 	bl	800f162 <xQueueGenericCreate>
 800ebe0:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ebe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00c      	beq.n	800ec02 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d003      	beq.n	800ebf6 <osMessageQueueNew+0xf2>
        name = attr->name;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	61fb      	str	r3, [r7, #28]
 800ebf4:	e001      	b.n	800ebfa <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ebfa:	69f9      	ldr	r1, [r7, #28]
 800ebfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebfe:	f000 ff0b 	bl	800fa18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ec02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3728      	adds	r7, #40	; 0x28
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	2000015c 	.word	0x2000015c

0800ec10 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08a      	sub	sp, #40	; 0x28
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	603b      	str	r3, [r7, #0]
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec28:	f3ef 8305 	mrs	r3, IPSR
 800ec2c:	61fb      	str	r3, [r7, #28]
  return(result);
 800ec2e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d10f      	bne.n	800ec54 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec34:	f3ef 8310 	mrs	r3, PRIMASK
 800ec38:	61bb      	str	r3, [r7, #24]
  return(result);
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d105      	bne.n	800ec4c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec40:	f3ef 8311 	mrs	r3, BASEPRI
 800ec44:	617b      	str	r3, [r7, #20]
  return(result);
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d02c      	beq.n	800eca6 <osMessageQueuePut+0x96>
 800ec4c:	4b28      	ldr	r3, [pc, #160]	; (800ecf0 <osMessageQueuePut+0xe0>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2b02      	cmp	r3, #2
 800ec52:	d128      	bne.n	800eca6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d005      	beq.n	800ec66 <osMessageQueuePut+0x56>
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d002      	beq.n	800ec66 <osMessageQueuePut+0x56>
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d003      	beq.n	800ec6e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ec66:	f06f 0303 	mvn.w	r3, #3
 800ec6a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec6c:	e039      	b.n	800ece2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ec72:	f107 0210 	add.w	r2, r7, #16
 800ec76:	2300      	movs	r3, #0
 800ec78:	68b9      	ldr	r1, [r7, #8]
 800ec7a:	6a38      	ldr	r0, [r7, #32]
 800ec7c:	f000 fbce 	bl	800f41c <xQueueGenericSendFromISR>
 800ec80:	4603      	mov	r3, r0
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d003      	beq.n	800ec8e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ec86:	f06f 0302 	mvn.w	r3, #2
 800ec8a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec8c:	e029      	b.n	800ece2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d026      	beq.n	800ece2 <osMessageQueuePut+0xd2>
 800ec94:	4b17      	ldr	r3, [pc, #92]	; (800ecf4 <osMessageQueuePut+0xe4>)
 800ec96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eca4:	e01d      	b.n	800ece2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d002      	beq.n	800ecb2 <osMessageQueuePut+0xa2>
 800ecac:	68bb      	ldr	r3, [r7, #8]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d103      	bne.n	800ecba <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ecb2:	f06f 0303 	mvn.w	r3, #3
 800ecb6:	627b      	str	r3, [r7, #36]	; 0x24
 800ecb8:	e014      	b.n	800ece4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ecba:	2300      	movs	r3, #0
 800ecbc:	683a      	ldr	r2, [r7, #0]
 800ecbe:	68b9      	ldr	r1, [r7, #8]
 800ecc0:	6a38      	ldr	r0, [r7, #32]
 800ecc2:	f000 fab1 	bl	800f228 <xQueueGenericSend>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d00b      	beq.n	800ece4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d003      	beq.n	800ecda <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ecd2:	f06f 0301 	mvn.w	r3, #1
 800ecd6:	627b      	str	r3, [r7, #36]	; 0x24
 800ecd8:	e004      	b.n	800ece4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ecda:	f06f 0302 	mvn.w	r3, #2
 800ecde:	627b      	str	r3, [r7, #36]	; 0x24
 800ece0:	e000      	b.n	800ece4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ece2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ece4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3728      	adds	r7, #40	; 0x28
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	2000015c 	.word	0x2000015c
 800ecf4:	e000ed04 	.word	0xe000ed04

0800ecf8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08a      	sub	sp, #40	; 0x28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	607a      	str	r2, [r7, #4]
 800ed04:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed0e:	f3ef 8305 	mrs	r3, IPSR
 800ed12:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed14:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10f      	bne.n	800ed3a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ed1e:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d105      	bne.n	800ed32 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed26:	f3ef 8311 	mrs	r3, BASEPRI
 800ed2a:	617b      	str	r3, [r7, #20]
  return(result);
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d02c      	beq.n	800ed8c <osMessageQueueGet+0x94>
 800ed32:	4b28      	ldr	r3, [pc, #160]	; (800edd4 <osMessageQueueGet+0xdc>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d128      	bne.n	800ed8c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed3a:	6a3b      	ldr	r3, [r7, #32]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d005      	beq.n	800ed4c <osMessageQueueGet+0x54>
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d002      	beq.n	800ed4c <osMessageQueueGet+0x54>
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d003      	beq.n	800ed54 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ed4c:	f06f 0303 	mvn.w	r3, #3
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed52:	e038      	b.n	800edc6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ed54:	2300      	movs	r3, #0
 800ed56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ed58:	f107 0310 	add.w	r3, r7, #16
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	68b9      	ldr	r1, [r7, #8]
 800ed60:	6a38      	ldr	r0, [r7, #32]
 800ed62:	f000 fccb 	bl	800f6fc <xQueueReceiveFromISR>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d003      	beq.n	800ed74 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ed6c:	f06f 0302 	mvn.w	r3, #2
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed72:	e028      	b.n	800edc6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d025      	beq.n	800edc6 <osMessageQueueGet+0xce>
 800ed7a:	4b17      	ldr	r3, [pc, #92]	; (800edd8 <osMessageQueueGet+0xe0>)
 800ed7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed80:	601a      	str	r2, [r3, #0]
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed8a:	e01c      	b.n	800edc6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ed8c:	6a3b      	ldr	r3, [r7, #32]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d002      	beq.n	800ed98 <osMessageQueueGet+0xa0>
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d103      	bne.n	800eda0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ed98:	f06f 0303 	mvn.w	r3, #3
 800ed9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ed9e:	e013      	b.n	800edc8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eda0:	683a      	ldr	r2, [r7, #0]
 800eda2:	68b9      	ldr	r1, [r7, #8]
 800eda4:	6a38      	ldr	r0, [r7, #32]
 800eda6:	f000 fbcd 	bl	800f544 <xQueueReceive>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b01      	cmp	r3, #1
 800edae:	d00b      	beq.n	800edc8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d003      	beq.n	800edbe <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800edb6:	f06f 0301 	mvn.w	r3, #1
 800edba:	627b      	str	r3, [r7, #36]	; 0x24
 800edbc:	e004      	b.n	800edc8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800edbe:	f06f 0302 	mvn.w	r3, #2
 800edc2:	627b      	str	r3, [r7, #36]	; 0x24
 800edc4:	e000      	b.n	800edc8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800edc6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3728      	adds	r7, #40	; 0x28
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}
 800edd2:	bf00      	nop
 800edd4:	2000015c 	.word	0x2000015c
 800edd8:	e000ed04 	.word	0xe000ed04

0800eddc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	4a07      	ldr	r2, [pc, #28]	; (800ee08 <vApplicationGetIdleTaskMemory+0x2c>)
 800edec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	4a06      	ldr	r2, [pc, #24]	; (800ee0c <vApplicationGetIdleTaskMemory+0x30>)
 800edf2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2280      	movs	r2, #128	; 0x80
 800edf8:	601a      	str	r2, [r3, #0]
}
 800edfa:	bf00      	nop
 800edfc:	3714      	adds	r7, #20
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop
 800ee08:	20000160 	.word	0x20000160
 800ee0c:	200001bc 	.word	0x200001bc

0800ee10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	4a07      	ldr	r2, [pc, #28]	; (800ee3c <vApplicationGetTimerTaskMemory+0x2c>)
 800ee20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	4a06      	ldr	r2, [pc, #24]	; (800ee40 <vApplicationGetTimerTaskMemory+0x30>)
 800ee26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee2e:	601a      	str	r2, [r3, #0]
}
 800ee30:	bf00      	nop
 800ee32:	3714      	adds	r7, #20
 800ee34:	46bd      	mov	sp, r7
 800ee36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3a:	4770      	bx	lr
 800ee3c:	200003bc 	.word	0x200003bc
 800ee40:	20000418 	.word	0x20000418

0800ee44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f103 0208 	add.w	r2, r3, #8
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f04f 32ff 	mov.w	r2, #4294967295
 800ee5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f103 0208 	add.w	r2, r3, #8
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f103 0208 	add.w	r2, r3, #8
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ee78:	bf00      	nop
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ee92:	bf00      	nop
 800ee94:	370c      	adds	r7, #12
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee9e:	b480      	push	{r7}
 800eea0:	b085      	sub	sp, #20
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
 800eea6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	689a      	ldr	r2, [r3, #8]
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	683a      	ldr	r2, [r7, #0]
 800eec2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	1c5a      	adds	r2, r3, #1
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	601a      	str	r2, [r3, #0]
}
 800eeda:	bf00      	nop
 800eedc:	3714      	adds	r7, #20
 800eede:	46bd      	mov	sp, r7
 800eee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee4:	4770      	bx	lr

0800eee6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eee6:	b480      	push	{r7}
 800eee8:	b085      	sub	sp, #20
 800eeea:	af00      	add	r7, sp, #0
 800eeec:	6078      	str	r0, [r7, #4]
 800eeee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eefc:	d103      	bne.n	800ef06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	691b      	ldr	r3, [r3, #16]
 800ef02:	60fb      	str	r3, [r7, #12]
 800ef04:	e00c      	b.n	800ef20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	3308      	adds	r3, #8
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	e002      	b.n	800ef14 <vListInsert+0x2e>
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	60fb      	str	r3, [r7, #12]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68ba      	ldr	r2, [r7, #8]
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d2f6      	bcs.n	800ef0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	685a      	ldr	r2, [r3, #4]
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	68fa      	ldr	r2, [r7, #12]
 800ef34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	683a      	ldr	r2, [r7, #0]
 800ef3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	687a      	ldr	r2, [r7, #4]
 800ef40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	1c5a      	adds	r2, r3, #1
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	601a      	str	r2, [r3, #0]
}
 800ef4c:	bf00      	nop
 800ef4e:	3714      	adds	r7, #20
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	691b      	ldr	r3, [r3, #16]
 800ef64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	687a      	ldr	r2, [r7, #4]
 800ef6c:	6892      	ldr	r2, [r2, #8]
 800ef6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	687a      	ldr	r2, [r7, #4]
 800ef76:	6852      	ldr	r2, [r2, #4]
 800ef78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d103      	bne.n	800ef8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	689a      	ldr	r2, [r3, #8]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	1e5a      	subs	r2, r3, #1
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	681b      	ldr	r3, [r3, #0]
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3714      	adds	r7, #20
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d109      	bne.n	800efd4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800efc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc4:	f383 8811 	msr	BASEPRI, r3
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	60bb      	str	r3, [r7, #8]
 800efd2:	e7fe      	b.n	800efd2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800efd4:	f002 f8d2 	bl	801117c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efe0:	68f9      	ldr	r1, [r7, #12]
 800efe2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800efe4:	fb01 f303 	mul.w	r3, r1, r3
 800efe8:	441a      	add	r2, r3
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2200      	movs	r2, #0
 800eff2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f004:	3b01      	subs	r3, #1
 800f006:	68f9      	ldr	r1, [r7, #12]
 800f008:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f00a:	fb01 f303 	mul.w	r3, r1, r3
 800f00e:	441a      	add	r2, r3
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	22ff      	movs	r2, #255	; 0xff
 800f018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	22ff      	movs	r2, #255	; 0xff
 800f020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d114      	bne.n	800f054 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	691b      	ldr	r3, [r3, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d01a      	beq.n	800f068 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3310      	adds	r3, #16
 800f036:	4618      	mov	r0, r3
 800f038:	f001 f99c 	bl	8010374 <xTaskRemoveFromEventList>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d012      	beq.n	800f068 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f042:	4b0d      	ldr	r3, [pc, #52]	; (800f078 <xQueueGenericReset+0xcc>)
 800f044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f048:	601a      	str	r2, [r3, #0]
 800f04a:	f3bf 8f4f 	dsb	sy
 800f04e:	f3bf 8f6f 	isb	sy
 800f052:	e009      	b.n	800f068 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	3310      	adds	r3, #16
 800f058:	4618      	mov	r0, r3
 800f05a:	f7ff fef3 	bl	800ee44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	3324      	adds	r3, #36	; 0x24
 800f062:	4618      	mov	r0, r3
 800f064:	f7ff feee 	bl	800ee44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f068:	f002 f8b6 	bl	80111d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f06c:	2301      	movs	r3, #1
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	e000ed04 	.word	0xe000ed04

0800f07c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b08e      	sub	sp, #56	; 0x38
 800f080:	af02      	add	r7, sp, #8
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	607a      	str	r2, [r7, #4]
 800f088:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d109      	bne.n	800f0a4 <xQueueGenericCreateStatic+0x28>
 800f090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f094:	f383 8811 	msr	BASEPRI, r3
 800f098:	f3bf 8f6f 	isb	sy
 800f09c:	f3bf 8f4f 	dsb	sy
 800f0a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0a2:	e7fe      	b.n	800f0a2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d109      	bne.n	800f0be <xQueueGenericCreateStatic+0x42>
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f0bc:	e7fe      	b.n	800f0bc <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d002      	beq.n	800f0ca <xQueueGenericCreateStatic+0x4e>
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d001      	beq.n	800f0ce <xQueueGenericCreateStatic+0x52>
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e000      	b.n	800f0d0 <xQueueGenericCreateStatic+0x54>
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d109      	bne.n	800f0e8 <xQueueGenericCreateStatic+0x6c>
 800f0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d8:	f383 8811 	msr	BASEPRI, r3
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	623b      	str	r3, [r7, #32]
 800f0e6:	e7fe      	b.n	800f0e6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d102      	bne.n	800f0f4 <xQueueGenericCreateStatic+0x78>
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d101      	bne.n	800f0f8 <xQueueGenericCreateStatic+0x7c>
 800f0f4:	2301      	movs	r3, #1
 800f0f6:	e000      	b.n	800f0fa <xQueueGenericCreateStatic+0x7e>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d109      	bne.n	800f112 <xQueueGenericCreateStatic+0x96>
 800f0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	61fb      	str	r3, [r7, #28]
 800f110:	e7fe      	b.n	800f110 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f112:	2350      	movs	r3, #80	; 0x50
 800f114:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2b50      	cmp	r3, #80	; 0x50
 800f11a:	d009      	beq.n	800f130 <xQueueGenericCreateStatic+0xb4>
 800f11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f120:	f383 8811 	msr	BASEPRI, r3
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	f3bf 8f4f 	dsb	sy
 800f12c:	61bb      	str	r3, [r7, #24]
 800f12e:	e7fe      	b.n	800f12e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f130:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00d      	beq.n	800f158 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13e:	2201      	movs	r2, #1
 800f140:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f144:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	4613      	mov	r3, r2
 800f14e:	687a      	ldr	r2, [r7, #4]
 800f150:	68b9      	ldr	r1, [r7, #8]
 800f152:	68f8      	ldr	r0, [r7, #12]
 800f154:	f000 f844 	bl	800f1e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3730      	adds	r7, #48	; 0x30
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f162:	b580      	push	{r7, lr}
 800f164:	b08a      	sub	sp, #40	; 0x28
 800f166:	af02      	add	r7, sp, #8
 800f168:	60f8      	str	r0, [r7, #12]
 800f16a:	60b9      	str	r1, [r7, #8]
 800f16c:	4613      	mov	r3, r2
 800f16e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d109      	bne.n	800f18a <xQueueGenericCreate+0x28>
 800f176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	613b      	str	r3, [r7, #16]
 800f188:	e7fe      	b.n	800f188 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d102      	bne.n	800f196 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f190:	2300      	movs	r3, #0
 800f192:	61fb      	str	r3, [r7, #28]
 800f194:	e004      	b.n	800f1a0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	68ba      	ldr	r2, [r7, #8]
 800f19a:	fb02 f303 	mul.w	r3, r2, r3
 800f19e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	3350      	adds	r3, #80	; 0x50
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f002 f903 	bl	80113b0 <pvPortMalloc>
 800f1aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f1ac:	69bb      	ldr	r3, [r7, #24]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d011      	beq.n	800f1d6 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f1b2:	69bb      	ldr	r3, [r7, #24]
 800f1b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	3350      	adds	r3, #80	; 0x50
 800f1ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1c4:	79fa      	ldrb	r2, [r7, #7]
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	9300      	str	r3, [sp, #0]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	697a      	ldr	r2, [r7, #20]
 800f1ce:	68b9      	ldr	r1, [r7, #8]
 800f1d0:	68f8      	ldr	r0, [r7, #12]
 800f1d2:	f000 f805 	bl	800f1e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f1d6:	69bb      	ldr	r3, [r7, #24]
	}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3720      	adds	r7, #32
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}

0800f1e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
 800f1ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d103      	bne.n	800f1fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	69ba      	ldr	r2, [r7, #24]
 800f1f8:	601a      	str	r2, [r3, #0]
 800f1fa:	e002      	b.n	800f202 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	68fa      	ldr	r2, [r7, #12]
 800f206:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f208:	69bb      	ldr	r3, [r7, #24]
 800f20a:	68ba      	ldr	r2, [r7, #8]
 800f20c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f20e:	2101      	movs	r1, #1
 800f210:	69b8      	ldr	r0, [r7, #24]
 800f212:	f7ff fecb 	bl	800efac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	78fa      	ldrb	r2, [r7, #3]
 800f21a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f21e:	bf00      	nop
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
	...

0800f228 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b08e      	sub	sp, #56	; 0x38
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	60f8      	str	r0, [r7, #12]
 800f230:	60b9      	str	r1, [r7, #8]
 800f232:	607a      	str	r2, [r7, #4]
 800f234:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f236:	2300      	movs	r3, #0
 800f238:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f240:	2b00      	cmp	r3, #0
 800f242:	d109      	bne.n	800f258 <xQueueGenericSend+0x30>
 800f244:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f248:	f383 8811 	msr	BASEPRI, r3
 800f24c:	f3bf 8f6f 	isb	sy
 800f250:	f3bf 8f4f 	dsb	sy
 800f254:	62bb      	str	r3, [r7, #40]	; 0x28
 800f256:	e7fe      	b.n	800f256 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d103      	bne.n	800f266 <xQueueGenericSend+0x3e>
 800f25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f262:	2b00      	cmp	r3, #0
 800f264:	d101      	bne.n	800f26a <xQueueGenericSend+0x42>
 800f266:	2301      	movs	r3, #1
 800f268:	e000      	b.n	800f26c <xQueueGenericSend+0x44>
 800f26a:	2300      	movs	r3, #0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d109      	bne.n	800f284 <xQueueGenericSend+0x5c>
 800f270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f274:	f383 8811 	msr	BASEPRI, r3
 800f278:	f3bf 8f6f 	isb	sy
 800f27c:	f3bf 8f4f 	dsb	sy
 800f280:	627b      	str	r3, [r7, #36]	; 0x24
 800f282:	e7fe      	b.n	800f282 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	2b02      	cmp	r3, #2
 800f288:	d103      	bne.n	800f292 <xQueueGenericSend+0x6a>
 800f28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d101      	bne.n	800f296 <xQueueGenericSend+0x6e>
 800f292:	2301      	movs	r3, #1
 800f294:	e000      	b.n	800f298 <xQueueGenericSend+0x70>
 800f296:	2300      	movs	r3, #0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d109      	bne.n	800f2b0 <xQueueGenericSend+0x88>
 800f29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a0:	f383 8811 	msr	BASEPRI, r3
 800f2a4:	f3bf 8f6f 	isb	sy
 800f2a8:	f3bf 8f4f 	dsb	sy
 800f2ac:	623b      	str	r3, [r7, #32]
 800f2ae:	e7fe      	b.n	800f2ae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2b0:	f001 fa16 	bl	80106e0 <xTaskGetSchedulerState>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d102      	bne.n	800f2c0 <xQueueGenericSend+0x98>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d101      	bne.n	800f2c4 <xQueueGenericSend+0x9c>
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	e000      	b.n	800f2c6 <xQueueGenericSend+0x9e>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d109      	bne.n	800f2de <xQueueGenericSend+0xb6>
 800f2ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ce:	f383 8811 	msr	BASEPRI, r3
 800f2d2:	f3bf 8f6f 	isb	sy
 800f2d6:	f3bf 8f4f 	dsb	sy
 800f2da:	61fb      	str	r3, [r7, #28]
 800f2dc:	e7fe      	b.n	800f2dc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2de:	f001 ff4d 	bl	801117c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d302      	bcc.n	800f2f4 <xQueueGenericSend+0xcc>
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	2b02      	cmp	r3, #2
 800f2f2:	d129      	bne.n	800f348 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2f4:	683a      	ldr	r2, [r7, #0]
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2fa:	f000 fa7c 	bl	800f7f6 <prvCopyDataToQueue>
 800f2fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f304:	2b00      	cmp	r3, #0
 800f306:	d010      	beq.n	800f32a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30a:	3324      	adds	r3, #36	; 0x24
 800f30c:	4618      	mov	r0, r3
 800f30e:	f001 f831 	bl	8010374 <xTaskRemoveFromEventList>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	d013      	beq.n	800f340 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f318:	4b3f      	ldr	r3, [pc, #252]	; (800f418 <xQueueGenericSend+0x1f0>)
 800f31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f31e:	601a      	str	r2, [r3, #0]
 800f320:	f3bf 8f4f 	dsb	sy
 800f324:	f3bf 8f6f 	isb	sy
 800f328:	e00a      	b.n	800f340 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d007      	beq.n	800f340 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f330:	4b39      	ldr	r3, [pc, #228]	; (800f418 <xQueueGenericSend+0x1f0>)
 800f332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f340:	f001 ff4a 	bl	80111d8 <vPortExitCritical>
				return pdPASS;
 800f344:	2301      	movs	r3, #1
 800f346:	e063      	b.n	800f410 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d103      	bne.n	800f356 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f34e:	f001 ff43 	bl	80111d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f352:	2300      	movs	r3, #0
 800f354:	e05c      	b.n	800f410 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d106      	bne.n	800f36a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f35c:	f107 0314 	add.w	r3, r7, #20
 800f360:	4618      	mov	r0, r3
 800f362:	f001 f869 	bl	8010438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f366:	2301      	movs	r3, #1
 800f368:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f36a:	f001 ff35 	bl	80111d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f36e:	f000 fde5 	bl	800ff3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f372:	f001 ff03 	bl	801117c <vPortEnterCritical>
 800f376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f37c:	b25b      	sxtb	r3, r3
 800f37e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f382:	d103      	bne.n	800f38c <xQueueGenericSend+0x164>
 800f384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f386:	2200      	movs	r2, #0
 800f388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f392:	b25b      	sxtb	r3, r3
 800f394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f398:	d103      	bne.n	800f3a2 <xQueueGenericSend+0x17a>
 800f39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39c:	2200      	movs	r2, #0
 800f39e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3a2:	f001 ff19 	bl	80111d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3a6:	1d3a      	adds	r2, r7, #4
 800f3a8:	f107 0314 	add.w	r3, r7, #20
 800f3ac:	4611      	mov	r1, r2
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f001 f858 	bl	8010464 <xTaskCheckForTimeOut>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d124      	bne.n	800f404 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f3ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3bc:	f000 fb13 	bl	800f9e6 <prvIsQueueFull>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d018      	beq.n	800f3f8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c8:	3310      	adds	r3, #16
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	4611      	mov	r1, r2
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f000 ff82 	bl	80102d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3d6:	f000 fa9e 	bl	800f916 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f3da:	f000 fdbd 	bl	800ff58 <xTaskResumeAll>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	f47f af7c 	bne.w	800f2de <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f3e6:	4b0c      	ldr	r3, [pc, #48]	; (800f418 <xQueueGenericSend+0x1f0>)
 800f3e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	f3bf 8f4f 	dsb	sy
 800f3f2:	f3bf 8f6f 	isb	sy
 800f3f6:	e772      	b.n	800f2de <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f3f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3fa:	f000 fa8c 	bl	800f916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3fe:	f000 fdab 	bl	800ff58 <xTaskResumeAll>
 800f402:	e76c      	b.n	800f2de <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f406:	f000 fa86 	bl	800f916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f40a:	f000 fda5 	bl	800ff58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f40e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f410:	4618      	mov	r0, r3
 800f412:	3738      	adds	r7, #56	; 0x38
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	e000ed04 	.word	0xe000ed04

0800f41c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b08e      	sub	sp, #56	; 0x38
 800f420:	af00      	add	r7, sp, #0
 800f422:	60f8      	str	r0, [r7, #12]
 800f424:	60b9      	str	r1, [r7, #8]
 800f426:	607a      	str	r2, [r7, #4]
 800f428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f430:	2b00      	cmp	r3, #0
 800f432:	d109      	bne.n	800f448 <xQueueGenericSendFromISR+0x2c>
 800f434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	627b      	str	r3, [r7, #36]	; 0x24
 800f446:	e7fe      	b.n	800f446 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d103      	bne.n	800f456 <xQueueGenericSendFromISR+0x3a>
 800f44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f452:	2b00      	cmp	r3, #0
 800f454:	d101      	bne.n	800f45a <xQueueGenericSendFromISR+0x3e>
 800f456:	2301      	movs	r3, #1
 800f458:	e000      	b.n	800f45c <xQueueGenericSendFromISR+0x40>
 800f45a:	2300      	movs	r3, #0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d109      	bne.n	800f474 <xQueueGenericSendFromISR+0x58>
 800f460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f464:	f383 8811 	msr	BASEPRI, r3
 800f468:	f3bf 8f6f 	isb	sy
 800f46c:	f3bf 8f4f 	dsb	sy
 800f470:	623b      	str	r3, [r7, #32]
 800f472:	e7fe      	b.n	800f472 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	2b02      	cmp	r3, #2
 800f478:	d103      	bne.n	800f482 <xQueueGenericSendFromISR+0x66>
 800f47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d101      	bne.n	800f486 <xQueueGenericSendFromISR+0x6a>
 800f482:	2301      	movs	r3, #1
 800f484:	e000      	b.n	800f488 <xQueueGenericSendFromISR+0x6c>
 800f486:	2300      	movs	r3, #0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d109      	bne.n	800f4a0 <xQueueGenericSendFromISR+0x84>
 800f48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f490:	f383 8811 	msr	BASEPRI, r3
 800f494:	f3bf 8f6f 	isb	sy
 800f498:	f3bf 8f4f 	dsb	sy
 800f49c:	61fb      	str	r3, [r7, #28]
 800f49e:	e7fe      	b.n	800f49e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4a0:	f001 ff48 	bl	8011334 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f4a4:	f3ef 8211 	mrs	r2, BASEPRI
 800f4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ac:	f383 8811 	msr	BASEPRI, r3
 800f4b0:	f3bf 8f6f 	isb	sy
 800f4b4:	f3bf 8f4f 	dsb	sy
 800f4b8:	61ba      	str	r2, [r7, #24]
 800f4ba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f4bc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d302      	bcc.n	800f4d2 <xQueueGenericSendFromISR+0xb6>
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	2b02      	cmp	r3, #2
 800f4d0:	d12c      	bne.n	800f52c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f4dc:	683a      	ldr	r2, [r7, #0]
 800f4de:	68b9      	ldr	r1, [r7, #8]
 800f4e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4e2:	f000 f988 	bl	800f7f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f4e6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4ee:	d112      	bne.n	800f516 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d016      	beq.n	800f526 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fa:	3324      	adds	r3, #36	; 0x24
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f000 ff39 	bl	8010374 <xTaskRemoveFromEventList>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00e      	beq.n	800f526 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00b      	beq.n	800f526 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2201      	movs	r2, #1
 800f512:	601a      	str	r2, [r3, #0]
 800f514:	e007      	b.n	800f526 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f51a:	3301      	adds	r3, #1
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	b25a      	sxtb	r2, r3
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f526:	2301      	movs	r3, #1
 800f528:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f52a:	e001      	b.n	800f530 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f52c:	2300      	movs	r3, #0
 800f52e:	637b      	str	r3, [r7, #52]	; 0x34
 800f530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f532:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3738      	adds	r7, #56	; 0x38
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b08c      	sub	sp, #48	; 0x30
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f550:	2300      	movs	r3, #0
 800f552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d109      	bne.n	800f572 <xQueueReceive+0x2e>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	623b      	str	r3, [r7, #32]
 800f570:	e7fe      	b.n	800f570 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d103      	bne.n	800f580 <xQueueReceive+0x3c>
 800f578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d101      	bne.n	800f584 <xQueueReceive+0x40>
 800f580:	2301      	movs	r3, #1
 800f582:	e000      	b.n	800f586 <xQueueReceive+0x42>
 800f584:	2300      	movs	r3, #0
 800f586:	2b00      	cmp	r3, #0
 800f588:	d109      	bne.n	800f59e <xQueueReceive+0x5a>
 800f58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58e:	f383 8811 	msr	BASEPRI, r3
 800f592:	f3bf 8f6f 	isb	sy
 800f596:	f3bf 8f4f 	dsb	sy
 800f59a:	61fb      	str	r3, [r7, #28]
 800f59c:	e7fe      	b.n	800f59c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f59e:	f001 f89f 	bl	80106e0 <xTaskGetSchedulerState>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d102      	bne.n	800f5ae <xQueueReceive+0x6a>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d101      	bne.n	800f5b2 <xQueueReceive+0x6e>
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e000      	b.n	800f5b4 <xQueueReceive+0x70>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <xQueueReceive+0x88>
 800f5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5bc:	f383 8811 	msr	BASEPRI, r3
 800f5c0:	f3bf 8f6f 	isb	sy
 800f5c4:	f3bf 8f4f 	dsb	sy
 800f5c8:	61bb      	str	r3, [r7, #24]
 800f5ca:	e7fe      	b.n	800f5ca <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5cc:	f001 fdd6 	bl	801117c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d01f      	beq.n	800f61c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5e0:	f000 f973 	bl	800f8ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	1e5a      	subs	r2, r3, #1
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ee:	691b      	ldr	r3, [r3, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00f      	beq.n	800f614 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f6:	3310      	adds	r3, #16
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f000 febb 	bl	8010374 <xTaskRemoveFromEventList>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d007      	beq.n	800f614 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f604:	4b3c      	ldr	r3, [pc, #240]	; (800f6f8 <xQueueReceive+0x1b4>)
 800f606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f60a:	601a      	str	r2, [r3, #0]
 800f60c:	f3bf 8f4f 	dsb	sy
 800f610:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f614:	f001 fde0 	bl	80111d8 <vPortExitCritical>
				return pdPASS;
 800f618:	2301      	movs	r3, #1
 800f61a:	e069      	b.n	800f6f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d103      	bne.n	800f62a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f622:	f001 fdd9 	bl	80111d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f626:	2300      	movs	r3, #0
 800f628:	e062      	b.n	800f6f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d106      	bne.n	800f63e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f630:	f107 0310 	add.w	r3, r7, #16
 800f634:	4618      	mov	r0, r3
 800f636:	f000 feff 	bl	8010438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f63a:	2301      	movs	r3, #1
 800f63c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f63e:	f001 fdcb 	bl	80111d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f642:	f000 fc7b 	bl	800ff3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f646:	f001 fd99 	bl	801117c <vPortEnterCritical>
 800f64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f650:	b25b      	sxtb	r3, r3
 800f652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f656:	d103      	bne.n	800f660 <xQueueReceive+0x11c>
 800f658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f65a:	2200      	movs	r2, #0
 800f65c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f666:	b25b      	sxtb	r3, r3
 800f668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66c:	d103      	bne.n	800f676 <xQueueReceive+0x132>
 800f66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f670:	2200      	movs	r2, #0
 800f672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f676:	f001 fdaf 	bl	80111d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f67a:	1d3a      	adds	r2, r7, #4
 800f67c:	f107 0310 	add.w	r3, r7, #16
 800f680:	4611      	mov	r1, r2
 800f682:	4618      	mov	r0, r3
 800f684:	f000 feee 	bl	8010464 <xTaskCheckForTimeOut>
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d123      	bne.n	800f6d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f68e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f690:	f000 f993 	bl	800f9ba <prvIsQueueEmpty>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	d017      	beq.n	800f6ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69c:	3324      	adds	r3, #36	; 0x24
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f000 fe18 	bl	80102d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f6a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6aa:	f000 f934 	bl	800f916 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f6ae:	f000 fc53 	bl	800ff58 <xTaskResumeAll>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d189      	bne.n	800f5cc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f6b8:	4b0f      	ldr	r3, [pc, #60]	; (800f6f8 <xQueueReceive+0x1b4>)
 800f6ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6be:	601a      	str	r2, [r3, #0]
 800f6c0:	f3bf 8f4f 	dsb	sy
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	e780      	b.n	800f5cc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f6ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6cc:	f000 f923 	bl	800f916 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6d0:	f000 fc42 	bl	800ff58 <xTaskResumeAll>
 800f6d4:	e77a      	b.n	800f5cc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6d8:	f000 f91d 	bl	800f916 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f6dc:	f000 fc3c 	bl	800ff58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6e2:	f000 f96a 	bl	800f9ba <prvIsQueueEmpty>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f43f af6f 	beq.w	800f5cc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f6ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3730      	adds	r7, #48	; 0x30
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	e000ed04 	.word	0xe000ed04

0800f6fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b08e      	sub	sp, #56	; 0x38
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d109      	bne.n	800f726 <xQueueReceiveFromISR+0x2a>
 800f712:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f716:	f383 8811 	msr	BASEPRI, r3
 800f71a:	f3bf 8f6f 	isb	sy
 800f71e:	f3bf 8f4f 	dsb	sy
 800f722:	623b      	str	r3, [r7, #32]
 800f724:	e7fe      	b.n	800f724 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d103      	bne.n	800f734 <xQueueReceiveFromISR+0x38>
 800f72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f730:	2b00      	cmp	r3, #0
 800f732:	d101      	bne.n	800f738 <xQueueReceiveFromISR+0x3c>
 800f734:	2301      	movs	r3, #1
 800f736:	e000      	b.n	800f73a <xQueueReceiveFromISR+0x3e>
 800f738:	2300      	movs	r3, #0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d109      	bne.n	800f752 <xQueueReceiveFromISR+0x56>
 800f73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f742:	f383 8811 	msr	BASEPRI, r3
 800f746:	f3bf 8f6f 	isb	sy
 800f74a:	f3bf 8f4f 	dsb	sy
 800f74e:	61fb      	str	r3, [r7, #28]
 800f750:	e7fe      	b.n	800f750 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f752:	f001 fdef 	bl	8011334 <vPortValidateInterruptPriority>
	__asm volatile
 800f756:	f3ef 8211 	mrs	r2, BASEPRI
 800f75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	61ba      	str	r2, [r7, #24]
 800f76c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f76e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f770:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f776:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d02f      	beq.n	800f7de <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f788:	68b9      	ldr	r1, [r7, #8]
 800f78a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f78c:	f000 f89d 	bl	800f8ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f792:	1e5a      	subs	r2, r3, #1
 800f794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f796:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f798:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a0:	d112      	bne.n	800f7c8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	691b      	ldr	r3, [r3, #16]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d016      	beq.n	800f7d8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ac:	3310      	adds	r3, #16
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f000 fde0 	bl	8010374 <xTaskRemoveFromEventList>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00e      	beq.n	800f7d8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00b      	beq.n	800f7d8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	601a      	str	r2, [r3, #0]
 800f7c6:	e007      	b.n	800f7d8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	b2db      	uxtb	r3, r3
 800f7d0:	b25a      	sxtb	r2, r3
 800f7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	637b      	str	r3, [r7, #52]	; 0x34
 800f7dc:	e001      	b.n	800f7e2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	637b      	str	r3, [r7, #52]	; 0x34
 800f7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f7ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3738      	adds	r7, #56	; 0x38
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b086      	sub	sp, #24
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	60f8      	str	r0, [r7, #12]
 800f7fe:	60b9      	str	r1, [r7, #8]
 800f800:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f802:	2300      	movs	r3, #0
 800f804:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f80a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10d      	bne.n	800f830 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d14d      	bne.n	800f8b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	4618      	mov	r0, r3
 800f822:	f000 ff7b 	bl	801071c <xTaskPriorityDisinherit>
 800f826:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2200      	movs	r2, #0
 800f82c:	609a      	str	r2, [r3, #8]
 800f82e:	e043      	b.n	800f8b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d119      	bne.n	800f86a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6858      	ldr	r0, [r3, #4]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f83e:	461a      	mov	r2, r3
 800f840:	68b9      	ldr	r1, [r7, #8]
 800f842:	f002 fac7 	bl	8011dd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	685a      	ldr	r2, [r3, #4]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f84e:	441a      	add	r2, r3
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	685a      	ldr	r2, [r3, #4]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	689b      	ldr	r3, [r3, #8]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d32b      	bcc.n	800f8b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	605a      	str	r2, [r3, #4]
 800f868:	e026      	b.n	800f8b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	68d8      	ldr	r0, [r3, #12]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f872:	461a      	mov	r2, r3
 800f874:	68b9      	ldr	r1, [r7, #8]
 800f876:	f002 faad 	bl	8011dd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	68da      	ldr	r2, [r3, #12]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f882:	425b      	negs	r3, r3
 800f884:	441a      	add	r2, r3
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	68da      	ldr	r2, [r3, #12]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	429a      	cmp	r2, r3
 800f894:	d207      	bcs.n	800f8a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	689a      	ldr	r2, [r3, #8]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f89e:	425b      	negs	r3, r3
 800f8a0:	441a      	add	r2, r3
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	d105      	bne.n	800f8b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d002      	beq.n	800f8b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	3b01      	subs	r3, #1
 800f8b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	1c5a      	adds	r2, r3, #1
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f8c0:	697b      	ldr	r3, [r7, #20]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3718      	adds	r7, #24
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f8ca:	b580      	push	{r7, lr}
 800f8cc:	b082      	sub	sp, #8
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d018      	beq.n	800f90e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	68da      	ldr	r2, [r3, #12]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8e4:	441a      	add	r2, r3
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	68da      	ldr	r2, [r3, #12]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	689b      	ldr	r3, [r3, #8]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d303      	bcc.n	800f8fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	68d9      	ldr	r1, [r3, #12]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f906:	461a      	mov	r2, r3
 800f908:	6838      	ldr	r0, [r7, #0]
 800f90a:	f002 fa63 	bl	8011dd4 <memcpy>
	}
}
 800f90e:	bf00      	nop
 800f910:	3708      	adds	r7, #8
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f916:	b580      	push	{r7, lr}
 800f918:	b084      	sub	sp, #16
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f91e:	f001 fc2d 	bl	801117c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f928:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f92a:	e011      	b.n	800f950 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f930:	2b00      	cmp	r3, #0
 800f932:	d012      	beq.n	800f95a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	3324      	adds	r3, #36	; 0x24
 800f938:	4618      	mov	r0, r3
 800f93a:	f000 fd1b 	bl	8010374 <xTaskRemoveFromEventList>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	d001      	beq.n	800f948 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f944:	f000 fdee 	bl	8010524 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f948:	7bfb      	ldrb	r3, [r7, #15]
 800f94a:	3b01      	subs	r3, #1
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f954:	2b00      	cmp	r3, #0
 800f956:	dce9      	bgt.n	800f92c <prvUnlockQueue+0x16>
 800f958:	e000      	b.n	800f95c <prvUnlockQueue+0x46>
					break;
 800f95a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	22ff      	movs	r2, #255	; 0xff
 800f960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f964:	f001 fc38 	bl	80111d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f968:	f001 fc08 	bl	801117c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f972:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f974:	e011      	b.n	800f99a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	691b      	ldr	r3, [r3, #16]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d012      	beq.n	800f9a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	3310      	adds	r3, #16
 800f982:	4618      	mov	r0, r3
 800f984:	f000 fcf6 	bl	8010374 <xTaskRemoveFromEventList>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d001      	beq.n	800f992 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f98e:	f000 fdc9 	bl	8010524 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f992:	7bbb      	ldrb	r3, [r7, #14]
 800f994:	3b01      	subs	r3, #1
 800f996:	b2db      	uxtb	r3, r3
 800f998:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f99a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	dce9      	bgt.n	800f976 <prvUnlockQueue+0x60>
 800f9a2:	e000      	b.n	800f9a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f9a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	22ff      	movs	r2, #255	; 0xff
 800f9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f9ae:	f001 fc13 	bl	80111d8 <vPortExitCritical>
}
 800f9b2:	bf00      	nop
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f9c2:	f001 fbdb 	bl	801117c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d102      	bne.n	800f9d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	60fb      	str	r3, [r7, #12]
 800f9d2:	e001      	b.n	800f9d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f9d8:	f001 fbfe 	bl	80111d8 <vPortExitCritical>

	return xReturn;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b084      	sub	sp, #16
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f9ee:	f001 fbc5 	bl	801117c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d102      	bne.n	800fa04 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	60fb      	str	r3, [r7, #12]
 800fa02:	e001      	b.n	800fa08 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa04:	2300      	movs	r3, #0
 800fa06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa08:	f001 fbe6 	bl	80111d8 <vPortExitCritical>

	return xReturn;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
	...

0800fa18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa22:	2300      	movs	r3, #0
 800fa24:	60fb      	str	r3, [r7, #12]
 800fa26:	e014      	b.n	800fa52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa28:	4a0e      	ldr	r2, [pc, #56]	; (800fa64 <vQueueAddToRegistry+0x4c>)
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d10b      	bne.n	800fa4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa34:	490b      	ldr	r1, [pc, #44]	; (800fa64 <vQueueAddToRegistry+0x4c>)
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	683a      	ldr	r2, [r7, #0]
 800fa3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fa3e:	4a09      	ldr	r2, [pc, #36]	; (800fa64 <vQueueAddToRegistry+0x4c>)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	00db      	lsls	r3, r3, #3
 800fa44:	4413      	add	r3, r2
 800fa46:	687a      	ldr	r2, [r7, #4]
 800fa48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fa4a:	e005      	b.n	800fa58 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	60fb      	str	r3, [r7, #12]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b07      	cmp	r3, #7
 800fa56:	d9e7      	bls.n	800fa28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fa58:	bf00      	nop
 800fa5a:	3714      	adds	r7, #20
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr
 800fa64:	20005318 	.word	0x20005318

0800fa68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b086      	sub	sp, #24
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fa78:	f001 fb80 	bl	801117c <vPortEnterCritical>
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa82:	b25b      	sxtb	r3, r3
 800fa84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa88:	d103      	bne.n	800fa92 <vQueueWaitForMessageRestricted+0x2a>
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa98:	b25b      	sxtb	r3, r3
 800fa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa9e:	d103      	bne.n	800faa8 <vQueueWaitForMessageRestricted+0x40>
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2200      	movs	r2, #0
 800faa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800faa8:	f001 fb96 	bl	80111d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d106      	bne.n	800fac2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	3324      	adds	r3, #36	; 0x24
 800fab8:	687a      	ldr	r2, [r7, #4]
 800faba:	68b9      	ldr	r1, [r7, #8]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f000 fc2f 	bl	8010320 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fac2:	6978      	ldr	r0, [r7, #20]
 800fac4:	f7ff ff27 	bl	800f916 <prvUnlockQueue>
	}
 800fac8:	bf00      	nop
 800faca:	3718      	adds	r7, #24
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b08e      	sub	sp, #56	; 0x38
 800fad4:	af04      	add	r7, sp, #16
 800fad6:	60f8      	str	r0, [r7, #12]
 800fad8:	60b9      	str	r1, [r7, #8]
 800fada:	607a      	str	r2, [r7, #4]
 800fadc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d109      	bne.n	800faf8 <xTaskCreateStatic+0x28>
	__asm volatile
 800fae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae8:	f383 8811 	msr	BASEPRI, r3
 800faec:	f3bf 8f6f 	isb	sy
 800faf0:	f3bf 8f4f 	dsb	sy
 800faf4:	623b      	str	r3, [r7, #32]
 800faf6:	e7fe      	b.n	800faf6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800faf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d109      	bne.n	800fb12 <xTaskCreateStatic+0x42>
 800fafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	61fb      	str	r3, [r7, #28]
 800fb10:	e7fe      	b.n	800fb10 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb12:	235c      	movs	r3, #92	; 0x5c
 800fb14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	2b5c      	cmp	r3, #92	; 0x5c
 800fb1a:	d009      	beq.n	800fb30 <xTaskCreateStatic+0x60>
 800fb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	61bb      	str	r3, [r7, #24]
 800fb2e:	e7fe      	b.n	800fb2e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fb30:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d01e      	beq.n	800fb76 <xTaskCreateStatic+0xa6>
 800fb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d01b      	beq.n	800fb76 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fb3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4a:	2202      	movs	r2, #2
 800fb4c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fb50:	2300      	movs	r3, #0
 800fb52:	9303      	str	r3, [sp, #12]
 800fb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb56:	9302      	str	r3, [sp, #8]
 800fb58:	f107 0314 	add.w	r3, r7, #20
 800fb5c:	9301      	str	r3, [sp, #4]
 800fb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	68b9      	ldr	r1, [r7, #8]
 800fb68:	68f8      	ldr	r0, [r7, #12]
 800fb6a:	f000 f850 	bl	800fc0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb70:	f000 f8dc 	bl	800fd2c <prvAddNewTaskToReadyList>
 800fb74:	e001      	b.n	800fb7a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800fb76:	2300      	movs	r3, #0
 800fb78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fb7a:	697b      	ldr	r3, [r7, #20]
	}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	3728      	adds	r7, #40	; 0x28
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd80      	pop	{r7, pc}

0800fb84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b08c      	sub	sp, #48	; 0x30
 800fb88:	af04      	add	r7, sp, #16
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	603b      	str	r3, [r7, #0]
 800fb90:	4613      	mov	r3, r2
 800fb92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb94:	88fb      	ldrh	r3, [r7, #6]
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f001 fc09 	bl	80113b0 <pvPortMalloc>
 800fb9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00e      	beq.n	800fbc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fba6:	205c      	movs	r0, #92	; 0x5c
 800fba8:	f001 fc02 	bl	80113b0 <pvPortMalloc>
 800fbac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d003      	beq.n	800fbbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	697a      	ldr	r2, [r7, #20]
 800fbb8:	631a      	str	r2, [r3, #48]	; 0x30
 800fbba:	e005      	b.n	800fbc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fbbc:	6978      	ldr	r0, [r7, #20]
 800fbbe:	f001 fcb9 	bl	8011534 <vPortFree>
 800fbc2:	e001      	b.n	800fbc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fbc8:	69fb      	ldr	r3, [r7, #28]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d017      	beq.n	800fbfe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fbd6:	88fa      	ldrh	r2, [r7, #6]
 800fbd8:	2300      	movs	r3, #0
 800fbda:	9303      	str	r3, [sp, #12]
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	9302      	str	r3, [sp, #8]
 800fbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe2:	9301      	str	r3, [sp, #4]
 800fbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe6:	9300      	str	r3, [sp, #0]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	68b9      	ldr	r1, [r7, #8]
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f000 f80e 	bl	800fc0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbf2:	69f8      	ldr	r0, [r7, #28]
 800fbf4:	f000 f89a 	bl	800fd2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	61bb      	str	r3, [r7, #24]
 800fbfc:	e002      	b.n	800fc04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fbfe:	f04f 33ff 	mov.w	r3, #4294967295
 800fc02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc04:	69bb      	ldr	r3, [r7, #24]
	}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3720      	adds	r7, #32
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}

0800fc0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc0e:	b580      	push	{r7, lr}
 800fc10:	b088      	sub	sp, #32
 800fc12:	af00      	add	r7, sp, #0
 800fc14:	60f8      	str	r0, [r7, #12]
 800fc16:	60b9      	str	r1, [r7, #8]
 800fc18:	607a      	str	r2, [r7, #4]
 800fc1a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	461a      	mov	r2, r3
 800fc26:	21a5      	movs	r1, #165	; 0xa5
 800fc28:	f002 f8df 	bl	8011dea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fc36:	3b01      	subs	r3, #1
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	4413      	add	r3, r2
 800fc3c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fc3e:	69bb      	ldr	r3, [r7, #24]
 800fc40:	f023 0307 	bic.w	r3, r3, #7
 800fc44:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fc46:	69bb      	ldr	r3, [r7, #24]
 800fc48:	f003 0307 	and.w	r3, r3, #7
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d009      	beq.n	800fc64 <prvInitialiseNewTask+0x56>
 800fc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc54:	f383 8811 	msr	BASEPRI, r3
 800fc58:	f3bf 8f6f 	isb	sy
 800fc5c:	f3bf 8f4f 	dsb	sy
 800fc60:	617b      	str	r3, [r7, #20]
 800fc62:	e7fe      	b.n	800fc62 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d01f      	beq.n	800fcaa <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	61fb      	str	r3, [r7, #28]
 800fc6e:	e012      	b.n	800fc96 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fc70:	68ba      	ldr	r2, [r7, #8]
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	4413      	add	r3, r2
 800fc76:	7819      	ldrb	r1, [r3, #0]
 800fc78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	3334      	adds	r3, #52	; 0x34
 800fc80:	460a      	mov	r2, r1
 800fc82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fc84:	68ba      	ldr	r2, [r7, #8]
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	4413      	add	r3, r2
 800fc8a:	781b      	ldrb	r3, [r3, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d006      	beq.n	800fc9e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc90:	69fb      	ldr	r3, [r7, #28]
 800fc92:	3301      	adds	r3, #1
 800fc94:	61fb      	str	r3, [r7, #28]
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	2b0f      	cmp	r3, #15
 800fc9a:	d9e9      	bls.n	800fc70 <prvInitialiseNewTask+0x62>
 800fc9c:	e000      	b.n	800fca0 <prvInitialiseNewTask+0x92>
			{
				break;
 800fc9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca2:	2200      	movs	r2, #0
 800fca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fca8:	e003      	b.n	800fcb2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcac:	2200      	movs	r2, #0
 800fcae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb4:	2b37      	cmp	r3, #55	; 0x37
 800fcb6:	d901      	bls.n	800fcbc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fcb8:	2337      	movs	r3, #55	; 0x37
 800fcba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcc6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcca:	2200      	movs	r2, #0
 800fccc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd0:	3304      	adds	r3, #4
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff f8d6 	bl	800ee84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcda:	3318      	adds	r3, #24
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7ff f8d1 	bl	800ee84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fce6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcf6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd06:	683a      	ldr	r2, [r7, #0]
 800fd08:	68f9      	ldr	r1, [r7, #12]
 800fd0a:	69b8      	ldr	r0, [r7, #24]
 800fd0c:	f001 f90c 	bl	8010f28 <pxPortInitialiseStack>
 800fd10:	4602      	mov	r2, r0
 800fd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d002      	beq.n	800fd22 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd22:	bf00      	nop
 800fd24:	3720      	adds	r7, #32
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
	...

0800fd2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fd34:	f001 fa22 	bl	801117c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fd38:	4b2d      	ldr	r3, [pc, #180]	; (800fdf0 <prvAddNewTaskToReadyList+0xc4>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	4a2c      	ldr	r2, [pc, #176]	; (800fdf0 <prvAddNewTaskToReadyList+0xc4>)
 800fd40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fd42:	4b2c      	ldr	r3, [pc, #176]	; (800fdf4 <prvAddNewTaskToReadyList+0xc8>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d109      	bne.n	800fd5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fd4a:	4a2a      	ldr	r2, [pc, #168]	; (800fdf4 <prvAddNewTaskToReadyList+0xc8>)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fd50:	4b27      	ldr	r3, [pc, #156]	; (800fdf0 <prvAddNewTaskToReadyList+0xc4>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d110      	bne.n	800fd7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fd58:	f000 fc08 	bl	801056c <prvInitialiseTaskLists>
 800fd5c:	e00d      	b.n	800fd7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fd5e:	4b26      	ldr	r3, [pc, #152]	; (800fdf8 <prvAddNewTaskToReadyList+0xcc>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d109      	bne.n	800fd7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fd66:	4b23      	ldr	r3, [pc, #140]	; (800fdf4 <prvAddNewTaskToReadyList+0xc8>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd70:	429a      	cmp	r2, r3
 800fd72:	d802      	bhi.n	800fd7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fd74:	4a1f      	ldr	r2, [pc, #124]	; (800fdf4 <prvAddNewTaskToReadyList+0xc8>)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fd7a:	4b20      	ldr	r3, [pc, #128]	; (800fdfc <prvAddNewTaskToReadyList+0xd0>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	4a1e      	ldr	r2, [pc, #120]	; (800fdfc <prvAddNewTaskToReadyList+0xd0>)
 800fd82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fd84:	4b1d      	ldr	r3, [pc, #116]	; (800fdfc <prvAddNewTaskToReadyList+0xd0>)
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd90:	4b1b      	ldr	r3, [pc, #108]	; (800fe00 <prvAddNewTaskToReadyList+0xd4>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d903      	bls.n	800fda0 <prvAddNewTaskToReadyList+0x74>
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd9c:	4a18      	ldr	r2, [pc, #96]	; (800fe00 <prvAddNewTaskToReadyList+0xd4>)
 800fd9e:	6013      	str	r3, [r2, #0]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fda4:	4613      	mov	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	4a15      	ldr	r2, [pc, #84]	; (800fe04 <prvAddNewTaskToReadyList+0xd8>)
 800fdae:	441a      	add	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	3304      	adds	r3, #4
 800fdb4:	4619      	mov	r1, r3
 800fdb6:	4610      	mov	r0, r2
 800fdb8:	f7ff f871 	bl	800ee9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fdbc:	f001 fa0c 	bl	80111d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fdc0:	4b0d      	ldr	r3, [pc, #52]	; (800fdf8 <prvAddNewTaskToReadyList+0xcc>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d00e      	beq.n	800fde6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fdc8:	4b0a      	ldr	r3, [pc, #40]	; (800fdf4 <prvAddNewTaskToReadyList+0xc8>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d207      	bcs.n	800fde6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fdd6:	4b0c      	ldr	r3, [pc, #48]	; (800fe08 <prvAddNewTaskToReadyList+0xdc>)
 800fdd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fddc:	601a      	str	r2, [r3, #0]
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fde6:	bf00      	nop
 800fde8:	3708      	adds	r7, #8
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}
 800fdee:	bf00      	nop
 800fdf0:	20000cec 	.word	0x20000cec
 800fdf4:	20000818 	.word	0x20000818
 800fdf8:	20000cf8 	.word	0x20000cf8
 800fdfc:	20000d08 	.word	0x20000d08
 800fe00:	20000cf4 	.word	0x20000cf4
 800fe04:	2000081c 	.word	0x2000081c
 800fe08:	e000ed04 	.word	0xe000ed04

0800fe0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe14:	2300      	movs	r3, #0
 800fe16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d016      	beq.n	800fe4c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe1e:	4b13      	ldr	r3, [pc, #76]	; (800fe6c <vTaskDelay+0x60>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d009      	beq.n	800fe3a <vTaskDelay+0x2e>
 800fe26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2a:	f383 8811 	msr	BASEPRI, r3
 800fe2e:	f3bf 8f6f 	isb	sy
 800fe32:	f3bf 8f4f 	dsb	sy
 800fe36:	60bb      	str	r3, [r7, #8]
 800fe38:	e7fe      	b.n	800fe38 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800fe3a:	f000 f87f 	bl	800ff3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fe3e:	2100      	movs	r1, #0
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fcd7 	bl	80107f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fe46:	f000 f887 	bl	800ff58 <xTaskResumeAll>
 800fe4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d107      	bne.n	800fe62 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fe52:	4b07      	ldr	r3, [pc, #28]	; (800fe70 <vTaskDelay+0x64>)
 800fe54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe58:	601a      	str	r2, [r3, #0]
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe62:	bf00      	nop
 800fe64:	3710      	adds	r7, #16
 800fe66:	46bd      	mov	sp, r7
 800fe68:	bd80      	pop	{r7, pc}
 800fe6a:	bf00      	nop
 800fe6c:	20000d14 	.word	0x20000d14
 800fe70:	e000ed04 	.word	0xe000ed04

0800fe74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b08a      	sub	sp, #40	; 0x28
 800fe78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fe82:	463a      	mov	r2, r7
 800fe84:	1d39      	adds	r1, r7, #4
 800fe86:	f107 0308 	add.w	r3, r7, #8
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fe ffa6 	bl	800eddc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fe90:	6839      	ldr	r1, [r7, #0]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	68ba      	ldr	r2, [r7, #8]
 800fe96:	9202      	str	r2, [sp, #8]
 800fe98:	9301      	str	r3, [sp, #4]
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	2300      	movs	r3, #0
 800fea0:	460a      	mov	r2, r1
 800fea2:	4920      	ldr	r1, [pc, #128]	; (800ff24 <vTaskStartScheduler+0xb0>)
 800fea4:	4820      	ldr	r0, [pc, #128]	; (800ff28 <vTaskStartScheduler+0xb4>)
 800fea6:	f7ff fe13 	bl	800fad0 <xTaskCreateStatic>
 800feaa:	4602      	mov	r2, r0
 800feac:	4b1f      	ldr	r3, [pc, #124]	; (800ff2c <vTaskStartScheduler+0xb8>)
 800feae:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800feb0:	4b1e      	ldr	r3, [pc, #120]	; (800ff2c <vTaskStartScheduler+0xb8>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d002      	beq.n	800febe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800feb8:	2301      	movs	r3, #1
 800feba:	617b      	str	r3, [r7, #20]
 800febc:	e001      	b.n	800fec2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800febe:	2300      	movs	r3, #0
 800fec0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d102      	bne.n	800fece <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fec8:	f000 fce8 	bl	801089c <xTimerCreateTimerTask>
 800fecc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fece:	697b      	ldr	r3, [r7, #20]
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d115      	bne.n	800ff00 <vTaskStartScheduler+0x8c>
 800fed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed8:	f383 8811 	msr	BASEPRI, r3
 800fedc:	f3bf 8f6f 	isb	sy
 800fee0:	f3bf 8f4f 	dsb	sy
 800fee4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fee6:	4b12      	ldr	r3, [pc, #72]	; (800ff30 <vTaskStartScheduler+0xbc>)
 800fee8:	f04f 32ff 	mov.w	r2, #4294967295
 800feec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800feee:	4b11      	ldr	r3, [pc, #68]	; (800ff34 <vTaskStartScheduler+0xc0>)
 800fef0:	2201      	movs	r2, #1
 800fef2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fef4:	4b10      	ldr	r3, [pc, #64]	; (800ff38 <vTaskStartScheduler+0xc4>)
 800fef6:	2200      	movs	r2, #0
 800fef8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fefa:	f001 f8a1 	bl	8011040 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fefe:	e00d      	b.n	800ff1c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff06:	d109      	bne.n	800ff1c <vTaskStartScheduler+0xa8>
 800ff08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	60fb      	str	r3, [r7, #12]
 800ff1a:	e7fe      	b.n	800ff1a <vTaskStartScheduler+0xa6>
}
 800ff1c:	bf00      	nop
 800ff1e:	3718      	adds	r7, #24
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	08011fc4 	.word	0x08011fc4
 800ff28:	0801053d 	.word	0x0801053d
 800ff2c:	20000d10 	.word	0x20000d10
 800ff30:	20000d0c 	.word	0x20000d0c
 800ff34:	20000cf8 	.word	0x20000cf8
 800ff38:	20000cf0 	.word	0x20000cf0

0800ff3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ff40:	4b04      	ldr	r3, [pc, #16]	; (800ff54 <vTaskSuspendAll+0x18>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	3301      	adds	r3, #1
 800ff46:	4a03      	ldr	r2, [pc, #12]	; (800ff54 <vTaskSuspendAll+0x18>)
 800ff48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ff4a:	bf00      	nop
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr
 800ff54:	20000d14 	.word	0x20000d14

0800ff58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ff62:	2300      	movs	r3, #0
 800ff64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ff66:	4b41      	ldr	r3, [pc, #260]	; (801006c <xTaskResumeAll+0x114>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d109      	bne.n	800ff82 <xTaskResumeAll+0x2a>
 800ff6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	603b      	str	r3, [r7, #0]
 800ff80:	e7fe      	b.n	800ff80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ff82:	f001 f8fb 	bl	801117c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ff86:	4b39      	ldr	r3, [pc, #228]	; (801006c <xTaskResumeAll+0x114>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	3b01      	subs	r3, #1
 800ff8c:	4a37      	ldr	r2, [pc, #220]	; (801006c <xTaskResumeAll+0x114>)
 800ff8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff90:	4b36      	ldr	r3, [pc, #216]	; (801006c <xTaskResumeAll+0x114>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d162      	bne.n	801005e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ff98:	4b35      	ldr	r3, [pc, #212]	; (8010070 <xTaskResumeAll+0x118>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d05e      	beq.n	801005e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ffa0:	e02f      	b.n	8010002 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffa2:	4b34      	ldr	r3, [pc, #208]	; (8010074 <xTaskResumeAll+0x11c>)
 800ffa4:	68db      	ldr	r3, [r3, #12]
 800ffa6:	68db      	ldr	r3, [r3, #12]
 800ffa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	3318      	adds	r3, #24
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe ffd2 	bl	800ef58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	3304      	adds	r3, #4
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fe ffcd 	bl	800ef58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc2:	4b2d      	ldr	r3, [pc, #180]	; (8010078 <xTaskResumeAll+0x120>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	429a      	cmp	r2, r3
 800ffc8:	d903      	bls.n	800ffd2 <xTaskResumeAll+0x7a>
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffce:	4a2a      	ldr	r2, [pc, #168]	; (8010078 <xTaskResumeAll+0x120>)
 800ffd0:	6013      	str	r3, [r2, #0]
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffd6:	4613      	mov	r3, r2
 800ffd8:	009b      	lsls	r3, r3, #2
 800ffda:	4413      	add	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4a27      	ldr	r2, [pc, #156]	; (801007c <xTaskResumeAll+0x124>)
 800ffe0:	441a      	add	r2, r3
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	3304      	adds	r3, #4
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	4610      	mov	r0, r2
 800ffea:	f7fe ff58 	bl	800ee9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff2:	4b23      	ldr	r3, [pc, #140]	; (8010080 <xTaskResumeAll+0x128>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d302      	bcc.n	8010002 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fffc:	4b21      	ldr	r3, [pc, #132]	; (8010084 <xTaskResumeAll+0x12c>)
 800fffe:	2201      	movs	r2, #1
 8010000:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010002:	4b1c      	ldr	r3, [pc, #112]	; (8010074 <xTaskResumeAll+0x11c>)
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1cb      	bne.n	800ffa2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d001      	beq.n	8010014 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010010:	f000 fb46 	bl	80106a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010014:	4b1c      	ldr	r3, [pc, #112]	; (8010088 <xTaskResumeAll+0x130>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d010      	beq.n	8010042 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010020:	f000 f846 	bl	80100b0 <xTaskIncrementTick>
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d002      	beq.n	8010030 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801002a:	4b16      	ldr	r3, [pc, #88]	; (8010084 <xTaskResumeAll+0x12c>)
 801002c:	2201      	movs	r2, #1
 801002e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	3b01      	subs	r3, #1
 8010034:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1f1      	bne.n	8010020 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 801003c:	4b12      	ldr	r3, [pc, #72]	; (8010088 <xTaskResumeAll+0x130>)
 801003e:	2200      	movs	r2, #0
 8010040:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010042:	4b10      	ldr	r3, [pc, #64]	; (8010084 <xTaskResumeAll+0x12c>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d009      	beq.n	801005e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801004a:	2301      	movs	r3, #1
 801004c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801004e:	4b0f      	ldr	r3, [pc, #60]	; (801008c <xTaskResumeAll+0x134>)
 8010050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010054:	601a      	str	r2, [r3, #0]
 8010056:	f3bf 8f4f 	dsb	sy
 801005a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801005e:	f001 f8bb 	bl	80111d8 <vPortExitCritical>

	return xAlreadyYielded;
 8010062:	68bb      	ldr	r3, [r7, #8]
}
 8010064:	4618      	mov	r0, r3
 8010066:	3710      	adds	r7, #16
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}
 801006c:	20000d14 	.word	0x20000d14
 8010070:	20000cec 	.word	0x20000cec
 8010074:	20000cac 	.word	0x20000cac
 8010078:	20000cf4 	.word	0x20000cf4
 801007c:	2000081c 	.word	0x2000081c
 8010080:	20000818 	.word	0x20000818
 8010084:	20000d00 	.word	0x20000d00
 8010088:	20000cfc 	.word	0x20000cfc
 801008c:	e000ed04 	.word	0xe000ed04

08010090 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010096:	4b05      	ldr	r3, [pc, #20]	; (80100ac <xTaskGetTickCount+0x1c>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801009c:	687b      	ldr	r3, [r7, #4]
}
 801009e:	4618      	mov	r0, r3
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	20000cf0 	.word	0x20000cf0

080100b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80100b6:	2300      	movs	r3, #0
 80100b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100ba:	4b4e      	ldr	r3, [pc, #312]	; (80101f4 <xTaskIncrementTick+0x144>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f040 8088 	bne.w	80101d4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80100c4:	4b4c      	ldr	r3, [pc, #304]	; (80101f8 <xTaskIncrementTick+0x148>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	3301      	adds	r3, #1
 80100ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80100cc:	4a4a      	ldr	r2, [pc, #296]	; (80101f8 <xTaskIncrementTick+0x148>)
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d11f      	bne.n	8010118 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80100d8:	4b48      	ldr	r3, [pc, #288]	; (80101fc <xTaskIncrementTick+0x14c>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d009      	beq.n	80100f6 <xTaskIncrementTick+0x46>
 80100e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e6:	f383 8811 	msr	BASEPRI, r3
 80100ea:	f3bf 8f6f 	isb	sy
 80100ee:	f3bf 8f4f 	dsb	sy
 80100f2:	603b      	str	r3, [r7, #0]
 80100f4:	e7fe      	b.n	80100f4 <xTaskIncrementTick+0x44>
 80100f6:	4b41      	ldr	r3, [pc, #260]	; (80101fc <xTaskIncrementTick+0x14c>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	60fb      	str	r3, [r7, #12]
 80100fc:	4b40      	ldr	r3, [pc, #256]	; (8010200 <xTaskIncrementTick+0x150>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	4a3e      	ldr	r2, [pc, #248]	; (80101fc <xTaskIncrementTick+0x14c>)
 8010102:	6013      	str	r3, [r2, #0]
 8010104:	4a3e      	ldr	r2, [pc, #248]	; (8010200 <xTaskIncrementTick+0x150>)
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	6013      	str	r3, [r2, #0]
 801010a:	4b3e      	ldr	r3, [pc, #248]	; (8010204 <xTaskIncrementTick+0x154>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	3301      	adds	r3, #1
 8010110:	4a3c      	ldr	r2, [pc, #240]	; (8010204 <xTaskIncrementTick+0x154>)
 8010112:	6013      	str	r3, [r2, #0]
 8010114:	f000 fac4 	bl	80106a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010118:	4b3b      	ldr	r3, [pc, #236]	; (8010208 <xTaskIncrementTick+0x158>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	693a      	ldr	r2, [r7, #16]
 801011e:	429a      	cmp	r2, r3
 8010120:	d349      	bcc.n	80101b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010122:	4b36      	ldr	r3, [pc, #216]	; (80101fc <xTaskIncrementTick+0x14c>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d104      	bne.n	8010136 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801012c:	4b36      	ldr	r3, [pc, #216]	; (8010208 <xTaskIncrementTick+0x158>)
 801012e:	f04f 32ff 	mov.w	r2, #4294967295
 8010132:	601a      	str	r2, [r3, #0]
					break;
 8010134:	e03f      	b.n	80101b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010136:	4b31      	ldr	r3, [pc, #196]	; (80101fc <xTaskIncrementTick+0x14c>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	68db      	ldr	r3, [r3, #12]
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010146:	693a      	ldr	r2, [r7, #16]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	429a      	cmp	r2, r3
 801014c:	d203      	bcs.n	8010156 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801014e:	4a2e      	ldr	r2, [pc, #184]	; (8010208 <xTaskIncrementTick+0x158>)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010154:	e02f      	b.n	80101b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	3304      	adds	r3, #4
 801015a:	4618      	mov	r0, r3
 801015c:	f7fe fefc 	bl	800ef58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010164:	2b00      	cmp	r3, #0
 8010166:	d004      	beq.n	8010172 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	3318      	adds	r3, #24
 801016c:	4618      	mov	r0, r3
 801016e:	f7fe fef3 	bl	800ef58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010176:	4b25      	ldr	r3, [pc, #148]	; (801020c <xTaskIncrementTick+0x15c>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	429a      	cmp	r2, r3
 801017c:	d903      	bls.n	8010186 <xTaskIncrementTick+0xd6>
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010182:	4a22      	ldr	r2, [pc, #136]	; (801020c <xTaskIncrementTick+0x15c>)
 8010184:	6013      	str	r3, [r2, #0]
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801018a:	4613      	mov	r3, r2
 801018c:	009b      	lsls	r3, r3, #2
 801018e:	4413      	add	r3, r2
 8010190:	009b      	lsls	r3, r3, #2
 8010192:	4a1f      	ldr	r2, [pc, #124]	; (8010210 <xTaskIncrementTick+0x160>)
 8010194:	441a      	add	r2, r3
 8010196:	68bb      	ldr	r3, [r7, #8]
 8010198:	3304      	adds	r3, #4
 801019a:	4619      	mov	r1, r3
 801019c:	4610      	mov	r0, r2
 801019e:	f7fe fe7e 	bl	800ee9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101a6:	4b1b      	ldr	r3, [pc, #108]	; (8010214 <xTaskIncrementTick+0x164>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d3b8      	bcc.n	8010122 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80101b0:	2301      	movs	r3, #1
 80101b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101b4:	e7b5      	b.n	8010122 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80101b6:	4b17      	ldr	r3, [pc, #92]	; (8010214 <xTaskIncrementTick+0x164>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101bc:	4914      	ldr	r1, [pc, #80]	; (8010210 <xTaskIncrementTick+0x160>)
 80101be:	4613      	mov	r3, r2
 80101c0:	009b      	lsls	r3, r3, #2
 80101c2:	4413      	add	r3, r2
 80101c4:	009b      	lsls	r3, r3, #2
 80101c6:	440b      	add	r3, r1
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b01      	cmp	r3, #1
 80101cc:	d907      	bls.n	80101de <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80101ce:	2301      	movs	r3, #1
 80101d0:	617b      	str	r3, [r7, #20]
 80101d2:	e004      	b.n	80101de <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80101d4:	4b10      	ldr	r3, [pc, #64]	; (8010218 <xTaskIncrementTick+0x168>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3301      	adds	r3, #1
 80101da:	4a0f      	ldr	r2, [pc, #60]	; (8010218 <xTaskIncrementTick+0x168>)
 80101dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80101de:	4b0f      	ldr	r3, [pc, #60]	; (801021c <xTaskIncrementTick+0x16c>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d001      	beq.n	80101ea <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80101e6:	2301      	movs	r3, #1
 80101e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80101ea:	697b      	ldr	r3, [r7, #20]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3718      	adds	r7, #24
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	20000d14 	.word	0x20000d14
 80101f8:	20000cf0 	.word	0x20000cf0
 80101fc:	20000ca4 	.word	0x20000ca4
 8010200:	20000ca8 	.word	0x20000ca8
 8010204:	20000d04 	.word	0x20000d04
 8010208:	20000d0c 	.word	0x20000d0c
 801020c:	20000cf4 	.word	0x20000cf4
 8010210:	2000081c 	.word	0x2000081c
 8010214:	20000818 	.word	0x20000818
 8010218:	20000cfc 	.word	0x20000cfc
 801021c:	20000d00 	.word	0x20000d00

08010220 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010220:	b480      	push	{r7}
 8010222:	b085      	sub	sp, #20
 8010224:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010226:	4b27      	ldr	r3, [pc, #156]	; (80102c4 <vTaskSwitchContext+0xa4>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d003      	beq.n	8010236 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801022e:	4b26      	ldr	r3, [pc, #152]	; (80102c8 <vTaskSwitchContext+0xa8>)
 8010230:	2201      	movs	r2, #1
 8010232:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010234:	e040      	b.n	80102b8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8010236:	4b24      	ldr	r3, [pc, #144]	; (80102c8 <vTaskSwitchContext+0xa8>)
 8010238:	2200      	movs	r2, #0
 801023a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801023c:	4b23      	ldr	r3, [pc, #140]	; (80102cc <vTaskSwitchContext+0xac>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	60fb      	str	r3, [r7, #12]
 8010242:	e00f      	b.n	8010264 <vTaskSwitchContext+0x44>
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d109      	bne.n	801025e <vTaskSwitchContext+0x3e>
 801024a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801024e:	f383 8811 	msr	BASEPRI, r3
 8010252:	f3bf 8f6f 	isb	sy
 8010256:	f3bf 8f4f 	dsb	sy
 801025a:	607b      	str	r3, [r7, #4]
 801025c:	e7fe      	b.n	801025c <vTaskSwitchContext+0x3c>
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	3b01      	subs	r3, #1
 8010262:	60fb      	str	r3, [r7, #12]
 8010264:	491a      	ldr	r1, [pc, #104]	; (80102d0 <vTaskSwitchContext+0xb0>)
 8010266:	68fa      	ldr	r2, [r7, #12]
 8010268:	4613      	mov	r3, r2
 801026a:	009b      	lsls	r3, r3, #2
 801026c:	4413      	add	r3, r2
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	440b      	add	r3, r1
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d0e5      	beq.n	8010244 <vTaskSwitchContext+0x24>
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	4613      	mov	r3, r2
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	4413      	add	r3, r2
 8010280:	009b      	lsls	r3, r3, #2
 8010282:	4a13      	ldr	r2, [pc, #76]	; (80102d0 <vTaskSwitchContext+0xb0>)
 8010284:	4413      	add	r3, r2
 8010286:	60bb      	str	r3, [r7, #8]
 8010288:	68bb      	ldr	r3, [r7, #8]
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	685a      	ldr	r2, [r3, #4]
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	605a      	str	r2, [r3, #4]
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	3308      	adds	r3, #8
 801029a:	429a      	cmp	r2, r3
 801029c:	d104      	bne.n	80102a8 <vTaskSwitchContext+0x88>
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	685a      	ldr	r2, [r3, #4]
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	605a      	str	r2, [r3, #4]
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	68db      	ldr	r3, [r3, #12]
 80102ae:	4a09      	ldr	r2, [pc, #36]	; (80102d4 <vTaskSwitchContext+0xb4>)
 80102b0:	6013      	str	r3, [r2, #0]
 80102b2:	4a06      	ldr	r2, [pc, #24]	; (80102cc <vTaskSwitchContext+0xac>)
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	6013      	str	r3, [r2, #0]
}
 80102b8:	bf00      	nop
 80102ba:	3714      	adds	r7, #20
 80102bc:	46bd      	mov	sp, r7
 80102be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c2:	4770      	bx	lr
 80102c4:	20000d14 	.word	0x20000d14
 80102c8:	20000d00 	.word	0x20000d00
 80102cc:	20000cf4 	.word	0x20000cf4
 80102d0:	2000081c 	.word	0x2000081c
 80102d4:	20000818 	.word	0x20000818

080102d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d109      	bne.n	80102fc <vTaskPlaceOnEventList+0x24>
 80102e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102ec:	f383 8811 	msr	BASEPRI, r3
 80102f0:	f3bf 8f6f 	isb	sy
 80102f4:	f3bf 8f4f 	dsb	sy
 80102f8:	60fb      	str	r3, [r7, #12]
 80102fa:	e7fe      	b.n	80102fa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80102fc:	4b07      	ldr	r3, [pc, #28]	; (801031c <vTaskPlaceOnEventList+0x44>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	3318      	adds	r3, #24
 8010302:	4619      	mov	r1, r3
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7fe fdee 	bl	800eee6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801030a:	2101      	movs	r1, #1
 801030c:	6838      	ldr	r0, [r7, #0]
 801030e:	f000 fa71 	bl	80107f4 <prvAddCurrentTaskToDelayedList>
}
 8010312:	bf00      	nop
 8010314:	3710      	adds	r7, #16
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	20000818 	.word	0x20000818

08010320 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010320:	b580      	push	{r7, lr}
 8010322:	b086      	sub	sp, #24
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d109      	bne.n	8010346 <vTaskPlaceOnEventListRestricted+0x26>
 8010332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010336:	f383 8811 	msr	BASEPRI, r3
 801033a:	f3bf 8f6f 	isb	sy
 801033e:	f3bf 8f4f 	dsb	sy
 8010342:	617b      	str	r3, [r7, #20]
 8010344:	e7fe      	b.n	8010344 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010346:	4b0a      	ldr	r3, [pc, #40]	; (8010370 <vTaskPlaceOnEventListRestricted+0x50>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	3318      	adds	r3, #24
 801034c:	4619      	mov	r1, r3
 801034e:	68f8      	ldr	r0, [r7, #12]
 8010350:	f7fe fda5 	bl	800ee9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 801035a:	f04f 33ff 	mov.w	r3, #4294967295
 801035e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010360:	6879      	ldr	r1, [r7, #4]
 8010362:	68b8      	ldr	r0, [r7, #8]
 8010364:	f000 fa46 	bl	80107f4 <prvAddCurrentTaskToDelayedList>
	}
 8010368:	bf00      	nop
 801036a:	3718      	adds	r7, #24
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	20000818 	.word	0x20000818

08010374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b086      	sub	sp, #24
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68db      	ldr	r3, [r3, #12]
 8010380:	68db      	ldr	r3, [r3, #12]
 8010382:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d109      	bne.n	801039e <xTaskRemoveFromEventList+0x2a>
 801038a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038e:	f383 8811 	msr	BASEPRI, r3
 8010392:	f3bf 8f6f 	isb	sy
 8010396:	f3bf 8f4f 	dsb	sy
 801039a:	60fb      	str	r3, [r7, #12]
 801039c:	e7fe      	b.n	801039c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	3318      	adds	r3, #24
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fe fdd8 	bl	800ef58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80103a8:	4b1d      	ldr	r3, [pc, #116]	; (8010420 <xTaskRemoveFromEventList+0xac>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d11d      	bne.n	80103ec <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	3304      	adds	r3, #4
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7fe fdcf 	bl	800ef58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103be:	4b19      	ldr	r3, [pc, #100]	; (8010424 <xTaskRemoveFromEventList+0xb0>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d903      	bls.n	80103ce <xTaskRemoveFromEventList+0x5a>
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ca:	4a16      	ldr	r2, [pc, #88]	; (8010424 <xTaskRemoveFromEventList+0xb0>)
 80103cc:	6013      	str	r3, [r2, #0]
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d2:	4613      	mov	r3, r2
 80103d4:	009b      	lsls	r3, r3, #2
 80103d6:	4413      	add	r3, r2
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	4a13      	ldr	r2, [pc, #76]	; (8010428 <xTaskRemoveFromEventList+0xb4>)
 80103dc:	441a      	add	r2, r3
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	3304      	adds	r3, #4
 80103e2:	4619      	mov	r1, r3
 80103e4:	4610      	mov	r0, r2
 80103e6:	f7fe fd5a 	bl	800ee9e <vListInsertEnd>
 80103ea:	e005      	b.n	80103f8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	3318      	adds	r3, #24
 80103f0:	4619      	mov	r1, r3
 80103f2:	480e      	ldr	r0, [pc, #56]	; (801042c <xTaskRemoveFromEventList+0xb8>)
 80103f4:	f7fe fd53 	bl	800ee9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103fc:	4b0c      	ldr	r3, [pc, #48]	; (8010430 <xTaskRemoveFromEventList+0xbc>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010402:	429a      	cmp	r2, r3
 8010404:	d905      	bls.n	8010412 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010406:	2301      	movs	r3, #1
 8010408:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801040a:	4b0a      	ldr	r3, [pc, #40]	; (8010434 <xTaskRemoveFromEventList+0xc0>)
 801040c:	2201      	movs	r2, #1
 801040e:	601a      	str	r2, [r3, #0]
 8010410:	e001      	b.n	8010416 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010412:	2300      	movs	r3, #0
 8010414:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010416:	697b      	ldr	r3, [r7, #20]
}
 8010418:	4618      	mov	r0, r3
 801041a:	3718      	adds	r7, #24
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}
 8010420:	20000d14 	.word	0x20000d14
 8010424:	20000cf4 	.word	0x20000cf4
 8010428:	2000081c 	.word	0x2000081c
 801042c:	20000cac 	.word	0x20000cac
 8010430:	20000818 	.word	0x20000818
 8010434:	20000d00 	.word	0x20000d00

08010438 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010438:	b480      	push	{r7}
 801043a:	b083      	sub	sp, #12
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010440:	4b06      	ldr	r3, [pc, #24]	; (801045c <vTaskInternalSetTimeOutState+0x24>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010448:	4b05      	ldr	r3, [pc, #20]	; (8010460 <vTaskInternalSetTimeOutState+0x28>)
 801044a:	681a      	ldr	r2, [r3, #0]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	605a      	str	r2, [r3, #4]
}
 8010450:	bf00      	nop
 8010452:	370c      	adds	r7, #12
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr
 801045c:	20000d04 	.word	0x20000d04
 8010460:	20000cf0 	.word	0x20000cf0

08010464 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b088      	sub	sp, #32
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d109      	bne.n	8010488 <xTaskCheckForTimeOut+0x24>
 8010474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	613b      	str	r3, [r7, #16]
 8010486:	e7fe      	b.n	8010486 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d109      	bne.n	80104a2 <xTaskCheckForTimeOut+0x3e>
 801048e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010492:	f383 8811 	msr	BASEPRI, r3
 8010496:	f3bf 8f6f 	isb	sy
 801049a:	f3bf 8f4f 	dsb	sy
 801049e:	60fb      	str	r3, [r7, #12]
 80104a0:	e7fe      	b.n	80104a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80104a2:	f000 fe6b 	bl	801117c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80104a6:	4b1d      	ldr	r3, [pc, #116]	; (801051c <xTaskCheckForTimeOut+0xb8>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	69ba      	ldr	r2, [r7, #24]
 80104b2:	1ad3      	subs	r3, r2, r3
 80104b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104be:	d102      	bne.n	80104c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80104c0:	2300      	movs	r3, #0
 80104c2:	61fb      	str	r3, [r7, #28]
 80104c4:	e023      	b.n	801050e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	4b15      	ldr	r3, [pc, #84]	; (8010520 <xTaskCheckForTimeOut+0xbc>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d007      	beq.n	80104e2 <xTaskCheckForTimeOut+0x7e>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	69ba      	ldr	r2, [r7, #24]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d302      	bcc.n	80104e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80104dc:	2301      	movs	r3, #1
 80104de:	61fb      	str	r3, [r7, #28]
 80104e0:	e015      	b.n	801050e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	697a      	ldr	r2, [r7, #20]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d20b      	bcs.n	8010504 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	681a      	ldr	r2, [r3, #0]
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	1ad2      	subs	r2, r2, r3
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f7ff ff9d 	bl	8010438 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80104fe:	2300      	movs	r3, #0
 8010500:	61fb      	str	r3, [r7, #28]
 8010502:	e004      	b.n	801050e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	2200      	movs	r2, #0
 8010508:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801050a:	2301      	movs	r3, #1
 801050c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801050e:	f000 fe63 	bl	80111d8 <vPortExitCritical>

	return xReturn;
 8010512:	69fb      	ldr	r3, [r7, #28]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3720      	adds	r7, #32
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	20000cf0 	.word	0x20000cf0
 8010520:	20000d04 	.word	0x20000d04

08010524 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010524:	b480      	push	{r7}
 8010526:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010528:	4b03      	ldr	r3, [pc, #12]	; (8010538 <vTaskMissedYield+0x14>)
 801052a:	2201      	movs	r2, #1
 801052c:	601a      	str	r2, [r3, #0]
}
 801052e:	bf00      	nop
 8010530:	46bd      	mov	sp, r7
 8010532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010536:	4770      	bx	lr
 8010538:	20000d00 	.word	0x20000d00

0801053c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010544:	f000 f852 	bl	80105ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010548:	4b06      	ldr	r3, [pc, #24]	; (8010564 <prvIdleTask+0x28>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d9f9      	bls.n	8010544 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010550:	4b05      	ldr	r3, [pc, #20]	; (8010568 <prvIdleTask+0x2c>)
 8010552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010556:	601a      	str	r2, [r3, #0]
 8010558:	f3bf 8f4f 	dsb	sy
 801055c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010560:	e7f0      	b.n	8010544 <prvIdleTask+0x8>
 8010562:	bf00      	nop
 8010564:	2000081c 	.word	0x2000081c
 8010568:	e000ed04 	.word	0xe000ed04

0801056c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b082      	sub	sp, #8
 8010570:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010572:	2300      	movs	r3, #0
 8010574:	607b      	str	r3, [r7, #4]
 8010576:	e00c      	b.n	8010592 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010578:	687a      	ldr	r2, [r7, #4]
 801057a:	4613      	mov	r3, r2
 801057c:	009b      	lsls	r3, r3, #2
 801057e:	4413      	add	r3, r2
 8010580:	009b      	lsls	r3, r3, #2
 8010582:	4a12      	ldr	r2, [pc, #72]	; (80105cc <prvInitialiseTaskLists+0x60>)
 8010584:	4413      	add	r3, r2
 8010586:	4618      	mov	r0, r3
 8010588:	f7fe fc5c 	bl	800ee44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	3301      	adds	r3, #1
 8010590:	607b      	str	r3, [r7, #4]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2b37      	cmp	r3, #55	; 0x37
 8010596:	d9ef      	bls.n	8010578 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010598:	480d      	ldr	r0, [pc, #52]	; (80105d0 <prvInitialiseTaskLists+0x64>)
 801059a:	f7fe fc53 	bl	800ee44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801059e:	480d      	ldr	r0, [pc, #52]	; (80105d4 <prvInitialiseTaskLists+0x68>)
 80105a0:	f7fe fc50 	bl	800ee44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80105a4:	480c      	ldr	r0, [pc, #48]	; (80105d8 <prvInitialiseTaskLists+0x6c>)
 80105a6:	f7fe fc4d 	bl	800ee44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80105aa:	480c      	ldr	r0, [pc, #48]	; (80105dc <prvInitialiseTaskLists+0x70>)
 80105ac:	f7fe fc4a 	bl	800ee44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80105b0:	480b      	ldr	r0, [pc, #44]	; (80105e0 <prvInitialiseTaskLists+0x74>)
 80105b2:	f7fe fc47 	bl	800ee44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80105b6:	4b0b      	ldr	r3, [pc, #44]	; (80105e4 <prvInitialiseTaskLists+0x78>)
 80105b8:	4a05      	ldr	r2, [pc, #20]	; (80105d0 <prvInitialiseTaskLists+0x64>)
 80105ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80105bc:	4b0a      	ldr	r3, [pc, #40]	; (80105e8 <prvInitialiseTaskLists+0x7c>)
 80105be:	4a05      	ldr	r2, [pc, #20]	; (80105d4 <prvInitialiseTaskLists+0x68>)
 80105c0:	601a      	str	r2, [r3, #0]
}
 80105c2:	bf00      	nop
 80105c4:	3708      	adds	r7, #8
 80105c6:	46bd      	mov	sp, r7
 80105c8:	bd80      	pop	{r7, pc}
 80105ca:	bf00      	nop
 80105cc:	2000081c 	.word	0x2000081c
 80105d0:	20000c7c 	.word	0x20000c7c
 80105d4:	20000c90 	.word	0x20000c90
 80105d8:	20000cac 	.word	0x20000cac
 80105dc:	20000cc0 	.word	0x20000cc0
 80105e0:	20000cd8 	.word	0x20000cd8
 80105e4:	20000ca4 	.word	0x20000ca4
 80105e8:	20000ca8 	.word	0x20000ca8

080105ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80105f2:	e019      	b.n	8010628 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80105f4:	f000 fdc2 	bl	801117c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105f8:	4b0f      	ldr	r3, [pc, #60]	; (8010638 <prvCheckTasksWaitingTermination+0x4c>)
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	68db      	ldr	r3, [r3, #12]
 80105fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	3304      	adds	r3, #4
 8010604:	4618      	mov	r0, r3
 8010606:	f7fe fca7 	bl	800ef58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801060a:	4b0c      	ldr	r3, [pc, #48]	; (801063c <prvCheckTasksWaitingTermination+0x50>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	3b01      	subs	r3, #1
 8010610:	4a0a      	ldr	r2, [pc, #40]	; (801063c <prvCheckTasksWaitingTermination+0x50>)
 8010612:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010614:	4b0a      	ldr	r3, [pc, #40]	; (8010640 <prvCheckTasksWaitingTermination+0x54>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	3b01      	subs	r3, #1
 801061a:	4a09      	ldr	r2, [pc, #36]	; (8010640 <prvCheckTasksWaitingTermination+0x54>)
 801061c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801061e:	f000 fddb 	bl	80111d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f000 f80e 	bl	8010644 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010628:	4b05      	ldr	r3, [pc, #20]	; (8010640 <prvCheckTasksWaitingTermination+0x54>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d1e1      	bne.n	80105f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010630:	bf00      	nop
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	20000cc0 	.word	0x20000cc0
 801063c:	20000cec 	.word	0x20000cec
 8010640:	20000cd4 	.word	0x20000cd4

08010644 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010652:	2b00      	cmp	r3, #0
 8010654:	d108      	bne.n	8010668 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801065a:	4618      	mov	r0, r3
 801065c:	f000 ff6a 	bl	8011534 <vPortFree>
				vPortFree( pxTCB );
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f000 ff67 	bl	8011534 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010666:	e017      	b.n	8010698 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801066e:	2b01      	cmp	r3, #1
 8010670:	d103      	bne.n	801067a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f000 ff5e 	bl	8011534 <vPortFree>
	}
 8010678:	e00e      	b.n	8010698 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010680:	2b02      	cmp	r3, #2
 8010682:	d009      	beq.n	8010698 <prvDeleteTCB+0x54>
 8010684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010688:	f383 8811 	msr	BASEPRI, r3
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	60fb      	str	r3, [r7, #12]
 8010696:	e7fe      	b.n	8010696 <prvDeleteTCB+0x52>
	}
 8010698:	bf00      	nop
 801069a:	3710      	adds	r7, #16
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80106a0:	b480      	push	{r7}
 80106a2:	b083      	sub	sp, #12
 80106a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80106a6:	4b0c      	ldr	r3, [pc, #48]	; (80106d8 <prvResetNextTaskUnblockTime+0x38>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d104      	bne.n	80106ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80106b0:	4b0a      	ldr	r3, [pc, #40]	; (80106dc <prvResetNextTaskUnblockTime+0x3c>)
 80106b2:	f04f 32ff 	mov.w	r2, #4294967295
 80106b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80106b8:	e008      	b.n	80106cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106ba:	4b07      	ldr	r3, [pc, #28]	; (80106d8 <prvResetNextTaskUnblockTime+0x38>)
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	4a04      	ldr	r2, [pc, #16]	; (80106dc <prvResetNextTaskUnblockTime+0x3c>)
 80106ca:	6013      	str	r3, [r2, #0]
}
 80106cc:	bf00      	nop
 80106ce:	370c      	adds	r7, #12
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr
 80106d8:	20000ca4 	.word	0x20000ca4
 80106dc:	20000d0c 	.word	0x20000d0c

080106e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80106e0:	b480      	push	{r7}
 80106e2:	b083      	sub	sp, #12
 80106e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80106e6:	4b0b      	ldr	r3, [pc, #44]	; (8010714 <xTaskGetSchedulerState+0x34>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d102      	bne.n	80106f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80106ee:	2301      	movs	r3, #1
 80106f0:	607b      	str	r3, [r7, #4]
 80106f2:	e008      	b.n	8010706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106f4:	4b08      	ldr	r3, [pc, #32]	; (8010718 <xTaskGetSchedulerState+0x38>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d102      	bne.n	8010702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80106fc:	2302      	movs	r3, #2
 80106fe:	607b      	str	r3, [r7, #4]
 8010700:	e001      	b.n	8010706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010702:	2300      	movs	r3, #0
 8010704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010706:	687b      	ldr	r3, [r7, #4]
	}
 8010708:	4618      	mov	r0, r3
 801070a:	370c      	adds	r7, #12
 801070c:	46bd      	mov	sp, r7
 801070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010712:	4770      	bx	lr
 8010714:	20000cf8 	.word	0x20000cf8
 8010718:	20000d14 	.word	0x20000d14

0801071c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801071c:	b580      	push	{r7, lr}
 801071e:	b086      	sub	sp, #24
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010728:	2300      	movs	r3, #0
 801072a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d054      	beq.n	80107dc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010732:	4b2d      	ldr	r3, [pc, #180]	; (80107e8 <xTaskPriorityDisinherit+0xcc>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	693a      	ldr	r2, [r7, #16]
 8010738:	429a      	cmp	r2, r3
 801073a:	d009      	beq.n	8010750 <xTaskPriorityDisinherit+0x34>
 801073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010740:	f383 8811 	msr	BASEPRI, r3
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	60fb      	str	r3, [r7, #12]
 801074e:	e7fe      	b.n	801074e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010754:	2b00      	cmp	r3, #0
 8010756:	d109      	bne.n	801076c <xTaskPriorityDisinherit+0x50>
 8010758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	60bb      	str	r3, [r7, #8]
 801076a:	e7fe      	b.n	801076a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010770:	1e5a      	subs	r2, r3, #1
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801077e:	429a      	cmp	r2, r3
 8010780:	d02c      	beq.n	80107dc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010786:	2b00      	cmp	r3, #0
 8010788:	d128      	bne.n	80107dc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	3304      	adds	r3, #4
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe fbe2 	bl	800ef58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ac:	4b0f      	ldr	r3, [pc, #60]	; (80107ec <xTaskPriorityDisinherit+0xd0>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d903      	bls.n	80107bc <xTaskPriorityDisinherit+0xa0>
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107b8:	4a0c      	ldr	r2, [pc, #48]	; (80107ec <xTaskPriorityDisinherit+0xd0>)
 80107ba:	6013      	str	r3, [r2, #0]
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107c0:	4613      	mov	r3, r2
 80107c2:	009b      	lsls	r3, r3, #2
 80107c4:	4413      	add	r3, r2
 80107c6:	009b      	lsls	r3, r3, #2
 80107c8:	4a09      	ldr	r2, [pc, #36]	; (80107f0 <xTaskPriorityDisinherit+0xd4>)
 80107ca:	441a      	add	r2, r3
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	3304      	adds	r3, #4
 80107d0:	4619      	mov	r1, r3
 80107d2:	4610      	mov	r0, r2
 80107d4:	f7fe fb63 	bl	800ee9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80107d8:	2301      	movs	r3, #1
 80107da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80107dc:	697b      	ldr	r3, [r7, #20]
	}
 80107de:	4618      	mov	r0, r3
 80107e0:	3718      	adds	r7, #24
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	20000818 	.word	0x20000818
 80107ec:	20000cf4 	.word	0x20000cf4
 80107f0:	2000081c 	.word	0x2000081c

080107f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80107fe:	4b21      	ldr	r3, [pc, #132]	; (8010884 <prvAddCurrentTaskToDelayedList+0x90>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010804:	4b20      	ldr	r3, [pc, #128]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	3304      	adds	r3, #4
 801080a:	4618      	mov	r0, r3
 801080c:	f7fe fba4 	bl	800ef58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010816:	d10a      	bne.n	801082e <prvAddCurrentTaskToDelayedList+0x3a>
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d007      	beq.n	801082e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801081e:	4b1a      	ldr	r3, [pc, #104]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	3304      	adds	r3, #4
 8010824:	4619      	mov	r1, r3
 8010826:	4819      	ldr	r0, [pc, #100]	; (801088c <prvAddCurrentTaskToDelayedList+0x98>)
 8010828:	f7fe fb39 	bl	800ee9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801082c:	e026      	b.n	801087c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4413      	add	r3, r2
 8010834:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010836:	4b14      	ldr	r3, [pc, #80]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	68ba      	ldr	r2, [r7, #8]
 801083c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801083e:	68ba      	ldr	r2, [r7, #8]
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	429a      	cmp	r2, r3
 8010844:	d209      	bcs.n	801085a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010846:	4b12      	ldr	r3, [pc, #72]	; (8010890 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010848:	681a      	ldr	r2, [r3, #0]
 801084a:	4b0f      	ldr	r3, [pc, #60]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	3304      	adds	r3, #4
 8010850:	4619      	mov	r1, r3
 8010852:	4610      	mov	r0, r2
 8010854:	f7fe fb47 	bl	800eee6 <vListInsert>
}
 8010858:	e010      	b.n	801087c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801085a:	4b0e      	ldr	r3, [pc, #56]	; (8010894 <prvAddCurrentTaskToDelayedList+0xa0>)
 801085c:	681a      	ldr	r2, [r3, #0]
 801085e:	4b0a      	ldr	r3, [pc, #40]	; (8010888 <prvAddCurrentTaskToDelayedList+0x94>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	3304      	adds	r3, #4
 8010864:	4619      	mov	r1, r3
 8010866:	4610      	mov	r0, r2
 8010868:	f7fe fb3d 	bl	800eee6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801086c:	4b0a      	ldr	r3, [pc, #40]	; (8010898 <prvAddCurrentTaskToDelayedList+0xa4>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68ba      	ldr	r2, [r7, #8]
 8010872:	429a      	cmp	r2, r3
 8010874:	d202      	bcs.n	801087c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010876:	4a08      	ldr	r2, [pc, #32]	; (8010898 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	6013      	str	r3, [r2, #0]
}
 801087c:	bf00      	nop
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	20000cf0 	.word	0x20000cf0
 8010888:	20000818 	.word	0x20000818
 801088c:	20000cd8 	.word	0x20000cd8
 8010890:	20000ca8 	.word	0x20000ca8
 8010894:	20000ca4 	.word	0x20000ca4
 8010898:	20000d0c 	.word	0x20000d0c

0801089c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b08a      	sub	sp, #40	; 0x28
 80108a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80108a2:	2300      	movs	r3, #0
 80108a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80108a6:	f000 faff 	bl	8010ea8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80108aa:	4b1c      	ldr	r3, [pc, #112]	; (801091c <xTimerCreateTimerTask+0x80>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d021      	beq.n	80108f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80108b2:	2300      	movs	r3, #0
 80108b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80108b6:	2300      	movs	r3, #0
 80108b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80108ba:	1d3a      	adds	r2, r7, #4
 80108bc:	f107 0108 	add.w	r1, r7, #8
 80108c0:	f107 030c 	add.w	r3, r7, #12
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fe faa3 	bl	800ee10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80108ca:	6879      	ldr	r1, [r7, #4]
 80108cc:	68bb      	ldr	r3, [r7, #8]
 80108ce:	68fa      	ldr	r2, [r7, #12]
 80108d0:	9202      	str	r2, [sp, #8]
 80108d2:	9301      	str	r3, [sp, #4]
 80108d4:	2302      	movs	r3, #2
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	2300      	movs	r3, #0
 80108da:	460a      	mov	r2, r1
 80108dc:	4910      	ldr	r1, [pc, #64]	; (8010920 <xTimerCreateTimerTask+0x84>)
 80108de:	4811      	ldr	r0, [pc, #68]	; (8010924 <xTimerCreateTimerTask+0x88>)
 80108e0:	f7ff f8f6 	bl	800fad0 <xTaskCreateStatic>
 80108e4:	4602      	mov	r2, r0
 80108e6:	4b10      	ldr	r3, [pc, #64]	; (8010928 <xTimerCreateTimerTask+0x8c>)
 80108e8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80108ea:	4b0f      	ldr	r3, [pc, #60]	; (8010928 <xTimerCreateTimerTask+0x8c>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d001      	beq.n	80108f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80108f2:	2301      	movs	r3, #1
 80108f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d109      	bne.n	8010910 <xTimerCreateTimerTask+0x74>
 80108fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010900:	f383 8811 	msr	BASEPRI, r3
 8010904:	f3bf 8f6f 	isb	sy
 8010908:	f3bf 8f4f 	dsb	sy
 801090c:	613b      	str	r3, [r7, #16]
 801090e:	e7fe      	b.n	801090e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010910:	697b      	ldr	r3, [r7, #20]
}
 8010912:	4618      	mov	r0, r3
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	20000d48 	.word	0x20000d48
 8010920:	08011fcc 	.word	0x08011fcc
 8010924:	08010a5d 	.word	0x08010a5d
 8010928:	20000d4c 	.word	0x20000d4c

0801092c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b08a      	sub	sp, #40	; 0x28
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	607a      	str	r2, [r7, #4]
 8010938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801093a:	2300      	movs	r3, #0
 801093c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d109      	bne.n	8010958 <xTimerGenericCommand+0x2c>
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	623b      	str	r3, [r7, #32]
 8010956:	e7fe      	b.n	8010956 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010958:	4b19      	ldr	r3, [pc, #100]	; (80109c0 <xTimerGenericCommand+0x94>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d02a      	beq.n	80109b6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	2b05      	cmp	r3, #5
 8010970:	dc18      	bgt.n	80109a4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010972:	f7ff feb5 	bl	80106e0 <xTaskGetSchedulerState>
 8010976:	4603      	mov	r3, r0
 8010978:	2b02      	cmp	r3, #2
 801097a:	d109      	bne.n	8010990 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801097c:	4b10      	ldr	r3, [pc, #64]	; (80109c0 <xTimerGenericCommand+0x94>)
 801097e:	6818      	ldr	r0, [r3, #0]
 8010980:	f107 0110 	add.w	r1, r7, #16
 8010984:	2300      	movs	r3, #0
 8010986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010988:	f7fe fc4e 	bl	800f228 <xQueueGenericSend>
 801098c:	6278      	str	r0, [r7, #36]	; 0x24
 801098e:	e012      	b.n	80109b6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010990:	4b0b      	ldr	r3, [pc, #44]	; (80109c0 <xTimerGenericCommand+0x94>)
 8010992:	6818      	ldr	r0, [r3, #0]
 8010994:	f107 0110 	add.w	r1, r7, #16
 8010998:	2300      	movs	r3, #0
 801099a:	2200      	movs	r2, #0
 801099c:	f7fe fc44 	bl	800f228 <xQueueGenericSend>
 80109a0:	6278      	str	r0, [r7, #36]	; 0x24
 80109a2:	e008      	b.n	80109b6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80109a4:	4b06      	ldr	r3, [pc, #24]	; (80109c0 <xTimerGenericCommand+0x94>)
 80109a6:	6818      	ldr	r0, [r3, #0]
 80109a8:	f107 0110 	add.w	r1, r7, #16
 80109ac:	2300      	movs	r3, #0
 80109ae:	683a      	ldr	r2, [r7, #0]
 80109b0:	f7fe fd34 	bl	800f41c <xQueueGenericSendFromISR>
 80109b4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3728      	adds	r7, #40	; 0x28
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	20000d48 	.word	0x20000d48

080109c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b088      	sub	sp, #32
 80109c8:	af02      	add	r7, sp, #8
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109ce:	4b22      	ldr	r3, [pc, #136]	; (8010a58 <prvProcessExpiredTimer+0x94>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	3304      	adds	r3, #4
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fe fabb 	bl	800ef58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80109e8:	f003 0304 	and.w	r3, r3, #4
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d021      	beq.n	8010a34 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	699a      	ldr	r2, [r3, #24]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	18d1      	adds	r1, r2, r3
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	6978      	ldr	r0, [r7, #20]
 80109fe:	f000 f8d1 	bl	8010ba4 <prvInsertTimerInActiveList>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d01e      	beq.n	8010a46 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a08:	2300      	movs	r3, #0
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	2100      	movs	r1, #0
 8010a12:	6978      	ldr	r0, [r7, #20]
 8010a14:	f7ff ff8a 	bl	801092c <xTimerGenericCommand>
 8010a18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d112      	bne.n	8010a46 <prvProcessExpiredTimer+0x82>
 8010a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a24:	f383 8811 	msr	BASEPRI, r3
 8010a28:	f3bf 8f6f 	isb	sy
 8010a2c:	f3bf 8f4f 	dsb	sy
 8010a30:	60fb      	str	r3, [r7, #12]
 8010a32:	e7fe      	b.n	8010a32 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a3a:	f023 0301 	bic.w	r3, r3, #1
 8010a3e:	b2da      	uxtb	r2, r3
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	6a1b      	ldr	r3, [r3, #32]
 8010a4a:	6978      	ldr	r0, [r7, #20]
 8010a4c:	4798      	blx	r3
}
 8010a4e:	bf00      	nop
 8010a50:	3718      	adds	r7, #24
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	20000d40 	.word	0x20000d40

08010a5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b084      	sub	sp, #16
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a64:	f107 0308 	add.w	r3, r7, #8
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f000 f857 	bl	8010b1c <prvGetNextExpireTime>
 8010a6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	4619      	mov	r1, r3
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f000 f803 	bl	8010a80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010a7a:	f000 f8d5 	bl	8010c28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010a7e:	e7f1      	b.n	8010a64 <prvTimerTask+0x8>

08010a80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010a8a:	f7ff fa57 	bl	800ff3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a8e:	f107 0308 	add.w	r3, r7, #8
 8010a92:	4618      	mov	r0, r3
 8010a94:	f000 f866 	bl	8010b64 <prvSampleTimeNow>
 8010a98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d130      	bne.n	8010b02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d10a      	bne.n	8010abc <prvProcessTimerOrBlockTask+0x3c>
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	429a      	cmp	r2, r3
 8010aac:	d806      	bhi.n	8010abc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010aae:	f7ff fa53 	bl	800ff58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010ab2:	68f9      	ldr	r1, [r7, #12]
 8010ab4:	6878      	ldr	r0, [r7, #4]
 8010ab6:	f7ff ff85 	bl	80109c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010aba:	e024      	b.n	8010b06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d008      	beq.n	8010ad4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010ac2:	4b13      	ldr	r3, [pc, #76]	; (8010b10 <prvProcessTimerOrBlockTask+0x90>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d101      	bne.n	8010ad0 <prvProcessTimerOrBlockTask+0x50>
 8010acc:	2301      	movs	r3, #1
 8010ace:	e000      	b.n	8010ad2 <prvProcessTimerOrBlockTask+0x52>
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010ad4:	4b0f      	ldr	r3, [pc, #60]	; (8010b14 <prvProcessTimerOrBlockTask+0x94>)
 8010ad6:	6818      	ldr	r0, [r3, #0]
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	1ad3      	subs	r3, r2, r3
 8010ade:	683a      	ldr	r2, [r7, #0]
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	f7fe ffc1 	bl	800fa68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010ae6:	f7ff fa37 	bl	800ff58 <xTaskResumeAll>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d10a      	bne.n	8010b06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010af0:	4b09      	ldr	r3, [pc, #36]	; (8010b18 <prvProcessTimerOrBlockTask+0x98>)
 8010af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010af6:	601a      	str	r2, [r3, #0]
 8010af8:	f3bf 8f4f 	dsb	sy
 8010afc:	f3bf 8f6f 	isb	sy
}
 8010b00:	e001      	b.n	8010b06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010b02:	f7ff fa29 	bl	800ff58 <xTaskResumeAll>
}
 8010b06:	bf00      	nop
 8010b08:	3710      	adds	r7, #16
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	20000d44 	.word	0x20000d44
 8010b14:	20000d48 	.word	0x20000d48
 8010b18:	e000ed04 	.word	0xe000ed04

08010b1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b085      	sub	sp, #20
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010b24:	4b0e      	ldr	r3, [pc, #56]	; (8010b60 <prvGetNextExpireTime+0x44>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d101      	bne.n	8010b32 <prvGetNextExpireTime+0x16>
 8010b2e:	2201      	movs	r2, #1
 8010b30:	e000      	b.n	8010b34 <prvGetNextExpireTime+0x18>
 8010b32:	2200      	movs	r2, #0
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d105      	bne.n	8010b4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010b40:	4b07      	ldr	r3, [pc, #28]	; (8010b60 <prvGetNextExpireTime+0x44>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	68db      	ldr	r3, [r3, #12]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	60fb      	str	r3, [r7, #12]
 8010b4a:	e001      	b.n	8010b50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010b50:	68fb      	ldr	r3, [r7, #12]
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3714      	adds	r7, #20
 8010b56:	46bd      	mov	sp, r7
 8010b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	20000d40 	.word	0x20000d40

08010b64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010b6c:	f7ff fa90 	bl	8010090 <xTaskGetTickCount>
 8010b70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010b72:	4b0b      	ldr	r3, [pc, #44]	; (8010ba0 <prvSampleTimeNow+0x3c>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	68fa      	ldr	r2, [r7, #12]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d205      	bcs.n	8010b88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010b7c:	f000 f930 	bl	8010de0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2201      	movs	r2, #1
 8010b84:	601a      	str	r2, [r3, #0]
 8010b86:	e002      	b.n	8010b8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010b8e:	4a04      	ldr	r2, [pc, #16]	; (8010ba0 <prvSampleTimeNow+0x3c>)
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010b94:	68fb      	ldr	r3, [r7, #12]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20000d50 	.word	0x20000d50

08010ba4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b086      	sub	sp, #24
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	60f8      	str	r0, [r7, #12]
 8010bac:	60b9      	str	r1, [r7, #8]
 8010bae:	607a      	str	r2, [r7, #4]
 8010bb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	68ba      	ldr	r2, [r7, #8]
 8010bba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	68fa      	ldr	r2, [r7, #12]
 8010bc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010bc2:	68ba      	ldr	r2, [r7, #8]
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	d812      	bhi.n	8010bf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bca:	687a      	ldr	r2, [r7, #4]
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	1ad2      	subs	r2, r2, r3
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	699b      	ldr	r3, [r3, #24]
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d302      	bcc.n	8010bde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	617b      	str	r3, [r7, #20]
 8010bdc:	e01b      	b.n	8010c16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010bde:	4b10      	ldr	r3, [pc, #64]	; (8010c20 <prvInsertTimerInActiveList+0x7c>)
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	3304      	adds	r3, #4
 8010be6:	4619      	mov	r1, r3
 8010be8:	4610      	mov	r0, r2
 8010bea:	f7fe f97c 	bl	800eee6 <vListInsert>
 8010bee:	e012      	b.n	8010c16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010bf0:	687a      	ldr	r2, [r7, #4]
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d206      	bcs.n	8010c06 <prvInsertTimerInActiveList+0x62>
 8010bf8:	68ba      	ldr	r2, [r7, #8]
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d302      	bcc.n	8010c06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010c00:	2301      	movs	r3, #1
 8010c02:	617b      	str	r3, [r7, #20]
 8010c04:	e007      	b.n	8010c16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c06:	4b07      	ldr	r3, [pc, #28]	; (8010c24 <prvInsertTimerInActiveList+0x80>)
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	3304      	adds	r3, #4
 8010c0e:	4619      	mov	r1, r3
 8010c10:	4610      	mov	r0, r2
 8010c12:	f7fe f968 	bl	800eee6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010c16:	697b      	ldr	r3, [r7, #20]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3718      	adds	r7, #24
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	20000d44 	.word	0x20000d44
 8010c24:	20000d40 	.word	0x20000d40

08010c28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b08e      	sub	sp, #56	; 0x38
 8010c2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010c2e:	e0c6      	b.n	8010dbe <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	da17      	bge.n	8010c66 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010c36:	1d3b      	adds	r3, r7, #4
 8010c38:	3304      	adds	r3, #4
 8010c3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d109      	bne.n	8010c56 <prvProcessReceivedCommands+0x2e>
 8010c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c46:	f383 8811 	msr	BASEPRI, r3
 8010c4a:	f3bf 8f6f 	isb	sy
 8010c4e:	f3bf 8f4f 	dsb	sy
 8010c52:	61fb      	str	r3, [r7, #28]
 8010c54:	e7fe      	b.n	8010c54 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c5c:	6850      	ldr	r0, [r2, #4]
 8010c5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c60:	6892      	ldr	r2, [r2, #8]
 8010c62:	4611      	mov	r1, r2
 8010c64:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f2c0 80a7 	blt.w	8010dbc <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c74:	695b      	ldr	r3, [r3, #20]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d004      	beq.n	8010c84 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c7c:	3304      	adds	r3, #4
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7fe f96a 	bl	800ef58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010c84:	463b      	mov	r3, r7
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7ff ff6c 	bl	8010b64 <prvSampleTimeNow>
 8010c8c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	2b09      	cmp	r3, #9
 8010c92:	f200 8094 	bhi.w	8010dbe <prvProcessReceivedCommands+0x196>
 8010c96:	a201      	add	r2, pc, #4	; (adr r2, 8010c9c <prvProcessReceivedCommands+0x74>)
 8010c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c9c:	08010cc5 	.word	0x08010cc5
 8010ca0:	08010cc5 	.word	0x08010cc5
 8010ca4:	08010cc5 	.word	0x08010cc5
 8010ca8:	08010d37 	.word	0x08010d37
 8010cac:	08010d4b 	.word	0x08010d4b
 8010cb0:	08010d93 	.word	0x08010d93
 8010cb4:	08010cc5 	.word	0x08010cc5
 8010cb8:	08010cc5 	.word	0x08010cc5
 8010cbc:	08010d37 	.word	0x08010d37
 8010cc0:	08010d4b 	.word	0x08010d4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cca:	f043 0301 	orr.w	r3, r3, #1
 8010cce:	b2da      	uxtb	r2, r3
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010cd6:	68ba      	ldr	r2, [r7, #8]
 8010cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cda:	699b      	ldr	r3, [r3, #24]
 8010cdc:	18d1      	adds	r1, r2, r3
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ce4:	f7ff ff5e 	bl	8010ba4 <prvInsertTimerInActiveList>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d067      	beq.n	8010dbe <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf0:	6a1b      	ldr	r3, [r3, #32]
 8010cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cf4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010cfc:	f003 0304 	and.w	r3, r3, #4
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d05c      	beq.n	8010dbe <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010d04:	68ba      	ldr	r2, [r7, #8]
 8010d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d08:	699b      	ldr	r3, [r3, #24]
 8010d0a:	441a      	add	r2, r3
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	9300      	str	r3, [sp, #0]
 8010d10:	2300      	movs	r3, #0
 8010d12:	2100      	movs	r1, #0
 8010d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d16:	f7ff fe09 	bl	801092c <xTimerGenericCommand>
 8010d1a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010d1c:	6a3b      	ldr	r3, [r7, #32]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d14d      	bne.n	8010dbe <prvProcessReceivedCommands+0x196>
 8010d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d26:	f383 8811 	msr	BASEPRI, r3
 8010d2a:	f3bf 8f6f 	isb	sy
 8010d2e:	f3bf 8f4f 	dsb	sy
 8010d32:	61bb      	str	r3, [r7, #24]
 8010d34:	e7fe      	b.n	8010d34 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d3c:	f023 0301 	bic.w	r3, r3, #1
 8010d40:	b2da      	uxtb	r2, r3
 8010d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010d48:	e039      	b.n	8010dbe <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d50:	f043 0301 	orr.w	r3, r3, #1
 8010d54:	b2da      	uxtb	r2, r3
 8010d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010d5c:	68ba      	ldr	r2, [r7, #8]
 8010d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d64:	699b      	ldr	r3, [r3, #24]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d109      	bne.n	8010d7e <prvProcessReceivedCommands+0x156>
 8010d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d6e:	f383 8811 	msr	BASEPRI, r3
 8010d72:	f3bf 8f6f 	isb	sy
 8010d76:	f3bf 8f4f 	dsb	sy
 8010d7a:	617b      	str	r3, [r7, #20]
 8010d7c:	e7fe      	b.n	8010d7c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d80:	699a      	ldr	r2, [r3, #24]
 8010d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d84:	18d1      	adds	r1, r2, r3
 8010d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d8c:	f7ff ff0a 	bl	8010ba4 <prvInsertTimerInActiveList>
					break;
 8010d90:	e015      	b.n	8010dbe <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d98:	f003 0302 	and.w	r3, r3, #2
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d103      	bne.n	8010da8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8010da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010da2:	f000 fbc7 	bl	8011534 <vPortFree>
 8010da6:	e00a      	b.n	8010dbe <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010daa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dae:	f023 0301 	bic.w	r3, r3, #1
 8010db2:	b2da      	uxtb	r2, r3
 8010db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010dba:	e000      	b.n	8010dbe <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010dbc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010dbe:	4b07      	ldr	r3, [pc, #28]	; (8010ddc <prvProcessReceivedCommands+0x1b4>)
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	1d39      	adds	r1, r7, #4
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fe fbbc 	bl	800f544 <xQueueReceive>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	f47f af2e 	bne.w	8010c30 <prvProcessReceivedCommands+0x8>
	}
}
 8010dd4:	bf00      	nop
 8010dd6:	3730      	adds	r7, #48	; 0x30
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}
 8010ddc:	20000d48 	.word	0x20000d48

08010de0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b088      	sub	sp, #32
 8010de4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010de6:	e047      	b.n	8010e78 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010de8:	4b2d      	ldr	r3, [pc, #180]	; (8010ea0 <prvSwitchTimerLists+0xc0>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010df2:	4b2b      	ldr	r3, [pc, #172]	; (8010ea0 <prvSwitchTimerLists+0xc0>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	68db      	ldr	r3, [r3, #12]
 8010df8:	68db      	ldr	r3, [r3, #12]
 8010dfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	3304      	adds	r3, #4
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7fe f8a9 	bl	800ef58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6a1b      	ldr	r3, [r3, #32]
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e14:	f003 0304 	and.w	r3, r3, #4
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d02d      	beq.n	8010e78 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	699b      	ldr	r3, [r3, #24]
 8010e20:	693a      	ldr	r2, [r7, #16]
 8010e22:	4413      	add	r3, r2
 8010e24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	693b      	ldr	r3, [r7, #16]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d90e      	bls.n	8010e4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	68ba      	ldr	r2, [r7, #8]
 8010e32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	68fa      	ldr	r2, [r7, #12]
 8010e38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e3a:	4b19      	ldr	r3, [pc, #100]	; (8010ea0 <prvSwitchTimerLists+0xc0>)
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	3304      	adds	r3, #4
 8010e42:	4619      	mov	r1, r3
 8010e44:	4610      	mov	r0, r2
 8010e46:	f7fe f84e 	bl	800eee6 <vListInsert>
 8010e4a:	e015      	b.n	8010e78 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	2300      	movs	r3, #0
 8010e52:	693a      	ldr	r2, [r7, #16]
 8010e54:	2100      	movs	r1, #0
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f7ff fd68 	bl	801092c <xTimerGenericCommand>
 8010e5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d109      	bne.n	8010e78 <prvSwitchTimerLists+0x98>
 8010e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e68:	f383 8811 	msr	BASEPRI, r3
 8010e6c:	f3bf 8f6f 	isb	sy
 8010e70:	f3bf 8f4f 	dsb	sy
 8010e74:	603b      	str	r3, [r7, #0]
 8010e76:	e7fe      	b.n	8010e76 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e78:	4b09      	ldr	r3, [pc, #36]	; (8010ea0 <prvSwitchTimerLists+0xc0>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1b2      	bne.n	8010de8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010e82:	4b07      	ldr	r3, [pc, #28]	; (8010ea0 <prvSwitchTimerLists+0xc0>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010e88:	4b06      	ldr	r3, [pc, #24]	; (8010ea4 <prvSwitchTimerLists+0xc4>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a04      	ldr	r2, [pc, #16]	; (8010ea0 <prvSwitchTimerLists+0xc0>)
 8010e8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010e90:	4a04      	ldr	r2, [pc, #16]	; (8010ea4 <prvSwitchTimerLists+0xc4>)
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	6013      	str	r3, [r2, #0]
}
 8010e96:	bf00      	nop
 8010e98:	3718      	adds	r7, #24
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	20000d40 	.word	0x20000d40
 8010ea4:	20000d44 	.word	0x20000d44

08010ea8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010eae:	f000 f965 	bl	801117c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010eb2:	4b15      	ldr	r3, [pc, #84]	; (8010f08 <prvCheckForValidListAndQueue+0x60>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d120      	bne.n	8010efc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010eba:	4814      	ldr	r0, [pc, #80]	; (8010f0c <prvCheckForValidListAndQueue+0x64>)
 8010ebc:	f7fd ffc2 	bl	800ee44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010ec0:	4813      	ldr	r0, [pc, #76]	; (8010f10 <prvCheckForValidListAndQueue+0x68>)
 8010ec2:	f7fd ffbf 	bl	800ee44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010ec6:	4b13      	ldr	r3, [pc, #76]	; (8010f14 <prvCheckForValidListAndQueue+0x6c>)
 8010ec8:	4a10      	ldr	r2, [pc, #64]	; (8010f0c <prvCheckForValidListAndQueue+0x64>)
 8010eca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010ecc:	4b12      	ldr	r3, [pc, #72]	; (8010f18 <prvCheckForValidListAndQueue+0x70>)
 8010ece:	4a10      	ldr	r2, [pc, #64]	; (8010f10 <prvCheckForValidListAndQueue+0x68>)
 8010ed0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	4b11      	ldr	r3, [pc, #68]	; (8010f1c <prvCheckForValidListAndQueue+0x74>)
 8010ed8:	4a11      	ldr	r2, [pc, #68]	; (8010f20 <prvCheckForValidListAndQueue+0x78>)
 8010eda:	2110      	movs	r1, #16
 8010edc:	200a      	movs	r0, #10
 8010ede:	f7fe f8cd 	bl	800f07c <xQueueGenericCreateStatic>
 8010ee2:	4602      	mov	r2, r0
 8010ee4:	4b08      	ldr	r3, [pc, #32]	; (8010f08 <prvCheckForValidListAndQueue+0x60>)
 8010ee6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ee8:	4b07      	ldr	r3, [pc, #28]	; (8010f08 <prvCheckForValidListAndQueue+0x60>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d005      	beq.n	8010efc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010ef0:	4b05      	ldr	r3, [pc, #20]	; (8010f08 <prvCheckForValidListAndQueue+0x60>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	490b      	ldr	r1, [pc, #44]	; (8010f24 <prvCheckForValidListAndQueue+0x7c>)
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7fe fd8e 	bl	800fa18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010efc:	f000 f96c 	bl	80111d8 <vPortExitCritical>
}
 8010f00:	bf00      	nop
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}
 8010f06:	bf00      	nop
 8010f08:	20000d48 	.word	0x20000d48
 8010f0c:	20000d18 	.word	0x20000d18
 8010f10:	20000d2c 	.word	0x20000d2c
 8010f14:	20000d40 	.word	0x20000d40
 8010f18:	20000d44 	.word	0x20000d44
 8010f1c:	20000df4 	.word	0x20000df4
 8010f20:	20000d54 	.word	0x20000d54
 8010f24:	08011fd4 	.word	0x08011fd4

08010f28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b085      	sub	sp, #20
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	3b04      	subs	r3, #4
 8010f38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010f40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	3b04      	subs	r3, #4
 8010f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	f023 0201 	bic.w	r2, r3, #1
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	3b04      	subs	r3, #4
 8010f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010f58:	4a0c      	ldr	r2, [pc, #48]	; (8010f8c <pxPortInitialiseStack+0x64>)
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	3b14      	subs	r3, #20
 8010f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010f64:	687a      	ldr	r2, [r7, #4]
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	3b04      	subs	r3, #4
 8010f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	f06f 0202 	mvn.w	r2, #2
 8010f76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	3b20      	subs	r3, #32
 8010f7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3714      	adds	r7, #20
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr
 8010f8c:	08010f91 	.word	0x08010f91

08010f90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010f90:	b480      	push	{r7}
 8010f92:	b085      	sub	sp, #20
 8010f94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010f96:	2300      	movs	r3, #0
 8010f98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010f9a:	4b11      	ldr	r3, [pc, #68]	; (8010fe0 <prvTaskExitError+0x50>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fa2:	d009      	beq.n	8010fb8 <prvTaskExitError+0x28>
 8010fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa8:	f383 8811 	msr	BASEPRI, r3
 8010fac:	f3bf 8f6f 	isb	sy
 8010fb0:	f3bf 8f4f 	dsb	sy
 8010fb4:	60fb      	str	r3, [r7, #12]
 8010fb6:	e7fe      	b.n	8010fb6 <prvTaskExitError+0x26>
 8010fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbc:	f383 8811 	msr	BASEPRI, r3
 8010fc0:	f3bf 8f6f 	isb	sy
 8010fc4:	f3bf 8f4f 	dsb	sy
 8010fc8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010fca:	bf00      	nop
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d0fc      	beq.n	8010fcc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010fd2:	bf00      	nop
 8010fd4:	3714      	adds	r7, #20
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr
 8010fde:	bf00      	nop
 8010fe0:	20000084 	.word	0x20000084
	...

08010ff0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010ff0:	4b07      	ldr	r3, [pc, #28]	; (8011010 <pxCurrentTCBConst2>)
 8010ff2:	6819      	ldr	r1, [r3, #0]
 8010ff4:	6808      	ldr	r0, [r1, #0]
 8010ff6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ffa:	f380 8809 	msr	PSP, r0
 8010ffe:	f3bf 8f6f 	isb	sy
 8011002:	f04f 0000 	mov.w	r0, #0
 8011006:	f380 8811 	msr	BASEPRI, r0
 801100a:	4770      	bx	lr
 801100c:	f3af 8000 	nop.w

08011010 <pxCurrentTCBConst2>:
 8011010:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011014:	bf00      	nop
 8011016:	bf00      	nop

08011018 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011018:	4808      	ldr	r0, [pc, #32]	; (801103c <prvPortStartFirstTask+0x24>)
 801101a:	6800      	ldr	r0, [r0, #0]
 801101c:	6800      	ldr	r0, [r0, #0]
 801101e:	f380 8808 	msr	MSP, r0
 8011022:	f04f 0000 	mov.w	r0, #0
 8011026:	f380 8814 	msr	CONTROL, r0
 801102a:	b662      	cpsie	i
 801102c:	b661      	cpsie	f
 801102e:	f3bf 8f4f 	dsb	sy
 8011032:	f3bf 8f6f 	isb	sy
 8011036:	df00      	svc	0
 8011038:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801103a:	bf00      	nop
 801103c:	e000ed08 	.word	0xe000ed08

08011040 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b086      	sub	sp, #24
 8011044:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011046:	4b44      	ldr	r3, [pc, #272]	; (8011158 <xPortStartScheduler+0x118>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	4a44      	ldr	r2, [pc, #272]	; (801115c <xPortStartScheduler+0x11c>)
 801104c:	4293      	cmp	r3, r2
 801104e:	d109      	bne.n	8011064 <xPortStartScheduler+0x24>
 8011050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011054:	f383 8811 	msr	BASEPRI, r3
 8011058:	f3bf 8f6f 	isb	sy
 801105c:	f3bf 8f4f 	dsb	sy
 8011060:	613b      	str	r3, [r7, #16]
 8011062:	e7fe      	b.n	8011062 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011064:	4b3c      	ldr	r3, [pc, #240]	; (8011158 <xPortStartScheduler+0x118>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	4a3d      	ldr	r2, [pc, #244]	; (8011160 <xPortStartScheduler+0x120>)
 801106a:	4293      	cmp	r3, r2
 801106c:	d109      	bne.n	8011082 <xPortStartScheduler+0x42>
 801106e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011072:	f383 8811 	msr	BASEPRI, r3
 8011076:	f3bf 8f6f 	isb	sy
 801107a:	f3bf 8f4f 	dsb	sy
 801107e:	60fb      	str	r3, [r7, #12]
 8011080:	e7fe      	b.n	8011080 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011082:	4b38      	ldr	r3, [pc, #224]	; (8011164 <xPortStartScheduler+0x124>)
 8011084:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	b2db      	uxtb	r3, r3
 801108c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	22ff      	movs	r2, #255	; 0xff
 8011092:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	b2db      	uxtb	r3, r3
 801109a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801109c:	78fb      	ldrb	r3, [r7, #3]
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80110a4:	b2da      	uxtb	r2, r3
 80110a6:	4b30      	ldr	r3, [pc, #192]	; (8011168 <xPortStartScheduler+0x128>)
 80110a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80110aa:	4b30      	ldr	r3, [pc, #192]	; (801116c <xPortStartScheduler+0x12c>)
 80110ac:	2207      	movs	r2, #7
 80110ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110b0:	e009      	b.n	80110c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80110b2:	4b2e      	ldr	r3, [pc, #184]	; (801116c <xPortStartScheduler+0x12c>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	3b01      	subs	r3, #1
 80110b8:	4a2c      	ldr	r2, [pc, #176]	; (801116c <xPortStartScheduler+0x12c>)
 80110ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80110bc:	78fb      	ldrb	r3, [r7, #3]
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	005b      	lsls	r3, r3, #1
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80110c6:	78fb      	ldrb	r3, [r7, #3]
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110ce:	2b80      	cmp	r3, #128	; 0x80
 80110d0:	d0ef      	beq.n	80110b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80110d2:	4b26      	ldr	r3, [pc, #152]	; (801116c <xPortStartScheduler+0x12c>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	f1c3 0307 	rsb	r3, r3, #7
 80110da:	2b04      	cmp	r3, #4
 80110dc:	d009      	beq.n	80110f2 <xPortStartScheduler+0xb2>
 80110de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110e2:	f383 8811 	msr	BASEPRI, r3
 80110e6:	f3bf 8f6f 	isb	sy
 80110ea:	f3bf 8f4f 	dsb	sy
 80110ee:	60bb      	str	r3, [r7, #8]
 80110f0:	e7fe      	b.n	80110f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80110f2:	4b1e      	ldr	r3, [pc, #120]	; (801116c <xPortStartScheduler+0x12c>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	021b      	lsls	r3, r3, #8
 80110f8:	4a1c      	ldr	r2, [pc, #112]	; (801116c <xPortStartScheduler+0x12c>)
 80110fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80110fc:	4b1b      	ldr	r3, [pc, #108]	; (801116c <xPortStartScheduler+0x12c>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011104:	4a19      	ldr	r2, [pc, #100]	; (801116c <xPortStartScheduler+0x12c>)
 8011106:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	b2da      	uxtb	r2, r3
 801110c:	697b      	ldr	r3, [r7, #20]
 801110e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011110:	4b17      	ldr	r3, [pc, #92]	; (8011170 <xPortStartScheduler+0x130>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4a16      	ldr	r2, [pc, #88]	; (8011170 <xPortStartScheduler+0x130>)
 8011116:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801111a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801111c:	4b14      	ldr	r3, [pc, #80]	; (8011170 <xPortStartScheduler+0x130>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a13      	ldr	r2, [pc, #76]	; (8011170 <xPortStartScheduler+0x130>)
 8011122:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011126:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011128:	f000 f8d6 	bl	80112d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801112c:	4b11      	ldr	r3, [pc, #68]	; (8011174 <xPortStartScheduler+0x134>)
 801112e:	2200      	movs	r2, #0
 8011130:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011132:	f000 f8f5 	bl	8011320 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011136:	4b10      	ldr	r3, [pc, #64]	; (8011178 <xPortStartScheduler+0x138>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	4a0f      	ldr	r2, [pc, #60]	; (8011178 <xPortStartScheduler+0x138>)
 801113c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011140:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011142:	f7ff ff69 	bl	8011018 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011146:	f7ff f86b 	bl	8010220 <vTaskSwitchContext>
	prvTaskExitError();
 801114a:	f7ff ff21 	bl	8010f90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801114e:	2300      	movs	r3, #0
}
 8011150:	4618      	mov	r0, r3
 8011152:	3718      	adds	r7, #24
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	e000ed00 	.word	0xe000ed00
 801115c:	410fc271 	.word	0x410fc271
 8011160:	410fc270 	.word	0x410fc270
 8011164:	e000e400 	.word	0xe000e400
 8011168:	20000e44 	.word	0x20000e44
 801116c:	20000e48 	.word	0x20000e48
 8011170:	e000ed20 	.word	0xe000ed20
 8011174:	20000084 	.word	0x20000084
 8011178:	e000ef34 	.word	0xe000ef34

0801117c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801117c:	b480      	push	{r7}
 801117e:	b083      	sub	sp, #12
 8011180:	af00      	add	r7, sp, #0
 8011182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011186:	f383 8811 	msr	BASEPRI, r3
 801118a:	f3bf 8f6f 	isb	sy
 801118e:	f3bf 8f4f 	dsb	sy
 8011192:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011194:	4b0e      	ldr	r3, [pc, #56]	; (80111d0 <vPortEnterCritical+0x54>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	3301      	adds	r3, #1
 801119a:	4a0d      	ldr	r2, [pc, #52]	; (80111d0 <vPortEnterCritical+0x54>)
 801119c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801119e:	4b0c      	ldr	r3, [pc, #48]	; (80111d0 <vPortEnterCritical+0x54>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d10e      	bne.n	80111c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80111a6:	4b0b      	ldr	r3, [pc, #44]	; (80111d4 <vPortEnterCritical+0x58>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	b2db      	uxtb	r3, r3
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d009      	beq.n	80111c4 <vPortEnterCritical+0x48>
 80111b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b4:	f383 8811 	msr	BASEPRI, r3
 80111b8:	f3bf 8f6f 	isb	sy
 80111bc:	f3bf 8f4f 	dsb	sy
 80111c0:	603b      	str	r3, [r7, #0]
 80111c2:	e7fe      	b.n	80111c2 <vPortEnterCritical+0x46>
	}
}
 80111c4:	bf00      	nop
 80111c6:	370c      	adds	r7, #12
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr
 80111d0:	20000084 	.word	0x20000084
 80111d4:	e000ed04 	.word	0xe000ed04

080111d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80111de:	4b11      	ldr	r3, [pc, #68]	; (8011224 <vPortExitCritical+0x4c>)
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d109      	bne.n	80111fa <vPortExitCritical+0x22>
 80111e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ea:	f383 8811 	msr	BASEPRI, r3
 80111ee:	f3bf 8f6f 	isb	sy
 80111f2:	f3bf 8f4f 	dsb	sy
 80111f6:	607b      	str	r3, [r7, #4]
 80111f8:	e7fe      	b.n	80111f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80111fa:	4b0a      	ldr	r3, [pc, #40]	; (8011224 <vPortExitCritical+0x4c>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	3b01      	subs	r3, #1
 8011200:	4a08      	ldr	r2, [pc, #32]	; (8011224 <vPortExitCritical+0x4c>)
 8011202:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011204:	4b07      	ldr	r3, [pc, #28]	; (8011224 <vPortExitCritical+0x4c>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d104      	bne.n	8011216 <vPortExitCritical+0x3e>
 801120c:	2300      	movs	r3, #0
 801120e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011216:	bf00      	nop
 8011218:	370c      	adds	r7, #12
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop
 8011224:	20000084 	.word	0x20000084
	...

08011230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011230:	f3ef 8009 	mrs	r0, PSP
 8011234:	f3bf 8f6f 	isb	sy
 8011238:	4b15      	ldr	r3, [pc, #84]	; (8011290 <pxCurrentTCBConst>)
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	f01e 0f10 	tst.w	lr, #16
 8011240:	bf08      	it	eq
 8011242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801124a:	6010      	str	r0, [r2, #0]
 801124c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011254:	f380 8811 	msr	BASEPRI, r0
 8011258:	f3bf 8f4f 	dsb	sy
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	f7fe ffde 	bl	8010220 <vTaskSwitchContext>
 8011264:	f04f 0000 	mov.w	r0, #0
 8011268:	f380 8811 	msr	BASEPRI, r0
 801126c:	bc09      	pop	{r0, r3}
 801126e:	6819      	ldr	r1, [r3, #0]
 8011270:	6808      	ldr	r0, [r1, #0]
 8011272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011276:	f01e 0f10 	tst.w	lr, #16
 801127a:	bf08      	it	eq
 801127c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011280:	f380 8809 	msr	PSP, r0
 8011284:	f3bf 8f6f 	isb	sy
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	f3af 8000 	nop.w

08011290 <pxCurrentTCBConst>:
 8011290:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011294:	bf00      	nop
 8011296:	bf00      	nop

08011298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
	__asm volatile
 801129e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a2:	f383 8811 	msr	BASEPRI, r3
 80112a6:	f3bf 8f6f 	isb	sy
 80112aa:	f3bf 8f4f 	dsb	sy
 80112ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80112b0:	f7fe fefe 	bl	80100b0 <xTaskIncrementTick>
 80112b4:	4603      	mov	r3, r0
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d003      	beq.n	80112c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80112ba:	4b06      	ldr	r3, [pc, #24]	; (80112d4 <SysTick_Handler+0x3c>)
 80112bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112c0:	601a      	str	r2, [r3, #0]
 80112c2:	2300      	movs	r3, #0
 80112c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80112cc:	bf00      	nop
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	e000ed04 	.word	0xe000ed04

080112d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80112d8:	b480      	push	{r7}
 80112da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80112dc:	4b0b      	ldr	r3, [pc, #44]	; (801130c <vPortSetupTimerInterrupt+0x34>)
 80112de:	2200      	movs	r2, #0
 80112e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80112e2:	4b0b      	ldr	r3, [pc, #44]	; (8011310 <vPortSetupTimerInterrupt+0x38>)
 80112e4:	2200      	movs	r2, #0
 80112e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80112e8:	4b0a      	ldr	r3, [pc, #40]	; (8011314 <vPortSetupTimerInterrupt+0x3c>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	4a0a      	ldr	r2, [pc, #40]	; (8011318 <vPortSetupTimerInterrupt+0x40>)
 80112ee:	fba2 2303 	umull	r2, r3, r2, r3
 80112f2:	099b      	lsrs	r3, r3, #6
 80112f4:	4a09      	ldr	r2, [pc, #36]	; (801131c <vPortSetupTimerInterrupt+0x44>)
 80112f6:	3b01      	subs	r3, #1
 80112f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80112fa:	4b04      	ldr	r3, [pc, #16]	; (801130c <vPortSetupTimerInterrupt+0x34>)
 80112fc:	2207      	movs	r2, #7
 80112fe:	601a      	str	r2, [r3, #0]
}
 8011300:	bf00      	nop
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop
 801130c:	e000e010 	.word	0xe000e010
 8011310:	e000e018 	.word	0xe000e018
 8011314:	20000000 	.word	0x20000000
 8011318:	10624dd3 	.word	0x10624dd3
 801131c:	e000e014 	.word	0xe000e014

08011320 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011320:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011330 <vPortEnableVFP+0x10>
 8011324:	6801      	ldr	r1, [r0, #0]
 8011326:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801132a:	6001      	str	r1, [r0, #0]
 801132c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801132e:	bf00      	nop
 8011330:	e000ed88 	.word	0xe000ed88

08011334 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011334:	b480      	push	{r7}
 8011336:	b085      	sub	sp, #20
 8011338:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801133a:	f3ef 8305 	mrs	r3, IPSR
 801133e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2b0f      	cmp	r3, #15
 8011344:	d913      	bls.n	801136e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011346:	4a16      	ldr	r2, [pc, #88]	; (80113a0 <vPortValidateInterruptPriority+0x6c>)
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	4413      	add	r3, r2
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011350:	4b14      	ldr	r3, [pc, #80]	; (80113a4 <vPortValidateInterruptPriority+0x70>)
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	7afa      	ldrb	r2, [r7, #11]
 8011356:	429a      	cmp	r2, r3
 8011358:	d209      	bcs.n	801136e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801135a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801135e:	f383 8811 	msr	BASEPRI, r3
 8011362:	f3bf 8f6f 	isb	sy
 8011366:	f3bf 8f4f 	dsb	sy
 801136a:	607b      	str	r3, [r7, #4]
 801136c:	e7fe      	b.n	801136c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801136e:	4b0e      	ldr	r3, [pc, #56]	; (80113a8 <vPortValidateInterruptPriority+0x74>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011376:	4b0d      	ldr	r3, [pc, #52]	; (80113ac <vPortValidateInterruptPriority+0x78>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	429a      	cmp	r2, r3
 801137c:	d909      	bls.n	8011392 <vPortValidateInterruptPriority+0x5e>
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	603b      	str	r3, [r7, #0]
 8011390:	e7fe      	b.n	8011390 <vPortValidateInterruptPriority+0x5c>
	}
 8011392:	bf00      	nop
 8011394:	3714      	adds	r7, #20
 8011396:	46bd      	mov	sp, r7
 8011398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139c:	4770      	bx	lr
 801139e:	bf00      	nop
 80113a0:	e000e3f0 	.word	0xe000e3f0
 80113a4:	20000e44 	.word	0x20000e44
 80113a8:	e000ed0c 	.word	0xe000ed0c
 80113ac:	20000e48 	.word	0x20000e48

080113b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08a      	sub	sp, #40	; 0x28
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80113b8:	2300      	movs	r3, #0
 80113ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80113bc:	f7fe fdbe 	bl	800ff3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80113c0:	4b57      	ldr	r3, [pc, #348]	; (8011520 <pvPortMalloc+0x170>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d101      	bne.n	80113cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80113c8:	f000 f90c 	bl	80115e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80113cc:	4b55      	ldr	r3, [pc, #340]	; (8011524 <pvPortMalloc+0x174>)
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	4013      	ands	r3, r2
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	f040 808c 	bne.w	80114f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d01c      	beq.n	801141a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80113e0:	2208      	movs	r2, #8
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4413      	add	r3, r2
 80113e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	f003 0307 	and.w	r3, r3, #7
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d013      	beq.n	801141a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f023 0307 	bic.w	r3, r3, #7
 80113f8:	3308      	adds	r3, #8
 80113fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f003 0307 	and.w	r3, r3, #7
 8011402:	2b00      	cmp	r3, #0
 8011404:	d009      	beq.n	801141a <pvPortMalloc+0x6a>
 8011406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801140a:	f383 8811 	msr	BASEPRI, r3
 801140e:	f3bf 8f6f 	isb	sy
 8011412:	f3bf 8f4f 	dsb	sy
 8011416:	617b      	str	r3, [r7, #20]
 8011418:	e7fe      	b.n	8011418 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d068      	beq.n	80114f2 <pvPortMalloc+0x142>
 8011420:	4b41      	ldr	r3, [pc, #260]	; (8011528 <pvPortMalloc+0x178>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	429a      	cmp	r2, r3
 8011428:	d863      	bhi.n	80114f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801142a:	4b40      	ldr	r3, [pc, #256]	; (801152c <pvPortMalloc+0x17c>)
 801142c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801142e:	4b3f      	ldr	r3, [pc, #252]	; (801152c <pvPortMalloc+0x17c>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011434:	e004      	b.n	8011440 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011438:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011442:	685b      	ldr	r3, [r3, #4]
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	429a      	cmp	r2, r3
 8011448:	d903      	bls.n	8011452 <pvPortMalloc+0xa2>
 801144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1f1      	bne.n	8011436 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011452:	4b33      	ldr	r3, [pc, #204]	; (8011520 <pvPortMalloc+0x170>)
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011458:	429a      	cmp	r2, r3
 801145a:	d04a      	beq.n	80114f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801145c:	6a3b      	ldr	r3, [r7, #32]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2208      	movs	r2, #8
 8011462:	4413      	add	r3, r2
 8011464:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	6a3b      	ldr	r3, [r7, #32]
 801146c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011470:	685a      	ldr	r2, [r3, #4]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	1ad2      	subs	r2, r2, r3
 8011476:	2308      	movs	r3, #8
 8011478:	005b      	lsls	r3, r3, #1
 801147a:	429a      	cmp	r2, r3
 801147c:	d91e      	bls.n	80114bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801147e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	4413      	add	r3, r2
 8011484:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011486:	69bb      	ldr	r3, [r7, #24]
 8011488:	f003 0307 	and.w	r3, r3, #7
 801148c:	2b00      	cmp	r3, #0
 801148e:	d009      	beq.n	80114a4 <pvPortMalloc+0xf4>
 8011490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011494:	f383 8811 	msr	BASEPRI, r3
 8011498:	f3bf 8f6f 	isb	sy
 801149c:	f3bf 8f4f 	dsb	sy
 80114a0:	613b      	str	r3, [r7, #16]
 80114a2:	e7fe      	b.n	80114a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80114a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114a6:	685a      	ldr	r2, [r3, #4]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	1ad2      	subs	r2, r2, r3
 80114ac:	69bb      	ldr	r3, [r7, #24]
 80114ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	687a      	ldr	r2, [r7, #4]
 80114b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80114b6:	69b8      	ldr	r0, [r7, #24]
 80114b8:	f000 f8f6 	bl	80116a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80114bc:	4b1a      	ldr	r3, [pc, #104]	; (8011528 <pvPortMalloc+0x178>)
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	1ad3      	subs	r3, r2, r3
 80114c6:	4a18      	ldr	r2, [pc, #96]	; (8011528 <pvPortMalloc+0x178>)
 80114c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80114ca:	4b17      	ldr	r3, [pc, #92]	; (8011528 <pvPortMalloc+0x178>)
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	4b18      	ldr	r3, [pc, #96]	; (8011530 <pvPortMalloc+0x180>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	429a      	cmp	r2, r3
 80114d4:	d203      	bcs.n	80114de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80114d6:	4b14      	ldr	r3, [pc, #80]	; (8011528 <pvPortMalloc+0x178>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	4a15      	ldr	r2, [pc, #84]	; (8011530 <pvPortMalloc+0x180>)
 80114dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80114de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	4b10      	ldr	r3, [pc, #64]	; (8011524 <pvPortMalloc+0x174>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	431a      	orrs	r2, r3
 80114e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80114ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ee:	2200      	movs	r2, #0
 80114f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80114f2:	f7fe fd31 	bl	800ff58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	f003 0307 	and.w	r3, r3, #7
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d009      	beq.n	8011514 <pvPortMalloc+0x164>
 8011500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	e7fe      	b.n	8011512 <pvPortMalloc+0x162>
	return pvReturn;
 8011514:	69fb      	ldr	r3, [r7, #28]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3728      	adds	r7, #40	; 0x28
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	20004a54 	.word	0x20004a54
 8011524:	20004a60 	.word	0x20004a60
 8011528:	20004a58 	.word	0x20004a58
 801152c:	20004a4c 	.word	0x20004a4c
 8011530:	20004a5c 	.word	0x20004a5c

08011534 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b086      	sub	sp, #24
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d046      	beq.n	80115d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011546:	2308      	movs	r3, #8
 8011548:	425b      	negs	r3, r3
 801154a:	697a      	ldr	r2, [r7, #20]
 801154c:	4413      	add	r3, r2
 801154e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	685a      	ldr	r2, [r3, #4]
 8011558:	4b20      	ldr	r3, [pc, #128]	; (80115dc <vPortFree+0xa8>)
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4013      	ands	r3, r2
 801155e:	2b00      	cmp	r3, #0
 8011560:	d109      	bne.n	8011576 <vPortFree+0x42>
 8011562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011566:	f383 8811 	msr	BASEPRI, r3
 801156a:	f3bf 8f6f 	isb	sy
 801156e:	f3bf 8f4f 	dsb	sy
 8011572:	60fb      	str	r3, [r7, #12]
 8011574:	e7fe      	b.n	8011574 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d009      	beq.n	8011592 <vPortFree+0x5e>
 801157e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	60bb      	str	r3, [r7, #8]
 8011590:	e7fe      	b.n	8011590 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	685a      	ldr	r2, [r3, #4]
 8011596:	4b11      	ldr	r3, [pc, #68]	; (80115dc <vPortFree+0xa8>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	4013      	ands	r3, r2
 801159c:	2b00      	cmp	r3, #0
 801159e:	d019      	beq.n	80115d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d115      	bne.n	80115d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	685a      	ldr	r2, [r3, #4]
 80115ac:	4b0b      	ldr	r3, [pc, #44]	; (80115dc <vPortFree+0xa8>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	43db      	mvns	r3, r3
 80115b2:	401a      	ands	r2, r3
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80115b8:	f7fe fcc0 	bl	800ff3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	685a      	ldr	r2, [r3, #4]
 80115c0:	4b07      	ldr	r3, [pc, #28]	; (80115e0 <vPortFree+0xac>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	4413      	add	r3, r2
 80115c6:	4a06      	ldr	r2, [pc, #24]	; (80115e0 <vPortFree+0xac>)
 80115c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80115ca:	6938      	ldr	r0, [r7, #16]
 80115cc:	f000 f86c 	bl	80116a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80115d0:	f7fe fcc2 	bl	800ff58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80115d4:	bf00      	nop
 80115d6:	3718      	adds	r7, #24
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	20004a60 	.word	0x20004a60
 80115e0:	20004a58 	.word	0x20004a58

080115e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80115e4:	b480      	push	{r7}
 80115e6:	b085      	sub	sp, #20
 80115e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80115ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80115ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80115f0:	4b27      	ldr	r3, [pc, #156]	; (8011690 <prvHeapInit+0xac>)
 80115f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f003 0307 	and.w	r3, r3, #7
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d00c      	beq.n	8011618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	3307      	adds	r3, #7
 8011602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f023 0307 	bic.w	r3, r3, #7
 801160a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801160c:	68ba      	ldr	r2, [r7, #8]
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	1ad3      	subs	r3, r2, r3
 8011612:	4a1f      	ldr	r2, [pc, #124]	; (8011690 <prvHeapInit+0xac>)
 8011614:	4413      	add	r3, r2
 8011616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801161c:	4a1d      	ldr	r2, [pc, #116]	; (8011694 <prvHeapInit+0xb0>)
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011622:	4b1c      	ldr	r3, [pc, #112]	; (8011694 <prvHeapInit+0xb0>)
 8011624:	2200      	movs	r2, #0
 8011626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	68ba      	ldr	r2, [r7, #8]
 801162c:	4413      	add	r3, r2
 801162e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011630:	2208      	movs	r2, #8
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	1a9b      	subs	r3, r3, r2
 8011636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f023 0307 	bic.w	r3, r3, #7
 801163e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	4a15      	ldr	r2, [pc, #84]	; (8011698 <prvHeapInit+0xb4>)
 8011644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011646:	4b14      	ldr	r3, [pc, #80]	; (8011698 <prvHeapInit+0xb4>)
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	2200      	movs	r2, #0
 801164c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801164e:	4b12      	ldr	r3, [pc, #72]	; (8011698 <prvHeapInit+0xb4>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	2200      	movs	r2, #0
 8011654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	68fa      	ldr	r2, [r7, #12]
 801165e:	1ad2      	subs	r2, r2, r3
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011664:	4b0c      	ldr	r3, [pc, #48]	; (8011698 <prvHeapInit+0xb4>)
 8011666:	681a      	ldr	r2, [r3, #0]
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801166c:	683b      	ldr	r3, [r7, #0]
 801166e:	685b      	ldr	r3, [r3, #4]
 8011670:	4a0a      	ldr	r2, [pc, #40]	; (801169c <prvHeapInit+0xb8>)
 8011672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	4a09      	ldr	r2, [pc, #36]	; (80116a0 <prvHeapInit+0xbc>)
 801167a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801167c:	4b09      	ldr	r3, [pc, #36]	; (80116a4 <prvHeapInit+0xc0>)
 801167e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011682:	601a      	str	r2, [r3, #0]
}
 8011684:	bf00      	nop
 8011686:	3714      	adds	r7, #20
 8011688:	46bd      	mov	sp, r7
 801168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168e:	4770      	bx	lr
 8011690:	20000e4c 	.word	0x20000e4c
 8011694:	20004a4c 	.word	0x20004a4c
 8011698:	20004a54 	.word	0x20004a54
 801169c:	20004a5c 	.word	0x20004a5c
 80116a0:	20004a58 	.word	0x20004a58
 80116a4:	20004a60 	.word	0x20004a60

080116a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80116a8:	b480      	push	{r7}
 80116aa:	b085      	sub	sp, #20
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80116b0:	4b28      	ldr	r3, [pc, #160]	; (8011754 <prvInsertBlockIntoFreeList+0xac>)
 80116b2:	60fb      	str	r3, [r7, #12]
 80116b4:	e002      	b.n	80116bc <prvInsertBlockIntoFreeList+0x14>
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	60fb      	str	r3, [r7, #12]
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d8f7      	bhi.n	80116b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	68ba      	ldr	r2, [r7, #8]
 80116d0:	4413      	add	r3, r2
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d108      	bne.n	80116ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	685a      	ldr	r2, [r3, #4]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	685b      	ldr	r3, [r3, #4]
 80116e0:	441a      	add	r2, r3
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	68ba      	ldr	r2, [r7, #8]
 80116f4:	441a      	add	r2, r3
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d118      	bne.n	8011730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	4b15      	ldr	r3, [pc, #84]	; (8011758 <prvInsertBlockIntoFreeList+0xb0>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	429a      	cmp	r2, r3
 8011708:	d00d      	beq.n	8011726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	685a      	ldr	r2, [r3, #4]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	441a      	add	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	681a      	ldr	r2, [r3, #0]
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	601a      	str	r2, [r3, #0]
 8011724:	e008      	b.n	8011738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011726:	4b0c      	ldr	r3, [pc, #48]	; (8011758 <prvInsertBlockIntoFreeList+0xb0>)
 8011728:	681a      	ldr	r2, [r3, #0]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	601a      	str	r2, [r3, #0]
 801172e:	e003      	b.n	8011738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	429a      	cmp	r2, r3
 801173e:	d002      	beq.n	8011746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	687a      	ldr	r2, [r7, #4]
 8011744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011746:	bf00      	nop
 8011748:	3714      	adds	r7, #20
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	20004a4c 	.word	0x20004a4c
 8011758:	20004a54 	.word	0x20004a54

0801175c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011760:	2201      	movs	r2, #1
 8011762:	490e      	ldr	r1, [pc, #56]	; (801179c <MX_USB_HOST_Init+0x40>)
 8011764:	480e      	ldr	r0, [pc, #56]	; (80117a0 <MX_USB_HOST_Init+0x44>)
 8011766:	f7fb fafd 	bl	800cd64 <USBH_Init>
 801176a:	4603      	mov	r3, r0
 801176c:	2b00      	cmp	r3, #0
 801176e:	d001      	beq.n	8011774 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011770:	f7ef fe46 	bl	8001400 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011774:	490b      	ldr	r1, [pc, #44]	; (80117a4 <MX_USB_HOST_Init+0x48>)
 8011776:	480a      	ldr	r0, [pc, #40]	; (80117a0 <MX_USB_HOST_Init+0x44>)
 8011778:	f7fb fba4 	bl	800cec4 <USBH_RegisterClass>
 801177c:	4603      	mov	r3, r0
 801177e:	2b00      	cmp	r3, #0
 8011780:	d001      	beq.n	8011786 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011782:	f7ef fe3d 	bl	8001400 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011786:	4806      	ldr	r0, [pc, #24]	; (80117a0 <MX_USB_HOST_Init+0x44>)
 8011788:	f7fb fc28 	bl	800cfdc <USBH_Start>
 801178c:	4603      	mov	r3, r0
 801178e:	2b00      	cmp	r3, #0
 8011790:	d001      	beq.n	8011796 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011792:	f7ef fe35 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011796:	bf00      	nop
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	080117a9 	.word	0x080117a9
 80117a0:	20005358 	.word	0x20005358
 80117a4:	20000064 	.word	0x20000064

080117a8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	460b      	mov	r3, r1
 80117b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80117b4:	78fb      	ldrb	r3, [r7, #3]
 80117b6:	3b01      	subs	r3, #1
 80117b8:	2b04      	cmp	r3, #4
 80117ba:	d819      	bhi.n	80117f0 <USBH_UserProcess+0x48>
 80117bc:	a201      	add	r2, pc, #4	; (adr r2, 80117c4 <USBH_UserProcess+0x1c>)
 80117be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c2:	bf00      	nop
 80117c4:	080117f1 	.word	0x080117f1
 80117c8:	080117e1 	.word	0x080117e1
 80117cc:	080117f1 	.word	0x080117f1
 80117d0:	080117e9 	.word	0x080117e9
 80117d4:	080117d9 	.word	0x080117d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80117d8:	4b09      	ldr	r3, [pc, #36]	; (8011800 <USBH_UserProcess+0x58>)
 80117da:	2203      	movs	r2, #3
 80117dc:	701a      	strb	r2, [r3, #0]
  break;
 80117de:	e008      	b.n	80117f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80117e0:	4b07      	ldr	r3, [pc, #28]	; (8011800 <USBH_UserProcess+0x58>)
 80117e2:	2202      	movs	r2, #2
 80117e4:	701a      	strb	r2, [r3, #0]
  break;
 80117e6:	e004      	b.n	80117f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80117e8:	4b05      	ldr	r3, [pc, #20]	; (8011800 <USBH_UserProcess+0x58>)
 80117ea:	2201      	movs	r2, #1
 80117ec:	701a      	strb	r2, [r3, #0]
  break;
 80117ee:	e000      	b.n	80117f2 <USBH_UserProcess+0x4a>

  default:
  break;
 80117f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80117f2:	bf00      	nop
 80117f4:	370c      	adds	r7, #12
 80117f6:	46bd      	mov	sp, r7
 80117f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fc:	4770      	bx	lr
 80117fe:	bf00      	nop
 8011800:	20004a64 	.word	0x20004a64

08011804 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b08a      	sub	sp, #40	; 0x28
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801180c:	f107 0314 	add.w	r3, r7, #20
 8011810:	2200      	movs	r2, #0
 8011812:	601a      	str	r2, [r3, #0]
 8011814:	605a      	str	r2, [r3, #4]
 8011816:	609a      	str	r2, [r3, #8]
 8011818:	60da      	str	r2, [r3, #12]
 801181a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011824:	d147      	bne.n	80118b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011826:	2300      	movs	r3, #0
 8011828:	613b      	str	r3, [r7, #16]
 801182a:	4b25      	ldr	r3, [pc, #148]	; (80118c0 <HAL_HCD_MspInit+0xbc>)
 801182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801182e:	4a24      	ldr	r2, [pc, #144]	; (80118c0 <HAL_HCD_MspInit+0xbc>)
 8011830:	f043 0301 	orr.w	r3, r3, #1
 8011834:	6313      	str	r3, [r2, #48]	; 0x30
 8011836:	4b22      	ldr	r3, [pc, #136]	; (80118c0 <HAL_HCD_MspInit+0xbc>)
 8011838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801183a:	f003 0301 	and.w	r3, r3, #1
 801183e:	613b      	str	r3, [r7, #16]
 8011840:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8011842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011848:	2300      	movs	r3, #0
 801184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801184c:	2300      	movs	r3, #0
 801184e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011850:	f107 0314 	add.w	r3, r7, #20
 8011854:	4619      	mov	r1, r3
 8011856:	481b      	ldr	r0, [pc, #108]	; (80118c4 <HAL_HCD_MspInit+0xc0>)
 8011858:	f7f3 f88a 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 801185c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011862:	2302      	movs	r3, #2
 8011864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011866:	2300      	movs	r3, #0
 8011868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801186a:	2303      	movs	r3, #3
 801186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801186e:	230a      	movs	r3, #10
 8011870:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011872:	f107 0314 	add.w	r3, r7, #20
 8011876:	4619      	mov	r1, r3
 8011878:	4812      	ldr	r0, [pc, #72]	; (80118c4 <HAL_HCD_MspInit+0xc0>)
 801187a:	f7f3 f879 	bl	8004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801187e:	4b10      	ldr	r3, [pc, #64]	; (80118c0 <HAL_HCD_MspInit+0xbc>)
 8011880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011882:	4a0f      	ldr	r2, [pc, #60]	; (80118c0 <HAL_HCD_MspInit+0xbc>)
 8011884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011888:	6353      	str	r3, [r2, #52]	; 0x34
 801188a:	2300      	movs	r3, #0
 801188c:	60fb      	str	r3, [r7, #12]
 801188e:	4b0c      	ldr	r3, [pc, #48]	; (80118c0 <HAL_HCD_MspInit+0xbc>)
 8011890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011892:	4a0b      	ldr	r2, [pc, #44]	; (80118c0 <HAL_HCD_MspInit+0xbc>)
 8011894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011898:	6453      	str	r3, [r2, #68]	; 0x44
 801189a:	4b09      	ldr	r3, [pc, #36]	; (80118c0 <HAL_HCD_MspInit+0xbc>)
 801189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118a2:	60fb      	str	r3, [r7, #12]
 80118a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80118a6:	2200      	movs	r2, #0
 80118a8:	2100      	movs	r1, #0
 80118aa:	2043      	movs	r0, #67	; 0x43
 80118ac:	f7f2 f9aa 	bl	8003c04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80118b0:	2043      	movs	r0, #67	; 0x43
 80118b2:	f7f2 f9c3 	bl	8003c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80118b6:	bf00      	nop
 80118b8:	3728      	adds	r7, #40	; 0x28
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	40023800 	.word	0x40023800
 80118c4:	40020000 	.word	0x40020000

080118c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118d6:	4618      	mov	r0, r3
 80118d8:	f7fc f82d 	bl	800d936 <USBH_LL_IncTimer>
}
 80118dc:	bf00      	nop
 80118de:	3708      	adds	r7, #8
 80118e0:	46bd      	mov	sp, r7
 80118e2:	bd80      	pop	{r7, pc}

080118e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b082      	sub	sp, #8
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fc f871 	bl	800d9da <USBH_LL_Connect>
}
 80118f8:	bf00      	nop
 80118fa:	3708      	adds	r7, #8
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801190e:	4618      	mov	r0, r3
 8011910:	f7fc f886 	bl	800da20 <USBH_LL_Disconnect>
}
 8011914:	bf00      	nop
 8011916:	3708      	adds	r7, #8
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}

0801191c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
 8011924:	460b      	mov	r3, r1
 8011926:	70fb      	strb	r3, [r7, #3]
 8011928:	4613      	mov	r3, r2
 801192a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011932:	4618      	mov	r0, r3
 8011934:	f7fc f8bd 	bl	800dab2 <USBH_LL_NotifyURBChange>
#endif
}
 8011938:	bf00      	nop
 801193a:	3708      	adds	r7, #8
 801193c:	46bd      	mov	sp, r7
 801193e:	bd80      	pop	{r7, pc}

08011940 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011940:	b580      	push	{r7, lr}
 8011942:	b082      	sub	sp, #8
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801194e:	4618      	mov	r0, r3
 8011950:	f7fc f81b 	bl	800d98a <USBH_LL_PortEnabled>
}
 8011954:	bf00      	nop
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b082      	sub	sp, #8
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801196a:	4618      	mov	r0, r3
 801196c:	f7fc f827 	bl	800d9be <USBH_LL_PortDisabled>
}
 8011970:	bf00      	nop
 8011972:	3708      	adds	r7, #8
 8011974:	46bd      	mov	sp, r7
 8011976:	bd80      	pop	{r7, pc}

08011978 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011986:	2b01      	cmp	r3, #1
 8011988:	d12a      	bne.n	80119e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801198a:	4a18      	ldr	r2, [pc, #96]	; (80119ec <USBH_LL_Init+0x74>)
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	4a15      	ldr	r2, [pc, #84]	; (80119ec <USBH_LL_Init+0x74>)
 8011996:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801199a:	4b14      	ldr	r3, [pc, #80]	; (80119ec <USBH_LL_Init+0x74>)
 801199c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80119a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 80119a2:	4b12      	ldr	r3, [pc, #72]	; (80119ec <USBH_LL_Init+0x74>)
 80119a4:	220c      	movs	r2, #12
 80119a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80119a8:	4b10      	ldr	r3, [pc, #64]	; (80119ec <USBH_LL_Init+0x74>)
 80119aa:	2201      	movs	r2, #1
 80119ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80119ae:	4b0f      	ldr	r3, [pc, #60]	; (80119ec <USBH_LL_Init+0x74>)
 80119b0:	2200      	movs	r2, #0
 80119b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80119b4:	4b0d      	ldr	r3, [pc, #52]	; (80119ec <USBH_LL_Init+0x74>)
 80119b6:	2202      	movs	r2, #2
 80119b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80119ba:	4b0c      	ldr	r3, [pc, #48]	; (80119ec <USBH_LL_Init+0x74>)
 80119bc:	2200      	movs	r2, #0
 80119be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80119c0:	480a      	ldr	r0, [pc, #40]	; (80119ec <USBH_LL_Init+0x74>)
 80119c2:	f7f3 f980 	bl	8004cc6 <HAL_HCD_Init>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80119cc:	f7ef fd18 	bl	8001400 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80119d0:	4806      	ldr	r0, [pc, #24]	; (80119ec <USBH_LL_Init+0x74>)
 80119d2:	f7f3 fd83 	bl	80054dc <HAL_HCD_GetCurrentFrame>
 80119d6:	4603      	mov	r3, r0
 80119d8:	4619      	mov	r1, r3
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f7fb ff9c 	bl	800d918 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80119e0:	2300      	movs	r3, #0
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3708      	adds	r7, #8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	2000573c 	.word	0x2000573c

080119f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119f8:	2300      	movs	r3, #0
 80119fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80119fc:	2300      	movs	r3, #0
 80119fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7f3 fcf0 	bl	80053ec <HAL_HCD_Start>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a10:	7bfb      	ldrb	r3, [r7, #15]
 8011a12:	4618      	mov	r0, r3
 8011a14:	f000 f95c 	bl	8011cd0 <USBH_Get_USB_Status>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3710      	adds	r7, #16
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011a26:	b580      	push	{r7, lr}
 8011a28:	b084      	sub	sp, #16
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a32:	2300      	movs	r3, #0
 8011a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f7f3 fcf8 	bl	8005432 <HAL_HCD_Stop>
 8011a42:	4603      	mov	r3, r0
 8011a44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a46:	7bfb      	ldrb	r3, [r7, #15]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f000 f941 	bl	8011cd0 <USBH_Get_USB_Status>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3710      	adds	r7, #16
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}

08011a5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b084      	sub	sp, #16
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011a64:	2301      	movs	r3, #1
 8011a66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f7f3 fd42 	bl	80054f8 <HAL_HCD_GetCurrentSpeed>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b01      	cmp	r3, #1
 8011a78:	d007      	beq.n	8011a8a <USBH_LL_GetSpeed+0x2e>
 8011a7a:	2b01      	cmp	r3, #1
 8011a7c:	d302      	bcc.n	8011a84 <USBH_LL_GetSpeed+0x28>
 8011a7e:	2b02      	cmp	r3, #2
 8011a80:	d006      	beq.n	8011a90 <USBH_LL_GetSpeed+0x34>
 8011a82:	e008      	b.n	8011a96 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011a84:	2300      	movs	r3, #0
 8011a86:	73fb      	strb	r3, [r7, #15]
    break;
 8011a88:	e008      	b.n	8011a9c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	73fb      	strb	r3, [r7, #15]
    break;
 8011a8e:	e005      	b.n	8011a9c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011a90:	2302      	movs	r3, #2
 8011a92:	73fb      	strb	r3, [r7, #15]
    break;
 8011a94:	e002      	b.n	8011a9c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8011a96:	2301      	movs	r3, #1
 8011a98:	73fb      	strb	r3, [r7, #15]
    break;
 8011a9a:	bf00      	nop
  }
  return  speed;
 8011a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b084      	sub	sp, #16
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7f3 fcd5 	bl	800546c <HAL_HCD_ResetPort>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011ac6:	7bfb      	ldrb	r3, [r7, #15]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f000 f901 	bl	8011cd0 <USBH_Get_USB_Status>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3710      	adds	r7, #16
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b082      	sub	sp, #8
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011aee:	78fa      	ldrb	r2, [r7, #3]
 8011af0:	4611      	mov	r1, r2
 8011af2:	4618      	mov	r0, r3
 8011af4:	f7f3 fcdd 	bl	80054b2 <HAL_HCD_HC_GetXferCount>
 8011af8:	4603      	mov	r3, r0
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011b02:	b590      	push	{r4, r7, lr}
 8011b04:	b089      	sub	sp, #36	; 0x24
 8011b06:	af04      	add	r7, sp, #16
 8011b08:	6078      	str	r0, [r7, #4]
 8011b0a:	4608      	mov	r0, r1
 8011b0c:	4611      	mov	r1, r2
 8011b0e:	461a      	mov	r2, r3
 8011b10:	4603      	mov	r3, r0
 8011b12:	70fb      	strb	r3, [r7, #3]
 8011b14:	460b      	mov	r3, r1
 8011b16:	70bb      	strb	r3, [r7, #2]
 8011b18:	4613      	mov	r3, r2
 8011b1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b20:	2300      	movs	r3, #0
 8011b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011b2a:	787c      	ldrb	r4, [r7, #1]
 8011b2c:	78ba      	ldrb	r2, [r7, #2]
 8011b2e:	78f9      	ldrb	r1, [r7, #3]
 8011b30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011b32:	9302      	str	r3, [sp, #8]
 8011b34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b38:	9301      	str	r3, [sp, #4]
 8011b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	4623      	mov	r3, r4
 8011b42:	f7f3 f922 	bl	8004d8a <HAL_HCD_HC_Init>
 8011b46:	4603      	mov	r3, r0
 8011b48:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b4a:	7bfb      	ldrb	r3, [r7, #15]
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f000 f8bf 	bl	8011cd0 <USBH_Get_USB_Status>
 8011b52:	4603      	mov	r3, r0
 8011b54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b56:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3714      	adds	r7, #20
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd90      	pop	{r4, r7, pc}

08011b60 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	460b      	mov	r3, r1
 8011b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b70:	2300      	movs	r3, #0
 8011b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b7a:	78fa      	ldrb	r2, [r7, #3]
 8011b7c:	4611      	mov	r1, r2
 8011b7e:	4618      	mov	r0, r3
 8011b80:	f7f3 f99b 	bl	8004eba <HAL_HCD_HC_Halt>
 8011b84:	4603      	mov	r3, r0
 8011b86:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b88:	7bfb      	ldrb	r3, [r7, #15]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f000 f8a0 	bl	8011cd0 <USBH_Get_USB_Status>
 8011b90:	4603      	mov	r3, r0
 8011b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	3710      	adds	r7, #16
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bd80      	pop	{r7, pc}

08011b9e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011b9e:	b590      	push	{r4, r7, lr}
 8011ba0:	b089      	sub	sp, #36	; 0x24
 8011ba2:	af04      	add	r7, sp, #16
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	4608      	mov	r0, r1
 8011ba8:	4611      	mov	r1, r2
 8011baa:	461a      	mov	r2, r3
 8011bac:	4603      	mov	r3, r0
 8011bae:	70fb      	strb	r3, [r7, #3]
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	70bb      	strb	r3, [r7, #2]
 8011bb4:	4613      	mov	r3, r2
 8011bb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011bc6:	787c      	ldrb	r4, [r7, #1]
 8011bc8:	78ba      	ldrb	r2, [r7, #2]
 8011bca:	78f9      	ldrb	r1, [r7, #3]
 8011bcc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011bd0:	9303      	str	r3, [sp, #12]
 8011bd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011bd4:	9302      	str	r3, [sp, #8]
 8011bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	4623      	mov	r3, r4
 8011be2:	f7f3 f98d 	bl	8004f00 <HAL_HCD_HC_SubmitRequest>
 8011be6:	4603      	mov	r3, r0
 8011be8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011bea:	7bfb      	ldrb	r3, [r7, #15]
 8011bec:	4618      	mov	r0, r3
 8011bee:	f000 f86f 	bl	8011cd0 <USBH_Get_USB_Status>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3714      	adds	r7, #20
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd90      	pop	{r4, r7, pc}

08011c00 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c12:	78fa      	ldrb	r2, [r7, #3]
 8011c14:	4611      	mov	r1, r2
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7f3 fc36 	bl	8005488 <HAL_HCD_HC_GetURBState>
 8011c1c:	4603      	mov	r3, r0
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3708      	adds	r7, #8
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b082      	sub	sp, #8
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	460b      	mov	r3, r1
 8011c30:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d103      	bne.n	8011c44 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011c3c:	78fb      	ldrb	r3, [r7, #3]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f000 f872 	bl	8011d28 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011c44:	20c8      	movs	r0, #200	; 0xc8
 8011c46:	f7f1 fc91 	bl	800356c <HAL_Delay>
  return USBH_OK;
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b085      	sub	sp, #20
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	70fb      	strb	r3, [r7, #3]
 8011c60:	4613      	mov	r3, r2
 8011c62:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c6a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011c6c:	78fa      	ldrb	r2, [r7, #3]
 8011c6e:	68f9      	ldr	r1, [r7, #12]
 8011c70:	4613      	mov	r3, r2
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	4413      	add	r3, r2
 8011c76:	00db      	lsls	r3, r3, #3
 8011c78:	440b      	add	r3, r1
 8011c7a:	333b      	adds	r3, #59	; 0x3b
 8011c7c:	781b      	ldrb	r3, [r3, #0]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d00a      	beq.n	8011c98 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011c82:	78fa      	ldrb	r2, [r7, #3]
 8011c84:	68f9      	ldr	r1, [r7, #12]
 8011c86:	4613      	mov	r3, r2
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	4413      	add	r3, r2
 8011c8c:	00db      	lsls	r3, r3, #3
 8011c8e:	440b      	add	r3, r1
 8011c90:	3350      	adds	r3, #80	; 0x50
 8011c92:	78ba      	ldrb	r2, [r7, #2]
 8011c94:	701a      	strb	r2, [r3, #0]
 8011c96:	e009      	b.n	8011cac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011c98:	78fa      	ldrb	r2, [r7, #3]
 8011c9a:	68f9      	ldr	r1, [r7, #12]
 8011c9c:	4613      	mov	r3, r2
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	4413      	add	r3, r2
 8011ca2:	00db      	lsls	r3, r3, #3
 8011ca4:	440b      	add	r3, r1
 8011ca6:	3351      	adds	r3, #81	; 0x51
 8011ca8:	78ba      	ldrb	r2, [r7, #2]
 8011caa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011cac:	2300      	movs	r3, #0
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3714      	adds	r7, #20
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb8:	4770      	bx	lr

08011cba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011cba:	b580      	push	{r7, lr}
 8011cbc:	b082      	sub	sp, #8
 8011cbe:	af00      	add	r7, sp, #0
 8011cc0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7f1 fc52 	bl	800356c <HAL_Delay>
}
 8011cc8:	bf00      	nop
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011cde:	79fb      	ldrb	r3, [r7, #7]
 8011ce0:	2b03      	cmp	r3, #3
 8011ce2:	d817      	bhi.n	8011d14 <USBH_Get_USB_Status+0x44>
 8011ce4:	a201      	add	r2, pc, #4	; (adr r2, 8011cec <USBH_Get_USB_Status+0x1c>)
 8011ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cea:	bf00      	nop
 8011cec:	08011cfd 	.word	0x08011cfd
 8011cf0:	08011d03 	.word	0x08011d03
 8011cf4:	08011d09 	.word	0x08011d09
 8011cf8:	08011d0f 	.word	0x08011d0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8011d00:	e00b      	b.n	8011d1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011d02:	2302      	movs	r3, #2
 8011d04:	73fb      	strb	r3, [r7, #15]
    break;
 8011d06:	e008      	b.n	8011d1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011d08:	2301      	movs	r3, #1
 8011d0a:	73fb      	strb	r3, [r7, #15]
    break;
 8011d0c:	e005      	b.n	8011d1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011d0e:	2302      	movs	r3, #2
 8011d10:	73fb      	strb	r3, [r7, #15]
    break;
 8011d12:	e002      	b.n	8011d1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011d14:	2302      	movs	r3, #2
 8011d16:	73fb      	strb	r3, [r7, #15]
    break;
 8011d18:	bf00      	nop
  }
  return usb_status;
 8011d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3714      	adds	r7, #20
 8011d20:	46bd      	mov	sp, r7
 8011d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d26:	4770      	bx	lr

08011d28 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011d32:	79fb      	ldrb	r3, [r7, #7]
 8011d34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011d36:	79fb      	ldrb	r3, [r7, #7]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d102      	bne.n	8011d42 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	73fb      	strb	r3, [r7, #15]
 8011d40:	e001      	b.n	8011d46 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011d42:	2300      	movs	r3, #0
 8011d44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8011d46:	7bfb      	ldrb	r3, [r7, #15]
 8011d48:	461a      	mov	r2, r3
 8011d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011d4e:	4803      	ldr	r0, [pc, #12]	; (8011d5c <MX_DriverVbusFS+0x34>)
 8011d50:	f7f2 ffa0 	bl	8004c94 <HAL_GPIO_WritePin>
}
 8011d54:	bf00      	nop
 8011d56:	3710      	adds	r7, #16
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}
 8011d5c:	40021800 	.word	0x40021800

08011d60 <__errno>:
 8011d60:	4b01      	ldr	r3, [pc, #4]	; (8011d68 <__errno+0x8>)
 8011d62:	6818      	ldr	r0, [r3, #0]
 8011d64:	4770      	bx	lr
 8011d66:	bf00      	nop
 8011d68:	20000088 	.word	0x20000088

08011d6c <__libc_init_array>:
 8011d6c:	b570      	push	{r4, r5, r6, lr}
 8011d6e:	4e0d      	ldr	r6, [pc, #52]	; (8011da4 <__libc_init_array+0x38>)
 8011d70:	4c0d      	ldr	r4, [pc, #52]	; (8011da8 <__libc_init_array+0x3c>)
 8011d72:	1ba4      	subs	r4, r4, r6
 8011d74:	10a4      	asrs	r4, r4, #2
 8011d76:	2500      	movs	r5, #0
 8011d78:	42a5      	cmp	r5, r4
 8011d7a:	d109      	bne.n	8011d90 <__libc_init_array+0x24>
 8011d7c:	4e0b      	ldr	r6, [pc, #44]	; (8011dac <__libc_init_array+0x40>)
 8011d7e:	4c0c      	ldr	r4, [pc, #48]	; (8011db0 <__libc_init_array+0x44>)
 8011d80:	f000 f8f6 	bl	8011f70 <_init>
 8011d84:	1ba4      	subs	r4, r4, r6
 8011d86:	10a4      	asrs	r4, r4, #2
 8011d88:	2500      	movs	r5, #0
 8011d8a:	42a5      	cmp	r5, r4
 8011d8c:	d105      	bne.n	8011d9a <__libc_init_array+0x2e>
 8011d8e:	bd70      	pop	{r4, r5, r6, pc}
 8011d90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011d94:	4798      	blx	r3
 8011d96:	3501      	adds	r5, #1
 8011d98:	e7ee      	b.n	8011d78 <__libc_init_array+0xc>
 8011d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011d9e:	4798      	blx	r3
 8011da0:	3501      	adds	r5, #1
 8011da2:	e7f2      	b.n	8011d8a <__libc_init_array+0x1e>
 8011da4:	08014b7c 	.word	0x08014b7c
 8011da8:	08014b7c 	.word	0x08014b7c
 8011dac:	08014b7c 	.word	0x08014b7c
 8011db0:	08014b80 	.word	0x08014b80

08011db4 <malloc>:
 8011db4:	4b02      	ldr	r3, [pc, #8]	; (8011dc0 <malloc+0xc>)
 8011db6:	4601      	mov	r1, r0
 8011db8:	6818      	ldr	r0, [r3, #0]
 8011dba:	f000 b86d 	b.w	8011e98 <_malloc_r>
 8011dbe:	bf00      	nop
 8011dc0:	20000088 	.word	0x20000088

08011dc4 <free>:
 8011dc4:	4b02      	ldr	r3, [pc, #8]	; (8011dd0 <free+0xc>)
 8011dc6:	4601      	mov	r1, r0
 8011dc8:	6818      	ldr	r0, [r3, #0]
 8011dca:	f000 b817 	b.w	8011dfc <_free_r>
 8011dce:	bf00      	nop
 8011dd0:	20000088 	.word	0x20000088

08011dd4 <memcpy>:
 8011dd4:	b510      	push	{r4, lr}
 8011dd6:	1e43      	subs	r3, r0, #1
 8011dd8:	440a      	add	r2, r1
 8011dda:	4291      	cmp	r1, r2
 8011ddc:	d100      	bne.n	8011de0 <memcpy+0xc>
 8011dde:	bd10      	pop	{r4, pc}
 8011de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011de8:	e7f7      	b.n	8011dda <memcpy+0x6>

08011dea <memset>:
 8011dea:	4402      	add	r2, r0
 8011dec:	4603      	mov	r3, r0
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d100      	bne.n	8011df4 <memset+0xa>
 8011df2:	4770      	bx	lr
 8011df4:	f803 1b01 	strb.w	r1, [r3], #1
 8011df8:	e7f9      	b.n	8011dee <memset+0x4>
	...

08011dfc <_free_r>:
 8011dfc:	b538      	push	{r3, r4, r5, lr}
 8011dfe:	4605      	mov	r5, r0
 8011e00:	2900      	cmp	r1, #0
 8011e02:	d045      	beq.n	8011e90 <_free_r+0x94>
 8011e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e08:	1f0c      	subs	r4, r1, #4
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	bfb8      	it	lt
 8011e0e:	18e4      	addlt	r4, r4, r3
 8011e10:	f000 f8ac 	bl	8011f6c <__malloc_lock>
 8011e14:	4a1f      	ldr	r2, [pc, #124]	; (8011e94 <_free_r+0x98>)
 8011e16:	6813      	ldr	r3, [r2, #0]
 8011e18:	4610      	mov	r0, r2
 8011e1a:	b933      	cbnz	r3, 8011e2a <_free_r+0x2e>
 8011e1c:	6063      	str	r3, [r4, #4]
 8011e1e:	6014      	str	r4, [r2, #0]
 8011e20:	4628      	mov	r0, r5
 8011e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e26:	f000 b8a2 	b.w	8011f6e <__malloc_unlock>
 8011e2a:	42a3      	cmp	r3, r4
 8011e2c:	d90c      	bls.n	8011e48 <_free_r+0x4c>
 8011e2e:	6821      	ldr	r1, [r4, #0]
 8011e30:	1862      	adds	r2, r4, r1
 8011e32:	4293      	cmp	r3, r2
 8011e34:	bf04      	itt	eq
 8011e36:	681a      	ldreq	r2, [r3, #0]
 8011e38:	685b      	ldreq	r3, [r3, #4]
 8011e3a:	6063      	str	r3, [r4, #4]
 8011e3c:	bf04      	itt	eq
 8011e3e:	1852      	addeq	r2, r2, r1
 8011e40:	6022      	streq	r2, [r4, #0]
 8011e42:	6004      	str	r4, [r0, #0]
 8011e44:	e7ec      	b.n	8011e20 <_free_r+0x24>
 8011e46:	4613      	mov	r3, r2
 8011e48:	685a      	ldr	r2, [r3, #4]
 8011e4a:	b10a      	cbz	r2, 8011e50 <_free_r+0x54>
 8011e4c:	42a2      	cmp	r2, r4
 8011e4e:	d9fa      	bls.n	8011e46 <_free_r+0x4a>
 8011e50:	6819      	ldr	r1, [r3, #0]
 8011e52:	1858      	adds	r0, r3, r1
 8011e54:	42a0      	cmp	r0, r4
 8011e56:	d10b      	bne.n	8011e70 <_free_r+0x74>
 8011e58:	6820      	ldr	r0, [r4, #0]
 8011e5a:	4401      	add	r1, r0
 8011e5c:	1858      	adds	r0, r3, r1
 8011e5e:	4282      	cmp	r2, r0
 8011e60:	6019      	str	r1, [r3, #0]
 8011e62:	d1dd      	bne.n	8011e20 <_free_r+0x24>
 8011e64:	6810      	ldr	r0, [r2, #0]
 8011e66:	6852      	ldr	r2, [r2, #4]
 8011e68:	605a      	str	r2, [r3, #4]
 8011e6a:	4401      	add	r1, r0
 8011e6c:	6019      	str	r1, [r3, #0]
 8011e6e:	e7d7      	b.n	8011e20 <_free_r+0x24>
 8011e70:	d902      	bls.n	8011e78 <_free_r+0x7c>
 8011e72:	230c      	movs	r3, #12
 8011e74:	602b      	str	r3, [r5, #0]
 8011e76:	e7d3      	b.n	8011e20 <_free_r+0x24>
 8011e78:	6820      	ldr	r0, [r4, #0]
 8011e7a:	1821      	adds	r1, r4, r0
 8011e7c:	428a      	cmp	r2, r1
 8011e7e:	bf04      	itt	eq
 8011e80:	6811      	ldreq	r1, [r2, #0]
 8011e82:	6852      	ldreq	r2, [r2, #4]
 8011e84:	6062      	str	r2, [r4, #4]
 8011e86:	bf04      	itt	eq
 8011e88:	1809      	addeq	r1, r1, r0
 8011e8a:	6021      	streq	r1, [r4, #0]
 8011e8c:	605c      	str	r4, [r3, #4]
 8011e8e:	e7c7      	b.n	8011e20 <_free_r+0x24>
 8011e90:	bd38      	pop	{r3, r4, r5, pc}
 8011e92:	bf00      	nop
 8011e94:	20004a68 	.word	0x20004a68

08011e98 <_malloc_r>:
 8011e98:	b570      	push	{r4, r5, r6, lr}
 8011e9a:	1ccd      	adds	r5, r1, #3
 8011e9c:	f025 0503 	bic.w	r5, r5, #3
 8011ea0:	3508      	adds	r5, #8
 8011ea2:	2d0c      	cmp	r5, #12
 8011ea4:	bf38      	it	cc
 8011ea6:	250c      	movcc	r5, #12
 8011ea8:	2d00      	cmp	r5, #0
 8011eaa:	4606      	mov	r6, r0
 8011eac:	db01      	blt.n	8011eb2 <_malloc_r+0x1a>
 8011eae:	42a9      	cmp	r1, r5
 8011eb0:	d903      	bls.n	8011eba <_malloc_r+0x22>
 8011eb2:	230c      	movs	r3, #12
 8011eb4:	6033      	str	r3, [r6, #0]
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	bd70      	pop	{r4, r5, r6, pc}
 8011eba:	f000 f857 	bl	8011f6c <__malloc_lock>
 8011ebe:	4a21      	ldr	r2, [pc, #132]	; (8011f44 <_malloc_r+0xac>)
 8011ec0:	6814      	ldr	r4, [r2, #0]
 8011ec2:	4621      	mov	r1, r4
 8011ec4:	b991      	cbnz	r1, 8011eec <_malloc_r+0x54>
 8011ec6:	4c20      	ldr	r4, [pc, #128]	; (8011f48 <_malloc_r+0xb0>)
 8011ec8:	6823      	ldr	r3, [r4, #0]
 8011eca:	b91b      	cbnz	r3, 8011ed4 <_malloc_r+0x3c>
 8011ecc:	4630      	mov	r0, r6
 8011ece:	f000 f83d 	bl	8011f4c <_sbrk_r>
 8011ed2:	6020      	str	r0, [r4, #0]
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	f000 f838 	bl	8011f4c <_sbrk_r>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d124      	bne.n	8011f2a <_malloc_r+0x92>
 8011ee0:	230c      	movs	r3, #12
 8011ee2:	6033      	str	r3, [r6, #0]
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	f000 f842 	bl	8011f6e <__malloc_unlock>
 8011eea:	e7e4      	b.n	8011eb6 <_malloc_r+0x1e>
 8011eec:	680b      	ldr	r3, [r1, #0]
 8011eee:	1b5b      	subs	r3, r3, r5
 8011ef0:	d418      	bmi.n	8011f24 <_malloc_r+0x8c>
 8011ef2:	2b0b      	cmp	r3, #11
 8011ef4:	d90f      	bls.n	8011f16 <_malloc_r+0x7e>
 8011ef6:	600b      	str	r3, [r1, #0]
 8011ef8:	50cd      	str	r5, [r1, r3]
 8011efa:	18cc      	adds	r4, r1, r3
 8011efc:	4630      	mov	r0, r6
 8011efe:	f000 f836 	bl	8011f6e <__malloc_unlock>
 8011f02:	f104 000b 	add.w	r0, r4, #11
 8011f06:	1d23      	adds	r3, r4, #4
 8011f08:	f020 0007 	bic.w	r0, r0, #7
 8011f0c:	1ac3      	subs	r3, r0, r3
 8011f0e:	d0d3      	beq.n	8011eb8 <_malloc_r+0x20>
 8011f10:	425a      	negs	r2, r3
 8011f12:	50e2      	str	r2, [r4, r3]
 8011f14:	e7d0      	b.n	8011eb8 <_malloc_r+0x20>
 8011f16:	428c      	cmp	r4, r1
 8011f18:	684b      	ldr	r3, [r1, #4]
 8011f1a:	bf16      	itet	ne
 8011f1c:	6063      	strne	r3, [r4, #4]
 8011f1e:	6013      	streq	r3, [r2, #0]
 8011f20:	460c      	movne	r4, r1
 8011f22:	e7eb      	b.n	8011efc <_malloc_r+0x64>
 8011f24:	460c      	mov	r4, r1
 8011f26:	6849      	ldr	r1, [r1, #4]
 8011f28:	e7cc      	b.n	8011ec4 <_malloc_r+0x2c>
 8011f2a:	1cc4      	adds	r4, r0, #3
 8011f2c:	f024 0403 	bic.w	r4, r4, #3
 8011f30:	42a0      	cmp	r0, r4
 8011f32:	d005      	beq.n	8011f40 <_malloc_r+0xa8>
 8011f34:	1a21      	subs	r1, r4, r0
 8011f36:	4630      	mov	r0, r6
 8011f38:	f000 f808 	bl	8011f4c <_sbrk_r>
 8011f3c:	3001      	adds	r0, #1
 8011f3e:	d0cf      	beq.n	8011ee0 <_malloc_r+0x48>
 8011f40:	6025      	str	r5, [r4, #0]
 8011f42:	e7db      	b.n	8011efc <_malloc_r+0x64>
 8011f44:	20004a68 	.word	0x20004a68
 8011f48:	20004a6c 	.word	0x20004a6c

08011f4c <_sbrk_r>:
 8011f4c:	b538      	push	{r3, r4, r5, lr}
 8011f4e:	4c06      	ldr	r4, [pc, #24]	; (8011f68 <_sbrk_r+0x1c>)
 8011f50:	2300      	movs	r3, #0
 8011f52:	4605      	mov	r5, r0
 8011f54:	4608      	mov	r0, r1
 8011f56:	6023      	str	r3, [r4, #0]
 8011f58:	f7f0 f93a 	bl	80021d0 <_sbrk>
 8011f5c:	1c43      	adds	r3, r0, #1
 8011f5e:	d102      	bne.n	8011f66 <_sbrk_r+0x1a>
 8011f60:	6823      	ldr	r3, [r4, #0]
 8011f62:	b103      	cbz	r3, 8011f66 <_sbrk_r+0x1a>
 8011f64:	602b      	str	r3, [r5, #0]
 8011f66:	bd38      	pop	{r3, r4, r5, pc}
 8011f68:	20005a00 	.word	0x20005a00

08011f6c <__malloc_lock>:
 8011f6c:	4770      	bx	lr

08011f6e <__malloc_unlock>:
 8011f6e:	4770      	bx	lr

08011f70 <_init>:
 8011f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f72:	bf00      	nop
 8011f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f76:	bc08      	pop	{r3}
 8011f78:	469e      	mov	lr, r3
 8011f7a:	4770      	bx	lr

08011f7c <_fini>:
 8011f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7e:	bf00      	nop
 8011f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f82:	bc08      	pop	{r3}
 8011f84:	469e      	mov	lr, r3
 8011f86:	4770      	bx	lr
