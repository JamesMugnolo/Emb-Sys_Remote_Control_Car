
ESC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012068  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c64  08012248  08012248  00022248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014eac  08014eac  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014eac  08014eac  00024eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014eb4  08014eb4  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014eb4  08014eb4  00024eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014eb8  08014eb8  00024eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08014ebc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000058cc  200000ec  08014fa8  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200059b8  08014fa8  000359b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004242e  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075ad  00000000  00000000  0007254a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003190  00000000  00000000  00079af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002e80  00000000  00000000  0007cc88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c57b  00000000  00000000  0007fb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c7e8  00000000  00000000  0008c083  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fde5b  00000000  00000000  000b886b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b66c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d61c  00000000  00000000  001b6744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012230 	.word	0x08012230

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f0 	.word	0x200000f0
 800021c:	08012230 	.word	0x08012230

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <sendString>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
void sendString(uint8_t* value, UART_HandleTypeDef *huart)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(&huart, value, strlen(value));
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fe70 	bl	8000220 <strlen>
 8000540:	4603      	mov	r3, r0
 8000542:	b29a      	uxth	r2, r3
 8000544:	463b      	mov	r3, r7
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	f009 fd3c 	bl	8009fc6 <HAL_UART_Transmit_IT>
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <sendInt>:

void sendInt(uint16_t value, UART_HandleTypeDef *huart)
{
 8000556:	b590      	push	{r4, r7, lr}
 8000558:	b08b      	sub	sp, #44	; 0x2c
 800055a:	af00      	add	r7, sp, #0
 800055c:	4603      	mov	r3, r0
 800055e:	6039      	str	r1, [r7, #0]
 8000560:	80fb      	strh	r3, [r7, #6]
	char buffer[25];
	itoa(value, buffer, strlen(buffer));
 8000562:	88fc      	ldrh	r4, [r7, #6]
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff fe59 	bl	8000220 <strlen>
 800056e:	4602      	mov	r2, r0
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	4619      	mov	r1, r3
 8000576:	4620      	mov	r0, r4
 8000578:	f011 fd3c 	bl	8011ff4 <itoa>
	HAL_UART_Transmit_IT(&huart, buffer, strlen(buffer));
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fe4d 	bl	8000220 <strlen>
 8000586:	4603      	mov	r3, r0
 8000588:	b29a      	uxth	r2, r3
 800058a:	f107 010c 	add.w	r1, r7, #12
 800058e:	463b      	mov	r3, r7
 8000590:	4618      	mov	r0, r3
 8000592:	f009 fd18 	bl	8009fc6 <HAL_UART_Transmit_IT>
}
 8000596:	bf00      	nop
 8000598:	372c      	adds	r7, #44	; 0x2c
 800059a:	46bd      	mov	sp, r7
 800059c:	bd90      	pop	{r4, r7, pc}
	...

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f003 f868 	bl	8003678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f862 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 fc2c 	bl	8000e08 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b0:	f000 fc0a 	bl	8000dc8 <MX_DMA_Init>
  MX_ADC1_Init();
 80005b4:	f000 f8fc 	bl	80007b0 <MX_ADC1_Init>
  MX_DAC_Init();
 80005b8:	f000 f94c 	bl	8000854 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80005bc:	f000 f974 	bl	80008a8 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 80005c0:	f000 f9aa 	bl	8000918 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 80005c4:	f000 fa12 	bl	80009ec <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80005c8:	f000 fd92 	bl	80010f0 <MX_FSMC_Init>
  MX_I2S2_Init();
 80005cc:	f000 fa72 	bl	8000ab4 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 80005d0:	f000 fa9e 	bl	8000b10 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80005d4:	f000 fac8 	bl	8000b68 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80005d8:	f000 fba2 	bl	8000d20 <MX_UART10_Init>
  MX_USART6_UART_Init();
 80005dc:	f000 fbca 	bl	8000d74 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 80005e0:	f000 fa3a 	bl	8000a58 <MX_I2C2_Init>
  MX_TIM3_Init();
 80005e4:	f000 faf0 	bl	8000bc8 <MX_TIM3_Init>
  MX_UART7_Init();
 80005e8:	f000 fb70 	bl	8000ccc <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80005ec:	f002 fcaf 	bl	8002f4e <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005f4:	f002 fd6a 	bl	80030cc <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2000      	movs	r0, #0
 80005fc:	f002 faf2 	bl	8002be4 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8000600:	4813      	ldr	r0, [pc, #76]	; (8000650 <main+0xb0>)
 8000602:	f002 fd53 	bl	80030ac <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000606:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800060a:	f002 fd2f 	bl	800306c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800060e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000612:	f002 fd3b 	bl	800308c <BSP_LCD_SetBackColor>
  //BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project...", CENTER_MODE);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000616:	2104      	movs	r1, #4
 8000618:	480e      	ldr	r0, [pc, #56]	; (8000654 <main+0xb4>)
 800061a:	f008 fdfb 	bl	8009214 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800061e:	2108      	movs	r1, #8
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <main+0xb4>)
 8000622:	f008 fdf7 	bl	8009214 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000626:	f00e fa3b 	bl	800eaa0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RunMoters */
  RunMotersHandle = osThreadNew(StartDefaultTask, NULL, &RunMoters_attributes);
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <main+0xb8>)
 800062c:	2100      	movs	r1, #0
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <main+0xbc>)
 8000630:	f00e faa0 	bl	800eb74 <osThreadNew>
 8000634:	4602      	mov	r2, r0
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <main+0xc0>)
 8000638:	601a      	str	r2, [r3, #0]

  /* creation of Radio_Receiver */
  Radio_ReceiverHandle = osThreadNew(Receive_Radio_Signal, NULL, &Radio_Receiver_attributes);
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <main+0xc4>)
 800063c:	2100      	movs	r1, #0
 800063e:	480a      	ldr	r0, [pc, #40]	; (8000668 <main+0xc8>)
 8000640:	f00e fa98 	bl	800eb74 <osThreadNew>
 8000644:	4602      	mov	r2, r0
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <main+0xcc>)
 8000648:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800064a:	f00e fa5d 	bl	800eb08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0xae>
 8000650:	2000004c 	.word	0x2000004c
 8000654:	20004c10 	.word	0x20004c10
 8000658:	08012310 	.word	0x08012310
 800065c:	0800126b 	.word	0x0800126b
 8000660:	20004b40 	.word	0x20004b40
 8000664:	08012334 	.word	0x08012334
 8000668:	08001281 	.word	0x08001281
 800066c:	20004aa8 	.word	0x20004aa8

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0aa      	sub	sp, #168	; 0xa8
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800067a:	2234      	movs	r2, #52	; 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f011 fcd5 	bl	801202e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	2258      	movs	r2, #88	; 0x58
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f011 fcc6 	bl	801202e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <SystemClock_Config+0x138>)
 80006a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006aa:	4a3f      	ldr	r2, [pc, #252]	; (80007a8 <SystemClock_Config+0x138>)
 80006ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
 80006b2:	4b3d      	ldr	r3, [pc, #244]	; (80007a8 <SystemClock_Config+0x138>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	4b3a      	ldr	r3, [pc, #232]	; (80007ac <SystemClock_Config+0x13c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a39      	ldr	r2, [pc, #228]	; (80007ac <SystemClock_Config+0x13c>)
 80006c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006cc:	6013      	str	r3, [r2, #0]
 80006ce:	4b37      	ldr	r3, [pc, #220]	; (80007ac <SystemClock_Config+0x13c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d6:	603b      	str	r3, [r7, #0]
 80006d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006da:	2303      	movs	r3, #3
 80006dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006de:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006fe:	230f      	movs	r3, #15
 8000700:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000704:	2390      	movs	r3, #144	; 0x90
 8000706:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000710:	2305      	movs	r3, #5
 8000712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000720:	4618      	mov	r0, r3
 8000722:	f007 fd01 	bl	8008128 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800072c:	f000 feda 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f006 ff12 	bl	8007574 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000756:	f000 fec5 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800075a:	f240 1371 	movw	r3, #369	; 0x171
 800075e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000760:	2332      	movs	r3, #50	; 0x32
 8000762:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000764:	230c      	movs	r3, #12
 8000766:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000768:	2302      	movs	r3, #2
 800076a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800077e:	2300      	movs	r3, #0
 8000780:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	4618      	mov	r0, r3
 8000790:	f007 f8ee 	bl	8007970 <HAL_RCCEx_PeriphCLKConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800079a:	f000 fea3 	bl	80014e4 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	37a8      	adds	r7, #168	; 0xa8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b21      	ldr	r3, [pc, #132]	; (8000848 <MX_ADC1_Init+0x98>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <MX_ADC1_Init+0x9c>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007d4:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007da:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC1_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC1_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f0:	4a17      	ldr	r2, [pc, #92]	; (8000850 <MX_ADC1_Init+0xa0>)
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC1_Init+0x98>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_ADC1_Init+0x98>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_ADC1_Init+0x98>)
 8000802:	2200      	movs	r2, #0
 8000804:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC1_Init+0x98>)
 800080a:	2201      	movs	r2, #1
 800080c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080e:	480e      	ldr	r0, [pc, #56]	; (8000848 <MX_ADC1_Init+0x98>)
 8000810:	f002 ff96 	bl	8003740 <HAL_ADC_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 fe63 	bl	80014e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800081e:	230a      	movs	r3, #10
 8000820:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000826:	2300      	movs	r3, #0
 8000828:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_ADC1_Init+0x98>)
 8000830:	f002 ffca 	bl	80037c8 <HAL_ADC_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800083a:	f000 fe53 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20004d50 	.word	0x20004d50
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001

08000854 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_DAC_Init+0x4c>)
 8000864:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <MX_DAC_Init+0x50>)
 8000866:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <MX_DAC_Init+0x4c>)
 800086a:	f003 fabd 	bl	8003de8 <HAL_DAC_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000874:	f000 fe36 	bl	80014e4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4806      	ldr	r0, [pc, #24]	; (80008a0 <MX_DAC_Init+0x4c>)
 8000888:	f003 fb24 	bl	8003ed4 <HAL_DAC_ConfigChannel>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000892:	f000 fe27 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20005050 	.word	0x20005050
 80008a4:	40007400 	.word	0x40007400

080008a8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008ac:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008ae:	4a19      	ldr	r2, [pc, #100]	; (8000914 <MX_DFSDM1_Init+0x6c>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80008b2:	4b17      	ldr	r3, [pc, #92]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80008be:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008c4:	4b12      	ldr	r3, [pc, #72]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008d8:	2202      	movs	r2, #2
 80008da:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008de:	2200      	movs	r2, #0
 80008e0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_DFSDM1_Init+0x68>)
 80008fc:	f003 fb42 	bl	8003f84 <HAL_DFSDM_ChannelInit>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000906:	f000 fded 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20004a70 	.word	0x20004a70
 8000914:	40016020 	.word	0x40016020

08000918 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 800091e:	4a30      	ldr	r2, [pc, #192]	; (80009e0 <MX_DFSDM2_Init+0xc8>)
 8000920:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 8000924:	2201      	movs	r2, #1
 8000926:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000928:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 8000930:	2202      	movs	r2, #2
 8000932:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000934:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800093a:	4b28      	ldr	r3, [pc, #160]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000940:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000946:	4b25      	ldr	r3, [pc, #148]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 8000948:	2202      	movs	r2, #2
 800094a:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800094c:	4b23      	ldr	r3, [pc, #140]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 800095a:	2201      	movs	r2, #1
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 800095e:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 8000966:	2200      	movs	r2, #0
 8000968:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800096a:	481c      	ldr	r0, [pc, #112]	; (80009dc <MX_DFSDM2_Init+0xc4>)
 800096c:	f003 fb0a 	bl	8003f84 <HAL_DFSDM_ChannelInit>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000976:	f000 fdb5 	bl	80014e4 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 800097c:	4a1a      	ldr	r2, [pc, #104]	; (80009e8 <MX_DFSDM2_Init+0xd0>)
 800097e:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 8000982:	2201      	movs	r2, #1
 8000984:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 800098e:	2202      	movs	r2, #2
 8000990:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 80009be:	2200      	movs	r2, #0
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 80009c8:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_DFSDM2_Init+0xcc>)
 80009ca:	f003 fadb 	bl	8003f84 <HAL_DFSDM_ChannelInit>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 80009d4:	f000 fd86 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20004c50 	.word	0x20004c50
 80009e0:	40016420 	.word	0x40016420
 80009e4:	20004b44 	.word	0x20004b44
 80009e8:	400164e0 	.word	0x400164e0

080009ec <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <MX_FMPI2C1_Init+0x64>)
 80009f4:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 80009f8:	4a16      	ldr	r2, [pc, #88]	; (8000a54 <MX_FMPI2C1_Init+0x68>)
 80009fa:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80009fc:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000a08:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000a26:	4809      	ldr	r0, [pc, #36]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 8000a28:	f003 ff90 	bl	800494c <HAL_FMPI2C_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000a32:	f000 fd57 	bl	80014e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a36:	2100      	movs	r1, #0
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_FMPI2C1_Init+0x60>)
 8000a3a:	f004 f816 	bl	8004a6a <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000a44:	f000 fd4e 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20005064 	.word	0x20005064
 8000a50:	40006000 	.word	0x40006000
 8000a54:	00303d5b 	.word	0x00303d5b

08000a58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <MX_I2C2_Init+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <MX_I2C2_Init+0x58>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_I2C2_Init+0x50>)
 8000a96:	f005 fecf 	bl	8006838 <HAL_I2C_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa0:	f000 fd20 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20004aec 	.word	0x20004aec
 8000aac:	40005800 	.word	0x40005800
 8000ab0:	000186a0 	.word	0x000186a0

08000ab4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <MX_I2S2_Init+0x58>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000adc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ae0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_I2S2_Init+0x54>)
 8000af6:	f005 ffd7 	bl	8006aa8 <HAL_I2S_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000b00:	f000 fcf0 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200051c4 	.word	0x200051c4
 8000b0c:	40003800 	.word	0x40003800

08000b10 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b16:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <MX_QUADSPI_Init+0x54>)
 8000b18:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b1c:	22ff      	movs	r2, #255	; 0xff
 8000b1e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_QUADSPI_Init+0x50>)
 8000b4c:	f006 fc50 	bl	80073f0 <HAL_QSPI_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b56:	f000 fcc5 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000520c 	.word	0x2000520c
 8000b64:	a0001000 	.word	0xa0001000

08000b68 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <MX_SDIO_SD_Init+0x5c>)
 8000b70:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000b98:	f007 fd08 	bl	80085ac <HAL_SD_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000ba2:	f000 fc9f 	bl	80014e4 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000ba6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_SDIO_SD_Init+0x58>)
 8000bac:	f007 ff32 	bl	8008a14 <HAL_SD_ConfigWideBusOperation>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 fc95 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20005100 	.word	0x20005100
 8000bc4:	40012c00 	.word	0x40012c00

08000bc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08e      	sub	sp, #56	; 0x38
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	f107 0320 	add.w	r3, r7, #32
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bf8:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000bfa:	4a33      	ldr	r2, [pc, #204]	; (8000cc8 <MX_TIM3_Init+0x100>)
 8000bfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000bfe:	4b31      	ldr	r3, [pc, #196]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c00:	220f      	movs	r2, #15
 8000c02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b2f      	ldr	r3, [pc, #188]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000c0a:	4b2e      	ldr	r3, [pc, #184]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c18:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c1a:	2280      	movs	r2, #128	; 0x80
 8000c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c1e:	4829      	ldr	r0, [pc, #164]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c20:	f008 fa74 	bl	800910c <HAL_TIM_Base_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c2a:	f000 fc5b 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4822      	ldr	r0, [pc, #136]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c3c:	f008 fcf6 	bl	800962c <HAL_TIM_ConfigClockSource>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c46:	f000 fc4d 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c4a:	481e      	ldr	r0, [pc, #120]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c4c:	f008 faad 	bl	80091aa <HAL_TIM_PWM_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000c56:	f000 fc45 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c62:	f107 0320 	add.w	r3, r7, #32
 8000c66:	4619      	mov	r1, r3
 8000c68:	4816      	ldr	r0, [pc, #88]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c6a:	f009 f8cf 	bl	8009e0c <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c74:	f000 fc36 	bl	80014e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c78:	2360      	movs	r3, #96	; 0x60
 8000c7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000c92:	f008 fc05 	bl	80094a0 <HAL_TIM_PWM_ConfigChannel>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c9c:	f000 fc22 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000ca8:	f008 fbfa 	bl	80094a0 <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000cb2:	f000 fc17 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cb6:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_TIM3_Init+0xfc>)
 8000cb8:	f001 f8bc 	bl	8001e34 <HAL_TIM_MspPostInit>

}
 8000cbc:	bf00      	nop
 8000cbe:	3738      	adds	r7, #56	; 0x38
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20004c10 	.word	0x20004c10
 8000cc8:	40000400 	.word	0x40000400

08000ccc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000cd2:	4a12      	ldr	r2, [pc, #72]	; (8000d1c <MX_UART7_Init+0x50>)
 8000cd4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cdc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_UART7_Init+0x4c>)
 8000d04:	f009 f912 	bl	8009f2c <HAL_UART_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000d0e:	f000 fbe9 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20004aac 	.word	0x20004aac
 8000d1c:	40007800 	.word	0x40007800

08000d20 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_UART10_Init+0x50>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <MX_UART10_Init+0x4c>)
 8000d58:	f009 f8e8 	bl	8009f2c <HAL_UART_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000d62:	f000 fbbf 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20004b80 	.word	0x20004b80
 8000d70:	40011c00 	.word	0x40011c00

08000d74 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <MX_USART6_UART_Init+0x50>)
 8000d7c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000d80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d84:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USART6_UART_Init+0x4c>)
 8000dac:	f009 f8be 	bl	8009f2c <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000db6:	f000 fb95 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20005184 	.word	0x20005184
 8000dc4:	40011400 	.word	0x40011400

08000dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_DMA_Init+0x3c>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	200e      	movs	r0, #14
 8000df0:	f002 ffd0 	bl	8003d94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000df4:	200e      	movs	r0, #14
 8000df6:	f002 ffe9 	bl	8003dcc <HAL_NVIC_EnableIRQ>

}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800

08000e08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
 8000e22:	4bab      	ldr	r3, [pc, #684]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4aaa      	ldr	r2, [pc, #680]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4ba8      	ldr	r3, [pc, #672]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	623b      	str	r3, [r7, #32]
 8000e38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	4ba4      	ldr	r3, [pc, #656]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4aa3      	ldr	r2, [pc, #652]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4ba1      	ldr	r3, [pc, #644]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4b9d      	ldr	r3, [pc, #628]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a9c      	ldr	r2, [pc, #624]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e60:	f043 0320 	orr.w	r3, r3, #32
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b9a      	ldr	r3, [pc, #616]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0320 	and.w	r3, r3, #32
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	4b96      	ldr	r3, [pc, #600]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a95      	ldr	r2, [pc, #596]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b93      	ldr	r3, [pc, #588]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b8f      	ldr	r3, [pc, #572]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a8e      	ldr	r2, [pc, #568]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b8c      	ldr	r3, [pc, #560]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b88      	ldr	r3, [pc, #544]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a87      	ldr	r2, [pc, #540]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b85      	ldr	r3, [pc, #532]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	4b81      	ldr	r3, [pc, #516]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a80      	ldr	r2, [pc, #512]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b7e      	ldr	r3, [pc, #504]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b7a      	ldr	r3, [pc, #488]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a79      	ldr	r2, [pc, #484]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000eec:	f043 0308 	orr.w	r3, r3, #8
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b77      	ldr	r3, [pc, #476]	; (80010d0 <MX_GPIO_Init+0x2c8>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2138      	movs	r1, #56	; 0x38
 8000f02:	4874      	ldr	r0, [pc, #464]	; (80010d4 <MX_GPIO_Init+0x2cc>)
 8000f04:	f003 ff8e 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2120      	movs	r1, #32
 8000f0c:	4872      	ldr	r0, [pc, #456]	; (80010d8 <MX_GPIO_Init+0x2d0>)
 8000f0e:	f003 ff89 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000f18:	4870      	ldr	r0, [pc, #448]	; (80010dc <MX_GPIO_Init+0x2d4>)
 8000f1a:	f003 ff83 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000f24:	486e      	ldr	r0, [pc, #440]	; (80010e0 <MX_GPIO_Init+0x2d8>)
 8000f26:	f003 ff7d 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f30:	486c      	ldr	r0, [pc, #432]	; (80010e4 <MX_GPIO_Init+0x2dc>)
 8000f32:	f003 ff77 	bl	8004e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000f36:	2338      	movs	r3, #56	; 0x38
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4861      	ldr	r0, [pc, #388]	; (80010d4 <MX_GPIO_Init+0x2cc>)
 8000f4e:	f003 fdd7 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000f52:	2340      	movs	r3, #64	; 0x40
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000f62:	2303      	movs	r3, #3
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4859      	ldr	r0, [pc, #356]	; (80010d4 <MX_GPIO_Init+0x2cc>)
 8000f6e:	f003 fdc7 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f84:	2302      	movs	r3, #2
 8000f86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4856      	ldr	r0, [pc, #344]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000f90:	f003 fdb6 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000f94:	2302      	movs	r3, #2
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f98:	4b54      	ldr	r3, [pc, #336]	; (80010ec <MX_GPIO_Init+0x2e4>)
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	484c      	ldr	r0, [pc, #304]	; (80010d8 <MX_GPIO_Init+0x2d0>)
 8000fa8:	f003 fdaa 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000fac:	2301      	movs	r3, #1
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	; (80010ec <MX_GPIO_Init+0x2e4>)
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4849      	ldr	r0, [pc, #292]	; (80010e4 <MX_GPIO_Init+0x2dc>)
 8000fc0:	f003 fd9e 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	483f      	ldr	r0, [pc, #252]	; (80010d8 <MX_GPIO_Init+0x2d0>)
 8000fdc:	f003 fd90 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000fe0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe6:	4b41      	ldr	r3, [pc, #260]	; (80010ec <MX_GPIO_Init+0x2e4>)
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	483c      	ldr	r0, [pc, #240]	; (80010e8 <MX_GPIO_Init+0x2e0>)
 8000ff6:	f003 fd83 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001008:	2303      	movs	r3, #3
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800100c:	2307      	movs	r3, #7
 800100e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	4831      	ldr	r0, [pc, #196]	; (80010dc <MX_GPIO_Init+0x2d4>)
 8001018:	f003 fd72 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin PB8 */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8;
 800101c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	4619      	mov	r1, r3
 8001034:	4829      	ldr	r0, [pc, #164]	; (80010dc <MX_GPIO_Init+0x2d4>)
 8001036:	f003 fd63 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 800103a:	f248 0380 	movw	r3, #32896	; 0x8080
 800103e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <MX_GPIO_Init+0x2e4>)
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104c:	4619      	mov	r1, r3
 800104e:	4824      	ldr	r0, [pc, #144]	; (80010e0 <MX_GPIO_Init+0x2d8>)
 8001050:	f003 fd56 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13;
 8001054:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	481c      	ldr	r0, [pc, #112]	; (80010e0 <MX_GPIO_Init+0x2d8>)
 800106e:	f003 fd47 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	4816      	ldr	r0, [pc, #88]	; (80010e4 <MX_GPIO_Init+0x2dc>)
 800108c:	f003 fd38 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin;
 8001090:	2310      	movs	r3, #16
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010a0:	2306      	movs	r3, #6
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D12_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a8:	4619      	mov	r1, r3
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_GPIO_Init+0x2d4>)
 80010ac:	f003 fd28 	bl	8004b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80010b0:	2340      	movs	r3, #64	; 0x40
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <MX_GPIO_Init+0x2e4>)
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	; (80010dc <MX_GPIO_Init+0x2d4>)
 80010c4:	f003 fd1c 	bl	8004b00 <HAL_GPIO_Init>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40020800 	.word	0x40020800
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40021800 	.word	0x40021800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40021400 	.word	0x40021400
 80010ec:	10110000 	.word	0x10110000

080010f0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001108:	4b4f      	ldr	r3, [pc, #316]	; (8001248 <MX_FSMC_Init+0x158>)
 800110a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800110e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001110:	4b4d      	ldr	r3, [pc, #308]	; (8001248 <MX_FSMC_Init+0x158>)
 8001112:	4a4e      	ldr	r2, [pc, #312]	; (800124c <MX_FSMC_Init+0x15c>)
 8001114:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001116:	4b4c      	ldr	r3, [pc, #304]	; (8001248 <MX_FSMC_Init+0x158>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800111c:	4b4a      	ldr	r3, [pc, #296]	; (8001248 <MX_FSMC_Init+0x158>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001122:	4b49      	ldr	r3, [pc, #292]	; (8001248 <MX_FSMC_Init+0x158>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001128:	4b47      	ldr	r3, [pc, #284]	; (8001248 <MX_FSMC_Init+0x158>)
 800112a:	2210      	movs	r2, #16
 800112c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800112e:	4b46      	ldr	r3, [pc, #280]	; (8001248 <MX_FSMC_Init+0x158>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001134:	4b44      	ldr	r3, [pc, #272]	; (8001248 <MX_FSMC_Init+0x158>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <MX_FSMC_Init+0x158>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001140:	4b41      	ldr	r3, [pc, #260]	; (8001248 <MX_FSMC_Init+0x158>)
 8001142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001148:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <MX_FSMC_Init+0x158>)
 800114a:	2200      	movs	r2, #0
 800114c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800114e:	4b3e      	ldr	r3, [pc, #248]	; (8001248 <MX_FSMC_Init+0x158>)
 8001150:	2200      	movs	r2, #0
 8001152:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001154:	4b3c      	ldr	r3, [pc, #240]	; (8001248 <MX_FSMC_Init+0x158>)
 8001156:	2200      	movs	r2, #0
 8001158:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800115a:	4b3b      	ldr	r3, [pc, #236]	; (8001248 <MX_FSMC_Init+0x158>)
 800115c:	2200      	movs	r2, #0
 800115e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001160:	4b39      	ldr	r3, [pc, #228]	; (8001248 <MX_FSMC_Init+0x158>)
 8001162:	2200      	movs	r2, #0
 8001164:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001166:	4b38      	ldr	r3, [pc, #224]	; (8001248 <MX_FSMC_Init+0x158>)
 8001168:	2200      	movs	r2, #0
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800116c:	4b36      	ldr	r3, [pc, #216]	; (8001248 <MX_FSMC_Init+0x158>)
 800116e:	2200      	movs	r2, #0
 8001170:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001172:	230f      	movs	r3, #15
 8001174:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001176:	230f      	movs	r3, #15
 8001178:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800117a:	23ff      	movs	r3, #255	; 0xff
 800117c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800117e:	230f      	movs	r3, #15
 8001180:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001182:	2310      	movs	r3, #16
 8001184:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001186:	2311      	movs	r3, #17
 8001188:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800118a:	2300      	movs	r3, #0
 800118c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	482c      	ldr	r0, [pc, #176]	; (8001248 <MX_FSMC_Init+0x158>)
 8001196:	f007 ff75 	bl	8009084 <HAL_SRAM_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 80011a0:	f000 f9a0 	bl	80014e4 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 80011a4:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_FSMC_Init+0x160>)
 80011a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011aa:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <MX_FSMC_Init+0x160>)
 80011ae:	4a27      	ldr	r2, [pc, #156]	; (800124c <MX_FSMC_Init+0x15c>)
 80011b0:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_FSMC_Init+0x160>)
 80011b4:	2204      	movs	r2, #4
 80011b6:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MX_FSMC_Init+0x160>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_FSMC_Init+0x160>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_FSMC_Init+0x160>)
 80011c6:	2210      	movs	r2, #16
 80011c8:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_FSMC_Init+0x160>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_FSMC_Init+0x160>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_FSMC_Init+0x160>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_FSMC_Init+0x160>)
 80011de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_FSMC_Init+0x160>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_FSMC_Init+0x160>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_FSMC_Init+0x160>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_FSMC_Init+0x160>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_FSMC_Init+0x160>)
 80011fe:	2200      	movs	r2, #0
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_FSMC_Init+0x160>)
 8001204:	2200      	movs	r2, #0
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_FSMC_Init+0x160>)
 800120a:	2200      	movs	r2, #0
 800120c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800120e:	230f      	movs	r3, #15
 8001210:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001212:	230f      	movs	r3, #15
 8001214:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001216:	23ff      	movs	r3, #255	; 0xff
 8001218:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800121a:	230f      	movs	r3, #15
 800121c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800121e:	2310      	movs	r3, #16
 8001220:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001222:	2311      	movs	r3, #17
 8001224:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_FSMC_Init+0x160>)
 8001232:	f007 ff27 	bl	8009084 <HAL_SRAM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 800123c:	f000 f952 	bl	80014e4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20004bc0 	.word	0x20004bc0
 800124c:	a0000104 	.word	0xa0000104
 8001250:	200050b0 	.word	0x200050b0

08001254 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	__NOP(); //checks if we receive all data
 800125c:	bf00      	nop
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001272:	f010 fb7b 	bl	801196c <MX_USB_HOST_Init>
	  //itoa(motor1Val,buffer,10);
	  //BSP_LCD_SetTextColor(LCD_COLOR_RED);
	  //BSP_LCD_DisplayStringAtLine(1, buffer);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,motor1Val);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,motor1Val);
	  osDelay(1);
 8001276:	2001      	movs	r0, #1
 8001278:	f00d fd22 	bl	800ecc0 <osDelay>
 800127c:	e7fb      	b.n	8001276 <StartDefaultTask+0xc>
	...

08001280 <Receive_Radio_Signal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receive_Radio_Signal */
void Receive_Radio_Signal(void *argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b09a      	sub	sp, #104	; 0x68
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
	 //char buffer[20];
	  //itoa(motor1Val,buffer,10);
	SBUS sbus;
	sbus.arm = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sbus.disarm = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	int count = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	667b      	str	r3, [r7, #100]	; 0x64
  for(;;)
  {
		if (RC_READ_SBUS(&huart7 ,&sbus)) {
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	4874      	ldr	r0, [pc, #464]	; (8001470 <Receive_Radio_Signal+0x1f0>)
 80012a0:	f001 fffc 	bl	800329c <RC_READ_SBUS>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 8085 	beq.w	80013b6 <Receive_Radio_Signal+0x136>

			sendString("CH1:", &huart6);
 80012ac:	4971      	ldr	r1, [pc, #452]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 80012ae:	4872      	ldr	r0, [pc, #456]	; (8001478 <Receive_Radio_Signal+0x1f8>)
 80012b0:	f7ff f93e 	bl	8000530 <sendString>

			position1Vals[count] = sbus.PWM_US_RC_CH[4];
 80012b4:	8abb      	ldrh	r3, [r7, #20]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4a70      	ldr	r2, [pc, #448]	; (800147c <Receive_Radio_Signal+0x1fc>)
 80012ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sendInt(sbus.PWM_US_RC_CH[0], &huart6);
 80012c0:	89bb      	ldrh	r3, [r7, #12]
 80012c2:	496c      	ldr	r1, [pc, #432]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f946 	bl	8000556 <sendInt>

			sendString("CH2:", &huart6);
 80012ca:	496a      	ldr	r1, [pc, #424]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 80012cc:	486c      	ldr	r0, [pc, #432]	; (8001480 <Receive_Radio_Signal+0x200>)
 80012ce:	f7ff f92f 	bl	8000530 <sendString>

			position2Vals[count] = sbus.PWM_US_RC_CH[5];
 80012d2:	8afb      	ldrh	r3, [r7, #22]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4a6b      	ldr	r2, [pc, #428]	; (8001484 <Receive_Radio_Signal+0x204>)
 80012d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sendInt(sbus.PWM_US_RC_CH[1], &huart6);
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	4964      	ldr	r1, [pc, #400]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f937 	bl	8000556 <sendInt>

			sendString("CH3:", &huart6);
 80012e8:	4962      	ldr	r1, [pc, #392]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 80012ea:	4867      	ldr	r0, [pc, #412]	; (8001488 <Receive_Radio_Signal+0x208>)
 80012ec:	f7ff f920 	bl	8000530 <sendString>

			position3Vals[count] = sbus.PWM_US_RC_CH[6];
 80012f0:	8b3b      	ldrh	r3, [r7, #24]
 80012f2:	4619      	mov	r1, r3
 80012f4:	4a65      	ldr	r2, [pc, #404]	; (800148c <Receive_Radio_Signal+0x20c>)
 80012f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sendInt(sbus.PWM_US_RC_CH[2], &huart6);
 80012fc:	8a3b      	ldrh	r3, [r7, #16]
 80012fe:	495d      	ldr	r1, [pc, #372]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f928 	bl	8000556 <sendInt>

			sendString("CH4:", &huart6);
 8001306:	495b      	ldr	r1, [pc, #364]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001308:	4861      	ldr	r0, [pc, #388]	; (8001490 <Receive_Radio_Signal+0x210>)
 800130a:	f7ff f911 	bl	8000530 <sendString>

			position4Vals[count] = sbus.PWM_US_RC_CH[7];
 800130e:	8b7b      	ldrh	r3, [r7, #26]
 8001310:	4619      	mov	r1, r3
 8001312:	4a60      	ldr	r2, [pc, #384]	; (8001494 <Receive_Radio_Signal+0x214>)
 8001314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sendInt(sbus.PWM_US_RC_CH[3], &huart6);
 800131a:	8a7b      	ldrh	r3, [r7, #18]
 800131c:	4955      	ldr	r1, [pc, #340]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f919 	bl	8000556 <sendInt>

			sendString("CH5:", &huart6);
 8001324:	4953      	ldr	r1, [pc, #332]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001326:	485c      	ldr	r0, [pc, #368]	; (8001498 <Receive_Radio_Signal+0x218>)
 8001328:	f7ff f902 	bl	8000530 <sendString>

			sendInt(sbus.PWM_US_RC_CH[4], &huart6);
 800132c:	8abb      	ldrh	r3, [r7, #20]
 800132e:	4951      	ldr	r1, [pc, #324]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f910 	bl	8000556 <sendInt>

			sendString("CH6:", &huart6);
 8001336:	494f      	ldr	r1, [pc, #316]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001338:	4858      	ldr	r0, [pc, #352]	; (800149c <Receive_Radio_Signal+0x21c>)
 800133a:	f7ff f8f9 	bl	8000530 <sendString>

			sendInt(sbus.PWM_US_RC_CH[5], &huart6);
 800133e:	8afb      	ldrh	r3, [r7, #22]
 8001340:	494c      	ldr	r1, [pc, #304]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f907 	bl	8000556 <sendInt>

			sendString("CH7:", &huart6);
 8001348:	494a      	ldr	r1, [pc, #296]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 800134a:	4855      	ldr	r0, [pc, #340]	; (80014a0 <Receive_Radio_Signal+0x220>)
 800134c:	f7ff f8f0 	bl	8000530 <sendString>

			sendInt(sbus.PWM_US_RC_CH[6], &huart6);
 8001350:	8b3b      	ldrh	r3, [r7, #24]
 8001352:	4948      	ldr	r1, [pc, #288]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8fe 	bl	8000556 <sendInt>

			sendString("CH8:", &huart6);
 800135a:	4946      	ldr	r1, [pc, #280]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 800135c:	4851      	ldr	r0, [pc, #324]	; (80014a4 <Receive_Radio_Signal+0x224>)
 800135e:	f7ff f8e7 	bl	8000530 <sendString>

			sendInt(sbus.PWM_US_RC_CH[7], &huart6);
 8001362:	8b7b      	ldrh	r3, [r7, #26]
 8001364:	4943      	ldr	r1, [pc, #268]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8f5 	bl	8000556 <sendInt>

			sendString("CH9:", &huart6);
 800136c:	4941      	ldr	r1, [pc, #260]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 800136e:	484e      	ldr	r0, [pc, #312]	; (80014a8 <Receive_Radio_Signal+0x228>)
 8001370:	f7ff f8de 	bl	8000530 <sendString>

			sendInt(sbus.PWM_US_RC_CH[8], &huart6);
 8001374:	8bbb      	ldrh	r3, [r7, #28]
 8001376:	493f      	ldr	r1, [pc, #252]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8ec 	bl	8000556 <sendInt>

			sendString("CH10:", &huart6);
 800137e:	493d      	ldr	r1, [pc, #244]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 8001380:	484a      	ldr	r0, [pc, #296]	; (80014ac <Receive_Radio_Signal+0x22c>)
 8001382:	f7ff f8d5 	bl	8000530 <sendString>

			sendInt(sbus.PWM_US_RC_CH[9], &huart6);
 8001386:	8bfb      	ldrh	r3, [r7, #30]
 8001388:	493a      	ldr	r1, [pc, #232]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8e3 	bl	8000556 <sendInt>

			if (sbus.failsafe) {
 8001390:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <Receive_Radio_Signal+0x120>
				sendString("failsafe\r\n", &huart6);
 8001398:	4936      	ldr	r1, [pc, #216]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 800139a:	4845      	ldr	r0, [pc, #276]	; (80014b0 <Receive_Radio_Signal+0x230>)
 800139c:	f7ff f8c8 	bl	8000530 <sendString>
			}
			if (sbus.frame_lost) {
 80013a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d003      	beq.n	80013b0 <Receive_Radio_Signal+0x130>
				sendString("frame_lost\r\n", &huart6);
 80013a8:	4932      	ldr	r1, [pc, #200]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 80013aa:	4842      	ldr	r0, [pc, #264]	; (80014b4 <Receive_Radio_Signal+0x234>)
 80013ac:	f7ff f8c0 	bl	8000530 <sendString>
			}
			count++;
 80013b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013b2:	3301      	adds	r3, #1
 80013b4:	667b      	str	r3, [r7, #100]	; 0x64

	  	}
	if (sbus.error) {
 80013b6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <Receive_Radio_Signal+0x146>
		sendString("Connection Error!!\r\n", &huart6);
 80013be:	492d      	ldr	r1, [pc, #180]	; (8001474 <Receive_Radio_Signal+0x1f4>)
 80013c0:	483d      	ldr	r0, [pc, #244]	; (80014b8 <Receive_Radio_Signal+0x238>)
 80013c2:	f7ff f8b5 	bl	8000530 <sendString>
	}
	if(count >= 50) {
 80013c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80013c8:	2b31      	cmp	r3, #49	; 0x31
 80013ca:	f77f af65 	ble.w	8001298 <Receive_Radio_Signal+0x18>
		count = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	667b      	str	r3, [r7, #100]	; 0x64
		int tot1 = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	663b      	str	r3, [r7, #96]	; 0x60
		int tot2 = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	65fb      	str	r3, [r7, #92]	; 0x5c
		int tot3 = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	65bb      	str	r3, [r7, #88]	; 0x58
		int tot4 = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	657b      	str	r3, [r7, #84]	; 0x54
		for(int i=0; i< 50; i++) {
 80013e2:	2300      	movs	r3, #0
 80013e4:	653b      	str	r3, [r7, #80]	; 0x50
 80013e6:	e01e      	b.n	8001426 <Receive_Radio_Signal+0x1a6>
		  tot1 += position1Vals[i];
 80013e8:	4a24      	ldr	r2, [pc, #144]	; (800147c <Receive_Radio_Signal+0x1fc>)
 80013ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f2:	4413      	add	r3, r2
 80013f4:	663b      	str	r3, [r7, #96]	; 0x60
		  tot2 += position2Vals[i];
 80013f6:	4a23      	ldr	r2, [pc, #140]	; (8001484 <Receive_Radio_Signal+0x204>)
 80013f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001400:	4413      	add	r3, r2
 8001402:	65fb      	str	r3, [r7, #92]	; 0x5c
		  tot3 += position3Vals[i];
 8001404:	4a21      	ldr	r2, [pc, #132]	; (800148c <Receive_Radio_Signal+0x20c>)
 8001406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800140e:	4413      	add	r3, r2
 8001410:	65bb      	str	r3, [r7, #88]	; 0x58
		  tot4 += position4Vals[i];
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <Receive_Radio_Signal+0x214>)
 8001414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800141c:	4413      	add	r3, r2
 800141e:	657b      	str	r3, [r7, #84]	; 0x54
		for(int i=0; i< 50; i++) {
 8001420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001422:	3301      	adds	r3, #1
 8001424:	653b      	str	r3, [r7, #80]	; 0x50
 8001426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001428:	2b31      	cmp	r3, #49	; 0x31
 800142a:	dddd      	ble.n	80013e8 <Receive_Radio_Signal+0x168>
		}
		tot1 = tot1 / 50;
 800142c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800142e:	4a23      	ldr	r2, [pc, #140]	; (80014bc <Receive_Radio_Signal+0x23c>)
 8001430:	fb82 1203 	smull	r1, r2, r2, r3
 8001434:	1112      	asrs	r2, r2, #4
 8001436:	17db      	asrs	r3, r3, #31
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	663b      	str	r3, [r7, #96]	; 0x60
		tot2 = tot2 / 50;
 800143c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <Receive_Radio_Signal+0x23c>)
 8001440:	fb82 1203 	smull	r1, r2, r2, r3
 8001444:	1112      	asrs	r2, r2, #4
 8001446:	17db      	asrs	r3, r3, #31
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	65fb      	str	r3, [r7, #92]	; 0x5c
		tot3 = tot3 / 50;
 800144c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800144e:	4a1b      	ldr	r2, [pc, #108]	; (80014bc <Receive_Radio_Signal+0x23c>)
 8001450:	fb82 1203 	smull	r1, r2, r2, r3
 8001454:	1112      	asrs	r2, r2, #4
 8001456:	17db      	asrs	r3, r3, #31
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	65bb      	str	r3, [r7, #88]	; 0x58
		tot4 = tot4 / 50;
 800145c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <Receive_Radio_Signal+0x23c>)
 8001460:	fb82 1203 	smull	r1, r2, r2, r3
 8001464:	1112      	asrs	r2, r2, #4
 8001466:	17db      	asrs	r3, r3, #31
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	657b      	str	r3, [r7, #84]	; 0x54
		__NOP();
 800146c:	bf00      	nop
		if (RC_READ_SBUS(&huart7 ,&sbus)) {
 800146e:	e713      	b.n	8001298 <Receive_Radio_Signal+0x18>
 8001470:	20004aac 	.word	0x20004aac
 8001474:	20005184 	.word	0x20005184
 8001478:	08012264 	.word	0x08012264
 800147c:	20004c88 	.word	0x20004c88
 8001480:	0801226c 	.word	0x0801226c
 8001484:	20004ec0 	.word	0x20004ec0
 8001488:	08012274 	.word	0x08012274
 800148c:	20004df8 	.word	0x20004df8
 8001490:	0801227c 	.word	0x0801227c
 8001494:	20004f88 	.word	0x20004f88
 8001498:	08012284 	.word	0x08012284
 800149c:	0801228c 	.word	0x0801228c
 80014a0:	08012294 	.word	0x08012294
 80014a4:	0801229c 	.word	0x0801229c
 80014a8:	080122a4 	.word	0x080122a4
 80014ac:	080122ac 	.word	0x080122ac
 80014b0:	080122b4 	.word	0x080122b4
 80014b4:	080122c0 	.word	0x080122c0
 80014b8:	080122d0 	.word	0x080122d0
 80014bc:	51eb851f 	.word	0x51eb851f

080014c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014d2:	f002 f8f3 	bl	80036bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40001000 	.word	0x40001000

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_MspInit+0x4c>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_MspInit+0x4c>)
 8001504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001508:	6453      	str	r3, [r2, #68]	; 0x44
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_MspInit+0x4c>)
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_MspInit+0x4c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_MspInit+0x4c>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_MspInit+0x4c>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 031c 	add.w	r3, r7, #28
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a31      	ldr	r2, [pc, #196]	; (8001628 <HAL_ADC_MspInit+0xe4>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d15b      	bne.n	800161e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_ADC_MspInit+0xe8>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a2f      	ldr	r2, [pc, #188]	; (800162c <HAL_ADC_MspInit+0xe8>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_ADC_MspInit+0xe8>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <HAL_ADC_MspInit+0xe8>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a28      	ldr	r2, [pc, #160]	; (800162c <HAL_ADC_MspInit+0xe8>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b26      	ldr	r3, [pc, #152]	; (800162c <HAL_ADC_MspInit+0xe8>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <HAL_ADC_MspInit+0xe8>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <HAL_ADC_MspInit+0xe8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <HAL_ADC_MspInit+0xe8>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_ADC_MspInit+0xe8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a1a      	ldr	r2, [pc, #104]	; (800162c <HAL_ADC_MspInit+0xe8>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_ADC_MspInit+0xe8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80015d6:	2311      	movs	r3, #17
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4811      	ldr	r0, [pc, #68]	; (8001630 <HAL_ADC_MspInit+0xec>)
 80015ea:	f003 fa89 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80015ee:	2326      	movs	r3, #38	; 0x26
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	; (8001634 <HAL_ADC_MspInit+0xf0>)
 8001602:	f003 fa7d 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001606:	2302      	movs	r3, #2
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <HAL_ADC_MspInit+0xf4>)
 800161a:	f003 fa71 	bl	8004b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800161e:	bf00      	nop
 8001620:	3730      	adds	r7, #48	; 0x30
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40012000 	.word	0x40012000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020800 	.word	0x40020800
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <HAL_DAC_MspInit+0x8c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12f      	bne.n	80016be <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <HAL_DAC_MspInit+0x90>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_DAC_MspInit+0x90>)
 8001668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_DAC_MspInit+0x90>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001676:	613b      	str	r3, [r7, #16]
 8001678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <HAL_DAC_MspInit+0x90>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_DAC_MspInit+0x90>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_DAC_MspInit+0x90>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8001696:	2310      	movs	r3, #16
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169a:	2303      	movs	r3, #3
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <HAL_DAC_MspInit+0x94>)
 80016aa:	f003 fa29 	bl	8004b00 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2036      	movs	r0, #54	; 0x36
 80016b4:	f002 fb6e 	bl	8003d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b8:	2036      	movs	r0, #54	; 0x36
 80016ba:	f002 fb87 	bl	8003dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3728      	adds	r7, #40	; 0x28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40007400 	.word	0x40007400
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08e      	sub	sp, #56	; 0x38
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a77      	ldr	r2, [pc, #476]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d00e      	beq.n	8001714 <HAL_DFSDM_ChannelMspInit+0x40>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a76      	ldr	r2, [pc, #472]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x200>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d009      	beq.n	8001714 <HAL_DFSDM_ChannelMspInit+0x40>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a74      	ldr	r2, [pc, #464]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d004      	beq.n	8001714 <HAL_DFSDM_ChannelMspInit+0x40>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a73      	ldr	r2, [pc, #460]	; (80018dc <HAL_DFSDM_ChannelMspInit+0x208>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d154      	bne.n	80017be <HAL_DFSDM_ChannelMspInit+0xea>
 8001714:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d150      	bne.n	80017be <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
 8001720:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	4a6f      	ldr	r2, [pc, #444]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172a:	6453      	str	r3, [r2, #68]	; 0x44
 800172c:	4b6d      	ldr	r3, [pc, #436]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001734:	623b      	str	r3, [r7, #32]
 8001736:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
 800173c:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	4a68      	ldr	r2, [pc, #416]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6313      	str	r3, [r2, #48]	; 0x30
 8001748:	4b66      	ldr	r3, [pc, #408]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	61fb      	str	r3, [r7, #28]
 8001752:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	4a61      	ldr	r2, [pc, #388]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6313      	str	r3, [r2, #48]	; 0x30
 8001764:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001782:	2306      	movs	r3, #6
 8001784:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	4856      	ldr	r0, [pc, #344]	; (80018e8 <HAL_DFSDM_ChannelMspInit+0x214>)
 800178e:	f003 f9b7 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017a2:	2306      	movs	r3, #6
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	484f      	ldr	r0, [pc, #316]	; (80018ec <HAL_DFSDM_ChannelMspInit+0x218>)
 80017ae:	f003 f9a7 	bl	8004b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80017b2:	4b4b      	ldr	r3, [pc, #300]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a49      	ldr	r2, [pc, #292]	; (80018e0 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80017ba:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80017bc:	e084      	b.n	80018c8 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d07f      	beq.n	80018c8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a41      	ldr	r2, [pc, #260]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x200>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d07a      	beq.n	80018c8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a40      	ldr	r2, [pc, #256]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x204>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d075      	beq.n	80018c8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a3e      	ldr	r2, [pc, #248]	; (80018dc <HAL_DFSDM_ChannelMspInit+0x208>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d070      	beq.n	80018c8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80017e6:	4b42      	ldr	r3, [pc, #264]	; (80018f0 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d16c      	bne.n	80018c8 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	4b3c      	ldr	r3, [pc, #240]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a3b      	ldr	r2, [pc, #236]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 80017f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b39      	ldr	r3, [pc, #228]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b35      	ldr	r3, [pc, #212]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a34      	ldr	r2, [pc, #208]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a2d      	ldr	r2, [pc, #180]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a26      	ldr	r2, [pc, #152]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2300      	movs	r3, #0
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 800186e:	2307      	movs	r3, #7
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	481b      	ldr	r0, [pc, #108]	; (80018e8 <HAL_DFSDM_ChannelMspInit+0x214>)
 800187a:	f003 f941 	bl	8004b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 800187e:	2304      	movs	r3, #4
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 800188e:	2303      	movs	r3, #3
 8001890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001896:	4619      	mov	r1, r3
 8001898:	4814      	ldr	r0, [pc, #80]	; (80018ec <HAL_DFSDM_ChannelMspInit+0x218>)
 800189a:	f003 f931 	bl	8004b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80018ae:	2306      	movs	r3, #6
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	480e      	ldr	r0, [pc, #56]	; (80018f4 <HAL_DFSDM_ChannelMspInit+0x220>)
 80018ba:	f003 f921 	bl	8004b00 <HAL_GPIO_Init>
  DFSDM2_Init++;
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	3301      	adds	r3, #1
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	3738      	adds	r7, #56	; 0x38
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40016000 	.word	0x40016000
 80018d4:	40016020 	.word	0x40016020
 80018d8:	40016040 	.word	0x40016040
 80018dc:	40016060 	.word	0x40016060
 80018e0:	20000108 	.word	0x20000108
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020c00 	.word	0x40020c00
 80018f0:	2000010c 	.word	0x2000010c
 80018f4:	40020400 	.word	0x40020400

080018f8 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_FMPI2C_MspInit+0x84>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12b      	bne.n	8001972 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_FMPI2C_MspInit+0x88>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_FMPI2C_MspInit+0x88>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_FMPI2C_MspInit+0x88>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001936:	23c0      	movs	r3, #192	; 0xc0
 8001938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193a:	2312      	movs	r3, #18
 800193c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800193e:	2301      	movs	r3, #1
 8001940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001942:	2303      	movs	r3, #3
 8001944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001946:	2304      	movs	r3, #4
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <HAL_FMPI2C_MspInit+0x8c>)
 8001952:	f003 f8d5 	bl	8004b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_FMPI2C_MspInit+0x88>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_FMPI2C_MspInit+0x88>)
 8001960:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_FMPI2C_MspInit+0x88>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40006000 	.word	0x40006000
 8001980:	40023800 	.word	0x40023800
 8001984:	40020800 	.word	0x40020800

08001988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_I2C_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12c      	bne.n	8001a04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80019c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019cc:	2312      	movs	r3, #18
 80019ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019d8:	2304      	movs	r3, #4
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	480c      	ldr	r0, [pc, #48]	; (8001a14 <HAL_I2C_MspInit+0x8c>)
 80019e4:	f003 f88c 	bl	8004b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f6:	6413      	str	r3, [r2, #64]	; 0x40
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	; 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40005800 	.word	0x40005800
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020400 	.word	0x40020400

08001a18 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 031c 	add.w	r3, r7, #28
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	; (8001b74 <HAL_I2S_MspInit+0x15c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f040 8097 	bne.w	8001b6a <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	4b4d      	ldr	r3, [pc, #308]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	4a4c      	ldr	r2, [pc, #304]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	4a3e      	ldr	r2, [pc, #248]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a7e:	f043 0301 	orr.w	r3, r3, #1
 8001a82:	6313      	str	r3, [r2, #48]	; 0x30
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	4a37      	ldr	r2, [pc, #220]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a30      	ldr	r2, [pc, #192]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_I2S_MspInit+0x160>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001ad8:	2306      	movs	r3, #6
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4826      	ldr	r0, [pc, #152]	; (8001b7c <HAL_I2S_MspInit+0x164>)
 8001ae4:	f003 f80c 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af8:	2305      	movs	r3, #5
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	481e      	ldr	r0, [pc, #120]	; (8001b7c <HAL_I2S_MspInit+0x164>)
 8001b04:	f002 fffc 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001b08:	2308      	movs	r3, #8
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b18:	2305      	movs	r3, #5
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4817      	ldr	r0, [pc, #92]	; (8001b80 <HAL_I2S_MspInit+0x168>)
 8001b24:	f002 ffec 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b38:	2305      	movs	r3, #5
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	4810      	ldr	r0, [pc, #64]	; (8001b84 <HAL_I2S_MspInit+0x16c>)
 8001b44:	f002 ffdc 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4808      	ldr	r0, [pc, #32]	; (8001b88 <HAL_I2S_MspInit+0x170>)
 8001b66:	f002 ffcb 	bl	8004b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	; 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40003800 	.word	0x40003800
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40020400 	.word	0x40020400

08001b8c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	; 0x38
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_QSPI_MspInit+0x178>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	f040 80a6 	bne.w	8001cfc <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
 8001bb4:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	4a53      	ldr	r2, [pc, #332]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bba:	f043 0302 	orr.w	r3, r3, #2
 8001bbe:	6393      	str	r3, [r2, #56]	; 0x38
 8001bc0:	4b51      	ldr	r3, [pc, #324]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	4b4d      	ldr	r3, [pc, #308]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	6313      	str	r3, [r2, #48]	; 0x30
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	4a45      	ldr	r2, [pc, #276]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf8:	4b43      	ldr	r3, [pc, #268]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	4b3f      	ldr	r3, [pc, #252]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4a3e      	ldr	r2, [pc, #248]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
 8001c14:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	4a37      	ldr	r2, [pc, #220]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c2a:	f043 0308 	orr.w	r3, r3, #8
 8001c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c30:	4b35      	ldr	r3, [pc, #212]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b31      	ldr	r3, [pc, #196]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a30      	ldr	r2, [pc, #192]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <HAL_QSPI_MspInit+0x17c>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001c58:	2304      	movs	r3, #4
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001c68:	2309      	movs	r3, #9
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	4619      	mov	r1, r3
 8001c72:	4826      	ldr	r0, [pc, #152]	; (8001d0c <HAL_QSPI_MspInit+0x180>)
 8001c74:	f002 ff44 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001c78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	481e      	ldr	r0, [pc, #120]	; (8001d10 <HAL_QSPI_MspInit+0x184>)
 8001c96:	f002 ff33 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001caa:	2309      	movs	r3, #9
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4817      	ldr	r0, [pc, #92]	; (8001d14 <HAL_QSPI_MspInit+0x188>)
 8001cb6:	f002 ff23 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4810      	ldr	r0, [pc, #64]	; (8001d18 <HAL_QSPI_MspInit+0x18c>)
 8001cd8:	f002 ff12 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001cdc:	2340      	movs	r3, #64	; 0x40
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cec:	230a      	movs	r3, #10
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4809      	ldr	r0, [pc, #36]	; (8001d1c <HAL_QSPI_MspInit+0x190>)
 8001cf8:	f002 ff02 	bl	8004b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3738      	adds	r7, #56	; 0x38
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	a0001000 	.word	0xa0001000
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40021400 	.word	0x40021400
 8001d14:	40020400 	.word	0x40020400
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021800 	.word	0x40021800

08001d20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a28      	ldr	r2, [pc, #160]	; (8001de0 <HAL_SD_MspInit+0xc0>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d14a      	bne.n	8001dd8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_SD_MspInit+0xc4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001d96:	2340      	movs	r3, #64	; 0x40
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001da6:	230c      	movs	r3, #12
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <HAL_SD_MspInit+0xc8>)
 8001db2:	f002 fea5 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001db6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001dba:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001dc8:	230c      	movs	r3, #12
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4806      	ldr	r0, [pc, #24]	; (8001dec <HAL_SD_MspInit+0xcc>)
 8001dd4:	f002 fe94 	bl	8004b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	40020800 	.word	0x40020800

08001df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <HAL_TIM_Base_MspInit+0x3c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10d      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_TIM_Base_MspInit+0x40>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_TIM_Base_MspInit+0x40>)
 8001e0c:	f043 0302 	orr.w	r3, r3, #2
 8001e10:	6413      	str	r3, [r2, #64]	; 0x40
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_TIM_Base_MspInit+0x40>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40000400 	.word	0x40000400
 8001e30:	40023800 	.word	0x40023800

08001e34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <HAL_TIM_MspPostInit+0x68>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d11d      	bne.n	8001e92 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_TIM_MspPostInit+0x6c>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001e72:	2321      	movs	r3, #33	; 0x21
 8001e74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_TIM_MspPostInit+0x70>)
 8001e8e:	f002 fe37 	bl	8004b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3720      	adds	r7, #32
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020400 	.word	0x40020400

08001ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	; 0x38
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a67      	ldr	r2, [pc, #412]	; (8002064 <HAL_UART_MspInit+0x1bc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d163      	bne.n	8001f92 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
 8001ece:	4b66      	ldr	r3, [pc, #408]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	4a65      	ldr	r2, [pc, #404]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	4b5f      	ldr	r3, [pc, #380]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	4a5e      	ldr	r2, [pc, #376]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001ef0:	f043 0320 	orr.w	r3, r3, #32
 8001ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef6:	4b5c      	ldr	r3, [pc, #368]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	f003 0320 	and.w	r3, r3, #32
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f02:	23c0      	movs	r3, #192	; 0xc0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001f12:	2308      	movs	r3, #8
 8001f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4853      	ldr	r0, [pc, #332]	; (800206c <HAL_UART_MspInit+0x1c4>)
 8001f1e:	f002 fdef 	bl	8004b00 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001f22:	4b53      	ldr	r3, [pc, #332]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f24:	4a53      	ldr	r2, [pc, #332]	; (8002074 <HAL_UART_MspInit+0x1cc>)
 8001f26:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001f28:	4b51      	ldr	r3, [pc, #324]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f2a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001f2e:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f30:	4b4f      	ldr	r3, [pc, #316]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f36:	4b4e      	ldr	r3, [pc, #312]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f42:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f44:	4b4a      	ldr	r3, [pc, #296]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4a:	4b49      	ldr	r3, [pc, #292]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001f50:	4b47      	ldr	r3, [pc, #284]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f5c:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5e:	4b44      	ldr	r3, [pc, #272]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001f64:	4842      	ldr	r0, [pc, #264]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f66:	f002 f961 	bl	800422c <HAL_DMA_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f70:	f7ff fab8 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3e      	ldr	r2, [pc, #248]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7a:	4a3d      	ldr	r2, [pc, #244]	; (8002070 <HAL_UART_MspInit+0x1c8>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	2052      	movs	r0, #82	; 0x52
 8001f86:	f001 ff05 	bl	8003d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001f8a:	2052      	movs	r0, #82	; 0x52
 8001f8c:	f001 ff1e 	bl	8003dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001f90:	e064      	b.n	800205c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==UART10)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a38      	ldr	r2, [pc, #224]	; (8002078 <HAL_UART_MspInit+0x1d0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d12d      	bne.n	8001ff8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_UART10_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	4a30      	ldr	r2, [pc, #192]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001faa:	6453      	str	r3, [r2, #68]	; 0x44
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4a29      	ldr	r2, [pc, #164]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001fd4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001fe6:	230b      	movs	r3, #11
 8001fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4822      	ldr	r0, [pc, #136]	; (800207c <HAL_UART_MspInit+0x1d4>)
 8001ff2:	f002 fd85 	bl	8004b00 <HAL_GPIO_Init>
}
 8001ff6:	e031      	b.n	800205c <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a20      	ldr	r2, [pc, #128]	; (8002080 <HAL_UART_MspInit+0x1d8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d12c      	bne.n	800205c <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 800200c:	f043 0320 	orr.w	r3, r3, #32
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a10      	ldr	r2, [pc, #64]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8002028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_UART_MspInit+0x1c0>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800203a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800204c:	2308      	movs	r3, #8
 800204e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002054:	4619      	mov	r1, r3
 8002056:	4809      	ldr	r0, [pc, #36]	; (800207c <HAL_UART_MspInit+0x1d4>)
 8002058:	f002 fd52 	bl	8004b00 <HAL_GPIO_Init>
}
 800205c:	bf00      	nop
 800205e:	3738      	adds	r7, #56	; 0x38
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40007800 	.word	0x40007800
 8002068:	40023800 	.word	0x40023800
 800206c:	40021400 	.word	0x40021400
 8002070:	20004d98 	.word	0x20004d98
 8002074:	40026058 	.word	0x40026058
 8002078:	40011c00 	.word	0x40011c00
 800207c:	40021800 	.word	0x40021800
 8002080:	40011400 	.word	0x40011400

08002084 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002098:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_FSMC_MspInit+0xc8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d151      	bne.n	8002144 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80020a0:	4b2a      	ldr	r3, [pc, #168]	; (800214c <HAL_FSMC_MspInit+0xc8>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	4b29      	ldr	r3, [pc, #164]	; (8002150 <HAL_FSMC_MspInit+0xcc>)
 80020ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ae:	4a28      	ldr	r2, [pc, #160]	; (8002150 <HAL_FSMC_MspInit+0xcc>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6393      	str	r3, [r2, #56]	; 0x38
 80020b6:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_FSMC_MspInit+0xcc>)
 80020b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 80020c2:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80020c6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80020d4:	230c      	movs	r3, #12
 80020d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4619      	mov	r1, r3
 80020dc:	481d      	ldr	r0, [pc, #116]	; (8002154 <HAL_FSMC_MspInit+0xd0>)
 80020de:	f002 fd0f 	bl	8004b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 80020e2:	f240 433f 	movw	r3, #1087	; 0x43f
 80020e6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f0:	2303      	movs	r3, #3
 80020f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80020f4:	230c      	movs	r3, #12
 80020f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4816      	ldr	r0, [pc, #88]	; (8002158 <HAL_FSMC_MspInit+0xd4>)
 80020fe:	f002 fcff 	bl	8004b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8002102:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002106:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002114:	230c      	movs	r3, #12
 8002116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002118:	1d3b      	adds	r3, r7, #4
 800211a:	4619      	mov	r1, r3
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <HAL_FSMC_MspInit+0xd8>)
 800211e:	f002 fcef 	bl	8004b00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8002122:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002126:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002134:	230c      	movs	r3, #12
 8002136:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	4619      	mov	r1, r3
 800213c:	4808      	ldr	r0, [pc, #32]	; (8002160 <HAL_FSMC_MspInit+0xdc>)
 800213e:	f002 fcdf 	bl	8004b00 <HAL_GPIO_Init>
 8002142:	e000      	b.n	8002146 <HAL_FSMC_MspInit+0xc2>
    return;
 8002144:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20000110 	.word	0x20000110
 8002150:	40023800 	.word	0x40023800
 8002154:	40021400 	.word	0x40021400
 8002158:	40021800 	.word	0x40021800
 800215c:	40021000 	.word	0x40021000
 8002160:	40020c00 	.word	0x40020c00

08002164 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800216c:	f7ff ff8a 	bl	8002084 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	2036      	movs	r0, #54	; 0x36
 800218e:	f001 fe01 	bl	8003d94 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002192:	2036      	movs	r0, #54	; 0x36
 8002194:	f001 fe1a 	bl	8003dcc <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_InitTick+0xa0>)
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_InitTick+0xa0>)
 80021a2:	f043 0310 	orr.w	r3, r3, #16
 80021a6:	6413      	str	r3, [r2, #64]	; 0x40
 80021a8:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <HAL_InitTick+0xa0>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f003 0310 	and.w	r3, r3, #16
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021b4:	f107 0210 	add.w	r2, r7, #16
 80021b8:	f107 0314 	add.w	r3, r7, #20
 80021bc:	4611      	mov	r1, r2
 80021be:	4618      	mov	r0, r3
 80021c0:	f005 fba4 	bl	800790c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021c4:	f005 fb7a 	bl	80078bc <HAL_RCC_GetPCLK1Freq>
 80021c8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80021ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021cc:	4a13      	ldr	r2, [pc, #76]	; (800221c <HAL_InitTick+0xa4>)
 80021ce:	fba2 2303 	umull	r2, r3, r2, r3
 80021d2:	0c9b      	lsrs	r3, r3, #18
 80021d4:	3b01      	subs	r3, #1
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <HAL_InitTick+0xa8>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <HAL_InitTick+0xac>)
 80021dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <HAL_InitTick+0xa8>)
 80021e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_InitTick+0xa8>)
 80021e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_InitTick+0xa8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_InitTick+0xa8>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80021f8:	4809      	ldr	r0, [pc, #36]	; (8002220 <HAL_InitTick+0xa8>)
 80021fa:	f006 ff87 	bl	800910c <HAL_TIM_Base_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002204:	4806      	ldr	r0, [pc, #24]	; (8002220 <HAL_InitTick+0xa8>)
 8002206:	f006 ffac 	bl	8009162 <HAL_TIM_Base_Start_IT>
 800220a:	4603      	mov	r3, r0
 800220c:	e000      	b.n	8002210 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3730      	adds	r7, #48	; 0x30
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	431bde83 	.word	0x431bde83
 8002220:	20005258 	.word	0x20005258
 8002224:	40001000 	.word	0x40001000

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <MemManage_Handler+0x4>

08002242 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <UsageFault_Handler+0x4>

0800224e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <DMA1_Stream3_IRQHandler+0x10>)
 8002262:	f002 f90b 	bl	800447c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20004d98 	.word	0x20004d98

08002270 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002274:	4803      	ldr	r0, [pc, #12]	; (8002284 <TIM6_DAC_IRQHandler+0x14>)
 8002276:	f001 fdd9 	bl	8003e2c <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <TIM6_DAC_IRQHandler+0x18>)
 800227c:	f007 f808 	bl	8009290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20005050 	.word	0x20005050
 8002288:	20005258 	.word	0x20005258

0800228c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002290:	4802      	ldr	r0, [pc, #8]	; (800229c <OTG_FS_IRQHandler+0x10>)
 8002292:	f003 f86f 	bl	8005374 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200056f0 	.word	0x200056f0

080022a0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80022a4:	4802      	ldr	r0, [pc, #8]	; (80022b0 <UART7_IRQHandler+0x10>)
 80022a6:	f007 ff53 	bl	800a150 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20004aac 	.word	0x20004aac

080022b4 <_sbrk>:
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <_sbrk+0x5c>)
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <_sbrk+0x60>)
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <_sbrk+0x64>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <_sbrk+0x22>
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <_sbrk+0x64>)
 80022d2:	4a12      	ldr	r2, [pc, #72]	; (800231c <_sbrk+0x68>)
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <_sbrk+0x64>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d207      	bcs.n	80022f4 <_sbrk+0x40>
 80022e4:	f00f fe44 	bl	8011f70 <__errno>
 80022e8:	4602      	mov	r2, r0
 80022ea:	230c      	movs	r3, #12
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e009      	b.n	8002308 <_sbrk+0x54>
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <_sbrk+0x64>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <_sbrk+0x64>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	4a05      	ldr	r2, [pc, #20]	; (8002318 <_sbrk+0x64>)
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20050000 	.word	0x20050000
 8002314:	00000400 	.word	0x00000400
 8002318:	20000114 	.word	0x20000114
 800231c:	200059b8 	.word	0x200059b8

08002320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <SystemInit+0x28>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <SystemInit+0x28>)
 800232c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <SystemInit+0x28>)
 8002336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233a:	609a      	str	r2, [r3, #8]
#endif
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 800234c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002384 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002352:	e003      	b.n	800235c <LoopCopyDataInit>

08002354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800235a:	3104      	adds	r1, #4

0800235c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800235c:	480b      	ldr	r0, [pc, #44]	; (800238c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800235e:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002364:	d3f6      	bcc.n	8002354 <CopyDataInit>
  ldr  r2, =_sbss
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002368:	e002      	b.n	8002370 <LoopFillZerobss>

0800236a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800236a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800236c:	f842 3b04 	str.w	r3, [r2], #4

08002370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002374:	d3f9      	bcc.n	800236a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002376:	f7ff ffd3 	bl	8002320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800237a:	f00f fdff 	bl	8011f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800237e:	f7fe f90f 	bl	80005a0 <main>
  bx  lr    
 8002382:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002384:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002388:	08014ebc 	.word	0x08014ebc
  ldr  r0, =_sdata
 800238c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002390:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8002394:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8002398:	200059b8 	.word	0x200059b8

0800239c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800239c:	e7fe      	b.n	800239c <ADC_IRQHandler>

0800239e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b084      	sub	sp, #16
 80023a2:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80023a4:	f000 fd6e 	bl	8002e84 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80023a8:	2200      	movs	r2, #0
 80023aa:	2100      	movs	r1, #0
 80023ac:	2010      	movs	r0, #16
 80023ae:	f000 f9e4 	bl	800277a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80023b2:	200a      	movs	r0, #10
 80023b4:	f000 fd8d 	bl	8002ed2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80023b8:	2200      	movs	r2, #0
 80023ba:	2100      	movs	r1, #0
 80023bc:	2001      	movs	r0, #1
 80023be:	f000 f9dc 	bl	800277a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80023c2:	20c8      	movs	r0, #200	; 0xc8
 80023c4:	f000 fd85 	bl	8002ed2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80023c8:	2200      	movs	r2, #0
 80023ca:	2100      	movs	r1, #0
 80023cc:	2011      	movs	r0, #17
 80023ce:	f000 f9d4 	bl	800277a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80023d2:	2078      	movs	r0, #120	; 0x78
 80023d4:	f000 fd7d 	bl	8002ed2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80023d8:	2300      	movs	r3, #0
 80023da:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80023dc:	463b      	mov	r3, r7
 80023de:	2201      	movs	r2, #1
 80023e0:	4619      	mov	r1, r3
 80023e2:	2036      	movs	r0, #54	; 0x36
 80023e4:	f000 f9c9 	bl	800277a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80023e8:	2305      	movs	r3, #5
 80023ea:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80023ec:	463b      	mov	r3, r7
 80023ee:	2201      	movs	r2, #1
 80023f0:	4619      	mov	r1, r3
 80023f2:	203a      	movs	r0, #58	; 0x3a
 80023f4:	f000 f9c1 	bl	800277a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	2021      	movs	r0, #33	; 0x21
 80023fe:	f000 f9bc 	bl	800277a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8002402:	2300      	movs	r3, #0
 8002404:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800240a:	2300      	movs	r3, #0
 800240c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800240e:	23ef      	movs	r3, #239	; 0xef
 8002410:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002412:	463b      	mov	r3, r7
 8002414:	2204      	movs	r2, #4
 8002416:	4619      	mov	r1, r3
 8002418:	202a      	movs	r0, #42	; 0x2a
 800241a:	f000 f9ae 	bl	800277a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 800241e:	2300      	movs	r3, #0
 8002420:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002422:	2300      	movs	r3, #0
 8002424:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002426:	2300      	movs	r3, #0
 8002428:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800242a:	23ef      	movs	r3, #239	; 0xef
 800242c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800242e:	463b      	mov	r3, r7
 8002430:	2204      	movs	r2, #4
 8002432:	4619      	mov	r1, r3
 8002434:	202b      	movs	r0, #43	; 0x2b
 8002436:	f000 f9a0 	bl	800277a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800243a:	230c      	movs	r3, #12
 800243c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800243e:	230c      	movs	r3, #12
 8002440:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002442:	2300      	movs	r3, #0
 8002444:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8002446:	2333      	movs	r3, #51	; 0x33
 8002448:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800244a:	2333      	movs	r3, #51	; 0x33
 800244c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800244e:	463b      	mov	r3, r7
 8002450:	2205      	movs	r2, #5
 8002452:	4619      	mov	r1, r3
 8002454:	20b2      	movs	r0, #178	; 0xb2
 8002456:	f000 f990 	bl	800277a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800245a:	2335      	movs	r3, #53	; 0x35
 800245c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800245e:	463b      	mov	r3, r7
 8002460:	2201      	movs	r2, #1
 8002462:	4619      	mov	r1, r3
 8002464:	20b7      	movs	r0, #183	; 0xb7
 8002466:	f000 f988 	bl	800277a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800246a:	231f      	movs	r3, #31
 800246c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800246e:	463b      	mov	r3, r7
 8002470:	2201      	movs	r2, #1
 8002472:	4619      	mov	r1, r3
 8002474:	20bb      	movs	r0, #187	; 0xbb
 8002476:	f000 f980 	bl	800277a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800247a:	232c      	movs	r3, #44	; 0x2c
 800247c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800247e:	463b      	mov	r3, r7
 8002480:	2201      	movs	r2, #1
 8002482:	4619      	mov	r1, r3
 8002484:	20c0      	movs	r0, #192	; 0xc0
 8002486:	f000 f978 	bl	800277a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800248a:	2301      	movs	r3, #1
 800248c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 800248e:	23c3      	movs	r3, #195	; 0xc3
 8002490:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002492:	463b      	mov	r3, r7
 8002494:	2202      	movs	r2, #2
 8002496:	4619      	mov	r1, r3
 8002498:	20c2      	movs	r0, #194	; 0xc2
 800249a:	f000 f96e 	bl	800277a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800249e:	2320      	movs	r3, #32
 80024a0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80024a2:	463b      	mov	r3, r7
 80024a4:	2201      	movs	r2, #1
 80024a6:	4619      	mov	r1, r3
 80024a8:	20c4      	movs	r0, #196	; 0xc4
 80024aa:	f000 f966 	bl	800277a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80024ae:	230f      	movs	r3, #15
 80024b0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80024b2:	463b      	mov	r3, r7
 80024b4:	2201      	movs	r2, #1
 80024b6:	4619      	mov	r1, r3
 80024b8:	20c6      	movs	r0, #198	; 0xc6
 80024ba:	f000 f95e 	bl	800277a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80024be:	23a4      	movs	r3, #164	; 0xa4
 80024c0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80024c2:	23a1      	movs	r3, #161	; 0xa1
 80024c4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 80024c6:	463b      	mov	r3, r7
 80024c8:	2201      	movs	r2, #1
 80024ca:	4619      	mov	r1, r3
 80024cc:	20d0      	movs	r0, #208	; 0xd0
 80024ce:	f000 f954 	bl	800277a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80024d2:	23d0      	movs	r3, #208	; 0xd0
 80024d4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80024d6:	2308      	movs	r3, #8
 80024d8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80024da:	2311      	movs	r3, #17
 80024dc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80024de:	2308      	movs	r3, #8
 80024e0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80024e2:	230c      	movs	r3, #12
 80024e4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80024e6:	2315      	movs	r3, #21
 80024e8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80024ea:	2339      	movs	r3, #57	; 0x39
 80024ec:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80024ee:	2333      	movs	r3, #51	; 0x33
 80024f0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80024f2:	2350      	movs	r3, #80	; 0x50
 80024f4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80024f6:	2336      	movs	r3, #54	; 0x36
 80024f8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80024fa:	2313      	movs	r3, #19
 80024fc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80024fe:	2314      	movs	r3, #20
 8002500:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002502:	2329      	movs	r3, #41	; 0x29
 8002504:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002506:	232d      	movs	r3, #45	; 0x2d
 8002508:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800250a:	463b      	mov	r3, r7
 800250c:	220e      	movs	r2, #14
 800250e:	4619      	mov	r1, r3
 8002510:	20e0      	movs	r0, #224	; 0xe0
 8002512:	f000 f932 	bl	800277a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002516:	23d0      	movs	r3, #208	; 0xd0
 8002518:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800251a:	2308      	movs	r3, #8
 800251c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 800251e:	2310      	movs	r3, #16
 8002520:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002522:	2308      	movs	r3, #8
 8002524:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002526:	2306      	movs	r3, #6
 8002528:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800252a:	2306      	movs	r3, #6
 800252c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800252e:	2339      	movs	r3, #57	; 0x39
 8002530:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002532:	2344      	movs	r3, #68	; 0x44
 8002534:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002536:	2351      	movs	r3, #81	; 0x51
 8002538:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800253a:	230b      	movs	r3, #11
 800253c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800253e:	2316      	movs	r3, #22
 8002540:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002542:	2314      	movs	r3, #20
 8002544:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002546:	232f      	movs	r3, #47	; 0x2f
 8002548:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800254a:	2331      	movs	r3, #49	; 0x31
 800254c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800254e:	463b      	mov	r3, r7
 8002550:	220e      	movs	r2, #14
 8002552:	4619      	mov	r1, r3
 8002554:	20e1      	movs	r0, #225	; 0xe1
 8002556:	f000 f910 	bl	800277a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800255a:	f000 f847 	bl	80025ec <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800255e:	2300      	movs	r3, #0
 8002560:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002562:	463b      	mov	r3, r7
 8002564:	2201      	movs	r2, #1
 8002566:	4619      	mov	r1, r3
 8002568:	2035      	movs	r0, #53	; 0x35
 800256a:	f000 f906 	bl	800277a <ST7789H2_WriteReg>

}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002584:	2300      	movs	r3, #0
 8002586:	723b      	strb	r3, [r7, #8]
 8002588:	e025      	b.n	80025d6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d120      	bne.n	80025d2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002590:	2300      	movs	r3, #0
 8002592:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002594:	2300      	movs	r3, #0
 8002596:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002598:	2301      	movs	r3, #1
 800259a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 800259c:	23f0      	movs	r3, #240	; 0xf0
 800259e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80025a0:	2300      	movs	r3, #0
 80025a2:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80025a4:	2300      	movs	r3, #0
 80025a6:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	2206      	movs	r2, #6
 80025ae:	4619      	mov	r1, r3
 80025b0:	2033      	movs	r0, #51	; 0x33
 80025b2:	f000 f8e2 	bl	800277a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80025b6:	2300      	movs	r3, #0
 80025b8:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80025ba:	2350      	movs	r3, #80	; 0x50
 80025bc:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80025be:	f107 0308 	add.w	r3, r7, #8
 80025c2:	2202      	movs	r2, #2
 80025c4:	4619      	mov	r1, r3
 80025c6:	2037      	movs	r0, #55	; 0x37
 80025c8:	f000 f8d7 	bl	800277a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	723b      	strb	r3, [r7, #8]
 80025d0:	e001      	b.n	80025d6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80025d2:	2360      	movs	r3, #96	; 0x60
 80025d4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	2201      	movs	r2, #1
 80025dc:	4619      	mov	r1, r3
 80025de:	2036      	movs	r0, #54	; 0x36
 80025e0:	f000 f8cb 	bl	800277a <ST7789H2_WriteReg>
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80025f0:	2200      	movs	r2, #0
 80025f2:	2100      	movs	r1, #0
 80025f4:	2029      	movs	r0, #41	; 0x29
 80025f6:	f000 f8c0 	bl	800277a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	2011      	movs	r0, #17
 8002600:	f000 f8bb 	bl	800277a <ST7789H2_WriteReg>
}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}

08002608 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800260e:	23fe      	movs	r3, #254	; 0xfe
 8002610:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2201      	movs	r2, #1
 8002616:	4619      	mov	r1, r3
 8002618:	20bd      	movs	r0, #189	; 0xbd
 800261a:	f000 f8ae 	bl	800277a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	2010      	movs	r0, #16
 8002624:	f000 f8a9 	bl	800277a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002628:	200a      	movs	r0, #10
 800262a:	f000 fc52 	bl	8002ed2 <LCD_IO_Delay>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800263a:	23f0      	movs	r3, #240	; 0xf0
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800264a:	23f0      	movs	r3, #240	; 0xf0
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800265a:	f000 fc13 	bl	8002e84 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800265e:	2004      	movs	r0, #4
 8002660:	f000 f8ad 	bl	80027be <ST7789H2_ReadReg>
 8002664:	4603      	mov	r3, r0
 8002666:	b29b      	uxth	r3, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}

0800266c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	460a      	mov	r2, r1
 8002676:	80fb      	strh	r3, [r7, #6]
 8002678:	4613      	mov	r3, r2
 800267a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 800267c:	2300      	movs	r3, #0
 800267e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002686:	2300      	movs	r3, #0
 8002688:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	3b11      	subs	r3, #17
 8002690:	b2db      	uxtb	r3, r3
 8002692:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	2204      	movs	r2, #4
 800269a:	4619      	mov	r1, r3
 800269c:	202a      	movs	r0, #42	; 0x2a
 800269e:	f000 f86c 	bl	800277a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80026a2:	2300      	movs	r3, #0
 80026a4:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80026a6:	88bb      	ldrh	r3, [r7, #4]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80026ac:	2300      	movs	r3, #0
 80026ae:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80026b0:	88bb      	ldrh	r3, [r7, #4]
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	3b11      	subs	r3, #17
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	2204      	movs	r2, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	202b      	movs	r0, #43	; 0x2b
 80026c4:	f000 f859 	bl	800277a <ST7789H2_WriteReg>
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	80fb      	strh	r3, [r7, #6]
 80026da:	460b      	mov	r3, r1
 80026dc:	80bb      	strh	r3, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80026e2:	88ba      	ldrh	r2, [r7, #4]
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ffbf 	bl	800266c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	202c      	movs	r0, #44	; 0x2c
 80026f4:	f000 f841 	bl	800277a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 fbc8 	bl	8002e90 <LCD_IO_WriteData>
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	80fb      	strh	r3, [r7, #6]
 8002714:	4613      	mov	r3, r2
 8002716:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002718:	88ba      	ldrh	r2, [r7, #4]
 800271a:	88fb      	ldrh	r3, [r7, #6]
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ffa4 	bl	800266c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002724:	88ba      	ldrh	r2, [r7, #4]
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	4611      	mov	r1, r2
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f9bd 	bl	8002aaa <ST7789H2_ReadPixel_rgb888>
 8002730:	4603      	mov	r3, r0
 8002732:	461a      	mov	r2, r3
 8002734:	733a      	strb	r2, [r7, #12]
 8002736:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800273a:	737a      	strb	r2, [r7, #13]
 800273c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002740:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002742:	7b3b      	ldrb	r3, [r7, #12]
 8002744:	08db      	lsrs	r3, r3, #3
 8002746:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002748:	7b7b      	ldrb	r3, [r7, #13]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800274e:	7bbb      	ldrb	r3, [r7, #14]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	b29b      	uxth	r3, r3
 8002758:	02db      	lsls	r3, r3, #11
 800275a:	b29a      	uxth	r2, r3
 800275c:	7dbb      	ldrb	r3, [r7, #22]
 800275e:	b29b      	uxth	r3, r3
 8002760:	015b      	lsls	r3, r3, #5
 8002762:	b29b      	uxth	r3, r3
 8002764:	4413      	add	r3, r2
 8002766:	b29a      	uxth	r2, r3
 8002768:	7d7b      	ldrb	r3, [r7, #21]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4413      	add	r3, r2
 800276e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002770:	8a7b      	ldrh	r3, [r7, #18]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3718      	adds	r7, #24
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	6039      	str	r1, [r7, #0]
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	4613      	mov	r3, r2
 8002788:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fb8c 	bl	8002eaa <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002792:	2300      	movs	r3, #0
 8002794:	73fb      	strb	r3, [r7, #15]
 8002796:	e00a      	b.n	80027ae <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4413      	add	r3, r2
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fb74 	bl	8002e90 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	3301      	adds	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	79bb      	ldrb	r3, [r7, #6]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d3f0      	bcc.n	8002798 <ST7789H2_WriteReg+0x1e>
  }
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fb6d 	bl	8002eaa <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80027d0:	f000 fb78 	bl	8002ec4 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80027d4:	f000 fb76 	bl	8002ec4 <LCD_IO_ReadData>
 80027d8:	4603      	mov	r3, r0
 80027da:	b2db      	uxtb	r3, r3
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80027e4:	b490      	push	{r4, r7}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4604      	mov	r4, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	4611      	mov	r1, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	80fb      	strh	r3, [r7, #6]
 80027f6:	4603      	mov	r3, r0
 80027f8:	80bb      	strh	r3, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	807b      	strh	r3, [r7, #2]
 80027fe:	4613      	mov	r3, r2
 8002800:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2bef      	cmp	r3, #239	; 0xef
 8002806:	d803      	bhi.n	8002810 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002808:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <ST7789H2_SetDisplayWindow+0x94>)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	8013      	strh	r3, [r2, #0]
 800280e:	e002      	b.n	8002816 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <ST7789H2_SetDisplayWindow+0x94>)
 8002812:	2200      	movs	r2, #0
 8002814:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002816:	88bb      	ldrh	r3, [r7, #4]
 8002818:	2bef      	cmp	r3, #239	; 0xef
 800281a:	d803      	bhi.n	8002824 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <ST7789H2_SetDisplayWindow+0x98>)
 800281e:	88bb      	ldrh	r3, [r7, #4]
 8002820:	8013      	strh	r3, [r2, #0]
 8002822:	e002      	b.n	800282a <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002824:	4b15      	ldr	r3, [pc, #84]	; (800287c <ST7789H2_SetDisplayWindow+0x98>)
 8002826:	2200      	movs	r2, #0
 8002828:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	4413      	add	r3, r2
 8002830:	2bf0      	cmp	r3, #240	; 0xf0
 8002832:	dc08      	bgt.n	8002846 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002834:	887a      	ldrh	r2, [r7, #2]
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	4413      	add	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <ST7789H2_SetDisplayWindow+0x9c>)
 8002842:	801a      	strh	r2, [r3, #0]
 8002844:	e002      	b.n	800284c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002846:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <ST7789H2_SetDisplayWindow+0x9c>)
 8002848:	22ef      	movs	r2, #239	; 0xef
 800284a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800284c:	883a      	ldrh	r2, [r7, #0]
 800284e:	88bb      	ldrh	r3, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	2bf0      	cmp	r3, #240	; 0xf0
 8002854:	dc08      	bgt.n	8002868 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002856:	883a      	ldrh	r2, [r7, #0]
 8002858:	88bb      	ldrh	r3, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <ST7789H2_SetDisplayWindow+0xa0>)
 8002864:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002866:	e002      	b.n	800286e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <ST7789H2_SetDisplayWindow+0xa0>)
 800286a:	22ef      	movs	r2, #239	; 0xef
 800286c:	801a      	strh	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bc90      	pop	{r4, r7}
 8002876:	4770      	bx	lr
 8002878:	20000118 	.word	0x20000118
 800287c:	2000011a 	.word	0x2000011a
 8002880:	2000003c 	.word	0x2000003c
 8002884:	2000003e 	.word	0x2000003e

08002888 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	4604      	mov	r4, r0
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4623      	mov	r3, r4
 8002898:	80fb      	strh	r3, [r7, #6]
 800289a:	4603      	mov	r3, r0
 800289c:	80bb      	strh	r3, [r7, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	807b      	strh	r3, [r7, #2]
 80028a2:	4613      	mov	r3, r2
 80028a4:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	88bb      	ldrh	r3, [r7, #4]
 80028ae:	4611      	mov	r1, r2
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fedb 	bl	800266c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80028b6:	2200      	movs	r2, #0
 80028b8:	2100      	movs	r1, #0
 80028ba:	202c      	movs	r0, #44	; 0x2c
 80028bc:	f7ff ff5d 	bl	800277a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	81fb      	strh	r3, [r7, #14]
 80028c4:	e006      	b.n	80028d4 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 80028c6:	88fb      	ldrh	r3, [r7, #6]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fae1 	bl	8002e90 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80028ce:	89fb      	ldrh	r3, [r7, #14]
 80028d0:	3301      	adds	r3, #1
 80028d2:	81fb      	strh	r3, [r7, #14]
 80028d4:	89fa      	ldrh	r2, [r7, #14]
 80028d6:	883b      	ldrh	r3, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3f4      	bcc.n	80028c6 <ST7789H2_DrawHLine+0x3e>
  }  
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd90      	pop	{r4, r7, pc}

080028e4 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4604      	mov	r4, r0
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4623      	mov	r3, r4
 80028f4:	80fb      	strh	r3, [r7, #6]
 80028f6:	4603      	mov	r3, r0
 80028f8:	80bb      	strh	r3, [r7, #4]
 80028fa:	460b      	mov	r3, r1
 80028fc:	807b      	strh	r3, [r7, #2]
 80028fe:	4613      	mov	r3, r2
 8002900:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	88bb      	ldrh	r3, [r7, #4]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fead 	bl	800266c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	202c      	movs	r0, #44	; 0x2c
 8002918:	f7ff ff2f 	bl	800277a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800291c:	2300      	movs	r3, #0
 800291e:	81fb      	strh	r3, [r7, #14]
 8002920:	e00b      	b.n	800293a <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002922:	887a      	ldrh	r2, [r7, #2]
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	4413      	add	r3, r2
 8002928:	b299      	uxth	r1, r3
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	88bb      	ldrh	r3, [r7, #4]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff fece 	bl	80026d0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002934:	89fb      	ldrh	r3, [r7, #14]
 8002936:	3301      	adds	r3, #1
 8002938:	81fb      	strh	r3, [r7, #14]
 800293a:	89fa      	ldrh	r2, [r7, #14]
 800293c:	883b      	ldrh	r3, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3ef      	bcc.n	8002922 <ST7789H2_DrawVLine+0x3e>
  }
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bd90      	pop	{r4, r7, pc}
	...

0800294c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	603a      	str	r2, [r7, #0]
 8002956:	80fb      	strh	r3, [r7, #6]
 8002958:	460b      	mov	r3, r1
 800295a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002968:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <ST7789H2_DrawBitmap+0xdc>)
 800296a:	881a      	ldrh	r2, [r3, #0]
 800296c:	4b2f      	ldr	r3, [pc, #188]	; (8002a2c <ST7789H2_DrawBitmap+0xe0>)
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	3301      	adds	r3, #1
 8002976:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002978:	4b2d      	ldr	r3, [pc, #180]	; (8002a30 <ST7789H2_DrawBitmap+0xe4>)
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <ST7789H2_DrawBitmap+0xe8>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	b29b      	uxth	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3302      	adds	r3, #2
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	3304      	adds	r3, #4
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	041b      	lsls	r3, r3, #16
 800299c:	461a      	mov	r2, r3
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	330a      	adds	r3, #10
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	461a      	mov	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	4413      	add	r3, r2
 80029d0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80029d2:	88ba      	ldrh	r2, [r7, #4]
 80029d4:	89bb      	ldrh	r3, [r7, #12]
 80029d6:	4413      	add	r3, r2
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e01d      	b.n	8002a18 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff fe3f 	bl	800266c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b299      	uxth	r1, r3
 80029f6:	89fb      	ldrh	r3, [r7, #14]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	89fa      	ldrh	r2, [r7, #14]
 8002a06:	88f8      	ldrh	r0, [r7, #6]
 8002a08:	f000 f898 	bl	8002b3c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	88bb      	ldrh	r3, [r7, #4]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8dd      	bhi.n	80029dc <ST7789H2_DrawBitmap+0x90>
  }
}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000003c 	.word	0x2000003c
 8002a2c:	20000118 	.word	0x20000118
 8002a30:	2000003e 	.word	0x2000003e
 8002a34:	2000011a 	.word	0x2000011a

08002a38 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4604      	mov	r4, r0
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4623      	mov	r3, r4
 8002a48:	80fb      	strh	r3, [r7, #6]
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80bb      	strh	r3, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]
 8002a52:	4613      	mov	r3, r2
 8002a54:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002a5a:	88bb      	ldrh	r3, [r7, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e019      	b.n	8002a94 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	88fb      	ldrh	r3, [r7, #6]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fdff 	bl	800266c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	b299      	uxth	r1, r3
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	fb02 f303 	mul.w	r3, r2, r3
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	6a3a      	ldr	r2, [r7, #32]
 8002a7e:	4413      	add	r3, r2
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	88f8      	ldrh	r0, [r7, #6]
 8002a84:	f000 f85a 	bl	8002b3c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3301      	adds	r3, #1
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	88ba      	ldrh	r2, [r7, #4]
 8002a96:	883b      	ldrh	r3, [r7, #0]
 8002a98:	4413      	add	r3, r2
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d3de      	bcc.n	8002a60 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd90      	pop	{r4, r7, pc}

08002aaa <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	460a      	mov	r2, r1
 8002ab4:	80fb      	strh	r3, [r7, #6]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002aba:	88ba      	ldrh	r2, [r7, #4]
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fdd3 	bl	800266c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	202e      	movs	r0, #46	; 0x2e
 8002acc:	f7ff fe55 	bl	800277a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002ad0:	f000 f9f8 	bl	8002ec4 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002ad4:	f000 f9f6 	bl	8002ec4 <LCD_IO_ReadData>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002adc:	f000 f9f2 	bl	8002ec4 <LCD_IO_ReadData>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002ae4:	8afb      	ldrh	r3, [r7, #22]
 8002ae6:	121b      	asrs	r3, r3, #8
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002af2:	8afb      	ldrh	r3, [r7, #22]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002afe:	8abb      	ldrh	r3, [r7, #20]
 8002b00:	121b      	asrs	r3, r3, #8
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f023 0303 	bic.w	r3, r3, #3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	f107 020c 	add.w	r2, r7, #12
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	4611      	mov	r1, r2
 8002b18:	8019      	strh	r1, [r3, #0]
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	0c12      	lsrs	r2, r2, #16
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	7c3a      	ldrb	r2, [r7, #16]
 8002b24:	f362 0307 	bfi	r3, r2, #0, #8
 8002b28:	7c7a      	ldrb	r2, [r7, #17]
 8002b2a:	f362 230f 	bfi	r3, r2, #8, #8
 8002b2e:	7cba      	ldrb	r2, [r7, #18]
 8002b30:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	4603      	mov	r3, r0
 8002b46:	81fb      	strh	r3, [r7, #14]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	81bb      	strh	r3, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	202c      	movs	r0, #44	; 0x2c
 8002b5e:	f7ff fe0c 	bl	800277a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002b62:	89fb      	ldrh	r3, [r7, #14]
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	e02a      	b.n	8002bbe <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002b68:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <ST7789H2_DrawRGBHLine+0x98>)
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d321      	bcc.n	8002bb8 <ST7789H2_DrawRGBHLine+0x7c>
 8002b74:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <ST7789H2_DrawRGBHLine+0x9c>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	89ba      	ldrh	r2, [r7, #12]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d31c      	bcc.n	8002bb8 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002b7e:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <ST7789H2_DrawRGBHLine+0xa0>)
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d816      	bhi.n	8002bb8 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <ST7789H2_DrawRGBHLine+0xa4>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	89ba      	ldrh	r2, [r7, #12]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d811      	bhi.n	8002bb8 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002b94:	897a      	ldrh	r2, [r7, #10]
 8002b96:	89fb      	ldrh	r3, [r7, #14]
 8002b98:	4413      	add	r3, r2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d007      	beq.n	8002bb2 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4413      	add	r3, r2
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 f96f 	bl	8002e90 <LCD_IO_WriteData>
      }      
      i++;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	897a      	ldrh	r2, [r7, #10]
 8002bc0:	89fb      	ldrh	r3, [r7, #14]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d3cd      	bcc.n	8002b68 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000118 	.word	0x20000118
 8002bd8:	2000011a 	.word	0x2000011a
 8002bdc:	2000003c 	.word	0x2000003c
 8002be0:	2000003e 	.word	0x2000003e

08002be4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	460a      	mov	r2, r1
 8002bee:	71fb      	strb	r3, [r7, #7]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <BSP_PB_Init+0xa0>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	4a21      	ldr	r2, [pc, #132]	; (8002c84 <BSP_PB_Init+0xa0>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6313      	str	r3, [r2, #48]	; 0x30
 8002c04:	4b1f      	ldr	r3, [pc, #124]	; (8002c84 <BSP_PB_Init+0xa0>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002c10:	79bb      	ldrb	r3, [r7, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d111      	bne.n	8002c3a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002c16:	2301      	movs	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c22:	2302      	movs	r3, #2
 8002c24:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	4a17      	ldr	r2, [pc, #92]	; (8002c88 <BSP_PB_Init+0xa4>)
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	f107 020c 	add.w	r2, r7, #12
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 ff63 	bl	8004b00 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002c3a:	79bb      	ldrb	r3, [r7, #6]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d11d      	bne.n	8002c7c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002c40:	2301      	movs	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002c44:	2302      	movs	r3, #2
 8002c46:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <BSP_PB_Init+0xa8>)
 8002c4e:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	4a0d      	ldr	r2, [pc, #52]	; (8002c88 <BSP_PB_Init+0xa4>)
 8002c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c58:	f107 020c 	add.w	r2, r7, #12
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 ff4e 	bl	8004b00 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002c64:	2306      	movs	r3, #6
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f001 f891 	bl	8003d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002c72:	2306      	movs	r3, #6
 8002c74:	b25b      	sxtb	r3, r3
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 f8a8 	bl	8003dcc <HAL_NVIC_EnableIRQ>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3720      	adds	r7, #32
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	20000040 	.word	0x20000040
 8002c8c:	10110000 	.word	0x10110000

08002c90 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002c96:	2300      	movs	r3, #0
 8002c98:	613b      	str	r3, [r7, #16]
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	4a39      	ldr	r2, [pc, #228]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	4a32      	ldr	r2, [pc, #200]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc2:	4b30      	ldr	r3, [pc, #192]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a2b      	ldr	r2, [pc, #172]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b29      	ldr	r3, [pc, #164]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002cf4:	f043 0320 	orr.w	r3, r3, #32
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	607b      	str	r3, [r7, #4]
 8002d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4b1e      	ldr	r3, [pc, #120]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <FMC_BANK3_MspInit+0xf4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d22:	2302      	movs	r3, #2
 8002d24:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002d2e:	230c      	movs	r3, #12
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002d32:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002d36:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4812      	ldr	r0, [pc, #72]	; (8002d88 <FMC_BANK3_MspInit+0xf8>)
 8002d40:	f001 fede 	bl	8004b00 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002d44:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002d48:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480e      	ldr	r0, [pc, #56]	; (8002d8c <FMC_BANK3_MspInit+0xfc>)
 8002d52:	f001 fed5 	bl	8004b00 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d56:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002d5a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	480b      	ldr	r0, [pc, #44]	; (8002d90 <FMC_BANK3_MspInit+0x100>)
 8002d64:	f001 fecc 	bl	8004b00 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d68:	f240 433f 	movw	r3, #1087	; 0x43f
 8002d6c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	4807      	ldr	r0, [pc, #28]	; (8002d94 <FMC_BANK3_MspInit+0x104>)
 8002d76:	f001 fec3 	bl	8004b00 <HAL_GPIO_Init>
}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40021400 	.word	0x40021400
 8002d94:	40021800 	.word	0x40021800

08002d98 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b09c      	sub	sp, #112	; 0x70
 8002d9c:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002d9e:	f7ff ff77 	bl	8002c90 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002da2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002da6:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <FMC_BANK3_Init+0x8c>)
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002dac:	2303      	movs	r3, #3
 8002dae:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002db0:	2301      	movs	r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002db4:	2304      	movs	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002db8:	2301      	movs	r3, #1
 8002dba:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002dc8:	2304      	movs	r3, #4
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002de0:	2300      	movs	r3, #0
 8002de2:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002de4:	2300      	movs	r3, #0
 8002de6:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002de8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dec:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002df2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002df6:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002e00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e04:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002e0e:	1d3a      	adds	r2, r7, #4
 8002e10:	1d39      	adds	r1, r7, #4
 8002e12:	f107 0320 	add.w	r3, r7, #32
 8002e16:	4618      	mov	r0, r3
 8002e18:	f006 f934 	bl	8009084 <HAL_SRAM_Init>
}
 8002e1c:	bf00      	nop
 8002e1e:	3770      	adds	r7, #112	; 0x70
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	a0000104 	.word	0xa0000104

08002e28 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002e32:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002e3a:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002e3e:	bf00      	nop
 8002e40:	370c      	adds	r7, #12
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002e54:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002e58:	79fa      	ldrb	r2, [r7, #7]
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	801a      	strh	r2, [r3, #0]
 8002e5e:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002e72:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002e76:	885b      	ldrh	r3, [r3, #2]
 8002e78:	b29b      	uxth	r3, r3
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002e88:	f7ff ff86 	bl	8002d98 <FMC_BANK3_Init>
}
 8002e8c:	bf00      	nop
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff ffc3 	bl	8002e28 <FMC_BANK3_WriteData>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ffc7 	bl	8002e4a <FMC_BANK3_WriteReg>
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002ec8:	f7ff ffd1 	bl	8002e6e <FMC_BANK3_ReadData>
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 fc0e 	bl	80036fc <HAL_Delay>
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002ef0:	f000 f80e 	bl	8002f10 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002f04:	f000 f80b 	bl	8002f1e <BSP_AUDIO_OUT_Error_CallBack>
}
 8002f08:	bf00      	nop
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
}
 8002f22:	bf00      	nop
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002f34:	f000 f804 	bl	8002f40 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002f38:	bf00      	nop
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002f52:	2001      	movs	r0, #1
 8002f54:	f000 f804 	bl	8002f60 <BSP_LCD_InitEx>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <BSP_LCD_InitEx+0xc0>)
 8002f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f72:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002f74:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <BSP_LCD_InitEx+0xc0>)
 8002f76:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <BSP_LCD_InitEx+0xc4>)
 8002f78:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002f7a:	4b29      	ldr	r3, [pc, #164]	; (8003020 <BSP_LCD_InitEx+0xc0>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002f80:	f000 f930 	bl	80031e4 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002f84:	2201      	movs	r2, #1
 8002f86:	2120      	movs	r1, #32
 8002f88:	4827      	ldr	r0, [pc, #156]	; (8003028 <BSP_LCD_InitEx+0xc8>)
 8002f8a:	f001 ff4b 	bl	8004e24 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f94:	4825      	ldr	r0, [pc, #148]	; (800302c <BSP_LCD_InitEx+0xcc>)
 8002f96:	f001 ff45 	bl	8004e24 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002f9a:	2005      	movs	r0, #5
 8002f9c:	f000 fbae 	bl	80036fc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fa6:	4821      	ldr	r0, [pc, #132]	; (800302c <BSP_LCD_InitEx+0xcc>)
 8002fa8:	f001 ff3c 	bl	8004e24 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002fac:	200a      	movs	r0, #10
 8002fae:	f000 fba5 	bl	80036fc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fb8:	481c      	ldr	r0, [pc, #112]	; (800302c <BSP_LCD_InitEx+0xcc>)
 8002fba:	f001 ff33 	bl	8004e24 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002fbe:	2014      	movs	r0, #20
 8002fc0:	f000 fb9c 	bl	80036fc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fca:	4818      	ldr	r0, [pc, #96]	; (800302c <BSP_LCD_InitEx+0xcc>)
 8002fcc:	f001 ff2a 	bl	8004e24 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002fd0:	200a      	movs	r0, #10
 8002fd2:	f000 fb93 	bl	80036fc <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <BSP_LCD_InitEx+0xd0>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b85      	cmp	r3, #133	; 0x85
 8002fe0:	d118      	bne.n	8003014 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <BSP_LCD_InitEx+0xd4>)
 8002fe4:	4a12      	ldr	r2, [pc, #72]	; (8003030 <BSP_LCD_InitEx+0xd0>)
 8002fe6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <BSP_LCD_InitEx+0xd4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7ff fabd 	bl	8002576 <ST7789H2_SetOrientation>
 8002ffc:	e005      	b.n	800300a <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d102      	bne.n	800300a <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8003004:	2002      	movs	r0, #2
 8003006:	f7ff fab6 	bl	8002576 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800300a:	480b      	ldr	r0, [pc, #44]	; (8003038 <BSP_LCD_InitEx+0xd8>)
 800300c:	f000 f84e 	bl	80030ac <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20005298 	.word	0x20005298
 8003024:	20000044 	.word	0x20000044
 8003028:	40021000 	.word	0x40021000
 800302c:	40020400 	.word	0x40020400
 8003030:	20000004 	.word	0x20000004
 8003034:	2000011c 	.word	0x2000011c
 8003038:	20000054 	.word	0x20000054

0800303c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <BSP_LCD_GetXSize+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	4798      	blx	r3
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	2000011c 	.word	0x2000011c

08003054 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <BSP_LCD_GetYSize+0x14>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	4798      	blx	r3
 8003060:	4603      	mov	r3, r0
}
 8003062:	4618      	mov	r0, r3
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	2000011c 	.word	0x2000011c

0800306c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8003076:	88fb      	ldrh	r3, [r7, #6]
 8003078:	4a03      	ldr	r2, [pc, #12]	; (8003088 <BSP_LCD_SetTextColor+0x1c>)
 800307a:	6013      	str	r3, [r2, #0]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	20005298 	.word	0x20005298

0800308c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	4a03      	ldr	r2, [pc, #12]	; (80030a8 <BSP_LCD_SetBackColor+0x1c>)
 800309a:	6053      	str	r3, [r2, #4]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	20005298 	.word	0x20005298

080030ac <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80030b4:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <BSP_LCD_SetFont+0x1c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6093      	str	r3, [r2, #8]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20005298 	.word	0x20005298

080030cc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80030de:	4b15      	ldr	r3, [pc, #84]	; (8003134 <BSP_LCD_Clear+0x68>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <BSP_LCD_Clear+0x68>)
 80030e8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80030ea:	f7ff ffb3 	bl	8003054 <BSP_LCD_GetYSize>
 80030ee:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00d      	b.n	8003112 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	b29c      	uxth	r4, r3
 80030fa:	f7ff ff9f 	bl	800303c <BSP_LCD_GetXSize>
 80030fe:	4603      	mov	r3, r0
 8003100:	b29b      	uxth	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	4621      	mov	r1, r4
 8003106:	2000      	movs	r0, #0
 8003108:	f000 f832 	bl	8003170 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	3301      	adds	r3, #1
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	429a      	cmp	r2, r3
 8003118:	d3ed      	bcc.n	80030f6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 800311a:	4a06      	ldr	r2, [pc, #24]	; (8003134 <BSP_LCD_Clear+0x68>)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <BSP_LCD_Clear+0x68>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ffa0 	bl	800306c <BSP_LCD_SetTextColor>
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	20005298 	.word	0x20005298

08003138 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
 8003142:	460b      	mov	r3, r1
 8003144:	80bb      	strh	r3, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <BSP_LCD_DrawPixel+0x34>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <BSP_LCD_DrawPixel+0x34>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	88b9      	ldrh	r1, [r7, #4]
 800315e:	88f8      	ldrh	r0, [r7, #6]
 8003160:	4798      	blx	r3
  }
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	2000011c 	.word	0x2000011c

08003170 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b085      	sub	sp, #20
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
 800317a:	460b      	mov	r3, r1
 800317c:	80bb      	strh	r3, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8003186:	4b15      	ldr	r3, [pc, #84]	; (80031dc <BSP_LCD_DrawHLine+0x6c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00a      	beq.n	80031a6 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <BSP_LCD_DrawHLine+0x6c>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6a1c      	ldr	r4, [r3, #32]
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <BSP_LCD_DrawHLine+0x70>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	b298      	uxth	r0, r3
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	88ba      	ldrh	r2, [r7, #4]
 80031a0:	88f9      	ldrh	r1, [r7, #6]
 80031a2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80031a4:	e015      	b.n	80031d2 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	e00e      	b.n	80031ca <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	4413      	add	r3, r2
 80031b4:	b298      	uxth	r0, r3
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <BSP_LCD_DrawHLine+0x70>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	88bb      	ldrh	r3, [r7, #4]
 80031be:	4619      	mov	r1, r3
 80031c0:	f7ff ffba 	bl	8003138 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d3ec      	bcc.n	80031ac <BSP_LCD_DrawHLine+0x3c>
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd90      	pop	{r4, r7, pc}
 80031da:	bf00      	nop
 80031dc:	2000011c 	.word	0x2000011c
 80031e0:	20005298 	.word	0x20005298

080031e4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	4b28      	ldr	r3, [pc, #160]	; (8003290 <BSP_LCD_MspInit+0xac>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a27      	ldr	r2, [pc, #156]	; (8003290 <BSP_LCD_MspInit+0xac>)
 80031f4:	f043 0302 	orr.w	r3, r3, #2
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b25      	ldr	r3, [pc, #148]	; (8003290 <BSP_LCD_MspInit+0xac>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <BSP_LCD_MspInit+0xac>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	4a20      	ldr	r2, [pc, #128]	; (8003290 <BSP_LCD_MspInit+0xac>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	6313      	str	r3, [r2, #48]	; 0x30
 8003216:	4b1e      	ldr	r3, [pc, #120]	; (8003290 <BSP_LCD_MspInit+0xac>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <BSP_LCD_MspInit+0xac>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a19      	ldr	r2, [pc, #100]	; (8003290 <BSP_LCD_MspInit+0xac>)
 800322c:	f043 0310 	orr.w	r3, r3, #16
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b17      	ldr	r3, [pc, #92]	; (8003290 <BSP_LCD_MspInit+0xac>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 800323e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003242:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003248:	2302      	movs	r3, #2
 800324a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800324c:	2301      	movs	r3, #1
 800324e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8003250:	f107 030c 	add.w	r3, r7, #12
 8003254:	4619      	mov	r1, r3
 8003256:	480f      	ldr	r0, [pc, #60]	; (8003294 <BSP_LCD_MspInit+0xb0>)
 8003258:	f001 fc52 	bl	8004b00 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 800325c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003260:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	4619      	mov	r1, r3
 800326c:	4809      	ldr	r0, [pc, #36]	; (8003294 <BSP_LCD_MspInit+0xb0>)
 800326e:	f001 fc47 	bl	8004b00 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003272:	2320      	movs	r3, #32
 8003274:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003276:	2301      	movs	r3, #1
 8003278:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800327a:	f107 030c 	add.w	r3, r7, #12
 800327e:	4619      	mov	r1, r3
 8003280:	4805      	ldr	r0, [pc, #20]	; (8003298 <BSP_LCD_MspInit+0xb4>)
 8003282:	f001 fc3d 	bl	8004b00 <HAL_GPIO_Init>
}
 8003286:	bf00      	nop
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40020400 	.word	0x40020400
 8003298:	40021000 	.word	0x40021000

0800329c <RC_READ_SBUS>:
 * Purpose: To read RC SBUS data
 * Language:  C
 */
#include <rc_input_sbus.h>

uint8_t RC_READ_SBUS(UART_HandleTypeDef *huart,SBUS *sbus) {
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]

	HAL_UART_Receive_DMA(huart, sbus->sbus_msg_bytes, 25);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	3325      	adds	r3, #37	; 0x25
 80032aa:	2219      	movs	r2, #25
 80032ac:	4619      	mov	r1, r3
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f006 fece 	bl	800a050 <HAL_UART_Receive_DMA>

	if (sbus->sbus_msg_bytes[0] != 0x0F) {
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032ba:	2b0f      	cmp	r3, #15
 80032bc:	d012      	beq.n	80032e4 <RC_READ_SBUS+0x48>
		//Error out of sync
		sbus->error_cnt++;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c4:	3301      	adds	r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		if (sbus->error_cnt > SBUS_ERROR_CNT) {
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032d4:	2b0a      	cmp	r3, #10
 80032d6:	d903      	bls.n	80032e0 <RC_READ_SBUS+0x44>
			sbus->error = 1;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		return 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e1c5      	b.n	8003670 <RC_READ_SBUS+0x3d4>
	}

	sbus->error = 0;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sbus->error_cnt = 0;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sbus->frame_lost = 0;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2020 	strb.w	r2, [r3, #32]
	sbus->failsafe = 0;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800330a:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[2] << 8)) & 0x07FF;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b21b      	sxth	r3, r3
 8003316:	4313      	orrs	r3, r2
 8003318:	b21b      	sxth	r3, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003320:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	801a      	strh	r2, [r3, #0]
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
				| ((uint16_t) sbus->sbus_msg_bytes[3] << 5)) & 0x07FF;
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	b21a      	sxth	r2, r3
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003338:	015b      	lsls	r3, r3, #5
 800333a:	b21b      	sxth	r3, r3
 800333c:	4313      	orrs	r3, r2
 800333e:	b21b      	sxth	r3, r3
 8003340:	b29b      	uxth	r3, r3
 8003342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003346:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	805a      	strh	r2, [r3, #2]
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
				| ((uint16_t) sbus->sbus_msg_bytes[4] << 2)
 8003352:	099b      	lsrs	r3, r3, #6
 8003354:	b2db      	uxtb	r3, r3
 8003356:	b21a      	sxth	r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	b21b      	sxth	r3, r3
 8003362:	4313      	orrs	r3, r2
 8003364:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[5] << 10)) & 0x07FF;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800336c:	029b      	lsls	r3, r3, #10
 800336e:	b21b      	sxth	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b21b      	sxth	r3, r3
 8003374:	b29b      	uxth	r3, r3
 8003376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	809a      	strh	r2, [r3, #4]
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
				| ((uint16_t) sbus->sbus_msg_bytes[6] << 7)) & 0x07FF;
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	b21a      	sxth	r2, r3
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003392:	01db      	lsls	r3, r3, #7
 8003394:	b21b      	sxth	r3, r3
 8003396:	4313      	orrs	r3, r2
 8003398:	b21b      	sxth	r3, r3
 800339a:	b29b      	uxth	r3, r3
 800339c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a0:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	80da      	strh	r2, [r3, #6]
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
				| ((uint16_t) sbus->sbus_msg_bytes[7] << 4)) & 0x07FF;
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	b21a      	sxth	r2, r3
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	4313      	orrs	r3, r2
 80033be:	b21b      	sxth	r3, r3
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033c6:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	811a      	strh	r2, [r3, #8]
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
				| ((uint16_t) sbus->sbus_msg_bytes[8] << 1)
 80033d2:	09db      	lsrs	r3, r3, #7
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	b21a      	sxth	r2, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	b21b      	sxth	r3, r3
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[9] << 9)) & 0x07FF;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80033ec:	025b      	lsls	r3, r3, #9
 80033ee:	b21b      	sxth	r3, r3
 80033f0:	4313      	orrs	r3, r2
 80033f2:	b21b      	sxth	r3, r3
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033fa:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	815a      	strh	r2, [r3, #10]
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				| ((uint16_t) sbus->sbus_msg_bytes[10] << 6)) & 0x07FF;
 8003406:	089b      	lsrs	r3, r3, #2
 8003408:	b2db      	uxtb	r3, r3
 800340a:	b21a      	sxth	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003412:	019b      	lsls	r3, r3, #6
 8003414:	b21b      	sxth	r3, r3
 8003416:	4313      	orrs	r3, r2
 8003418:	b21b      	sxth	r3, r3
 800341a:	b29b      	uxth	r3, r3
 800341c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003420:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	819a      	strh	r2, [r3, #12]
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
				| ((uint16_t) sbus->sbus_msg_bytes[11] << 3)) & 0x07FF;
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	b2db      	uxtb	r3, r3
 8003430:	b21a      	sxth	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	b21b      	sxth	r3, r3
 800343c:	4313      	orrs	r3, r2
 800343e:	b21b      	sxth	r3, r3
 8003440:	b29b      	uxth	r3, r3
 8003442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003446:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	81da      	strh	r2, [r3, #14]
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003452:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[13] << 8)) & 0x07FF;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	b21b      	sxth	r3, r3
 800345e:	4313      	orrs	r3, r2
 8003460:	b21b      	sxth	r3, r3
 8003462:	b29b      	uxth	r3, r3
 8003464:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003468:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	821a      	strh	r2, [r3, #16]
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
				| ((uint16_t) sbus->sbus_msg_bytes[14] << 5)) & 0x07FF;
 8003474:	08db      	lsrs	r3, r3, #3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	b21a      	sxth	r2, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003480:	015b      	lsls	r3, r3, #5
 8003482:	b21b      	sxth	r3, r3
 8003484:	4313      	orrs	r3, r2
 8003486:	b21b      	sxth	r3, r3
 8003488:	b29b      	uxth	r3, r3
 800348a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800348e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	825a      	strh	r2, [r3, #18]
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
				| ((uint16_t) sbus->sbus_msg_bytes[15] << 2)
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	b2db      	uxtb	r3, r3
 800349e:	b21a      	sxth	r2, r3
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	b21b      	sxth	r3, r3
 80034aa:	4313      	orrs	r3, r2
 80034ac:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[16] << 10)) & 0x07FF;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	4313      	orrs	r3, r2
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034c2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	829a      	strh	r2, [r3, #20]
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				| ((uint16_t) sbus->sbus_msg_bytes[17] << 7)) & 0x07FF;
 80034ce:	085b      	lsrs	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	b21a      	sxth	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80034da:	01db      	lsls	r3, r3, #7
 80034dc:	b21b      	sxth	r3, r3
 80034de:	4313      	orrs	r3, r2
 80034e0:	b21b      	sxth	r3, r3
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034e8:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	82da      	strh	r2, [r3, #22]
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
				| ((uint16_t) sbus->sbus_msg_bytes[18] << 4)) & 0x07FF;
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	b21a      	sxth	r2, r3
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	b21b      	sxth	r3, r3
 8003504:	4313      	orrs	r3, r2
 8003506:	b21b      	sxth	r3, r3
 8003508:	b29b      	uxth	r3, r3
 800350a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800350e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	831a      	strh	r2, [r3, #24]
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
				| ((uint16_t) sbus->sbus_msg_bytes[19] << 1)
 800351a:	09db      	lsrs	r3, r3, #7
 800351c:	b2db      	uxtb	r3, r3
 800351e:	b21a      	sxth	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	b21b      	sxth	r3, r3
 800352a:	4313      	orrs	r3, r2
 800352c:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[20] << 9)) & 0x07FF;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003534:	025b      	lsls	r3, r3, #9
 8003536:	b21b      	sxth	r3, r3
 8003538:	4313      	orrs	r3, r2
 800353a:	b21b      	sxth	r3, r3
 800353c:	b29b      	uxth	r3, r3
 800353e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003542:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	835a      	strh	r2, [r3, #26]
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				| ((uint16_t) sbus->sbus_msg_bytes[21] << 6)) & 0x07FF;
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	b2db      	uxtb	r3, r3
 8003552:	b21a      	sxth	r2, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800355a:	019b      	lsls	r3, r3, #6
 800355c:	b21b      	sxth	r3, r3
 800355e:	4313      	orrs	r3, r2
 8003560:	b21b      	sxth	r3, r3
 8003562:	b29b      	uxth	r3, r3
 8003564:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003568:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	839a      	strh	r2, [r3, #28]
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
				| ((uint16_t) sbus->sbus_msg_bytes[22] << 3)) & 0x07FF;
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	b2db      	uxtb	r3, r3
 8003578:	b21a      	sxth	r2, r3
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	b21b      	sxth	r3, r3
 8003584:	4313      	orrs	r3, r2
 8003586:	b21b      	sxth	r3, r3
 8003588:	b29b      	uxth	r3, r3
 800358a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800358e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	83da      	strh	r2, [r3, #30]
	//for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
	//	sbus->PWM_US_RC_CH[i] = MAP(sbus->PWM_US_RC_CH[i], SBUS_IN_MIN_PWM,
	//			SBUS_IN_MAX_PWM, SBUS_OUT_MIN_PWM, SBUS_OUT_MAX_PWM);
	//}

	if (sbus->sbus_msg_bytes[23] & (1 << 2)) {
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <RC_READ_SBUS+0x30e>
		sbus->frame_lost = 1;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2020 	strb.w	r2, [r3, #32]
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 3)) {
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <RC_READ_SBUS+0x324>
		sbus->failsafe = 1;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

#ifdef SBUS_ARM_DISARM_STICKS
	if (sbus->PWM_US_RC_CH[SBUS_THROTTLE_CHANNEL]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	f240 4206 	movw	r2, #1030	; 0x406
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d840      	bhi.n	800364e <RC_READ_SBUS+0x3b2>
			<= (1000 + SBUS_ARM_DISARM_TOLARANCE)) {
		if (sbus->PWM_US_RC_CH[SBUS_YAW_CHANNEL]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	88db      	ldrh	r3, [r3, #6]
 80035d0:	f240 4206 	movw	r2, #1030	; 0x406
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d811      	bhi.n	80035fc <RC_READ_SBUS+0x360>
				<= (1000 + SBUS_ARM_DISARM_TOLARANCE)) {
			sbus->disarm_cnt++;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035de:	3301      	adds	r3, #1
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			if (sbus->disarm_cnt >= SBUS_DISARM_CNT) {
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	d90c      	bls.n	800360c <RC_READ_SBUS+0x370>
				sbus->disarm = 1;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80035fa:	e007      	b.n	800360c <RC_READ_SBUS+0x370>
			}
		} else {
			sbus->disarm_cnt = 0;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
			sbus->disarm = 0;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		}
		if (sbus->PWM_US_RC_CH[SBUS_YAW_CHANNEL]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	88db      	ldrh	r3, [r3, #6]
 8003610:	f240 72b1 	movw	r2, #1969	; 0x7b1
 8003614:	4293      	cmp	r3, r2
 8003616:	d911      	bls.n	800363c <RC_READ_SBUS+0x3a0>
				>= (2000 - SBUS_ARM_DISARM_TOLARANCE)) {
			sbus->arm_cnt++;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800361e:	3301      	adds	r3, #1
 8003620:	b2da      	uxtb	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			if (sbus->arm_cnt >= SBUS_ARM_CNT) {
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800362e:	2b09      	cmp	r3, #9
 8003630:	d91d      	bls.n	800366e <RC_READ_SBUS+0x3d2>
				sbus->arm = 1;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800363a:	e018      	b.n	800366e <RC_READ_SBUS+0x3d2>
			}
		} else {
			sbus->arm_cnt = 0;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
			sbus->arm = 0;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800364c:	e00f      	b.n	800366e <RC_READ_SBUS+0x3d2>
		}

	} else {
		sbus->disarm_cnt = 0;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		sbus->arm_cnt = 0;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		sbus->arm = 0;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		sbus->disarm = 0;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	}
#endif

	return 1;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800367c:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_Init+0x40>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0d      	ldr	r2, [pc, #52]	; (80036b8 <HAL_Init+0x40>)
 8003682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_Init+0x40>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <HAL_Init+0x40>)
 800368e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <HAL_Init+0x40>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a07      	ldr	r2, [pc, #28]	; (80036b8 <HAL_Init+0x40>)
 800369a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036a0:	2003      	movs	r0, #3
 80036a2:	f000 fb6c 	bl	8003d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7fe fd66 	bl	8002178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036ac:	f7fd ff22 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023c00 	.word	0x40023c00

080036bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036c0:	4b06      	ldr	r3, [pc, #24]	; (80036dc <HAL_IncTick+0x20>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b06      	ldr	r3, [pc, #24]	; (80036e0 <HAL_IncTick+0x24>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4413      	add	r3, r2
 80036cc:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <HAL_IncTick+0x24>)
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	20000060 	.word	0x20000060
 80036e0:	200052a4 	.word	0x200052a4

080036e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return uwTick;
 80036e8:	4b03      	ldr	r3, [pc, #12]	; (80036f8 <HAL_GetTick+0x14>)
 80036ea:	681b      	ldr	r3, [r3, #0]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	200052a4 	.word	0x200052a4

080036fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003704:	f7ff ffee 	bl	80036e4 <HAL_GetTick>
 8003708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d005      	beq.n	8003722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003716:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_Delay+0x40>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4413      	add	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003722:	bf00      	nop
 8003724:	f7ff ffde 	bl	80036e4 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	429a      	cmp	r2, r3
 8003732:	d8f7      	bhi.n	8003724 <HAL_Delay+0x28>
  {
  }
}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	20000060 	.word	0x20000060

08003740 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e033      	b.n	80037be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fef0 	bl	8001544 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003786:	f023 0302 	bic.w	r3, r3, #2
 800378a:	f043 0202 	orr.w	r2, r3, #2
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f94a 	bl	8003a2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f023 0303 	bic.w	r3, r3, #3
 80037a6:	f043 0201 	orr.w	r2, r3, #1
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40
 80037ae:	e001      	b.n	80037b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_ConfigChannel+0x1c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e113      	b.n	8003a0c <HAL_ADC_ConfigChannel+0x244>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b09      	cmp	r3, #9
 80037f2:	d925      	bls.n	8003840 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68d9      	ldr	r1, [r3, #12]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	461a      	mov	r2, r3
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	3b1e      	subs	r3, #30
 800380a:	2207      	movs	r2, #7
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43da      	mvns	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	400a      	ands	r2, r1
 8003818:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68d9      	ldr	r1, [r3, #12]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	b29b      	uxth	r3, r3
 800382a:	4618      	mov	r0, r3
 800382c:	4603      	mov	r3, r0
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	4403      	add	r3, r0
 8003832:	3b1e      	subs	r3, #30
 8003834:	409a      	lsls	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	e022      	b.n	8003886 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6919      	ldr	r1, [r3, #16]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	b29b      	uxth	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	4613      	mov	r3, r2
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	4413      	add	r3, r2
 8003854:	2207      	movs	r2, #7
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	400a      	ands	r2, r1
 8003862:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6919      	ldr	r1, [r3, #16]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4618      	mov	r0, r3
 8003876:	4603      	mov	r3, r0
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4403      	add	r3, r0
 800387c:	409a      	lsls	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b06      	cmp	r3, #6
 800388c:	d824      	bhi.n	80038d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	3b05      	subs	r3, #5
 80038a0:	221f      	movs	r2, #31
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43da      	mvns	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	400a      	ands	r2, r1
 80038ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	4618      	mov	r0, r3
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	3b05      	subs	r3, #5
 80038ca:	fa00 f203 	lsl.w	r2, r0, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	635a      	str	r2, [r3, #52]	; 0x34
 80038d6:	e04c      	b.n	8003972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d824      	bhi.n	800392a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	3b23      	subs	r3, #35	; 0x23
 80038f2:	221f      	movs	r2, #31
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	43da      	mvns	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	400a      	ands	r2, r1
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	4618      	mov	r0, r3
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	3b23      	subs	r3, #35	; 0x23
 800391c:	fa00 f203 	lsl.w	r2, r0, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
 8003928:	e023      	b.n	8003972 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	3b41      	subs	r3, #65	; 0x41
 800393c:	221f      	movs	r2, #31
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	400a      	ands	r2, r1
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	4618      	mov	r0, r3
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	3b41      	subs	r3, #65	; 0x41
 8003966:	fa00 f203 	lsl.w	r2, r0, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003972:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <HAL_ADC_ConfigChannel+0x250>)
 8003974:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <HAL_ADC_ConfigChannel+0x254>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d10f      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x1d8>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b12      	cmp	r3, #18
 8003986:	d10b      	bne.n	80039a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <HAL_ADC_ConfigChannel+0x254>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d12b      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x23a>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a1c      	ldr	r2, [pc, #112]	; (8003a20 <HAL_ADC_ConfigChannel+0x258>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d003      	beq.n	80039bc <HAL_ADC_ConfigChannel+0x1f4>
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b11      	cmp	r3, #17
 80039ba:	d122      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_ADC_ConfigChannel+0x258>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d111      	bne.n	8003a02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039de:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <HAL_ADC_ConfigChannel+0x25c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a11      	ldr	r2, [pc, #68]	; (8003a28 <HAL_ADC_ConfigChannel+0x260>)
 80039e4:	fba2 2303 	umull	r2, r3, r2, r3
 80039e8:	0c9a      	lsrs	r2, r3, #18
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039f4:	e002      	b.n	80039fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f9      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40012300 	.word	0x40012300
 8003a1c:	40012000 	.word	0x40012000
 8003a20:	10000012 	.word	0x10000012
 8003a24:	20000000 	.word	0x20000000
 8003a28:	431bde83 	.word	0x431bde83

08003a2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a34:	4b79      	ldr	r3, [pc, #484]	; (8003c1c <ADC_Init+0x1f0>)
 8003a36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	021a      	lsls	r2, r3, #8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aa6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	4a58      	ldr	r2, [pc, #352]	; (8003c20 <ADC_Init+0x1f4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689a      	ldr	r2, [r3, #8]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6899      	ldr	r1, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003af4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6899      	ldr	r1, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	e00f      	b.n	8003b2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0202 	bic.w	r2, r2, #2
 8003b38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	7e1b      	ldrb	r3, [r3, #24]
 8003b44:	005a      	lsls	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01b      	beq.n	8003b90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	3b01      	subs	r3, #1
 8003b84:	035a      	lsls	r2, r3, #13
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e007      	b.n	8003ba0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	051a      	lsls	r2, r3, #20
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6899      	ldr	r1, [r3, #8]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003be2:	025a      	lsls	r2, r3, #9
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6899      	ldr	r1, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	029a      	lsls	r2, r3, #10
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	609a      	str	r2, [r3, #8]
}
 8003c10:	bf00      	nop
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	40012300 	.word	0x40012300
 8003c20:	0f000001 	.word	0x0f000001

08003c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c56:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <__NVIC_SetPriorityGrouping+0x44>)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	60d3      	str	r3, [r2, #12]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <__NVIC_GetPriorityGrouping+0x18>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 0307 	and.w	r3, r3, #7
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	db0b      	blt.n	8003cb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	4907      	ldr	r1, [pc, #28]	; (8003cc0 <__NVIC_EnableIRQ+0x38>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	e000e100 	.word	0xe000e100

08003cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	6039      	str	r1, [r7, #0]
 8003cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db0a      	blt.n	8003cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	490c      	ldr	r1, [pc, #48]	; (8003d10 <__NVIC_SetPriority+0x4c>)
 8003cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce2:	0112      	lsls	r2, r2, #4
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cec:	e00a      	b.n	8003d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	4908      	ldr	r1, [pc, #32]	; (8003d14 <__NVIC_SetPriority+0x50>)
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3b04      	subs	r3, #4
 8003cfc:	0112      	lsls	r2, r2, #4
 8003cfe:	b2d2      	uxtb	r2, r2
 8003d00:	440b      	add	r3, r1
 8003d02:	761a      	strb	r2, [r3, #24]
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000e100 	.word	0xe000e100
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	f1c3 0307 	rsb	r3, r3, #7
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	bf28      	it	cs
 8003d36:	2304      	movcs	r3, #4
 8003d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d902      	bls.n	8003d48 <NVIC_EncodePriority+0x30>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3b03      	subs	r3, #3
 8003d46:	e000      	b.n	8003d4a <NVIC_EncodePriority+0x32>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d60:	f04f 31ff 	mov.w	r1, #4294967295
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	43d9      	mvns	r1, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d70:	4313      	orrs	r3, r2
         );
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3724      	adds	r7, #36	; 0x24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff4c 	bl	8003c24 <__NVIC_SetPriorityGrouping>
}
 8003d8c:	bf00      	nop
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da6:	f7ff ff61 	bl	8003c6c <__NVIC_GetPriorityGrouping>
 8003daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	68b9      	ldr	r1, [r7, #8]
 8003db0:	6978      	ldr	r0, [r7, #20]
 8003db2:	f7ff ffb1 	bl	8003d18 <NVIC_EncodePriority>
 8003db6:	4602      	mov	r2, r0
 8003db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dbc:	4611      	mov	r1, r2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff ff80 	bl	8003cc4 <__NVIC_SetPriority>
}
 8003dc4:	bf00      	nop
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff54 	bl	8003c88 <__NVIC_EnableIRQ>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e014      	b.n	8003e24 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	791b      	ldrb	r3, [r3, #4]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd fc16 	bl	800163c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e42:	d118      	bne.n	8003e76 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2204      	movs	r2, #4
 8003e48:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e6e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f825 	bl	8003ec0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e84:	d118      	bne.n	8003eb8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2204      	movs	r2, #4
 8003e8a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f85b 	bl	8003f6e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	795b      	ldrb	r3, [r3, #5]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <HAL_DAC_ConfigChannel+0x20>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	e036      	b.n	8003f62 <HAL_DAC_ConfigChannel+0x8e>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2202      	movs	r2, #2
 8003efe:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003f08:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4013      	ands	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	22c0      	movs	r2, #192	; 0xc0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	43da      	mvns	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	400a      	ands	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0cf      	b.n	8004136 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a69      	ldr	r2, [pc, #420]	; (8004140 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_DFSDM_ChannelInit+0x3a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a67      	ldr	r2, [pc, #412]	; (8004144 <HAL_DFSDM_ChannelInit+0x1c0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_DFSDM_ChannelInit+0x3a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a66      	ldr	r2, [pc, #408]	; (8004148 <HAL_DFSDM_ChannelInit+0x1c4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_DFSDM_ChannelInit+0x3a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a64      	ldr	r2, [pc, #400]	; (800414c <HAL_DFSDM_ChannelInit+0x1c8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d106      	bne.n	8003fcc <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003fbe:	4b64      	ldr	r3, [pc, #400]	; (8004150 <HAL_DFSDM_ChannelInit+0x1cc>)
 8003fc0:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8003fc2:	4b64      	ldr	r3, [pc, #400]	; (8004154 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003fc4:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003fc6:	4b5e      	ldr	r3, [pc, #376]	; (8004140 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e005      	b.n	8003fd8 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003fcc:	4b62      	ldr	r3, [pc, #392]	; (8004158 <HAL_DFSDM_ChannelInit+0x1d4>)
 8003fce:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8003fd0:	4b62      	ldr	r3, [pc, #392]	; (800415c <HAL_DFSDM_ChannelInit+0x1d8>)
 8003fd2:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003fd4:	4b62      	ldr	r3, [pc, #392]	; (8004160 <HAL_DFSDM_ChannelInit+0x1dc>)
 8003fd6:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 f8c1 	bl	8004164 <DFSDM_GetChannelFromInstance>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4413      	add	r3, r2
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0a0      	b.n	8004136 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7fd fb6d 	bl	80016d4 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	1c5a      	adds	r2, r3, #1
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d125      	bne.n	8004058 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	431a      	orrs	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	791b      	ldrb	r3, [r3, #4]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d108      	bne.n	800404c <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	3b01      	subs	r3, #1
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004066:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004076:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800407c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 020f 	bic.w	r2, r2, #15
 8004094:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6819      	ldr	r1, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 80040a4:	431a      	orrs	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80040bc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6899      	ldr	r1, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f002 0207 	and.w	r2, r2, #7
 80040e8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004114:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f81e 	bl	8004164 <DFSDM_GetChannelFromInstance>
 8004128:	4603      	mov	r3, r0
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40016000 	.word	0x40016000
 8004144:	40016020 	.word	0x40016020
 8004148:	40016040 	.word	0x40016040
 800414c:	40016060 	.word	0x40016060
 8004150:	20000120 	.word	0x20000120
 8004154:	20000124 	.word	0x20000124
 8004158:	20000134 	.word	0x20000134
 800415c:	20000138 	.word	0x20000138
 8004160:	40016400 	.word	0x40016400

08004164 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a24      	ldr	r2, [pc, #144]	; (8004200 <DFSDM_GetChannelFromInstance+0x9c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <DFSDM_GetChannelFromInstance+0x18>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a23      	ldr	r2, [pc, #140]	; (8004204 <DFSDM_GetChannelFromInstance+0xa0>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d102      	bne.n	8004182 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e037      	b.n	80041f2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <DFSDM_GetChannelFromInstance+0xa4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <DFSDM_GetChannelFromInstance+0x2e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1f      	ldr	r2, [pc, #124]	; (800420c <DFSDM_GetChannelFromInstance+0xa8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d102      	bne.n	8004198 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8004192:	2301      	movs	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e02c      	b.n	80041f2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <DFSDM_GetChannelFromInstance+0xac>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <DFSDM_GetChannelFromInstance+0x44>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <DFSDM_GetChannelFromInstance+0xb0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d102      	bne.n	80041ae <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 80041a8:	2302      	movs	r3, #2
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e021      	b.n	80041f2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a19      	ldr	r2, [pc, #100]	; (8004218 <DFSDM_GetChannelFromInstance+0xb4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d003      	beq.n	80041be <DFSDM_GetChannelFromInstance+0x5a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <DFSDM_GetChannelFromInstance+0xb8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d102      	bne.n	80041c4 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 80041be:	2303      	movs	r3, #3
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	e016      	b.n	80041f2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <DFSDM_GetChannelFromInstance+0xbc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d102      	bne.n	80041d2 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 80041cc:	2304      	movs	r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e00f      	b.n	80041f2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a13      	ldr	r2, [pc, #76]	; (8004224 <DFSDM_GetChannelFromInstance+0xc0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d102      	bne.n	80041e0 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 80041da:	2305      	movs	r3, #5
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	e008      	b.n	80041f2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a11      	ldr	r2, [pc, #68]	; (8004228 <DFSDM_GetChannelFromInstance+0xc4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d102      	bne.n	80041ee <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80041e8:	2306      	movs	r3, #6
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e001      	b.n	80041f2 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80041ee:	2307      	movs	r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80041f2:	68fb      	ldr	r3, [r7, #12]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40016000 	.word	0x40016000
 8004204:	40016400 	.word	0x40016400
 8004208:	40016020 	.word	0x40016020
 800420c:	40016420 	.word	0x40016420
 8004210:	40016040 	.word	0x40016040
 8004214:	40016440 	.word	0x40016440
 8004218:	40016060 	.word	0x40016060
 800421c:	40016460 	.word	0x40016460
 8004220:	40016480 	.word	0x40016480
 8004224:	400164a0 	.word	0x400164a0
 8004228:	400164c0 	.word	0x400164c0

0800422c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004238:	f7ff fa54 	bl	80036e4 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e099      	b.n	800437c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2202      	movs	r2, #2
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004268:	e00f      	b.n	800428a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800426a:	f7ff fa3b 	bl	80036e4 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b05      	cmp	r3, #5
 8004276:	d908      	bls.n	800428a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2203      	movs	r2, #3
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e078      	b.n	800437c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e8      	bne.n	800426a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	4b38      	ldr	r3, [pc, #224]	; (8004384 <HAL_DMA_Init+0x158>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d107      	bne.n	80042f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	4313      	orrs	r3, r2
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	4313      	orrs	r3, r2
 8004314:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b04      	cmp	r3, #4
 800431c:	d117      	bne.n	800434e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00e      	beq.n	800434e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fa91 	bl	8004858 <DMA_CheckFifoParam>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2240      	movs	r2, #64	; 0x40
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800434a:	2301      	movs	r3, #1
 800434c:	e016      	b.n	800437c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa48 	bl	80047ec <DMA_CalcBaseAndBitshift>
 800435c:	4603      	mov	r3, r0
 800435e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	223f      	movs	r2, #63	; 0x3f
 8004366:	409a      	lsls	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	e010803f 	.word	0xe010803f

08004388 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_DMA_Start_IT+0x26>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e040      	b.n	8004430 <HAL_DMA_Start_IT+0xa8>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d12f      	bne.n	8004422 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2202      	movs	r2, #2
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f9da 	bl	8004790 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	223f      	movs	r2, #63	; 0x3f
 80043e2:	409a      	lsls	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0216 	orr.w	r2, r2, #22
 80043f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d007      	beq.n	8004410 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0208 	orr.w	r2, r2, #8
 800440e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e005      	b.n	800442e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800442a:	2302      	movs	r3, #2
 800442c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d004      	beq.n	8004456 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2280      	movs	r2, #128	; 0x80
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e00c      	b.n	8004470 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2205      	movs	r2, #5
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004488:	4b92      	ldr	r3, [pc, #584]	; (80046d4 <HAL_DMA_IRQHandler+0x258>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a92      	ldr	r2, [pc, #584]	; (80046d8 <HAL_DMA_IRQHandler+0x25c>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	0a9b      	lsrs	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a6:	2208      	movs	r2, #8
 80044a8:	409a      	lsls	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01a      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d013      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0204 	bic.w	r2, r2, #4
 80044ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	2208      	movs	r2, #8
 80044d6:	409a      	lsls	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	f043 0201 	orr.w	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ec:	2201      	movs	r2, #1
 80044ee:	409a      	lsls	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d012      	beq.n	800451e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	2201      	movs	r2, #1
 800450c:	409a      	lsls	r2, r3
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f043 0202 	orr.w	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	2204      	movs	r2, #4
 8004524:	409a      	lsls	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d012      	beq.n	8004554 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004540:	2204      	movs	r2, #4
 8004542:	409a      	lsls	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454c:	f043 0204 	orr.w	r2, r3, #4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004558:	2210      	movs	r2, #16
 800455a:	409a      	lsls	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d043      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d03c      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	2210      	movs	r2, #16
 8004578:	409a      	lsls	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d018      	beq.n	80045be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d024      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
 80045aa:	e01f      	b.n	80045ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
 80045bc:	e016      	b.n	80045ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0208 	bic.w	r2, r2, #8
 80045da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	2220      	movs	r2, #32
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 808e 	beq.w	800471a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8086 	beq.w	800471a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004612:	2220      	movs	r2, #32
 8004614:	409a      	lsls	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b05      	cmp	r3, #5
 8004624:	d136      	bne.n	8004694 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0216 	bic.w	r2, r2, #22
 8004634:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004644:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <HAL_DMA_IRQHandler+0x1da>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0208 	bic.w	r2, r2, #8
 8004664:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	223f      	movs	r2, #63	; 0x3f
 800466c:	409a      	lsls	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d07d      	beq.n	8004786 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
        }
        return;
 8004692:	e078      	b.n	8004786 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01c      	beq.n	80046dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d108      	bne.n	80046c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d030      	beq.n	800471a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
 80046c0:	e02b      	b.n	800471a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d027      	beq.n	800471a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	4798      	blx	r3
 80046d2:	e022      	b.n	800471a <HAL_DMA_IRQHandler+0x29e>
 80046d4:	20000000 	.word	0x20000000
 80046d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10f      	bne.n	800470a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0210 	bic.w	r2, r2, #16
 80046f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471e:	2b00      	cmp	r3, #0
 8004720:	d032      	beq.n	8004788 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d022      	beq.n	8004774 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2205      	movs	r2, #5
 8004732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	3301      	adds	r3, #1
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	429a      	cmp	r2, r3
 8004750:	d307      	bcc.n	8004762 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1f2      	bne.n	8004746 <HAL_DMA_IRQHandler+0x2ca>
 8004760:	e000      	b.n	8004764 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004762:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	4798      	blx	r3
 8004784:	e000      	b.n	8004788 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004786:	bf00      	nop
    }
  }
}
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop

08004790 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80047ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d108      	bne.n	80047d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047ce:	e007      	b.n	80047e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	3b10      	subs	r3, #16
 80047fc:	4a14      	ldr	r2, [pc, #80]	; (8004850 <DMA_CalcBaseAndBitshift+0x64>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004806:	4a13      	ldr	r2, [pc, #76]	; (8004854 <DMA_CalcBaseAndBitshift+0x68>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d909      	bls.n	800482e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	659a      	str	r2, [r3, #88]	; 0x58
 800482c:	e007      	b.n	800483e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	aaaaaaab 	.word	0xaaaaaaab
 8004854:	08014e7c 	.word	0x08014e7c

08004858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d11f      	bne.n	80048b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d855      	bhi.n	8004924 <DMA_CheckFifoParam+0xcc>
 8004878:	a201      	add	r2, pc, #4	; (adr r2, 8004880 <DMA_CheckFifoParam+0x28>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	08004891 	.word	0x08004891
 8004884:	080048a3 	.word	0x080048a3
 8004888:	08004891 	.word	0x08004891
 800488c:	08004925 	.word	0x08004925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d045      	beq.n	8004928 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e042      	b.n	8004928 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048aa:	d13f      	bne.n	800492c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b0:	e03c      	b.n	800492c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ba:	d121      	bne.n	8004900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d836      	bhi.n	8004930 <DMA_CheckFifoParam+0xd8>
 80048c2:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <DMA_CheckFifoParam+0x70>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048df 	.word	0x080048df
 80048d0:	080048d9 	.word	0x080048d9
 80048d4:	080048f1 	.word	0x080048f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
      break;
 80048dc:	e02f      	b.n	800493e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d024      	beq.n	8004934 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ee:	e021      	b.n	8004934 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048f8:	d11e      	bne.n	8004938 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048fe:	e01b      	b.n	8004938 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d902      	bls.n	800490c <DMA_CheckFifoParam+0xb4>
 8004906:	2b03      	cmp	r3, #3
 8004908:	d003      	beq.n	8004912 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800490a:	e018      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	73fb      	strb	r3, [r7, #15]
      break;
 8004910:	e015      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00e      	beq.n	800493c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	73fb      	strb	r3, [r7, #15]
      break;
 8004922:	e00b      	b.n	800493c <DMA_CheckFifoParam+0xe4>
      break;
 8004924:	bf00      	nop
 8004926:	e00a      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      break;
 8004928:	bf00      	nop
 800492a:	e008      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      break;
 800492c:	bf00      	nop
 800492e:	e006      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      break;
 8004930:	bf00      	nop
 8004932:	e004      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      break;
 8004934:	bf00      	nop
 8004936:	e002      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      break;   
 8004938:	bf00      	nop
 800493a:	e000      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      break;
 800493c:	bf00      	nop
    }
  } 
  
  return status; 
 800493e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e081      	b.n	8004a62 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc ffc0 	bl	80018f8 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2224      	movs	r2, #36	; 0x24
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0201 	bic.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800499c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ac:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d107      	bne.n	80049c6 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	e006      	b.n	80049d4 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80049d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d104      	bne.n	80049e6 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a08:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691a      	ldr	r2, [r3, #16]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	ea42 0103 	orr.w	r1, r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	69d9      	ldr	r1, [r3, #28]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1a      	ldr	r2, [r3, #32]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b20      	cmp	r3, #32
 8004a7e:	d138      	bne.n	8004af2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e032      	b.n	8004af4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2224      	movs	r2, #36	; 0x24
 8004a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0201 	bic.w	r2, r2, #1
 8004aac:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004abc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e000      	b.n	8004af4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b089      	sub	sp, #36	; 0x24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b16:	2300      	movs	r3, #0
 8004b18:	61fb      	str	r3, [r7, #28]
 8004b1a:	e165      	b.n	8004de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	f040 8154 	bne.w	8004de2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d00b      	beq.n	8004b5a <HAL_GPIO_Init+0x5a>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d007      	beq.n	8004b5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b4e:	2b11      	cmp	r3, #17
 8004b50:	d003      	beq.n	8004b5a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b12      	cmp	r3, #18
 8004b58:	d130      	bne.n	8004bbc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b90:	2201      	movs	r2, #1
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 0201 	and.w	r2, r3, #1
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	2203      	movs	r2, #3
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0xfc>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b12      	cmp	r3, #18
 8004bfa:	d123      	bne.n	8004c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	08da      	lsrs	r2, r3, #3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3208      	adds	r2, #8
 8004c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	220f      	movs	r2, #15
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	08da      	lsrs	r2, r3, #3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3208      	adds	r2, #8
 8004c3e:	69b9      	ldr	r1, [r7, #24]
 8004c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	2203      	movs	r2, #3
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0203 	and.w	r2, r3, #3
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80ae 	beq.w	8004de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	4b5c      	ldr	r3, [pc, #368]	; (8004dfc <HAL_GPIO_Init+0x2fc>)
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8e:	4a5b      	ldr	r2, [pc, #364]	; (8004dfc <HAL_GPIO_Init+0x2fc>)
 8004c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c94:	6453      	str	r3, [r2, #68]	; 0x44
 8004c96:	4b59      	ldr	r3, [pc, #356]	; (8004dfc <HAL_GPIO_Init+0x2fc>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ca2:	4a57      	ldr	r2, [pc, #348]	; (8004e00 <HAL_GPIO_Init+0x300>)
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	3302      	adds	r3, #2
 8004caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	220f      	movs	r2, #15
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a4e      	ldr	r2, [pc, #312]	; (8004e04 <HAL_GPIO_Init+0x304>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d025      	beq.n	8004d1a <HAL_GPIO_Init+0x21a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a4d      	ldr	r2, [pc, #308]	; (8004e08 <HAL_GPIO_Init+0x308>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d01f      	beq.n	8004d16 <HAL_GPIO_Init+0x216>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a4c      	ldr	r2, [pc, #304]	; (8004e0c <HAL_GPIO_Init+0x30c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d019      	beq.n	8004d12 <HAL_GPIO_Init+0x212>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a4b      	ldr	r2, [pc, #300]	; (8004e10 <HAL_GPIO_Init+0x310>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d013      	beq.n	8004d0e <HAL_GPIO_Init+0x20e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a4a      	ldr	r2, [pc, #296]	; (8004e14 <HAL_GPIO_Init+0x314>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00d      	beq.n	8004d0a <HAL_GPIO_Init+0x20a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a49      	ldr	r2, [pc, #292]	; (8004e18 <HAL_GPIO_Init+0x318>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <HAL_GPIO_Init+0x206>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a48      	ldr	r2, [pc, #288]	; (8004e1c <HAL_GPIO_Init+0x31c>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d101      	bne.n	8004d02 <HAL_GPIO_Init+0x202>
 8004cfe:	2306      	movs	r3, #6
 8004d00:	e00c      	b.n	8004d1c <HAL_GPIO_Init+0x21c>
 8004d02:	2307      	movs	r3, #7
 8004d04:	e00a      	b.n	8004d1c <HAL_GPIO_Init+0x21c>
 8004d06:	2305      	movs	r3, #5
 8004d08:	e008      	b.n	8004d1c <HAL_GPIO_Init+0x21c>
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	e006      	b.n	8004d1c <HAL_GPIO_Init+0x21c>
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e004      	b.n	8004d1c <HAL_GPIO_Init+0x21c>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e002      	b.n	8004d1c <HAL_GPIO_Init+0x21c>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_GPIO_Init+0x21c>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	69fa      	ldr	r2, [r7, #28]
 8004d1e:	f002 0203 	and.w	r2, r2, #3
 8004d22:	0092      	lsls	r2, r2, #2
 8004d24:	4093      	lsls	r3, r2
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d2c:	4934      	ldr	r1, [pc, #208]	; (8004e00 <HAL_GPIO_Init+0x300>)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	089b      	lsrs	r3, r3, #2
 8004d32:	3302      	adds	r3, #2
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d3a:	4b39      	ldr	r3, [pc, #228]	; (8004e20 <HAL_GPIO_Init+0x320>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	43db      	mvns	r3, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4013      	ands	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d5e:	4a30      	ldr	r2, [pc, #192]	; (8004e20 <HAL_GPIO_Init+0x320>)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d64:	4b2e      	ldr	r3, [pc, #184]	; (8004e20 <HAL_GPIO_Init+0x320>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d88:	4a25      	ldr	r2, [pc, #148]	; (8004e20 <HAL_GPIO_Init+0x320>)
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d8e:	4b24      	ldr	r3, [pc, #144]	; (8004e20 <HAL_GPIO_Init+0x320>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004db2:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <HAL_GPIO_Init+0x320>)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004db8:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <HAL_GPIO_Init+0x320>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ddc:	4a10      	ldr	r2, [pc, #64]	; (8004e20 <HAL_GPIO_Init+0x320>)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3301      	adds	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b0f      	cmp	r3, #15
 8004dec:	f67f ae96 	bls.w	8004b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004df0:	bf00      	nop
 8004df2:	3724      	adds	r7, #36	; 0x24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40013800 	.word	0x40013800
 8004e04:	40020000 	.word	0x40020000
 8004e08:	40020400 	.word	0x40020400
 8004e0c:	40020800 	.word	0x40020800
 8004e10:	40020c00 	.word	0x40020c00
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40021400 	.word	0x40021400
 8004e1c:	40021800 	.word	0x40021800
 8004e20:	40013c00 	.word	0x40013c00

08004e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	807b      	strh	r3, [r7, #2]
 8004e30:	4613      	mov	r3, r2
 8004e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e34:	787b      	ldrb	r3, [r7, #1]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e40:	e003      	b.n	8004e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e42:	887b      	ldrh	r3, [r7, #2]
 8004e44:	041a      	lsls	r2, r3, #16
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	619a      	str	r2, [r3, #24]
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004e56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e58:	b08f      	sub	sp, #60	; 0x3c
 8004e5a:	af0a      	add	r7, sp, #40	; 0x28
 8004e5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e054      	b.n	8004f12 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f00c fdc6 	bl	8011a14 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d102      	bne.n	8004ea2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f006 fdca 	bl	800ba40 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	603b      	str	r3, [r7, #0]
 8004eb2:	687e      	ldr	r6, [r7, #4]
 8004eb4:	466d      	mov	r5, sp
 8004eb6:	f106 0410 	add.w	r4, r6, #16
 8004eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004eca:	1d33      	adds	r3, r6, #4
 8004ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ece:	6838      	ldr	r0, [r7, #0]
 8004ed0:	f006 fd44 	bl	800b95c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2101      	movs	r1, #1
 8004eda:	4618      	mov	r0, r3
 8004edc:	f006 fdc1 	bl	800ba62 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	687e      	ldr	r6, [r7, #4]
 8004ee8:	466d      	mov	r5, sp
 8004eea:	f106 0410 	add.w	r4, r6, #16
 8004eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8004efe:	1d33      	adds	r3, r6, #4
 8004f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f02:	6838      	ldr	r0, [r7, #0]
 8004f04:	f006 fed4 	bl	800bcb0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f1a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004f1a:	b590      	push	{r4, r7, lr}
 8004f1c:	b089      	sub	sp, #36	; 0x24
 8004f1e:	af04      	add	r7, sp, #16
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	4608      	mov	r0, r1
 8004f24:	4611      	mov	r1, r2
 8004f26:	461a      	mov	r2, r3
 8004f28:	4603      	mov	r3, r0
 8004f2a:	70fb      	strb	r3, [r7, #3]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	70bb      	strb	r3, [r7, #2]
 8004f30:	4613      	mov	r3, r2
 8004f32:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_HCD_HC_Init+0x28>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e07f      	b.n	8005042 <HAL_HCD_HC_Init+0x128>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	440b      	add	r3, r1
 8004f58:	333d      	adds	r3, #61	; 0x3d
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	00db      	lsls	r3, r3, #3
 8004f6a:	440b      	add	r3, r1
 8004f6c:	3338      	adds	r3, #56	; 0x38
 8004f6e:	787a      	ldrb	r2, [r7, #1]
 8004f70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004f72:	78fa      	ldrb	r2, [r7, #3]
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	440b      	add	r3, r1
 8004f80:	3340      	adds	r3, #64	; 0x40
 8004f82:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004f84:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	3339      	adds	r3, #57	; 0x39
 8004f96:	78fa      	ldrb	r2, [r7, #3]
 8004f98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	333f      	adds	r3, #63	; 0x3f
 8004faa:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004fae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	78bb      	ldrb	r3, [r7, #2]
 8004fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb8:	b2d8      	uxtb	r0, r3
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	440b      	add	r3, r1
 8004fc6:	333a      	adds	r3, #58	; 0x3a
 8004fc8:	4602      	mov	r2, r0
 8004fca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004fcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	da0a      	bge.n	8004fea <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004fd4:	78fa      	ldrb	r2, [r7, #3]
 8004fd6:	6879      	ldr	r1, [r7, #4]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	440b      	add	r3, r1
 8004fe2:	333b      	adds	r3, #59	; 0x3b
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	e009      	b.n	8004ffe <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	440b      	add	r3, r1
 8004ff8:	333b      	adds	r3, #59	; 0x3b
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	6879      	ldr	r1, [r7, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	440b      	add	r3, r1
 800500c:	333c      	adds	r3, #60	; 0x3c
 800500e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005012:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6818      	ldr	r0, [r3, #0]
 8005018:	787c      	ldrb	r4, [r7, #1]
 800501a:	78ba      	ldrb	r2, [r7, #2]
 800501c:	78f9      	ldrb	r1, [r7, #3]
 800501e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005020:	9302      	str	r3, [sp, #8]
 8005022:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	f897 3020 	ldrb.w	r3, [r7, #32]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	4623      	mov	r3, r4
 8005030:	f006 ffba 	bl	800bfa8 <USB_HC_Init>
 8005034:	4603      	mov	r3, r0
 8005036:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	bd90      	pop	{r4, r7, pc}

0800504a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_HCD_HC_Halt+0x1e>
 8005064:	2302      	movs	r3, #2
 8005066:	e00f      	b.n	8005088 <HAL_HCD_HC_Halt+0x3e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	78fa      	ldrb	r2, [r7, #3]
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f007 f9f6 	bl	800c46a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	4603      	mov	r3, r0
 80050a0:	70fb      	strb	r3, [r7, #3]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70bb      	strb	r3, [r7, #2]
 80050a6:	4613      	mov	r3, r2
 80050a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	440b      	add	r3, r1
 80050b8:	333b      	adds	r3, #59	; 0x3b
 80050ba:	78ba      	ldrb	r2, [r7, #2]
 80050bc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	440b      	add	r3, r1
 80050cc:	333f      	adds	r3, #63	; 0x3f
 80050ce:	787a      	ldrb	r2, [r7, #1]
 80050d0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80050d2:	7c3b      	ldrb	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d114      	bne.n	8005102 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80050d8:	78fa      	ldrb	r2, [r7, #3]
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	4613      	mov	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	440b      	add	r3, r1
 80050e6:	3342      	adds	r3, #66	; 0x42
 80050e8:	2203      	movs	r2, #3
 80050ea:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80050ec:	78fa      	ldrb	r2, [r7, #3]
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	440b      	add	r3, r1
 80050fa:	333d      	adds	r3, #61	; 0x3d
 80050fc:	7f3a      	ldrb	r2, [r7, #28]
 80050fe:	701a      	strb	r2, [r3, #0]
 8005100:	e009      	b.n	8005116 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	440b      	add	r3, r1
 8005110:	3342      	adds	r3, #66	; 0x42
 8005112:	2202      	movs	r2, #2
 8005114:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8005116:	787b      	ldrb	r3, [r7, #1]
 8005118:	2b03      	cmp	r3, #3
 800511a:	f200 80d6 	bhi.w	80052ca <HAL_HCD_HC_SubmitRequest+0x23a>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <HAL_HCD_HC_SubmitRequest+0x94>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005135 	.word	0x08005135
 8005128:	080052b5 	.word	0x080052b5
 800512c:	080051a1 	.word	0x080051a1
 8005130:	0800522b 	.word	0x0800522b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005134:	7c3b      	ldrb	r3, [r7, #16]
 8005136:	2b01      	cmp	r3, #1
 8005138:	f040 80c9 	bne.w	80052ce <HAL_HCD_HC_SubmitRequest+0x23e>
 800513c:	78bb      	ldrb	r3, [r7, #2]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f040 80c5 	bne.w	80052ce <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005144:	8b3b      	ldrh	r3, [r7, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d109      	bne.n	800515e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4413      	add	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	440b      	add	r3, r1
 8005158:	3351      	adds	r3, #81	; 0x51
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	440b      	add	r3, r1
 800516c:	3351      	adds	r3, #81	; 0x51
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	440b      	add	r3, r1
 8005182:	3342      	adds	r3, #66	; 0x42
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005188:	e0a1      	b.n	80052ce <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	6879      	ldr	r1, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	440b      	add	r3, r1
 8005198:	3342      	adds	r3, #66	; 0x42
 800519a:	2202      	movs	r2, #2
 800519c:	701a      	strb	r2, [r3, #0]
      break;
 800519e:	e096      	b.n	80052ce <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80051a0:	78bb      	ldrb	r3, [r7, #2]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d120      	bne.n	80051e8 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80051a6:	78fa      	ldrb	r2, [r7, #3]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	440b      	add	r3, r1
 80051b4:	3351      	adds	r3, #81	; 0x51
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051bc:	78fa      	ldrb	r2, [r7, #3]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	3342      	adds	r3, #66	; 0x42
 80051cc:	2200      	movs	r2, #0
 80051ce:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80051d0:	e07e      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80051d2:	78fa      	ldrb	r2, [r7, #3]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	440b      	add	r3, r1
 80051e0:	3342      	adds	r3, #66	; 0x42
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
      break;
 80051e6:	e073      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	3350      	adds	r3, #80	; 0x50
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	440b      	add	r3, r1
 800520c:	3342      	adds	r3, #66	; 0x42
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
      break;
 8005212:	e05d      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	440b      	add	r3, r1
 8005222:	3342      	adds	r3, #66	; 0x42
 8005224:	2202      	movs	r2, #2
 8005226:	701a      	strb	r2, [r3, #0]
      break;
 8005228:	e052      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800522a:	78bb      	ldrb	r3, [r7, #2]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d120      	bne.n	8005272 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005230:	78fa      	ldrb	r2, [r7, #3]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	440b      	add	r3, r1
 800523e:	3351      	adds	r3, #81	; 0x51
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	440b      	add	r3, r1
 8005254:	3342      	adds	r3, #66	; 0x42
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800525a:	e039      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800525c:	78fa      	ldrb	r2, [r7, #3]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	3342      	adds	r3, #66	; 0x42
 800526c:	2202      	movs	r2, #2
 800526e:	701a      	strb	r2, [r3, #0]
      break;
 8005270:	e02e      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	3350      	adds	r3, #80	; 0x50
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	440b      	add	r3, r1
 8005296:	3342      	adds	r3, #66	; 0x42
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]
      break;
 800529c:	e018      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	440b      	add	r3, r1
 80052ac:	3342      	adds	r3, #66	; 0x42
 80052ae:	2202      	movs	r2, #2
 80052b0:	701a      	strb	r2, [r3, #0]
      break;
 80052b2:	e00d      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3342      	adds	r3, #66	; 0x42
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
      break;
 80052c8:	e002      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80052ce:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80052d0:	78fa      	ldrb	r2, [r7, #3]
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	3344      	adds	r3, #68	; 0x44
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	8b39      	ldrh	r1, [r7, #24]
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4403      	add	r3, r0
 80052f4:	3348      	adds	r3, #72	; 0x48
 80052f6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80052f8:	78fa      	ldrb	r2, [r7, #3]
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	440b      	add	r3, r1
 8005306:	335c      	adds	r3, #92	; 0x5c
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	440b      	add	r3, r1
 800531a:	334c      	adds	r3, #76	; 0x4c
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	440b      	add	r3, r1
 800532e:	3339      	adds	r3, #57	; 0x39
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	440b      	add	r3, r1
 8005342:	335d      	adds	r3, #93	; 0x5d
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	78fa      	ldrb	r2, [r7, #3]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	3338      	adds	r3, #56	; 0x38
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	18d1      	adds	r1, r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	f006 ff2a 	bl	800c1bc <USB_HC_StartXfer>
 8005368:	4603      	mov	r3, r0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop

08005374 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f006 fc4d 	bl	800bc2a <USB_GetMode>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	f040 80ef 	bne.w	8005576 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f006 fc31 	bl	800bc04 <USB_ReadInterrupts>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80e5 	beq.w	8005574 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f006 fc28 	bl	800bc04 <USB_ReadInterrupts>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053be:	d104      	bne.n	80053ca <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80053c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f006 fc18 	bl	800bc04 <USB_ReadInterrupts>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053de:	d104      	bne.n	80053ea <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f006 fc08 	bl	800bc04 <USB_ReadInterrupts>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053fe:	d104      	bne.n	800540a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005408:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f006 fbf8 	bl	800bc04 <USB_ReadInterrupts>
 8005414:	4603      	mov	r3, r0
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b02      	cmp	r3, #2
 800541c:	d103      	bne.n	8005426 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2202      	movs	r2, #2
 8005424:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f006 fbea 	bl	800bc04 <USB_ReadInterrupts>
 8005430:	4603      	mov	r3, r0
 8005432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800543a:	d115      	bne.n	8005468 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005444:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d108      	bne.n	8005468 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f00c fb5a 	bl	8011b10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2101      	movs	r1, #1
 8005462:	4618      	mov	r0, r3
 8005464:	f006 fcda 	bl	800be1c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4618      	mov	r0, r3
 800546e:	f006 fbc9 	bl	800bc04 <USB_ReadInterrupts>
 8005472:	4603      	mov	r3, r0
 8005474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800547c:	d102      	bne.n	8005484 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f001 f966 	bl	8006750 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f006 fbbb 	bl	800bc04 <USB_ReadInterrupts>
 800548e:	4603      	mov	r3, r0
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d106      	bne.n	80054a6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f00c fb1d 	bl	8011ad8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2208      	movs	r2, #8
 80054a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f006 fbaa 	bl	800bc04 <USB_ReadInterrupts>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ba:	d138      	bne.n	800552e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f006 ffc1 	bl	800c448 <USB_HC_ReadInterrupt>
 80054c6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e025      	b.n	800551a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d018      	beq.n	8005514 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f8:	d106      	bne.n	8005508 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	4619      	mov	r1, r3
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8cf 	bl	80056a4 <HCD_HC_IN_IRQHandler>
 8005506:	e005      	b.n	8005514 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	4619      	mov	r1, r3
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fcfd 	bl	8005f0e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	3301      	adds	r3, #1
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	429a      	cmp	r2, r3
 8005522:	d3d4      	bcc.n	80054ce <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800552c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f006 fb66 	bl	800bc04 <USB_ReadInterrupts>
 8005538:	4603      	mov	r3, r0
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b10      	cmp	r3, #16
 8005540:	d101      	bne.n	8005546 <HAL_HCD_IRQHandler+0x1d2>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <HAL_HCD_IRQHandler+0x1d4>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d014      	beq.n	8005576 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699a      	ldr	r2, [r3, #24]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0210 	bic.w	r2, r2, #16
 800555a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 f84b 	bl	80065f8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699a      	ldr	r2, [r3, #24]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0210 	orr.w	r2, r2, #16
 8005570:	619a      	str	r2, [r3, #24]
 8005572:	e000      	b.n	8005576 <HAL_HCD_IRQHandler+0x202>
      return;
 8005574:	bf00      	nop
    }
  }
}
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_HCD_Start+0x16>
 800558e:	2302      	movs	r3, #2
 8005590:	e013      	b.n	80055ba <HAL_HCD_Start+0x3e>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4618      	mov	r0, r3
 80055a0:	f006 fa3d 	bl	800ba1e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f006 fc9a 	bl	800bee4 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b082      	sub	sp, #8
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d101      	bne.n	80055d8 <HAL_HCD_Stop+0x16>
 80055d4:	2302      	movs	r3, #2
 80055d6:	e00d      	b.n	80055f4 <HAL_HCD_Stop+0x32>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f007 f87b 	bl	800c6e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f006 fc41 	bl	800be90 <USB_ResetPort>
 800560e:	4603      	mov	r3, r0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005624:	78fa      	ldrb	r2, [r7, #3]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	440b      	add	r3, r1
 8005632:	335c      	adds	r3, #92	; 0x5c
 8005634:	781b      	ldrb	r3, [r3, #0]
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	440b      	add	r3, r1
 800565c:	334c      	adds	r3, #76	; 0x4c
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f006 fc83 	bl	800bf84 <USB_GetCurrentFrame>
 800567e:	4603      	mov	r3, r0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f006 fc5e 	bl	800bf56 <USB_GetHostSpeed>
 800569a:	4603      	mov	r3, r0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d119      	bne.n	8005708 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	461a      	mov	r2, r3
 80056e2:	2304      	movs	r3, #4
 80056e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005700:	f043 0302 	orr.w	r3, r3, #2
 8005704:	60d3      	str	r3, [r2, #12]
 8005706:	e0ce      	b.n	80058a6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571e:	d12c      	bne.n	800577a <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572c:	461a      	mov	r2, r3
 800572e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005732:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	440b      	add	r3, r1
 8005742:	335d      	adds	r3, #93	; 0x5d
 8005744:	2207      	movs	r2, #7
 8005746:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4413      	add	r3, r2
 8005750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	440a      	add	r2, r1
 800575e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005762:	f043 0302 	orr.w	r3, r3, #2
 8005766:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	4611      	mov	r1, r2
 8005772:	4618      	mov	r0, r3
 8005774:	f006 fe79 	bl	800c46a <USB_HC_Halt>
 8005778:	e095      	b.n	80058a6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4413      	add	r3, r2
 8005782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0320 	and.w	r3, r3, #32
 800578c:	2b20      	cmp	r3, #32
 800578e:	d109      	bne.n	80057a4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579c:	461a      	mov	r2, r3
 800579e:	2320      	movs	r3, #32
 80057a0:	6093      	str	r3, [r2, #8]
 80057a2:	e080      	b.n	80058a6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d134      	bne.n	8005824 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d4:	f043 0302 	orr.w	r3, r3, #2
 80057d8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4613      	mov	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	440b      	add	r3, r1
 80057e8:	335d      	adds	r3, #93	; 0x5d
 80057ea:	2205      	movs	r2, #5
 80057ec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057fa:	461a      	mov	r2, r3
 80057fc:	2310      	movs	r3, #16
 80057fe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580c:	461a      	mov	r2, r3
 800580e:	2308      	movs	r3, #8
 8005810:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	4611      	mov	r1, r2
 800581c:	4618      	mov	r0, r3
 800581e:	f006 fe24 	bl	800c46a <USB_HC_Halt>
 8005822:	e040      	b.n	80058a6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583a:	d134      	bne.n	80058a6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	0151      	lsls	r1, r2, #5
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	440a      	add	r2, r1
 8005852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005856:	f043 0302 	orr.w	r3, r3, #2
 800585a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f006 fdff 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	4413      	add	r3, r2
 8005874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005878:	461a      	mov	r2, r3
 800587a:	2310      	movs	r3, #16
 800587c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	335d      	adds	r3, #93	; 0x5d
 800588e:	2208      	movs	r2, #8
 8005890:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589e:	461a      	mov	r2, r3
 80058a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058a4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058bc:	d122      	bne.n	8005904 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	0151      	lsls	r1, r2, #5
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	440a      	add	r2, r1
 80058d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d8:	f043 0302 	orr.w	r3, r3, #2
 80058dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f006 fdbe 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fa:	461a      	mov	r2, r3
 80058fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005900:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005902:	e300      	b.n	8005f06 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	015a      	lsls	r2, r3, #5
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4413      	add	r3, r2
 800590c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b01      	cmp	r3, #1
 8005918:	f040 80fd 	bne.w	8005b16 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01b      	beq.n	800595c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4613      	mov	r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	440b      	add	r3, r1
 8005932:	3348      	adds	r3, #72	; 0x48
 8005934:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	0159      	lsls	r1, r3, #5
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	440b      	add	r3, r1
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005948:	1ad1      	subs	r1, r2, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	4403      	add	r3, r0
 8005958:	334c      	adds	r3, #76	; 0x4c
 800595a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	440b      	add	r3, r1
 800596a:	335d      	adds	r3, #93	; 0x5d
 800596c:	2201      	movs	r2, #1
 800596e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	440b      	add	r3, r1
 800597e:	3358      	adds	r3, #88	; 0x58
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005990:	461a      	mov	r2, r3
 8005992:	2301      	movs	r3, #1
 8005994:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	440b      	add	r3, r1
 80059a4:	333f      	adds	r3, #63	; 0x3f
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	440b      	add	r3, r1
 80059ba:	333f      	adds	r3, #63	; 0x3f
 80059bc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d121      	bne.n	8005a06 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059dc:	f043 0302 	orr.w	r3, r3, #2
 80059e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f006 fd3c 	bl	800c46a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	015a      	lsls	r2, r3, #5
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4413      	add	r3, r2
 80059fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fe:	461a      	mov	r2, r3
 8005a00:	2310      	movs	r3, #16
 8005a02:	6093      	str	r3, [r2, #8]
 8005a04:	e070      	b.n	8005ae8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	440b      	add	r3, r1
 8005a14:	333f      	adds	r3, #63	; 0x3f
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d12a      	bne.n	8005a72 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a3a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	440b      	add	r3, r1
 8005a4a:	335c      	adds	r3, #92	; 0x5c
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	b2d8      	uxtb	r0, r3
 8005a54:	6879      	ldr	r1, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	440b      	add	r3, r1
 8005a62:	335c      	adds	r3, #92	; 0x5c
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	4601      	mov	r1, r0
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f00c f85e 	bl	8011b2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a70:	e03a      	b.n	8005ae8 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4613      	mov	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	440b      	add	r3, r1
 8005a80:	333f      	adds	r3, #63	; 0x3f
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d12f      	bne.n	8005ae8 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	440b      	add	r3, r1
 8005a96:	335c      	adds	r3, #92	; 0x5c
 8005a98:	2201      	movs	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005a9c:	6879      	ldr	r1, [r7, #4]
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	3350      	adds	r3, #80	; 0x50
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f083 0301 	eor.w	r3, r3, #1
 8005ab2:	b2d8      	uxtb	r0, r3
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3350      	adds	r3, #80	; 0x50
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	b2d8      	uxtb	r0, r3
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	440b      	add	r3, r1
 8005ada:	335c      	adds	r3, #92	; 0x5c
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	4601      	mov	r1, r0
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f00c f822 	bl	8011b2c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	440b      	add	r3, r1
 8005af6:	3350      	adds	r3, #80	; 0x50
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f083 0301 	eor.w	r3, r3, #1
 8005afe:	b2d8      	uxtb	r0, r3
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	440b      	add	r3, r1
 8005b0e:	3350      	adds	r3, #80	; 0x50
 8005b10:	4602      	mov	r2, r0
 8005b12:	701a      	strb	r2, [r3, #0]
}
 8005b14:	e1f7      	b.n	8005f06 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	f040 811a 	bne.w	8005d62 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	015a      	lsls	r2, r3, #5
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	0151      	lsls	r1, r2, #5
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	440a      	add	r2, r1
 8005b44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b48:	f023 0302 	bic.w	r3, r3, #2
 8005b4c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	440b      	add	r3, r1
 8005b5c:	335d      	adds	r3, #93	; 0x5d
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d10a      	bne.n	8005b7a <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005b64:	6879      	ldr	r1, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	4613      	mov	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	440b      	add	r3, r1
 8005b72:	335c      	adds	r3, #92	; 0x5c
 8005b74:	2201      	movs	r2, #1
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	e0d9      	b.n	8005d2e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b7a:	6879      	ldr	r1, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	440b      	add	r3, r1
 8005b88:	335d      	adds	r3, #93	; 0x5d
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b05      	cmp	r3, #5
 8005b8e:	d10a      	bne.n	8005ba6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4613      	mov	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	440b      	add	r3, r1
 8005b9e:	335c      	adds	r3, #92	; 0x5c
 8005ba0:	2205      	movs	r2, #5
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	e0c3      	b.n	8005d2e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	440b      	add	r3, r1
 8005bb4:	335d      	adds	r3, #93	; 0x5d
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d00a      	beq.n	8005bd2 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	440b      	add	r3, r1
 8005bca:	335d      	adds	r3, #93	; 0x5d
 8005bcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d156      	bne.n	8005c80 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	00db      	lsls	r3, r3, #3
 8005bde:	440b      	add	r3, r1
 8005be0:	3358      	adds	r3, #88	; 0x58
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	1c59      	adds	r1, r3, #1
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	00db      	lsls	r3, r3, #3
 8005bf2:	4403      	add	r3, r0
 8005bf4:	3358      	adds	r3, #88	; 0x58
 8005bf6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	440b      	add	r3, r1
 8005c06:	3358      	adds	r3, #88	; 0x58
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d914      	bls.n	8005c38 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005c0e:	6879      	ldr	r1, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4613      	mov	r3, r2
 8005c14:	009b      	lsls	r3, r3, #2
 8005c16:	4413      	add	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3358      	adds	r3, #88	; 0x58
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	440b      	add	r3, r1
 8005c30:	335c      	adds	r3, #92	; 0x5c
 8005c32:	2204      	movs	r2, #4
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e009      	b.n	8005c4c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	440b      	add	r3, r1
 8005c46:	335c      	adds	r3, #92	; 0x5c
 8005c48:	2202      	movs	r2, #2
 8005c4a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c62:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c6a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c78:	461a      	mov	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	6013      	str	r3, [r2, #0]
 8005c7e:	e056      	b.n	8005d2e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	440b      	add	r3, r1
 8005c8e:	335d      	adds	r3, #93	; 0x5d
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d123      	bne.n	8005cde <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005c96:	6879      	ldr	r1, [r7, #4]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	440b      	add	r3, r1
 8005ca4:	335c      	adds	r3, #92	; 0x5c
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005cc0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cc8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6013      	str	r3, [r2, #0]
 8005cdc:	e027      	b.n	8005d2e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	440b      	add	r3, r1
 8005cec:	335d      	adds	r3, #93	; 0x5d
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b07      	cmp	r3, #7
 8005cf2:	d11c      	bne.n	8005d2e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005cf4:	6879      	ldr	r1, [r7, #4]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	440b      	add	r3, r1
 8005d02:	3358      	adds	r3, #88	; 0x58
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	1c59      	adds	r1, r3, #1
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	00db      	lsls	r3, r3, #3
 8005d14:	4403      	add	r3, r0
 8005d16:	3358      	adds	r3, #88	; 0x58
 8005d18:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	440b      	add	r3, r1
 8005d28:	335c      	adds	r3, #92	; 0x5c
 8005d2a:	2204      	movs	r2, #4
 8005d2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	b2d8      	uxtb	r0, r3
 8005d44:	6879      	ldr	r1, [r7, #4]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	00db      	lsls	r3, r3, #3
 8005d50:	440b      	add	r3, r1
 8005d52:	335c      	adds	r3, #92	; 0x5c
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	4601      	mov	r1, r0
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f00b fee6 	bl	8011b2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005d60:	e0d1      	b.n	8005f06 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d13e      	bne.n	8005df6 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d92:	f043 0302 	orr.w	r3, r3, #2
 8005d96:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	440b      	add	r3, r1
 8005da6:	3358      	adds	r3, #88	; 0x58
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	1c59      	adds	r1, r3, #1
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4403      	add	r3, r0
 8005dba:	3358      	adds	r3, #88	; 0x58
 8005dbc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	440b      	add	r3, r1
 8005dcc:	335d      	adds	r3, #93	; 0x5d
 8005dce:	2206      	movs	r2, #6
 8005dd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	b2d2      	uxtb	r2, r2
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f006 fb44 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dee:	461a      	mov	r2, r3
 8005df0:	2380      	movs	r3, #128	; 0x80
 8005df2:	6093      	str	r3, [r2, #8]
}
 8005df4:	e087      	b.n	8005f06 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b10      	cmp	r3, #16
 8005e0a:	d17c      	bne.n	8005f06 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	440b      	add	r3, r1
 8005e1a:	333f      	adds	r3, #63	; 0x3f
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	d122      	bne.n	8005e68 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4613      	mov	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	440b      	add	r3, r1
 8005e30:	3358      	adds	r3, #88	; 0x58
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e50:	f043 0302 	orr.w	r3, r3, #2
 8005e54:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4618      	mov	r0, r3
 8005e62:	f006 fb02 	bl	800c46a <USB_HC_Halt>
 8005e66:	e045      	b.n	8005ef4 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	440b      	add	r3, r1
 8005e76:	333f      	adds	r3, #63	; 0x3f
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00a      	beq.n	8005e94 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005e7e:	6879      	ldr	r1, [r7, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	440b      	add	r3, r1
 8005e8c:	333f      	adds	r3, #63	; 0x3f
 8005e8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d12f      	bne.n	8005ef4 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3358      	adds	r3, #88	; 0x58
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d121      	bne.n	8005ef4 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	440b      	add	r3, r1
 8005ebe:	335d      	adds	r3, #93	; 0x5d
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ede:	f043 0302 	orr.w	r3, r3, #2
 8005ee2:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	4611      	mov	r1, r2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f006 fabb 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f00:	461a      	mov	r2, r3
 8005f02:	2310      	movs	r3, #16
 8005f04:	6093      	str	r3, [r2, #8]
}
 8005f06:	bf00      	nop
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b086      	sub	sp, #24
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
 8005f16:	460b      	mov	r3, r1
 8005f18:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005f24:	78fb      	ldrb	r3, [r7, #3]
 8005f26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0304 	and.w	r3, r3, #4
 8005f3a:	2b04      	cmp	r3, #4
 8005f3c:	d119      	bne.n	8005f72 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	0151      	lsls	r1, r2, #5
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	440a      	add	r2, r1
 8005f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005f70:	e33e      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 0320 	and.w	r3, r3, #32
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d141      	bne.n	800600c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	461a      	mov	r2, r3
 8005f96:	2320      	movs	r3, #32
 8005f98:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	440b      	add	r3, r1
 8005fa8:	333d      	adds	r3, #61	; 0x3d
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	f040 831f 	bne.w	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4413      	add	r3, r2
 8005fbc:	00db      	lsls	r3, r3, #3
 8005fbe:	440b      	add	r3, r1
 8005fc0:	333d      	adds	r3, #61	; 0x3d
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005fc6:	6879      	ldr	r1, [r7, #4]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	440b      	add	r3, r1
 8005fd4:	335c      	adds	r3, #92	; 0x5c
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	0151      	lsls	r1, r2, #5
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	440a      	add	r2, r1
 8005ff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ff4:	f043 0302 	orr.w	r3, r3, #2
 8005ff8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	4611      	mov	r1, r2
 8006004:	4618      	mov	r0, r3
 8006006:	f006 fa30 	bl	800c46a <USB_HC_Halt>
}
 800600a:	e2f1      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	4413      	add	r3, r2
 8006014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601e:	2b40      	cmp	r3, #64	; 0x40
 8006020:	d13f      	bne.n	80060a2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	440b      	add	r3, r1
 8006030:	335d      	adds	r3, #93	; 0x5d
 8006032:	2204      	movs	r2, #4
 8006034:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4613      	mov	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	440b      	add	r3, r1
 8006044:	333d      	adds	r3, #61	; 0x3d
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4613      	mov	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	4413      	add	r3, r2
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	440b      	add	r3, r1
 8006058:	3358      	adds	r3, #88	; 0x58
 800605a:	2200      	movs	r2, #0
 800605c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	440a      	add	r2, r1
 8006074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006078:	f043 0302 	orr.w	r3, r3, #2
 800607c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	4611      	mov	r1, r2
 8006088:	4618      	mov	r0, r3
 800608a:	f006 f9ee 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	015a      	lsls	r2, r3, #5
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4413      	add	r3, r2
 8006096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609a:	461a      	mov	r2, r3
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	6093      	str	r3, [r2, #8]
}
 80060a0:	e2a6      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b8:	d122      	bne.n	8006100 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060d4:	f043 0302 	orr.w	r3, r3, #2
 80060d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	4611      	mov	r1, r2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f006 f9c0 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f6:	461a      	mov	r2, r3
 80060f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060fc:	6093      	str	r3, [r2, #8]
}
 80060fe:	e277      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d135      	bne.n	8006182 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4613      	mov	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	00db      	lsls	r3, r3, #3
 8006122:	440b      	add	r3, r1
 8006124:	3358      	adds	r3, #88	; 0x58
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	015a      	lsls	r2, r3, #5
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	4413      	add	r3, r2
 8006132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	0151      	lsls	r1, r2, #5
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	440a      	add	r2, r1
 8006140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006144:	f043 0302 	orr.w	r3, r3, #2
 8006148:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	4611      	mov	r1, r2
 8006154:	4618      	mov	r0, r3
 8006156:	f006 f988 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	4413      	add	r3, r2
 8006162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006166:	461a      	mov	r2, r3
 8006168:	2301      	movs	r3, #1
 800616a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	440b      	add	r3, r1
 800617a:	335d      	adds	r3, #93	; 0x5d
 800617c:	2201      	movs	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
}
 8006180:	e236      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d12b      	bne.n	80061f0 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a4:	461a      	mov	r2, r3
 80061a6:	2308      	movs	r3, #8
 80061a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061c4:	f043 0302 	orr.w	r3, r3, #2
 80061c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f006 f948 	bl	800c46a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	440b      	add	r3, r1
 80061e8:	335d      	adds	r3, #93	; 0x5d
 80061ea:	2205      	movs	r2, #5
 80061ec:	701a      	strb	r2, [r3, #0]
}
 80061ee:	e1ff      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b10      	cmp	r3, #16
 8006204:	d155      	bne.n	80062b2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006206:	6879      	ldr	r1, [r7, #4]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	4613      	mov	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	440b      	add	r3, r1
 8006214:	3358      	adds	r3, #88	; 0x58
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4613      	mov	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	4413      	add	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	440b      	add	r3, r1
 8006228:	335d      	adds	r3, #93	; 0x5d
 800622a:	2203      	movs	r2, #3
 800622c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	440b      	add	r3, r1
 800623c:	333d      	adds	r3, #61	; 0x3d
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d114      	bne.n	800626e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4613      	mov	r3, r2
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	4413      	add	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	440b      	add	r3, r1
 8006252:	333c      	adds	r3, #60	; 0x3c
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d109      	bne.n	800626e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	440b      	add	r3, r1
 8006268:	333d      	adds	r3, #61	; 0x3d
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	440a      	add	r2, r1
 8006284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006288:	f043 0302 	orr.w	r3, r3, #2
 800628c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f006 f8e6 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	461a      	mov	r2, r3
 80062ac:	2310      	movs	r3, #16
 80062ae:	6093      	str	r3, [r2, #8]
}
 80062b0:	e19e      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c4:	2b80      	cmp	r3, #128	; 0x80
 80062c6:	d12b      	bne.n	8006320 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e2:	f043 0302 	orr.w	r3, r3, #2
 80062e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	4611      	mov	r1, r2
 80062f2:	4618      	mov	r0, r3
 80062f4:	f006 f8b9 	bl	800c46a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80062f8:	6879      	ldr	r1, [r7, #4]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	440b      	add	r3, r1
 8006306:	335d      	adds	r3, #93	; 0x5d
 8006308:	2206      	movs	r2, #6
 800630a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4413      	add	r3, r2
 8006314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006318:	461a      	mov	r2, r3
 800631a:	2380      	movs	r3, #128	; 0x80
 800631c:	6093      	str	r3, [r2, #8]
}
 800631e:	e167      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006336:	d135      	bne.n	80063a4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	4413      	add	r3, r2
 8006340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	440a      	add	r2, r1
 800634e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006352:	f043 0302 	orr.w	r3, r3, #2
 8006356:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	4611      	mov	r1, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f006 f881 	bl	800c46a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4413      	add	r3, r2
 8006370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006374:	461a      	mov	r2, r3
 8006376:	2310      	movs	r3, #16
 8006378:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4413      	add	r3, r2
 8006382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006386:	461a      	mov	r2, r3
 8006388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800638c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	440b      	add	r3, r1
 800639c:	335d      	adds	r3, #93	; 0x5d
 800639e:	2208      	movs	r2, #8
 80063a0:	701a      	strb	r2, [r3, #0]
}
 80063a2:	e125      	b.n	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0302 	and.w	r3, r3, #2
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	f040 811a 	bne.w	80065f0 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063d6:	f023 0302 	bic.w	r3, r3, #2
 80063da:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80063dc:	6879      	ldr	r1, [r7, #4]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4613      	mov	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	440b      	add	r3, r1
 80063ea:	335d      	adds	r3, #93	; 0x5d
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d137      	bne.n	8006462 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80063f2:	6879      	ldr	r1, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	440b      	add	r3, r1
 8006400:	335c      	adds	r3, #92	; 0x5c
 8006402:	2201      	movs	r2, #1
 8006404:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	4613      	mov	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	440b      	add	r3, r1
 8006414:	333f      	adds	r3, #63	; 0x3f
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d00b      	beq.n	8006434 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800641c:	6879      	ldr	r1, [r7, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	440b      	add	r3, r1
 800642a:	333f      	adds	r3, #63	; 0x3f
 800642c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800642e:	2b03      	cmp	r3, #3
 8006430:	f040 80c5 	bne.w	80065be <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8006434:	6879      	ldr	r1, [r7, #4]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4613      	mov	r3, r2
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	440b      	add	r3, r1
 8006442:	3351      	adds	r3, #81	; 0x51
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	f083 0301 	eor.w	r3, r3, #1
 800644a:	b2d8      	uxtb	r0, r3
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	440b      	add	r3, r1
 800645a:	3351      	adds	r3, #81	; 0x51
 800645c:	4602      	mov	r2, r0
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	e0ad      	b.n	80065be <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	440b      	add	r3, r1
 8006470:	335d      	adds	r3, #93	; 0x5d
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b03      	cmp	r3, #3
 8006476:	d10a      	bne.n	800648e <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006478:	6879      	ldr	r1, [r7, #4]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	4613      	mov	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	440b      	add	r3, r1
 8006486:	335c      	adds	r3, #92	; 0x5c
 8006488:	2202      	movs	r2, #2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e097      	b.n	80065be <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	440b      	add	r3, r1
 800649c:	335d      	adds	r3, #93	; 0x5d
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d10a      	bne.n	80064ba <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	440b      	add	r3, r1
 80064b2:	335c      	adds	r3, #92	; 0x5c
 80064b4:	2202      	movs	r2, #2
 80064b6:	701a      	strb	r2, [r3, #0]
 80064b8:	e081      	b.n	80065be <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	00db      	lsls	r3, r3, #3
 80064c6:	440b      	add	r3, r1
 80064c8:	335d      	adds	r3, #93	; 0x5d
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b05      	cmp	r3, #5
 80064ce:	d10a      	bne.n	80064e6 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	440b      	add	r3, r1
 80064de:	335c      	adds	r3, #92	; 0x5c
 80064e0:	2205      	movs	r2, #5
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e06b      	b.n	80065be <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	440b      	add	r3, r1
 80064f4:	335d      	adds	r3, #93	; 0x5d
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b06      	cmp	r3, #6
 80064fa:	d00a      	beq.n	8006512 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	440b      	add	r3, r1
 800650a:	335d      	adds	r3, #93	; 0x5d
 800650c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800650e:	2b08      	cmp	r3, #8
 8006510:	d155      	bne.n	80065be <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8006512:	6879      	ldr	r1, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	4613      	mov	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	00db      	lsls	r3, r3, #3
 800651e:	440b      	add	r3, r1
 8006520:	3358      	adds	r3, #88	; 0x58
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	4403      	add	r3, r0
 8006534:	3358      	adds	r3, #88	; 0x58
 8006536:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	440b      	add	r3, r1
 8006546:	3358      	adds	r3, #88	; 0x58
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b03      	cmp	r3, #3
 800654c:	d914      	bls.n	8006578 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	4613      	mov	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4413      	add	r3, r2
 8006558:	00db      	lsls	r3, r3, #3
 800655a:	440b      	add	r3, r1
 800655c:	3358      	adds	r3, #88	; 0x58
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4613      	mov	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4413      	add	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	440b      	add	r3, r1
 8006570:	335c      	adds	r3, #92	; 0x5c
 8006572:	2204      	movs	r2, #4
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	e009      	b.n	800658c <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	440b      	add	r3, r1
 8006586:	335c      	adds	r3, #92	; 0x5c
 8006588:	2202      	movs	r2, #2
 800658a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b8:	461a      	mov	r2, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ca:	461a      	mov	r2, r3
 80065cc:	2302      	movs	r3, #2
 80065ce:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	b2d8      	uxtb	r0, r3
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	4613      	mov	r3, r2
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	4413      	add	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	440b      	add	r3, r1
 80065e2:	335c      	adds	r3, #92	; 0x5c
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	4601      	mov	r1, r0
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f00b fa9e 	bl	8011b2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80065f0:	bf00      	nop
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f003 030f 	and.w	r3, r3, #15
 8006618:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	0c5b      	lsrs	r3, r3, #17
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	091b      	lsrs	r3, r3, #4
 8006628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800662c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d003      	beq.n	800663c <HCD_RXQLVL_IRQHandler+0x44>
 8006634:	2b05      	cmp	r3, #5
 8006636:	f000 8082 	beq.w	800673e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800663a:	e083      	b.n	8006744 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d07f      	beq.n	8006742 <HCD_RXQLVL_IRQHandler+0x14a>
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	440b      	add	r3, r1
 8006650:	3344      	adds	r3, #68	; 0x44
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d074      	beq.n	8006742 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	69ba      	ldr	r2, [r7, #24]
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	00db      	lsls	r3, r3, #3
 8006668:	440b      	add	r3, r1
 800666a:	3344      	adds	r3, #68	; 0x44
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	b292      	uxth	r2, r2
 8006672:	4619      	mov	r1, r3
 8006674:	f005 fa9d 	bl	800bbb2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	4613      	mov	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	440b      	add	r3, r1
 8006686:	3344      	adds	r3, #68	; 0x44
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	18d1      	adds	r1, r2, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	4403      	add	r3, r0
 800669c:	3344      	adds	r3, #68	; 0x44
 800669e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4613      	mov	r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4413      	add	r3, r2
 80066aa:	00db      	lsls	r3, r3, #3
 80066ac:	440b      	add	r3, r1
 80066ae:	334c      	adds	r3, #76	; 0x4c
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	18d1      	adds	r1, r2, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4403      	add	r3, r0
 80066c4:	334c      	adds	r3, #76	; 0x4c
 80066c6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	4b1d      	ldr	r3, [pc, #116]	; (800674c <HCD_RXQLVL_IRQHandler+0x154>)
 80066d8:	4013      	ands	r3, r2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d031      	beq.n	8006742 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066f4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066fc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	4413      	add	r3, r2
 8006706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670a:	461a      	mov	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006710:	6879      	ldr	r1, [r7, #4]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	440b      	add	r3, r1
 800671e:	3350      	adds	r3, #80	; 0x50
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	f083 0301 	eor.w	r3, r3, #1
 8006726:	b2d8      	uxtb	r0, r3
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	4613      	mov	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4413      	add	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	440b      	add	r3, r1
 8006736:	3350      	adds	r3, #80	; 0x50
 8006738:	4602      	mov	r2, r0
 800673a:	701a      	strb	r2, [r3, #0]
      break;
 800673c:	e001      	b.n	8006742 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800673e:	bf00      	nop
 8006740:	e000      	b.n	8006744 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006742:	bf00      	nop
  }
}
 8006744:	bf00      	nop
 8006746:	3728      	adds	r7, #40	; 0x28
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	1ff80000 	.word	0x1ff80000

08006750 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800677c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b02      	cmp	r3, #2
 8006786:	d10b      	bne.n	80067a0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b01      	cmp	r3, #1
 8006790:	d102      	bne.n	8006798 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f00b f9ae 	bl	8011af4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f043 0302 	orr.w	r3, r3, #2
 800679e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d132      	bne.n	8006810 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f043 0308 	orr.w	r3, r3, #8
 80067b0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f003 0304 	and.w	r3, r3, #4
 80067b8:	2b04      	cmp	r3, #4
 80067ba:	d126      	bne.n	800680a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d113      	bne.n	80067ec <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80067ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067ce:	d106      	bne.n	80067de <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2102      	movs	r1, #2
 80067d6:	4618      	mov	r0, r3
 80067d8:	f005 fb20 	bl	800be1c <USB_InitFSLSPClkSel>
 80067dc:	e011      	b.n	8006802 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2101      	movs	r1, #1
 80067e4:	4618      	mov	r0, r3
 80067e6:	f005 fb19 	bl	800be1c <USB_InitFSLSPClkSel>
 80067ea:	e00a      	b.n	8006802 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d106      	bne.n	8006802 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067fa:	461a      	mov	r2, r3
 80067fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006800:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f00b f9a4 	bl	8011b50 <HAL_HCD_PortEnabled_Callback>
 8006808:	e002      	b.n	8006810 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f00b f9ae 	bl	8011b6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b20      	cmp	r3, #32
 8006818:	d103      	bne.n	8006822 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f043 0320 	orr.w	r3, r3, #32
 8006820:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006828:	461a      	mov	r2, r3
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	6013      	str	r3, [r2, #0]
}
 800682e:	bf00      	nop
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
	...

08006838 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e11f      	b.n	8006a8a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fb f892 	bl	8001988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2224      	movs	r2, #36	; 0x24
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0201 	bic.w	r2, r2, #1
 800687a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800688a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800689a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800689c:	f001 f80e 	bl	80078bc <HAL_RCC_GetPCLK1Freq>
 80068a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	4a7b      	ldr	r2, [pc, #492]	; (8006a94 <HAL_I2C_Init+0x25c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d807      	bhi.n	80068bc <HAL_I2C_Init+0x84>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a7a      	ldr	r2, [pc, #488]	; (8006a98 <HAL_I2C_Init+0x260>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	bf94      	ite	ls
 80068b4:	2301      	movls	r3, #1
 80068b6:	2300      	movhi	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e006      	b.n	80068ca <HAL_I2C_Init+0x92>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a77      	ldr	r2, [pc, #476]	; (8006a9c <HAL_I2C_Init+0x264>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	bf94      	ite	ls
 80068c4:	2301      	movls	r3, #1
 80068c6:	2300      	movhi	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d001      	beq.n	80068d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e0db      	b.n	8006a8a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	4a72      	ldr	r2, [pc, #456]	; (8006aa0 <HAL_I2C_Init+0x268>)
 80068d6:	fba2 2303 	umull	r2, r3, r2, r3
 80068da:	0c9b      	lsrs	r3, r3, #18
 80068dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a64      	ldr	r2, [pc, #400]	; (8006a94 <HAL_I2C_Init+0x25c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d802      	bhi.n	800690c <HAL_I2C_Init+0xd4>
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	3301      	adds	r3, #1
 800690a:	e009      	b.n	8006920 <HAL_I2C_Init+0xe8>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006912:	fb02 f303 	mul.w	r3, r2, r3
 8006916:	4a63      	ldr	r2, [pc, #396]	; (8006aa4 <HAL_I2C_Init+0x26c>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	099b      	lsrs	r3, r3, #6
 800691e:	3301      	adds	r3, #1
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	6812      	ldr	r2, [r2, #0]
 8006924:	430b      	orrs	r3, r1
 8006926:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006932:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	4956      	ldr	r1, [pc, #344]	; (8006a94 <HAL_I2C_Init+0x25c>)
 800693c:	428b      	cmp	r3, r1
 800693e:	d80d      	bhi.n	800695c <HAL_I2C_Init+0x124>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	1e59      	subs	r1, r3, #1
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	fbb1 f3f3 	udiv	r3, r1, r3
 800694e:	3301      	adds	r3, #1
 8006950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006954:	2b04      	cmp	r3, #4
 8006956:	bf38      	it	cc
 8006958:	2304      	movcc	r3, #4
 800695a:	e04f      	b.n	80069fc <HAL_I2C_Init+0x1c4>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d111      	bne.n	8006988 <HAL_I2C_Init+0x150>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	1e58      	subs	r0, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	440b      	add	r3, r1
 8006972:	fbb0 f3f3 	udiv	r3, r0, r3
 8006976:	3301      	adds	r3, #1
 8006978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800697c:	2b00      	cmp	r3, #0
 800697e:	bf0c      	ite	eq
 8006980:	2301      	moveq	r3, #1
 8006982:	2300      	movne	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	e012      	b.n	80069ae <HAL_I2C_Init+0x176>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	1e58      	subs	r0, r3, #1
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6859      	ldr	r1, [r3, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	0099      	lsls	r1, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	fbb0 f3f3 	udiv	r3, r0, r3
 800699e:	3301      	adds	r3, #1
 80069a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf0c      	ite	eq
 80069a8:	2301      	moveq	r3, #1
 80069aa:	2300      	movne	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_I2C_Init+0x17e>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e022      	b.n	80069fc <HAL_I2C_Init+0x1c4>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10e      	bne.n	80069dc <HAL_I2C_Init+0x1a4>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1e58      	subs	r0, r3, #1
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6859      	ldr	r1, [r3, #4]
 80069c6:	460b      	mov	r3, r1
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	440b      	add	r3, r1
 80069cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80069d0:	3301      	adds	r3, #1
 80069d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069da:	e00f      	b.n	80069fc <HAL_I2C_Init+0x1c4>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	1e58      	subs	r0, r3, #1
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6859      	ldr	r1, [r3, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	0099      	lsls	r1, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f2:	3301      	adds	r3, #1
 80069f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	6809      	ldr	r1, [r1, #0]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69da      	ldr	r2, [r3, #28]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	6911      	ldr	r1, [r2, #16]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	68d2      	ldr	r2, [r2, #12]
 8006a36:	4311      	orrs	r1, r2
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6812      	ldr	r2, [r2, #0]
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695a      	ldr	r2, [r3, #20]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f042 0201 	orr.w	r2, r2, #1
 8006a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	000186a0 	.word	0x000186a0
 8006a98:	001e847f 	.word	0x001e847f
 8006a9c:	003d08ff 	.word	0x003d08ff
 8006aa0:	431bde83 	.word	0x431bde83
 8006aa4:	10624dd3 	.word	0x10624dd3

08006aa8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e154      	b.n	8006d64 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d109      	bne.n	8006ada <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a98      	ldr	r2, [pc, #608]	; (8006d34 <HAL_I2S_Init+0x28c>)
 8006ad2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fa ff9f 	bl	8001a18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006af0:	f023 030f 	bic.w	r3, r3, #15
 8006af4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2202      	movs	r2, #2
 8006afc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d06f      	beq.n	8006be6 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006b0e:	2310      	movs	r3, #16
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e001      	b.n	8006b18 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006b14:	2320      	movs	r3, #32
 8006b16:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d802      	bhi.n	8006b26 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a83      	ldr	r2, [pc, #524]	; (8006d38 <HAL_I2S_Init+0x290>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d004      	beq.n	8006b3a <HAL_I2S_Init+0x92>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a81      	ldr	r2, [pc, #516]	; (8006d3c <HAL_I2S_Init+0x294>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d104      	bne.n	8006b44 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	f001 f9a4 	bl	8007e88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b40:	60f8      	str	r0, [r7, #12]
 8006b42:	e003      	b.n	8006b4c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006b44:	2002      	movs	r0, #2
 8006b46:	f001 f99f 	bl	8007e88 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b4a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d125      	bne.n	8006ba2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d010      	beq.n	8006b80 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	005b      	lsls	r3, r3, #1
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7a:	3305      	adds	r3, #5
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	e01f      	b.n	8006bc0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	4413      	add	r3, r2
 8006b90:	005b      	lsls	r3, r3, #1
 8006b92:	461a      	mov	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9c:	3305      	adds	r3, #5
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	e00e      	b.n	8006bc0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	fbb2 f2f3 	udiv	r2, r2, r3
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbc:	3305      	adds	r3, #5
 8006bbe:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4a5f      	ldr	r2, [pc, #380]	; (8006d40 <HAL_I2S_Init+0x298>)
 8006bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bc8:	08db      	lsrs	r3, r3, #3
 8006bca:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	61bb      	str	r3, [r7, #24]
 8006be4:	e003      	b.n	8006bee <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006be6:	2302      	movs	r3, #2
 8006be8:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d902      	bls.n	8006bfa <HAL_I2S_Init+0x152>
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2bff      	cmp	r3, #255	; 0xff
 8006bf8:	d907      	bls.n	8006c0a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bfe:	f043 0210 	orr.w	r2, r3, #16
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e0ac      	b.n	8006d64 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691a      	ldr	r2, [r3, #16]
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	ea42 0103 	orr.w	r1, r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006c28:	f023 030f 	bic.w	r3, r3, #15
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	6851      	ldr	r1, [r2, #4]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	6892      	ldr	r2, [r2, #8]
 8006c34:	4311      	orrs	r1, r2
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	68d2      	ldr	r2, [r2, #12]
 8006c3a:	4311      	orrs	r1, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6992      	ldr	r2, [r2, #24]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	431a      	orrs	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b30      	cmp	r3, #48	; 0x30
 8006c54:	d003      	beq.n	8006c5e <HAL_I2S_Init+0x1b6>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2bb0      	cmp	r3, #176	; 0xb0
 8006c5c:	d107      	bne.n	8006c6e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69da      	ldr	r2, [r3, #28]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c6c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d16e      	bne.n	8006d54 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a32      	ldr	r2, [pc, #200]	; (8006d44 <HAL_I2S_Init+0x29c>)
 8006c7a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a2d      	ldr	r2, [pc, #180]	; (8006d38 <HAL_I2S_Init+0x290>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d101      	bne.n	8006c8a <HAL_I2S_Init+0x1e2>
 8006c86:	4b30      	ldr	r3, [pc, #192]	; (8006d48 <HAL_I2S_Init+0x2a0>)
 8006c88:	e001      	b.n	8006c8e <HAL_I2S_Init+0x1e6>
 8006c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	4928      	ldr	r1, [pc, #160]	; (8006d38 <HAL_I2S_Init+0x290>)
 8006c96:	428a      	cmp	r2, r1
 8006c98:	d101      	bne.n	8006c9e <HAL_I2S_Init+0x1f6>
 8006c9a:	4a2b      	ldr	r2, [pc, #172]	; (8006d48 <HAL_I2S_Init+0x2a0>)
 8006c9c:	e001      	b.n	8006ca2 <HAL_I2S_Init+0x1fa>
 8006c9e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006ca2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006ca6:	f023 030f 	bic.w	r3, r3, #15
 8006caa:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <HAL_I2S_Init+0x290>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d101      	bne.n	8006cba <HAL_I2S_Init+0x212>
 8006cb6:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <HAL_I2S_Init+0x2a0>)
 8006cb8:	e001      	b.n	8006cbe <HAL_I2S_Init+0x216>
 8006cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1c      	ldr	r2, [pc, #112]	; (8006d38 <HAL_I2S_Init+0x290>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d101      	bne.n	8006cd0 <HAL_I2S_Init+0x228>
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_I2S_Init+0x2a0>)
 8006cce:	e001      	b.n	8006cd4 <HAL_I2S_Init+0x22c>
 8006cd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cd4:	69db      	ldr	r3, [r3, #28]
 8006cd6:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce0:	d003      	beq.n	8006cea <HAL_I2S_Init+0x242>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cee:	613b      	str	r3, [r7, #16]
 8006cf0:	e001      	b.n	8006cf6 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	b299      	uxth	r1, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006d0c:	4303      	orrs	r3, r0
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	430b      	orrs	r3, r1
 8006d12:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006d14:	4313      	orrs	r3, r2
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	897b      	ldrh	r3, [r7, #10]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006d22:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a03      	ldr	r2, [pc, #12]	; (8006d38 <HAL_I2S_Init+0x290>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d10e      	bne.n	8006d4c <HAL_I2S_Init+0x2a4>
 8006d2e:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <HAL_I2S_Init+0x2a0>)
 8006d30:	e00e      	b.n	8006d50 <HAL_I2S_Init+0x2a8>
 8006d32:	bf00      	nop
 8006d34:	08006e27 	.word	0x08006e27
 8006d38:	40003800 	.word	0x40003800
 8006d3c:	40003c00 	.word	0x40003c00
 8006d40:	cccccccd 	.word	0xcccccccd
 8006d44:	08006f3d 	.word	0x08006f3d
 8006d48:	40003400 	.word	0x40003400
 8006d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d50:	897a      	ldrh	r2, [r7, #10]
 8006d52:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3720      	adds	r7, #32
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	1c9a      	adds	r2, r3, #2
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10e      	bne.n	8006dc0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006db0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fc f894 	bl	8002ee8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	b292      	uxth	r2, r2
 8006ddc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de2:	1c9a      	adds	r2, r3, #2
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	3b01      	subs	r3, #1
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10e      	bne.n	8006e1e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f7fc f887 	bl	8002f2c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b086      	sub	sp, #24
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d13a      	bne.n	8006eb8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d109      	bne.n	8006e60 <I2S_IRQHandler+0x3a>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d102      	bne.n	8006e60 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff ffb4 	bl	8006dc8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b40      	cmp	r3, #64	; 0x40
 8006e68:	d126      	bne.n	8006eb8 <I2S_IRQHandler+0x92>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b20      	cmp	r3, #32
 8006e76:	d11f      	bne.n	8006eb8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e86:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	613b      	str	r3, [r7, #16]
 8006e9c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	f043 0202 	orr.w	r2, r3, #2
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fc f822 	bl	8002efc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d136      	bne.n	8006f32 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d109      	bne.n	8006ee2 <I2S_IRQHandler+0xbc>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d102      	bne.n	8006ee2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff ff45 	bl	8006d6c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d122      	bne.n	8006f32 <I2S_IRQHandler+0x10c>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d11b      	bne.n	8006f32 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f08:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60fb      	str	r3, [r7, #12]
 8006f16:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f24:	f043 0204 	orr.w	r2, r3, #4
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f7fb ffe5 	bl	8002efc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f32:	bf00      	nop
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4aa2      	ldr	r2, [pc, #648]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d101      	bne.n	8006f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006f56:	4ba2      	ldr	r3, [pc, #648]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f58:	e001      	b.n	8006f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a9b      	ldr	r2, [pc, #620]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d101      	bne.n	8006f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006f74:	4b9a      	ldr	r3, [pc, #616]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006f76:	e001      	b.n	8006f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006f78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f88:	d004      	beq.n	8006f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f040 8099 	bne.w	80070c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d107      	bne.n	8006fae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f925 	bl	80071f8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d107      	bne.n	8006fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f9c8 	bl	8007358 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b40      	cmp	r3, #64	; 0x40
 8006fd0:	d13a      	bne.n	8007048 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d035      	beq.n	8007048 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a7e      	ldr	r2, [pc, #504]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d101      	bne.n	8006fea <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006fe6:	4b7e      	ldr	r3, [pc, #504]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006fe8:	e001      	b.n	8006fee <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006fea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006fee:	685a      	ldr	r2, [r3, #4]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4979      	ldr	r1, [pc, #484]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ff6:	428b      	cmp	r3, r1
 8006ff8:	d101      	bne.n	8006ffe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006ffa:	4b79      	ldr	r3, [pc, #484]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ffc:	e001      	b.n	8007002 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006ffe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007002:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007006:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007016:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	60fb      	str	r3, [r7, #12]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703a:	f043 0202 	orr.w	r2, r3, #2
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fb ff5a 	bl	8002efc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b08      	cmp	r3, #8
 8007050:	f040 80be 	bne.w	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80b8 	beq.w	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800706e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a59      	ldr	r2, [pc, #356]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d101      	bne.n	800707e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800707a:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800707c:	e001      	b.n	8007082 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800707e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4954      	ldr	r1, [pc, #336]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800708a:	428b      	cmp	r3, r1
 800708c:	d101      	bne.n	8007092 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800708e:	4b54      	ldr	r3, [pc, #336]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007090:	e001      	b.n	8007096 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007092:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007096:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800709a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800709c:	2300      	movs	r3, #0
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	60bb      	str	r3, [r7, #8]
 80070a8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2201      	movs	r2, #1
 80070ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070b6:	f043 0204 	orr.w	r2, r3, #4
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fb ff1c 	bl	8002efc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070c4:	e084      	b.n	80071d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d107      	bne.n	80070e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f8be 	bl	800725c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d107      	bne.n	80070fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f8fd 	bl	80072f4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007100:	2b40      	cmp	r3, #64	; 0x40
 8007102:	d12f      	bne.n	8007164 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	d02a      	beq.n	8007164 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800711c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2e      	ldr	r2, [pc, #184]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8007128:	4b2d      	ldr	r3, [pc, #180]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800712a:	e001      	b.n	8007130 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800712c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4929      	ldr	r1, [pc, #164]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007138:	428b      	cmp	r3, r1
 800713a:	d101      	bne.n	8007140 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800713c:	4b28      	ldr	r3, [pc, #160]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800713e:	e001      	b.n	8007144 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007140:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007144:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007148:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	f043 0202 	orr.w	r2, r3, #2
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fb fecc 	bl	8002efc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b08      	cmp	r3, #8
 800716c:	d131      	bne.n	80071d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d02c      	beq.n	80071d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a17      	ldr	r2, [pc, #92]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d101      	bne.n	8007186 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007182:	4b17      	ldr	r3, [pc, #92]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007184:	e001      	b.n	800718a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8007186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4912      	ldr	r1, [pc, #72]	; (80071dc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007192:	428b      	cmp	r3, r1
 8007194:	d101      	bne.n	800719a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8007196:	4b12      	ldr	r3, [pc, #72]	; (80071e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007198:	e001      	b.n	800719e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800719a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800719e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80071a2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071b2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c0:	f043 0204 	orr.w	r2, r3, #4
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fb fe97 	bl	8002efc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071ce:	e000      	b.n	80071d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80071d0:	bf00      	nop
}
 80071d2:	bf00      	nop
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40003800 	.word	0x40003800
 80071e0:	40003400 	.word	0x40003400

080071e4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	1c99      	adds	r1, r3, #2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6251      	str	r1, [r2, #36]	; 0x24
 800720a:	881a      	ldrh	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d113      	bne.n	8007252 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007238:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800723e:	b29b      	uxth	r3, r3
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ffc9 	bl	80071e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007252:	bf00      	nop
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007268:	1c99      	adds	r1, r3, #2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6251      	str	r1, [r2, #36]	; 0x24
 800726e:	8819      	ldrh	r1, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1d      	ldr	r2, [pc, #116]	; (80072ec <I2SEx_TxISR_I2SExt+0x90>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d101      	bne.n	800727e <I2SEx_TxISR_I2SExt+0x22>
 800727a:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <I2SEx_TxISR_I2SExt+0x94>)
 800727c:	e001      	b.n	8007282 <I2SEx_TxISR_I2SExt+0x26>
 800727e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007282:	460a      	mov	r2, r1
 8007284:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800728a:	b29b      	uxth	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	b29a      	uxth	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d121      	bne.n	80072e2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a12      	ldr	r2, [pc, #72]	; (80072ec <I2SEx_TxISR_I2SExt+0x90>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d101      	bne.n	80072ac <I2SEx_TxISR_I2SExt+0x50>
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <I2SEx_TxISR_I2SExt+0x94>)
 80072aa:	e001      	b.n	80072b0 <I2SEx_TxISR_I2SExt+0x54>
 80072ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	490d      	ldr	r1, [pc, #52]	; (80072ec <I2SEx_TxISR_I2SExt+0x90>)
 80072b8:	428b      	cmp	r3, r1
 80072ba:	d101      	bne.n	80072c0 <I2SEx_TxISR_I2SExt+0x64>
 80072bc:	4b0c      	ldr	r3, [pc, #48]	; (80072f0 <I2SEx_TxISR_I2SExt+0x94>)
 80072be:	e001      	b.n	80072c4 <I2SEx_TxISR_I2SExt+0x68>
 80072c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80072c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d106      	bne.n	80072e2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff81 	bl	80071e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80072e2:	bf00      	nop
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40003800 	.word	0x40003800
 80072f0:	40003400 	.word	0x40003400

080072f4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68d8      	ldr	r0, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007306:	1c99      	adds	r1, r3, #2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800730c:	b282      	uxth	r2, r0
 800730e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	b29a      	uxth	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007322:	b29b      	uxth	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d113      	bne.n	8007350 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007336:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff ff4a 	bl	80071e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a20      	ldr	r2, [pc, #128]	; (80073e8 <I2SEx_RxISR_I2SExt+0x90>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d101      	bne.n	800736e <I2SEx_RxISR_I2SExt+0x16>
 800736a:	4b20      	ldr	r3, [pc, #128]	; (80073ec <I2SEx_RxISR_I2SExt+0x94>)
 800736c:	e001      	b.n	8007372 <I2SEx_RxISR_I2SExt+0x1a>
 800736e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007372:	68d8      	ldr	r0, [r3, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	1c99      	adds	r1, r3, #2
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800737e:	b282      	uxth	r2, r0
 8007380:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007386:	b29b      	uxth	r3, r3
 8007388:	3b01      	subs	r3, #1
 800738a:	b29a      	uxth	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d121      	bne.n	80073de <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a12      	ldr	r2, [pc, #72]	; (80073e8 <I2SEx_RxISR_I2SExt+0x90>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d101      	bne.n	80073a8 <I2SEx_RxISR_I2SExt+0x50>
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <I2SEx_RxISR_I2SExt+0x94>)
 80073a6:	e001      	b.n	80073ac <I2SEx_RxISR_I2SExt+0x54>
 80073a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	490d      	ldr	r1, [pc, #52]	; (80073e8 <I2SEx_RxISR_I2SExt+0x90>)
 80073b4:	428b      	cmp	r3, r1
 80073b6:	d101      	bne.n	80073bc <I2SEx_RxISR_I2SExt+0x64>
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <I2SEx_RxISR_I2SExt+0x94>)
 80073ba:	e001      	b.n	80073c0 <I2SEx_RxISR_I2SExt+0x68>
 80073bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80073c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80073c4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d106      	bne.n	80073de <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff ff03 	bl	80071e4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073de:	bf00      	nop
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	40003800 	.word	0x40003800
 80073ec:	40003400 	.word	0x40003400

080073f0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80073f8:	f7fc f974 	bl	80036e4 <HAL_GetTick>
 80073fc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e069      	b.n	80074dc <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10b      	bne.n	800742c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7fa fbb5 	bl	8001b8c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007422:	f241 3188 	movw	r1, #5000	; 0x1388
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f85e 	bl	80074e8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	3b01      	subs	r3, #1
 800743c:	021a      	lsls	r2, r3, #8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	2120      	movs	r1, #32
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f856 	bl	8007504 <QSPI_WaitFlagStateUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d137      	bne.n	80074d2 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800746c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6852      	ldr	r2, [r2, #4]
 8007474:	0611      	lsls	r1, r2, #24
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	68d2      	ldr	r2, [r2, #12]
 800747a:	4311      	orrs	r1, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	69d2      	ldr	r2, [r2, #28]
 8007480:	4311      	orrs	r1, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6a12      	ldr	r2, [r2, #32]
 8007486:	4311      	orrs	r1, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	430b      	orrs	r3, r1
 800748e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <HAL_QSPI_Init+0xf4>)
 8007498:	4013      	ands	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6912      	ldr	r2, [r2, #16]
 800749e:	0411      	lsls	r1, r2, #16
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6952      	ldr	r2, [r2, #20]
 80074a4:	4311      	orrs	r1, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	6992      	ldr	r2, [r2, #24]
 80074aa:	4311      	orrs	r1, r2
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	430b      	orrs	r3, r1
 80074b2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f042 0201 	orr.w	r2, r2, #1
 80074c2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80074da:	7afb      	ldrb	r3, [r7, #11]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	ffe0f8fe 	.word	0xffe0f8fe

080074e8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	4613      	mov	r3, r2
 8007512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007514:	e01a      	b.n	800754c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d016      	beq.n	800754c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800751e:	f7fc f8e1 	bl	80036e4 <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	429a      	cmp	r2, r3
 800752c:	d302      	bcc.n	8007534 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2204      	movs	r2, #4
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007540:	f043 0201 	orr.w	r2, r3, #1
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e00e      	b.n	800756a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	4013      	ands	r3, r2
 8007556:	2b00      	cmp	r3, #0
 8007558:	bf14      	ite	ne
 800755a:	2301      	movne	r3, #1
 800755c:	2300      	moveq	r3, #0
 800755e:	b2db      	uxtb	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	429a      	cmp	r2, r3
 8007566:	d1d6      	bne.n	8007516 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
	...

08007574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e0cc      	b.n	8007722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007588:	4b68      	ldr	r3, [pc, #416]	; (800772c <HAL_RCC_ClockConfig+0x1b8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 030f 	and.w	r3, r3, #15
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	429a      	cmp	r2, r3
 8007594:	d90c      	bls.n	80075b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007596:	4b65      	ldr	r3, [pc, #404]	; (800772c <HAL_RCC_ClockConfig+0x1b8>)
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800759e:	4b63      	ldr	r3, [pc, #396]	; (800772c <HAL_RCC_ClockConfig+0x1b8>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d001      	beq.n	80075b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0b8      	b.n	8007722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d020      	beq.n	80075fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075c8:	4b59      	ldr	r3, [pc, #356]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	4a58      	ldr	r2, [pc, #352]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80075ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0308 	and.w	r3, r3, #8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075e0:	4b53      	ldr	r3, [pc, #332]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	4a52      	ldr	r2, [pc, #328]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075ec:	4b50      	ldr	r3, [pc, #320]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	494d      	ldr	r1, [pc, #308]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d044      	beq.n	8007694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d107      	bne.n	8007622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007612:	4b47      	ldr	r3, [pc, #284]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d119      	bne.n	8007652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e07f      	b.n	8007722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d003      	beq.n	8007632 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800762e:	2b03      	cmp	r3, #3
 8007630:	d107      	bne.n	8007642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007632:	4b3f      	ldr	r3, [pc, #252]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e06f      	b.n	8007722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007642:	4b3b      	ldr	r3, [pc, #236]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e067      	b.n	8007722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007652:	4b37      	ldr	r3, [pc, #220]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	f023 0203 	bic.w	r2, r3, #3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	4934      	ldr	r1, [pc, #208]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 8007660:	4313      	orrs	r3, r2
 8007662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007664:	f7fc f83e 	bl	80036e4 <HAL_GetTick>
 8007668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800766a:	e00a      	b.n	8007682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800766c:	f7fc f83a 	bl	80036e4 <HAL_GetTick>
 8007670:	4602      	mov	r2, r0
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	f241 3288 	movw	r2, #5000	; 0x1388
 800767a:	4293      	cmp	r3, r2
 800767c:	d901      	bls.n	8007682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e04f      	b.n	8007722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007682:	4b2b      	ldr	r3, [pc, #172]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 020c 	and.w	r2, r3, #12
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	429a      	cmp	r2, r3
 8007692:	d1eb      	bne.n	800766c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007694:	4b25      	ldr	r3, [pc, #148]	; (800772c <HAL_RCC_ClockConfig+0x1b8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 030f 	and.w	r3, r3, #15
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d20c      	bcs.n	80076bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076a2:	4b22      	ldr	r3, [pc, #136]	; (800772c <HAL_RCC_ClockConfig+0x1b8>)
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	b2d2      	uxtb	r2, r2
 80076a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076aa:	4b20      	ldr	r3, [pc, #128]	; (800772c <HAL_RCC_ClockConfig+0x1b8>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 030f 	and.w	r3, r3, #15
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d001      	beq.n	80076bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e032      	b.n	8007722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0304 	and.w	r3, r3, #4
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d008      	beq.n	80076da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076c8:	4b19      	ldr	r3, [pc, #100]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	4916      	ldr	r1, [pc, #88]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80076e6:	4b12      	ldr	r3, [pc, #72]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	490e      	ldr	r1, [pc, #56]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80076fa:	f000 f821 	bl	8007740 <HAL_RCC_GetSysClockFreq>
 80076fe:	4601      	mov	r1, r0
 8007700:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <HAL_RCC_ClockConfig+0x1bc>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	091b      	lsrs	r3, r3, #4
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	4a0a      	ldr	r2, [pc, #40]	; (8007734 <HAL_RCC_ClockConfig+0x1c0>)
 800770c:	5cd3      	ldrb	r3, [r2, r3]
 800770e:	fa21 f303 	lsr.w	r3, r1, r3
 8007712:	4a09      	ldr	r2, [pc, #36]	; (8007738 <HAL_RCC_ClockConfig+0x1c4>)
 8007714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007716:	4b09      	ldr	r3, [pc, #36]	; (800773c <HAL_RCC_ClockConfig+0x1c8>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f7fa fd2c 	bl	8002178 <HAL_InitTick>

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	40023c00 	.word	0x40023c00
 8007730:	40023800 	.word	0x40023800
 8007734:	08012358 	.word	0x08012358
 8007738:	20000000 	.word	0x20000000
 800773c:	2000005c 	.word	0x2000005c

08007740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	607b      	str	r3, [r7, #4]
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	2300      	movs	r3, #0
 8007750:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007752:	2300      	movs	r3, #0
 8007754:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007756:	4b50      	ldr	r3, [pc, #320]	; (8007898 <HAL_RCC_GetSysClockFreq+0x158>)
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 030c 	and.w	r3, r3, #12
 800775e:	2b04      	cmp	r3, #4
 8007760:	d007      	beq.n	8007772 <HAL_RCC_GetSysClockFreq+0x32>
 8007762:	2b08      	cmp	r3, #8
 8007764:	d008      	beq.n	8007778 <HAL_RCC_GetSysClockFreq+0x38>
 8007766:	2b00      	cmp	r3, #0
 8007768:	f040 808d 	bne.w	8007886 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800776c:	4b4b      	ldr	r3, [pc, #300]	; (800789c <HAL_RCC_GetSysClockFreq+0x15c>)
 800776e:	60bb      	str	r3, [r7, #8]
       break;
 8007770:	e08c      	b.n	800788c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007772:	4b4b      	ldr	r3, [pc, #300]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x160>)
 8007774:	60bb      	str	r3, [r7, #8]
      break;
 8007776:	e089      	b.n	800788c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007778:	4b47      	ldr	r3, [pc, #284]	; (8007898 <HAL_RCC_GetSysClockFreq+0x158>)
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007780:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007782:	4b45      	ldr	r3, [pc, #276]	; (8007898 <HAL_RCC_GetSysClockFreq+0x158>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800778a:	2b00      	cmp	r3, #0
 800778c:	d023      	beq.n	80077d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800778e:	4b42      	ldr	r3, [pc, #264]	; (8007898 <HAL_RCC_GetSysClockFreq+0x158>)
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	099b      	lsrs	r3, r3, #6
 8007794:	f04f 0400 	mov.w	r4, #0
 8007798:	f240 11ff 	movw	r1, #511	; 0x1ff
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	ea03 0501 	and.w	r5, r3, r1
 80077a4:	ea04 0602 	and.w	r6, r4, r2
 80077a8:	4a3d      	ldr	r2, [pc, #244]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80077aa:	fb02 f106 	mul.w	r1, r2, r6
 80077ae:	2200      	movs	r2, #0
 80077b0:	fb02 f205 	mul.w	r2, r2, r5
 80077b4:	440a      	add	r2, r1
 80077b6:	493a      	ldr	r1, [pc, #232]	; (80078a0 <HAL_RCC_GetSysClockFreq+0x160>)
 80077b8:	fba5 0101 	umull	r0, r1, r5, r1
 80077bc:	1853      	adds	r3, r2, r1
 80077be:	4619      	mov	r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f04f 0400 	mov.w	r4, #0
 80077c6:	461a      	mov	r2, r3
 80077c8:	4623      	mov	r3, r4
 80077ca:	f7f8 fd31 	bl	8000230 <__aeabi_uldivmod>
 80077ce:	4603      	mov	r3, r0
 80077d0:	460c      	mov	r4, r1
 80077d2:	60fb      	str	r3, [r7, #12]
 80077d4:	e049      	b.n	800786a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077d6:	4b30      	ldr	r3, [pc, #192]	; (8007898 <HAL_RCC_GetSysClockFreq+0x158>)
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	099b      	lsrs	r3, r3, #6
 80077dc:	f04f 0400 	mov.w	r4, #0
 80077e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	ea03 0501 	and.w	r5, r3, r1
 80077ec:	ea04 0602 	and.w	r6, r4, r2
 80077f0:	4629      	mov	r1, r5
 80077f2:	4632      	mov	r2, r6
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	f04f 0400 	mov.w	r4, #0
 80077fc:	0154      	lsls	r4, r2, #5
 80077fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007802:	014b      	lsls	r3, r1, #5
 8007804:	4619      	mov	r1, r3
 8007806:	4622      	mov	r2, r4
 8007808:	1b49      	subs	r1, r1, r5
 800780a:	eb62 0206 	sbc.w	r2, r2, r6
 800780e:	f04f 0300 	mov.w	r3, #0
 8007812:	f04f 0400 	mov.w	r4, #0
 8007816:	0194      	lsls	r4, r2, #6
 8007818:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800781c:	018b      	lsls	r3, r1, #6
 800781e:	1a5b      	subs	r3, r3, r1
 8007820:	eb64 0402 	sbc.w	r4, r4, r2
 8007824:	f04f 0100 	mov.w	r1, #0
 8007828:	f04f 0200 	mov.w	r2, #0
 800782c:	00e2      	lsls	r2, r4, #3
 800782e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007832:	00d9      	lsls	r1, r3, #3
 8007834:	460b      	mov	r3, r1
 8007836:	4614      	mov	r4, r2
 8007838:	195b      	adds	r3, r3, r5
 800783a:	eb44 0406 	adc.w	r4, r4, r6
 800783e:	f04f 0100 	mov.w	r1, #0
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	02a2      	lsls	r2, r4, #10
 8007848:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800784c:	0299      	lsls	r1, r3, #10
 800784e:	460b      	mov	r3, r1
 8007850:	4614      	mov	r4, r2
 8007852:	4618      	mov	r0, r3
 8007854:	4621      	mov	r1, r4
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f04f 0400 	mov.w	r4, #0
 800785c:	461a      	mov	r2, r3
 800785e:	4623      	mov	r3, r4
 8007860:	f7f8 fce6 	bl	8000230 <__aeabi_uldivmod>
 8007864:	4603      	mov	r3, r0
 8007866:	460c      	mov	r4, r1
 8007868:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800786a:	4b0b      	ldr	r3, [pc, #44]	; (8007898 <HAL_RCC_GetSysClockFreq+0x158>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	0c1b      	lsrs	r3, r3, #16
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	3301      	adds	r3, #1
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007882:	60bb      	str	r3, [r7, #8]
      break;
 8007884:	e002      	b.n	800788c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <HAL_RCC_GetSysClockFreq+0x15c>)
 8007888:	60bb      	str	r3, [r7, #8]
      break;
 800788a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800788c:	68bb      	ldr	r3, [r7, #8]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007896:	bf00      	nop
 8007898:	40023800 	.word	0x40023800
 800789c:	00f42400 	.word	0x00f42400
 80078a0:	017d7840 	.word	0x017d7840

080078a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a4:	b480      	push	{r7}
 80078a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078a8:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80078aa:	681b      	ldr	r3, [r3, #0]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20000000 	.word	0x20000000

080078bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078c0:	f7ff fff0 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 80078c4:	4601      	mov	r1, r0
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	0a9b      	lsrs	r3, r3, #10
 80078cc:	f003 0307 	and.w	r3, r3, #7
 80078d0:	4a03      	ldr	r2, [pc, #12]	; (80078e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80078d2:	5cd3      	ldrb	r3, [r2, r3]
 80078d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80078d8:	4618      	mov	r0, r3
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40023800 	.word	0x40023800
 80078e0:	08012368 	.word	0x08012368

080078e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80078e8:	f7ff ffdc 	bl	80078a4 <HAL_RCC_GetHCLKFreq>
 80078ec:	4601      	mov	r1, r0
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	0b5b      	lsrs	r3, r3, #13
 80078f4:	f003 0307 	and.w	r3, r3, #7
 80078f8:	4a03      	ldr	r2, [pc, #12]	; (8007908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078fa:	5cd3      	ldrb	r3, [r2, r3]
 80078fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007900:	4618      	mov	r0, r3
 8007902:	bd80      	pop	{r7, pc}
 8007904:	40023800 	.word	0x40023800
 8007908:	08012368 	.word	0x08012368

0800790c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	220f      	movs	r2, #15
 800791a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800791c:	4b12      	ldr	r3, [pc, #72]	; (8007968 <HAL_RCC_GetClockConfig+0x5c>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 0203 	and.w	r2, r3, #3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007928:	4b0f      	ldr	r3, [pc, #60]	; (8007968 <HAL_RCC_GetClockConfig+0x5c>)
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007934:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <HAL_RCC_GetClockConfig+0x5c>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007940:	4b09      	ldr	r3, [pc, #36]	; (8007968 <HAL_RCC_GetClockConfig+0x5c>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	08db      	lsrs	r3, r3, #3
 8007946:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800794e:	4b07      	ldr	r3, [pc, #28]	; (800796c <HAL_RCC_GetClockConfig+0x60>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 020f 	and.w	r2, r3, #15
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	601a      	str	r2, [r3, #0]
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40023800 	.word	0x40023800
 800796c:	40023c00 	.word	0x40023c00

08007970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007984:	2300      	movs	r3, #0
 8007986:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0301 	and.w	r3, r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007994:	4b7a      	ldr	r3, [pc, #488]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	4977      	ldr	r1, [pc, #476]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80079b2:	2301      	movs	r3, #1
 80079b4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d010      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80079c2:	4b6f      	ldr	r3, [pc, #444]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80079c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079c8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	496b      	ldr	r1, [pc, #428]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a1b      	ldr	r3, [r3, #32]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80079e0:	2301      	movs	r3, #1
 80079e2:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d022      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80079f0:	4b63      	ldr	r3, [pc, #396]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80079f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fe:	4960      	ldr	r1, [pc, #384]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a1a:	d10c      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007a1c:	4b58      	ldr	r3, [pc, #352]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a22:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	4954      	ldr	r1, [pc, #336]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d022      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8007a42:	4b4f      	ldr	r3, [pc, #316]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a50:	494b      	ldr	r1, [pc, #300]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007a60:	2301      	movs	r3, #1
 8007a62:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a6c:	d10c      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007a6e:	4b44      	ldr	r3, [pc, #272]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	493f      	ldr	r1, [pc, #252]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 808a 	beq.w	8007baa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	4b39      	ldr	r3, [pc, #228]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	4a38      	ldr	r2, [pc, #224]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8007aa6:	4b36      	ldr	r3, [pc, #216]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ab2:	4b34      	ldr	r3, [pc, #208]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a33      	ldr	r2, [pc, #204]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007abc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007abe:	f7fb fe11 	bl	80036e4 <HAL_GetTick>
 8007ac2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ac6:	f7fb fe0d 	bl	80036e4 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e1d1      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ad8:	4b2a      	ldr	r3, [pc, #168]	; (8007b84 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0f0      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ae4:	4b26      	ldr	r3, [pc, #152]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aec:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d02f      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d028      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b02:	4b1f      	ldr	r3, [pc, #124]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b0a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b0c:	4b1e      	ldr	r3, [pc, #120]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b12:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b18:	4a19      	ldr	r2, [pc, #100]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b1e:	4b18      	ldr	r3, [pc, #96]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d114      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b2a:	f7fb fddb 	bl	80036e4 <HAL_GetTick>
 8007b2e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b30:	e00a      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b32:	f7fb fdd7 	bl	80036e4 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d901      	bls.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007b44:	2303      	movs	r3, #3
 8007b46:	e199      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b48:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0ee      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b60:	d114      	bne.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b76:	4902      	ldr	r1, [pc, #8]	; (8007b80 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	608b      	str	r3, [r1, #8]
 8007b7c:	e00c      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8007b7e:	bf00      	nop
 8007b80:	40023800 	.word	0x40023800
 8007b84:	40007000 	.word	0x40007000
 8007b88:	42470e40 	.word	0x42470e40
 8007b8c:	4b89      	ldr	r3, [pc, #548]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	4a88      	ldr	r2, [pc, #544]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b96:	6093      	str	r3, [r2, #8]
 8007b98:	4b86      	ldr	r3, [pc, #536]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ba4:	4983      	ldr	r1, [pc, #524]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d004      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007bbc:	4b7e      	ldr	r3, [pc, #504]	; (8007db8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007bbe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0310 	and.w	r3, r3, #16
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007bcc:	4b79      	ldr	r3, [pc, #484]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	4976      	ldr	r1, [pc, #472]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0320 	and.w	r3, r3, #32
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d011      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007bee:	4b71      	ldr	r3, [pc, #452]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007bf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bf4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfc:	496d      	ldr	r1, [pc, #436]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c0c:	d101      	bne.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007c1e:	4b65      	ldr	r3, [pc, #404]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c24:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2c:	4961      	ldr	r1, [pc, #388]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d004      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b80      	cmp	r3, #128	; 0x80
 8007c40:	f040 80c6 	bne.w	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007c44:	4b5d      	ldr	r3, [pc, #372]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007c4a:	f7fb fd4b 	bl	80036e4 <HAL_GetTick>
 8007c4e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c50:	e008      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007c52:	f7fb fd47 	bl	80036e4 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e10b      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007c64:	4b53      	ldr	r3, [pc, #332]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1f0      	bne.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007c70:	4a53      	ldr	r2, [pc, #332]	; (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c76:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	69db      	ldr	r3, [r3, #28]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d023      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1b      	ldr	r3, [r3, #32]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d019      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cb4:	d00e      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d019      	beq.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d115      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cd2:	d110      	bne.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	019b      	lsls	r3, r3, #6
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	061b      	lsls	r3, r3, #24
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	071b      	lsls	r3, r3, #28
 8007cee:	4931      	ldr	r1, [pc, #196]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d009      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d026      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d122      	bne.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d1e:	4b25      	ldr	r3, [pc, #148]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d24:	0e1b      	lsrs	r3, r3, #24
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	019b      	lsls	r3, r3, #6
 8007d36:	431a      	orrs	r2, r3
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	061b      	lsls	r3, r3, #24
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	071b      	lsls	r3, r3, #28
 8007d44:	491b      	ldr	r1, [pc, #108]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007d4c:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d52:	f023 021f 	bic.w	r2, r3, #31
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	4915      	ldr	r1, [pc, #84]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d010      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	019b      	lsls	r3, r3, #6
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	061b      	lsls	r3, r3, #24
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	071b      	lsls	r3, r3, #28
 8007d8a:	490a      	ldr	r1, [pc, #40]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d92:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d98:	f7fb fca4 	bl	80036e4 <HAL_GetTick>
 8007d9c:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d9e:	e011      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007da0:	f7fb fca0 	bl	80036e4 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d90a      	bls.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e064      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007db2:	bf00      	nop
 8007db4:	40023800 	.word	0x40023800
 8007db8:	424711e0 	.word	0x424711e0
 8007dbc:	42470068 	.word	0x42470068
 8007dc0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007dc4:	4b2f      	ldr	r3, [pc, #188]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d0e7      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ddc:	4b29      	ldr	r3, [pc, #164]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007de2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dea:	4926      	ldr	r1, [pc, #152]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007dec:	4313      	orrs	r3, r2
 8007dee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007dfe:	4b21      	ldr	r3, [pc, #132]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e04:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0c:	491d      	ldr	r1, [pc, #116]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007e20:	4b18      	ldr	r3, [pc, #96]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	4915      	ldr	r1, [pc, #84]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8007e42:	4b10      	ldr	r3, [pc, #64]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e48:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e50:	490c      	ldr	r1, [pc, #48]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00a      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e64:	4b07      	ldr	r3, [pc, #28]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e72:	4904      	ldr	r1, [pc, #16]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007e74:	4313      	orrs	r3, r2
 8007e76:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	40023800 	.word	0x40023800

08007e88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d003      	beq.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	f000 8098 	beq.w	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007eac:	e12d      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007eae:	4b9a      	ldr	r3, [pc, #616]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eb4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007eb8:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ec0:	d00c      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007ec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ec6:	d802      	bhi.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00a      	beq.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8007ecc:	e082      	b.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007ece:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ed2:	d047      	beq.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007ed4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007ed8:	d06f      	beq.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 8007eda:	e07b      	b.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007edc:	4b8f      	ldr	r3, [pc, #572]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ede:	617b      	str	r3, [r7, #20]
          break;
 8007ee0:	e07b      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007ee2:	4b8d      	ldr	r3, [pc, #564]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ef0:	d109      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007ef2:	4b89      	ldr	r3, [pc, #548]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007efc:	4a87      	ldr	r2, [pc, #540]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f02:	613b      	str	r3, [r7, #16]
 8007f04:	e019      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f06:	4b84      	ldr	r3, [pc, #528]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f12:	d109      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007f14:	4b80      	ldr	r3, [pc, #512]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f1e:	4a80      	ldr	r2, [pc, #512]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f24:	613b      	str	r3, [r7, #16]
 8007f26:	e008      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007f28:	4b7b      	ldr	r3, [pc, #492]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f32:	4a7c      	ldr	r2, [pc, #496]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f38:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007f3a:	4b77      	ldr	r3, [pc, #476]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f40:	099b      	lsrs	r3, r3, #6
 8007f42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	fb02 f303 	mul.w	r3, r2, r3
 8007f4c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007f4e:	4b72      	ldr	r3, [pc, #456]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f54:	0f1b      	lsrs	r3, r3, #28
 8007f56:	f003 0307 	and.w	r3, r3, #7
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f60:	617b      	str	r3, [r7, #20]
          break;
 8007f62:	e03a      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f64:	4b6c      	ldr	r3, [pc, #432]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f70:	d108      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f72:	4b69      	ldr	r3, [pc, #420]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f7a:	4a69      	ldr	r2, [pc, #420]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	e007      	b.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f84:	4b64      	ldr	r3, [pc, #400]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f8c:	4a65      	ldr	r2, [pc, #404]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f92:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007f94:	4b60      	ldr	r3, [pc, #384]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	099b      	lsrs	r3, r3, #6
 8007f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	fb02 f303 	mul.w	r3, r2, r3
 8007fa4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007fa6:	4b5c      	ldr	r3, [pc, #368]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	0f1b      	lsrs	r3, r3, #28
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb6:	617b      	str	r3, [r7, #20]
          break;
 8007fb8:	e00f      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007fba:	4b57      	ldr	r3, [pc, #348]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fc6:	d102      	bne.n	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 8007fc8:	4b55      	ldr	r3, [pc, #340]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fca:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007fcc:	e005      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8007fce:	4b55      	ldr	r3, [pc, #340]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007fd0:	617b      	str	r3, [r7, #20]
          break;
 8007fd2:	e002      	b.n	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
          break;
 8007fd8:	bf00      	nop
        }
      }
      break;
 8007fda:	e096      	b.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007fdc:	4b4e      	ldr	r3, [pc, #312]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe2:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8007fe6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fee:	d00c      	beq.n	800800a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8007ff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ff4:	d802      	bhi.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8007ffa:	e082      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007ffc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008000:	d047      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008002:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008006:	d06f      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008008:	e07b      	b.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800800a:	4b44      	ldr	r3, [pc, #272]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800800c:	617b      	str	r3, [r7, #20]
          break;
 800800e:	e07b      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008010:	4b41      	ldr	r3, [pc, #260]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800801a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800801e:	d109      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008020:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800802a:	4a3c      	ldr	r2, [pc, #240]	; (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800802c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	e019      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008034:	4b38      	ldr	r3, [pc, #224]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800803c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008040:	d109      	bne.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008042:	4b35      	ldr	r3, [pc, #212]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800804c:	4a34      	ldr	r2, [pc, #208]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800804e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	e008      	b.n	8008068 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008056:	4b30      	ldr	r3, [pc, #192]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800805c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008060:	4a30      	ldr	r2, [pc, #192]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008062:	fbb2 f3f3 	udiv	r3, r2, r3
 8008066:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008068:	4b2b      	ldr	r3, [pc, #172]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800806a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800806e:	099b      	lsrs	r3, r3, #6
 8008070:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	fb02 f303 	mul.w	r3, r2, r3
 800807a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800807c:	4b26      	ldr	r3, [pc, #152]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800807e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008082:	0f1b      	lsrs	r3, r3, #28
 8008084:	f003 0307 	and.w	r3, r3, #7
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	fbb2 f3f3 	udiv	r3, r2, r3
 800808e:	617b      	str	r3, [r7, #20]
          break;
 8008090:	e03a      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008092:	4b21      	ldr	r3, [pc, #132]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800809e:	d108      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080a0:	4b1d      	ldr	r3, [pc, #116]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080a8:	4a1d      	ldr	r2, [pc, #116]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	e007      	b.n	80080c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80080b2:	4b19      	ldr	r3, [pc, #100]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080ba:	4a1a      	ldr	r2, [pc, #104]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c0:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80080c2:	4b15      	ldr	r3, [pc, #84]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	099b      	lsrs	r3, r3, #6
 80080c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	fb02 f303 	mul.w	r3, r2, r3
 80080d2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80080d4:	4b10      	ldr	r3, [pc, #64]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	0f1b      	lsrs	r3, r3, #28
 80080da:	f003 0307 	and.w	r3, r3, #7
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e4:	617b      	str	r3, [r7, #20]
          break;
 80080e6:	e00f      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80080e8:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f4:	d102      	bne.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80080f6:	4b0a      	ldr	r3, [pc, #40]	; (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80080f8:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80080fa:	e005      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80080fe:	617b      	str	r3, [r7, #20]
          break;
 8008100:	e002      	b.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
          break;
 8008106:	bf00      	nop
        }
      }
      break;
 8008108:	bf00      	nop
    }
  }
  return frequency;
 800810a:	697b      	ldr	r3, [r7, #20]
}
 800810c:	4618      	mov	r0, r3
 800810e:	371c      	adds	r7, #28
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	40023800 	.word	0x40023800
 800811c:	00bb8000 	.word	0x00bb8000
 8008120:	017d7840 	.word	0x017d7840
 8008124:	00f42400 	.word	0x00f42400

08008128 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d075      	beq.n	800822c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008140:	4ba2      	ldr	r3, [pc, #648]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 030c 	and.w	r3, r3, #12
 8008148:	2b04      	cmp	r3, #4
 800814a:	d00c      	beq.n	8008166 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800814c:	4b9f      	ldr	r3, [pc, #636]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008154:	2b08      	cmp	r3, #8
 8008156:	d112      	bne.n	800817e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008158:	4b9c      	ldr	r3, [pc, #624]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008164:	d10b      	bne.n	800817e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008166:	4b99      	ldr	r3, [pc, #612]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d05b      	beq.n	800822a <HAL_RCC_OscConfig+0x102>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d157      	bne.n	800822a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e20b      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008186:	d106      	bne.n	8008196 <HAL_RCC_OscConfig+0x6e>
 8008188:	4b90      	ldr	r3, [pc, #576]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a8f      	ldr	r2, [pc, #572]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 800818e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	e01d      	b.n	80081d2 <HAL_RCC_OscConfig+0xaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800819e:	d10c      	bne.n	80081ba <HAL_RCC_OscConfig+0x92>
 80081a0:	4b8a      	ldr	r3, [pc, #552]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a89      	ldr	r2, [pc, #548]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081aa:	6013      	str	r3, [r2, #0]
 80081ac:	4b87      	ldr	r3, [pc, #540]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a86      	ldr	r2, [pc, #536]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	e00b      	b.n	80081d2 <HAL_RCC_OscConfig+0xaa>
 80081ba:	4b84      	ldr	r3, [pc, #528]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a83      	ldr	r2, [pc, #524]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	4b81      	ldr	r3, [pc, #516]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a80      	ldr	r2, [pc, #512]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d013      	beq.n	8008202 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081da:	f7fb fa83 	bl	80036e4 <HAL_GetTick>
 80081de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081e0:	e008      	b.n	80081f4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081e2:	f7fb fa7f 	bl	80036e4 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	2b64      	cmp	r3, #100	; 0x64
 80081ee:	d901      	bls.n	80081f4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e1d0      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081f4:	4b75      	ldr	r3, [pc, #468]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0f0      	beq.n	80081e2 <HAL_RCC_OscConfig+0xba>
 8008200:	e014      	b.n	800822c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008202:	f7fb fa6f 	bl	80036e4 <HAL_GetTick>
 8008206:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008208:	e008      	b.n	800821c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800820a:	f7fb fa6b 	bl	80036e4 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	2b64      	cmp	r3, #100	; 0x64
 8008216:	d901      	bls.n	800821c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8008218:	2303      	movs	r3, #3
 800821a:	e1bc      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800821c:	4b6b      	ldr	r3, [pc, #428]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f0      	bne.n	800820a <HAL_RCC_OscConfig+0xe2>
 8008228:	e000      	b.n	800822c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800822a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d063      	beq.n	8008300 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008238:	4b64      	ldr	r3, [pc, #400]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 030c 	and.w	r3, r3, #12
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00b      	beq.n	800825c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008244:	4b61      	ldr	r3, [pc, #388]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800824c:	2b08      	cmp	r3, #8
 800824e:	d11c      	bne.n	800828a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008250:	4b5e      	ldr	r3, [pc, #376]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d116      	bne.n	800828a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800825c:	4b5b      	ldr	r3, [pc, #364]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b00      	cmp	r3, #0
 8008266:	d005      	beq.n	8008274 <HAL_RCC_OscConfig+0x14c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d001      	beq.n	8008274 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e190      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008274:	4b55      	ldr	r3, [pc, #340]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	4952      	ldr	r1, [pc, #328]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008284:	4313      	orrs	r3, r2
 8008286:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008288:	e03a      	b.n	8008300 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d020      	beq.n	80082d4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008292:	4b4f      	ldr	r3, [pc, #316]	; (80083d0 <HAL_RCC_OscConfig+0x2a8>)
 8008294:	2201      	movs	r2, #1
 8008296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008298:	f7fb fa24 	bl	80036e4 <HAL_GetTick>
 800829c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800829e:	e008      	b.n	80082b2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082a0:	f7fb fa20 	bl	80036e4 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e171      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082b2:	4b46      	ldr	r3, [pc, #280]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0302 	and.w	r3, r3, #2
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0f0      	beq.n	80082a0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082be:	4b43      	ldr	r3, [pc, #268]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	493f      	ldr	r1, [pc, #252]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	600b      	str	r3, [r1, #0]
 80082d2:	e015      	b.n	8008300 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082d4:	4b3e      	ldr	r3, [pc, #248]	; (80083d0 <HAL_RCC_OscConfig+0x2a8>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082da:	f7fb fa03 	bl	80036e4 <HAL_GetTick>
 80082de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082e0:	e008      	b.n	80082f4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082e2:	f7fb f9ff 	bl	80036e4 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d901      	bls.n	80082f4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e150      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80082f4:	4b35      	ldr	r3, [pc, #212]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1f0      	bne.n	80082e2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 0308 	and.w	r3, r3, #8
 8008308:	2b00      	cmp	r3, #0
 800830a:	d030      	beq.n	800836e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	695b      	ldr	r3, [r3, #20]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d016      	beq.n	8008342 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008314:	4b2f      	ldr	r3, [pc, #188]	; (80083d4 <HAL_RCC_OscConfig+0x2ac>)
 8008316:	2201      	movs	r2, #1
 8008318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800831a:	f7fb f9e3 	bl	80036e4 <HAL_GetTick>
 800831e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008320:	e008      	b.n	8008334 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008322:	f7fb f9df 	bl	80036e4 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d901      	bls.n	8008334 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e130      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008334:	4b25      	ldr	r3, [pc, #148]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008338:	f003 0302 	and.w	r3, r3, #2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d0f0      	beq.n	8008322 <HAL_RCC_OscConfig+0x1fa>
 8008340:	e015      	b.n	800836e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008342:	4b24      	ldr	r3, [pc, #144]	; (80083d4 <HAL_RCC_OscConfig+0x2ac>)
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008348:	f7fb f9cc 	bl	80036e4 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800834e:	e008      	b.n	8008362 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008350:	f7fb f9c8 	bl	80036e4 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	2b02      	cmp	r3, #2
 800835c:	d901      	bls.n	8008362 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	e119      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008362:	4b1a      	ldr	r3, [pc, #104]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008366:	f003 0302 	and.w	r3, r3, #2
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1f0      	bne.n	8008350 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 809f 	beq.w	80084ba <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800837c:	2300      	movs	r3, #0
 800837e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008380:	4b12      	ldr	r3, [pc, #72]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10f      	bne.n	80083ac <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800838c:	2300      	movs	r3, #0
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	4b0e      	ldr	r3, [pc, #56]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008394:	4a0d      	ldr	r2, [pc, #52]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 8008396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800839a:	6413      	str	r3, [r2, #64]	; 0x40
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <HAL_RCC_OscConfig+0x2a4>)
 800839e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083a4:	60fb      	str	r3, [r7, #12]
 80083a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80083a8:	2301      	movs	r3, #1
 80083aa:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <HAL_RCC_OscConfig+0x2b0>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d120      	bne.n	80083fa <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083b8:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <HAL_RCC_OscConfig+0x2b0>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a06      	ldr	r2, [pc, #24]	; (80083d8 <HAL_RCC_OscConfig+0x2b0>)
 80083be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083c4:	f7fb f98e 	bl	80036e4 <HAL_GetTick>
 80083c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ca:	e010      	b.n	80083ee <HAL_RCC_OscConfig+0x2c6>
 80083cc:	40023800 	.word	0x40023800
 80083d0:	42470000 	.word	0x42470000
 80083d4:	42470e80 	.word	0x42470e80
 80083d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083dc:	f7fb f982 	bl	80036e4 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e0d3      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ee:	4b6c      	ldr	r3, [pc, #432]	; (80085a0 <HAL_RCC_OscConfig+0x478>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0f0      	beq.n	80083dc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d106      	bne.n	8008410 <HAL_RCC_OscConfig+0x2e8>
 8008402:	4b68      	ldr	r3, [pc, #416]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	4a67      	ldr	r2, [pc, #412]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	6713      	str	r3, [r2, #112]	; 0x70
 800840e:	e01c      	b.n	800844a <HAL_RCC_OscConfig+0x322>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b05      	cmp	r3, #5
 8008416:	d10c      	bne.n	8008432 <HAL_RCC_OscConfig+0x30a>
 8008418:	4b62      	ldr	r3, [pc, #392]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 800841a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841c:	4a61      	ldr	r2, [pc, #388]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 800841e:	f043 0304 	orr.w	r3, r3, #4
 8008422:	6713      	str	r3, [r2, #112]	; 0x70
 8008424:	4b5f      	ldr	r3, [pc, #380]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008428:	4a5e      	ldr	r2, [pc, #376]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	6713      	str	r3, [r2, #112]	; 0x70
 8008430:	e00b      	b.n	800844a <HAL_RCC_OscConfig+0x322>
 8008432:	4b5c      	ldr	r3, [pc, #368]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008436:	4a5b      	ldr	r2, [pc, #364]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008438:	f023 0301 	bic.w	r3, r3, #1
 800843c:	6713      	str	r3, [r2, #112]	; 0x70
 800843e:	4b59      	ldr	r3, [pc, #356]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	4a58      	ldr	r2, [pc, #352]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008444:	f023 0304 	bic.w	r3, r3, #4
 8008448:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d015      	beq.n	800847e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008452:	f7fb f947 	bl	80036e4 <HAL_GetTick>
 8008456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008458:	e00a      	b.n	8008470 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800845a:	f7fb f943 	bl	80036e4 <HAL_GetTick>
 800845e:	4602      	mov	r2, r0
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	f241 3288 	movw	r2, #5000	; 0x1388
 8008468:	4293      	cmp	r3, r2
 800846a:	d901      	bls.n	8008470 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e092      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008470:	4b4c      	ldr	r3, [pc, #304]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0ee      	beq.n	800845a <HAL_RCC_OscConfig+0x332>
 800847c:	e014      	b.n	80084a8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800847e:	f7fb f931 	bl	80036e4 <HAL_GetTick>
 8008482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008484:	e00a      	b.n	800849c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008486:	f7fb f92d 	bl	80036e4 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	f241 3288 	movw	r2, #5000	; 0x1388
 8008494:	4293      	cmp	r3, r2
 8008496:	d901      	bls.n	800849c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e07c      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800849c:	4b41      	ldr	r3, [pc, #260]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 800849e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1ee      	bne.n	8008486 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d105      	bne.n	80084ba <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084ae:	4b3d      	ldr	r3, [pc, #244]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	4a3c      	ldr	r2, [pc, #240]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 80084b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d068      	beq.n	8008594 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80084c2:	4b38      	ldr	r3, [pc, #224]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 030c 	and.w	r3, r3, #12
 80084ca:	2b08      	cmp	r3, #8
 80084cc:	d060      	beq.n	8008590 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d145      	bne.n	8008562 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084d6:	4b34      	ldr	r3, [pc, #208]	; (80085a8 <HAL_RCC_OscConfig+0x480>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fb f902 	bl	80036e4 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084e4:	f7fb f8fe 	bl	80036e4 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e04f      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084f6:	4b2b      	ldr	r3, [pc, #172]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	69da      	ldr	r2, [r3, #28]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	431a      	orrs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	019b      	lsls	r3, r3, #6
 8008512:	431a      	orrs	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008518:	085b      	lsrs	r3, r3, #1
 800851a:	3b01      	subs	r3, #1
 800851c:	041b      	lsls	r3, r3, #16
 800851e:	431a      	orrs	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	061b      	lsls	r3, r3, #24
 8008526:	431a      	orrs	r2, r3
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	071b      	lsls	r3, r3, #28
 800852e:	491d      	ldr	r1, [pc, #116]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008530:	4313      	orrs	r3, r2
 8008532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008534:	4b1c      	ldr	r3, [pc, #112]	; (80085a8 <HAL_RCC_OscConfig+0x480>)
 8008536:	2201      	movs	r2, #1
 8008538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800853a:	f7fb f8d3 	bl	80036e4 <HAL_GetTick>
 800853e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008540:	e008      	b.n	8008554 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008542:	f7fb f8cf 	bl	80036e4 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d901      	bls.n	8008554 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e020      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008554:	4b13      	ldr	r3, [pc, #76]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0f0      	beq.n	8008542 <HAL_RCC_OscConfig+0x41a>
 8008560:	e018      	b.n	8008594 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008562:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <HAL_RCC_OscConfig+0x480>)
 8008564:	2200      	movs	r2, #0
 8008566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008568:	f7fb f8bc 	bl	80036e4 <HAL_GetTick>
 800856c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800856e:	e008      	b.n	8008582 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008570:	f7fb f8b8 	bl	80036e4 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b02      	cmp	r3, #2
 800857c:	d901      	bls.n	8008582 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	e009      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008582:	4b08      	ldr	r3, [pc, #32]	; (80085a4 <HAL_RCC_OscConfig+0x47c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1f0      	bne.n	8008570 <HAL_RCC_OscConfig+0x448>
 800858e:	e001      	b.n	8008594 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e000      	b.n	8008596 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	40007000 	.word	0x40007000
 80085a4:	40023800 	.word	0x40023800
 80085a8:	42470060 	.word	0x42470060

080085ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e022      	b.n	8008604 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f7f9 fba5 	bl	8001d20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2203      	movs	r2, #3
 80085da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 f814 	bl	800860c <HAL_SD_InitCard>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e00a      	b.n	8008604 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800860c:	b5b0      	push	{r4, r5, r7, lr}
 800860e:	b08e      	sub	sp, #56	; 0x38
 8008610:	af04      	add	r7, sp, #16
 8008612:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008614:	2300      	movs	r3, #0
 8008616:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008618:	2300      	movs	r3, #0
 800861a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800861c:	2300      	movs	r3, #0
 800861e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008620:	2300      	movs	r3, #0
 8008622:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008624:	2300      	movs	r3, #0
 8008626:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008628:	2376      	movs	r3, #118	; 0x76
 800862a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681d      	ldr	r5, [r3, #0]
 8008630:	466c      	mov	r4, sp
 8008632:	f107 0314 	add.w	r3, r7, #20
 8008636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800863a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800863e:	f107 0308 	add.w	r3, r7, #8
 8008642:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008644:	4628      	mov	r0, r5
 8008646:	f002 fd01 	bl	800b04c <SDIO_Init>
 800864a:	4603      	mov	r3, r0
 800864c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e031      	b.n	80086c0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <HAL_SD_InitCard+0xbc>)
 800865e:	2200      	movs	r2, #0
 8008660:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f002 fd28 	bl	800b0bc <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800866c:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <HAL_SD_InitCard+0xbc>)
 800866e:	2201      	movs	r2, #1
 8008670:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fb18 	bl	8008ca8 <SD_PowerON>
 8008678:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e013      	b.n	80086c0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fa37 	bl	8008b0c <SD_InitCard>
 800869e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086a0:	6a3b      	ldr	r3, [r7, #32]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00b      	beq.n	80086be <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	e000      	b.n	80086c0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3728      	adds	r7, #40	; 0x28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bdb0      	pop	{r4, r5, r7, pc}
 80086c8:	422580a0 	.word	0x422580a0

080086cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086da:	0f9b      	lsrs	r3, r3, #30
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e6:	0e9b      	lsrs	r3, r3, #26
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	f003 030f 	and.w	r3, r3, #15
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086f8:	0e1b      	lsrs	r3, r3, #24
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	f003 0303 	and.w	r3, r3, #3
 8008700:	b2da      	uxtb	r2, r3
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800870a:	0c1b      	lsrs	r3, r3, #16
 800870c:	b2da      	uxtb	r2, r3
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008716:	0a1b      	lsrs	r3, r3, #8
 8008718:	b2da      	uxtb	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008722:	b2da      	uxtb	r2, r3
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800872c:	0d1b      	lsrs	r3, r3, #20
 800872e:	b29a      	uxth	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008738:	0c1b      	lsrs	r3, r3, #16
 800873a:	b2db      	uxtb	r3, r3
 800873c:	f003 030f 	and.w	r3, r3, #15
 8008740:	b2da      	uxtb	r2, r3
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800874a:	0bdb      	lsrs	r3, r3, #15
 800874c:	b2db      	uxtb	r3, r3
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800875c:	0b9b      	lsrs	r3, r3, #14
 800875e:	b2db      	uxtb	r3, r3
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	b2da      	uxtb	r2, r3
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800876e:	0b5b      	lsrs	r3, r3, #13
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 0301 	and.w	r3, r3, #1
 8008776:	b2da      	uxtb	r2, r3
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008780:	0b1b      	lsrs	r3, r3, #12
 8008782:	b2db      	uxtb	r3, r3
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	b2da      	uxtb	r2, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2200      	movs	r2, #0
 8008792:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008798:	2b00      	cmp	r3, #0
 800879a:	d163      	bne.n	8008864 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a0:	009a      	lsls	r2, r3, #2
 80087a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80087a6:	4013      	ands	r3, r2
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80087ac:	0f92      	lsrs	r2, r2, #30
 80087ae:	431a      	orrs	r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b8:	0edb      	lsrs	r3, r3, #27
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 0307 	and.w	r3, r3, #7
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ca:	0e1b      	lsrs	r3, r3, #24
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	b2da      	uxtb	r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087dc:	0d5b      	lsrs	r3, r3, #21
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0307 	and.w	r3, r3, #7
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ee:	0c9b      	lsrs	r3, r3, #18
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008800:	0bdb      	lsrs	r3, r3, #15
 8008802:	b2db      	uxtb	r3, r3
 8008804:	f003 0307 	and.w	r3, r3, #7
 8008808:	b2da      	uxtb	r2, r3
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	7e1b      	ldrb	r3, [r3, #24]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f003 0307 	and.w	r3, r3, #7
 8008822:	3302      	adds	r3, #2
 8008824:	2201      	movs	r2, #1
 8008826:	fa02 f303 	lsl.w	r3, r2, r3
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800882e:	fb02 f203 	mul.w	r2, r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	7a1b      	ldrb	r3, [r3, #8]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	2201      	movs	r2, #1
 8008842:	409a      	lsls	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008850:	0a52      	lsrs	r2, r2, #9
 8008852:	fb02 f203 	mul.w	r2, r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008860:	661a      	str	r2, [r3, #96]	; 0x60
 8008862:	e031      	b.n	80088c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008868:	2b01      	cmp	r3, #1
 800886a:	d11d      	bne.n	80088a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008870:	041b      	lsls	r3, r3, #16
 8008872:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887a:	0c1b      	lsrs	r3, r3, #16
 800887c:	431a      	orrs	r2, r3
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	3301      	adds	r3, #1
 8008888:	029a      	lsls	r2, r3, #10
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800889c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	661a      	str	r2, [r3, #96]	; 0x60
 80088a6:	e00f      	b.n	80088c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a58      	ldr	r2, [pc, #352]	; (8008a10 <HAL_SD_GetCardCSD+0x344>)
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e09d      	b.n	8008a04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088cc:	0b9b      	lsrs	r3, r3, #14
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	09db      	lsrs	r3, r3, #7
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008900:	0fdb      	lsrs	r3, r3, #31
 8008902:	b2da      	uxtb	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890c:	0f5b      	lsrs	r3, r3, #29
 800890e:	b2db      	uxtb	r3, r3
 8008910:	f003 0303 	and.w	r3, r3, #3
 8008914:	b2da      	uxtb	r2, r3
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891e:	0e9b      	lsrs	r3, r3, #26
 8008920:	b2db      	uxtb	r3, r3
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	b2da      	uxtb	r2, r3
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	0d9b      	lsrs	r3, r3, #22
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	b2da      	uxtb	r2, r3
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008942:	0d5b      	lsrs	r3, r3, #21
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800895e:	0c1b      	lsrs	r3, r3, #16
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	b2da      	uxtb	r2, r3
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008972:	0bdb      	lsrs	r3, r3, #15
 8008974:	b2db      	uxtb	r3, r3
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	b2da      	uxtb	r2, r3
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008986:	0b9b      	lsrs	r3, r3, #14
 8008988:	b2db      	uxtb	r3, r3
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	b2da      	uxtb	r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899a:	0b5b      	lsrs	r3, r3, #13
 800899c:	b2db      	uxtb	r3, r3
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ae:	0b1b      	lsrs	r3, r3, #12
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	0a9b      	lsrs	r3, r3, #10
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0303 	and.w	r3, r3, #3
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ea:	085b      	lsrs	r3, r3, #1
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	004005ff 	.word	0x004005ff

08008a14 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008a14:	b5b0      	push	{r4, r5, r7, lr}
 8008a16:	b08e      	sub	sp, #56	; 0x38
 8008a18:	af04      	add	r7, sp, #16
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2203      	movs	r2, #3
 8008a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2a:	2b03      	cmp	r3, #3
 8008a2c:	d02e      	beq.n	8008a8c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a34:	d106      	bne.n	8008a44 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	639a      	str	r2, [r3, #56]	; 0x38
 8008a42:	e029      	b.n	8008a98 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a4a:	d10a      	bne.n	8008a62 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f9b9 	bl	8008dc4 <SD_WideBus_Enable>
 8008a52:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8008a60:	e01a      	b.n	8008a98 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10a      	bne.n	8008a7e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f9f6 	bl	8008e5a <SD_WideBus_Disable>
 8008a6e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	431a      	orrs	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38
 8008a7c:	e00c      	b.n	8008a98 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
 8008a8a:	e005      	b.n	8008a98 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d009      	beq.n	8008ab4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a18      	ldr	r2, [pc, #96]	; (8008b08 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e024      	b.n	8008afe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	699b      	ldr	r3, [r3, #24]
 8008ad4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681d      	ldr	r5, [r3, #0]
 8008ada:	466c      	mov	r4, sp
 8008adc:	f107 0318 	add.w	r3, r7, #24
 8008ae0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ae4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ae8:	f107 030c 	add.w	r3, r7, #12
 8008aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008aee:	4628      	mov	r0, r5
 8008af0:	f002 faac 	bl	800b04c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3728      	adds	r7, #40	; 0x28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bdb0      	pop	{r4, r5, r7, pc}
 8008b06:	bf00      	nop
 8008b08:	004005ff 	.word	0x004005ff

08008b0c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b0c:	b5b0      	push	{r4, r5, r7, lr}
 8008b0e:	b094      	sub	sp, #80	; 0x50
 8008b10:	af04      	add	r7, sp, #16
 8008b12:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008b14:	2301      	movs	r3, #1
 8008b16:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f002 fadc 	bl	800b0da <SDIO_GetPowerState>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b28:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b2c:	e0b7      	b.n	8008c9e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b32:	2b03      	cmp	r3, #3
 8008b34:	d02f      	beq.n	8008b96 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f002 fc5b 	bl	800b3f6 <SDMMC_CmdSendCID>
 8008b40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d001      	beq.n	8008b4c <SD_InitCard+0x40>
    {
      return errorstate;
 8008b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4a:	e0a8      	b.n	8008c9e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2100      	movs	r1, #0
 8008b52:	4618      	mov	r0, r3
 8008b54:	f002 fb06 	bl	800b164 <SDIO_GetResponse>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2104      	movs	r1, #4
 8008b64:	4618      	mov	r0, r3
 8008b66:	f002 fafd 	bl	800b164 <SDIO_GetResponse>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2108      	movs	r1, #8
 8008b76:	4618      	mov	r0, r3
 8008b78:	f002 faf4 	bl	800b164 <SDIO_GetResponse>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	210c      	movs	r1, #12
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f002 faeb 	bl	800b164 <SDIO_GetResponse>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d00d      	beq.n	8008bba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f107 020e 	add.w	r2, r7, #14
 8008ba6:	4611      	mov	r1, r2
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f002 fc61 	bl	800b470 <SDMMC_CmdSetRelAdd>
 8008bae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <SD_InitCard+0xae>
    {
      return errorstate;
 8008bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb8:	e071      	b.n	8008c9e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d036      	beq.n	8008c30 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008bc2:	89fb      	ldrh	r3, [r7, #14]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd2:	041b      	lsls	r3, r3, #16
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4610      	mov	r0, r2
 8008bd8:	f002 fc2b 	bl	800b432 <SDMMC_CmdSendCSD>
 8008bdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be6:	e05a      	b.n	8008c9e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2100      	movs	r1, #0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f002 fab8 	bl	800b164 <SDIO_GetResponse>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2104      	movs	r1, #4
 8008c00:	4618      	mov	r0, r3
 8008c02:	f002 faaf 	bl	800b164 <SDIO_GetResponse>
 8008c06:	4602      	mov	r2, r0
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2108      	movs	r1, #8
 8008c12:	4618      	mov	r0, r3
 8008c14:	f002 faa6 	bl	800b164 <SDIO_GetResponse>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	210c      	movs	r1, #12
 8008c24:	4618      	mov	r0, r3
 8008c26:	f002 fa9d 	bl	800b164 <SDIO_GetResponse>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2104      	movs	r1, #4
 8008c36:	4618      	mov	r0, r3
 8008c38:	f002 fa94 	bl	800b164 <SDIO_GetResponse>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	0d1a      	lsrs	r2, r3, #20
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008c44:	f107 0310 	add.w	r3, r7, #16
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff fd3e 	bl	80086cc <HAL_SD_GetCardCSD>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d002      	beq.n	8008c5c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008c5a:	e020      	b.n	8008c9e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6819      	ldr	r1, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c64:	041b      	lsls	r3, r3, #16
 8008c66:	f04f 0400 	mov.w	r4, #0
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4623      	mov	r3, r4
 8008c6e:	4608      	mov	r0, r1
 8008c70:	f002 fad9 	bl	800b226 <SDMMC_CmdSelDesel>
 8008c74:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <SD_InitCard+0x174>
  {
    return errorstate;
 8008c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7e:	e00e      	b.n	8008c9e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681d      	ldr	r5, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	466c      	mov	r4, sp
 8008c88:	f103 0210 	add.w	r2, r3, #16
 8008c8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008c8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c92:	3304      	adds	r3, #4
 8008c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c96:	4628      	mov	r0, r5
 8008c98:	f002 f9d8 	bl	800b04c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3740      	adds	r7, #64	; 0x40
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008ca8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	617b      	str	r3, [r7, #20]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f002 fad3 	bl	800b26c <SDMMC_CmdGoIdleState>
 8008cc6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d001      	beq.n	8008cd2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	e072      	b.n	8008db8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f002 fae6 	bl	800b2a8 <SDMMC_CmdOperCond>
 8008cdc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00d      	beq.n	8008d00 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f002 fabc 	bl	800b26c <SDMMC_CmdGoIdleState>
 8008cf4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d004      	beq.n	8008d06 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	e05b      	b.n	8008db8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2201      	movs	r2, #1
 8008d04:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d137      	bne.n	8008d7e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2100      	movs	r1, #0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f002 fae6 	bl	800b2e6 <SDMMC_CmdAppCommand>
 8008d1a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d02d      	beq.n	8008d7e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d26:	e047      	b.n	8008db8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f002 fad9 	bl	800b2e6 <SDMMC_CmdAppCommand>
 8008d34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <SD_PowerON+0x98>
    {
      return errorstate;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	e03b      	b.n	8008db8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	491e      	ldr	r1, [pc, #120]	; (8008dc0 <SD_PowerON+0x118>)
 8008d46:	4618      	mov	r0, r3
 8008d48:	f002 faef 	bl	800b32a <SDMMC_CmdAppOperCommand>
 8008d4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d002      	beq.n	8008d5a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008d58:	e02e      	b.n	8008db8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2100      	movs	r1, #0
 8008d60:	4618      	mov	r0, r3
 8008d62:	f002 f9ff 	bl	800b164 <SDIO_GetResponse>
 8008d66:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	0fdb      	lsrs	r3, r3, #31
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d101      	bne.n	8008d74 <SD_PowerON+0xcc>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <SD_PowerON+0xce>
 8008d74:	2300      	movs	r3, #0
 8008d76:	613b      	str	r3, [r7, #16]

    count++;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d802      	bhi.n	8008d8e <SD_PowerON+0xe6>
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0cc      	beq.n	8008d28 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d902      	bls.n	8008d9e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008d9c:	e00c      	b.n	8008db8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d003      	beq.n	8008db0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	645a      	str	r2, [r3, #68]	; 0x44
 8008dae:	e002      	b.n	8008db6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2200      	movs	r2, #0
 8008db4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	c1100000 	.word	0xc1100000

08008dc4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008dcc:	2300      	movs	r3, #0
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2100      	movs	r1, #0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f002 f9c2 	bl	800b164 <SDIO_GetResponse>
 8008de0:	4603      	mov	r3, r0
 8008de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dea:	d102      	bne.n	8008df2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008df0:	e02f      	b.n	8008e52 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008df2:	f107 030c 	add.w	r3, r7, #12
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f879 	bl	8008ef0 <SD_FindSCR>
 8008dfe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	e023      	b.n	8008e52 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01c      	beq.n	8008e4e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e1c:	041b      	lsls	r3, r3, #16
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4610      	mov	r0, r2
 8008e22:	f002 fa60 	bl	800b2e6 <SDMMC_CmdAppCommand>
 8008e26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	e00f      	b.n	8008e52 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2102      	movs	r1, #2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f002 fa99 	bl	800b370 <SDMMC_CmdBusWidth>
 8008e3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	e003      	b.n	8008e52 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	e001      	b.n	8008e52 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b086      	sub	sp, #24
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008e62:	2300      	movs	r3, #0
 8008e64:	60fb      	str	r3, [r7, #12]
 8008e66:	2300      	movs	r3, #0
 8008e68:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2100      	movs	r1, #0
 8008e70:	4618      	mov	r0, r3
 8008e72:	f002 f977 	bl	800b164 <SDIO_GetResponse>
 8008e76:	4603      	mov	r3, r0
 8008e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e80:	d102      	bne.n	8008e88 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e86:	e02f      	b.n	8008ee8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008e88:	f107 030c 	add.w	r3, r7, #12
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f82e 	bl	8008ef0 <SD_FindSCR>
 8008e94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	e023      	b.n	8008ee8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d01c      	beq.n	8008ee4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb2:	041b      	lsls	r3, r3, #16
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f002 fa15 	bl	800b2e6 <SDMMC_CmdAppCommand>
 8008ebc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	e00f      	b.n	8008ee8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2100      	movs	r1, #0
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f002 fa4e 	bl	800b370 <SDMMC_CmdBusWidth>
 8008ed4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	e003      	b.n	8008ee8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e001      	b.n	8008ee8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ee4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008ef0:	b590      	push	{r4, r7, lr}
 8008ef2:	b08f      	sub	sp, #60	; 0x3c
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008efa:	f7fa fbf3 	bl	80036e4 <HAL_GetTick>
 8008efe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008f04:	2300      	movs	r3, #0
 8008f06:	60bb      	str	r3, [r7, #8]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2108      	movs	r1, #8
 8008f16:	4618      	mov	r0, r3
 8008f18:	f002 f963 	bl	800b1e2 <SDMMC_CmdBlockLength>
 8008f1c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	e0a9      	b.n	800907c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f30:	041b      	lsls	r3, r3, #16
 8008f32:	4619      	mov	r1, r3
 8008f34:	4610      	mov	r0, r2
 8008f36:	f002 f9d6 	bl	800b2e6 <SDMMC_CmdAppCommand>
 8008f3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f44:	e09a      	b.n	800907c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f46:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008f50:	2330      	movs	r3, #48	; 0x30
 8008f52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008f54:	2302      	movs	r3, #2
 8008f56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f107 0210 	add.w	r2, r7, #16
 8008f68:	4611      	mov	r1, r2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f002 f90d 	bl	800b18a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f002 fa1d 	bl	800b3b4 <SDMMC_CmdSendSCR>
 8008f7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d022      	beq.n	8008fc8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f84:	e07a      	b.n	800907c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00e      	beq.n	8008fb2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6819      	ldr	r1, [r3, #0]
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	f107 0208 	add.w	r2, r7, #8
 8008fa0:	18d4      	adds	r4, r2, r3
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	f002 f87d 	bl	800b0a2 <SDIO_ReadFIFO>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	6023      	str	r3, [r4, #0]
      index++;
 8008fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fae:	3301      	adds	r3, #1
 8008fb0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fb2:	f7fa fb97 	bl	80036e4 <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d102      	bne.n	8008fc8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fc6:	e059      	b.n	800907c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fce:	f240 432a 	movw	r3, #1066	; 0x42a
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0d6      	beq.n	8008f86 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fde:	f003 0308 	and.w	r3, r3, #8
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d005      	beq.n	8008ff2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2208      	movs	r2, #8
 8008fec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008fee:	2308      	movs	r3, #8
 8008ff0:	e044      	b.n	800907c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff8:	f003 0302 	and.w	r3, r3, #2
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2202      	movs	r2, #2
 8009006:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009008:	2302      	movs	r3, #2
 800900a:	e037      	b.n	800907c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2220      	movs	r2, #32
 8009020:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009022:	2320      	movs	r3, #32
 8009024:	e02a      	b.n	800907c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f240 523a 	movw	r2, #1338	; 0x53a
 800902e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	061a      	lsls	r2, r3, #24
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	021b      	lsls	r3, r3, #8
 8009038:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800903c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	0a1b      	lsrs	r3, r3, #8
 8009042:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009046:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	0e1b      	lsrs	r3, r3, #24
 800904c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800904e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009050:	601a      	str	r2, [r3, #0]
    scr++;
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	3304      	adds	r3, #4
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	061a      	lsls	r2, r3, #24
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	021b      	lsls	r3, r3, #8
 8009060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009064:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	0a1b      	lsrs	r3, r3, #8
 800906a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800906e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	0e1b      	lsrs	r3, r3, #24
 8009074:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	373c      	adds	r7, #60	; 0x3c
 8009080:	46bd      	mov	sp, r7
 8009082:	bd90      	pop	{r4, r7, pc}

08009084 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d101      	bne.n	800909a <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009096:	2301      	movs	r3, #1
 8009098:	e034      	b.n	8009104 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d106      	bne.n	80090b4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7f9 f858 	bl	8002164 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3308      	adds	r3, #8
 80090bc:	4619      	mov	r1, r3
 80090be:	4610      	mov	r0, r2
 80090c0:	f001 fec0 	bl	800ae44 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	461a      	mov	r2, r3
 80090ce:	68b9      	ldr	r1, [r7, #8]
 80090d0:	f001 ff28 	bl	800af24 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6858      	ldr	r0, [r3, #4]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e0:	6879      	ldr	r1, [r7, #4]
 80090e2:	f001 ff73 	bl	800afcc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	6892      	ldr	r2, [r2, #8]
 80090ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	6892      	ldr	r2, [r2, #8]
 80090fa:	f041 0101 	orr.w	r1, r1, #1
 80090fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e01d      	b.n	800915a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7f8 fe5c 	bl	8001df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	3304      	adds	r3, #4
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f000 fb4e 	bl	80097ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68da      	ldr	r2, [r3, #12]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f042 0201 	orr.w	r2, r2, #1
 8009178:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b06      	cmp	r3, #6
 800918a:	d007      	beq.n	800919c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091b8:	2301      	movs	r3, #1
 80091ba:	e01d      	b.n	80091f8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d106      	bne.n	80091d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f815 	bl	8009200 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f000 faff 	bl	80097ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2201      	movs	r2, #1
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	4618      	mov	r0, r3
 8009228:	f000 fdca 	bl	8009dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a15      	ldr	r2, [pc, #84]	; (8009288 <HAL_TIM_PWM_Start+0x74>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d004      	beq.n	8009240 <HAL_TIM_PWM_Start+0x2c>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a14      	ldr	r2, [pc, #80]	; (800928c <HAL_TIM_PWM_Start+0x78>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d101      	bne.n	8009244 <HAL_TIM_PWM_Start+0x30>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <HAL_TIM_PWM_Start+0x32>
 8009244:	2300      	movs	r3, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d007      	beq.n	800925a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009258:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f003 0307 	and.w	r3, r3, #7
 8009264:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b06      	cmp	r3, #6
 800926a:	d007      	beq.n	800927c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3710      	adds	r7, #16
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	40010000 	.word	0x40010000
 800928c:	40010400 	.word	0x40010400

08009290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d122      	bne.n	80092ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	d11b      	bne.n	80092ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f06f 0202 	mvn.w	r2, #2
 80092bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	699b      	ldr	r3, [r3, #24]
 80092ca:	f003 0303 	and.w	r3, r3, #3
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa6b 	bl	80097ae <HAL_TIM_IC_CaptureCallback>
 80092d8:	e005      	b.n	80092e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fa5d 	bl	800979a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fa6e 	bl	80097c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0304 	and.w	r3, r3, #4
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d122      	bne.n	8009340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b04      	cmp	r3, #4
 8009306:	d11b      	bne.n	8009340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0204 	mvn.w	r2, #4
 8009310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2202      	movs	r2, #2
 8009316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 fa41 	bl	80097ae <HAL_TIM_IC_CaptureCallback>
 800932c:	e005      	b.n	800933a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fa33 	bl	800979a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fa44 	bl	80097c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	f003 0308 	and.w	r3, r3, #8
 800934a:	2b08      	cmp	r3, #8
 800934c:	d122      	bne.n	8009394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f003 0308 	and.w	r3, r3, #8
 8009358:	2b08      	cmp	r3, #8
 800935a:	d11b      	bne.n	8009394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f06f 0208 	mvn.w	r2, #8
 8009364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2204      	movs	r2, #4
 800936a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa17 	bl	80097ae <HAL_TIM_IC_CaptureCallback>
 8009380:	e005      	b.n	800938e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa09 	bl	800979a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 fa1a 	bl	80097c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	f003 0310 	and.w	r3, r3, #16
 800939e:	2b10      	cmp	r3, #16
 80093a0:	d122      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	f003 0310 	and.w	r3, r3, #16
 80093ac:	2b10      	cmp	r3, #16
 80093ae:	d11b      	bne.n	80093e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f06f 0210 	mvn.w	r2, #16
 80093b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2208      	movs	r2, #8
 80093be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d003      	beq.n	80093d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f9ed 	bl	80097ae <HAL_TIM_IC_CaptureCallback>
 80093d4:	e005      	b.n	80093e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f9df 	bl	800979a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9f0 	bl	80097c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d10e      	bne.n	8009414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68db      	ldr	r3, [r3, #12]
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	2b01      	cmp	r3, #1
 8009402:	d107      	bne.n	8009414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f06f 0201 	mvn.w	r2, #1
 800940c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7f8 f856 	bl	80014c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	d10e      	bne.n	8009440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800942c:	2b80      	cmp	r3, #128	; 0x80
 800942e:	d107      	bne.n	8009440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fd6c 	bl	8009f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b40      	cmp	r3, #64	; 0x40
 800944c:	d10e      	bne.n	800946c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009458:	2b40      	cmp	r3, #64	; 0x40
 800945a:	d107      	bne.n	800946c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f9b5 	bl	80097d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b20      	cmp	r3, #32
 8009478:	d10e      	bne.n	8009498 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	f003 0320 	and.w	r3, r3, #32
 8009484:	2b20      	cmp	r3, #32
 8009486:	d107      	bne.n	8009498 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f06f 0220 	mvn.w	r2, #32
 8009490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fd36 	bl	8009f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d101      	bne.n	80094ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80094b6:	2302      	movs	r3, #2
 80094b8:	e0b4      	b.n	8009624 <HAL_TIM_PWM_ConfigChannel+0x184>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2202      	movs	r2, #2
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b0c      	cmp	r3, #12
 80094ce:	f200 809f 	bhi.w	8009610 <HAL_TIM_PWM_ConfigChannel+0x170>
 80094d2:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80094d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d8:	0800950d 	.word	0x0800950d
 80094dc:	08009611 	.word	0x08009611
 80094e0:	08009611 	.word	0x08009611
 80094e4:	08009611 	.word	0x08009611
 80094e8:	0800954d 	.word	0x0800954d
 80094ec:	08009611 	.word	0x08009611
 80094f0:	08009611 	.word	0x08009611
 80094f4:	08009611 	.word	0x08009611
 80094f8:	0800958f 	.word	0x0800958f
 80094fc:	08009611 	.word	0x08009611
 8009500:	08009611 	.word	0x08009611
 8009504:	08009611 	.word	0x08009611
 8009508:	080095cf 	.word	0x080095cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fa0a 	bl	800992c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	699a      	ldr	r2, [r3, #24]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0208 	orr.w	r2, r2, #8
 8009526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f022 0204 	bic.w	r2, r2, #4
 8009536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6999      	ldr	r1, [r3, #24]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	691a      	ldr	r2, [r3, #16]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	619a      	str	r2, [r3, #24]
      break;
 800954a:	e062      	b.n	8009612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68b9      	ldr	r1, [r7, #8]
 8009552:	4618      	mov	r0, r3
 8009554:	f000 fa5a 	bl	8009a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	699a      	ldr	r2, [r3, #24]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6999      	ldr	r1, [r3, #24]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	021a      	lsls	r2, r3, #8
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	619a      	str	r2, [r3, #24]
      break;
 800958c:	e041      	b.n	8009612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	4618      	mov	r0, r3
 8009596:	f000 faaf 	bl	8009af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	69da      	ldr	r2, [r3, #28]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0208 	orr.w	r2, r2, #8
 80095a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	69da      	ldr	r2, [r3, #28]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0204 	bic.w	r2, r2, #4
 80095b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69d9      	ldr	r1, [r3, #28]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	691a      	ldr	r2, [r3, #16]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	430a      	orrs	r2, r1
 80095ca:	61da      	str	r2, [r3, #28]
      break;
 80095cc:	e021      	b.n	8009612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68b9      	ldr	r1, [r7, #8]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f000 fb03 	bl	8009be0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69da      	ldr	r2, [r3, #28]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69d9      	ldr	r1, [r3, #28]
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	021a      	lsls	r2, r3, #8
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	430a      	orrs	r2, r1
 800960c:	61da      	str	r2, [r3, #28]
      break;
 800960e:	e000      	b.n	8009612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009610:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2201      	movs	r2, #1
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800963c:	2b01      	cmp	r3, #1
 800963e:	d101      	bne.n	8009644 <HAL_TIM_ConfigClockSource+0x18>
 8009640:	2302      	movs	r3, #2
 8009642:	e0a6      	b.n	8009792 <HAL_TIM_ConfigClockSource+0x166>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2201      	movs	r2, #1
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2202      	movs	r2, #2
 8009650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009662:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800966a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2b40      	cmp	r3, #64	; 0x40
 800967a:	d067      	beq.n	800974c <HAL_TIM_ConfigClockSource+0x120>
 800967c:	2b40      	cmp	r3, #64	; 0x40
 800967e:	d80b      	bhi.n	8009698 <HAL_TIM_ConfigClockSource+0x6c>
 8009680:	2b10      	cmp	r3, #16
 8009682:	d073      	beq.n	800976c <HAL_TIM_ConfigClockSource+0x140>
 8009684:	2b10      	cmp	r3, #16
 8009686:	d802      	bhi.n	800968e <HAL_TIM_ConfigClockSource+0x62>
 8009688:	2b00      	cmp	r3, #0
 800968a:	d06f      	beq.n	800976c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800968c:	e078      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800968e:	2b20      	cmp	r3, #32
 8009690:	d06c      	beq.n	800976c <HAL_TIM_ConfigClockSource+0x140>
 8009692:	2b30      	cmp	r3, #48	; 0x30
 8009694:	d06a      	beq.n	800976c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009696:	e073      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009698:	2b70      	cmp	r3, #112	; 0x70
 800969a:	d00d      	beq.n	80096b8 <HAL_TIM_ConfigClockSource+0x8c>
 800969c:	2b70      	cmp	r3, #112	; 0x70
 800969e:	d804      	bhi.n	80096aa <HAL_TIM_ConfigClockSource+0x7e>
 80096a0:	2b50      	cmp	r3, #80	; 0x50
 80096a2:	d033      	beq.n	800970c <HAL_TIM_ConfigClockSource+0xe0>
 80096a4:	2b60      	cmp	r3, #96	; 0x60
 80096a6:	d041      	beq.n	800972c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80096a8:	e06a      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80096aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ae:	d066      	beq.n	800977e <HAL_TIM_ConfigClockSource+0x152>
 80096b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096b4:	d017      	beq.n	80096e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80096b6:	e063      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	6899      	ldr	r1, [r3, #8]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f000 fb5a 	bl	8009d80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	609a      	str	r2, [r3, #8]
      break;
 80096e4:	e04c      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	6899      	ldr	r1, [r3, #8]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	f000 fb43 	bl	8009d80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009708:	609a      	str	r2, [r3, #8]
      break;
 800970a:	e039      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6818      	ldr	r0, [r3, #0]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	6859      	ldr	r1, [r3, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	461a      	mov	r2, r3
 800971a:	f000 fab7 	bl	8009c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	2150      	movs	r1, #80	; 0x50
 8009724:	4618      	mov	r0, r3
 8009726:	f000 fb10 	bl	8009d4a <TIM_ITRx_SetConfig>
      break;
 800972a:	e029      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6818      	ldr	r0, [r3, #0]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	6859      	ldr	r1, [r3, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	461a      	mov	r2, r3
 800973a:	f000 fad6 	bl	8009cea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2160      	movs	r1, #96	; 0x60
 8009744:	4618      	mov	r0, r3
 8009746:	f000 fb00 	bl	8009d4a <TIM_ITRx_SetConfig>
      break;
 800974a:	e019      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6818      	ldr	r0, [r3, #0]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	6859      	ldr	r1, [r3, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	461a      	mov	r2, r3
 800975a:	f000 fa97 	bl	8009c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2140      	movs	r1, #64	; 0x40
 8009764:	4618      	mov	r0, r3
 8009766:	f000 faf0 	bl	8009d4a <TIM_ITRx_SetConfig>
      break;
 800976a:	e009      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f000 fae7 	bl	8009d4a <TIM_ITRx_SetConfig>
      break;
 800977c:	e000      	b.n	8009780 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800977e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097b6:	bf00      	nop
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b083      	sub	sp, #12
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097ca:	bf00      	nop
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097d6:	b480      	push	{r7}
 80097d8:	b083      	sub	sp, #12
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097de:	bf00      	nop
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
	...

080097ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a40      	ldr	r2, [pc, #256]	; (8009900 <TIM_Base_SetConfig+0x114>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d013      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800980a:	d00f      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a3d      	ldr	r2, [pc, #244]	; (8009904 <TIM_Base_SetConfig+0x118>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00b      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a3c      	ldr	r2, [pc, #240]	; (8009908 <TIM_Base_SetConfig+0x11c>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d007      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a3b      	ldr	r2, [pc, #236]	; (800990c <TIM_Base_SetConfig+0x120>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_Base_SetConfig+0x40>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a3a      	ldr	r2, [pc, #232]	; (8009910 <TIM_Base_SetConfig+0x124>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d108      	bne.n	800983e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4313      	orrs	r3, r2
 800983c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a2f      	ldr	r2, [pc, #188]	; (8009900 <TIM_Base_SetConfig+0x114>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d02b      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800984c:	d027      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a2c      	ldr	r2, [pc, #176]	; (8009904 <TIM_Base_SetConfig+0x118>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d023      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a2b      	ldr	r2, [pc, #172]	; (8009908 <TIM_Base_SetConfig+0x11c>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d01f      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a2a      	ldr	r2, [pc, #168]	; (800990c <TIM_Base_SetConfig+0x120>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d01b      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a29      	ldr	r2, [pc, #164]	; (8009910 <TIM_Base_SetConfig+0x124>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d017      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a28      	ldr	r2, [pc, #160]	; (8009914 <TIM_Base_SetConfig+0x128>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d013      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a27      	ldr	r2, [pc, #156]	; (8009918 <TIM_Base_SetConfig+0x12c>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d00f      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a26      	ldr	r2, [pc, #152]	; (800991c <TIM_Base_SetConfig+0x130>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00b      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a25      	ldr	r2, [pc, #148]	; (8009920 <TIM_Base_SetConfig+0x134>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d007      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a24      	ldr	r2, [pc, #144]	; (8009924 <TIM_Base_SetConfig+0x138>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d003      	beq.n	800989e <TIM_Base_SetConfig+0xb2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a23      	ldr	r2, [pc, #140]	; (8009928 <TIM_Base_SetConfig+0x13c>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d108      	bne.n	80098b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	689a      	ldr	r2, [r3, #8]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a0a      	ldr	r2, [pc, #40]	; (8009900 <TIM_Base_SetConfig+0x114>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d003      	beq.n	80098e4 <TIM_Base_SetConfig+0xf8>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	4a0c      	ldr	r2, [pc, #48]	; (8009910 <TIM_Base_SetConfig+0x124>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d103      	bne.n	80098ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	691a      	ldr	r2, [r3, #16]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	615a      	str	r2, [r3, #20]
}
 80098f2:	bf00      	nop
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
 80098fe:	bf00      	nop
 8009900:	40010000 	.word	0x40010000
 8009904:	40000400 	.word	0x40000400
 8009908:	40000800 	.word	0x40000800
 800990c:	40000c00 	.word	0x40000c00
 8009910:	40010400 	.word	0x40010400
 8009914:	40014000 	.word	0x40014000
 8009918:	40014400 	.word	0x40014400
 800991c:	40014800 	.word	0x40014800
 8009920:	40001800 	.word	0x40001800
 8009924:	40001c00 	.word	0x40001c00
 8009928:	40002000 	.word	0x40002000

0800992c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	f023 0201 	bic.w	r2, r3, #1
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f023 0303 	bic.w	r3, r3, #3
 8009962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	4313      	orrs	r3, r2
 800996c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	f023 0302 	bic.w	r3, r3, #2
 8009974:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	4313      	orrs	r3, r2
 800997e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a20      	ldr	r2, [pc, #128]	; (8009a04 <TIM_OC1_SetConfig+0xd8>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d003      	beq.n	8009990 <TIM_OC1_SetConfig+0x64>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a1f      	ldr	r2, [pc, #124]	; (8009a08 <TIM_OC1_SetConfig+0xdc>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d10c      	bne.n	80099aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f023 0308 	bic.w	r3, r3, #8
 8009996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f023 0304 	bic.w	r3, r3, #4
 80099a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a15      	ldr	r2, [pc, #84]	; (8009a04 <TIM_OC1_SetConfig+0xd8>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d003      	beq.n	80099ba <TIM_OC1_SetConfig+0x8e>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a14      	ldr	r2, [pc, #80]	; (8009a08 <TIM_OC1_SetConfig+0xdc>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d111      	bne.n	80099de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	4313      	orrs	r3, r2
 80099dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	685a      	ldr	r2, [r3, #4]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	621a      	str	r2, [r3, #32]
}
 80099f8:	bf00      	nop
 80099fa:	371c      	adds	r7, #28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	40010000 	.word	0x40010000
 8009a08:	40010400 	.word	0x40010400

08009a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	f023 0210 	bic.w	r2, r3, #16
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f023 0320 	bic.w	r3, r3, #32
 8009a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a22      	ldr	r2, [pc, #136]	; (8009af0 <TIM_OC2_SetConfig+0xe4>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d003      	beq.n	8009a74 <TIM_OC2_SetConfig+0x68>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a21      	ldr	r2, [pc, #132]	; (8009af4 <TIM_OC2_SetConfig+0xe8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d10d      	bne.n	8009a90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	011b      	lsls	r3, r3, #4
 8009a82:	697a      	ldr	r2, [r7, #20]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a17      	ldr	r2, [pc, #92]	; (8009af0 <TIM_OC2_SetConfig+0xe4>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d003      	beq.n	8009aa0 <TIM_OC2_SetConfig+0x94>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a16      	ldr	r2, [pc, #88]	; (8009af4 <TIM_OC2_SetConfig+0xe8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d113      	bne.n	8009ac8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009aa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	685a      	ldr	r2, [r3, #4]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	621a      	str	r2, [r3, #32]
}
 8009ae2:	bf00      	nop
 8009ae4:	371c      	adds	r7, #28
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	40010000 	.word	0x40010000
 8009af4:	40010400 	.word	0x40010400

08009af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b087      	sub	sp, #28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a1b      	ldr	r3, [r3, #32]
 8009b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a1b      	ldr	r3, [r3, #32]
 8009b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f023 0303 	bic.w	r3, r3, #3
 8009b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a21      	ldr	r2, [pc, #132]	; (8009bd8 <TIM_OC3_SetConfig+0xe0>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d003      	beq.n	8009b5e <TIM_OC3_SetConfig+0x66>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a20      	ldr	r2, [pc, #128]	; (8009bdc <TIM_OC3_SetConfig+0xe4>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d10d      	bne.n	8009b7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	021b      	lsls	r3, r3, #8
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	4a16      	ldr	r2, [pc, #88]	; (8009bd8 <TIM_OC3_SetConfig+0xe0>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d003      	beq.n	8009b8a <TIM_OC3_SetConfig+0x92>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4a15      	ldr	r2, [pc, #84]	; (8009bdc <TIM_OC3_SetConfig+0xe4>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d113      	bne.n	8009bb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	695b      	ldr	r3, [r3, #20]
 8009b9e:	011b      	lsls	r3, r3, #4
 8009ba0:	693a      	ldr	r2, [r7, #16]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	011b      	lsls	r3, r3, #4
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	693a      	ldr	r2, [r7, #16]
 8009bb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	621a      	str	r2, [r3, #32]
}
 8009bcc:	bf00      	nop
 8009bce:	371c      	adds	r7, #28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	40010000 	.word	0x40010000
 8009bdc:	40010400 	.word	0x40010400

08009be0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	021b      	lsls	r3, r3, #8
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	031b      	lsls	r3, r3, #12
 8009c32:	693a      	ldr	r2, [r7, #16]
 8009c34:	4313      	orrs	r3, r2
 8009c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a12      	ldr	r2, [pc, #72]	; (8009c84 <TIM_OC4_SetConfig+0xa4>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d003      	beq.n	8009c48 <TIM_OC4_SetConfig+0x68>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a11      	ldr	r2, [pc, #68]	; (8009c88 <TIM_OC4_SetConfig+0xa8>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d109      	bne.n	8009c5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	019b      	lsls	r3, r3, #6
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	621a      	str	r2, [r3, #32]
}
 8009c76:	bf00      	nop
 8009c78:	371c      	adds	r7, #28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	40010000 	.word	0x40010000
 8009c88:	40010400 	.word	0x40010400

08009c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b087      	sub	sp, #28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6a1b      	ldr	r3, [r3, #32]
 8009c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	6a1b      	ldr	r3, [r3, #32]
 8009ca2:	f023 0201 	bic.w	r2, r3, #1
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	011b      	lsls	r3, r3, #4
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f023 030a 	bic.w	r3, r3, #10
 8009cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	621a      	str	r2, [r3, #32]
}
 8009cde:	bf00      	nop
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b087      	sub	sp, #28
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	60f8      	str	r0, [r7, #12]
 8009cf2:	60b9      	str	r1, [r7, #8]
 8009cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	f023 0210 	bic.w	r2, r3, #16
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	6a1b      	ldr	r3, [r3, #32]
 8009d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	031b      	lsls	r3, r3, #12
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	011b      	lsls	r3, r3, #4
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	697a      	ldr	r2, [r7, #20]
 8009d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	693a      	ldr	r2, [r7, #16]
 8009d3c:	621a      	str	r2, [r3, #32]
}
 8009d3e:	bf00      	nop
 8009d40:	371c      	adds	r7, #28
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	f043 0307 	orr.w	r3, r3, #7
 8009d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	609a      	str	r2, [r3, #8]
}
 8009d74:	bf00      	nop
 8009d76:	3714      	adds	r7, #20
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b087      	sub	sp, #28
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
 8009d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	021a      	lsls	r2, r3, #8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	431a      	orrs	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	697a      	ldr	r2, [r7, #20]
 8009daa:	4313      	orrs	r3, r2
 8009dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	697a      	ldr	r2, [r7, #20]
 8009db2:	609a      	str	r2, [r3, #8]
}
 8009db4:	bf00      	nop
 8009db6:	371c      	adds	r7, #28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f003 031f 	and.w	r3, r3, #31
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	6a1a      	ldr	r2, [r3, #32]
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	43db      	mvns	r3, r3
 8009de2:	401a      	ands	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6a1a      	ldr	r2, [r3, #32]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	f003 031f 	and.w	r3, r3, #31
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	fa01 f303 	lsl.w	r3, r1, r3
 8009df8:	431a      	orrs	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
	...

08009e0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d101      	bne.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e20:	2302      	movs	r3, #2
 8009e22:	e05a      	b.n	8009eda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2202      	movs	r2, #2
 8009e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68fa      	ldr	r2, [r7, #12]
 8009e5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a21      	ldr	r2, [pc, #132]	; (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d022      	beq.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e70:	d01d      	beq.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1d      	ldr	r2, [pc, #116]	; (8009eec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d018      	beq.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a1b      	ldr	r2, [pc, #108]	; (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d013      	beq.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a1a      	ldr	r2, [pc, #104]	; (8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d00e      	beq.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a18      	ldr	r2, [pc, #96]	; (8009ef8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d009      	beq.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a17      	ldr	r2, [pc, #92]	; (8009efc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d004      	beq.n	8009eae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a15      	ldr	r2, [pc, #84]	; (8009f00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d10c      	bne.n	8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	40010000 	.word	0x40010000
 8009eec:	40000400 	.word	0x40000400
 8009ef0:	40000800 	.word	0x40000800
 8009ef4:	40000c00 	.word	0x40000c00
 8009ef8:	40010400 	.word	0x40010400
 8009efc:	40014000 	.word	0x40014000
 8009f00:	40001800 	.word	0x40001800

08009f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f0c:	bf00      	nop
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b083      	sub	sp, #12
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d101      	bne.n	8009f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e03f      	b.n	8009fbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d106      	bne.n	8009f58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7f7 ffa8 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2224      	movs	r2, #36	; 0x24
 8009f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fbcf 	bl	800a714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	691a      	ldr	r2, [r3, #16]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	695a      	ldr	r2, [r3, #20]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68da      	ldr	r2, [r3, #12]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009fa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2220      	movs	r2, #32
 8009fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2220      	movs	r2, #32
 8009fb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fc6:	b480      	push	{r7}
 8009fc8:	b085      	sub	sp, #20
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	60f8      	str	r0, [r7, #12]
 8009fce:	60b9      	str	r1, [r7, #8]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b20      	cmp	r3, #32
 8009fde:	d130      	bne.n	800a042 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <HAL_UART_Transmit_IT+0x26>
 8009fe6:	88fb      	ldrh	r3, [r7, #6]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e029      	b.n	800a044 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_UART_Transmit_IT+0x38>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e022      	b.n	800a044 <HAL_UART_Transmit_IT+0x7e>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	88fa      	ldrh	r2, [r7, #6]
 800a010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	88fa      	ldrh	r2, [r7, #6]
 800a016:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2221      	movs	r2, #33	; 0x21
 800a022:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68da      	ldr	r2, [r3, #12]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a03c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a03e:	2300      	movs	r3, #0
 800a040:	e000      	b.n	800a044 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a042:	2302      	movs	r3, #2
  }
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b20      	cmp	r3, #32
 800a068:	d166      	bne.n	800a138 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <HAL_UART_Receive_DMA+0x26>
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e05f      	b.n	800a13a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a080:	2b01      	cmp	r3, #1
 800a082:	d101      	bne.n	800a088 <HAL_UART_Receive_DMA+0x38>
 800a084:	2302      	movs	r3, #2
 800a086:	e058      	b.n	800a13a <HAL_UART_Receive_DMA+0xea>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	88fa      	ldrh	r2, [r7, #6]
 800a09a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2222      	movs	r2, #34	; 0x22
 800a0a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ae:	4a25      	ldr	r2, [pc, #148]	; (800a144 <HAL_UART_Receive_DMA+0xf4>)
 800a0b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b6:	4a24      	ldr	r2, [pc, #144]	; (800a148 <HAL_UART_Receive_DMA+0xf8>)
 800a0b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0be:	4a23      	ldr	r2, [pc, #140]	; (800a14c <HAL_UART_Receive_DMA+0xfc>)
 800a0c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4619      	mov	r1, r3
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	88fb      	ldrh	r3, [r7, #6]
 800a0e2:	f7fa f951 	bl	8004388 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	613b      	str	r3, [r7, #16]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	613b      	str	r3, [r7, #16]
 800a0fa:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a112:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	695a      	ldr	r2, [r3, #20]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f042 0201 	orr.w	r2, r2, #1
 800a122:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	695a      	ldr	r2, [r3, #20]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a132:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	e000      	b.n	800a13a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a138:	2302      	movs	r3, #2
  }
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	0800a38d 	.word	0x0800a38d
 800a148:	0800a3f5 	.word	0x0800a3f5
 800a14c:	0800a411 	.word	0x0800a411

0800a150 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a174:	2300      	movs	r3, #0
 800a176:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	f003 030f 	and.w	r3, r3, #15
 800a17e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10d      	bne.n	800a1a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	f003 0320 	and.w	r3, r3, #32
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d008      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x52>
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	f003 0320 	and.w	r3, r3, #32
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 fa38 	bl	800a610 <UART_Receive_IT>
      return;
 800a1a0:	e0d1      	b.n	800a346 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 80b0 	beq.w	800a30a <HAL_UART_IRQHandler+0x1ba>
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	f003 0301 	and.w	r3, r3, #1
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d105      	bne.n	800a1c0 <HAL_UART_IRQHandler+0x70>
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	f000 80a5 	beq.w	800a30a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a1c0:	69fb      	ldr	r3, [r7, #28]
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00a      	beq.n	800a1e0 <HAL_UART_IRQHandler+0x90>
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d005      	beq.n	800a1e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d8:	f043 0201 	orr.w	r2, r3, #1
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	f003 0304 	and.w	r3, r3, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <HAL_UART_IRQHandler+0xb0>
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	f003 0301 	and.w	r3, r3, #1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d005      	beq.n	800a200 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f8:	f043 0202 	orr.w	r2, r3, #2
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	f003 0302 	and.w	r3, r3, #2
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00a      	beq.n	800a220 <HAL_UART_IRQHandler+0xd0>
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b00      	cmp	r3, #0
 800a212:	d005      	beq.n	800a220 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a218:	f043 0204 	orr.w	r2, r3, #4
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	f003 0308 	and.w	r3, r3, #8
 800a226:	2b00      	cmp	r3, #0
 800a228:	d00f      	beq.n	800a24a <HAL_UART_IRQHandler+0xfa>
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d104      	bne.n	800a23e <HAL_UART_IRQHandler+0xee>
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d005      	beq.n	800a24a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a242:	f043 0208 	orr.w	r2, r3, #8
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d078      	beq.n	800a344 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	f003 0320 	and.w	r3, r3, #32
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d007      	beq.n	800a26c <HAL_UART_IRQHandler+0x11c>
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	f003 0320 	and.w	r3, r3, #32
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f9d2 	bl	800a610 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a276:	2b40      	cmp	r3, #64	; 0x40
 800a278:	bf0c      	ite	eq
 800a27a:	2301      	moveq	r3, #1
 800a27c:	2300      	movne	r3, #0
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a286:	f003 0308 	and.w	r3, r3, #8
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d102      	bne.n	800a294 <HAL_UART_IRQHandler+0x144>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d031      	beq.n	800a2f8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f91b 	bl	800a4d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a4:	2b40      	cmp	r3, #64	; 0x40
 800a2a6:	d123      	bne.n	800a2f0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	695a      	ldr	r2, [r3, #20]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2b6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d013      	beq.n	800a2e8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2c4:	4a21      	ldr	r2, [pc, #132]	; (800a34c <HAL_UART_IRQHandler+0x1fc>)
 800a2c6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fa f8b3 	bl	8004438 <HAL_DMA_Abort_IT>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d016      	beq.n	800a306 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a2e2:	4610      	mov	r0, r2
 800a2e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2e6:	e00e      	b.n	800a306 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f845 	bl	800a378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2ee:	e00a      	b.n	800a306 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f841 	bl	800a378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2f6:	e006      	b.n	800a306 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 f83d 	bl	800a378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a304:	e01e      	b.n	800a344 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a306:	bf00      	nop
    return;
 800a308:	e01c      	b.n	800a344 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a310:	2b00      	cmp	r3, #0
 800a312:	d008      	beq.n	800a326 <HAL_UART_IRQHandler+0x1d6>
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f908 	bl	800a534 <UART_Transmit_IT>
    return;
 800a324:	e00f      	b.n	800a346 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00a      	beq.n	800a346 <HAL_UART_IRQHandler+0x1f6>
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a336:	2b00      	cmp	r3, #0
 800a338:	d005      	beq.n	800a346 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 f950 	bl	800a5e0 <UART_EndTransmit_IT>
    return;
 800a340:	bf00      	nop
 800a342:	e000      	b.n	800a346 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a344:	bf00      	nop
  }
}
 800a346:	3720      	adds	r7, #32
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	0800a50d 	.word	0x0800a50d

0800a350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a398:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d11e      	bne.n	800a3e6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	68da      	ldr	r2, [r3, #12]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3bc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	695a      	ldr	r2, [r3, #20]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f022 0201 	bic.w	r2, r2, #1
 800a3cc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	695a      	ldr	r2, [r3, #20]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a3dc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2220      	movs	r2, #32
 800a3e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a3e6:	68f8      	ldr	r0, [r7, #12]
 800a3e8:	f7f6 ff34 	bl	8001254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3ec:	bf00      	nop
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a400:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7ff ffae 	bl	800a364 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a408:	bf00      	nop
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a418:	2300      	movs	r3, #0
 800a41a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a420:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a42c:	2b80      	cmp	r3, #128	; 0x80
 800a42e:	bf0c      	ite	eq
 800a430:	2301      	moveq	r3, #1
 800a432:	2300      	movne	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b21      	cmp	r3, #33	; 0x21
 800a442:	d108      	bne.n	800a456 <UART_DMAError+0x46>
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d005      	beq.n	800a456 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2200      	movs	r2, #0
 800a44e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a450:	68b8      	ldr	r0, [r7, #8]
 800a452:	f000 f827 	bl	800a4a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a460:	2b40      	cmp	r3, #64	; 0x40
 800a462:	bf0c      	ite	eq
 800a464:	2301      	moveq	r3, #1
 800a466:	2300      	movne	r3, #0
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b22      	cmp	r3, #34	; 0x22
 800a476:	d108      	bne.n	800a48a <UART_DMAError+0x7a>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2200      	movs	r2, #0
 800a482:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a484:	68b8      	ldr	r0, [r7, #8]
 800a486:	f000 f823 	bl	800a4d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	f043 0210 	orr.w	r2, r3, #16
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a496:	68b8      	ldr	r0, [r7, #8]
 800a498:	f7ff ff6e 	bl	800a378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a49c:	bf00      	nop
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	68da      	ldr	r2, [r3, #12]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a4ba:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68da      	ldr	r2, [r3, #12]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a4e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	695a      	ldr	r2, [r3, #20]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 0201 	bic.w	r2, r2, #1
 800a4f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a500:	bf00      	nop
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2200      	movs	r2, #0
 800a51e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7ff ff26 	bl	800a378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a52c:	bf00      	nop
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a542:	b2db      	uxtb	r3, r3
 800a544:	2b21      	cmp	r3, #33	; 0x21
 800a546:	d144      	bne.n	800a5d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a550:	d11a      	bne.n	800a588 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	881b      	ldrh	r3, [r3, #0]
 800a55c:	461a      	mov	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a566:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d105      	bne.n	800a57c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	1c9a      	adds	r2, r3, #2
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	621a      	str	r2, [r3, #32]
 800a57a:	e00e      	b.n	800a59a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	621a      	str	r2, [r3, #32]
 800a586:	e008      	b.n	800a59a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	1c59      	adds	r1, r3, #1
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	6211      	str	r1, [r2, #32]
 800a592:	781a      	ldrb	r2, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d10f      	bne.n	800a5ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68da      	ldr	r2, [r3, #12]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68da      	ldr	r2, [r3, #12]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e000      	b.n	800a5d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a5d2:	2302      	movs	r3, #2
  }
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68da      	ldr	r2, [r3, #12]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f7ff fea5 	bl	800a350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	2b22      	cmp	r3, #34	; 0x22
 800a622:	d171      	bne.n	800a708 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a62c:	d123      	bne.n	800a676 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a632:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d10e      	bne.n	800a65a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	b29b      	uxth	r3, r3
 800a644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a648:	b29a      	uxth	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a652:	1c9a      	adds	r2, r3, #2
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	629a      	str	r2, [r3, #40]	; 0x28
 800a658:	e029      	b.n	800a6ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	b29b      	uxth	r3, r3
 800a662:	b2db      	uxtb	r3, r3
 800a664:	b29a      	uxth	r2, r3
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66e:	1c5a      	adds	r2, r3, #1
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	629a      	str	r2, [r3, #40]	; 0x28
 800a674:	e01b      	b.n	800a6ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d10a      	bne.n	800a694 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	6858      	ldr	r0, [r3, #4]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a688:	1c59      	adds	r1, r3, #1
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	6291      	str	r1, [r2, #40]	; 0x28
 800a68e:	b2c2      	uxtb	r2, r0
 800a690:	701a      	strb	r2, [r3, #0]
 800a692:	e00c      	b.n	800a6ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a0:	1c58      	adds	r0, r3, #1
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	6288      	str	r0, [r1, #40]	; 0x28
 800a6a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a6aa:	b2d2      	uxtb	r2, r2
 800a6ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d120      	bne.n	800a704 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68da      	ldr	r2, [r3, #12]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f022 0220 	bic.w	r2, r2, #32
 800a6d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68da      	ldr	r2, [r3, #12]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	695a      	ldr	r2, [r3, #20]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f022 0201 	bic.w	r2, r2, #1
 800a6f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2220      	movs	r2, #32
 800a6f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f7f6 fdaa 	bl	8001254 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	e002      	b.n	800a70a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	e000      	b.n	800a70a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800a708:	2302      	movs	r3, #2
  }
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a718:	b085      	sub	sp, #20
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	68da      	ldr	r2, [r3, #12]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	430a      	orrs	r2, r1
 800a732:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689a      	ldr	r2, [r3, #8]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	431a      	orrs	r2, r3
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	695b      	ldr	r3, [r3, #20]
 800a742:	431a      	orrs	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	69db      	ldr	r3, [r3, #28]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a756:	f023 030c 	bic.w	r3, r3, #12
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	6812      	ldr	r2, [r2, #0]
 800a75e:	68f9      	ldr	r1, [r7, #12]
 800a760:	430b      	orrs	r3, r1
 800a762:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	430a      	orrs	r2, r1
 800a778:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	69db      	ldr	r3, [r3, #28]
 800a77e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a782:	f040 8199 	bne.w	800aab8 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4ac6      	ldr	r2, [pc, #792]	; (800aaa4 <UART_SetConfig+0x390>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d00f      	beq.n	800a7b0 <UART_SetConfig+0x9c>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4ac4      	ldr	r2, [pc, #784]	; (800aaa8 <UART_SetConfig+0x394>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d00a      	beq.n	800a7b0 <UART_SetConfig+0x9c>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4ac3      	ldr	r2, [pc, #780]	; (800aaac <UART_SetConfig+0x398>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d005      	beq.n	800a7b0 <UART_SetConfig+0x9c>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4ac1      	ldr	r2, [pc, #772]	; (800aab0 <UART_SetConfig+0x39c>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	f040 80bd 	bne.w	800a92a <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a7b0:	f7fd f898 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 800a7b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	461d      	mov	r5, r3
 800a7ba:	f04f 0600 	mov.w	r6, #0
 800a7be:	46a8      	mov	r8, r5
 800a7c0:	46b1      	mov	r9, r6
 800a7c2:	eb18 0308 	adds.w	r3, r8, r8
 800a7c6:	eb49 0409 	adc.w	r4, r9, r9
 800a7ca:	4698      	mov	r8, r3
 800a7cc:	46a1      	mov	r9, r4
 800a7ce:	eb18 0805 	adds.w	r8, r8, r5
 800a7d2:	eb49 0906 	adc.w	r9, r9, r6
 800a7d6:	f04f 0100 	mov.w	r1, #0
 800a7da:	f04f 0200 	mov.w	r2, #0
 800a7de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a7e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a7e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a7ea:	4688      	mov	r8, r1
 800a7ec:	4691      	mov	r9, r2
 800a7ee:	eb18 0005 	adds.w	r0, r8, r5
 800a7f2:	eb49 0106 	adc.w	r1, r9, r6
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	461d      	mov	r5, r3
 800a7fc:	f04f 0600 	mov.w	r6, #0
 800a800:	196b      	adds	r3, r5, r5
 800a802:	eb46 0406 	adc.w	r4, r6, r6
 800a806:	461a      	mov	r2, r3
 800a808:	4623      	mov	r3, r4
 800a80a:	f7f5 fd11 	bl	8000230 <__aeabi_uldivmod>
 800a80e:	4603      	mov	r3, r0
 800a810:	460c      	mov	r4, r1
 800a812:	461a      	mov	r2, r3
 800a814:	4ba7      	ldr	r3, [pc, #668]	; (800aab4 <UART_SetConfig+0x3a0>)
 800a816:	fba3 2302 	umull	r2, r3, r3, r2
 800a81a:	095b      	lsrs	r3, r3, #5
 800a81c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	461d      	mov	r5, r3
 800a824:	f04f 0600 	mov.w	r6, #0
 800a828:	46a9      	mov	r9, r5
 800a82a:	46b2      	mov	sl, r6
 800a82c:	eb19 0309 	adds.w	r3, r9, r9
 800a830:	eb4a 040a 	adc.w	r4, sl, sl
 800a834:	4699      	mov	r9, r3
 800a836:	46a2      	mov	sl, r4
 800a838:	eb19 0905 	adds.w	r9, r9, r5
 800a83c:	eb4a 0a06 	adc.w	sl, sl, r6
 800a840:	f04f 0100 	mov.w	r1, #0
 800a844:	f04f 0200 	mov.w	r2, #0
 800a848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a84c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a850:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a854:	4689      	mov	r9, r1
 800a856:	4692      	mov	sl, r2
 800a858:	eb19 0005 	adds.w	r0, r9, r5
 800a85c:	eb4a 0106 	adc.w	r1, sl, r6
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	461d      	mov	r5, r3
 800a866:	f04f 0600 	mov.w	r6, #0
 800a86a:	196b      	adds	r3, r5, r5
 800a86c:	eb46 0406 	adc.w	r4, r6, r6
 800a870:	461a      	mov	r2, r3
 800a872:	4623      	mov	r3, r4
 800a874:	f7f5 fcdc 	bl	8000230 <__aeabi_uldivmod>
 800a878:	4603      	mov	r3, r0
 800a87a:	460c      	mov	r4, r1
 800a87c:	461a      	mov	r2, r3
 800a87e:	4b8d      	ldr	r3, [pc, #564]	; (800aab4 <UART_SetConfig+0x3a0>)
 800a880:	fba3 1302 	umull	r1, r3, r3, r2
 800a884:	095b      	lsrs	r3, r3, #5
 800a886:	2164      	movs	r1, #100	; 0x64
 800a888:	fb01 f303 	mul.w	r3, r1, r3
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	3332      	adds	r3, #50	; 0x32
 800a892:	4a88      	ldr	r2, [pc, #544]	; (800aab4 <UART_SetConfig+0x3a0>)
 800a894:	fba2 2303 	umull	r2, r3, r2, r3
 800a898:	095b      	lsrs	r3, r3, #5
 800a89a:	005b      	lsls	r3, r3, #1
 800a89c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a8a0:	4498      	add	r8, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	461d      	mov	r5, r3
 800a8a6:	f04f 0600 	mov.w	r6, #0
 800a8aa:	46a9      	mov	r9, r5
 800a8ac:	46b2      	mov	sl, r6
 800a8ae:	eb19 0309 	adds.w	r3, r9, r9
 800a8b2:	eb4a 040a 	adc.w	r4, sl, sl
 800a8b6:	4699      	mov	r9, r3
 800a8b8:	46a2      	mov	sl, r4
 800a8ba:	eb19 0905 	adds.w	r9, r9, r5
 800a8be:	eb4a 0a06 	adc.w	sl, sl, r6
 800a8c2:	f04f 0100 	mov.w	r1, #0
 800a8c6:	f04f 0200 	mov.w	r2, #0
 800a8ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a8ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a8d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	4692      	mov	sl, r2
 800a8da:	eb19 0005 	adds.w	r0, r9, r5
 800a8de:	eb4a 0106 	adc.w	r1, sl, r6
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	461d      	mov	r5, r3
 800a8e8:	f04f 0600 	mov.w	r6, #0
 800a8ec:	196b      	adds	r3, r5, r5
 800a8ee:	eb46 0406 	adc.w	r4, r6, r6
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	4623      	mov	r3, r4
 800a8f6:	f7f5 fc9b 	bl	8000230 <__aeabi_uldivmod>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	461a      	mov	r2, r3
 800a900:	4b6c      	ldr	r3, [pc, #432]	; (800aab4 <UART_SetConfig+0x3a0>)
 800a902:	fba3 1302 	umull	r1, r3, r3, r2
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	2164      	movs	r1, #100	; 0x64
 800a90a:	fb01 f303 	mul.w	r3, r1, r3
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	00db      	lsls	r3, r3, #3
 800a912:	3332      	adds	r3, #50	; 0x32
 800a914:	4a67      	ldr	r2, [pc, #412]	; (800aab4 <UART_SetConfig+0x3a0>)
 800a916:	fba2 2303 	umull	r2, r3, r2, r3
 800a91a:	095b      	lsrs	r3, r3, #5
 800a91c:	f003 0207 	and.w	r2, r3, #7
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4442      	add	r2, r8
 800a926:	609a      	str	r2, [r3, #8]
 800a928:	e27d      	b.n	800ae26 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a92a:	f7fc ffc7 	bl	80078bc <HAL_RCC_GetPCLK1Freq>
 800a92e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	461d      	mov	r5, r3
 800a934:	f04f 0600 	mov.w	r6, #0
 800a938:	46a8      	mov	r8, r5
 800a93a:	46b1      	mov	r9, r6
 800a93c:	eb18 0308 	adds.w	r3, r8, r8
 800a940:	eb49 0409 	adc.w	r4, r9, r9
 800a944:	4698      	mov	r8, r3
 800a946:	46a1      	mov	r9, r4
 800a948:	eb18 0805 	adds.w	r8, r8, r5
 800a94c:	eb49 0906 	adc.w	r9, r9, r6
 800a950:	f04f 0100 	mov.w	r1, #0
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a95c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a960:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a964:	4688      	mov	r8, r1
 800a966:	4691      	mov	r9, r2
 800a968:	eb18 0005 	adds.w	r0, r8, r5
 800a96c:	eb49 0106 	adc.w	r1, r9, r6
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	461d      	mov	r5, r3
 800a976:	f04f 0600 	mov.w	r6, #0
 800a97a:	196b      	adds	r3, r5, r5
 800a97c:	eb46 0406 	adc.w	r4, r6, r6
 800a980:	461a      	mov	r2, r3
 800a982:	4623      	mov	r3, r4
 800a984:	f7f5 fc54 	bl	8000230 <__aeabi_uldivmod>
 800a988:	4603      	mov	r3, r0
 800a98a:	460c      	mov	r4, r1
 800a98c:	461a      	mov	r2, r3
 800a98e:	4b49      	ldr	r3, [pc, #292]	; (800aab4 <UART_SetConfig+0x3a0>)
 800a990:	fba3 2302 	umull	r2, r3, r3, r2
 800a994:	095b      	lsrs	r3, r3, #5
 800a996:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	461d      	mov	r5, r3
 800a99e:	f04f 0600 	mov.w	r6, #0
 800a9a2:	46a9      	mov	r9, r5
 800a9a4:	46b2      	mov	sl, r6
 800a9a6:	eb19 0309 	adds.w	r3, r9, r9
 800a9aa:	eb4a 040a 	adc.w	r4, sl, sl
 800a9ae:	4699      	mov	r9, r3
 800a9b0:	46a2      	mov	sl, r4
 800a9b2:	eb19 0905 	adds.w	r9, r9, r5
 800a9b6:	eb4a 0a06 	adc.w	sl, sl, r6
 800a9ba:	f04f 0100 	mov.w	r1, #0
 800a9be:	f04f 0200 	mov.w	r2, #0
 800a9c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9ce:	4689      	mov	r9, r1
 800a9d0:	4692      	mov	sl, r2
 800a9d2:	eb19 0005 	adds.w	r0, r9, r5
 800a9d6:	eb4a 0106 	adc.w	r1, sl, r6
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	461d      	mov	r5, r3
 800a9e0:	f04f 0600 	mov.w	r6, #0
 800a9e4:	196b      	adds	r3, r5, r5
 800a9e6:	eb46 0406 	adc.w	r4, r6, r6
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	f7f5 fc1f 	bl	8000230 <__aeabi_uldivmod>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4b2e      	ldr	r3, [pc, #184]	; (800aab4 <UART_SetConfig+0x3a0>)
 800a9fa:	fba3 1302 	umull	r1, r3, r3, r2
 800a9fe:	095b      	lsrs	r3, r3, #5
 800aa00:	2164      	movs	r1, #100	; 0x64
 800aa02:	fb01 f303 	mul.w	r3, r1, r3
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	00db      	lsls	r3, r3, #3
 800aa0a:	3332      	adds	r3, #50	; 0x32
 800aa0c:	4a29      	ldr	r2, [pc, #164]	; (800aab4 <UART_SetConfig+0x3a0>)
 800aa0e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa12:	095b      	lsrs	r3, r3, #5
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aa1a:	4498      	add	r8, r3
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	461d      	mov	r5, r3
 800aa20:	f04f 0600 	mov.w	r6, #0
 800aa24:	46a9      	mov	r9, r5
 800aa26:	46b2      	mov	sl, r6
 800aa28:	eb19 0309 	adds.w	r3, r9, r9
 800aa2c:	eb4a 040a 	adc.w	r4, sl, sl
 800aa30:	4699      	mov	r9, r3
 800aa32:	46a2      	mov	sl, r4
 800aa34:	eb19 0905 	adds.w	r9, r9, r5
 800aa38:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa3c:	f04f 0100 	mov.w	r1, #0
 800aa40:	f04f 0200 	mov.w	r2, #0
 800aa44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aa4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aa50:	4689      	mov	r9, r1
 800aa52:	4692      	mov	sl, r2
 800aa54:	eb19 0005 	adds.w	r0, r9, r5
 800aa58:	eb4a 0106 	adc.w	r1, sl, r6
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	461d      	mov	r5, r3
 800aa62:	f04f 0600 	mov.w	r6, #0
 800aa66:	196b      	adds	r3, r5, r5
 800aa68:	eb46 0406 	adc.w	r4, r6, r6
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	4623      	mov	r3, r4
 800aa70:	f7f5 fbde 	bl	8000230 <__aeabi_uldivmod>
 800aa74:	4603      	mov	r3, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	461a      	mov	r2, r3
 800aa7a:	4b0e      	ldr	r3, [pc, #56]	; (800aab4 <UART_SetConfig+0x3a0>)
 800aa7c:	fba3 1302 	umull	r1, r3, r3, r2
 800aa80:	095b      	lsrs	r3, r3, #5
 800aa82:	2164      	movs	r1, #100	; 0x64
 800aa84:	fb01 f303 	mul.w	r3, r1, r3
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	00db      	lsls	r3, r3, #3
 800aa8c:	3332      	adds	r3, #50	; 0x32
 800aa8e:	4a09      	ldr	r2, [pc, #36]	; (800aab4 <UART_SetConfig+0x3a0>)
 800aa90:	fba2 2303 	umull	r2, r3, r2, r3
 800aa94:	095b      	lsrs	r3, r3, #5
 800aa96:	f003 0207 	and.w	r2, r3, #7
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4442      	add	r2, r8
 800aaa0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aaa2:	e1c0      	b.n	800ae26 <UART_SetConfig+0x712>
 800aaa4:	40011000 	.word	0x40011000
 800aaa8:	40011400 	.word	0x40011400
 800aaac:	40011800 	.word	0x40011800
 800aab0:	40011c00 	.word	0x40011c00
 800aab4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4adc      	ldr	r2, [pc, #880]	; (800ae30 <UART_SetConfig+0x71c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d00f      	beq.n	800aae2 <UART_SetConfig+0x3ce>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4adb      	ldr	r2, [pc, #876]	; (800ae34 <UART_SetConfig+0x720>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d00a      	beq.n	800aae2 <UART_SetConfig+0x3ce>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4ad9      	ldr	r2, [pc, #868]	; (800ae38 <UART_SetConfig+0x724>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d005      	beq.n	800aae2 <UART_SetConfig+0x3ce>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4ad8      	ldr	r2, [pc, #864]	; (800ae3c <UART_SetConfig+0x728>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	f040 80d1 	bne.w	800ac84 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aae2:	f7fc feff 	bl	80078e4 <HAL_RCC_GetPCLK2Freq>
 800aae6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	469a      	mov	sl, r3
 800aaec:	f04f 0b00 	mov.w	fp, #0
 800aaf0:	46d0      	mov	r8, sl
 800aaf2:	46d9      	mov	r9, fp
 800aaf4:	eb18 0308 	adds.w	r3, r8, r8
 800aaf8:	eb49 0409 	adc.w	r4, r9, r9
 800aafc:	4698      	mov	r8, r3
 800aafe:	46a1      	mov	r9, r4
 800ab00:	eb18 080a 	adds.w	r8, r8, sl
 800ab04:	eb49 090b 	adc.w	r9, r9, fp
 800ab08:	f04f 0100 	mov.w	r1, #0
 800ab0c:	f04f 0200 	mov.w	r2, #0
 800ab10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ab14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ab18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ab1c:	4688      	mov	r8, r1
 800ab1e:	4691      	mov	r9, r2
 800ab20:	eb1a 0508 	adds.w	r5, sl, r8
 800ab24:	eb4b 0609 	adc.w	r6, fp, r9
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	f04f 0400 	mov.w	r4, #0
 800ab3a:	0094      	lsls	r4, r2, #2
 800ab3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ab40:	008b      	lsls	r3, r1, #2
 800ab42:	461a      	mov	r2, r3
 800ab44:	4623      	mov	r3, r4
 800ab46:	4628      	mov	r0, r5
 800ab48:	4631      	mov	r1, r6
 800ab4a:	f7f5 fb71 	bl	8000230 <__aeabi_uldivmod>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	460c      	mov	r4, r1
 800ab52:	461a      	mov	r2, r3
 800ab54:	4bba      	ldr	r3, [pc, #744]	; (800ae40 <UART_SetConfig+0x72c>)
 800ab56:	fba3 2302 	umull	r2, r3, r3, r2
 800ab5a:	095b      	lsrs	r3, r3, #5
 800ab5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	469b      	mov	fp, r3
 800ab64:	f04f 0c00 	mov.w	ip, #0
 800ab68:	46d9      	mov	r9, fp
 800ab6a:	46e2      	mov	sl, ip
 800ab6c:	eb19 0309 	adds.w	r3, r9, r9
 800ab70:	eb4a 040a 	adc.w	r4, sl, sl
 800ab74:	4699      	mov	r9, r3
 800ab76:	46a2      	mov	sl, r4
 800ab78:	eb19 090b 	adds.w	r9, r9, fp
 800ab7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ab80:	f04f 0100 	mov.w	r1, #0
 800ab84:	f04f 0200 	mov.w	r2, #0
 800ab88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab94:	4689      	mov	r9, r1
 800ab96:	4692      	mov	sl, r2
 800ab98:	eb1b 0509 	adds.w	r5, fp, r9
 800ab9c:	eb4c 060a 	adc.w	r6, ip, sl
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	4619      	mov	r1, r3
 800aba6:	f04f 0200 	mov.w	r2, #0
 800abaa:	f04f 0300 	mov.w	r3, #0
 800abae:	f04f 0400 	mov.w	r4, #0
 800abb2:	0094      	lsls	r4, r2, #2
 800abb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800abb8:	008b      	lsls	r3, r1, #2
 800abba:	461a      	mov	r2, r3
 800abbc:	4623      	mov	r3, r4
 800abbe:	4628      	mov	r0, r5
 800abc0:	4631      	mov	r1, r6
 800abc2:	f7f5 fb35 	bl	8000230 <__aeabi_uldivmod>
 800abc6:	4603      	mov	r3, r0
 800abc8:	460c      	mov	r4, r1
 800abca:	461a      	mov	r2, r3
 800abcc:	4b9c      	ldr	r3, [pc, #624]	; (800ae40 <UART_SetConfig+0x72c>)
 800abce:	fba3 1302 	umull	r1, r3, r3, r2
 800abd2:	095b      	lsrs	r3, r3, #5
 800abd4:	2164      	movs	r1, #100	; 0x64
 800abd6:	fb01 f303 	mul.w	r3, r1, r3
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	011b      	lsls	r3, r3, #4
 800abde:	3332      	adds	r3, #50	; 0x32
 800abe0:	4a97      	ldr	r2, [pc, #604]	; (800ae40 <UART_SetConfig+0x72c>)
 800abe2:	fba2 2303 	umull	r2, r3, r2, r3
 800abe6:	095b      	lsrs	r3, r3, #5
 800abe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abec:	4498      	add	r8, r3
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	469b      	mov	fp, r3
 800abf2:	f04f 0c00 	mov.w	ip, #0
 800abf6:	46d9      	mov	r9, fp
 800abf8:	46e2      	mov	sl, ip
 800abfa:	eb19 0309 	adds.w	r3, r9, r9
 800abfe:	eb4a 040a 	adc.w	r4, sl, sl
 800ac02:	4699      	mov	r9, r3
 800ac04:	46a2      	mov	sl, r4
 800ac06:	eb19 090b 	adds.w	r9, r9, fp
 800ac0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac0e:	f04f 0100 	mov.w	r1, #0
 800ac12:	f04f 0200 	mov.w	r2, #0
 800ac16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac22:	4689      	mov	r9, r1
 800ac24:	4692      	mov	sl, r2
 800ac26:	eb1b 0509 	adds.w	r5, fp, r9
 800ac2a:	eb4c 060a 	adc.w	r6, ip, sl
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4619      	mov	r1, r3
 800ac34:	f04f 0200 	mov.w	r2, #0
 800ac38:	f04f 0300 	mov.w	r3, #0
 800ac3c:	f04f 0400 	mov.w	r4, #0
 800ac40:	0094      	lsls	r4, r2, #2
 800ac42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac46:	008b      	lsls	r3, r1, #2
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4623      	mov	r3, r4
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	4631      	mov	r1, r6
 800ac50:	f7f5 faee 	bl	8000230 <__aeabi_uldivmod>
 800ac54:	4603      	mov	r3, r0
 800ac56:	460c      	mov	r4, r1
 800ac58:	461a      	mov	r2, r3
 800ac5a:	4b79      	ldr	r3, [pc, #484]	; (800ae40 <UART_SetConfig+0x72c>)
 800ac5c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac60:	095b      	lsrs	r3, r3, #5
 800ac62:	2164      	movs	r1, #100	; 0x64
 800ac64:	fb01 f303 	mul.w	r3, r1, r3
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	011b      	lsls	r3, r3, #4
 800ac6c:	3332      	adds	r3, #50	; 0x32
 800ac6e:	4a74      	ldr	r2, [pc, #464]	; (800ae40 <UART_SetConfig+0x72c>)
 800ac70:	fba2 2303 	umull	r2, r3, r2, r3
 800ac74:	095b      	lsrs	r3, r3, #5
 800ac76:	f003 020f 	and.w	r2, r3, #15
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	4442      	add	r2, r8
 800ac80:	609a      	str	r2, [r3, #8]
 800ac82:	e0d0      	b.n	800ae26 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac84:	f7fc fe1a 	bl	80078bc <HAL_RCC_GetPCLK1Freq>
 800ac88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	469a      	mov	sl, r3
 800ac8e:	f04f 0b00 	mov.w	fp, #0
 800ac92:	46d0      	mov	r8, sl
 800ac94:	46d9      	mov	r9, fp
 800ac96:	eb18 0308 	adds.w	r3, r8, r8
 800ac9a:	eb49 0409 	adc.w	r4, r9, r9
 800ac9e:	4698      	mov	r8, r3
 800aca0:	46a1      	mov	r9, r4
 800aca2:	eb18 080a 	adds.w	r8, r8, sl
 800aca6:	eb49 090b 	adc.w	r9, r9, fp
 800acaa:	f04f 0100 	mov.w	r1, #0
 800acae:	f04f 0200 	mov.w	r2, #0
 800acb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800acb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800acba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800acbe:	4688      	mov	r8, r1
 800acc0:	4691      	mov	r9, r2
 800acc2:	eb1a 0508 	adds.w	r5, sl, r8
 800acc6:	eb4b 0609 	adc.w	r6, fp, r9
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	4619      	mov	r1, r3
 800acd0:	f04f 0200 	mov.w	r2, #0
 800acd4:	f04f 0300 	mov.w	r3, #0
 800acd8:	f04f 0400 	mov.w	r4, #0
 800acdc:	0094      	lsls	r4, r2, #2
 800acde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ace2:	008b      	lsls	r3, r1, #2
 800ace4:	461a      	mov	r2, r3
 800ace6:	4623      	mov	r3, r4
 800ace8:	4628      	mov	r0, r5
 800acea:	4631      	mov	r1, r6
 800acec:	f7f5 faa0 	bl	8000230 <__aeabi_uldivmod>
 800acf0:	4603      	mov	r3, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	461a      	mov	r2, r3
 800acf6:	4b52      	ldr	r3, [pc, #328]	; (800ae40 <UART_SetConfig+0x72c>)
 800acf8:	fba3 2302 	umull	r2, r3, r3, r2
 800acfc:	095b      	lsrs	r3, r3, #5
 800acfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	469b      	mov	fp, r3
 800ad06:	f04f 0c00 	mov.w	ip, #0
 800ad0a:	46d9      	mov	r9, fp
 800ad0c:	46e2      	mov	sl, ip
 800ad0e:	eb19 0309 	adds.w	r3, r9, r9
 800ad12:	eb4a 040a 	adc.w	r4, sl, sl
 800ad16:	4699      	mov	r9, r3
 800ad18:	46a2      	mov	sl, r4
 800ad1a:	eb19 090b 	adds.w	r9, r9, fp
 800ad1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ad22:	f04f 0100 	mov.w	r1, #0
 800ad26:	f04f 0200 	mov.w	r2, #0
 800ad2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad36:	4689      	mov	r9, r1
 800ad38:	4692      	mov	sl, r2
 800ad3a:	eb1b 0509 	adds.w	r5, fp, r9
 800ad3e:	eb4c 060a 	adc.w	r6, ip, sl
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	4619      	mov	r1, r3
 800ad48:	f04f 0200 	mov.w	r2, #0
 800ad4c:	f04f 0300 	mov.w	r3, #0
 800ad50:	f04f 0400 	mov.w	r4, #0
 800ad54:	0094      	lsls	r4, r2, #2
 800ad56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad5a:	008b      	lsls	r3, r1, #2
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	4623      	mov	r3, r4
 800ad60:	4628      	mov	r0, r5
 800ad62:	4631      	mov	r1, r6
 800ad64:	f7f5 fa64 	bl	8000230 <__aeabi_uldivmod>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	4b34      	ldr	r3, [pc, #208]	; (800ae40 <UART_SetConfig+0x72c>)
 800ad70:	fba3 1302 	umull	r1, r3, r3, r2
 800ad74:	095b      	lsrs	r3, r3, #5
 800ad76:	2164      	movs	r1, #100	; 0x64
 800ad78:	fb01 f303 	mul.w	r3, r1, r3
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	3332      	adds	r3, #50	; 0x32
 800ad82:	4a2f      	ldr	r2, [pc, #188]	; (800ae40 <UART_SetConfig+0x72c>)
 800ad84:	fba2 2303 	umull	r2, r3, r2, r3
 800ad88:	095b      	lsrs	r3, r3, #5
 800ad8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad8e:	4498      	add	r8, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	469b      	mov	fp, r3
 800ad94:	f04f 0c00 	mov.w	ip, #0
 800ad98:	46d9      	mov	r9, fp
 800ad9a:	46e2      	mov	sl, ip
 800ad9c:	eb19 0309 	adds.w	r3, r9, r9
 800ada0:	eb4a 040a 	adc.w	r4, sl, sl
 800ada4:	4699      	mov	r9, r3
 800ada6:	46a2      	mov	sl, r4
 800ada8:	eb19 090b 	adds.w	r9, r9, fp
 800adac:	eb4a 0a0c 	adc.w	sl, sl, ip
 800adb0:	f04f 0100 	mov.w	r1, #0
 800adb4:	f04f 0200 	mov.w	r2, #0
 800adb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800adc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800adc4:	4689      	mov	r9, r1
 800adc6:	4692      	mov	sl, r2
 800adc8:	eb1b 0509 	adds.w	r5, fp, r9
 800adcc:	eb4c 060a 	adc.w	r6, ip, sl
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	4619      	mov	r1, r3
 800add6:	f04f 0200 	mov.w	r2, #0
 800adda:	f04f 0300 	mov.w	r3, #0
 800adde:	f04f 0400 	mov.w	r4, #0
 800ade2:	0094      	lsls	r4, r2, #2
 800ade4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ade8:	008b      	lsls	r3, r1, #2
 800adea:	461a      	mov	r2, r3
 800adec:	4623      	mov	r3, r4
 800adee:	4628      	mov	r0, r5
 800adf0:	4631      	mov	r1, r6
 800adf2:	f7f5 fa1d 	bl	8000230 <__aeabi_uldivmod>
 800adf6:	4603      	mov	r3, r0
 800adf8:	460c      	mov	r4, r1
 800adfa:	461a      	mov	r2, r3
 800adfc:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <UART_SetConfig+0x72c>)
 800adfe:	fba3 1302 	umull	r1, r3, r3, r2
 800ae02:	095b      	lsrs	r3, r3, #5
 800ae04:	2164      	movs	r1, #100	; 0x64
 800ae06:	fb01 f303 	mul.w	r3, r1, r3
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	011b      	lsls	r3, r3, #4
 800ae0e:	3332      	adds	r3, #50	; 0x32
 800ae10:	4a0b      	ldr	r2, [pc, #44]	; (800ae40 <UART_SetConfig+0x72c>)
 800ae12:	fba2 2303 	umull	r2, r3, r2, r3
 800ae16:	095b      	lsrs	r3, r3, #5
 800ae18:	f003 020f 	and.w	r2, r3, #15
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4442      	add	r2, r8
 800ae22:	609a      	str	r2, [r3, #8]
}
 800ae24:	e7ff      	b.n	800ae26 <UART_SetConfig+0x712>
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae30:	40011000 	.word	0x40011000
 800ae34:	40011400 	.word	0x40011400
 800ae38:	40011800 	.word	0x40011800
 800ae3c:	40011c00 	.word	0x40011c00
 800ae40:	51eb851f 	.word	0x51eb851f

0800ae44 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	4b2f      	ldr	r3, [pc, #188]	; (800af20 <FSMC_NORSRAM_Init+0xdc>)
 800ae62:	4013      	ands	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ae6e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800ae74:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800ae7a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ae80:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800ae86:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800ae8c:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800ae92:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800ae98:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800ae9e:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800aea4:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800aeaa:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800aeb0:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800aeb6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800aeb8:	68fa      	ldr	r2, [r7, #12]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	2b08      	cmp	r3, #8
 800aec4:	d103      	bne.n	800aece <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aecc:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68f9      	ldr	r1, [r7, #12]
 800aed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aee2:	d10a      	bne.n	800aefa <FSMC_NORSRAM_Init+0xb6>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d006      	beq.n	800aefa <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aef4:	431a      	orrs	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d006      	beq.n	800af10 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681a      	ldr	r2, [r3, #0]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0a:	431a      	orrs	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	ffc00480 	.word	0xffc00480

0800af24 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800af24:	b480      	push	{r7}
 800af26:	b087      	sub	sp, #28
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800af46:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800af52:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800af5a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800af62:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	3b01      	subs	r3, #1
 800af6a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800af6c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	3b02      	subs	r3, #2
 800af74:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800af76:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800af7c:	4313      	orrs	r3, r2
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	4313      	orrs	r3, r2
 800af82:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	6979      	ldr	r1, [r7, #20]
 800af8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af9c:	d10e      	bne.n	800afbc <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800afa6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	3b01      	subs	r3, #1
 800afae:	051b      	lsls	r3, r3, #20
 800afb0:	697a      	ldr	r2, [r7, #20]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	371c      	adds	r7, #28
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
	...

0800afcc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afe4:	d122      	bne.n	800b02c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afee:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	4b15      	ldr	r3, [pc, #84]	; (800b048 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b002:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b00a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800b012:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b018:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	6979      	ldr	r1, [r7, #20]
 800b026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b02a:	e005      	b.n	800b038 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	371c      	adds	r7, #28
 800b03e:	46bd      	mov	sp, r7
 800b040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b044:	4770      	bx	lr
 800b046:	bf00      	nop
 800b048:	cff00000 	.word	0xcff00000

0800b04c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b04c:	b084      	sub	sp, #16
 800b04e:	b480      	push	{r7}
 800b050:	b085      	sub	sp, #20
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
 800b056:	f107 001c 	add.w	r0, r7, #28
 800b05a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b062:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b064:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b066:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b06a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b06e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b072:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b076:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b086:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	431a      	orrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	b004      	add	sp, #16
 800b0a0:	4770      	bx	lr

0800b0a2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b0a2:	b480      	push	{r7}
 800b0a4:	b083      	sub	sp, #12
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2203      	movs	r2, #3
 800b0c8:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b0ca:	2002      	movs	r0, #2
 800b0cc:	f7f8 fb16 	bl	80036fc <HAL_Delay>
  
  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b0da:	b480      	push	{r7}
 800b0dc:	b083      	sub	sp, #12
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0303 	and.w	r3, r3, #3
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	b085      	sub	sp, #20
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b114:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b11a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b120:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	4313      	orrs	r3, r2
 800b126:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b130:	f023 030f 	bic.w	r3, r3, #15
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	431a      	orrs	r2, r3
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3714      	adds	r7, #20
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	b2db      	uxtb	r3, r3
}
 800b158:	4618      	mov	r0, r3
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3314      	adds	r3, #20
 800b172:	461a      	mov	r2, r3
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	4413      	add	r3, r2
 800b178:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
}  
 800b17e:	4618      	mov	r0, r3
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b085      	sub	sp, #20
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b194:	2300      	movs	r3, #0
 800b196:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	685a      	ldr	r2, [r3, #4]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1b0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b1b6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b1bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	431a      	orrs	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b1d4:	2300      	movs	r3, #0

}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b088      	sub	sp, #32
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
 800b1ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b1f0:	2310      	movs	r3, #16
 800b1f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b1f4:	2340      	movs	r3, #64	; 0x40
 800b1f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b1fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b200:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b202:	f107 0308 	add.w	r3, r7, #8
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7ff ff74 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b20e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b212:	2110      	movs	r1, #16
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f975 	bl	800b504 <SDMMC_GetCmdResp1>
 800b21a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b21c:	69fb      	ldr	r3, [r7, #28]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3720      	adds	r7, #32
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b08a      	sub	sp, #40	; 0x28
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b236:	2307      	movs	r3, #7
 800b238:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b23a:	2340      	movs	r3, #64	; 0x40
 800b23c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b23e:	2300      	movs	r3, #0
 800b240:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b246:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b248:	f107 0310 	add.w	r3, r7, #16
 800b24c:	4619      	mov	r1, r3
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7ff ff51 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b254:	f241 3288 	movw	r2, #5000	; 0x1388
 800b258:	2107      	movs	r1, #7
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 f952 	bl	800b504 <SDMMC_GetCmdResp1>
 800b260:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b264:	4618      	mov	r0, r3
 800b266:	3728      	adds	r7, #40	; 0x28
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b088      	sub	sp, #32
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b274:	2300      	movs	r3, #0
 800b276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b278:	2300      	movs	r3, #0
 800b27a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b27c:	2300      	movs	r3, #0
 800b27e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b288:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b28a:	f107 0308 	add.w	r3, r7, #8
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff ff30 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f90c 	bl	800b4b4 <SDMMC_GetCmdError>
 800b29c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b29e:	69fb      	ldr	r3, [r7, #28]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b2b0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b2b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b2b6:	2308      	movs	r3, #8
 800b2b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2ba:	2340      	movs	r3, #64	; 0x40
 800b2bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b2c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b2c8:	f107 0308 	add.w	r3, r7, #8
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f7ff ff11 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 faf5 	bl	800b8c4 <SDMMC_GetCmdResp7>
 800b2da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b2dc:	69fb      	ldr	r3, [r7, #28]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3720      	adds	r7, #32
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b088      	sub	sp, #32
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b2f4:	2337      	movs	r3, #55	; 0x37
 800b2f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b2f8:	2340      	movs	r3, #64	; 0x40
 800b2fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b304:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b306:	f107 0308 	add.w	r3, r7, #8
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7ff fef2 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b312:	f241 3288 	movw	r2, #5000	; 0x1388
 800b316:	2137      	movs	r1, #55	; 0x37
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 f8f3 	bl	800b504 <SDMMC_GetCmdResp1>
 800b31e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b320:	69fb      	ldr	r3, [r7, #28]
}
 800b322:	4618      	mov	r0, r3
 800b324:	3720      	adds	r7, #32
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b088      	sub	sp, #32
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
 800b332:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b33a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b33e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b340:	2329      	movs	r3, #41	; 0x29
 800b342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b344:	2340      	movs	r3, #64	; 0x40
 800b346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b348:	2300      	movs	r3, #0
 800b34a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b34c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b350:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b352:	f107 0308 	add.w	r3, r7, #8
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7ff fecc 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa02 	bl	800b768 <SDMMC_GetCmdResp3>
 800b364:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b366:	69fb      	ldr	r3, [r7, #28]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3720      	adds	r7, #32
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b37e:	2306      	movs	r3, #6
 800b380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b382:	2340      	movs	r3, #64	; 0x40
 800b384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b386:	2300      	movs	r3, #0
 800b388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b38a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b38e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b390:	f107 0308 	add.w	r3, r7, #8
 800b394:	4619      	mov	r1, r3
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff fead 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a0:	2106      	movs	r1, #6
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f8ae 	bl	800b504 <SDMMC_GetCmdResp1>
 800b3a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3aa:	69fb      	ldr	r3, [r7, #28]
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3720      	adds	r7, #32
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b088      	sub	sp, #32
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b3c0:	2333      	movs	r3, #51	; 0x33
 800b3c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b3c4:	2340      	movs	r3, #64	; 0x40
 800b3c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b3cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b3d2:	f107 0308 	add.w	r3, r7, #8
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f7ff fe8c 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b3de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e2:	2133      	movs	r1, #51	; 0x33
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f88d 	bl	800b504 <SDMMC_GetCmdResp1>
 800b3ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b3ec:	69fb      	ldr	r3, [r7, #28]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3720      	adds	r7, #32
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b088      	sub	sp, #32
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b402:	2302      	movs	r3, #2
 800b404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b406:	23c0      	movs	r3, #192	; 0xc0
 800b408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b40a:	2300      	movs	r3, #0
 800b40c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b40e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b412:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b414:	f107 0308 	add.w	r3, r7, #8
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff fe6b 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f95b 	bl	800b6dc <SDMMC_GetCmdResp2>
 800b426:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b428:	69fb      	ldr	r3, [r7, #28]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}

0800b432 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b432:	b580      	push	{r7, lr}
 800b434:	b088      	sub	sp, #32
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
 800b43a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b440:	2309      	movs	r3, #9
 800b442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b444:	23c0      	movs	r3, #192	; 0xc0
 800b446:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b448:	2300      	movs	r3, #0
 800b44a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b44c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b450:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b452:	f107 0308 	add.w	r3, r7, #8
 800b456:	4619      	mov	r1, r3
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f7ff fe4c 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f000 f93c 	bl	800b6dc <SDMMC_GetCmdResp2>
 800b464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b466:	69fb      	ldr	r3, [r7, #28]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3720      	adds	r7, #32
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b47e:	2303      	movs	r3, #3
 800b480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b482:	2340      	movs	r3, #64	; 0x40
 800b484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b486:	2300      	movs	r3, #0
 800b488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b48a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b48e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b490:	f107 0308 	add.w	r3, r7, #8
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f7ff fe2d 	bl	800b0f6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	2103      	movs	r1, #3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f99b 	bl	800b7dc <SDMMC_GetCmdResp6>
 800b4a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a8:	69fb      	ldr	r3, [r7, #28]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3720      	adds	r7, #32
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b4b4:	b490      	push	{r4, r7}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4bc:	4b0f      	ldr	r3, [pc, #60]	; (800b4fc <SDMMC_GetCmdError+0x48>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a0f      	ldr	r2, [pc, #60]	; (800b500 <SDMMC_GetCmdError+0x4c>)
 800b4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c6:	0a5b      	lsrs	r3, r3, #9
 800b4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b4d0:	4623      	mov	r3, r4
 800b4d2:	1e5c      	subs	r4, r3, #1
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4dc:	e009      	b.n	800b4f2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0f2      	beq.n	800b4d0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	22c5      	movs	r2, #197	; 0xc5
 800b4ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bc90      	pop	{r4, r7}
 800b4fa:	4770      	bx	lr
 800b4fc:	20000000 	.word	0x20000000
 800b500:	10624dd3 	.word	0x10624dd3

0800b504 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b504:	b590      	push	{r4, r7, lr}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	460b      	mov	r3, r1
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b512:	4b6f      	ldr	r3, [pc, #444]	; (800b6d0 <SDMMC_GetCmdResp1+0x1cc>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a6f      	ldr	r2, [pc, #444]	; (800b6d4 <SDMMC_GetCmdResp1+0x1d0>)
 800b518:	fba2 2303 	umull	r2, r3, r2, r3
 800b51c:	0a5b      	lsrs	r3, r3, #9
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b524:	4623      	mov	r3, r4
 800b526:	1e5c      	subs	r4, r3, #1
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d102      	bne.n	800b532 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b52c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b530:	e0c9      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b536:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0f0      	beq.n	800b524 <SDMMC_GetCmdResp1+0x20>
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1eb      	bne.n	800b524 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b00      	cmp	r3, #0
 800b556:	d004      	beq.n	800b562 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2204      	movs	r2, #4
 800b55c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b55e:	2304      	movs	r3, #4
 800b560:	e0b1      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d004      	beq.n	800b578 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2201      	movs	r2, #1
 800b572:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b574:	2301      	movs	r3, #1
 800b576:	e0a6      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	22c5      	movs	r2, #197	; 0xc5
 800b57c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b57e:	68f8      	ldr	r0, [r7, #12]
 800b580:	f7ff fde3 	bl	800b14a <SDIO_GetCommandResponse>
 800b584:	4603      	mov	r3, r0
 800b586:	461a      	mov	r2, r3
 800b588:	7afb      	ldrb	r3, [r7, #11]
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d001      	beq.n	800b592 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b58e:	2301      	movs	r3, #1
 800b590:	e099      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b592:	2100      	movs	r1, #0
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7ff fde5 	bl	800b164 <SDIO_GetResponse>
 800b59a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	4b4e      	ldr	r3, [pc, #312]	; (800b6d8 <SDMMC_GetCmdResp1+0x1d4>)
 800b5a0:	4013      	ands	r3, r2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e08d      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	da02      	bge.n	800b5b6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b5b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b5b4:	e087      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b5c0:	2340      	movs	r3, #64	; 0x40
 800b5c2:	e080      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b5ce:	2380      	movs	r3, #128	; 0x80
 800b5d0:	e079      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b5dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5e0:	e071      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b5ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5f0:	e069      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b600:	e061      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d002      	beq.n	800b612 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b60c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b610:	e059      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d002      	beq.n	800b622 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b61c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b620:	e051      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b62c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b630:	e049      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b63c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b640:	e041      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b64c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b650:	e039      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b65c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b660:	e031      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b66c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b670:	e029      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b67c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b680:	e021      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d002      	beq.n	800b692 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b68c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b690:	e019      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d002      	beq.n	800b6a2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b69c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b6a0:	e011      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d002      	beq.n	800b6b2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b6ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b6b0:	e009      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	f003 0308 	and.w	r3, r3, #8
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d002      	beq.n	800b6c2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b6bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b6c0:	e001      	b.n	800b6c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b6c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	371c      	adds	r7, #28
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd90      	pop	{r4, r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20000000 	.word	0x20000000
 800b6d4:	10624dd3 	.word	0x10624dd3
 800b6d8:	fdffe008 	.word	0xfdffe008

0800b6dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b6dc:	b490      	push	{r4, r7}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b6e4:	4b1e      	ldr	r3, [pc, #120]	; (800b760 <SDMMC_GetCmdResp2+0x84>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a1e      	ldr	r2, [pc, #120]	; (800b764 <SDMMC_GetCmdResp2+0x88>)
 800b6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ee:	0a5b      	lsrs	r3, r3, #9
 800b6f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b6f8:	4623      	mov	r3, r4
 800b6fa:	1e5c      	subs	r4, r3, #1
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b704:	e026      	b.n	800b754 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0f0      	beq.n	800b6f8 <SDMMC_GetCmdResp2+0x1c>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1eb      	bne.n	800b6f8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b724:	f003 0304 	and.w	r3, r3, #4
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d004      	beq.n	800b736 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2204      	movs	r2, #4
 800b730:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b732:	2304      	movs	r3, #4
 800b734:	e00e      	b.n	800b754 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d004      	beq.n	800b74c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b748:	2301      	movs	r3, #1
 800b74a:	e003      	b.n	800b754 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	22c5      	movs	r2, #197	; 0xc5
 800b750:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bc90      	pop	{r4, r7}
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	20000000 	.word	0x20000000
 800b764:	10624dd3 	.word	0x10624dd3

0800b768 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b768:	b490      	push	{r4, r7}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b770:	4b18      	ldr	r3, [pc, #96]	; (800b7d4 <SDMMC_GetCmdResp3+0x6c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a18      	ldr	r2, [pc, #96]	; (800b7d8 <SDMMC_GetCmdResp3+0x70>)
 800b776:	fba2 2303 	umull	r2, r3, r2, r3
 800b77a:	0a5b      	lsrs	r3, r3, #9
 800b77c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b780:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b784:	4623      	mov	r3, r4
 800b786:	1e5c      	subs	r4, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d102      	bne.n	800b792 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b78c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b790:	e01b      	b.n	800b7ca <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b796:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d0f0      	beq.n	800b784 <SDMMC_GetCmdResp3+0x1c>
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1eb      	bne.n	800b784 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b0:	f003 0304 	and.w	r3, r3, #4
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d004      	beq.n	800b7c2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2204      	movs	r2, #4
 800b7bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b7be:	2304      	movs	r3, #4
 800b7c0:	e003      	b.n	800b7ca <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	22c5      	movs	r2, #197	; 0xc5
 800b7c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bc90      	pop	{r4, r7}
 800b7d2:	4770      	bx	lr
 800b7d4:	20000000 	.word	0x20000000
 800b7d8:	10624dd3 	.word	0x10624dd3

0800b7dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b7dc:	b590      	push	{r4, r7, lr}
 800b7de:	b087      	sub	sp, #28
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b7ea:	4b34      	ldr	r3, [pc, #208]	; (800b8bc <SDMMC_GetCmdResp6+0xe0>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4a34      	ldr	r2, [pc, #208]	; (800b8c0 <SDMMC_GetCmdResp6+0xe4>)
 800b7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7f4:	0a5b      	lsrs	r3, r3, #9
 800b7f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7fa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b7fe:	4623      	mov	r3, r4
 800b800:	1e5c      	subs	r4, r3, #1
 800b802:	2b00      	cmp	r3, #0
 800b804:	d102      	bne.n	800b80c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b806:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b80a:	e052      	b.n	800b8b2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b810:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d0f0      	beq.n	800b7fe <SDMMC_GetCmdResp6+0x22>
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1eb      	bne.n	800b7fe <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b82a:	f003 0304 	and.w	r3, r3, #4
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d004      	beq.n	800b83c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2204      	movs	r2, #4
 800b836:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b838:	2304      	movs	r3, #4
 800b83a:	e03a      	b.n	800b8b2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d004      	beq.n	800b852 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2201      	movs	r2, #1
 800b84c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b84e:	2301      	movs	r3, #1
 800b850:	e02f      	b.n	800b8b2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	f7ff fc79 	bl	800b14a <SDIO_GetCommandResponse>
 800b858:	4603      	mov	r3, r0
 800b85a:	461a      	mov	r2, r3
 800b85c:	7afb      	ldrb	r3, [r7, #11]
 800b85e:	4293      	cmp	r3, r2
 800b860:	d001      	beq.n	800b866 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b862:	2301      	movs	r3, #1
 800b864:	e025      	b.n	800b8b2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	22c5      	movs	r2, #197	; 0xc5
 800b86a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b86c:	2100      	movs	r1, #0
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f7ff fc78 	bl	800b164 <SDIO_GetResponse>
 800b874:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d106      	bne.n	800b88e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	0c1b      	lsrs	r3, r3, #16
 800b884:	b29a      	uxth	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b88a:	2300      	movs	r3, #0
 800b88c:	e011      	b.n	800b8b2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b89c:	e009      	b.n	800b8b2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b8a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8ac:	e001      	b.n	800b8b2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	371c      	adds	r7, #28
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd90      	pop	{r4, r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20000000 	.word	0x20000000
 800b8c0:	10624dd3 	.word	0x10624dd3

0800b8c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b8c4:	b490      	push	{r4, r7}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8cc:	4b21      	ldr	r3, [pc, #132]	; (800b954 <SDMMC_GetCmdResp7+0x90>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a21      	ldr	r2, [pc, #132]	; (800b958 <SDMMC_GetCmdResp7+0x94>)
 800b8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d6:	0a5b      	lsrs	r3, r3, #9
 800b8d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8dc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b8e0:	4623      	mov	r3, r4
 800b8e2:	1e5c      	subs	r4, r3, #1
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d102      	bne.n	800b8ee <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b8e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b8ec:	e02c      	b.n	800b948 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8f2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d0f0      	beq.n	800b8e0 <SDMMC_GetCmdResp7+0x1c>
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b904:	2b00      	cmp	r3, #0
 800b906:	d1eb      	bne.n	800b8e0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b90c:	f003 0304 	and.w	r3, r3, #4
 800b910:	2b00      	cmp	r3, #0
 800b912:	d004      	beq.n	800b91e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2204      	movs	r2, #4
 800b918:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b91a:	2304      	movs	r3, #4
 800b91c:	e014      	b.n	800b948 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	2b00      	cmp	r3, #0
 800b928:	d004      	beq.n	800b934 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b930:	2301      	movs	r3, #1
 800b932:	e009      	b.n	800b948 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2240      	movs	r2, #64	; 0x40
 800b944:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b946:	2300      	movs	r3, #0
  
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3710      	adds	r7, #16
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bc90      	pop	{r4, r7}
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	20000000 	.word	0x20000000
 800b958:	10624dd3 	.word	0x10624dd3

0800b95c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b95c:	b084      	sub	sp, #16
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	f107 001c 	add.w	r0, r7, #28
 800b96a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	2b01      	cmp	r3, #1
 800b972:	d122      	bne.n	800b9ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b978:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d105      	bne.n	800b9ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	68db      	ldr	r3, [r3, #12]
 800b9a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f94a 	bl	800bc48 <USB_CoreReset>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73fb      	strb	r3, [r7, #15]
 800b9b8:	e01a      	b.n	800b9f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f93e 	bl	800bc48 <USB_CoreReset>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	639a      	str	r2, [r3, #56]	; 0x38
 800b9e2:	e005      	b.n	800b9f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d10b      	bne.n	800ba0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	f043 0206 	orr.w	r2, r3, #6
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	f043 0220 	orr.w	r2, r3, #32
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba1a:	b004      	add	sp, #16
 800ba1c:	4770      	bx	lr

0800ba1e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b083      	sub	sp, #12
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f043 0201 	orr.w	r2, r3, #1
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	f023 0201 	bic.w	r2, r3, #1
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b082      	sub	sp, #8
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d106      	bne.n	800ba8e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	60da      	str	r2, [r3, #12]
 800ba8c:	e00b      	b.n	800baa6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba8e:	78fb      	ldrb	r3, [r7, #3]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d106      	bne.n	800baa2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	60da      	str	r2, [r3, #12]
 800baa0:	e001      	b.n	800baa6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e003      	b.n	800baae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800baa6:	2032      	movs	r0, #50	; 0x32
 800baa8:	f7f7 fe28 	bl	80036fc <HAL_Delay>

  return HAL_OK;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800bac2:	2300      	movs	r3, #0
 800bac4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	019b      	lsls	r3, r3, #6
 800baca:	f043 0220 	orr.w	r2, r3, #32
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3301      	adds	r3, #1
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4a09      	ldr	r2, [pc, #36]	; (800bb00 <USB_FlushTxFifo+0x48>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d901      	bls.n	800bae4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bae0:	2303      	movs	r3, #3
 800bae2:	e006      	b.n	800baf2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	f003 0320 	and.w	r3, r3, #32
 800baec:	2b20      	cmp	r3, #32
 800baee:	d0f0      	beq.n	800bad2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	00030d40 	.word	0x00030d40

0800bb04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2210      	movs	r2, #16
 800bb14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	60fb      	str	r3, [r7, #12]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	4a09      	ldr	r2, [pc, #36]	; (800bb44 <USB_FlushRxFifo+0x40>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d901      	bls.n	800bb28 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e006      	b.n	800bb36 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	f003 0310 	and.w	r3, r3, #16
 800bb30:	2b10      	cmp	r3, #16
 800bb32:	d0f0      	beq.n	800bb16 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3714      	adds	r7, #20
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	00030d40 	.word	0x00030d40

0800bb48 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b089      	sub	sp, #36	; 0x24
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	4611      	mov	r1, r2
 800bb54:	461a      	mov	r2, r3
 800bb56:	460b      	mov	r3, r1
 800bb58:	71fb      	strb	r3, [r7, #7]
 800bb5a:	4613      	mov	r3, r2
 800bb5c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bb66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d11a      	bne.n	800bba4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb6e:	88bb      	ldrh	r3, [r7, #4]
 800bb70:	3303      	adds	r3, #3
 800bb72:	089b      	lsrs	r3, r3, #2
 800bb74:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb76:	2300      	movs	r3, #0
 800bb78:	61bb      	str	r3, [r7, #24]
 800bb7a:	e00f      	b.n	800bb9c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	031a      	lsls	r2, r3, #12
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	4413      	add	r3, r2
 800bb84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb88:	461a      	mov	r2, r3
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	3304      	adds	r3, #4
 800bb94:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	3301      	adds	r3, #1
 800bb9a:	61bb      	str	r3, [r7, #24]
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	429a      	cmp	r2, r3
 800bba2:	d3eb      	bcc.n	800bb7c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3724      	adds	r7, #36	; 0x24
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b089      	sub	sp, #36	; 0x24
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	60f8      	str	r0, [r7, #12]
 800bbba:	60b9      	str	r1, [r7, #8]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bbc8:	88fb      	ldrh	r3, [r7, #6]
 800bbca:	3303      	adds	r3, #3
 800bbcc:	089b      	lsrs	r3, r3, #2
 800bbce:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	61bb      	str	r3, [r7, #24]
 800bbd4:	e00b      	b.n	800bbee <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbdc:	681a      	ldr	r2, [r3, #0]
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	601a      	str	r2, [r3, #0]
    pDest++;
 800bbe2:	69fb      	ldr	r3, [r7, #28]
 800bbe4:	3304      	adds	r3, #4
 800bbe6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	3301      	adds	r3, #1
 800bbec:	61bb      	str	r3, [r7, #24]
 800bbee:	69ba      	ldr	r2, [r7, #24]
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d3ef      	bcc.n	800bbd6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bbf6:	69fb      	ldr	r3, [r7, #28]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3724      	adds	r7, #36	; 0x24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	695b      	ldr	r3, [r3, #20]
 800bc10:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	699b      	ldr	r3, [r3, #24]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4013      	ands	r3, r2
 800bc1a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3714      	adds	r7, #20
 800bc22:	46bd      	mov	sp, r7
 800bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc28:	4770      	bx	lr

0800bc2a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc2a:	b480      	push	{r7}
 800bc2c:	b083      	sub	sp, #12
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	695b      	ldr	r3, [r3, #20]
 800bc36:	f003 0301 	and.w	r3, r3, #1
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	370c      	adds	r7, #12
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
	...

0800bc48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3301      	adds	r3, #1
 800bc58:	60fb      	str	r3, [r7, #12]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4a13      	ldr	r2, [pc, #76]	; (800bcac <USB_CoreReset+0x64>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d901      	bls.n	800bc66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e01b      	b.n	800bc9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	daf2      	bge.n	800bc54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	f043 0201 	orr.w	r2, r3, #1
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3301      	adds	r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	4a09      	ldr	r2, [pc, #36]	; (800bcac <USB_CoreReset+0x64>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d901      	bls.n	800bc90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e006      	b.n	800bc9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d0f0      	beq.n	800bc7e <USB_CoreReset+0x36>

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	00030d40 	.word	0x00030d40

0800bcb0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	f107 001c 	add.w	r0, r7, #28
 800bcbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bccc:	461a      	mov	r2, r3
 800bcce:	2300      	movs	r3, #0
 800bcd0:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d018      	beq.n	800bd28 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d10a      	bne.n	800bd12 <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd0a:	f043 0304 	orr.w	r3, r3, #4
 800bd0e:	6013      	str	r3, [r2, #0]
 800bd10:	e014      	b.n	800bd3c <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd20:	f023 0304 	bic.w	r3, r3, #4
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	e009      	b.n	800bd3c <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd36:	f023 0304 	bic.w	r3, r3, #4
 800bd3a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800bd3c:	2110      	movs	r1, #16
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff feba 	bl	800bab8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f7ff fedd 	bl	800bb04 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	e015      	b.n	800bd7c <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd62:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd70:	461a      	mov	r2, r3
 800bd72:	2300      	movs	r3, #0
 800bd74:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	429a      	cmp	r2, r3
 800bd82:	d3e5      	bcc.n	800bd50 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800bd84:	2101      	movs	r1, #1
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 f8ac 	bl	800bee4 <USB_DriveVbus>

  HAL_Delay(200U);
 800bd8c:	20c8      	movs	r0, #200	; 0xc8
 800bd8e:	f7f7 fcb5 	bl	80036fc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd9e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bda4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00b      	beq.n	800bdc4 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdb2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a14      	ldr	r2, [pc, #80]	; (800be08 <USB_HostInit+0x158>)
 800bdb8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	4a13      	ldr	r2, [pc, #76]	; (800be0c <USB_HostInit+0x15c>)
 800bdbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800bdc2:	e009      	b.n	800bdd8 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2280      	movs	r2, #128	; 0x80
 800bdc8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4a10      	ldr	r2, [pc, #64]	; (800be10 <USB_HostInit+0x160>)
 800bdce:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	4a10      	ldr	r2, [pc, #64]	; (800be14 <USB_HostInit+0x164>)
 800bdd4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d105      	bne.n	800bdea <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	699b      	ldr	r3, [r3, #24]
 800bde2:	f043 0210 	orr.w	r2, r3, #16
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	699a      	ldr	r2, [r3, #24]
 800bdee:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <USB_HostInit+0x168>)
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be02:	b004      	add	sp, #16
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	01000200 	.word	0x01000200
 800be0c:	00e00300 	.word	0x00e00300
 800be10:	00600080 	.word	0x00600080
 800be14:	004000e0 	.word	0x004000e0
 800be18:	a3200008 	.word	0xa3200008

0800be1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	460b      	mov	r3, r1
 800be26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	78fb      	ldrb	r3, [r7, #3]
 800be4a:	f003 0303 	and.w	r3, r3, #3
 800be4e:	68f9      	ldr	r1, [r7, #12]
 800be50:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800be54:	4313      	orrs	r3, r2
 800be56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800be58:	78fb      	ldrb	r3, [r7, #3]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d107      	bne.n	800be6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be64:	461a      	mov	r2, r3
 800be66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800be6a:	6053      	str	r3, [r2, #4]
 800be6c:	e009      	b.n	800be82 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800be6e:	78fb      	ldrb	r3, [r7, #3]
 800be70:	2b02      	cmp	r3, #2
 800be72:	d106      	bne.n	800be82 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be7a:	461a      	mov	r2, r3
 800be7c:	f241 7370 	movw	r3, #6000	; 0x1770
 800be80:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800be9c:	2300      	movs	r3, #0
 800be9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800beb0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800beba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bebe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bec0:	2064      	movs	r0, #100	; 0x64
 800bec2:	f7f7 fc1b 	bl	80036fc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bece:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bed2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bed4:	200a      	movs	r0, #10
 800bed6:	f7f7 fc11 	bl	80036fc <HAL_Delay>

  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d109      	bne.n	800bf28 <USB_DriveVbus+0x44>
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d106      	bne.n	800bf28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf32:	d109      	bne.n	800bf48 <USB_DriveVbus+0x64>
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d106      	bne.n	800bf48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bf56:	b480      	push	{r7}
 800bf58:	b085      	sub	sp, #20
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	0c5b      	lsrs	r3, r3, #17
 800bf74:	f003 0303 	and.w	r3, r3, #3
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	b29b      	uxth	r3, r3
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	70fb      	strb	r3, [r7, #3]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	70bb      	strb	r3, [r7, #2]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bfca:	78fb      	ldrb	r3, [r7, #3]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfdc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bfde:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bfe2:	2b03      	cmp	r3, #3
 800bfe4:	d87e      	bhi.n	800c0e4 <USB_HC_Init+0x13c>
 800bfe6:	a201      	add	r2, pc, #4	; (adr r2, 800bfec <USB_HC_Init+0x44>)
 800bfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfec:	0800bffd 	.word	0x0800bffd
 800bff0:	0800c0a7 	.word	0x0800c0a7
 800bff4:	0800bffd 	.word	0x0800bffd
 800bff8:	0800c069 	.word	0x0800c069
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	4413      	add	r3, r2
 800c004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c008:	461a      	mov	r2, r3
 800c00a:	f240 439d 	movw	r3, #1181	; 0x49d
 800c00e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c010:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c014:	2b00      	cmp	r3, #0
 800c016:	da10      	bge.n	800c03a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	015a      	lsls	r2, r3, #5
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	4413      	add	r3, r2
 800c020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	78fa      	ldrb	r2, [r7, #3]
 800c028:	0151      	lsls	r1, r2, #5
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	440a      	add	r2, r1
 800c02e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c036:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800c038:	e057      	b.n	800c0ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c042:	2b00      	cmp	r3, #0
 800c044:	d051      	beq.n	800c0ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	015a      	lsls	r2, r3, #5
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	4413      	add	r3, r2
 800c04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	78fa      	ldrb	r2, [r7, #3]
 800c056:	0151      	lsls	r1, r2, #5
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	440a      	add	r2, r1
 800c05c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c060:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c064:	60d3      	str	r3, [r2, #12]
      break;
 800c066:	e040      	b.n	800c0ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c074:	461a      	mov	r2, r3
 800c076:	f240 639d 	movw	r3, #1693	; 0x69d
 800c07a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c07c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	da34      	bge.n	800c0ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	78fa      	ldrb	r2, [r7, #3]
 800c094:	0151      	lsls	r1, r2, #5
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	440a      	add	r2, r1
 800c09a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c09e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c0a4:	e023      	b.n	800c0ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c0a6:	78fb      	ldrb	r3, [r7, #3]
 800c0a8:	015a      	lsls	r2, r3, #5
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	f240 2325 	movw	r3, #549	; 0x225
 800c0b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c0ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	da17      	bge.n	800c0f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c0c2:	78fb      	ldrb	r3, [r7, #3]
 800c0c4:	015a      	lsls	r2, r3, #5
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	78fa      	ldrb	r2, [r7, #3]
 800c0d2:	0151      	lsls	r1, r2, #5
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	440a      	add	r2, r1
 800c0d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c0e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c0e2:	e006      	b.n	800c0f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	75fb      	strb	r3, [r7, #23]
      break;
 800c0e8:	e004      	b.n	800c0f4 <USB_HC_Init+0x14c>
      break;
 800c0ea:	bf00      	nop
 800c0ec:	e002      	b.n	800c0f4 <USB_HC_Init+0x14c>
      break;
 800c0ee:	bf00      	nop
 800c0f0:	e000      	b.n	800c0f4 <USB_HC_Init+0x14c>
      break;
 800c0f2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0fa:	699a      	ldr	r2, [r3, #24]
 800c0fc:	78fb      	ldrb	r3, [r7, #3]
 800c0fe:	f003 030f 	and.w	r3, r3, #15
 800c102:	2101      	movs	r1, #1
 800c104:	fa01 f303 	lsl.w	r3, r1, r3
 800c108:	68b9      	ldr	r1, [r7, #8]
 800c10a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c10e:	4313      	orrs	r3, r2
 800c110:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c11e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c122:	2b00      	cmp	r3, #0
 800c124:	da03      	bge.n	800c12e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c12a:	613b      	str	r3, [r7, #16]
 800c12c:	e001      	b.n	800c132 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c12e:	2300      	movs	r3, #0
 800c130:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800c132:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c136:	2b02      	cmp	r3, #2
 800c138:	d103      	bne.n	800c142 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c13a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c13e:	60fb      	str	r3, [r7, #12]
 800c140:	e001      	b.n	800c146 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c142:	2300      	movs	r3, #0
 800c144:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c146:	787b      	ldrb	r3, [r7, #1]
 800c148:	059b      	lsls	r3, r3, #22
 800c14a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c14e:	78bb      	ldrb	r3, [r7, #2]
 800c150:	02db      	lsls	r3, r3, #11
 800c152:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c156:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c158:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c15c:	049b      	lsls	r3, r3, #18
 800c15e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c162:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c164:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c166:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c16a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c170:	78fb      	ldrb	r3, [r7, #3]
 800c172:	0159      	lsls	r1, r3, #5
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	440b      	add	r3, r1
 800c178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c17c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c182:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c184:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c188:	2b03      	cmp	r3, #3
 800c18a:	d10f      	bne.n	800c1ac <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	015a      	lsls	r2, r3, #5
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	4413      	add	r3, r2
 800c194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	78fa      	ldrb	r2, [r7, #3]
 800c19c:	0151      	lsls	r1, r2, #5
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	440a      	add	r2, r1
 800c1a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1aa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	371c      	adds	r7, #28
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop

0800c1bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08c      	sub	sp, #48	; 0x30
 800c1c0:	af02      	add	r7, sp, #8
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	4613      	mov	r3, r2
 800c1c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	785b      	ldrb	r3, [r3, #1]
 800c1d2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c1d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c1d8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d028      	beq.n	800c238 <USB_HC_StartXfer+0x7c>
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	791b      	ldrb	r3, [r3, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d124      	bne.n	800c238 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800c1ee:	79fb      	ldrb	r3, [r7, #7]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10b      	bne.n	800c20c <USB_HC_StartXfer+0x50>
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	795b      	ldrb	r3, [r3, #5]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d107      	bne.n	800c20c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	785b      	ldrb	r3, [r3, #1]
 800c200:	4619      	mov	r1, r3
 800c202:	68f8      	ldr	r0, [r7, #12]
 800c204:	f000 fa30 	bl	800c668 <USB_DoPing>
      return HAL_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	e114      	b.n	800c436 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800c20c:	79fb      	ldrb	r3, [r7, #7]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d112      	bne.n	800c238 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	015a      	lsls	r2, r3, #5
 800c216:	6a3b      	ldr	r3, [r7, #32]
 800c218:	4413      	add	r3, r2
 800c21a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	69fa      	ldr	r2, [r7, #28]
 800c222:	0151      	lsls	r1, r2, #5
 800c224:	6a3a      	ldr	r2, [r7, #32]
 800c226:	440a      	add	r2, r1
 800c228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c22c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800c230:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	2200      	movs	r2, #0
 800c236:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d018      	beq.n	800c272 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	68ba      	ldr	r2, [r7, #8]
 800c246:	8912      	ldrh	r2, [r2, #8]
 800c248:	4413      	add	r3, r2
 800c24a:	3b01      	subs	r3, #1
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	8912      	ldrh	r2, [r2, #8]
 800c250:	fbb3 f3f2 	udiv	r3, r3, r2
 800c254:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c256:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c258:	8b7b      	ldrh	r3, [r7, #26]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d90b      	bls.n	800c276 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800c25e:	8b7b      	ldrh	r3, [r7, #26]
 800c260:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	8912      	ldrh	r2, [r2, #8]
 800c268:	fb02 f203 	mul.w	r2, r2, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	611a      	str	r2, [r3, #16]
 800c270:	e001      	b.n	800c276 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800c272:	2301      	movs	r3, #1
 800c274:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	78db      	ldrb	r3, [r3, #3]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d006      	beq.n	800c28c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c27e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	8912      	ldrh	r2, [r2, #8]
 800c284:	fb02 f203 	mul.w	r2, r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	691b      	ldr	r3, [r3, #16]
 800c290:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c296:	04d9      	lsls	r1, r3, #19
 800c298:	4b69      	ldr	r3, [pc, #420]	; (800c440 <USB_HC_StartXfer+0x284>)
 800c29a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c29c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	7a9b      	ldrb	r3, [r3, #10]
 800c2a2:	075b      	lsls	r3, r3, #29
 800c2a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c2a8:	69f9      	ldr	r1, [r7, #28]
 800c2aa:	0148      	lsls	r0, r1, #5
 800c2ac:	6a39      	ldr	r1, [r7, #32]
 800c2ae:	4401      	add	r1, r0
 800c2b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c2b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c2b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d009      	beq.n	800c2d2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	68d9      	ldr	r1, [r3, #12]
 800c2c2:	69fb      	ldr	r3, [r7, #28]
 800c2c4:	015a      	lsls	r2, r3, #5
 800c2c6:	6a3b      	ldr	r3, [r7, #32]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ce:	460a      	mov	r2, r1
 800c2d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c2d2:	6a3b      	ldr	r3, [r7, #32]
 800c2d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	bf0c      	ite	eq
 800c2e2:	2301      	moveq	r3, #1
 800c2e4:	2300      	movne	r3, #0
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	6a3b      	ldr	r3, [r7, #32]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	69fa      	ldr	r2, [r7, #28]
 800c2fa:	0151      	lsls	r1, r2, #5
 800c2fc:	6a3a      	ldr	r2, [r7, #32]
 800c2fe:	440a      	add	r2, r1
 800c300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c304:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c308:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	015a      	lsls	r2, r3, #5
 800c30e:	6a3b      	ldr	r3, [r7, #32]
 800c310:	4413      	add	r3, r2
 800c312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	7e7b      	ldrb	r3, [r7, #25]
 800c31a:	075b      	lsls	r3, r3, #29
 800c31c:	69f9      	ldr	r1, [r7, #28]
 800c31e:	0148      	lsls	r0, r1, #5
 800c320:	6a39      	ldr	r1, [r7, #32]
 800c322:	4401      	add	r1, r0
 800c324:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c328:	4313      	orrs	r3, r2
 800c32a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	6a3b      	ldr	r3, [r7, #32]
 800c332:	4413      	add	r3, r2
 800c334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a42      	ldr	r2, [pc, #264]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c33c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c33e:	4b41      	ldr	r3, [pc, #260]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c346:	4a3f      	ldr	r2, [pc, #252]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c348:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	78db      	ldrb	r3, [r3, #3]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d006      	beq.n	800c360 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c352:	4b3c      	ldr	r3, [pc, #240]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c35a:	4a3a      	ldr	r2, [pc, #232]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c35c:	6013      	str	r3, [r2, #0]
 800c35e:	e005      	b.n	800c36c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c360:	4b38      	ldr	r3, [pc, #224]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c368:	4a36      	ldr	r2, [pc, #216]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c36a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c36c:	4b35      	ldr	r3, [pc, #212]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c374:	4a33      	ldr	r2, [pc, #204]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c376:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	015a      	lsls	r2, r3, #5
 800c37c:	6a3b      	ldr	r3, [r7, #32]
 800c37e:	4413      	add	r3, r2
 800c380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c384:	461a      	mov	r2, r3
 800c386:	4b2f      	ldr	r3, [pc, #188]	; (800c444 <USB_HC_StartXfer+0x288>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	e04f      	b.n	800c436 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	78db      	ldrb	r3, [r3, #3]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d14a      	bne.n	800c434 <USB_HC_StartXfer+0x278>
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d046      	beq.n	800c434 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	79db      	ldrb	r3, [r3, #7]
 800c3aa:	2b03      	cmp	r3, #3
 800c3ac:	d830      	bhi.n	800c410 <USB_HC_StartXfer+0x254>
 800c3ae:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <USB_HC_StartXfer+0x1f8>)
 800c3b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b4:	0800c3c5 	.word	0x0800c3c5
 800c3b8:	0800c3e9 	.word	0x0800c3e9
 800c3bc:	0800c3c5 	.word	0x0800c3c5
 800c3c0:	0800c3e9 	.word	0x0800c3e9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	3303      	adds	r3, #3
 800c3ca:	089b      	lsrs	r3, r3, #2
 800c3cc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c3ce:	8afa      	ldrh	r2, [r7, #22]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d91c      	bls.n	800c414 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	f043 0220 	orr.w	r2, r3, #32
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	619a      	str	r2, [r3, #24]
        }
        break;
 800c3e6:	e015      	b.n	800c414 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	3303      	adds	r3, #3
 800c3ee:	089b      	lsrs	r3, r3, #2
 800c3f0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c3f2:	8afa      	ldrh	r2, [r7, #22]
 800c3f4:	6a3b      	ldr	r3, [r7, #32]
 800c3f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d90a      	bls.n	800c418 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	619a      	str	r2, [r3, #24]
        }
        break;
 800c40e:	e003      	b.n	800c418 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c410:	bf00      	nop
 800c412:	e002      	b.n	800c41a <USB_HC_StartXfer+0x25e>
        break;
 800c414:	bf00      	nop
 800c416:	e000      	b.n	800c41a <USB_HC_StartXfer+0x25e>
        break;
 800c418:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	68d9      	ldr	r1, [r3, #12]
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	785a      	ldrb	r2, [r3, #1]
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	b298      	uxth	r0, r3
 800c428:	2300      	movs	r3, #0
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	4603      	mov	r3, r0
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff fb8a 	bl	800bb48 <USB_WritePacket>
  }

  return HAL_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3728      	adds	r7, #40	; 0x28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	1ff80000 	.word	0x1ff80000
 800c444:	20000158 	.word	0x20000158

0800c448 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c45a:	695b      	ldr	r3, [r3, #20]
 800c45c:	b29b      	uxth	r3, r3
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c46a:	b480      	push	{r7}
 800c46c:	b087      	sub	sp, #28
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	460b      	mov	r3, r1
 800c474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c47a:	78fb      	ldrb	r3, [r7, #3]
 800c47c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c47e:	2300      	movs	r3, #0
 800c480:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	0c9b      	lsrs	r3, r3, #18
 800c492:	f003 0303 	and.w	r3, r3, #3
 800c496:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d002      	beq.n	800c4a4 <USB_HC_Halt+0x3a>
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d16c      	bne.n	800c57e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	015a      	lsls	r2, r3, #5
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68fa      	ldr	r2, [r7, #12]
 800c4b4:	0151      	lsls	r1, r2, #5
 800c4b6:	693a      	ldr	r2, [r7, #16]
 800c4b8:	440a      	add	r2, r1
 800c4ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c4c2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d143      	bne.n	800c558 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	015a      	lsls	r2, r3, #5
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	0151      	lsls	r1, r2, #5
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	440a      	add	r2, r1
 800c4e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c4ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	015a      	lsls	r2, r3, #5
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	0151      	lsls	r1, r2, #5
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	440a      	add	r2, r1
 800c506:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c50a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c50e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	015a      	lsls	r2, r3, #5
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	4413      	add	r3, r2
 800c518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	0151      	lsls	r1, r2, #5
 800c522:	693a      	ldr	r2, [r7, #16]
 800c524:	440a      	add	r2, r1
 800c526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c52a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c52e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	3301      	adds	r3, #1
 800c534:	617b      	str	r3, [r7, #20]
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c53c:	d81d      	bhi.n	800c57a <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	015a      	lsls	r2, r3, #5
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	4413      	add	r3, r2
 800c546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c554:	d0ec      	beq.n	800c530 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c556:	e080      	b.n	800c65a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	015a      	lsls	r2, r3, #5
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	4413      	add	r3, r2
 800c560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	0151      	lsls	r1, r2, #5
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	440a      	add	r2, r1
 800c56e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c576:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c578:	e06f      	b.n	800c65a <USB_HC_Halt+0x1f0>
          break;
 800c57a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c57c:	e06d      	b.n	800c65a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	015a      	lsls	r2, r3, #5
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	4413      	add	r3, r2
 800c586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	0151      	lsls	r1, r2, #5
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	440a      	add	r2, r1
 800c594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c598:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c59c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d143      	bne.n	800c636 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	015a      	lsls	r2, r3, #5
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	4413      	add	r3, r2
 800c5b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	0151      	lsls	r1, r2, #5
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	440a      	add	r2, r1
 800c5c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5cc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	015a      	lsls	r2, r3, #5
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	0151      	lsls	r1, r2, #5
 800c5e0:	693a      	ldr	r2, [r7, #16]
 800c5e2:	440a      	add	r2, r1
 800c5e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5ec:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	015a      	lsls	r2, r3, #5
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	4413      	add	r3, r2
 800c5f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	0151      	lsls	r1, r2, #5
 800c600:	693a      	ldr	r2, [r7, #16]
 800c602:	440a      	add	r2, r1
 800c604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c608:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c60c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	3301      	adds	r3, #1
 800c612:	617b      	str	r3, [r7, #20]
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c61a:	d81d      	bhi.n	800c658 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	015a      	lsls	r2, r3, #5
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	4413      	add	r3, r2
 800c624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c62e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c632:	d0ec      	beq.n	800c60e <USB_HC_Halt+0x1a4>
 800c634:	e011      	b.n	800c65a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	015a      	lsls	r2, r3, #5
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	4413      	add	r3, r2
 800c63e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	0151      	lsls	r1, r2, #5
 800c648:	693a      	ldr	r2, [r7, #16]
 800c64a:	440a      	add	r2, r1
 800c64c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c650:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c654:	6013      	str	r3, [r2, #0]
 800c656:	e000      	b.n	800c65a <USB_HC_Halt+0x1f0>
          break;
 800c658:	bf00      	nop
    }
  }

  return HAL_OK;
 800c65a:	2300      	movs	r3, #0
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	371c      	adds	r7, #28
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c668:	b480      	push	{r7}
 800c66a:	b087      	sub	sp, #28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	460b      	mov	r3, r1
 800c672:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c678:	78fb      	ldrb	r3, [r7, #3]
 800c67a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c67c:	2301      	movs	r3, #1
 800c67e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	04da      	lsls	r2, r3, #19
 800c684:	4b15      	ldr	r3, [pc, #84]	; (800c6dc <USB_DoPing+0x74>)
 800c686:	4013      	ands	r3, r2
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	0151      	lsls	r1, r2, #5
 800c68c:	697a      	ldr	r2, [r7, #20]
 800c68e:	440a      	add	r2, r1
 800c690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c698:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	015a      	lsls	r2, r3, #5
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c6b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	015a      	lsls	r2, r3, #5
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	371c      	adds	r7, #28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	1ff80000 	.word	0x1ff80000

0800c6e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b086      	sub	sp, #24
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff f9a5 	bl	800ba40 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c6f6:	2110      	movs	r1, #16
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7ff f9dd 	bl	800bab8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff fa00 	bl	800bb04 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c704:	2300      	movs	r3, #0
 800c706:	613b      	str	r3, [r7, #16]
 800c708:	e01f      	b.n	800c74a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	015a      	lsls	r2, r3, #5
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	4413      	add	r3, r2
 800c712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c720:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c728:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c730:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	015a      	lsls	r2, r3, #5
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	4413      	add	r3, r2
 800c73a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c73e:	461a      	mov	r2, r3
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	3301      	adds	r3, #1
 800c748:	613b      	str	r3, [r7, #16]
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	2b0f      	cmp	r3, #15
 800c74e:	d9dc      	bls.n	800c70a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c750:	2300      	movs	r3, #0
 800c752:	613b      	str	r3, [r7, #16]
 800c754:	e034      	b.n	800c7c0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	015a      	lsls	r2, r3, #5
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	4413      	add	r3, r2
 800c75e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c76c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c774:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c77c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	015a      	lsls	r2, r3, #5
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	4413      	add	r3, r2
 800c786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c78a:	461a      	mov	r2, r3
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	3301      	adds	r3, #1
 800c794:	617b      	str	r3, [r7, #20]
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c79c:	d80c      	bhi.n	800c7b8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	015a      	lsls	r2, r3, #5
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7b4:	d0ec      	beq.n	800c790 <USB_StopHost+0xb0>
 800c7b6:	e000      	b.n	800c7ba <USB_StopHost+0xda>
        break;
 800c7b8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	613b      	str	r3, [r7, #16]
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	2b0f      	cmp	r3, #15
 800c7c4:	d9c7      	bls.n	800c756 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c7d2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7da:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f7ff f91e 	bl	800ba1e <USB_EnableGlobalInt>

  return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b089      	sub	sp, #36	; 0x24
 800c7f0:	af04      	add	r7, sp, #16
 800c7f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	2102      	movs	r1, #2
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fcb4 	bl	800d168 <USBH_FindInterface>
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	2bff      	cmp	r3, #255	; 0xff
 800c808:	d002      	beq.n	800c810 <USBH_CDC_InterfaceInit+0x24>
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d901      	bls.n	800c814 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c810:	2302      	movs	r3, #2
 800c812:	e13d      	b.n	800ca90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fc89 	bl	800d130 <USBH_SelectInterface>
 800c81e:	4603      	mov	r3, r0
 800c820:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c822:	7bbb      	ldrb	r3, [r7, #14]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d001      	beq.n	800c82c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c828:	2302      	movs	r3, #2
 800c82a:	e131      	b.n	800ca90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c832:	2050      	movs	r0, #80	; 0x50
 800c834:	f005 fbe0 	bl	8011ff8 <malloc>
 800c838:	4603      	mov	r3, r0
 800c83a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c842:	69db      	ldr	r3, [r3, #28]
 800c844:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c84c:	2302      	movs	r3, #2
 800c84e:	e11f      	b.n	800ca90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c850:	2250      	movs	r2, #80	; 0x50
 800c852:	2100      	movs	r1, #0
 800c854:	68b8      	ldr	r0, [r7, #8]
 800c856:	f005 fbea 	bl	801202e <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	211a      	movs	r1, #26
 800c860:	fb01 f303 	mul.w	r3, r1, r3
 800c864:	4413      	add	r3, r2
 800c866:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	b25b      	sxtb	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	da15      	bge.n	800c89e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c872:	7bfb      	ldrb	r3, [r7, #15]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	211a      	movs	r1, #26
 800c878:	fb01 f303 	mul.w	r3, r1, r3
 800c87c:	4413      	add	r3, r2
 800c87e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	211a      	movs	r1, #26
 800c88e:	fb01 f303 	mul.w	r3, r1, r3
 800c892:	4413      	add	r3, r2
 800c894:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c898:	881a      	ldrh	r2, [r3, #0]
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f002 f890 	bl	800e9ca <USBH_AllocPipe>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	7819      	ldrb	r1, [r3, #0]
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	7858      	ldrb	r0, [r3, #1]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	8952      	ldrh	r2, [r2, #10]
 800c8ca:	9202      	str	r2, [sp, #8]
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	9201      	str	r2, [sp, #4]
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f002 f848 	bl	800e96c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f005 fabd 	bl	8011e64 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	210a      	movs	r1, #10
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fc39 	bl	800d168 <USBH_FindInterface>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	2bff      	cmp	r3, #255	; 0xff
 800c8fe:	d002      	beq.n	800c906 <USBH_CDC_InterfaceInit+0x11a>
 800c900:	7bfb      	ldrb	r3, [r7, #15]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d901      	bls.n	800c90a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c906:	2302      	movs	r3, #2
 800c908:	e0c2      	b.n	800ca90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	211a      	movs	r1, #26
 800c910:	fb01 f303 	mul.w	r3, r1, r3
 800c914:	4413      	add	r3, r2
 800c916:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	b25b      	sxtb	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	da16      	bge.n	800c950 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c922:	7bfb      	ldrb	r3, [r7, #15]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	211a      	movs	r1, #26
 800c928:	fb01 f303 	mul.w	r3, r1, r3
 800c92c:	4413      	add	r3, r2
 800c92e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c932:	781a      	ldrb	r2, [r3, #0]
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	211a      	movs	r1, #26
 800c93e:	fb01 f303 	mul.w	r3, r1, r3
 800c942:	4413      	add	r3, r2
 800c944:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c948:	881a      	ldrh	r2, [r3, #0]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	835a      	strh	r2, [r3, #26]
 800c94e:	e015      	b.n	800c97c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	211a      	movs	r1, #26
 800c956:	fb01 f303 	mul.w	r3, r1, r3
 800c95a:	4413      	add	r3, r2
 800c95c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	211a      	movs	r1, #26
 800c96c:	fb01 f303 	mul.w	r3, r1, r3
 800c970:	4413      	add	r3, r2
 800c972:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c976:	881a      	ldrh	r2, [r3, #0]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	211a      	movs	r1, #26
 800c982:	fb01 f303 	mul.w	r3, r1, r3
 800c986:	4413      	add	r3, r2
 800c988:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	b25b      	sxtb	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	da16      	bge.n	800c9c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c994:	7bfb      	ldrb	r3, [r7, #15]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	211a      	movs	r1, #26
 800c99a:	fb01 f303 	mul.w	r3, r1, r3
 800c99e:	4413      	add	r3, r2
 800c9a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c9a4:	781a      	ldrb	r2, [r3, #0]
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	211a      	movs	r1, #26
 800c9b0:	fb01 f303 	mul.w	r3, r1, r3
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c9ba:	881a      	ldrh	r2, [r3, #0]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	835a      	strh	r2, [r3, #26]
 800c9c0:	e015      	b.n	800c9ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c9c2:	7bfb      	ldrb	r3, [r7, #15]
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	211a      	movs	r1, #26
 800c9c8:	fb01 f303 	mul.w	r3, r1, r3
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c9d2:	781a      	ldrb	r2, [r3, #0]
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	211a      	movs	r1, #26
 800c9de:	fb01 f303 	mul.w	r3, r1, r3
 800c9e2:	4413      	add	r3, r2
 800c9e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c9e8:	881a      	ldrh	r2, [r3, #0]
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	7b9b      	ldrb	r3, [r3, #14]
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f001 ffe8 	bl	800e9ca <USBH_AllocPipe>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	7bdb      	ldrb	r3, [r3, #15]
 800ca06:	4619      	mov	r1, r3
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f001 ffde 	bl	800e9ca <USBH_AllocPipe>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	461a      	mov	r2, r3
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	7b59      	ldrb	r1, [r3, #13]
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	7b98      	ldrb	r0, [r3, #14]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	8b12      	ldrh	r2, [r2, #24]
 800ca2e:	9202      	str	r2, [sp, #8]
 800ca30:	2202      	movs	r2, #2
 800ca32:	9201      	str	r2, [sp, #4]
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	4623      	mov	r3, r4
 800ca38:	4602      	mov	r2, r0
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f001 ff96 	bl	800e96c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	7b19      	ldrb	r1, [r3, #12]
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	7bd8      	ldrb	r0, [r3, #15]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	8b52      	ldrh	r2, [r2, #26]
 800ca58:	9202      	str	r2, [sp, #8]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	9201      	str	r2, [sp, #4]
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	4623      	mov	r3, r4
 800ca62:	4602      	mov	r2, r0
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 ff81 	bl	800e96c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	7b5b      	ldrb	r3, [r3, #13]
 800ca76:	2200      	movs	r2, #0
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f005 f9f2 	bl	8011e64 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	7b1b      	ldrb	r3, [r3, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f005 f9eb 	bl	8011e64 <USBH_LL_SetToggle>

  return USBH_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd90      	pop	{r4, r7, pc}

0800ca98 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00e      	beq.n	800cad0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f001 ff76 	bl	800e9aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f001 ffa1 	bl	800ea0c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	7b1b      	ldrb	r3, [r3, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00e      	beq.n	800caf6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	7b1b      	ldrb	r3, [r3, #12]
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 ff63 	bl	800e9aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	7b1b      	ldrb	r3, [r3, #12]
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 ff8e 	bl	800ea0c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	7b5b      	ldrb	r3, [r3, #13]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00e      	beq.n	800cb1c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	7b5b      	ldrb	r3, [r3, #13]
 800cb02:	4619      	mov	r1, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f001 ff50 	bl	800e9aa <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	7b5b      	ldrb	r3, [r3, #13]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f001 ff7b 	bl	800ea0c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb22:	69db      	ldr	r3, [r3, #28]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00b      	beq.n	800cb40 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f005 fa69 	bl	8012008 <free>
    phost->pActiveClass->pData = 0U;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb58:	69db      	ldr	r3, [r3, #28]
 800cb5a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	3340      	adds	r3, #64	; 0x40
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f8b1 	bl	800ccca <GetLineCoding>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cb6c:	7afb      	ldrb	r3, [r7, #11]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d105      	bne.n	800cb7e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb78:	2102      	movs	r1, #2
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cb7e:	7afb      	ldrb	r3, [r7, #11]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cb90:	2301      	movs	r3, #1
 800cb92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cba8:	2b04      	cmp	r3, #4
 800cbaa:	d877      	bhi.n	800cc9c <USBH_CDC_Process+0x114>
 800cbac:	a201      	add	r2, pc, #4	; (adr r2, 800cbb4 <USBH_CDC_Process+0x2c>)
 800cbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb2:	bf00      	nop
 800cbb4:	0800cbc9 	.word	0x0800cbc9
 800cbb8:	0800cbcf 	.word	0x0800cbcf
 800cbbc:	0800cbff 	.word	0x0800cbff
 800cbc0:	0800cc73 	.word	0x0800cc73
 800cbc4:	0800cc81 	.word	0x0800cc81
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73fb      	strb	r3, [r7, #15]
      break;
 800cbcc:	e06d      	b.n	800ccaa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f897 	bl	800cd08 <SetLineCoding>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cbde:	7bbb      	ldrb	r3, [r7, #14]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d104      	bne.n	800cbee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2202      	movs	r2, #2
 800cbe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cbec:	e058      	b.n	800cca0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d055      	beq.n	800cca0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2204      	movs	r2, #4
 800cbf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cbfc:	e050      	b.n	800cca0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	3340      	adds	r3, #64	; 0x40
 800cc02:	4619      	mov	r1, r3
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 f860 	bl	800ccca <GetLineCoding>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d126      	bne.n	800cc62 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc26:	791b      	ldrb	r3, [r3, #4]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d13b      	bne.n	800cca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc36:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d133      	bne.n	800cca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc46:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d12b      	bne.n	800cca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc54:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d124      	bne.n	800cca4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f984 	bl	800cf68 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cc60:	e020      	b.n	800cca4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d01d      	beq.n	800cca4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	2204      	movs	r2, #4
 800cc6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cc70:	e018      	b.n	800cca4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 f867 	bl	800cd46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f8f8 	bl	800ce6e <CDC_ProcessReception>
      break;
 800cc7e:	e014      	b.n	800ccaa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cc80:	2100      	movs	r1, #0
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 f94f 	bl	800df26 <USBH_ClrFeature>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10a      	bne.n	800cca8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800cc9a:	e005      	b.n	800cca8 <USBH_CDC_Process+0x120>

    default:
      break;
 800cc9c:	bf00      	nop
 800cc9e:	e004      	b.n	800ccaa <USBH_CDC_Process+0x122>
      break;
 800cca0:	bf00      	nop
 800cca2:	e002      	b.n	800ccaa <USBH_CDC_Process+0x122>
      break;
 800cca4:	bf00      	nop
 800cca6:	e000      	b.n	800ccaa <USBH_CDC_Process+0x122>
      break;
 800cca8:	bf00      	nop

  }

  return status;
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	370c      	adds	r7, #12
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b082      	sub	sp, #8
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
 800ccd2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	22a1      	movs	r2, #161	; 0xa1
 800ccd8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2221      	movs	r2, #33	; 0x21
 800ccde:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2207      	movs	r2, #7
 800ccf0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2207      	movs	r2, #7
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f001 faf4 	bl	800e2e6 <USBH_CtlReq>
 800ccfe:	4603      	mov	r3, r0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2221      	movs	r2, #33	; 0x21
 800cd16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2207      	movs	r2, #7
 800cd2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	2207      	movs	r2, #7
 800cd34:	4619      	mov	r1, r3
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f001 fad5 	bl	800e2e6 <USBH_CtlReq>
 800cd3c:	4603      	mov	r3, r0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b086      	sub	sp, #24
 800cd4a:	af02      	add	r7, sp, #8
 800cd4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d002      	beq.n	800cd6c <CDC_ProcessTransmission+0x26>
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d025      	beq.n	800cdb6 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800cd6a:	e07c      	b.n	800ce66 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	8b12      	ldrh	r2, [r2, #24]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d90c      	bls.n	800cd92 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	69d9      	ldr	r1, [r3, #28]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	8b1a      	ldrh	r2, [r3, #24]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	7b58      	ldrb	r0, [r3, #13]
 800cd84:	2301      	movs	r3, #1
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	4603      	mov	r3, r0
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f001 fdab 	bl	800e8e6 <USBH_BulkSendData>
 800cd90:	e00c      	b.n	800cdac <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	7b58      	ldrb	r0, [r3, #13]
 800cda0:	2301      	movs	r3, #1
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	4603      	mov	r3, r0
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f001 fd9d 	bl	800e8e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cdb4:	e057      	b.n	800ce66 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	7b5b      	ldrb	r3, [r3, #13]
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f005 f827 	bl	8011e10 <USBH_LL_GetURBState>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800cdc6:	7afb      	ldrb	r3, [r7, #11]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d136      	bne.n	800ce3a <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	8b12      	ldrh	r2, [r2, #24]
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d90e      	bls.n	800cdf6 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	8b12      	ldrh	r2, [r2, #24]
 800cde0:	1a9a      	subs	r2, r3, r2
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	69db      	ldr	r3, [r3, #28]
 800cdea:	68fa      	ldr	r2, [r7, #12]
 800cdec:	8b12      	ldrh	r2, [r2, #24]
 800cdee:	441a      	add	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	61da      	str	r2, [r3, #28]
 800cdf4:	e002      	b.n	800cdfc <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d004      	beq.n	800ce0e <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ce0c:	e006      	b.n	800ce1c <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 f892 	bl	800cf40 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2204      	movs	r2, #4
 800ce20:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce30:	2300      	movs	r3, #0
 800ce32:	2200      	movs	r2, #0
 800ce34:	f001 fff8 	bl	800ee28 <osMessageQueuePut>
      break;
 800ce38:	e014      	b.n	800ce64 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800ce3a:	7afb      	ldrb	r3, [r7, #11]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d111      	bne.n	800ce64 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2204      	movs	r2, #4
 800ce4c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f001 ffe2 	bl	800ee28 <osMessageQueuePut>
      break;
 800ce64:	bf00      	nop
  }
}
 800ce66:	bf00      	nop
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b086      	sub	sp, #24
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce7c:	69db      	ldr	r3, [r3, #28]
 800ce7e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ce8a:	2b03      	cmp	r3, #3
 800ce8c:	d002      	beq.n	800ce94 <CDC_ProcessReception+0x26>
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	d00e      	beq.n	800ceb0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ce92:	e051      	b.n	800cf38 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	6a19      	ldr	r1, [r3, #32]
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	8b5a      	ldrh	r2, [r3, #26]
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	7b1b      	ldrb	r3, [r3, #12]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f001 fd45 	bl	800e930 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	2204      	movs	r2, #4
 800ceaa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ceae:	e043      	b.n	800cf38 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	7b1b      	ldrb	r3, [r3, #12]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f004 ffaa 	bl	8011e10 <USBH_LL_GetURBState>
 800cebc:	4603      	mov	r3, r0
 800cebe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cec0:	7cfb      	ldrb	r3, [r7, #19]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d137      	bne.n	800cf36 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	7b1b      	ldrb	r3, [r3, #12]
 800ceca:	4619      	mov	r1, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f004 ff0d 	bl	8011cec <USBH_LL_GetLastXferSize>
 800ced2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d016      	beq.n	800cf0c <CDC_ProcessReception+0x9e>
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	8b5b      	ldrh	r3, [r3, #26]
 800cee2:	461a      	mov	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d910      	bls.n	800cf0c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	1ad2      	subs	r2, r2, r3
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6a1a      	ldr	r2, [r3, #32]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	441a      	add	r2, r3
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2203      	movs	r2, #3
 800cf06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800cf0a:	e006      	b.n	800cf1a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 f81d 	bl	800cf54 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2204      	movs	r2, #4
 800cf1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf2e:	2300      	movs	r3, #0
 800cf30:	2200      	movs	r2, #0
 800cf32:	f001 ff79 	bl	800ee28 <osMessageQueuePut>
      break;
 800cf36:	bf00      	nop
  }
}
 800cf38:	bf00      	nop
 800cf3a:	3718      	adds	r7, #24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf5c:	bf00      	nop
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	60b9      	str	r1, [r7, #8]
 800cf86:	4613      	mov	r3, r2
 800cf88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d101      	bne.n	800cf94 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cf90:	2302      	movs	r3, #2
 800cf92:	e044      	b.n	800d01e <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	79fa      	ldrb	r2, [r7, #7]
 800cf98:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cfac:	68f8      	ldr	r0, [r7, #12]
 800cfae:	f000 f841 	bl	800d034 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d003      	beq.n	800cfe0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	68ba      	ldr	r2, [r7, #8]
 800cfdc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	2104      	movs	r1, #4
 800cfe4:	2010      	movs	r0, #16
 800cfe6:	f001 fe99 	bl	800ed1c <osMessageQueueNew>
 800cfea:	4602      	mov	r2, r0
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800cff2:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <USBH_Init+0xac>)
 800cff4:	4a0d      	ldr	r2, [pc, #52]	; (800d02c <USBH_Init+0xb0>)
 800cff6:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800cff8:	4b0b      	ldr	r3, [pc, #44]	; (800d028 <USBH_Init+0xac>)
 800cffa:	2280      	movs	r2, #128	; 0x80
 800cffc:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800cffe:	4b0a      	ldr	r3, [pc, #40]	; (800d028 <USBH_Init+0xac>)
 800d000:	2218      	movs	r2, #24
 800d002:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800d004:	4a08      	ldr	r2, [pc, #32]	; (800d028 <USBH_Init+0xac>)
 800d006:	68f9      	ldr	r1, [r7, #12]
 800d008:	4809      	ldr	r0, [pc, #36]	; (800d030 <USBH_Init+0xb4>)
 800d00a:	f001 fdb3 	bl	800eb74 <osThreadNew>
 800d00e:	4602      	mov	r2, r0
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d016:	68f8      	ldr	r0, [r7, #12]
 800d018:	f004 fdb6 	bl	8011b88 <USBH_LL_Init>

  return USBH_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	200052a8 	.word	0x200052a8
 800d02c:	080122ec 	.word	0x080122ec
 800d030:	0800dc9d 	.word	0x0800dc9d

0800d034 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d040:	2300      	movs	r3, #0
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	e009      	b.n	800d05a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d046:	687a      	ldr	r2, [r7, #4]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	33e0      	adds	r3, #224	; 0xe0
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	2200      	movs	r2, #0
 800d052:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3301      	adds	r3, #1
 800d058:	60fb      	str	r3, [r7, #12]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b0e      	cmp	r3, #14
 800d05e:	d9f2      	bls.n	800d046 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d060:	2300      	movs	r3, #0
 800d062:	60fb      	str	r3, [r7, #12]
 800d064:	e009      	b.n	800d07a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d066:	687a      	ldr	r2, [r7, #4]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4413      	add	r3, r2
 800d06c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d070:	2200      	movs	r2, #0
 800d072:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3301      	adds	r3, #1
 800d078:	60fb      	str	r3, [r7, #12]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d080:	d3f1      	bcc.n	800d066 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2201      	movs	r2, #1
 800d092:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2240      	movs	r2, #64	; 0x40
 800d0a6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d016      	beq.n	800d11e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10e      	bne.n	800d118 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d100:	1c59      	adds	r1, r3, #1
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	33de      	adds	r3, #222	; 0xde
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d112:	2300      	movs	r3, #0
 800d114:	73fb      	strb	r3, [r7, #15]
 800d116:	e004      	b.n	800d122 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d118:	2302      	movs	r3, #2
 800d11a:	73fb      	strb	r3, [r7, #15]
 800d11c:	e001      	b.n	800d122 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d11e:	2302      	movs	r3, #2
 800d120:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d122:	7bfb      	ldrb	r3, [r7, #15]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3714      	adds	r7, #20
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr

0800d130 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
 800d138:	460b      	mov	r3, r1
 800d13a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d13c:	2300      	movs	r3, #0
 800d13e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d146:	78fa      	ldrb	r2, [r7, #3]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d204      	bcs.n	800d156 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	78fa      	ldrb	r2, [r7, #3]
 800d150:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d154:	e001      	b.n	800d15a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d156:	2302      	movs	r3, #2
 800d158:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3714      	adds	r7, #20
 800d160:	46bd      	mov	sp, r7
 800d162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d166:	4770      	bx	lr

0800d168 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d168:	b480      	push	{r7}
 800d16a:	b087      	sub	sp, #28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
 800d170:	4608      	mov	r0, r1
 800d172:	4611      	mov	r1, r2
 800d174:	461a      	mov	r2, r3
 800d176:	4603      	mov	r3, r0
 800d178:	70fb      	strb	r3, [r7, #3]
 800d17a:	460b      	mov	r3, r1
 800d17c:	70bb      	strb	r3, [r7, #2]
 800d17e:	4613      	mov	r3, r2
 800d180:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d186:	2300      	movs	r3, #0
 800d188:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d190:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d192:	e025      	b.n	800d1e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d194:	7dfb      	ldrb	r3, [r7, #23]
 800d196:	221a      	movs	r2, #26
 800d198:	fb02 f303 	mul.w	r3, r2, r3
 800d19c:	3308      	adds	r3, #8
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3302      	adds	r3, #2
 800d1a4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1a6:	693b      	ldr	r3, [r7, #16]
 800d1a8:	795b      	ldrb	r3, [r3, #5]
 800d1aa:	78fa      	ldrb	r2, [r7, #3]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d002      	beq.n	800d1b6 <USBH_FindInterface+0x4e>
 800d1b0:	78fb      	ldrb	r3, [r7, #3]
 800d1b2:	2bff      	cmp	r3, #255	; 0xff
 800d1b4:	d111      	bne.n	800d1da <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1ba:	78ba      	ldrb	r2, [r7, #2]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d002      	beq.n	800d1c6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1c0:	78bb      	ldrb	r3, [r7, #2]
 800d1c2:	2bff      	cmp	r3, #255	; 0xff
 800d1c4:	d109      	bne.n	800d1da <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1ca:	787a      	ldrb	r2, [r7, #1]
 800d1cc:	429a      	cmp	r2, r3
 800d1ce:	d002      	beq.n	800d1d6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1d0:	787b      	ldrb	r3, [r7, #1]
 800d1d2:	2bff      	cmp	r3, #255	; 0xff
 800d1d4:	d101      	bne.n	800d1da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	e006      	b.n	800d1e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d1da:	7dfb      	ldrb	r3, [r7, #23]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d9d6      	bls.n	800d194 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d1e6:	23ff      	movs	r3, #255	; 0xff
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	371c      	adds	r7, #28
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f004 fcff 	bl	8011c00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d202:	2101      	movs	r1, #1
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f004 fe16 	bl	8011e36 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3708      	adds	r7, #8
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b088      	sub	sp, #32
 800d218:	af04      	add	r7, sp, #16
 800d21a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d21c:	2302      	movs	r3, #2
 800d21e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d220:	2300      	movs	r3, #0
 800d222:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	2b01      	cmp	r3, #1
 800d22e:	d102      	bne.n	800d236 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2203      	movs	r2, #3
 800d234:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	2b0b      	cmp	r3, #11
 800d23e:	f200 823c 	bhi.w	800d6ba <USBH_Process+0x4a6>
 800d242:	a201      	add	r2, pc, #4	; (adr r2, 800d248 <USBH_Process+0x34>)
 800d244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d248:	0800d279 	.word	0x0800d279
 800d24c:	0800d2c7 	.word	0x0800d2c7
 800d250:	0800d34b 	.word	0x0800d34b
 800d254:	0800d639 	.word	0x0800d639
 800d258:	0800d6bb 	.word	0x0800d6bb
 800d25c:	0800d40b 	.word	0x0800d40b
 800d260:	0800d5c3 	.word	0x0800d5c3
 800d264:	0800d45d 	.word	0x0800d45d
 800d268:	0800d499 	.word	0x0800d499
 800d26c:	0800d4d3 	.word	0x0800d4d3
 800d270:	0800d51b 	.word	0x0800d51b
 800d274:	0800d621 	.word	0x0800d621
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 821c 	beq.w	800d6be <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2201      	movs	r2, #1
 800d28a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d28c:	20c8      	movs	r0, #200	; 0xc8
 800d28e:	f004 fe1c 	bl	8011eca <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f004 fd0f 	bl	8011cb6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2bc:	2300      	movs	r3, #0
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f001 fdb2 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d2c4:	e1fb      	b.n	800d6be <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	d107      	bne.n	800d2e0 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2202      	movs	r2, #2
 800d2dc:	701a      	strb	r2, [r3, #0]
 800d2de:	e025      	b.n	800d32c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2ea:	d914      	bls.n	800d316 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d302:	2b03      	cmp	r3, #3
 800d304:	d903      	bls.n	800d30e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	220d      	movs	r2, #13
 800d30a:	701a      	strb	r2, [r3, #0]
 800d30c:	e00e      	b.n	800d32c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2200      	movs	r2, #0
 800d312:	701a      	strb	r2, [r3, #0]
 800d314:	e00a      	b.n	800d32c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d31c:	f103 020a 	add.w	r2, r3, #10
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d326:	200a      	movs	r0, #10
 800d328:	f004 fdcf 	bl	8011eca <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d340:	2300      	movs	r3, #0
 800d342:	2200      	movs	r2, #0
 800d344:	f001 fd70 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      break;
 800d348:	e1c0      	b.n	800d6cc <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d35a:	2104      	movs	r1, #4
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d360:	2064      	movs	r0, #100	; 0x64
 800d362:	f004 fdb2 	bl	8011eca <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f004 fc80 	bl	8011c6c <USBH_LL_GetSpeed>
 800d36c:	4603      	mov	r3, r0
 800d36e:	461a      	mov	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2205      	movs	r2, #5
 800d37a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d37c:	2100      	movs	r1, #0
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f001 fb23 	bl	800e9ca <USBH_AllocPipe>
 800d384:	4603      	mov	r3, r0
 800d386:	461a      	mov	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d38c:	2180      	movs	r1, #128	; 0x80
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f001 fb1b 	bl	800e9ca <USBH_AllocPipe>
 800d394:	4603      	mov	r3, r0
 800d396:	461a      	mov	r2, r3
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	7919      	ldrb	r1, [r3, #4]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3ac:	687a      	ldr	r2, [r7, #4]
 800d3ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d3b0:	b292      	uxth	r2, r2
 800d3b2:	9202      	str	r2, [sp, #8]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	9201      	str	r2, [sp, #4]
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2280      	movs	r2, #128	; 0x80
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f001 fad4 	bl	800e96c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	7959      	ldrb	r1, [r3, #5]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3d4:	687a      	ldr	r2, [r7, #4]
 800d3d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3d8:	b292      	uxth	r2, r2
 800d3da:	9202      	str	r2, [sp, #8]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	9201      	str	r2, [sp, #4]
 800d3e0:	9300      	str	r3, [sp, #0]
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f001 fac0 	bl	800e96c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d400:	2300      	movs	r3, #0
 800d402:	2200      	movs	r2, #0
 800d404:	f001 fd10 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      break;
 800d408:	e160      	b.n	800d6cc <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 f964 	bl	800d6d8 <USBH_HandleEnum>
 800d410:	4603      	mov	r3, r0
 800d412:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d414:	7bbb      	ldrb	r3, [r7, #14]
 800d416:	b2db      	uxtb	r3, r3
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f040 8152 	bne.w	800d6c2 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2200      	movs	r2, #0
 800d422:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d103      	bne.n	800d438 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2208      	movs	r2, #8
 800d434:	701a      	strb	r2, [r3, #0]
 800d436:	e002      	b.n	800d43e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2207      	movs	r2, #7
 800d43c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2205      	movs	r2, #5
 800d442:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d452:	2300      	movs	r3, #0
 800d454:	2200      	movs	r2, #0
 800d456:	f001 fce7 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d45a:	e132      	b.n	800d6c2 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d462:	2b00      	cmp	r3, #0
 800d464:	f000 812f 	beq.w	800d6c6 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d46e:	2101      	movs	r1, #1
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2208      	movs	r2, #8
 800d478:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2205      	movs	r2, #5
 800d47e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d48e:	2300      	movs	r3, #0
 800d490:	2200      	movs	r2, #0
 800d492:	f001 fcc9 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800d496:	e116      	b.n	800d6c6 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 fcf8 	bl	800de98 <USBH_SetCfg>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d102      	bne.n	800d4b4 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2209      	movs	r2, #9
 800d4b2:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f001 fcac 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      break;
 800d4d0:	e0fc      	b.n	800d6cc <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d4d8:	f003 0320 	and.w	r3, r3, #32
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d00a      	beq.n	800d4f6 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 fcfb 	bl	800dede <USBH_SetFeature>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d106      	bne.n	800d4fc <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	220a      	movs	r2, #10
 800d4f2:	701a      	strb	r2, [r3, #0]
 800d4f4:	e002      	b.n	800d4fc <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	220a      	movs	r2, #10
 800d4fa:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d510:	2300      	movs	r3, #0
 800d512:	2200      	movs	r2, #0
 800d514:	f001 fc88 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      break;
 800d518:	e0d8      	b.n	800d6cc <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d520:	2b00      	cmp	r3, #0
 800d522:	d03f      	beq.n	800d5a4 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2200      	movs	r2, #0
 800d528:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d52c:	2300      	movs	r3, #0
 800d52e:	73fb      	strb	r3, [r7, #15]
 800d530:	e016      	b.n	800d560 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d532:	7bfa      	ldrb	r2, [r7, #15]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	32de      	adds	r2, #222	; 0xde
 800d538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53c:	791a      	ldrb	r2, [r3, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d544:	429a      	cmp	r2, r3
 800d546:	d108      	bne.n	800d55a <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d548:	7bfa      	ldrb	r2, [r7, #15]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	32de      	adds	r2, #222	; 0xde
 800d54e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d558:	e005      	b.n	800d566 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
 800d55c:	3301      	adds	r3, #1
 800d55e:	73fb      	strb	r3, [r7, #15]
 800d560:	7bfb      	ldrb	r3, [r7, #15]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0e5      	beq.n	800d532 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d016      	beq.n	800d59e <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	4798      	blx	r3
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d109      	bne.n	800d596 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2206      	movs	r2, #6
 800d586:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d58e:	2103      	movs	r1, #3
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	4798      	blx	r3
 800d594:	e006      	b.n	800d5a4 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	220d      	movs	r2, #13
 800d59a:	701a      	strb	r2, [r3, #0]
 800d59c:	e002      	b.n	800d5a4 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	220d      	movs	r2, #13
 800d5a2:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2205      	movs	r2, #5
 800d5a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f001 fc34 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      break;
 800d5c0:	e084      	b.n	800d6cc <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d017      	beq.n	800d5fc <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	4798      	blx	r3
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d5dc:	7bbb      	ldrb	r3, [r7, #14]
 800d5de:	b2db      	uxtb	r3, r3
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d103      	bne.n	800d5ec <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	220b      	movs	r2, #11
 800d5e8:	701a      	strb	r2, [r3, #0]
 800d5ea:	e00a      	b.n	800d602 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800d5ec:	7bbb      	ldrb	r3, [r7, #14]
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	2b02      	cmp	r3, #2
 800d5f2:	d106      	bne.n	800d602 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	220d      	movs	r2, #13
 800d5f8:	701a      	strb	r2, [r3, #0]
 800d5fa:	e002      	b.n	800d602 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	220d      	movs	r2, #13
 800d600:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2205      	movs	r2, #5
 800d606:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d616:	2300      	movs	r3, #0
 800d618:	2200      	movs	r2, #0
 800d61a:	f001 fc05 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      break;
 800d61e:	e055      	b.n	800d6cc <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d626:	2b00      	cmp	r3, #0
 800d628:	d04f      	beq.n	800d6ca <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d630:	695b      	ldr	r3, [r3, #20]
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	4798      	blx	r3
      }
      break;
 800d636:	e048      	b.n	800d6ca <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2200      	movs	r2, #0
 800d63c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f7ff fcf7 	bl	800d034 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d009      	beq.n	800d664 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d674:	2105      	movs	r1, #5
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d680:	b2db      	uxtb	r3, r3
 800d682:	2b01      	cmp	r3, #1
 800d684:	d107      	bne.n	800d696 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2200      	movs	r2, #0
 800d68a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7ff fdb0 	bl	800d1f4 <USBH_Start>
 800d694:	e002      	b.n	800d69c <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f004 fab2 	bl	8011c00 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f001 fbb8 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      break;
 800d6b8:	e008      	b.n	800d6cc <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d6ba:	bf00      	nop
 800d6bc:	e006      	b.n	800d6cc <USBH_Process+0x4b8>
      break;
 800d6be:	bf00      	nop
 800d6c0:	e004      	b.n	800d6cc <USBH_Process+0x4b8>
      break;
 800d6c2:	bf00      	nop
 800d6c4:	e002      	b.n	800d6cc <USBH_Process+0x4b8>
    break;
 800d6c6:	bf00      	nop
 800d6c8:	e000      	b.n	800d6cc <USBH_Process+0x4b8>
      break;
 800d6ca:	bf00      	nop
  }
  return USBH_OK;
 800d6cc:	2300      	movs	r3, #0
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	3710      	adds	r7, #16
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop

0800d6d8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b088      	sub	sp, #32
 800d6dc:	af04      	add	r7, sp, #16
 800d6de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	785b      	ldrb	r3, [r3, #1]
 800d6ec:	2b07      	cmp	r3, #7
 800d6ee:	f200 8208 	bhi.w	800db02 <USBH_HandleEnum+0x42a>
 800d6f2:	a201      	add	r2, pc, #4	; (adr r2, 800d6f8 <USBH_HandleEnum+0x20>)
 800d6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f8:	0800d719 	.word	0x0800d719
 800d6fc:	0800d7d7 	.word	0x0800d7d7
 800d700:	0800d841 	.word	0x0800d841
 800d704:	0800d8cf 	.word	0x0800d8cf
 800d708:	0800d939 	.word	0x0800d939
 800d70c:	0800d9a9 	.word	0x0800d9a9
 800d710:	0800da45 	.word	0x0800da45
 800d714:	0800dac3 	.word	0x0800dac3
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d718:	2108      	movs	r1, #8
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f000 faec 	bl	800dcf8 <USBH_Get_DevDesc>
 800d720:	4603      	mov	r3, r0
 800d722:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d724:	7bbb      	ldrb	r3, [r7, #14]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d130      	bne.n	800d78c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	7919      	ldrb	r1, [r3, #4]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d74e:	b292      	uxth	r2, r2
 800d750:	9202      	str	r2, [sp, #8]
 800d752:	2200      	movs	r2, #0
 800d754:	9201      	str	r2, [sp, #4]
 800d756:	9300      	str	r3, [sp, #0]
 800d758:	4603      	mov	r3, r0
 800d75a:	2280      	movs	r2, #128	; 0x80
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f001 f905 	bl	800e96c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	7959      	ldrb	r1, [r3, #5]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d776:	b292      	uxth	r2, r2
 800d778:	9202      	str	r2, [sp, #8]
 800d77a:	2200      	movs	r2, #0
 800d77c:	9201      	str	r2, [sp, #4]
 800d77e:	9300      	str	r3, [sp, #0]
 800d780:	4603      	mov	r3, r0
 800d782:	2200      	movs	r2, #0
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f001 f8f1 	bl	800e96c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d78a:	e1bc      	b.n	800db06 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
 800d78e:	2b03      	cmp	r3, #3
 800d790:	f040 81b9 	bne.w	800db06 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d79a:	3301      	adds	r3, #1
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	d903      	bls.n	800d7b6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	220d      	movs	r2, #13
 800d7b2:	701a      	strb	r2, [r3, #0]
      break;
 800d7b4:	e1a7      	b.n	800db06 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	795b      	ldrb	r3, [r3, #5]
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f001 f925 	bl	800ea0c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	791b      	ldrb	r3, [r3, #4]
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f001 f91f 	bl	800ea0c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	701a      	strb	r2, [r3, #0]
      break;
 800d7d4:	e197      	b.n	800db06 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d7d6:	2112      	movs	r1, #18
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 fa8d 	bl	800dcf8 <USBH_Get_DevDesc>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d7e2:	7bbb      	ldrb	r3, [r7, #14]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d103      	bne.n	800d7f0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d7ee:	e18c      	b.n	800db0a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7f0:	7bbb      	ldrb	r3, [r7, #14]
 800d7f2:	2b03      	cmp	r3, #3
 800d7f4:	f040 8189 	bne.w	800db0a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7fe:	3301      	adds	r3, #1
 800d800:	b2da      	uxtb	r2, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d903      	bls.n	800d81a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	220d      	movs	r2, #13
 800d816:	701a      	strb	r2, [r3, #0]
      break;
 800d818:	e177      	b.n	800db0a <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	795b      	ldrb	r3, [r3, #5]
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f001 f8f3 	bl	800ea0c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	791b      	ldrb	r3, [r3, #4]
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f001 f8ed 	bl	800ea0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2200      	movs	r2, #0
 800d836:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	701a      	strb	r2, [r3, #0]
      break;
 800d83e:	e164      	b.n	800db0a <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d840:	2101      	movs	r1, #1
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 fb04 	bl	800de50 <USBH_SetAddress>
 800d848:	4603      	mov	r3, r0
 800d84a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d84c:	7bbb      	ldrb	r3, [r7, #14]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d132      	bne.n	800d8b8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d852:	2002      	movs	r0, #2
 800d854:	f004 fb39 	bl	8011eca <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2203      	movs	r2, #3
 800d864:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	7919      	ldrb	r1, [r3, #4]
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d87a:	b292      	uxth	r2, r2
 800d87c:	9202      	str	r2, [sp, #8]
 800d87e:	2200      	movs	r2, #0
 800d880:	9201      	str	r2, [sp, #4]
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	4603      	mov	r3, r0
 800d886:	2280      	movs	r2, #128	; 0x80
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f001 f86f 	bl	800e96c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	7959      	ldrb	r1, [r3, #5]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d8a2:	b292      	uxth	r2, r2
 800d8a4:	9202      	str	r2, [sp, #8]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	9201      	str	r2, [sp, #4]
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f001 f85b 	bl	800e96c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d8b6:	e12a      	b.n	800db0e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8b8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ba:	2b03      	cmp	r3, #3
 800d8bc:	f040 8127 	bne.w	800db0e <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	220d      	movs	r2, #13
 800d8c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	705a      	strb	r2, [r3, #1]
      break;
 800d8cc:	e11f      	b.n	800db0e <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d8ce:	2109      	movs	r1, #9
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 fa39 	bl	800dd48 <USBH_Get_CfgDesc>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d8da:	7bbb      	ldrb	r3, [r7, #14]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d103      	bne.n	800d8e8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2204      	movs	r2, #4
 800d8e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d8e6:	e114      	b.n	800db12 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8e8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	f040 8111 	bne.w	800db12 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	b2da      	uxtb	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d906:	2b03      	cmp	r3, #3
 800d908:	d903      	bls.n	800d912 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	220d      	movs	r2, #13
 800d90e:	701a      	strb	r2, [r3, #0]
      break;
 800d910:	e0ff      	b.n	800db12 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	795b      	ldrb	r3, [r3, #5]
 800d916:	4619      	mov	r1, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f001 f877 	bl	800ea0c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	791b      	ldrb	r3, [r3, #4]
 800d922:	4619      	mov	r1, r3
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f001 f871 	bl	800ea0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2200      	movs	r2, #0
 800d92e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	701a      	strb	r2, [r3, #0]
      break;
 800d936:	e0ec      	b.n	800db12 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d93e:	4619      	mov	r1, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fa01 	bl	800dd48 <USBH_Get_CfgDesc>
 800d946:	4603      	mov	r3, r0
 800d948:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d94a:	7bbb      	ldrb	r3, [r7, #14]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d103      	bne.n	800d958 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2205      	movs	r2, #5
 800d954:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d956:	e0de      	b.n	800db16 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d958:	7bbb      	ldrb	r3, [r7, #14]
 800d95a:	2b03      	cmp	r3, #3
 800d95c:	f040 80db 	bne.w	800db16 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d966:	3301      	adds	r3, #1
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d976:	2b03      	cmp	r3, #3
 800d978:	d903      	bls.n	800d982 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	220d      	movs	r2, #13
 800d97e:	701a      	strb	r2, [r3, #0]
      break;
 800d980:	e0c9      	b.n	800db16 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	795b      	ldrb	r3, [r3, #5]
 800d986:	4619      	mov	r1, r3
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f001 f83f 	bl	800ea0c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	791b      	ldrb	r3, [r3, #4]
 800d992:	4619      	mov	r1, r3
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f001 f839 	bl	800ea0c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	701a      	strb	r2, [r3, #0]
      break;
 800d9a6:	e0b6      	b.n	800db16 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d036      	beq.n	800da20 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d9be:	23ff      	movs	r3, #255	; 0xff
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f9e5 	bl	800dd90 <USBH_Get_StringDesc>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d9ca:	7bbb      	ldrb	r3, [r7, #14]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d111      	bne.n	800d9f4 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2206      	movs	r2, #6
 800d9d4:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2205      	movs	r2, #5
 800d9da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f001 fa1b 	bl	800ee28 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d9f2:	e092      	b.n	800db1a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9f4:	7bbb      	ldrb	r3, [r7, #14]
 800d9f6:	2b03      	cmp	r3, #3
 800d9f8:	f040 808f 	bne.w	800db1a <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2206      	movs	r2, #6
 800da00:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2205      	movs	r2, #5
 800da06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da16:	2300      	movs	r3, #0
 800da18:	2200      	movs	r2, #0
 800da1a:	f001 fa05 	bl	800ee28 <osMessageQueuePut>
      break;
 800da1e:	e07c      	b.n	800db1a <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2206      	movs	r2, #6
 800da24:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2205      	movs	r2, #5
 800da2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da3a:	2300      	movs	r3, #0
 800da3c:	2200      	movs	r2, #0
 800da3e:	f001 f9f3 	bl	800ee28 <osMessageQueuePut>
      break;
 800da42:	e06a      	b.n	800db1a <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d027      	beq.n	800da9e <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800da5a:	23ff      	movs	r3, #255	; 0xff
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f997 	bl	800dd90 <USBH_Get_StringDesc>
 800da62:	4603      	mov	r3, r0
 800da64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800da66:	7bbb      	ldrb	r3, [r7, #14]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d103      	bne.n	800da74 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2207      	movs	r2, #7
 800da70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800da72:	e054      	b.n	800db1e <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da74:	7bbb      	ldrb	r3, [r7, #14]
 800da76:	2b03      	cmp	r3, #3
 800da78:	d151      	bne.n	800db1e <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2207      	movs	r2, #7
 800da7e:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2205      	movs	r2, #5
 800da84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da94:	2300      	movs	r3, #0
 800da96:	2200      	movs	r2, #0
 800da98:	f001 f9c6 	bl	800ee28 <osMessageQueuePut>
      break;
 800da9c:	e03f      	b.n	800db1e <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2207      	movs	r2, #7
 800daa2:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2205      	movs	r2, #5
 800daa8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dab8:	2300      	movs	r3, #0
 800daba:	2200      	movs	r2, #0
 800dabc:	f001 f9b4 	bl	800ee28 <osMessageQueuePut>
      break;
 800dac0:	e02d      	b.n	800db1e <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d017      	beq.n	800dafc <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dad8:	23ff      	movs	r3, #255	; 0xff
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f958 	bl	800dd90 <USBH_Get_StringDesc>
 800dae0:	4603      	mov	r3, r0
 800dae2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dae4:	7bbb      	ldrb	r3, [r7, #14]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d102      	bne.n	800daf0 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800daea:	2300      	movs	r3, #0
 800daec:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800daee:	e018      	b.n	800db22 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800daf0:	7bbb      	ldrb	r3, [r7, #14]
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d115      	bne.n	800db22 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]
      break;
 800dafa:	e012      	b.n	800db22 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	73fb      	strb	r3, [r7, #15]
      break;
 800db00:	e00f      	b.n	800db22 <USBH_HandleEnum+0x44a>

    default:
      break;
 800db02:	bf00      	nop
 800db04:	e00e      	b.n	800db24 <USBH_HandleEnum+0x44c>
      break;
 800db06:	bf00      	nop
 800db08:	e00c      	b.n	800db24 <USBH_HandleEnum+0x44c>
      break;
 800db0a:	bf00      	nop
 800db0c:	e00a      	b.n	800db24 <USBH_HandleEnum+0x44c>
      break;
 800db0e:	bf00      	nop
 800db10:	e008      	b.n	800db24 <USBH_HandleEnum+0x44c>
      break;
 800db12:	bf00      	nop
 800db14:	e006      	b.n	800db24 <USBH_HandleEnum+0x44c>
      break;
 800db16:	bf00      	nop
 800db18:	e004      	b.n	800db24 <USBH_HandleEnum+0x44c>
      break;
 800db1a:	bf00      	nop
 800db1c:	e002      	b.n	800db24 <USBH_HandleEnum+0x44c>
      break;
 800db1e:	bf00      	nop
 800db20:	e000      	b.n	800db24 <USBH_HandleEnum+0x44c>
      break;
 800db22:	bf00      	nop
  }
  return Status;
 800db24:	7bfb      	ldrb	r3, [r7, #15]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop

0800db30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	683a      	ldr	r2, [r7, #0]
 800db3e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800db42:	bf00      	nop
 800db44:	370c      	adds	r7, #12
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr

0800db4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b082      	sub	sp, #8
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f804 	bl	800db72 <USBH_HandleSof>
}
 800db6a:	bf00      	nop
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800db72:	b580      	push	{r7, lr}
 800db74:	b082      	sub	sp, #8
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	2b0b      	cmp	r3, #11
 800db82:	d10a      	bne.n	800db9a <USBH_HandleSof+0x28>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d005      	beq.n	800db9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db94:	699b      	ldr	r3, [r3, #24]
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	4798      	blx	r3
  }
}
 800db9a:	bf00      	nop
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b082      	sub	sp, #8
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2201      	movs	r2, #1
 800dbae:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f001 f92d 	bl	800ee28 <osMessageQueuePut>
#endif
#endif

  return;
 800dbce:	bf00      	nop
}
 800dbd0:	3708      	adds	r7, #8
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}

0800dbd6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dbd6:	b480      	push	{r7}
 800dbd8:	b083      	sub	sp, #12
 800dbda:	af00      	add	r7, sp, #0
 800dbdc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800dbe6:	bf00      	nop
}
 800dbe8:	370c      	adds	r7, #12
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b082      	sub	sp, #8
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2200      	movs	r2, #0
 800dc06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2201      	movs	r2, #1
 800dc16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc26:	2300      	movs	r3, #0
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f001 f8fd 	bl	800ee28 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2201      	movs	r2, #1
 800dc44:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f003 ffec 	bl	8011c36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	791b      	ldrb	r3, [r3, #4]
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f000 fed1 	bl	800ea0c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	795b      	ldrb	r3, [r3, #5]
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fecb 	bl	800ea0c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f001 f8cb 	bl	800ee28 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3708      	adds	r7, #8
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}

0800dc9c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800dcb0:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f001 f92b 	bl	800ef10 <osMessageQueueGet>
 800dcba:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1f0      	bne.n	800dca4 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f7ff faa6 	bl	800d214 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800dcc8:	e7ec      	b.n	800dca4 <USBH_Process_OS+0x8>

0800dcca <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b082      	sub	sp, #8
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dce6:	2300      	movs	r3, #0
 800dce8:	2200      	movs	r2, #0
 800dcea:	f001 f89d 	bl	800ee28 <osMessageQueuePut>
#endif

  return USBH_OK;
 800dcee:	2300      	movs	r3, #0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b086      	sub	sp, #24
 800dcfc:	af02      	add	r7, sp, #8
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	460b      	mov	r3, r1
 800dd02:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800dd0a:	78fb      	ldrb	r3, [r7, #3]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	4613      	mov	r3, r2
 800dd12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd16:	2100      	movs	r1, #0
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f864 	bl	800dde6 <USBH_GetDescriptor>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	73fb      	strb	r3, [r7, #15]
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10a      	bne.n	800dd3e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dd34:	78fa      	ldrb	r2, [r7, #3]
 800dd36:	b292      	uxth	r2, r2
 800dd38:	4619      	mov	r1, r3
 800dd3a:	f000 f918 	bl	800df6e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800dd3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af02      	add	r7, sp, #8
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	460b      	mov	r3, r1
 800dd52:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	331c      	adds	r3, #28
 800dd58:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800dd5a:	887b      	ldrh	r3, [r7, #2]
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd64:	2100      	movs	r1, #0
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f83d 	bl	800dde6 <USBH_GetDescriptor>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	72fb      	strb	r3, [r7, #11]
 800dd70:	7afb      	ldrb	r3, [r7, #11]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d107      	bne.n	800dd86 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dd7c:	887a      	ldrh	r2, [r7, #2]
 800dd7e:	68f9      	ldr	r1, [r7, #12]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f000 f964 	bl	800e04e <USBH_ParseCfgDesc>
  }

  return status;
 800dd86:	7afb      	ldrb	r3, [r7, #11]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b088      	sub	sp, #32
 800dd94:	af02      	add	r7, sp, #8
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	607a      	str	r2, [r7, #4]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	72fb      	strb	r3, [r7, #11]
 800dda0:	4613      	mov	r3, r2
 800dda2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800dda4:	7afb      	ldrb	r3, [r7, #11]
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ddac:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ddb4:	893b      	ldrh	r3, [r7, #8]
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	2100      	movs	r1, #0
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f000 f812 	bl	800dde6 <USBH_GetDescriptor>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	75fb      	strb	r3, [r7, #23]
 800ddc6:	7dfb      	ldrb	r3, [r7, #23]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d107      	bne.n	800dddc <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ddd2:	893a      	ldrh	r2, [r7, #8]
 800ddd4:	6879      	ldr	r1, [r7, #4]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f000 fa37 	bl	800e24a <USBH_ParseStringDesc>
  }

  return status;
 800dddc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3718      	adds	r7, #24
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}

0800dde6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b084      	sub	sp, #16
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	60f8      	str	r0, [r7, #12]
 800ddee:	607b      	str	r3, [r7, #4]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	72fb      	strb	r3, [r7, #11]
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	789b      	ldrb	r3, [r3, #2]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d11c      	bne.n	800de3a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800de00:	7afb      	ldrb	r3, [r7, #11]
 800de02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de06:	b2da      	uxtb	r2, r3
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2206      	movs	r2, #6
 800de10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	893a      	ldrh	r2, [r7, #8]
 800de16:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800de18:	893b      	ldrh	r3, [r7, #8]
 800de1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de22:	d104      	bne.n	800de2e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f240 4209 	movw	r2, #1033	; 0x409
 800de2a:	829a      	strh	r2, [r3, #20]
 800de2c:	e002      	b.n	800de34 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	2200      	movs	r2, #0
 800de32:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	8b3a      	ldrh	r2, [r7, #24]
 800de38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800de3a:	8b3b      	ldrh	r3, [r7, #24]
 800de3c:	461a      	mov	r2, r3
 800de3e:	6879      	ldr	r1, [r7, #4]
 800de40:	68f8      	ldr	r0, [r7, #12]
 800de42:	f000 fa50 	bl	800e2e6 <USBH_CtlReq>
 800de46:	4603      	mov	r3, r0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3710      	adds	r7, #16
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}

0800de50 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	789b      	ldrb	r3, [r3, #2]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d10f      	bne.n	800de84 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2205      	movs	r2, #5
 800de6e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800de70:	78fb      	ldrb	r3, [r7, #3]
 800de72:	b29a      	uxth	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2200      	movs	r2, #0
 800de7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800de84:	2200      	movs	r2, #0
 800de86:	2100      	movs	r1, #0
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 fa2c 	bl	800e2e6 <USBH_CtlReq>
 800de8e:	4603      	mov	r3, r0
}
 800de90:	4618      	mov	r0, r3
 800de92:	3708      	adds	r7, #8
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	460b      	mov	r3, r1
 800dea2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	789b      	ldrb	r3, [r3, #2]
 800dea8:	2b01      	cmp	r3, #1
 800deaa:	d10e      	bne.n	800deca <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2209      	movs	r2, #9
 800deb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	887a      	ldrh	r2, [r7, #2]
 800debc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2200      	movs	r2, #0
 800dec2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800deca:	2200      	movs	r2, #0
 800decc:	2100      	movs	r1, #0
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fa09 	bl	800e2e6 <USBH_CtlReq>
 800ded4:	4603      	mov	r3, r0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3708      	adds	r7, #8
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b082      	sub	sp, #8
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	460b      	mov	r3, r1
 800dee8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	789b      	ldrb	r3, [r3, #2]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d10f      	bne.n	800df12 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2203      	movs	r2, #3
 800defc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800defe:	78fb      	ldrb	r3, [r7, #3]
 800df00:	b29a      	uxth	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2200      	movs	r2, #0
 800df10:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800df12:	2200      	movs	r2, #0
 800df14:	2100      	movs	r1, #0
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 f9e5 	bl	800e2e6 <USBH_CtlReq>
 800df1c:	4603      	mov	r3, r0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3708      	adds	r7, #8
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}

0800df26 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800df26:	b580      	push	{r7, lr}
 800df28:	b082      	sub	sp, #8
 800df2a:	af00      	add	r7, sp, #0
 800df2c:	6078      	str	r0, [r7, #4]
 800df2e:	460b      	mov	r3, r1
 800df30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	789b      	ldrb	r3, [r3, #2]
 800df36:	2b01      	cmp	r3, #1
 800df38:	d10f      	bne.n	800df5a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2202      	movs	r2, #2
 800df3e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800df4c:	78fb      	ldrb	r3, [r7, #3]
 800df4e:	b29a      	uxth	r2, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800df5a:	2200      	movs	r2, #0
 800df5c:	2100      	movs	r1, #0
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f000 f9c1 	bl	800e2e6 <USBH_CtlReq>
 800df64:	4603      	mov	r3, r0
}
 800df66:	4618      	mov	r0, r3
 800df68:	3708      	adds	r7, #8
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}

0800df6e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800df6e:	b480      	push	{r7}
 800df70:	b085      	sub	sp, #20
 800df72:	af00      	add	r7, sp, #0
 800df74:	60f8      	str	r0, [r7, #12]
 800df76:	60b9      	str	r1, [r7, #8]
 800df78:	4613      	mov	r3, r2
 800df7a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	781a      	ldrb	r2, [r3, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	785a      	ldrb	r2, [r3, #1]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	3302      	adds	r3, #2
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	b29a      	uxth	r2, r3
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	3303      	adds	r3, #3
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	021b      	lsls	r3, r3, #8
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	791a      	ldrb	r2, [r3, #4]
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	795a      	ldrb	r2, [r3, #5]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	799a      	ldrb	r2, [r3, #6]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dfc0:	68bb      	ldr	r3, [r7, #8]
 800dfc2:	79da      	ldrb	r2, [r3, #7]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800dfc8:	88fb      	ldrh	r3, [r7, #6]
 800dfca:	2b08      	cmp	r3, #8
 800dfcc:	d939      	bls.n	800e042 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	3309      	adds	r3, #9
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	021b      	lsls	r3, r3, #8
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	330a      	adds	r3, #10
 800dfee:	781b      	ldrb	r3, [r3, #0]
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	330b      	adds	r3, #11
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	021b      	lsls	r3, r3, #8
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	4313      	orrs	r3, r2
 800e000:	b29a      	uxth	r2, r3
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	330c      	adds	r3, #12
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	330d      	adds	r3, #13
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	b29b      	uxth	r3, r3
 800e016:	021b      	lsls	r3, r3, #8
 800e018:	b29b      	uxth	r3, r3
 800e01a:	4313      	orrs	r3, r2
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	7b9a      	ldrb	r2, [r3, #14]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	7bda      	ldrb	r2, [r3, #15]
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	7c1a      	ldrb	r2, [r3, #16]
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	7c5a      	ldrb	r2, [r3, #17]
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	745a      	strb	r2, [r3, #17]
  }
}
 800e042:	bf00      	nop
 800e044:	3714      	adds	r7, #20
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr

0800e04e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800e04e:	b580      	push	{r7, lr}
 800e050:	b08a      	sub	sp, #40	; 0x28
 800e052:	af00      	add	r7, sp, #0
 800e054:	60f8      	str	r0, [r7, #12]
 800e056:	60b9      	str	r1, [r7, #8]
 800e058:	4613      	mov	r3, r2
 800e05a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e060:	2300      	movs	r3, #0
 800e062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e066:	2300      	movs	r3, #0
 800e068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	781a      	ldrb	r2, [r3, #0]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	785a      	ldrb	r2, [r3, #1]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	3302      	adds	r3, #2
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	b29a      	uxth	r2, r3
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	3303      	adds	r3, #3
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	b29b      	uxth	r3, r3
 800e090:	021b      	lsls	r3, r3, #8
 800e092:	b29b      	uxth	r3, r3
 800e094:	4313      	orrs	r3, r2
 800e096:	b29a      	uxth	r2, r3
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	791a      	ldrb	r2, [r3, #4]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	795a      	ldrb	r2, [r3, #5]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	799a      	ldrb	r2, [r3, #6]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	79da      	ldrb	r2, [r3, #7]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	7a1a      	ldrb	r2, [r3, #8]
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e0c4:	88fb      	ldrh	r3, [r7, #6]
 800e0c6:	2b09      	cmp	r3, #9
 800e0c8:	d95f      	bls.n	800e18a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e0ca:	2309      	movs	r3, #9
 800e0cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e0d2:	e051      	b.n	800e178 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e0d4:	f107 0316 	add.w	r3, r7, #22
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0dc:	f000 f8e8 	bl	800e2b0 <USBH_GetNextDesc>
 800e0e0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	785b      	ldrb	r3, [r3, #1]
 800e0e6:	2b04      	cmp	r3, #4
 800e0e8:	d146      	bne.n	800e178 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e0ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0ee:	221a      	movs	r2, #26
 800e0f0:	fb02 f303 	mul.w	r3, r2, r3
 800e0f4:	3308      	adds	r3, #8
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	4413      	add	r3, r2
 800e0fa:	3302      	adds	r3, #2
 800e0fc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e0fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e100:	69f8      	ldr	r0, [r7, #28]
 800e102:	f000 f846 	bl	800e192 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e106:	2300      	movs	r3, #0
 800e108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e110:	e022      	b.n	800e158 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e112:	f107 0316 	add.w	r3, r7, #22
 800e116:	4619      	mov	r1, r3
 800e118:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e11a:	f000 f8c9 	bl	800e2b0 <USBH_GetNextDesc>
 800e11e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	785b      	ldrb	r3, [r3, #1]
 800e124:	2b05      	cmp	r3, #5
 800e126:	d117      	bne.n	800e158 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e128:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e12c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e130:	3201      	adds	r2, #1
 800e132:	00d2      	lsls	r2, r2, #3
 800e134:	211a      	movs	r1, #26
 800e136:	fb01 f303 	mul.w	r3, r1, r3
 800e13a:	4413      	add	r3, r2
 800e13c:	3308      	adds	r3, #8
 800e13e:	68fa      	ldr	r2, [r7, #12]
 800e140:	4413      	add	r3, r2
 800e142:	3304      	adds	r3, #4
 800e144:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800e146:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e148:	69b8      	ldr	r0, [r7, #24]
 800e14a:	f000 f851 	bl	800e1f0 <USBH_ParseEPDesc>
            ep_ix++;
 800e14e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e152:	3301      	adds	r3, #1
 800e154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	791b      	ldrb	r3, [r3, #4]
 800e15c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e160:	429a      	cmp	r2, r3
 800e162:	d204      	bcs.n	800e16e <USBH_ParseCfgDesc+0x120>
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	885a      	ldrh	r2, [r3, #2]
 800e168:	8afb      	ldrh	r3, [r7, #22]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d8d1      	bhi.n	800e112 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e16e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e172:	3301      	adds	r3, #1
 800e174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d804      	bhi.n	800e18a <USBH_ParseCfgDesc+0x13c>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	885a      	ldrh	r2, [r3, #2]
 800e184:	8afb      	ldrh	r3, [r7, #22]
 800e186:	429a      	cmp	r2, r3
 800e188:	d8a4      	bhi.n	800e0d4 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e18a:	bf00      	nop
 800e18c:	3728      	adds	r7, #40	; 0x28
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}

0800e192 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e192:	b480      	push	{r7}
 800e194:	b083      	sub	sp, #12
 800e196:	af00      	add	r7, sp, #0
 800e198:	6078      	str	r0, [r7, #4]
 800e19a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	781a      	ldrb	r2, [r3, #0]
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	785a      	ldrb	r2, [r3, #1]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	789a      	ldrb	r2, [r3, #2]
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	78da      	ldrb	r2, [r3, #3]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	791a      	ldrb	r2, [r3, #4]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	795a      	ldrb	r2, [r3, #5]
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	799a      	ldrb	r2, [r3, #6]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	79da      	ldrb	r2, [r3, #7]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	7a1a      	ldrb	r2, [r3, #8]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	721a      	strb	r2, [r3, #8]
}
 800e1e4:	bf00      	nop
 800e1e6:	370c      	adds	r7, #12
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ee:	4770      	bx	lr

0800e1f0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b083      	sub	sp, #12
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781a      	ldrb	r2, [r3, #0]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	785a      	ldrb	r2, [r3, #1]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	789a      	ldrb	r2, [r3, #2]
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	78da      	ldrb	r2, [r3, #3]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	3304      	adds	r3, #4
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	b29a      	uxth	r2, r3
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	3305      	adds	r3, #5
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	b29b      	uxth	r3, r3
 800e22a:	021b      	lsls	r3, r3, #8
 800e22c:	b29b      	uxth	r3, r3
 800e22e:	4313      	orrs	r3, r2
 800e230:	b29a      	uxth	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	799a      	ldrb	r2, [r3, #6]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	719a      	strb	r2, [r3, #6]
}
 800e23e:	bf00      	nop
 800e240:	370c      	adds	r7, #12
 800e242:	46bd      	mov	sp, r7
 800e244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e248:	4770      	bx	lr

0800e24a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e24a:	b480      	push	{r7}
 800e24c:	b087      	sub	sp, #28
 800e24e:	af00      	add	r7, sp, #0
 800e250:	60f8      	str	r0, [r7, #12]
 800e252:	60b9      	str	r1, [r7, #8]
 800e254:	4613      	mov	r3, r2
 800e256:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	3301      	adds	r3, #1
 800e25c:	781b      	ldrb	r3, [r3, #0]
 800e25e:	2b03      	cmp	r3, #3
 800e260:	d120      	bne.n	800e2a4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	1e9a      	subs	r2, r3, #2
 800e268:	88fb      	ldrh	r3, [r7, #6]
 800e26a:	4293      	cmp	r3, r2
 800e26c:	bf28      	it	cs
 800e26e:	4613      	movcs	r3, r2
 800e270:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	3302      	adds	r3, #2
 800e276:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e278:	2300      	movs	r3, #0
 800e27a:	82fb      	strh	r3, [r7, #22]
 800e27c:	e00b      	b.n	800e296 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e27e:	8afb      	ldrh	r3, [r7, #22]
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	4413      	add	r3, r2
 800e284:	781a      	ldrb	r2, [r3, #0]
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	3301      	adds	r3, #1
 800e28e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e290:	8afb      	ldrh	r3, [r7, #22]
 800e292:	3302      	adds	r3, #2
 800e294:	82fb      	strh	r3, [r7, #22]
 800e296:	8afa      	ldrh	r2, [r7, #22]
 800e298:	8abb      	ldrh	r3, [r7, #20]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d3ef      	bcc.n	800e27e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
  }
}
 800e2a4:	bf00      	nop
 800e2a6:	371c      	adds	r7, #28
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	881a      	ldrh	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	4413      	add	r3, r2
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b086      	sub	sp, #24
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	60f8      	str	r0, [r7, #12]
 800e2ee:	60b9      	str	r1, [r7, #8]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	789b      	ldrb	r3, [r3, #2]
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d002      	beq.n	800e306 <USBH_CtlReq+0x20>
 800e300:	2b02      	cmp	r3, #2
 800e302:	d01d      	beq.n	800e340 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e304:	e043      	b.n	800e38e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	68ba      	ldr	r2, [r7, #8]
 800e30a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	88fa      	ldrh	r2, [r7, #6]
 800e310:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2201      	movs	r2, #1
 800e316:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2202      	movs	r2, #2
 800e31c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e31e:	2301      	movs	r3, #1
 800e320:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2203      	movs	r2, #3
 800e326:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e336:	2300      	movs	r3, #0
 800e338:	2200      	movs	r2, #0
 800e33a:	f000 fd75 	bl	800ee28 <osMessageQueuePut>
      break;
 800e33e:	e026      	b.n	800e38e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 f829 	bl	800e398 <USBH_HandleControl>
 800e346:	4603      	mov	r3, r0
 800e348:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d002      	beq.n	800e356 <USBH_CtlReq+0x70>
 800e350:	7dfb      	ldrb	r3, [r7, #23]
 800e352:	2b03      	cmp	r3, #3
 800e354:	d106      	bne.n	800e364 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2201      	movs	r2, #1
 800e35a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2200      	movs	r2, #0
 800e360:	761a      	strb	r2, [r3, #24]
 800e362:	e005      	b.n	800e370 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e364:	7dfb      	ldrb	r3, [r7, #23]
 800e366:	2b02      	cmp	r3, #2
 800e368:	d102      	bne.n	800e370 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	2201      	movs	r2, #1
 800e36e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2203      	movs	r2, #3
 800e374:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e384:	2300      	movs	r3, #0
 800e386:	2200      	movs	r2, #0
 800e388:	f000 fd4e 	bl	800ee28 <osMessageQueuePut>
      break;
 800e38c:	bf00      	nop
  }
  return status;
 800e38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3718      	adds	r7, #24
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b086      	sub	sp, #24
 800e39c:	af02      	add	r7, sp, #8
 800e39e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	7e1b      	ldrb	r3, [r3, #24]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	2b0a      	cmp	r3, #10
 800e3b0:	f200 822b 	bhi.w	800e80a <USBH_HandleControl+0x472>
 800e3b4:	a201      	add	r2, pc, #4	; (adr r2, 800e3bc <USBH_HandleControl+0x24>)
 800e3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ba:	bf00      	nop
 800e3bc:	0800e3e9 	.word	0x0800e3e9
 800e3c0:	0800e403 	.word	0x0800e403
 800e3c4:	0800e4a5 	.word	0x0800e4a5
 800e3c8:	0800e4cb 	.word	0x0800e4cb
 800e3cc:	0800e557 	.word	0x0800e557
 800e3d0:	0800e583 	.word	0x0800e583
 800e3d4:	0800e645 	.word	0x0800e645
 800e3d8:	0800e667 	.word	0x0800e667
 800e3dc:	0800e6f9 	.word	0x0800e6f9
 800e3e0:	0800e721 	.word	0x0800e721
 800e3e4:	0800e7b3 	.word	0x0800e7b3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f103 0110 	add.w	r1, r3, #16
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	795b      	ldrb	r3, [r3, #5]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 fa19 	bl	800e82c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2202      	movs	r2, #2
 800e3fe:	761a      	strb	r2, [r3, #24]
      break;
 800e400:	e20e      	b.n	800e820 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	795b      	ldrb	r3, [r3, #5]
 800e406:	4619      	mov	r1, r3
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f003 fd01 	bl	8011e10 <USBH_LL_GetURBState>
 800e40e:	4603      	mov	r3, r0
 800e410:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e412:	7bbb      	ldrb	r3, [r7, #14]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d12c      	bne.n	800e472 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	7c1b      	ldrb	r3, [r3, #16]
 800e41c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e420:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	8adb      	ldrh	r3, [r3, #22]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d00a      	beq.n	800e440 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e42a:	7b7b      	ldrb	r3, [r7, #13]
 800e42c:	2b80      	cmp	r3, #128	; 0x80
 800e42e:	d103      	bne.n	800e438 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2203      	movs	r2, #3
 800e434:	761a      	strb	r2, [r3, #24]
 800e436:	e00d      	b.n	800e454 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2205      	movs	r2, #5
 800e43c:	761a      	strb	r2, [r3, #24]
 800e43e:	e009      	b.n	800e454 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e440:	7b7b      	ldrb	r3, [r7, #13]
 800e442:	2b80      	cmp	r3, #128	; 0x80
 800e444:	d103      	bne.n	800e44e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2209      	movs	r2, #9
 800e44a:	761a      	strb	r2, [r3, #24]
 800e44c:	e002      	b.n	800e454 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2207      	movs	r2, #7
 800e452:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2203      	movs	r2, #3
 800e458:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e468:	2300      	movs	r3, #0
 800e46a:	2200      	movs	r2, #0
 800e46c:	f000 fcdc 	bl	800ee28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e470:	e1cd      	b.n	800e80e <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e472:	7bbb      	ldrb	r3, [r7, #14]
 800e474:	2b04      	cmp	r3, #4
 800e476:	d003      	beq.n	800e480 <USBH_HandleControl+0xe8>
 800e478:	7bbb      	ldrb	r3, [r7, #14]
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	f040 81c7 	bne.w	800e80e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	220b      	movs	r2, #11
 800e484:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2203      	movs	r2, #3
 800e48a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e49a:	2300      	movs	r3, #0
 800e49c:	2200      	movs	r2, #0
 800e49e:	f000 fcc3 	bl	800ee28 <osMessageQueuePut>
      break;
 800e4a2:	e1b4      	b.n	800e80e <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e4aa:	b29a      	uxth	r2, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6899      	ldr	r1, [r3, #8]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	899a      	ldrh	r2, [r3, #12]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	791b      	ldrb	r3, [r3, #4]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 f9f4 	bl	800e8aa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2204      	movs	r2, #4
 800e4c6:	761a      	strb	r2, [r3, #24]
      break;
 800e4c8:	e1aa      	b.n	800e820 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	791b      	ldrb	r3, [r3, #4]
 800e4ce:	4619      	mov	r1, r3
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f003 fc9d 	bl	8011e10 <USBH_LL_GetURBState>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e4da:	7bbb      	ldrb	r3, [r7, #14]
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d110      	bne.n	800e502 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2209      	movs	r2, #9
 800e4e4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2203      	movs	r2, #3
 800e4ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f000 fc93 	bl	800ee28 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e502:	7bbb      	ldrb	r3, [r7, #14]
 800e504:	2b05      	cmp	r3, #5
 800e506:	d110      	bne.n	800e52a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e508:	2303      	movs	r3, #3
 800e50a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2203      	movs	r2, #3
 800e510:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e520:	2300      	movs	r3, #0
 800e522:	2200      	movs	r2, #0
 800e524:	f000 fc80 	bl	800ee28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e528:	e173      	b.n	800e812 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e52a:	7bbb      	ldrb	r3, [r7, #14]
 800e52c:	2b04      	cmp	r3, #4
 800e52e:	f040 8170 	bne.w	800e812 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	220b      	movs	r2, #11
 800e536:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2203      	movs	r2, #3
 800e53c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e54c:	2300      	movs	r3, #0
 800e54e:	2200      	movs	r2, #0
 800e550:	f000 fc6a 	bl	800ee28 <osMessageQueuePut>
      break;
 800e554:	e15d      	b.n	800e812 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	6899      	ldr	r1, [r3, #8]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	899a      	ldrh	r2, [r3, #12]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	7958      	ldrb	r0, [r3, #5]
 800e562:	2301      	movs	r3, #1
 800e564:	9300      	str	r3, [sp, #0]
 800e566:	4603      	mov	r3, r0
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f000 f979 	bl	800e860 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e574:	b29a      	uxth	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2206      	movs	r2, #6
 800e57e:	761a      	strb	r2, [r3, #24]
      break;
 800e580:	e14e      	b.n	800e820 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	795b      	ldrb	r3, [r3, #5]
 800e586:	4619      	mov	r1, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f003 fc41 	bl	8011e10 <USBH_LL_GetURBState>
 800e58e:	4603      	mov	r3, r0
 800e590:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e592:	7bbb      	ldrb	r3, [r7, #14]
 800e594:	2b01      	cmp	r3, #1
 800e596:	d111      	bne.n	800e5bc <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2207      	movs	r2, #7
 800e59c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2203      	movs	r2, #3
 800e5a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f000 fc37 	bl	800ee28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e5ba:	e12c      	b.n	800e816 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800e5bc:	7bbb      	ldrb	r3, [r7, #14]
 800e5be:	2b05      	cmp	r3, #5
 800e5c0:	d113      	bne.n	800e5ea <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	220c      	movs	r2, #12
 800e5c6:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e5c8:	2303      	movs	r3, #3
 800e5ca:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2203      	movs	r2, #3
 800e5d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f000 fc20 	bl	800ee28 <osMessageQueuePut>
      break;
 800e5e8:	e115      	b.n	800e816 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e5ea:	7bbb      	ldrb	r3, [r7, #14]
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	d111      	bne.n	800e614 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2205      	movs	r2, #5
 800e5f4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2203      	movs	r2, #3
 800e5fa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e60a:	2300      	movs	r3, #0
 800e60c:	2200      	movs	r2, #0
 800e60e:	f000 fc0b 	bl	800ee28 <osMessageQueuePut>
      break;
 800e612:	e100      	b.n	800e816 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800e614:	7bbb      	ldrb	r3, [r7, #14]
 800e616:	2b04      	cmp	r3, #4
 800e618:	f040 80fd 	bne.w	800e816 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	220b      	movs	r2, #11
 800e620:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e622:	2302      	movs	r3, #2
 800e624:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2203      	movs	r2, #3
 800e62a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e63a:	2300      	movs	r3, #0
 800e63c:	2200      	movs	r2, #0
 800e63e:	f000 fbf3 	bl	800ee28 <osMessageQueuePut>
      break;
 800e642:	e0e8      	b.n	800e816 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	791b      	ldrb	r3, [r3, #4]
 800e648:	2200      	movs	r2, #0
 800e64a:	2100      	movs	r1, #0
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f92c 	bl	800e8aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e658:	b29a      	uxth	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2208      	movs	r2, #8
 800e662:	761a      	strb	r2, [r3, #24]

      break;
 800e664:	e0dc      	b.n	800e820 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	791b      	ldrb	r3, [r3, #4]
 800e66a:	4619      	mov	r1, r3
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f003 fbcf 	bl	8011e10 <USBH_LL_GetURBState>
 800e672:	4603      	mov	r3, r0
 800e674:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e676:	7bbb      	ldrb	r3, [r7, #14]
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d113      	bne.n	800e6a4 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	220d      	movs	r2, #13
 800e680:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e682:	2300      	movs	r3, #0
 800e684:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2203      	movs	r2, #3
 800e68a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e69a:	2300      	movs	r3, #0
 800e69c:	2200      	movs	r2, #0
 800e69e:	f000 fbc3 	bl	800ee28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e6a2:	e0ba      	b.n	800e81a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800e6a4:	7bbb      	ldrb	r3, [r7, #14]
 800e6a6:	2b04      	cmp	r3, #4
 800e6a8:	d111      	bne.n	800e6ce <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	220b      	movs	r2, #11
 800e6ae:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2203      	movs	r2, #3
 800e6b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f000 fbae 	bl	800ee28 <osMessageQueuePut>
      break;
 800e6cc:	e0a5      	b.n	800e81a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800e6ce:	7bbb      	ldrb	r3, [r7, #14]
 800e6d0:	2b05      	cmp	r3, #5
 800e6d2:	f040 80a2 	bne.w	800e81a <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	2203      	movs	r2, #3
 800e6de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f000 fb99 	bl	800ee28 <osMessageQueuePut>
      break;
 800e6f6:	e090      	b.n	800e81a <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	795a      	ldrb	r2, [r3, #5]
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	9300      	str	r3, [sp, #0]
 800e700:	4613      	mov	r3, r2
 800e702:	2200      	movs	r2, #0
 800e704:	2100      	movs	r1, #0
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 f8aa 	bl	800e860 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e712:	b29a      	uxth	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	220a      	movs	r2, #10
 800e71c:	761a      	strb	r2, [r3, #24]
      break;
 800e71e:	e07f      	b.n	800e820 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	795b      	ldrb	r3, [r3, #5]
 800e724:	4619      	mov	r1, r3
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f003 fb72 	bl	8011e10 <USBH_LL_GetURBState>
 800e72c:	4603      	mov	r3, r0
 800e72e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e730:	7bbb      	ldrb	r3, [r7, #14]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d113      	bne.n	800e75e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800e736:	2300      	movs	r3, #0
 800e738:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	220d      	movs	r2, #13
 800e73e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2203      	movs	r2, #3
 800e744:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e754:	2300      	movs	r3, #0
 800e756:	2200      	movs	r2, #0
 800e758:	f000 fb66 	bl	800ee28 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e75c:	e05f      	b.n	800e81e <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e75e:	7bbb      	ldrb	r3, [r7, #14]
 800e760:	2b02      	cmp	r3, #2
 800e762:	d111      	bne.n	800e788 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2209      	movs	r2, #9
 800e768:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2203      	movs	r2, #3
 800e76e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e77e:	2300      	movs	r3, #0
 800e780:	2200      	movs	r2, #0
 800e782:	f000 fb51 	bl	800ee28 <osMessageQueuePut>
      break;
 800e786:	e04a      	b.n	800e81e <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800e788:	7bbb      	ldrb	r3, [r7, #14]
 800e78a:	2b04      	cmp	r3, #4
 800e78c:	d147      	bne.n	800e81e <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	220b      	movs	r2, #11
 800e792:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2203      	movs	r2, #3
 800e798:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f000 fb3c 	bl	800ee28 <osMessageQueuePut>
      break;
 800e7b0:	e035      	b.n	800e81e <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7e5b      	ldrb	r3, [r3, #25]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	b2da      	uxtb	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	765a      	strb	r2, [r3, #25]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	7e5b      	ldrb	r3, [r3, #25]
 800e7c2:	2b02      	cmp	r3, #2
 800e7c4:	d806      	bhi.n	800e7d4 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e7d2:	e025      	b.n	800e820 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7da:	2106      	movs	r1, #6
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	795b      	ldrb	r3, [r3, #5]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f000 f90d 	bl	800ea0c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	791b      	ldrb	r3, [r3, #4]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 f907 	bl	800ea0c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2200      	movs	r2, #0
 800e802:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e804:	2302      	movs	r3, #2
 800e806:	73fb      	strb	r3, [r7, #15]
      break;
 800e808:	e00a      	b.n	800e820 <USBH_HandleControl+0x488>

    default:
      break;
 800e80a:	bf00      	nop
 800e80c:	e008      	b.n	800e820 <USBH_HandleControl+0x488>
      break;
 800e80e:	bf00      	nop
 800e810:	e006      	b.n	800e820 <USBH_HandleControl+0x488>
      break;
 800e812:	bf00      	nop
 800e814:	e004      	b.n	800e820 <USBH_HandleControl+0x488>
      break;
 800e816:	bf00      	nop
 800e818:	e002      	b.n	800e820 <USBH_HandleControl+0x488>
      break;
 800e81a:	bf00      	nop
 800e81c:	e000      	b.n	800e820 <USBH_HandleControl+0x488>
      break;
 800e81e:	bf00      	nop
  }

  return status;
 800e820:	7bfb      	ldrb	r3, [r7, #15]
}
 800e822:	4618      	mov	r0, r3
 800e824:	3710      	adds	r7, #16
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop

0800e82c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af04      	add	r7, sp, #16
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	4613      	mov	r3, r2
 800e838:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e83a:	79f9      	ldrb	r1, [r7, #7]
 800e83c:	2300      	movs	r3, #0
 800e83e:	9303      	str	r3, [sp, #12]
 800e840:	2308      	movs	r3, #8
 800e842:	9302      	str	r3, [sp, #8]
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	9301      	str	r3, [sp, #4]
 800e848:	2300      	movs	r3, #0
 800e84a:	9300      	str	r3, [sp, #0]
 800e84c:	2300      	movs	r3, #0
 800e84e:	2200      	movs	r2, #0
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f003 faac 	bl	8011dae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e856:	2300      	movs	r3, #0
}
 800e858:	4618      	mov	r0, r3
 800e85a:	3710      	adds	r7, #16
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b088      	sub	sp, #32
 800e864:	af04      	add	r7, sp, #16
 800e866:	60f8      	str	r0, [r7, #12]
 800e868:	60b9      	str	r1, [r7, #8]
 800e86a:	4611      	mov	r1, r2
 800e86c:	461a      	mov	r2, r3
 800e86e:	460b      	mov	r3, r1
 800e870:	80fb      	strh	r3, [r7, #6]
 800e872:	4613      	mov	r3, r2
 800e874:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e880:	2300      	movs	r3, #0
 800e882:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e884:	7979      	ldrb	r1, [r7, #5]
 800e886:	7e3b      	ldrb	r3, [r7, #24]
 800e888:	9303      	str	r3, [sp, #12]
 800e88a:	88fb      	ldrh	r3, [r7, #6]
 800e88c:	9302      	str	r3, [sp, #8]
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	9301      	str	r3, [sp, #4]
 800e892:	2301      	movs	r3, #1
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	2300      	movs	r3, #0
 800e898:	2200      	movs	r2, #0
 800e89a:	68f8      	ldr	r0, [r7, #12]
 800e89c:	f003 fa87 	bl	8011dae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b088      	sub	sp, #32
 800e8ae:	af04      	add	r7, sp, #16
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	60b9      	str	r1, [r7, #8]
 800e8b4:	4611      	mov	r1, r2
 800e8b6:	461a      	mov	r2, r3
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	80fb      	strh	r3, [r7, #6]
 800e8bc:	4613      	mov	r3, r2
 800e8be:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e8c0:	7979      	ldrb	r1, [r7, #5]
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	9303      	str	r3, [sp, #12]
 800e8c6:	88fb      	ldrh	r3, [r7, #6]
 800e8c8:	9302      	str	r3, [sp, #8]
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	9301      	str	r3, [sp, #4]
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	9300      	str	r3, [sp, #0]
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f003 fa69 	bl	8011dae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e8dc:	2300      	movs	r3, #0

}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b088      	sub	sp, #32
 800e8ea:	af04      	add	r7, sp, #16
 800e8ec:	60f8      	str	r0, [r7, #12]
 800e8ee:	60b9      	str	r1, [r7, #8]
 800e8f0:	4611      	mov	r1, r2
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	80fb      	strh	r3, [r7, #6]
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e902:	2b00      	cmp	r3, #0
 800e904:	d001      	beq.n	800e90a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e906:	2300      	movs	r3, #0
 800e908:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e90a:	7979      	ldrb	r1, [r7, #5]
 800e90c:	7e3b      	ldrb	r3, [r7, #24]
 800e90e:	9303      	str	r3, [sp, #12]
 800e910:	88fb      	ldrh	r3, [r7, #6]
 800e912:	9302      	str	r3, [sp, #8]
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	9301      	str	r3, [sp, #4]
 800e918:	2301      	movs	r3, #1
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	2302      	movs	r3, #2
 800e91e:	2200      	movs	r2, #0
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f003 fa44 	bl	8011dae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e926:	2300      	movs	r3, #0
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3710      	adds	r7, #16
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b088      	sub	sp, #32
 800e934:	af04      	add	r7, sp, #16
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	4611      	mov	r1, r2
 800e93c:	461a      	mov	r2, r3
 800e93e:	460b      	mov	r3, r1
 800e940:	80fb      	strh	r3, [r7, #6]
 800e942:	4613      	mov	r3, r2
 800e944:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e946:	7979      	ldrb	r1, [r7, #5]
 800e948:	2300      	movs	r3, #0
 800e94a:	9303      	str	r3, [sp, #12]
 800e94c:	88fb      	ldrh	r3, [r7, #6]
 800e94e:	9302      	str	r3, [sp, #8]
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	9301      	str	r3, [sp, #4]
 800e954:	2301      	movs	r3, #1
 800e956:	9300      	str	r3, [sp, #0]
 800e958:	2302      	movs	r3, #2
 800e95a:	2201      	movs	r2, #1
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f003 fa26 	bl	8011dae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e962:	2300      	movs	r3, #0
}
 800e964:	4618      	mov	r0, r3
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af04      	add	r7, sp, #16
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	4608      	mov	r0, r1
 800e976:	4611      	mov	r1, r2
 800e978:	461a      	mov	r2, r3
 800e97a:	4603      	mov	r3, r0
 800e97c:	70fb      	strb	r3, [r7, #3]
 800e97e:	460b      	mov	r3, r1
 800e980:	70bb      	strb	r3, [r7, #2]
 800e982:	4613      	mov	r3, r2
 800e984:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e986:	7878      	ldrb	r0, [r7, #1]
 800e988:	78ba      	ldrb	r2, [r7, #2]
 800e98a:	78f9      	ldrb	r1, [r7, #3]
 800e98c:	8b3b      	ldrh	r3, [r7, #24]
 800e98e:	9302      	str	r3, [sp, #8]
 800e990:	7d3b      	ldrb	r3, [r7, #20]
 800e992:	9301      	str	r3, [sp, #4]
 800e994:	7c3b      	ldrb	r3, [r7, #16]
 800e996:	9300      	str	r3, [sp, #0]
 800e998:	4603      	mov	r3, r0
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f003 f9b9 	bl	8011d12 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3708      	adds	r7, #8
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b082      	sub	sp, #8
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e9b6:	78fb      	ldrb	r3, [r7, #3]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f003 f9d8 	bl	8011d70 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e9c0:	2300      	movs	r3, #0
}
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	3708      	adds	r7, #8
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}

0800e9ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e9ca:	b580      	push	{r7, lr}
 800e9cc:	b084      	sub	sp, #16
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f836 	bl	800ea48 <USBH_GetFreePipe>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e9e0:	89fb      	ldrh	r3, [r7, #14]
 800e9e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d00a      	beq.n	800ea00 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e9ea:	78fa      	ldrb	r2, [r7, #3]
 800e9ec:	89fb      	ldrh	r3, [r7, #14]
 800e9ee:	f003 030f 	and.w	r3, r3, #15
 800e9f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	33e0      	adds	r3, #224	; 0xe0
 800e9fa:	009b      	lsls	r3, r3, #2
 800e9fc:	440b      	add	r3, r1
 800e9fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ea00:	89fb      	ldrh	r3, [r7, #14]
 800ea02:	b2db      	uxtb	r3, r3
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3710      	adds	r7, #16
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	460b      	mov	r3, r1
 800ea16:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ea18:	78fb      	ldrb	r3, [r7, #3]
 800ea1a:	2b0a      	cmp	r3, #10
 800ea1c:	d80d      	bhi.n	800ea3a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ea1e:	78fb      	ldrb	r3, [r7, #3]
 800ea20:	687a      	ldr	r2, [r7, #4]
 800ea22:	33e0      	adds	r3, #224	; 0xe0
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	4413      	add	r3, r2
 800ea28:	685a      	ldr	r2, [r3, #4]
 800ea2a:	78fb      	ldrb	r3, [r7, #3]
 800ea2c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ea30:	6879      	ldr	r1, [r7, #4]
 800ea32:	33e0      	adds	r3, #224	; 0xe0
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	440b      	add	r3, r1
 800ea38:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ea3a:	2300      	movs	r3, #0
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ea48:	b480      	push	{r7}
 800ea4a:	b085      	sub	sp, #20
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ea50:	2300      	movs	r3, #0
 800ea52:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ea54:	2300      	movs	r3, #0
 800ea56:	73fb      	strb	r3, [r7, #15]
 800ea58:	e00f      	b.n	800ea7a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ea5a:	7bfb      	ldrb	r3, [r7, #15]
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	33e0      	adds	r3, #224	; 0xe0
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	4413      	add	r3, r2
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d102      	bne.n	800ea74 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ea6e:	7bfb      	ldrb	r3, [r7, #15]
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	e007      	b.n	800ea84 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ea74:	7bfb      	ldrb	r3, [r7, #15]
 800ea76:	3301      	adds	r3, #1
 800ea78:	73fb      	strb	r3, [r7, #15]
 800ea7a:	7bfb      	ldrb	r3, [r7, #15]
 800ea7c:	2b0a      	cmp	r3, #10
 800ea7e:	d9ec      	bls.n	800ea5a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ea80:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	3714      	adds	r7, #20
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr

0800ea90 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ea90:	b480      	push	{r7}
 800ea92:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ea94:	bf00      	nop
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
	...

0800eaa0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaa6:	f3ef 8305 	mrs	r3, IPSR
 800eaaa:	60bb      	str	r3, [r7, #8]
  return(result);
 800eaac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10f      	bne.n	800ead2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eab2:	f3ef 8310 	mrs	r3, PRIMASK
 800eab6:	607b      	str	r3, [r7, #4]
  return(result);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d105      	bne.n	800eaca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eabe:	f3ef 8311 	mrs	r3, BASEPRI
 800eac2:	603b      	str	r3, [r7, #0]
  return(result);
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d007      	beq.n	800eada <osKernelInitialize+0x3a>
 800eaca:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <osKernelInitialize+0x64>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	2b02      	cmp	r3, #2
 800ead0:	d103      	bne.n	800eada <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ead2:	f06f 0305 	mvn.w	r3, #5
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	e00c      	b.n	800eaf4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800eada:	4b0a      	ldr	r3, [pc, #40]	; (800eb04 <osKernelInitialize+0x64>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d105      	bne.n	800eaee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800eae2:	4b08      	ldr	r3, [pc, #32]	; (800eb04 <osKernelInitialize+0x64>)
 800eae4:	2201      	movs	r2, #1
 800eae6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800eae8:	2300      	movs	r3, #0
 800eaea:	60fb      	str	r3, [r7, #12]
 800eaec:	e002      	b.n	800eaf4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800eaee:	f04f 33ff 	mov.w	r3, #4294967295
 800eaf2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3714      	adds	r7, #20
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	2000015c 	.word	0x2000015c

0800eb08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb0e:	f3ef 8305 	mrs	r3, IPSR
 800eb12:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d10f      	bne.n	800eb3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb1a:	f3ef 8310 	mrs	r3, PRIMASK
 800eb1e:	607b      	str	r3, [r7, #4]
  return(result);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d105      	bne.n	800eb32 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb26:	f3ef 8311 	mrs	r3, BASEPRI
 800eb2a:	603b      	str	r3, [r7, #0]
  return(result);
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d007      	beq.n	800eb42 <osKernelStart+0x3a>
 800eb32:	4b0f      	ldr	r3, [pc, #60]	; (800eb70 <osKernelStart+0x68>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2b02      	cmp	r3, #2
 800eb38:	d103      	bne.n	800eb42 <osKernelStart+0x3a>
    stat = osErrorISR;
 800eb3a:	f06f 0305 	mvn.w	r3, #5
 800eb3e:	60fb      	str	r3, [r7, #12]
 800eb40:	e010      	b.n	800eb64 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800eb42:	4b0b      	ldr	r3, [pc, #44]	; (800eb70 <osKernelStart+0x68>)
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d109      	bne.n	800eb5e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800eb4a:	f7ff ffa1 	bl	800ea90 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800eb4e:	4b08      	ldr	r3, [pc, #32]	; (800eb70 <osKernelStart+0x68>)
 800eb50:	2202      	movs	r2, #2
 800eb52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800eb54:	f001 fa9a 	bl	801008c <vTaskStartScheduler>
      stat = osOK;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	60fb      	str	r3, [r7, #12]
 800eb5c:	e002      	b.n	800eb64 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800eb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb62:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800eb64:	68fb      	ldr	r3, [r7, #12]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	2000015c 	.word	0x2000015c

0800eb74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b090      	sub	sp, #64	; 0x40
 800eb78:	af04      	add	r7, sp, #16
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eb80:	2300      	movs	r3, #0
 800eb82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb84:	f3ef 8305 	mrs	r3, IPSR
 800eb88:	61fb      	str	r3, [r7, #28]
  return(result);
 800eb8a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f040 808f 	bne.w	800ecb0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb92:	f3ef 8310 	mrs	r3, PRIMASK
 800eb96:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d105      	bne.n	800ebaa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eb9e:	f3ef 8311 	mrs	r3, BASEPRI
 800eba2:	617b      	str	r3, [r7, #20]
  return(result);
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <osThreadNew+0x3e>
 800ebaa:	4b44      	ldr	r3, [pc, #272]	; (800ecbc <osThreadNew+0x148>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b02      	cmp	r3, #2
 800ebb0:	d07e      	beq.n	800ecb0 <osThreadNew+0x13c>
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d07b      	beq.n	800ecb0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800ebb8:	2380      	movs	r3, #128	; 0x80
 800ebba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ebbc:	2318      	movs	r3, #24
 800ebbe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800ebc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d045      	beq.n	800ec5c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d002      	beq.n	800ebde <osThreadNew+0x6a>
        name = attr->name;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	699b      	ldr	r3, [r3, #24]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d002      	beq.n	800ebec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	699b      	ldr	r3, [r3, #24]
 800ebea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ebec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d008      	beq.n	800ec04 <osThreadNew+0x90>
 800ebf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebf4:	2b38      	cmp	r3, #56	; 0x38
 800ebf6:	d805      	bhi.n	800ec04 <osThreadNew+0x90>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	f003 0301 	and.w	r3, r3, #1
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <osThreadNew+0x94>
        return (NULL);
 800ec04:	2300      	movs	r3, #0
 800ec06:	e054      	b.n	800ecb2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	695b      	ldr	r3, [r3, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d003      	beq.n	800ec18 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	695b      	ldr	r3, [r3, #20]
 800ec14:	089b      	lsrs	r3, r3, #2
 800ec16:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00e      	beq.n	800ec3e <osThreadNew+0xca>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	2b5b      	cmp	r3, #91	; 0x5b
 800ec26:	d90a      	bls.n	800ec3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d006      	beq.n	800ec3e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	695b      	ldr	r3, [r3, #20]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d002      	beq.n	800ec3e <osThreadNew+0xca>
        mem = 1;
 800ec38:	2301      	movs	r3, #1
 800ec3a:	623b      	str	r3, [r7, #32]
 800ec3c:	e010      	b.n	800ec60 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10c      	bne.n	800ec60 <osThreadNew+0xec>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d108      	bne.n	800ec60 <osThreadNew+0xec>
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d104      	bne.n	800ec60 <osThreadNew+0xec>
          mem = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	623b      	str	r3, [r7, #32]
 800ec5a:	e001      	b.n	800ec60 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ec60:	6a3b      	ldr	r3, [r7, #32]
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d110      	bne.n	800ec88 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ec6e:	9202      	str	r2, [sp, #8]
 800ec70:	9301      	str	r3, [sp, #4]
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f001 f833 	bl	800fce8 <xTaskCreateStatic>
 800ec82:	4603      	mov	r3, r0
 800ec84:	613b      	str	r3, [r7, #16]
 800ec86:	e013      	b.n	800ecb0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ec88:	6a3b      	ldr	r3, [r7, #32]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d110      	bne.n	800ecb0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ec8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec90:	b29a      	uxth	r2, r3
 800ec92:	f107 0310 	add.w	r3, r7, #16
 800ec96:	9301      	str	r3, [sp, #4]
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	9300      	str	r3, [sp, #0]
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f001 f87b 	bl	800fd9c <xTaskCreate>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d001      	beq.n	800ecb0 <osThreadNew+0x13c>
          hTask = NULL;
 800ecac:	2300      	movs	r3, #0
 800ecae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ecb0:	693b      	ldr	r3, [r7, #16]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3730      	adds	r7, #48	; 0x30
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	2000015c 	.word	0x2000015c

0800ecc0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecc8:	f3ef 8305 	mrs	r3, IPSR
 800eccc:	613b      	str	r3, [r7, #16]
  return(result);
 800ecce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10f      	bne.n	800ecf4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecd4:	f3ef 8310 	mrs	r3, PRIMASK
 800ecd8:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d105      	bne.n	800ecec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ece0:	f3ef 8311 	mrs	r3, BASEPRI
 800ece4:	60bb      	str	r3, [r7, #8]
  return(result);
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d007      	beq.n	800ecfc <osDelay+0x3c>
 800ecec:	4b0a      	ldr	r3, [pc, #40]	; (800ed18 <osDelay+0x58>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b02      	cmp	r3, #2
 800ecf2:	d103      	bne.n	800ecfc <osDelay+0x3c>
    stat = osErrorISR;
 800ecf4:	f06f 0305 	mvn.w	r3, #5
 800ecf8:	617b      	str	r3, [r7, #20]
 800ecfa:	e007      	b.n	800ed0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d002      	beq.n	800ed0c <osDelay+0x4c>
      vTaskDelay(ticks);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f001 f98c 	bl	8010024 <vTaskDelay>
    }
  }

  return (stat);
 800ed0c:	697b      	ldr	r3, [r7, #20]
}
 800ed0e:	4618      	mov	r0, r3
 800ed10:	3718      	adds	r7, #24
 800ed12:	46bd      	mov	sp, r7
 800ed14:	bd80      	pop	{r7, pc}
 800ed16:	bf00      	nop
 800ed18:	2000015c 	.word	0x2000015c

0800ed1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b08c      	sub	sp, #48	; 0x30
 800ed20:	af02      	add	r7, sp, #8
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed2c:	f3ef 8305 	mrs	r3, IPSR
 800ed30:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d170      	bne.n	800ee1a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed38:	f3ef 8310 	mrs	r3, PRIMASK
 800ed3c:	617b      	str	r3, [r7, #20]
  return(result);
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d105      	bne.n	800ed50 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed44:	f3ef 8311 	mrs	r3, BASEPRI
 800ed48:	613b      	str	r3, [r7, #16]
  return(result);
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d003      	beq.n	800ed58 <osMessageQueueNew+0x3c>
 800ed50:	4b34      	ldr	r3, [pc, #208]	; (800ee24 <osMessageQueueNew+0x108>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b02      	cmp	r3, #2
 800ed56:	d060      	beq.n	800ee1a <osMessageQueueNew+0xfe>
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d05d      	beq.n	800ee1a <osMessageQueueNew+0xfe>
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d05a      	beq.n	800ee1a <osMessageQueueNew+0xfe>
    mem = -1;
 800ed64:	f04f 33ff 	mov.w	r3, #4294967295
 800ed68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d029      	beq.n	800edc4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d012      	beq.n	800ed9e <osMessageQueueNew+0x82>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	2b4f      	cmp	r3, #79	; 0x4f
 800ed7e:	d90e      	bls.n	800ed9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00a      	beq.n	800ed9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	695a      	ldr	r2, [r3, #20]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	68b9      	ldr	r1, [r7, #8]
 800ed90:	fb01 f303 	mul.w	r3, r1, r3
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d302      	bcc.n	800ed9e <osMessageQueueNew+0x82>
        mem = 1;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	623b      	str	r3, [r7, #32]
 800ed9c:	e014      	b.n	800edc8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	689b      	ldr	r3, [r3, #8]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d110      	bne.n	800edc8 <osMessageQueueNew+0xac>
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d10c      	bne.n	800edc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d108      	bne.n	800edc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	695b      	ldr	r3, [r3, #20]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d104      	bne.n	800edc8 <osMessageQueueNew+0xac>
          mem = 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	623b      	str	r3, [r7, #32]
 800edc2:	e001      	b.n	800edc8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	2b01      	cmp	r3, #1
 800edcc:	d10c      	bne.n	800ede8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	691a      	ldr	r2, [r3, #16]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6899      	ldr	r1, [r3, #8]
 800edd6:	2300      	movs	r3, #0
 800edd8:	9300      	str	r3, [sp, #0]
 800edda:	460b      	mov	r3, r1
 800eddc:	68b9      	ldr	r1, [r7, #8]
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f000 fa58 	bl	800f294 <xQueueGenericCreateStatic>
 800ede4:	6278      	str	r0, [r7, #36]	; 0x24
 800ede6:	e008      	b.n	800edfa <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800ede8:	6a3b      	ldr	r3, [r7, #32]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d105      	bne.n	800edfa <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800edee:	2200      	movs	r2, #0
 800edf0:	68b9      	ldr	r1, [r7, #8]
 800edf2:	68f8      	ldr	r0, [r7, #12]
 800edf4:	f000 fac1 	bl	800f37a <xQueueGenericCreate>
 800edf8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800edfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00c      	beq.n	800ee1a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d003      	beq.n	800ee0e <osMessageQueueNew+0xf2>
        name = attr->name;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	61fb      	str	r3, [r7, #28]
 800ee0c:	e001      	b.n	800ee12 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ee12:	69f9      	ldr	r1, [r7, #28]
 800ee14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee16:	f000 ff0b 	bl	800fc30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	3728      	adds	r7, #40	; 0x28
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	2000015c 	.word	0x2000015c

0800ee28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08a      	sub	sp, #40	; 0x28
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	603b      	str	r3, [r7, #0]
 800ee34:	4613      	mov	r3, r2
 800ee36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee40:	f3ef 8305 	mrs	r3, IPSR
 800ee44:	61fb      	str	r3, [r7, #28]
  return(result);
 800ee46:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10f      	bne.n	800ee6c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee4c:	f3ef 8310 	mrs	r3, PRIMASK
 800ee50:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee52:	69bb      	ldr	r3, [r7, #24]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d105      	bne.n	800ee64 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ee58:	f3ef 8311 	mrs	r3, BASEPRI
 800ee5c:	617b      	str	r3, [r7, #20]
  return(result);
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d02c      	beq.n	800eebe <osMessageQueuePut+0x96>
 800ee64:	4b28      	ldr	r3, [pc, #160]	; (800ef08 <osMessageQueuePut+0xe0>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d128      	bne.n	800eebe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee6c:	6a3b      	ldr	r3, [r7, #32]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d005      	beq.n	800ee7e <osMessageQueuePut+0x56>
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d002      	beq.n	800ee7e <osMessageQueuePut+0x56>
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d003      	beq.n	800ee86 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800ee7e:	f06f 0303 	mvn.w	r3, #3
 800ee82:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee84:	e039      	b.n	800eefa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800ee86:	2300      	movs	r3, #0
 800ee88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ee8a:	f107 0210 	add.w	r2, r7, #16
 800ee8e:	2300      	movs	r3, #0
 800ee90:	68b9      	ldr	r1, [r7, #8]
 800ee92:	6a38      	ldr	r0, [r7, #32]
 800ee94:	f000 fbce 	bl	800f634 <xQueueGenericSendFromISR>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d003      	beq.n	800eea6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ee9e:	f06f 0302 	mvn.w	r3, #2
 800eea2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eea4:	e029      	b.n	800eefa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d026      	beq.n	800eefa <osMessageQueuePut+0xd2>
 800eeac:	4b17      	ldr	r3, [pc, #92]	; (800ef0c <osMessageQueuePut+0xe4>)
 800eeae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eeb2:	601a      	str	r2, [r3, #0]
 800eeb4:	f3bf 8f4f 	dsb	sy
 800eeb8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eebc:	e01d      	b.n	800eefa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eebe:	6a3b      	ldr	r3, [r7, #32]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d002      	beq.n	800eeca <osMessageQueuePut+0xa2>
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d103      	bne.n	800eed2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800eeca:	f06f 0303 	mvn.w	r3, #3
 800eece:	627b      	str	r3, [r7, #36]	; 0x24
 800eed0:	e014      	b.n	800eefc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eed2:	2300      	movs	r3, #0
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	68b9      	ldr	r1, [r7, #8]
 800eed8:	6a38      	ldr	r0, [r7, #32]
 800eeda:	f000 fab1 	bl	800f440 <xQueueGenericSend>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d00b      	beq.n	800eefc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d003      	beq.n	800eef2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800eeea:	f06f 0301 	mvn.w	r3, #1
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
 800eef0:	e004      	b.n	800eefc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800eef2:	f06f 0302 	mvn.w	r3, #2
 800eef6:	627b      	str	r3, [r7, #36]	; 0x24
 800eef8:	e000      	b.n	800eefc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eefa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3728      	adds	r7, #40	; 0x28
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	2000015c 	.word	0x2000015c
 800ef0c:	e000ed04 	.word	0xe000ed04

0800ef10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08a      	sub	sp, #40	; 0x28
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60f8      	str	r0, [r7, #12]
 800ef18:	60b9      	str	r1, [r7, #8]
 800ef1a:	607a      	str	r2, [r7, #4]
 800ef1c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ef22:	2300      	movs	r3, #0
 800ef24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef26:	f3ef 8305 	mrs	r3, IPSR
 800ef2a:	61fb      	str	r3, [r7, #28]
  return(result);
 800ef2c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d10f      	bne.n	800ef52 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef32:	f3ef 8310 	mrs	r3, PRIMASK
 800ef36:	61bb      	str	r3, [r7, #24]
  return(result);
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d105      	bne.n	800ef4a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef3e:	f3ef 8311 	mrs	r3, BASEPRI
 800ef42:	617b      	str	r3, [r7, #20]
  return(result);
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d02c      	beq.n	800efa4 <osMessageQueueGet+0x94>
 800ef4a:	4b28      	ldr	r3, [pc, #160]	; (800efec <osMessageQueueGet+0xdc>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2b02      	cmp	r3, #2
 800ef50:	d128      	bne.n	800efa4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef52:	6a3b      	ldr	r3, [r7, #32]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d005      	beq.n	800ef64 <osMessageQueueGet+0x54>
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d002      	beq.n	800ef64 <osMessageQueueGet+0x54>
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d003      	beq.n	800ef6c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ef64:	f06f 0303 	mvn.w	r3, #3
 800ef68:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef6a:	e038      	b.n	800efde <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ef70:	f107 0310 	add.w	r3, r7, #16
 800ef74:	461a      	mov	r2, r3
 800ef76:	68b9      	ldr	r1, [r7, #8]
 800ef78:	6a38      	ldr	r0, [r7, #32]
 800ef7a:	f000 fccb 	bl	800f914 <xQueueReceiveFromISR>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d003      	beq.n	800ef8c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ef84:	f06f 0302 	mvn.w	r3, #2
 800ef88:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef8a:	e028      	b.n	800efde <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d025      	beq.n	800efde <osMessageQueueGet+0xce>
 800ef92:	4b17      	ldr	r3, [pc, #92]	; (800eff0 <osMessageQueueGet+0xe0>)
 800ef94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef98:	601a      	str	r2, [r3, #0]
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efa2:	e01c      	b.n	800efde <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d002      	beq.n	800efb0 <osMessageQueueGet+0xa0>
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d103      	bne.n	800efb8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800efb0:	f06f 0303 	mvn.w	r3, #3
 800efb4:	627b      	str	r3, [r7, #36]	; 0x24
 800efb6:	e013      	b.n	800efe0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800efb8:	683a      	ldr	r2, [r7, #0]
 800efba:	68b9      	ldr	r1, [r7, #8]
 800efbc:	6a38      	ldr	r0, [r7, #32]
 800efbe:	f000 fbcd 	bl	800f75c <xQueueReceive>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d00b      	beq.n	800efe0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d003      	beq.n	800efd6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800efce:	f06f 0301 	mvn.w	r3, #1
 800efd2:	627b      	str	r3, [r7, #36]	; 0x24
 800efd4:	e004      	b.n	800efe0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800efd6:	f06f 0302 	mvn.w	r3, #2
 800efda:	627b      	str	r3, [r7, #36]	; 0x24
 800efdc:	e000      	b.n	800efe0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800efde:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3728      	adds	r7, #40	; 0x28
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	2000015c 	.word	0x2000015c
 800eff0:	e000ed04 	.word	0xe000ed04

0800eff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800eff4:	b480      	push	{r7}
 800eff6:	b085      	sub	sp, #20
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	4a07      	ldr	r2, [pc, #28]	; (800f020 <vApplicationGetIdleTaskMemory+0x2c>)
 800f004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	4a06      	ldr	r2, [pc, #24]	; (800f024 <vApplicationGetIdleTaskMemory+0x30>)
 800f00a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2280      	movs	r2, #128	; 0x80
 800f010:	601a      	str	r2, [r3, #0]
}
 800f012:	bf00      	nop
 800f014:	3714      	adds	r7, #20
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	20000160 	.word	0x20000160
 800f024:	200001bc 	.word	0x200001bc

0800f028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f028:	b480      	push	{r7}
 800f02a:	b085      	sub	sp, #20
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	4a07      	ldr	r2, [pc, #28]	; (800f054 <vApplicationGetTimerTaskMemory+0x2c>)
 800f038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	4a06      	ldr	r2, [pc, #24]	; (800f058 <vApplicationGetTimerTaskMemory+0x30>)
 800f03e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f046:	601a      	str	r2, [r3, #0]
}
 800f048:	bf00      	nop
 800f04a:	3714      	adds	r7, #20
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr
 800f054:	200003bc 	.word	0x200003bc
 800f058:	20000418 	.word	0x20000418

0800f05c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f103 0208 	add.w	r2, r3, #8
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f04f 32ff 	mov.w	r2, #4294967295
 800f074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f103 0208 	add.w	r2, r3, #8
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	f103 0208 	add.w	r2, r3, #8
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f090:	bf00      	nop
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr

0800f09c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f09c:	b480      	push	{r7}
 800f09e:	b083      	sub	sp, #12
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f0aa:	bf00      	nop
 800f0ac:	370c      	adds	r7, #12
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b4:	4770      	bx	lr

0800f0b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0b6:	b480      	push	{r7}
 800f0b8:	b085      	sub	sp, #20
 800f0ba:	af00      	add	r7, sp, #0
 800f0bc:	6078      	str	r0, [r7, #4]
 800f0be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	689a      	ldr	r2, [r3, #8]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	683a      	ldr	r2, [r7, #0]
 800f0da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	1c5a      	adds	r2, r3, #1
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	601a      	str	r2, [r3, #0]
}
 800f0f2:	bf00      	nop
 800f0f4:	3714      	adds	r7, #20
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0fe:	b480      	push	{r7}
 800f100:	b085      	sub	sp, #20
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f114:	d103      	bne.n	800f11e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	60fb      	str	r3, [r7, #12]
 800f11c:	e00c      	b.n	800f138 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	3308      	adds	r3, #8
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	e002      	b.n	800f12c <vListInsert+0x2e>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	685b      	ldr	r3, [r3, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	68ba      	ldr	r2, [r7, #8]
 800f134:	429a      	cmp	r2, r3
 800f136:	d2f6      	bcs.n	800f126 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	685a      	ldr	r2, [r3, #4]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	683a      	ldr	r2, [r7, #0]
 800f152:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	1c5a      	adds	r2, r3, #1
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	601a      	str	r2, [r3, #0]
}
 800f164:	bf00      	nop
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	691b      	ldr	r3, [r3, #16]
 800f17c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	685b      	ldr	r3, [r3, #4]
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	6892      	ldr	r2, [r2, #8]
 800f186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	687a      	ldr	r2, [r7, #4]
 800f18e:	6852      	ldr	r2, [r2, #4]
 800f190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d103      	bne.n	800f1a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	689a      	ldr	r2, [r3, #8]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	1e5a      	subs	r2, r3, #1
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3714      	adds	r7, #20
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d109      	bne.n	800f1ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1dc:	f383 8811 	msr	BASEPRI, r3
 800f1e0:	f3bf 8f6f 	isb	sy
 800f1e4:	f3bf 8f4f 	dsb	sy
 800f1e8:	60bb      	str	r3, [r7, #8]
 800f1ea:	e7fe      	b.n	800f1ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f1ec:	f002 f8ce 	bl	801138c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	681a      	ldr	r2, [r3, #0]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1f8:	68f9      	ldr	r1, [r7, #12]
 800f1fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1fc:	fb01 f303 	mul.w	r3, r1, r3
 800f200:	441a      	add	r2, r3
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2200      	movs	r2, #0
 800f20a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f21c:	3b01      	subs	r3, #1
 800f21e:	68f9      	ldr	r1, [r7, #12]
 800f220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f222:	fb01 f303 	mul.w	r3, r1, r3
 800f226:	441a      	add	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	22ff      	movs	r2, #255	; 0xff
 800f230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	22ff      	movs	r2, #255	; 0xff
 800f238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d114      	bne.n	800f26c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d01a      	beq.n	800f280 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	3310      	adds	r3, #16
 800f24e:	4618      	mov	r0, r3
 800f250:	f001 f99c 	bl	801058c <xTaskRemoveFromEventList>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d012      	beq.n	800f280 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f25a:	4b0d      	ldr	r3, [pc, #52]	; (800f290 <xQueueGenericReset+0xcc>)
 800f25c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f260:	601a      	str	r2, [r3, #0]
 800f262:	f3bf 8f4f 	dsb	sy
 800f266:	f3bf 8f6f 	isb	sy
 800f26a:	e009      	b.n	800f280 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	3310      	adds	r3, #16
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff fef3 	bl	800f05c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	3324      	adds	r3, #36	; 0x24
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7ff feee 	bl	800f05c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f280:	f002 f8b2 	bl	80113e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f284:	2301      	movs	r3, #1
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	e000ed04 	.word	0xe000ed04

0800f294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f294:	b580      	push	{r7, lr}
 800f296:	b08e      	sub	sp, #56	; 0x38
 800f298:	af02      	add	r7, sp, #8
 800f29a:	60f8      	str	r0, [r7, #12]
 800f29c:	60b9      	str	r1, [r7, #8]
 800f29e:	607a      	str	r2, [r7, #4]
 800f2a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d109      	bne.n	800f2bc <xQueueGenericCreateStatic+0x28>
 800f2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ac:	f383 8811 	msr	BASEPRI, r3
 800f2b0:	f3bf 8f6f 	isb	sy
 800f2b4:	f3bf 8f4f 	dsb	sy
 800f2b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2ba:	e7fe      	b.n	800f2ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d109      	bne.n	800f2d6 <xQueueGenericCreateStatic+0x42>
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800f2d4:	e7fe      	b.n	800f2d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d002      	beq.n	800f2e2 <xQueueGenericCreateStatic+0x4e>
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d001      	beq.n	800f2e6 <xQueueGenericCreateStatic+0x52>
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e000      	b.n	800f2e8 <xQueueGenericCreateStatic+0x54>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d109      	bne.n	800f300 <xQueueGenericCreateStatic+0x6c>
 800f2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f0:	f383 8811 	msr	BASEPRI, r3
 800f2f4:	f3bf 8f6f 	isb	sy
 800f2f8:	f3bf 8f4f 	dsb	sy
 800f2fc:	623b      	str	r3, [r7, #32]
 800f2fe:	e7fe      	b.n	800f2fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d102      	bne.n	800f30c <xQueueGenericCreateStatic+0x78>
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <xQueueGenericCreateStatic+0x7c>
 800f30c:	2301      	movs	r3, #1
 800f30e:	e000      	b.n	800f312 <xQueueGenericCreateStatic+0x7e>
 800f310:	2300      	movs	r3, #0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d109      	bne.n	800f32a <xQueueGenericCreateStatic+0x96>
 800f316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f31a:	f383 8811 	msr	BASEPRI, r3
 800f31e:	f3bf 8f6f 	isb	sy
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	61fb      	str	r3, [r7, #28]
 800f328:	e7fe      	b.n	800f328 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f32a:	2350      	movs	r3, #80	; 0x50
 800f32c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b50      	cmp	r3, #80	; 0x50
 800f332:	d009      	beq.n	800f348 <xQueueGenericCreateStatic+0xb4>
 800f334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f338:	f383 8811 	msr	BASEPRI, r3
 800f33c:	f3bf 8f6f 	isb	sy
 800f340:	f3bf 8f4f 	dsb	sy
 800f344:	61bb      	str	r3, [r7, #24]
 800f346:	e7fe      	b.n	800f346 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f348:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00d      	beq.n	800f370 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	2201      	movs	r2, #1
 800f358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f35c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	9300      	str	r3, [sp, #0]
 800f364:	4613      	mov	r3, r2
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	68b9      	ldr	r1, [r7, #8]
 800f36a:	68f8      	ldr	r0, [r7, #12]
 800f36c:	f000 f844 	bl	800f3f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f372:	4618      	mov	r0, r3
 800f374:	3730      	adds	r7, #48	; 0x30
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f37a:	b580      	push	{r7, lr}
 800f37c:	b08a      	sub	sp, #40	; 0x28
 800f37e:	af02      	add	r7, sp, #8
 800f380:	60f8      	str	r0, [r7, #12]
 800f382:	60b9      	str	r1, [r7, #8]
 800f384:	4613      	mov	r3, r2
 800f386:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d109      	bne.n	800f3a2 <xQueueGenericCreate+0x28>
 800f38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	613b      	str	r3, [r7, #16]
 800f3a0:	e7fe      	b.n	800f3a0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d102      	bne.n	800f3ae <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	61fb      	str	r3, [r7, #28]
 800f3ac:	e004      	b.n	800f3b8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	68ba      	ldr	r2, [r7, #8]
 800f3b2:	fb02 f303 	mul.w	r3, r2, r3
 800f3b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	3350      	adds	r3, #80	; 0x50
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f002 f8ff 	bl	80115c0 <pvPortMalloc>
 800f3c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d011      	beq.n	800f3ee <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f3ca:	69bb      	ldr	r3, [r7, #24]
 800f3cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	3350      	adds	r3, #80	; 0x50
 800f3d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f3dc:	79fa      	ldrb	r2, [r7, #7]
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	697a      	ldr	r2, [r7, #20]
 800f3e6:	68b9      	ldr	r1, [r7, #8]
 800f3e8:	68f8      	ldr	r0, [r7, #12]
 800f3ea:	f000 f805 	bl	800f3f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f3ee:	69bb      	ldr	r3, [r7, #24]
	}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3720      	adds	r7, #32
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	60f8      	str	r0, [r7, #12]
 800f400:	60b9      	str	r1, [r7, #8]
 800f402:	607a      	str	r2, [r7, #4]
 800f404:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d103      	bne.n	800f414 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	69ba      	ldr	r2, [r7, #24]
 800f410:	601a      	str	r2, [r3, #0]
 800f412:	e002      	b.n	800f41a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f41a:	69bb      	ldr	r3, [r7, #24]
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f420:	69bb      	ldr	r3, [r7, #24]
 800f422:	68ba      	ldr	r2, [r7, #8]
 800f424:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f426:	2101      	movs	r1, #1
 800f428:	69b8      	ldr	r0, [r7, #24]
 800f42a:	f7ff fecb 	bl	800f1c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f42e:	69bb      	ldr	r3, [r7, #24]
 800f430:	78fa      	ldrb	r2, [r7, #3]
 800f432:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f436:	bf00      	nop
 800f438:	3710      	adds	r7, #16
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
	...

0800f440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08e      	sub	sp, #56	; 0x38
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
 800f44c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f44e:	2300      	movs	r3, #0
 800f450:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d109      	bne.n	800f470 <xQueueGenericSend+0x30>
 800f45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f460:	f383 8811 	msr	BASEPRI, r3
 800f464:	f3bf 8f6f 	isb	sy
 800f468:	f3bf 8f4f 	dsb	sy
 800f46c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f46e:	e7fe      	b.n	800f46e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d103      	bne.n	800f47e <xQueueGenericSend+0x3e>
 800f476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d101      	bne.n	800f482 <xQueueGenericSend+0x42>
 800f47e:	2301      	movs	r3, #1
 800f480:	e000      	b.n	800f484 <xQueueGenericSend+0x44>
 800f482:	2300      	movs	r3, #0
 800f484:	2b00      	cmp	r3, #0
 800f486:	d109      	bne.n	800f49c <xQueueGenericSend+0x5c>
 800f488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f48c:	f383 8811 	msr	BASEPRI, r3
 800f490:	f3bf 8f6f 	isb	sy
 800f494:	f3bf 8f4f 	dsb	sy
 800f498:	627b      	str	r3, [r7, #36]	; 0x24
 800f49a:	e7fe      	b.n	800f49a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d103      	bne.n	800f4aa <xQueueGenericSend+0x6a>
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d101      	bne.n	800f4ae <xQueueGenericSend+0x6e>
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e000      	b.n	800f4b0 <xQueueGenericSend+0x70>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d109      	bne.n	800f4c8 <xQueueGenericSend+0x88>
 800f4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b8:	f383 8811 	msr	BASEPRI, r3
 800f4bc:	f3bf 8f6f 	isb	sy
 800f4c0:	f3bf 8f4f 	dsb	sy
 800f4c4:	623b      	str	r3, [r7, #32]
 800f4c6:	e7fe      	b.n	800f4c6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f4c8:	f001 fa16 	bl	80108f8 <xTaskGetSchedulerState>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d102      	bne.n	800f4d8 <xQueueGenericSend+0x98>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d101      	bne.n	800f4dc <xQueueGenericSend+0x9c>
 800f4d8:	2301      	movs	r3, #1
 800f4da:	e000      	b.n	800f4de <xQueueGenericSend+0x9e>
 800f4dc:	2300      	movs	r3, #0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d109      	bne.n	800f4f6 <xQueueGenericSend+0xb6>
 800f4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e6:	f383 8811 	msr	BASEPRI, r3
 800f4ea:	f3bf 8f6f 	isb	sy
 800f4ee:	f3bf 8f4f 	dsb	sy
 800f4f2:	61fb      	str	r3, [r7, #28]
 800f4f4:	e7fe      	b.n	800f4f4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f4f6:	f001 ff49 	bl	801138c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f502:	429a      	cmp	r2, r3
 800f504:	d302      	bcc.n	800f50c <xQueueGenericSend+0xcc>
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	2b02      	cmp	r3, #2
 800f50a:	d129      	bne.n	800f560 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f50c:	683a      	ldr	r2, [r7, #0]
 800f50e:	68b9      	ldr	r1, [r7, #8]
 800f510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f512:	f000 fa7c 	bl	800fa0e <prvCopyDataToQueue>
 800f516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d010      	beq.n	800f542 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	3324      	adds	r3, #36	; 0x24
 800f524:	4618      	mov	r0, r3
 800f526:	f001 f831 	bl	801058c <xTaskRemoveFromEventList>
 800f52a:	4603      	mov	r3, r0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d013      	beq.n	800f558 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f530:	4b3f      	ldr	r3, [pc, #252]	; (800f630 <xQueueGenericSend+0x1f0>)
 800f532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f536:	601a      	str	r2, [r3, #0]
 800f538:	f3bf 8f4f 	dsb	sy
 800f53c:	f3bf 8f6f 	isb	sy
 800f540:	e00a      	b.n	800f558 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f544:	2b00      	cmp	r3, #0
 800f546:	d007      	beq.n	800f558 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f548:	4b39      	ldr	r3, [pc, #228]	; (800f630 <xQueueGenericSend+0x1f0>)
 800f54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	f3bf 8f4f 	dsb	sy
 800f554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f558:	f001 ff46 	bl	80113e8 <vPortExitCritical>
				return pdPASS;
 800f55c:	2301      	movs	r3, #1
 800f55e:	e063      	b.n	800f628 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d103      	bne.n	800f56e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f566:	f001 ff3f 	bl	80113e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e05c      	b.n	800f628 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f570:	2b00      	cmp	r3, #0
 800f572:	d106      	bne.n	800f582 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f574:	f107 0314 	add.w	r3, r7, #20
 800f578:	4618      	mov	r0, r3
 800f57a:	f001 f869 	bl	8010650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f57e:	2301      	movs	r3, #1
 800f580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f582:	f001 ff31 	bl	80113e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f586:	f000 fde5 	bl	8010154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f58a:	f001 feff 	bl	801138c <vPortEnterCritical>
 800f58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f594:	b25b      	sxtb	r3, r3
 800f596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59a:	d103      	bne.n	800f5a4 <xQueueGenericSend+0x164>
 800f59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f59e:	2200      	movs	r2, #0
 800f5a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5aa:	b25b      	sxtb	r3, r3
 800f5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b0:	d103      	bne.n	800f5ba <xQueueGenericSend+0x17a>
 800f5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5ba:	f001 ff15 	bl	80113e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5be:	1d3a      	adds	r2, r7, #4
 800f5c0:	f107 0314 	add.w	r3, r7, #20
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f001 f858 	bl	801067c <xTaskCheckForTimeOut>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d124      	bne.n	800f61c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f5d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5d4:	f000 fb13 	bl	800fbfe <prvIsQueueFull>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d018      	beq.n	800f610 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e0:	3310      	adds	r3, #16
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f000 ff82 	bl	80104f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f5ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5ee:	f000 fa9e 	bl	800fb2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f5f2:	f000 fdbd 	bl	8010170 <xTaskResumeAll>
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	f47f af7c 	bne.w	800f4f6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f5fe:	4b0c      	ldr	r3, [pc, #48]	; (800f630 <xQueueGenericSend+0x1f0>)
 800f600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f604:	601a      	str	r2, [r3, #0]
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	e772      	b.n	800f4f6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f612:	f000 fa8c 	bl	800fb2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f616:	f000 fdab 	bl	8010170 <xTaskResumeAll>
 800f61a:	e76c      	b.n	800f4f6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f61c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f61e:	f000 fa86 	bl	800fb2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f622:	f000 fda5 	bl	8010170 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3738      	adds	r7, #56	; 0x38
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	e000ed04 	.word	0xe000ed04

0800f634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b08e      	sub	sp, #56	; 0x38
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	607a      	str	r2, [r7, #4]
 800f640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d109      	bne.n	800f660 <xQueueGenericSendFromISR+0x2c>
 800f64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	627b      	str	r3, [r7, #36]	; 0x24
 800f65e:	e7fe      	b.n	800f65e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d103      	bne.n	800f66e <xQueueGenericSendFromISR+0x3a>
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d101      	bne.n	800f672 <xQueueGenericSendFromISR+0x3e>
 800f66e:	2301      	movs	r3, #1
 800f670:	e000      	b.n	800f674 <xQueueGenericSendFromISR+0x40>
 800f672:	2300      	movs	r3, #0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d109      	bne.n	800f68c <xQueueGenericSendFromISR+0x58>
 800f678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	623b      	str	r3, [r7, #32]
 800f68a:	e7fe      	b.n	800f68a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	2b02      	cmp	r3, #2
 800f690:	d103      	bne.n	800f69a <xQueueGenericSendFromISR+0x66>
 800f692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f696:	2b01      	cmp	r3, #1
 800f698:	d101      	bne.n	800f69e <xQueueGenericSendFromISR+0x6a>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e000      	b.n	800f6a0 <xQueueGenericSendFromISR+0x6c>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d109      	bne.n	800f6b8 <xQueueGenericSendFromISR+0x84>
 800f6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a8:	f383 8811 	msr	BASEPRI, r3
 800f6ac:	f3bf 8f6f 	isb	sy
 800f6b0:	f3bf 8f4f 	dsb	sy
 800f6b4:	61fb      	str	r3, [r7, #28]
 800f6b6:	e7fe      	b.n	800f6b6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f6b8:	f001 ff44 	bl	8011544 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f6bc:	f3ef 8211 	mrs	r2, BASEPRI
 800f6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c4:	f383 8811 	msr	BASEPRI, r3
 800f6c8:	f3bf 8f6f 	isb	sy
 800f6cc:	f3bf 8f4f 	dsb	sy
 800f6d0:	61ba      	str	r2, [r7, #24]
 800f6d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f6d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	d302      	bcc.n	800f6ea <xQueueGenericSendFromISR+0xb6>
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	d12c      	bne.n	800f744 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f6f4:	683a      	ldr	r2, [r7, #0]
 800f6f6:	68b9      	ldr	r1, [r7, #8]
 800f6f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6fa:	f000 f988 	bl	800fa0e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f6fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f706:	d112      	bne.n	800f72e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d016      	beq.n	800f73e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f712:	3324      	adds	r3, #36	; 0x24
 800f714:	4618      	mov	r0, r3
 800f716:	f000 ff39 	bl	801058c <xTaskRemoveFromEventList>
 800f71a:	4603      	mov	r3, r0
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d00e      	beq.n	800f73e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00b      	beq.n	800f73e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2201      	movs	r2, #1
 800f72a:	601a      	str	r2, [r3, #0]
 800f72c:	e007      	b.n	800f73e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f72e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f732:	3301      	adds	r3, #1
 800f734:	b2db      	uxtb	r3, r3
 800f736:	b25a      	sxtb	r2, r3
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f73e:	2301      	movs	r3, #1
 800f740:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f742:	e001      	b.n	800f748 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f744:	2300      	movs	r3, #0
 800f746:	637b      	str	r3, [r7, #52]	; 0x34
 800f748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f754:	4618      	mov	r0, r3
 800f756:	3738      	adds	r7, #56	; 0x38
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b08c      	sub	sp, #48	; 0x30
 800f760:	af00      	add	r7, sp, #0
 800f762:	60f8      	str	r0, [r7, #12]
 800f764:	60b9      	str	r1, [r7, #8]
 800f766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f768:	2300      	movs	r3, #0
 800f76a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f772:	2b00      	cmp	r3, #0
 800f774:	d109      	bne.n	800f78a <xQueueReceive+0x2e>
	__asm volatile
 800f776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	623b      	str	r3, [r7, #32]
 800f788:	e7fe      	b.n	800f788 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d103      	bne.n	800f798 <xQueueReceive+0x3c>
 800f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <xQueueReceive+0x40>
 800f798:	2301      	movs	r3, #1
 800f79a:	e000      	b.n	800f79e <xQueueReceive+0x42>
 800f79c:	2300      	movs	r3, #0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d109      	bne.n	800f7b6 <xQueueReceive+0x5a>
 800f7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a6:	f383 8811 	msr	BASEPRI, r3
 800f7aa:	f3bf 8f6f 	isb	sy
 800f7ae:	f3bf 8f4f 	dsb	sy
 800f7b2:	61fb      	str	r3, [r7, #28]
 800f7b4:	e7fe      	b.n	800f7b4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f7b6:	f001 f89f 	bl	80108f8 <xTaskGetSchedulerState>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d102      	bne.n	800f7c6 <xQueueReceive+0x6a>
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d101      	bne.n	800f7ca <xQueueReceive+0x6e>
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e000      	b.n	800f7cc <xQueueReceive+0x70>
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d109      	bne.n	800f7e4 <xQueueReceive+0x88>
 800f7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d4:	f383 8811 	msr	BASEPRI, r3
 800f7d8:	f3bf 8f6f 	isb	sy
 800f7dc:	f3bf 8f4f 	dsb	sy
 800f7e0:	61bb      	str	r3, [r7, #24]
 800f7e2:	e7fe      	b.n	800f7e2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f7e4:	f001 fdd2 	bl	801138c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d01f      	beq.n	800f834 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f7f4:	68b9      	ldr	r1, [r7, #8]
 800f7f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7f8:	f000 f973 	bl	800fae2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fe:	1e5a      	subs	r2, r3, #1
 800f800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f802:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f806:	691b      	ldr	r3, [r3, #16]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d00f      	beq.n	800f82c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f80e:	3310      	adds	r3, #16
 800f810:	4618      	mov	r0, r3
 800f812:	f000 febb 	bl	801058c <xTaskRemoveFromEventList>
 800f816:	4603      	mov	r3, r0
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d007      	beq.n	800f82c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f81c:	4b3c      	ldr	r3, [pc, #240]	; (800f910 <xQueueReceive+0x1b4>)
 800f81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f822:	601a      	str	r2, [r3, #0]
 800f824:	f3bf 8f4f 	dsb	sy
 800f828:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f82c:	f001 fddc 	bl	80113e8 <vPortExitCritical>
				return pdPASS;
 800f830:	2301      	movs	r3, #1
 800f832:	e069      	b.n	800f908 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d103      	bne.n	800f842 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f83a:	f001 fdd5 	bl	80113e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f83e:	2300      	movs	r3, #0
 800f840:	e062      	b.n	800f908 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f844:	2b00      	cmp	r3, #0
 800f846:	d106      	bne.n	800f856 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f848:	f107 0310 	add.w	r3, r7, #16
 800f84c:	4618      	mov	r0, r3
 800f84e:	f000 feff 	bl	8010650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f852:	2301      	movs	r3, #1
 800f854:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f856:	f001 fdc7 	bl	80113e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f85a:	f000 fc7b 	bl	8010154 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f85e:	f001 fd95 	bl	801138c <vPortEnterCritical>
 800f862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f868:	b25b      	sxtb	r3, r3
 800f86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f86e:	d103      	bne.n	800f878 <xQueueReceive+0x11c>
 800f870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f872:	2200      	movs	r2, #0
 800f874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f87e:	b25b      	sxtb	r3, r3
 800f880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f884:	d103      	bne.n	800f88e <xQueueReceive+0x132>
 800f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f888:	2200      	movs	r2, #0
 800f88a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f88e:	f001 fdab 	bl	80113e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f892:	1d3a      	adds	r2, r7, #4
 800f894:	f107 0310 	add.w	r3, r7, #16
 800f898:	4611      	mov	r1, r2
 800f89a:	4618      	mov	r0, r3
 800f89c:	f000 feee 	bl	801067c <xTaskCheckForTimeOut>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d123      	bne.n	800f8ee <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8a8:	f000 f993 	bl	800fbd2 <prvIsQueueEmpty>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d017      	beq.n	800f8e2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b4:	3324      	adds	r3, #36	; 0x24
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	4611      	mov	r1, r2
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f000 fe18 	bl	80104f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f8c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8c2:	f000 f934 	bl	800fb2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f8c6:	f000 fc53 	bl	8010170 <xTaskResumeAll>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d189      	bne.n	800f7e4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f8d0:	4b0f      	ldr	r3, [pc, #60]	; (800f910 <xQueueReceive+0x1b4>)
 800f8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8d6:	601a      	str	r2, [r3, #0]
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	e780      	b.n	800f7e4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8e4:	f000 f923 	bl	800fb2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f8e8:	f000 fc42 	bl	8010170 <xTaskResumeAll>
 800f8ec:	e77a      	b.n	800f7e4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f8ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8f0:	f000 f91d 	bl	800fb2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f8f4:	f000 fc3c 	bl	8010170 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f8fa:	f000 f96a 	bl	800fbd2 <prvIsQueueEmpty>
 800f8fe:	4603      	mov	r3, r0
 800f900:	2b00      	cmp	r3, #0
 800f902:	f43f af6f 	beq.w	800f7e4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f906:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3730      	adds	r7, #48	; 0x30
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	e000ed04 	.word	0xe000ed04

0800f914 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b08e      	sub	sp, #56	; 0x38
 800f918:	af00      	add	r7, sp, #0
 800f91a:	60f8      	str	r0, [r7, #12]
 800f91c:	60b9      	str	r1, [r7, #8]
 800f91e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f926:	2b00      	cmp	r3, #0
 800f928:	d109      	bne.n	800f93e <xQueueReceiveFromISR+0x2a>
 800f92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f92e:	f383 8811 	msr	BASEPRI, r3
 800f932:	f3bf 8f6f 	isb	sy
 800f936:	f3bf 8f4f 	dsb	sy
 800f93a:	623b      	str	r3, [r7, #32]
 800f93c:	e7fe      	b.n	800f93c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d103      	bne.n	800f94c <xQueueReceiveFromISR+0x38>
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d101      	bne.n	800f950 <xQueueReceiveFromISR+0x3c>
 800f94c:	2301      	movs	r3, #1
 800f94e:	e000      	b.n	800f952 <xQueueReceiveFromISR+0x3e>
 800f950:	2300      	movs	r3, #0
 800f952:	2b00      	cmp	r3, #0
 800f954:	d109      	bne.n	800f96a <xQueueReceiveFromISR+0x56>
 800f956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f95a:	f383 8811 	msr	BASEPRI, r3
 800f95e:	f3bf 8f6f 	isb	sy
 800f962:	f3bf 8f4f 	dsb	sy
 800f966:	61fb      	str	r3, [r7, #28]
 800f968:	e7fe      	b.n	800f968 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f96a:	f001 fdeb 	bl	8011544 <vPortValidateInterruptPriority>
	__asm volatile
 800f96e:	f3ef 8211 	mrs	r2, BASEPRI
 800f972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f976:	f383 8811 	msr	BASEPRI, r3
 800f97a:	f3bf 8f6f 	isb	sy
 800f97e:	f3bf 8f4f 	dsb	sy
 800f982:	61ba      	str	r2, [r7, #24]
 800f984:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f986:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f988:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f98e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f992:	2b00      	cmp	r3, #0
 800f994:	d02f      	beq.n	800f9f6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f99c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f9a0:	68b9      	ldr	r1, [r7, #8]
 800f9a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9a4:	f000 f89d 	bl	800fae2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9aa:	1e5a      	subs	r2, r3, #1
 800f9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f9b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f9b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b8:	d112      	bne.n	800f9e0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9bc:	691b      	ldr	r3, [r3, #16]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d016      	beq.n	800f9f0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c4:	3310      	adds	r3, #16
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 fde0 	bl	801058c <xTaskRemoveFromEventList>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d00e      	beq.n	800f9f0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2201      	movs	r2, #1
 800f9dc:	601a      	str	r2, [r3, #0]
 800f9de:	e007      	b.n	800f9f0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	b2db      	uxtb	r3, r3
 800f9e8:	b25a      	sxtb	r2, r3
 800f9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	637b      	str	r3, [r7, #52]	; 0x34
 800f9f4:	e001      	b.n	800f9fa <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	637b      	str	r3, [r7, #52]	; 0x34
 800f9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fa04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3738      	adds	r7, #56	; 0x38
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b086      	sub	sp, #24
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	60f8      	str	r0, [r7, #12]
 800fa16:	60b9      	str	r1, [r7, #8]
 800fa18:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa22:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d10d      	bne.n	800fa48 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d14d      	bne.n	800fad0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	689b      	ldr	r3, [r3, #8]
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f000 ff7b 	bl	8010934 <xTaskPriorityDisinherit>
 800fa3e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2200      	movs	r2, #0
 800fa44:	609a      	str	r2, [r3, #8]
 800fa46:	e043      	b.n	800fad0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d119      	bne.n	800fa82 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6858      	ldr	r0, [r3, #4]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa56:	461a      	mov	r2, r3
 800fa58:	68b9      	ldr	r1, [r7, #8]
 800fa5a:	f002 fadd 	bl	8012018 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	685a      	ldr	r2, [r3, #4]
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa66:	441a      	add	r2, r3
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	685a      	ldr	r2, [r3, #4]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d32b      	bcc.n	800fad0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	605a      	str	r2, [r3, #4]
 800fa80:	e026      	b.n	800fad0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	68d8      	ldr	r0, [r3, #12]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	68b9      	ldr	r1, [r7, #8]
 800fa8e:	f002 fac3 	bl	8012018 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	68da      	ldr	r2, [r3, #12]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa9a:	425b      	negs	r3, r3
 800fa9c:	441a      	add	r2, r3
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	68da      	ldr	r2, [r3, #12]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d207      	bcs.n	800fabe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	689a      	ldr	r2, [r3, #8]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fab6:	425b      	negs	r3, r3
 800fab8:	441a      	add	r2, r3
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	d105      	bne.n	800fad0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d002      	beq.n	800fad0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	3b01      	subs	r3, #1
 800face:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fad8:	697b      	ldr	r3, [r7, #20]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3718      	adds	r7, #24
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b082      	sub	sp, #8
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	6078      	str	r0, [r7, #4]
 800faea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d018      	beq.n	800fb26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	68da      	ldr	r2, [r3, #12]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fafc:	441a      	add	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	68da      	ldr	r2, [r3, #12]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	689b      	ldr	r3, [r3, #8]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d303      	bcc.n	800fb16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681a      	ldr	r2, [r3, #0]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	68d9      	ldr	r1, [r3, #12]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb1e:	461a      	mov	r2, r3
 800fb20:	6838      	ldr	r0, [r7, #0]
 800fb22:	f002 fa79 	bl	8012018 <memcpy>
	}
}
 800fb26:	bf00      	nop
 800fb28:	3708      	adds	r7, #8
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b084      	sub	sp, #16
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fb36:	f001 fc29 	bl	801138c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb40:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb42:	e011      	b.n	800fb68 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d012      	beq.n	800fb72 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3324      	adds	r3, #36	; 0x24
 800fb50:	4618      	mov	r0, r3
 800fb52:	f000 fd1b 	bl	801058c <xTaskRemoveFromEventList>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fb5c:	f000 fdee 	bl	801073c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fb60:	7bfb      	ldrb	r3, [r7, #15]
 800fb62:	3b01      	subs	r3, #1
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fb68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	dce9      	bgt.n	800fb44 <prvUnlockQueue+0x16>
 800fb70:	e000      	b.n	800fb74 <prvUnlockQueue+0x46>
					break;
 800fb72:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	22ff      	movs	r2, #255	; 0xff
 800fb78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fb7c:	f001 fc34 	bl	80113e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fb80:	f001 fc04 	bl	801138c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fb8a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fb8c:	e011      	b.n	800fbb2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	691b      	ldr	r3, [r3, #16]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d012      	beq.n	800fbbc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	3310      	adds	r3, #16
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f000 fcf6 	bl	801058c <xTaskRemoveFromEventList>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d001      	beq.n	800fbaa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fba6:	f000 fdc9 	bl	801073c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fbaa:	7bbb      	ldrb	r3, [r7, #14]
 800fbac:	3b01      	subs	r3, #1
 800fbae:	b2db      	uxtb	r3, r3
 800fbb0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fbb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	dce9      	bgt.n	800fb8e <prvUnlockQueue+0x60>
 800fbba:	e000      	b.n	800fbbe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fbbc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	22ff      	movs	r2, #255	; 0xff
 800fbc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fbc6:	f001 fc0f 	bl	80113e8 <vPortExitCritical>
}
 800fbca:	bf00      	nop
 800fbcc:	3710      	adds	r7, #16
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b084      	sub	sp, #16
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fbda:	f001 fbd7 	bl	801138c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d102      	bne.n	800fbec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	60fb      	str	r3, [r7, #12]
 800fbea:	e001      	b.n	800fbf0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fbec:	2300      	movs	r3, #0
 800fbee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fbf0:	f001 fbfa 	bl	80113e8 <vPortExitCritical>

	return xReturn;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
}
 800fbf6:	4618      	mov	r0, r3
 800fbf8:	3710      	adds	r7, #16
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	bd80      	pop	{r7, pc}

0800fbfe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fbfe:	b580      	push	{r7, lr}
 800fc00:	b084      	sub	sp, #16
 800fc02:	af00      	add	r7, sp, #0
 800fc04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fc06:	f001 fbc1 	bl	801138c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc12:	429a      	cmp	r2, r3
 800fc14:	d102      	bne.n	800fc1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fc16:	2301      	movs	r3, #1
 800fc18:	60fb      	str	r3, [r7, #12]
 800fc1a:	e001      	b.n	800fc20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fc20:	f001 fbe2 	bl	80113e8 <vPortExitCritical>

	return xReturn;
 800fc24:	68fb      	ldr	r3, [r7, #12]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3710      	adds	r7, #16
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
	...

0800fc30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fc30:	b480      	push	{r7}
 800fc32:	b085      	sub	sp, #20
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
 800fc38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	e014      	b.n	800fc6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fc40:	4a0e      	ldr	r2, [pc, #56]	; (800fc7c <vQueueAddToRegistry+0x4c>)
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d10b      	bne.n	800fc64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fc4c:	490b      	ldr	r1, [pc, #44]	; (800fc7c <vQueueAddToRegistry+0x4c>)
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	683a      	ldr	r2, [r7, #0]
 800fc52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fc56:	4a09      	ldr	r2, [pc, #36]	; (800fc7c <vQueueAddToRegistry+0x4c>)
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	00db      	lsls	r3, r3, #3
 800fc5c:	4413      	add	r3, r2
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fc62:	e005      	b.n	800fc70 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	3301      	adds	r3, #1
 800fc68:	60fb      	str	r3, [r7, #12]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2b07      	cmp	r3, #7
 800fc6e:	d9e7      	bls.n	800fc40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fc70:	bf00      	nop
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr
 800fc7c:	200052cc 	.word	0x200052cc

0800fc80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b086      	sub	sp, #24
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fc90:	f001 fb7c 	bl	801138c <vPortEnterCritical>
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc9a:	b25b      	sxtb	r3, r3
 800fc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fca0:	d103      	bne.n	800fcaa <vQueueWaitForMessageRestricted+0x2a>
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	2200      	movs	r2, #0
 800fca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcb0:	b25b      	sxtb	r3, r3
 800fcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcb6:	d103      	bne.n	800fcc0 <vQueueWaitForMessageRestricted+0x40>
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcc0:	f001 fb92 	bl	80113e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d106      	bne.n	800fcda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	3324      	adds	r3, #36	; 0x24
 800fcd0:	687a      	ldr	r2, [r7, #4]
 800fcd2:	68b9      	ldr	r1, [r7, #8]
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f000 fc2f 	bl	8010538 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fcda:	6978      	ldr	r0, [r7, #20]
 800fcdc:	f7ff ff27 	bl	800fb2e <prvUnlockQueue>
	}
 800fce0:	bf00      	nop
 800fce2:	3718      	adds	r7, #24
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b08e      	sub	sp, #56	; 0x38
 800fcec:	af04      	add	r7, sp, #16
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
 800fcf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fcf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d109      	bne.n	800fd10 <xTaskCreateStatic+0x28>
	__asm volatile
 800fcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd00:	f383 8811 	msr	BASEPRI, r3
 800fd04:	f3bf 8f6f 	isb	sy
 800fd08:	f3bf 8f4f 	dsb	sy
 800fd0c:	623b      	str	r3, [r7, #32]
 800fd0e:	e7fe      	b.n	800fd0e <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800fd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d109      	bne.n	800fd2a <xTaskCreateStatic+0x42>
 800fd16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	61fb      	str	r3, [r7, #28]
 800fd28:	e7fe      	b.n	800fd28 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fd2a:	235c      	movs	r3, #92	; 0x5c
 800fd2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	2b5c      	cmp	r3, #92	; 0x5c
 800fd32:	d009      	beq.n	800fd48 <xTaskCreateStatic+0x60>
 800fd34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd38:	f383 8811 	msr	BASEPRI, r3
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	f3bf 8f4f 	dsb	sy
 800fd44:	61bb      	str	r3, [r7, #24]
 800fd46:	e7fe      	b.n	800fd46 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fd48:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d01e      	beq.n	800fd8e <xTaskCreateStatic+0xa6>
 800fd50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d01b      	beq.n	800fd8e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd62:	2202      	movs	r2, #2
 800fd64:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fd68:	2300      	movs	r3, #0
 800fd6a:	9303      	str	r3, [sp, #12]
 800fd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6e:	9302      	str	r3, [sp, #8]
 800fd70:	f107 0314 	add.w	r3, r7, #20
 800fd74:	9301      	str	r3, [sp, #4]
 800fd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd78:	9300      	str	r3, [sp, #0]
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	68b9      	ldr	r1, [r7, #8]
 800fd80:	68f8      	ldr	r0, [r7, #12]
 800fd82:	f000 f850 	bl	800fe26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fd86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd88:	f000 f8dc 	bl	800ff44 <prvAddNewTaskToReadyList>
 800fd8c:	e001      	b.n	800fd92 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fd92:	697b      	ldr	r3, [r7, #20]
	}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3728      	adds	r7, #40	; 0x28
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b08c      	sub	sp, #48	; 0x30
 800fda0:	af04      	add	r7, sp, #16
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	603b      	str	r3, [r7, #0]
 800fda8:	4613      	mov	r3, r2
 800fdaa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fdac:	88fb      	ldrh	r3, [r7, #6]
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f001 fc05 	bl	80115c0 <pvPortMalloc>
 800fdb6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00e      	beq.n	800fddc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fdbe:	205c      	movs	r0, #92	; 0x5c
 800fdc0:	f001 fbfe 	bl	80115c0 <pvPortMalloc>
 800fdc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d003      	beq.n	800fdd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	697a      	ldr	r2, [r7, #20]
 800fdd0:	631a      	str	r2, [r3, #48]	; 0x30
 800fdd2:	e005      	b.n	800fde0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fdd4:	6978      	ldr	r0, [r7, #20]
 800fdd6:	f001 fcb5 	bl	8011744 <vPortFree>
 800fdda:	e001      	b.n	800fde0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fddc:	2300      	movs	r3, #0
 800fdde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fde0:	69fb      	ldr	r3, [r7, #28]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d017      	beq.n	800fe16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fdee:	88fa      	ldrh	r2, [r7, #6]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	9303      	str	r3, [sp, #12]
 800fdf4:	69fb      	ldr	r3, [r7, #28]
 800fdf6:	9302      	str	r3, [sp, #8]
 800fdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfa:	9301      	str	r3, [sp, #4]
 800fdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	68b9      	ldr	r1, [r7, #8]
 800fe04:	68f8      	ldr	r0, [r7, #12]
 800fe06:	f000 f80e 	bl	800fe26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fe0a:	69f8      	ldr	r0, [r7, #28]
 800fe0c:	f000 f89a 	bl	800ff44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fe10:	2301      	movs	r3, #1
 800fe12:	61bb      	str	r3, [r7, #24]
 800fe14:	e002      	b.n	800fe1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fe16:	f04f 33ff 	mov.w	r3, #4294967295
 800fe1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fe1c:	69bb      	ldr	r3, [r7, #24]
	}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	3720      	adds	r7, #32
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}

0800fe26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b088      	sub	sp, #32
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	60f8      	str	r0, [r7, #12]
 800fe2e:	60b9      	str	r1, [r7, #8]
 800fe30:	607a      	str	r2, [r7, #4]
 800fe32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fe34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	21a5      	movs	r1, #165	; 0xa5
 800fe40:	f002 f8f5 	bl	801202e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fe44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	4413      	add	r3, r2
 800fe54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fe56:	69bb      	ldr	r3, [r7, #24]
 800fe58:	f023 0307 	bic.w	r3, r3, #7
 800fe5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fe5e:	69bb      	ldr	r3, [r7, #24]
 800fe60:	f003 0307 	and.w	r3, r3, #7
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d009      	beq.n	800fe7c <prvInitialiseNewTask+0x56>
 800fe68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6c:	f383 8811 	msr	BASEPRI, r3
 800fe70:	f3bf 8f6f 	isb	sy
 800fe74:	f3bf 8f4f 	dsb	sy
 800fe78:	617b      	str	r3, [r7, #20]
 800fe7a:	e7fe      	b.n	800fe7a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d01f      	beq.n	800fec2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fe82:	2300      	movs	r3, #0
 800fe84:	61fb      	str	r3, [r7, #28]
 800fe86:	e012      	b.n	800feae <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fe88:	68ba      	ldr	r2, [r7, #8]
 800fe8a:	69fb      	ldr	r3, [r7, #28]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	7819      	ldrb	r1, [r3, #0]
 800fe90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	4413      	add	r3, r2
 800fe96:	3334      	adds	r3, #52	; 0x34
 800fe98:	460a      	mov	r2, r1
 800fe9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	69fb      	ldr	r3, [r7, #28]
 800fea0:	4413      	add	r3, r2
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d006      	beq.n	800feb6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	3301      	adds	r3, #1
 800feac:	61fb      	str	r3, [r7, #28]
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	2b0f      	cmp	r3, #15
 800feb2:	d9e9      	bls.n	800fe88 <prvInitialiseNewTask+0x62>
 800feb4:	e000      	b.n	800feb8 <prvInitialiseNewTask+0x92>
			{
				break;
 800feb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800feb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feba:	2200      	movs	r2, #0
 800febc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fec0:	e003      	b.n	800feca <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec4:	2200      	movs	r2, #0
 800fec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800feca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fecc:	2b37      	cmp	r3, #55	; 0x37
 800fece:	d901      	bls.n	800fed4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fed0:	2337      	movs	r3, #55	; 0x37
 800fed2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800feda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fede:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee2:	2200      	movs	r2, #0
 800fee4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee8:	3304      	adds	r3, #4
 800feea:	4618      	mov	r0, r3
 800feec:	f7ff f8d6 	bl	800f09c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef2:	3318      	adds	r3, #24
 800fef4:	4618      	mov	r0, r3
 800fef6:	f7ff f8d1 	bl	800f09c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fefe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ff10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff12:	2200      	movs	r2, #0
 800ff14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ff16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ff1e:	683a      	ldr	r2, [r7, #0]
 800ff20:	68f9      	ldr	r1, [r7, #12]
 800ff22:	69b8      	ldr	r0, [r7, #24]
 800ff24:	f001 f90c 	bl	8011140 <pxPortInitialiseStack>
 800ff28:	4602      	mov	r2, r0
 800ff2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ff2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d002      	beq.n	800ff3a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ff34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ff3a:	bf00      	nop
 800ff3c:	3720      	adds	r7, #32
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
	...

0800ff44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ff4c:	f001 fa1e 	bl	801138c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ff50:	4b2d      	ldr	r3, [pc, #180]	; (8010008 <prvAddNewTaskToReadyList+0xc4>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	3301      	adds	r3, #1
 800ff56:	4a2c      	ldr	r2, [pc, #176]	; (8010008 <prvAddNewTaskToReadyList+0xc4>)
 800ff58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ff5a:	4b2c      	ldr	r3, [pc, #176]	; (801000c <prvAddNewTaskToReadyList+0xc8>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d109      	bne.n	800ff76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ff62:	4a2a      	ldr	r2, [pc, #168]	; (801000c <prvAddNewTaskToReadyList+0xc8>)
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ff68:	4b27      	ldr	r3, [pc, #156]	; (8010008 <prvAddNewTaskToReadyList+0xc4>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d110      	bne.n	800ff92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ff70:	f000 fc08 	bl	8010784 <prvInitialiseTaskLists>
 800ff74:	e00d      	b.n	800ff92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ff76:	4b26      	ldr	r3, [pc, #152]	; (8010010 <prvAddNewTaskToReadyList+0xcc>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d109      	bne.n	800ff92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ff7e:	4b23      	ldr	r3, [pc, #140]	; (801000c <prvAddNewTaskToReadyList+0xc8>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d802      	bhi.n	800ff92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ff8c:	4a1f      	ldr	r2, [pc, #124]	; (801000c <prvAddNewTaskToReadyList+0xc8>)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ff92:	4b20      	ldr	r3, [pc, #128]	; (8010014 <prvAddNewTaskToReadyList+0xd0>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3301      	adds	r3, #1
 800ff98:	4a1e      	ldr	r2, [pc, #120]	; (8010014 <prvAddNewTaskToReadyList+0xd0>)
 800ff9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ff9c:	4b1d      	ldr	r3, [pc, #116]	; (8010014 <prvAddNewTaskToReadyList+0xd0>)
 800ff9e:	681a      	ldr	r2, [r3, #0]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa8:	4b1b      	ldr	r3, [pc, #108]	; (8010018 <prvAddNewTaskToReadyList+0xd4>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d903      	bls.n	800ffb8 <prvAddNewTaskToReadyList+0x74>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb4:	4a18      	ldr	r2, [pc, #96]	; (8010018 <prvAddNewTaskToReadyList+0xd4>)
 800ffb6:	6013      	str	r3, [r2, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	4413      	add	r3, r2
 800ffc2:	009b      	lsls	r3, r3, #2
 800ffc4:	4a15      	ldr	r2, [pc, #84]	; (801001c <prvAddNewTaskToReadyList+0xd8>)
 800ffc6:	441a      	add	r2, r3
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	3304      	adds	r3, #4
 800ffcc:	4619      	mov	r1, r3
 800ffce:	4610      	mov	r0, r2
 800ffd0:	f7ff f871 	bl	800f0b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ffd4:	f001 fa08 	bl	80113e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ffd8:	4b0d      	ldr	r3, [pc, #52]	; (8010010 <prvAddNewTaskToReadyList+0xcc>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00e      	beq.n	800fffe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ffe0:	4b0a      	ldr	r3, [pc, #40]	; (801000c <prvAddNewTaskToReadyList+0xc8>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d207      	bcs.n	800fffe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ffee:	4b0c      	ldr	r3, [pc, #48]	; (8010020 <prvAddNewTaskToReadyList+0xdc>)
 800fff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fff4:	601a      	str	r2, [r3, #0]
 800fff6:	f3bf 8f4f 	dsb	sy
 800fffa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fffe:	bf00      	nop
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	20000cec 	.word	0x20000cec
 801000c:	20000818 	.word	0x20000818
 8010010:	20000cf8 	.word	0x20000cf8
 8010014:	20000d08 	.word	0x20000d08
 8010018:	20000cf4 	.word	0x20000cf4
 801001c:	2000081c 	.word	0x2000081c
 8010020:	e000ed04 	.word	0xe000ed04

08010024 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801002c:	2300      	movs	r3, #0
 801002e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d016      	beq.n	8010064 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010036:	4b13      	ldr	r3, [pc, #76]	; (8010084 <vTaskDelay+0x60>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d009      	beq.n	8010052 <vTaskDelay+0x2e>
 801003e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010042:	f383 8811 	msr	BASEPRI, r3
 8010046:	f3bf 8f6f 	isb	sy
 801004a:	f3bf 8f4f 	dsb	sy
 801004e:	60bb      	str	r3, [r7, #8]
 8010050:	e7fe      	b.n	8010050 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010052:	f000 f87f 	bl	8010154 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010056:	2100      	movs	r1, #0
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 fcd7 	bl	8010a0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801005e:	f000 f887 	bl	8010170 <xTaskResumeAll>
 8010062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d107      	bne.n	801007a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801006a:	4b07      	ldr	r3, [pc, #28]	; (8010088 <vTaskDelay+0x64>)
 801006c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010070:	601a      	str	r2, [r3, #0]
 8010072:	f3bf 8f4f 	dsb	sy
 8010076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801007a:	bf00      	nop
 801007c:	3710      	adds	r7, #16
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	20000d14 	.word	0x20000d14
 8010088:	e000ed04 	.word	0xe000ed04

0801008c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801008c:	b580      	push	{r7, lr}
 801008e:	b08a      	sub	sp, #40	; 0x28
 8010090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010092:	2300      	movs	r3, #0
 8010094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010096:	2300      	movs	r3, #0
 8010098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801009a:	463a      	mov	r2, r7
 801009c:	1d39      	adds	r1, r7, #4
 801009e:	f107 0308 	add.w	r3, r7, #8
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fe ffa6 	bl	800eff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80100a8:	6839      	ldr	r1, [r7, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	68ba      	ldr	r2, [r7, #8]
 80100ae:	9202      	str	r2, [sp, #8]
 80100b0:	9301      	str	r3, [sp, #4]
 80100b2:	2300      	movs	r3, #0
 80100b4:	9300      	str	r3, [sp, #0]
 80100b6:	2300      	movs	r3, #0
 80100b8:	460a      	mov	r2, r1
 80100ba:	4920      	ldr	r1, [pc, #128]	; (801013c <vTaskStartScheduler+0xb0>)
 80100bc:	4820      	ldr	r0, [pc, #128]	; (8010140 <vTaskStartScheduler+0xb4>)
 80100be:	f7ff fe13 	bl	800fce8 <xTaskCreateStatic>
 80100c2:	4602      	mov	r2, r0
 80100c4:	4b1f      	ldr	r3, [pc, #124]	; (8010144 <vTaskStartScheduler+0xb8>)
 80100c6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80100c8:	4b1e      	ldr	r3, [pc, #120]	; (8010144 <vTaskStartScheduler+0xb8>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80100d0:	2301      	movs	r3, #1
 80100d2:	617b      	str	r3, [r7, #20]
 80100d4:	e001      	b.n	80100da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80100d6:	2300      	movs	r3, #0
 80100d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d102      	bne.n	80100e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80100e0:	f000 fce8 	bl	8010ab4 <xTimerCreateTimerTask>
 80100e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d115      	bne.n	8010118 <vTaskStartScheduler+0x8c>
 80100ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100f0:	f383 8811 	msr	BASEPRI, r3
 80100f4:	f3bf 8f6f 	isb	sy
 80100f8:	f3bf 8f4f 	dsb	sy
 80100fc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80100fe:	4b12      	ldr	r3, [pc, #72]	; (8010148 <vTaskStartScheduler+0xbc>)
 8010100:	f04f 32ff 	mov.w	r2, #4294967295
 8010104:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010106:	4b11      	ldr	r3, [pc, #68]	; (801014c <vTaskStartScheduler+0xc0>)
 8010108:	2201      	movs	r2, #1
 801010a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801010c:	4b10      	ldr	r3, [pc, #64]	; (8010150 <vTaskStartScheduler+0xc4>)
 801010e:	2200      	movs	r2, #0
 8010110:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010112:	f001 f89d 	bl	8011250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010116:	e00d      	b.n	8010134 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801011e:	d109      	bne.n	8010134 <vTaskStartScheduler+0xa8>
 8010120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010124:	f383 8811 	msr	BASEPRI, r3
 8010128:	f3bf 8f6f 	isb	sy
 801012c:	f3bf 8f4f 	dsb	sy
 8010130:	60fb      	str	r3, [r7, #12]
 8010132:	e7fe      	b.n	8010132 <vTaskStartScheduler+0xa6>
}
 8010134:	bf00      	nop
 8010136:	3718      	adds	r7, #24
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	080122f8 	.word	0x080122f8
 8010140:	08010755 	.word	0x08010755
 8010144:	20000d10 	.word	0x20000d10
 8010148:	20000d0c 	.word	0x20000d0c
 801014c:	20000cf8 	.word	0x20000cf8
 8010150:	20000cf0 	.word	0x20000cf0

08010154 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010154:	b480      	push	{r7}
 8010156:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010158:	4b04      	ldr	r3, [pc, #16]	; (801016c <vTaskSuspendAll+0x18>)
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3301      	adds	r3, #1
 801015e:	4a03      	ldr	r2, [pc, #12]	; (801016c <vTaskSuspendAll+0x18>)
 8010160:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010162:	bf00      	nop
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	20000d14 	.word	0x20000d14

08010170 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010176:	2300      	movs	r3, #0
 8010178:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801017a:	2300      	movs	r3, #0
 801017c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801017e:	4b41      	ldr	r3, [pc, #260]	; (8010284 <xTaskResumeAll+0x114>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d109      	bne.n	801019a <xTaskResumeAll+0x2a>
 8010186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	603b      	str	r3, [r7, #0]
 8010198:	e7fe      	b.n	8010198 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801019a:	f001 f8f7 	bl	801138c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801019e:	4b39      	ldr	r3, [pc, #228]	; (8010284 <xTaskResumeAll+0x114>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	3b01      	subs	r3, #1
 80101a4:	4a37      	ldr	r2, [pc, #220]	; (8010284 <xTaskResumeAll+0x114>)
 80101a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101a8:	4b36      	ldr	r3, [pc, #216]	; (8010284 <xTaskResumeAll+0x114>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d162      	bne.n	8010276 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80101b0:	4b35      	ldr	r3, [pc, #212]	; (8010288 <xTaskResumeAll+0x118>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d05e      	beq.n	8010276 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80101b8:	e02f      	b.n	801021a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101ba:	4b34      	ldr	r3, [pc, #208]	; (801028c <xTaskResumeAll+0x11c>)
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	68db      	ldr	r3, [r3, #12]
 80101c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	3318      	adds	r3, #24
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fe ffd2 	bl	800f170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	3304      	adds	r3, #4
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe ffcd 	bl	800f170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101da:	4b2d      	ldr	r3, [pc, #180]	; (8010290 <xTaskResumeAll+0x120>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	429a      	cmp	r2, r3
 80101e0:	d903      	bls.n	80101ea <xTaskResumeAll+0x7a>
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e6:	4a2a      	ldr	r2, [pc, #168]	; (8010290 <xTaskResumeAll+0x120>)
 80101e8:	6013      	str	r3, [r2, #0]
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ee:	4613      	mov	r3, r2
 80101f0:	009b      	lsls	r3, r3, #2
 80101f2:	4413      	add	r3, r2
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4a27      	ldr	r2, [pc, #156]	; (8010294 <xTaskResumeAll+0x124>)
 80101f8:	441a      	add	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	3304      	adds	r3, #4
 80101fe:	4619      	mov	r1, r3
 8010200:	4610      	mov	r0, r2
 8010202:	f7fe ff58 	bl	800f0b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801020a:	4b23      	ldr	r3, [pc, #140]	; (8010298 <xTaskResumeAll+0x128>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010210:	429a      	cmp	r2, r3
 8010212:	d302      	bcc.n	801021a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010214:	4b21      	ldr	r3, [pc, #132]	; (801029c <xTaskResumeAll+0x12c>)
 8010216:	2201      	movs	r2, #1
 8010218:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801021a:	4b1c      	ldr	r3, [pc, #112]	; (801028c <xTaskResumeAll+0x11c>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1cb      	bne.n	80101ba <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d001      	beq.n	801022c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010228:	f000 fb46 	bl	80108b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801022c:	4b1c      	ldr	r3, [pc, #112]	; (80102a0 <xTaskResumeAll+0x130>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d010      	beq.n	801025a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010238:	f000 f846 	bl	80102c8 <xTaskIncrementTick>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d002      	beq.n	8010248 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010242:	4b16      	ldr	r3, [pc, #88]	; (801029c <xTaskResumeAll+0x12c>)
 8010244:	2201      	movs	r2, #1
 8010246:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	3b01      	subs	r3, #1
 801024c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d1f1      	bne.n	8010238 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010254:	4b12      	ldr	r3, [pc, #72]	; (80102a0 <xTaskResumeAll+0x130>)
 8010256:	2200      	movs	r2, #0
 8010258:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801025a:	4b10      	ldr	r3, [pc, #64]	; (801029c <xTaskResumeAll+0x12c>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d009      	beq.n	8010276 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010262:	2301      	movs	r3, #1
 8010264:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010266:	4b0f      	ldr	r3, [pc, #60]	; (80102a4 <xTaskResumeAll+0x134>)
 8010268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026c:	601a      	str	r2, [r3, #0]
 801026e:	f3bf 8f4f 	dsb	sy
 8010272:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010276:	f001 f8b7 	bl	80113e8 <vPortExitCritical>

	return xAlreadyYielded;
 801027a:	68bb      	ldr	r3, [r7, #8]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3710      	adds	r7, #16
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	20000d14 	.word	0x20000d14
 8010288:	20000cec 	.word	0x20000cec
 801028c:	20000cac 	.word	0x20000cac
 8010290:	20000cf4 	.word	0x20000cf4
 8010294:	2000081c 	.word	0x2000081c
 8010298:	20000818 	.word	0x20000818
 801029c:	20000d00 	.word	0x20000d00
 80102a0:	20000cfc 	.word	0x20000cfc
 80102a4:	e000ed04 	.word	0xe000ed04

080102a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80102a8:	b480      	push	{r7}
 80102aa:	b083      	sub	sp, #12
 80102ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80102ae:	4b05      	ldr	r3, [pc, #20]	; (80102c4 <xTaskGetTickCount+0x1c>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80102b4:	687b      	ldr	r3, [r7, #4]
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	370c      	adds	r7, #12
 80102ba:	46bd      	mov	sp, r7
 80102bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c0:	4770      	bx	lr
 80102c2:	bf00      	nop
 80102c4:	20000cf0 	.word	0x20000cf0

080102c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b086      	sub	sp, #24
 80102cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80102ce:	2300      	movs	r3, #0
 80102d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102d2:	4b4e      	ldr	r3, [pc, #312]	; (801040c <xTaskIncrementTick+0x144>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	f040 8088 	bne.w	80103ec <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80102dc:	4b4c      	ldr	r3, [pc, #304]	; (8010410 <xTaskIncrementTick+0x148>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	3301      	adds	r3, #1
 80102e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80102e4:	4a4a      	ldr	r2, [pc, #296]	; (8010410 <xTaskIncrementTick+0x148>)
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d11f      	bne.n	8010330 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80102f0:	4b48      	ldr	r3, [pc, #288]	; (8010414 <xTaskIncrementTick+0x14c>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d009      	beq.n	801030e <xTaskIncrementTick+0x46>
 80102fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fe:	f383 8811 	msr	BASEPRI, r3
 8010302:	f3bf 8f6f 	isb	sy
 8010306:	f3bf 8f4f 	dsb	sy
 801030a:	603b      	str	r3, [r7, #0]
 801030c:	e7fe      	b.n	801030c <xTaskIncrementTick+0x44>
 801030e:	4b41      	ldr	r3, [pc, #260]	; (8010414 <xTaskIncrementTick+0x14c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	60fb      	str	r3, [r7, #12]
 8010314:	4b40      	ldr	r3, [pc, #256]	; (8010418 <xTaskIncrementTick+0x150>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4a3e      	ldr	r2, [pc, #248]	; (8010414 <xTaskIncrementTick+0x14c>)
 801031a:	6013      	str	r3, [r2, #0]
 801031c:	4a3e      	ldr	r2, [pc, #248]	; (8010418 <xTaskIncrementTick+0x150>)
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	6013      	str	r3, [r2, #0]
 8010322:	4b3e      	ldr	r3, [pc, #248]	; (801041c <xTaskIncrementTick+0x154>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3301      	adds	r3, #1
 8010328:	4a3c      	ldr	r2, [pc, #240]	; (801041c <xTaskIncrementTick+0x154>)
 801032a:	6013      	str	r3, [r2, #0]
 801032c:	f000 fac4 	bl	80108b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010330:	4b3b      	ldr	r3, [pc, #236]	; (8010420 <xTaskIncrementTick+0x158>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	693a      	ldr	r2, [r7, #16]
 8010336:	429a      	cmp	r2, r3
 8010338:	d349      	bcc.n	80103ce <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801033a:	4b36      	ldr	r3, [pc, #216]	; (8010414 <xTaskIncrementTick+0x14c>)
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d104      	bne.n	801034e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010344:	4b36      	ldr	r3, [pc, #216]	; (8010420 <xTaskIncrementTick+0x158>)
 8010346:	f04f 32ff 	mov.w	r2, #4294967295
 801034a:	601a      	str	r2, [r3, #0]
					break;
 801034c:	e03f      	b.n	80103ce <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801034e:	4b31      	ldr	r3, [pc, #196]	; (8010414 <xTaskIncrementTick+0x14c>)
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	685b      	ldr	r3, [r3, #4]
 801035c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801035e:	693a      	ldr	r2, [r7, #16]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	429a      	cmp	r2, r3
 8010364:	d203      	bcs.n	801036e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010366:	4a2e      	ldr	r2, [pc, #184]	; (8010420 <xTaskIncrementTick+0x158>)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801036c:	e02f      	b.n	80103ce <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	3304      	adds	r3, #4
 8010372:	4618      	mov	r0, r3
 8010374:	f7fe fefc 	bl	800f170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037c:	2b00      	cmp	r3, #0
 801037e:	d004      	beq.n	801038a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	3318      	adds	r3, #24
 8010384:	4618      	mov	r0, r3
 8010386:	f7fe fef3 	bl	800f170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801038e:	4b25      	ldr	r3, [pc, #148]	; (8010424 <xTaskIncrementTick+0x15c>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	429a      	cmp	r2, r3
 8010394:	d903      	bls.n	801039e <xTaskIncrementTick+0xd6>
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801039a:	4a22      	ldr	r2, [pc, #136]	; (8010424 <xTaskIncrementTick+0x15c>)
 801039c:	6013      	str	r3, [r2, #0]
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103a2:	4613      	mov	r3, r2
 80103a4:	009b      	lsls	r3, r3, #2
 80103a6:	4413      	add	r3, r2
 80103a8:	009b      	lsls	r3, r3, #2
 80103aa:	4a1f      	ldr	r2, [pc, #124]	; (8010428 <xTaskIncrementTick+0x160>)
 80103ac:	441a      	add	r2, r3
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	3304      	adds	r3, #4
 80103b2:	4619      	mov	r1, r3
 80103b4:	4610      	mov	r0, r2
 80103b6:	f7fe fe7e 	bl	800f0b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103be:	4b1b      	ldr	r3, [pc, #108]	; (801042c <xTaskIncrementTick+0x164>)
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d3b8      	bcc.n	801033a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80103c8:	2301      	movs	r3, #1
 80103ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103cc:	e7b5      	b.n	801033a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80103ce:	4b17      	ldr	r3, [pc, #92]	; (801042c <xTaskIncrementTick+0x164>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103d4:	4914      	ldr	r1, [pc, #80]	; (8010428 <xTaskIncrementTick+0x160>)
 80103d6:	4613      	mov	r3, r2
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	4413      	add	r3, r2
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	440b      	add	r3, r1
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	d907      	bls.n	80103f6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80103e6:	2301      	movs	r3, #1
 80103e8:	617b      	str	r3, [r7, #20]
 80103ea:	e004      	b.n	80103f6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80103ec:	4b10      	ldr	r3, [pc, #64]	; (8010430 <xTaskIncrementTick+0x168>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	3301      	adds	r3, #1
 80103f2:	4a0f      	ldr	r2, [pc, #60]	; (8010430 <xTaskIncrementTick+0x168>)
 80103f4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80103f6:	4b0f      	ldr	r3, [pc, #60]	; (8010434 <xTaskIncrementTick+0x16c>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d001      	beq.n	8010402 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80103fe:	2301      	movs	r3, #1
 8010400:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010402:	697b      	ldr	r3, [r7, #20]
}
 8010404:	4618      	mov	r0, r3
 8010406:	3718      	adds	r7, #24
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	20000d14 	.word	0x20000d14
 8010410:	20000cf0 	.word	0x20000cf0
 8010414:	20000ca4 	.word	0x20000ca4
 8010418:	20000ca8 	.word	0x20000ca8
 801041c:	20000d04 	.word	0x20000d04
 8010420:	20000d0c 	.word	0x20000d0c
 8010424:	20000cf4 	.word	0x20000cf4
 8010428:	2000081c 	.word	0x2000081c
 801042c:	20000818 	.word	0x20000818
 8010430:	20000cfc 	.word	0x20000cfc
 8010434:	20000d00 	.word	0x20000d00

08010438 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010438:	b480      	push	{r7}
 801043a:	b085      	sub	sp, #20
 801043c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801043e:	4b27      	ldr	r3, [pc, #156]	; (80104dc <vTaskSwitchContext+0xa4>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d003      	beq.n	801044e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010446:	4b26      	ldr	r3, [pc, #152]	; (80104e0 <vTaskSwitchContext+0xa8>)
 8010448:	2201      	movs	r2, #1
 801044a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801044c:	e040      	b.n	80104d0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801044e:	4b24      	ldr	r3, [pc, #144]	; (80104e0 <vTaskSwitchContext+0xa8>)
 8010450:	2200      	movs	r2, #0
 8010452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010454:	4b23      	ldr	r3, [pc, #140]	; (80104e4 <vTaskSwitchContext+0xac>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	60fb      	str	r3, [r7, #12]
 801045a:	e00f      	b.n	801047c <vTaskSwitchContext+0x44>
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d109      	bne.n	8010476 <vTaskSwitchContext+0x3e>
 8010462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	607b      	str	r3, [r7, #4]
 8010474:	e7fe      	b.n	8010474 <vTaskSwitchContext+0x3c>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	3b01      	subs	r3, #1
 801047a:	60fb      	str	r3, [r7, #12]
 801047c:	491a      	ldr	r1, [pc, #104]	; (80104e8 <vTaskSwitchContext+0xb0>)
 801047e:	68fa      	ldr	r2, [r7, #12]
 8010480:	4613      	mov	r3, r2
 8010482:	009b      	lsls	r3, r3, #2
 8010484:	4413      	add	r3, r2
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	440b      	add	r3, r1
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d0e5      	beq.n	801045c <vTaskSwitchContext+0x24>
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	4613      	mov	r3, r2
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	4413      	add	r3, r2
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	4a13      	ldr	r2, [pc, #76]	; (80104e8 <vTaskSwitchContext+0xb0>)
 801049c:	4413      	add	r3, r2
 801049e:	60bb      	str	r3, [r7, #8]
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	685b      	ldr	r3, [r3, #4]
 80104a4:	685a      	ldr	r2, [r3, #4]
 80104a6:	68bb      	ldr	r3, [r7, #8]
 80104a8:	605a      	str	r2, [r3, #4]
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	685a      	ldr	r2, [r3, #4]
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	3308      	adds	r3, #8
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d104      	bne.n	80104c0 <vTaskSwitchContext+0x88>
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	685a      	ldr	r2, [r3, #4]
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	605a      	str	r2, [r3, #4]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	685b      	ldr	r3, [r3, #4]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	4a09      	ldr	r2, [pc, #36]	; (80104ec <vTaskSwitchContext+0xb4>)
 80104c8:	6013      	str	r3, [r2, #0]
 80104ca:	4a06      	ldr	r2, [pc, #24]	; (80104e4 <vTaskSwitchContext+0xac>)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	6013      	str	r3, [r2, #0]
}
 80104d0:	bf00      	nop
 80104d2:	3714      	adds	r7, #20
 80104d4:	46bd      	mov	sp, r7
 80104d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104da:	4770      	bx	lr
 80104dc:	20000d14 	.word	0x20000d14
 80104e0:	20000d00 	.word	0x20000d00
 80104e4:	20000cf4 	.word	0x20000cf4
 80104e8:	2000081c 	.word	0x2000081c
 80104ec:	20000818 	.word	0x20000818

080104f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d109      	bne.n	8010514 <vTaskPlaceOnEventList+0x24>
 8010500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010504:	f383 8811 	msr	BASEPRI, r3
 8010508:	f3bf 8f6f 	isb	sy
 801050c:	f3bf 8f4f 	dsb	sy
 8010510:	60fb      	str	r3, [r7, #12]
 8010512:	e7fe      	b.n	8010512 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010514:	4b07      	ldr	r3, [pc, #28]	; (8010534 <vTaskPlaceOnEventList+0x44>)
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	3318      	adds	r3, #24
 801051a:	4619      	mov	r1, r3
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f7fe fdee 	bl	800f0fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010522:	2101      	movs	r1, #1
 8010524:	6838      	ldr	r0, [r7, #0]
 8010526:	f000 fa71 	bl	8010a0c <prvAddCurrentTaskToDelayedList>
}
 801052a:	bf00      	nop
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	20000818 	.word	0x20000818

08010538 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010538:	b580      	push	{r7, lr}
 801053a:	b086      	sub	sp, #24
 801053c:	af00      	add	r7, sp, #0
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d109      	bne.n	801055e <vTaskPlaceOnEventListRestricted+0x26>
 801054a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801054e:	f383 8811 	msr	BASEPRI, r3
 8010552:	f3bf 8f6f 	isb	sy
 8010556:	f3bf 8f4f 	dsb	sy
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	e7fe      	b.n	801055c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801055e:	4b0a      	ldr	r3, [pc, #40]	; (8010588 <vTaskPlaceOnEventListRestricted+0x50>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	3318      	adds	r3, #24
 8010564:	4619      	mov	r1, r3
 8010566:	68f8      	ldr	r0, [r7, #12]
 8010568:	f7fe fda5 	bl	800f0b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d002      	beq.n	8010578 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8010572:	f04f 33ff 	mov.w	r3, #4294967295
 8010576:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010578:	6879      	ldr	r1, [r7, #4]
 801057a:	68b8      	ldr	r0, [r7, #8]
 801057c:	f000 fa46 	bl	8010a0c <prvAddCurrentTaskToDelayedList>
	}
 8010580:	bf00      	nop
 8010582:	3718      	adds	r7, #24
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	20000818 	.word	0x20000818

0801058c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d109      	bne.n	80105b6 <xTaskRemoveFromEventList+0x2a>
 80105a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a6:	f383 8811 	msr	BASEPRI, r3
 80105aa:	f3bf 8f6f 	isb	sy
 80105ae:	f3bf 8f4f 	dsb	sy
 80105b2:	60fb      	str	r3, [r7, #12]
 80105b4:	e7fe      	b.n	80105b4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	3318      	adds	r3, #24
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fe fdd8 	bl	800f170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105c0:	4b1d      	ldr	r3, [pc, #116]	; (8010638 <xTaskRemoveFromEventList+0xac>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d11d      	bne.n	8010604 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	3304      	adds	r3, #4
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fe fdcf 	bl	800f170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105d6:	4b19      	ldr	r3, [pc, #100]	; (801063c <xTaskRemoveFromEventList+0xb0>)
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	429a      	cmp	r2, r3
 80105dc:	d903      	bls.n	80105e6 <xTaskRemoveFromEventList+0x5a>
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e2:	4a16      	ldr	r2, [pc, #88]	; (801063c <xTaskRemoveFromEventList+0xb0>)
 80105e4:	6013      	str	r3, [r2, #0]
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105ea:	4613      	mov	r3, r2
 80105ec:	009b      	lsls	r3, r3, #2
 80105ee:	4413      	add	r3, r2
 80105f0:	009b      	lsls	r3, r3, #2
 80105f2:	4a13      	ldr	r2, [pc, #76]	; (8010640 <xTaskRemoveFromEventList+0xb4>)
 80105f4:	441a      	add	r2, r3
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	3304      	adds	r3, #4
 80105fa:	4619      	mov	r1, r3
 80105fc:	4610      	mov	r0, r2
 80105fe:	f7fe fd5a 	bl	800f0b6 <vListInsertEnd>
 8010602:	e005      	b.n	8010610 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	3318      	adds	r3, #24
 8010608:	4619      	mov	r1, r3
 801060a:	480e      	ldr	r0, [pc, #56]	; (8010644 <xTaskRemoveFromEventList+0xb8>)
 801060c:	f7fe fd53 	bl	800f0b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010614:	4b0c      	ldr	r3, [pc, #48]	; (8010648 <xTaskRemoveFromEventList+0xbc>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801061a:	429a      	cmp	r2, r3
 801061c:	d905      	bls.n	801062a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801061e:	2301      	movs	r3, #1
 8010620:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010622:	4b0a      	ldr	r3, [pc, #40]	; (801064c <xTaskRemoveFromEventList+0xc0>)
 8010624:	2201      	movs	r2, #1
 8010626:	601a      	str	r2, [r3, #0]
 8010628:	e001      	b.n	801062e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801062a:	2300      	movs	r3, #0
 801062c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801062e:	697b      	ldr	r3, [r7, #20]
}
 8010630:	4618      	mov	r0, r3
 8010632:	3718      	adds	r7, #24
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	20000d14 	.word	0x20000d14
 801063c:	20000cf4 	.word	0x20000cf4
 8010640:	2000081c 	.word	0x2000081c
 8010644:	20000cac 	.word	0x20000cac
 8010648:	20000818 	.word	0x20000818
 801064c:	20000d00 	.word	0x20000d00

08010650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010658:	4b06      	ldr	r3, [pc, #24]	; (8010674 <vTaskInternalSetTimeOutState+0x24>)
 801065a:	681a      	ldr	r2, [r3, #0]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010660:	4b05      	ldr	r3, [pc, #20]	; (8010678 <vTaskInternalSetTimeOutState+0x28>)
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	605a      	str	r2, [r3, #4]
}
 8010668:	bf00      	nop
 801066a:	370c      	adds	r7, #12
 801066c:	46bd      	mov	sp, r7
 801066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010672:	4770      	bx	lr
 8010674:	20000d04 	.word	0x20000d04
 8010678:	20000cf0 	.word	0x20000cf0

0801067c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b088      	sub	sp, #32
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d109      	bne.n	80106a0 <xTaskCheckForTimeOut+0x24>
 801068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010690:	f383 8811 	msr	BASEPRI, r3
 8010694:	f3bf 8f6f 	isb	sy
 8010698:	f3bf 8f4f 	dsb	sy
 801069c:	613b      	str	r3, [r7, #16]
 801069e:	e7fe      	b.n	801069e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d109      	bne.n	80106ba <xTaskCheckForTimeOut+0x3e>
 80106a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106aa:	f383 8811 	msr	BASEPRI, r3
 80106ae:	f3bf 8f6f 	isb	sy
 80106b2:	f3bf 8f4f 	dsb	sy
 80106b6:	60fb      	str	r3, [r7, #12]
 80106b8:	e7fe      	b.n	80106b8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80106ba:	f000 fe67 	bl	801138c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80106be:	4b1d      	ldr	r3, [pc, #116]	; (8010734 <xTaskCheckForTimeOut+0xb8>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	69ba      	ldr	r2, [r7, #24]
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d6:	d102      	bne.n	80106de <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80106d8:	2300      	movs	r3, #0
 80106da:	61fb      	str	r3, [r7, #28]
 80106dc:	e023      	b.n	8010726 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681a      	ldr	r2, [r3, #0]
 80106e2:	4b15      	ldr	r3, [pc, #84]	; (8010738 <xTaskCheckForTimeOut+0xbc>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d007      	beq.n	80106fa <xTaskCheckForTimeOut+0x7e>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	69ba      	ldr	r2, [r7, #24]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d302      	bcc.n	80106fa <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80106f4:	2301      	movs	r3, #1
 80106f6:	61fb      	str	r3, [r7, #28]
 80106f8:	e015      	b.n	8010726 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	697a      	ldr	r2, [r7, #20]
 8010700:	429a      	cmp	r2, r3
 8010702:	d20b      	bcs.n	801071c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	1ad2      	subs	r2, r2, r3
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f7ff ff9d 	bl	8010650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010716:	2300      	movs	r3, #0
 8010718:	61fb      	str	r3, [r7, #28]
 801071a:	e004      	b.n	8010726 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	2200      	movs	r2, #0
 8010720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010722:	2301      	movs	r3, #1
 8010724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010726:	f000 fe5f 	bl	80113e8 <vPortExitCritical>

	return xReturn;
 801072a:	69fb      	ldr	r3, [r7, #28]
}
 801072c:	4618      	mov	r0, r3
 801072e:	3720      	adds	r7, #32
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	20000cf0 	.word	0x20000cf0
 8010738:	20000d04 	.word	0x20000d04

0801073c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801073c:	b480      	push	{r7}
 801073e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010740:	4b03      	ldr	r3, [pc, #12]	; (8010750 <vTaskMissedYield+0x14>)
 8010742:	2201      	movs	r2, #1
 8010744:	601a      	str	r2, [r3, #0]
}
 8010746:	bf00      	nop
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr
 8010750:	20000d00 	.word	0x20000d00

08010754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b082      	sub	sp, #8
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801075c:	f000 f852 	bl	8010804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010760:	4b06      	ldr	r3, [pc, #24]	; (801077c <prvIdleTask+0x28>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	2b01      	cmp	r3, #1
 8010766:	d9f9      	bls.n	801075c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010768:	4b05      	ldr	r3, [pc, #20]	; (8010780 <prvIdleTask+0x2c>)
 801076a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801076e:	601a      	str	r2, [r3, #0]
 8010770:	f3bf 8f4f 	dsb	sy
 8010774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010778:	e7f0      	b.n	801075c <prvIdleTask+0x8>
 801077a:	bf00      	nop
 801077c:	2000081c 	.word	0x2000081c
 8010780:	e000ed04 	.word	0xe000ed04

08010784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801078a:	2300      	movs	r3, #0
 801078c:	607b      	str	r3, [r7, #4]
 801078e:	e00c      	b.n	80107aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010790:	687a      	ldr	r2, [r7, #4]
 8010792:	4613      	mov	r3, r2
 8010794:	009b      	lsls	r3, r3, #2
 8010796:	4413      	add	r3, r2
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	4a12      	ldr	r2, [pc, #72]	; (80107e4 <prvInitialiseTaskLists+0x60>)
 801079c:	4413      	add	r3, r2
 801079e:	4618      	mov	r0, r3
 80107a0:	f7fe fc5c 	bl	800f05c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	3301      	adds	r3, #1
 80107a8:	607b      	str	r3, [r7, #4]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2b37      	cmp	r3, #55	; 0x37
 80107ae:	d9ef      	bls.n	8010790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80107b0:	480d      	ldr	r0, [pc, #52]	; (80107e8 <prvInitialiseTaskLists+0x64>)
 80107b2:	f7fe fc53 	bl	800f05c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80107b6:	480d      	ldr	r0, [pc, #52]	; (80107ec <prvInitialiseTaskLists+0x68>)
 80107b8:	f7fe fc50 	bl	800f05c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80107bc:	480c      	ldr	r0, [pc, #48]	; (80107f0 <prvInitialiseTaskLists+0x6c>)
 80107be:	f7fe fc4d 	bl	800f05c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80107c2:	480c      	ldr	r0, [pc, #48]	; (80107f4 <prvInitialiseTaskLists+0x70>)
 80107c4:	f7fe fc4a 	bl	800f05c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80107c8:	480b      	ldr	r0, [pc, #44]	; (80107f8 <prvInitialiseTaskLists+0x74>)
 80107ca:	f7fe fc47 	bl	800f05c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80107ce:	4b0b      	ldr	r3, [pc, #44]	; (80107fc <prvInitialiseTaskLists+0x78>)
 80107d0:	4a05      	ldr	r2, [pc, #20]	; (80107e8 <prvInitialiseTaskLists+0x64>)
 80107d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80107d4:	4b0a      	ldr	r3, [pc, #40]	; (8010800 <prvInitialiseTaskLists+0x7c>)
 80107d6:	4a05      	ldr	r2, [pc, #20]	; (80107ec <prvInitialiseTaskLists+0x68>)
 80107d8:	601a      	str	r2, [r3, #0]
}
 80107da:	bf00      	nop
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	2000081c 	.word	0x2000081c
 80107e8:	20000c7c 	.word	0x20000c7c
 80107ec:	20000c90 	.word	0x20000c90
 80107f0:	20000cac 	.word	0x20000cac
 80107f4:	20000cc0 	.word	0x20000cc0
 80107f8:	20000cd8 	.word	0x20000cd8
 80107fc:	20000ca4 	.word	0x20000ca4
 8010800:	20000ca8 	.word	0x20000ca8

08010804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b082      	sub	sp, #8
 8010808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801080a:	e019      	b.n	8010840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801080c:	f000 fdbe 	bl	801138c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010810:	4b0f      	ldr	r3, [pc, #60]	; (8010850 <prvCheckTasksWaitingTermination+0x4c>)
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	3304      	adds	r3, #4
 801081c:	4618      	mov	r0, r3
 801081e:	f7fe fca7 	bl	800f170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010822:	4b0c      	ldr	r3, [pc, #48]	; (8010854 <prvCheckTasksWaitingTermination+0x50>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	3b01      	subs	r3, #1
 8010828:	4a0a      	ldr	r2, [pc, #40]	; (8010854 <prvCheckTasksWaitingTermination+0x50>)
 801082a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801082c:	4b0a      	ldr	r3, [pc, #40]	; (8010858 <prvCheckTasksWaitingTermination+0x54>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	3b01      	subs	r3, #1
 8010832:	4a09      	ldr	r2, [pc, #36]	; (8010858 <prvCheckTasksWaitingTermination+0x54>)
 8010834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010836:	f000 fdd7 	bl	80113e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 f80e 	bl	801085c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010840:	4b05      	ldr	r3, [pc, #20]	; (8010858 <prvCheckTasksWaitingTermination+0x54>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d1e1      	bne.n	801080c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010848:	bf00      	nop
 801084a:	3708      	adds	r7, #8
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	20000cc0 	.word	0x20000cc0
 8010854:	20000cec 	.word	0x20000cec
 8010858:	20000cd4 	.word	0x20000cd4

0801085c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801086a:	2b00      	cmp	r3, #0
 801086c:	d108      	bne.n	8010880 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010872:	4618      	mov	r0, r3
 8010874:	f000 ff66 	bl	8011744 <vPortFree>
				vPortFree( pxTCB );
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f000 ff63 	bl	8011744 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801087e:	e017      	b.n	80108b0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010886:	2b01      	cmp	r3, #1
 8010888:	d103      	bne.n	8010892 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f000 ff5a 	bl	8011744 <vPortFree>
	}
 8010890:	e00e      	b.n	80108b0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010898:	2b02      	cmp	r3, #2
 801089a:	d009      	beq.n	80108b0 <prvDeleteTCB+0x54>
 801089c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a0:	f383 8811 	msr	BASEPRI, r3
 80108a4:	f3bf 8f6f 	isb	sy
 80108a8:	f3bf 8f4f 	dsb	sy
 80108ac:	60fb      	str	r3, [r7, #12]
 80108ae:	e7fe      	b.n	80108ae <prvDeleteTCB+0x52>
	}
 80108b0:	bf00      	nop
 80108b2:	3710      	adds	r7, #16
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80108be:	4b0c      	ldr	r3, [pc, #48]	; (80108f0 <prvResetNextTaskUnblockTime+0x38>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d104      	bne.n	80108d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80108c8:	4b0a      	ldr	r3, [pc, #40]	; (80108f4 <prvResetNextTaskUnblockTime+0x3c>)
 80108ca:	f04f 32ff 	mov.w	r2, #4294967295
 80108ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80108d0:	e008      	b.n	80108e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80108d2:	4b07      	ldr	r3, [pc, #28]	; (80108f0 <prvResetNextTaskUnblockTime+0x38>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	68db      	ldr	r3, [r3, #12]
 80108d8:	68db      	ldr	r3, [r3, #12]
 80108da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	4a04      	ldr	r2, [pc, #16]	; (80108f4 <prvResetNextTaskUnblockTime+0x3c>)
 80108e2:	6013      	str	r3, [r2, #0]
}
 80108e4:	bf00      	nop
 80108e6:	370c      	adds	r7, #12
 80108e8:	46bd      	mov	sp, r7
 80108ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ee:	4770      	bx	lr
 80108f0:	20000ca4 	.word	0x20000ca4
 80108f4:	20000d0c 	.word	0x20000d0c

080108f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80108fe:	4b0b      	ldr	r3, [pc, #44]	; (801092c <xTaskGetSchedulerState+0x34>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d102      	bne.n	801090c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010906:	2301      	movs	r3, #1
 8010908:	607b      	str	r3, [r7, #4]
 801090a:	e008      	b.n	801091e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801090c:	4b08      	ldr	r3, [pc, #32]	; (8010930 <xTaskGetSchedulerState+0x38>)
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d102      	bne.n	801091a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010914:	2302      	movs	r3, #2
 8010916:	607b      	str	r3, [r7, #4]
 8010918:	e001      	b.n	801091e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801091a:	2300      	movs	r3, #0
 801091c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801091e:	687b      	ldr	r3, [r7, #4]
	}
 8010920:	4618      	mov	r0, r3
 8010922:	370c      	adds	r7, #12
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr
 801092c:	20000cf8 	.word	0x20000cf8
 8010930:	20000d14 	.word	0x20000d14

08010934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010934:	b580      	push	{r7, lr}
 8010936:	b086      	sub	sp, #24
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010940:	2300      	movs	r3, #0
 8010942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d054      	beq.n	80109f4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801094a:	4b2d      	ldr	r3, [pc, #180]	; (8010a00 <xTaskPriorityDisinherit+0xcc>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	693a      	ldr	r2, [r7, #16]
 8010950:	429a      	cmp	r2, r3
 8010952:	d009      	beq.n	8010968 <xTaskPriorityDisinherit+0x34>
 8010954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010958:	f383 8811 	msr	BASEPRI, r3
 801095c:	f3bf 8f6f 	isb	sy
 8010960:	f3bf 8f4f 	dsb	sy
 8010964:	60fb      	str	r3, [r7, #12]
 8010966:	e7fe      	b.n	8010966 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010968:	693b      	ldr	r3, [r7, #16]
 801096a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801096c:	2b00      	cmp	r3, #0
 801096e:	d109      	bne.n	8010984 <xTaskPriorityDisinherit+0x50>
 8010970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	60bb      	str	r3, [r7, #8]
 8010982:	e7fe      	b.n	8010982 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010988:	1e5a      	subs	r2, r3, #1
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010992:	693b      	ldr	r3, [r7, #16]
 8010994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010996:	429a      	cmp	r2, r3
 8010998:	d02c      	beq.n	80109f4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d128      	bne.n	80109f4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	3304      	adds	r3, #4
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7fe fbe2 	bl	800f170 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80109ac:	693b      	ldr	r3, [r7, #16]
 80109ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109c4:	4b0f      	ldr	r3, [pc, #60]	; (8010a04 <xTaskPriorityDisinherit+0xd0>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d903      	bls.n	80109d4 <xTaskPriorityDisinherit+0xa0>
 80109cc:	693b      	ldr	r3, [r7, #16]
 80109ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d0:	4a0c      	ldr	r2, [pc, #48]	; (8010a04 <xTaskPriorityDisinherit+0xd0>)
 80109d2:	6013      	str	r3, [r2, #0]
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109d8:	4613      	mov	r3, r2
 80109da:	009b      	lsls	r3, r3, #2
 80109dc:	4413      	add	r3, r2
 80109de:	009b      	lsls	r3, r3, #2
 80109e0:	4a09      	ldr	r2, [pc, #36]	; (8010a08 <xTaskPriorityDisinherit+0xd4>)
 80109e2:	441a      	add	r2, r3
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	3304      	adds	r3, #4
 80109e8:	4619      	mov	r1, r3
 80109ea:	4610      	mov	r0, r2
 80109ec:	f7fe fb63 	bl	800f0b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80109f0:	2301      	movs	r3, #1
 80109f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80109f4:	697b      	ldr	r3, [r7, #20]
	}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3718      	adds	r7, #24
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	20000818 	.word	0x20000818
 8010a04:	20000cf4 	.word	0x20000cf4
 8010a08:	2000081c 	.word	0x2000081c

08010a0c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010a16:	4b21      	ldr	r3, [pc, #132]	; (8010a9c <prvAddCurrentTaskToDelayedList+0x90>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010a1c:	4b20      	ldr	r3, [pc, #128]	; (8010aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	3304      	adds	r3, #4
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fe fba4 	bl	800f170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a2e:	d10a      	bne.n	8010a46 <prvAddCurrentTaskToDelayedList+0x3a>
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d007      	beq.n	8010a46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a36:	4b1a      	ldr	r3, [pc, #104]	; (8010aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	4819      	ldr	r0, [pc, #100]	; (8010aa4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010a40:	f7fe fb39 	bl	800f0b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010a44:	e026      	b.n	8010a94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010a46:	68fa      	ldr	r2, [r7, #12]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010a4e:	4b14      	ldr	r3, [pc, #80]	; (8010aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	68ba      	ldr	r2, [r7, #8]
 8010a54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010a56:	68ba      	ldr	r2, [r7, #8]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	429a      	cmp	r2, r3
 8010a5c:	d209      	bcs.n	8010a72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a5e:	4b12      	ldr	r3, [pc, #72]	; (8010aa8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010a60:	681a      	ldr	r2, [r3, #0]
 8010a62:	4b0f      	ldr	r3, [pc, #60]	; (8010aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	3304      	adds	r3, #4
 8010a68:	4619      	mov	r1, r3
 8010a6a:	4610      	mov	r0, r2
 8010a6c:	f7fe fb47 	bl	800f0fe <vListInsert>
}
 8010a70:	e010      	b.n	8010a94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010a72:	4b0e      	ldr	r3, [pc, #56]	; (8010aac <prvAddCurrentTaskToDelayedList+0xa0>)
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	4b0a      	ldr	r3, [pc, #40]	; (8010aa0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	3304      	adds	r3, #4
 8010a7c:	4619      	mov	r1, r3
 8010a7e:	4610      	mov	r0, r2
 8010a80:	f7fe fb3d 	bl	800f0fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010a84:	4b0a      	ldr	r3, [pc, #40]	; (8010ab0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	68ba      	ldr	r2, [r7, #8]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d202      	bcs.n	8010a94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010a8e:	4a08      	ldr	r2, [pc, #32]	; (8010ab0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	6013      	str	r3, [r2, #0]
}
 8010a94:	bf00      	nop
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	20000cf0 	.word	0x20000cf0
 8010aa0:	20000818 	.word	0x20000818
 8010aa4:	20000cd8 	.word	0x20000cd8
 8010aa8:	20000ca8 	.word	0x20000ca8
 8010aac:	20000ca4 	.word	0x20000ca4
 8010ab0:	20000d0c 	.word	0x20000d0c

08010ab4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b08a      	sub	sp, #40	; 0x28
 8010ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010aba:	2300      	movs	r3, #0
 8010abc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010abe:	f000 faff 	bl	80110c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010ac2:	4b1c      	ldr	r3, [pc, #112]	; (8010b34 <xTimerCreateTimerTask+0x80>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d021      	beq.n	8010b0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010aca:	2300      	movs	r3, #0
 8010acc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010ad2:	1d3a      	adds	r2, r7, #4
 8010ad4:	f107 0108 	add.w	r1, r7, #8
 8010ad8:	f107 030c 	add.w	r3, r7, #12
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fe faa3 	bl	800f028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010ae2:	6879      	ldr	r1, [r7, #4]
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	9202      	str	r2, [sp, #8]
 8010aea:	9301      	str	r3, [sp, #4]
 8010aec:	2302      	movs	r3, #2
 8010aee:	9300      	str	r3, [sp, #0]
 8010af0:	2300      	movs	r3, #0
 8010af2:	460a      	mov	r2, r1
 8010af4:	4910      	ldr	r1, [pc, #64]	; (8010b38 <xTimerCreateTimerTask+0x84>)
 8010af6:	4811      	ldr	r0, [pc, #68]	; (8010b3c <xTimerCreateTimerTask+0x88>)
 8010af8:	f7ff f8f6 	bl	800fce8 <xTaskCreateStatic>
 8010afc:	4602      	mov	r2, r0
 8010afe:	4b10      	ldr	r3, [pc, #64]	; (8010b40 <xTimerCreateTimerTask+0x8c>)
 8010b00:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010b02:	4b0f      	ldr	r3, [pc, #60]	; (8010b40 <xTimerCreateTimerTask+0x8c>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d001      	beq.n	8010b0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d109      	bne.n	8010b28 <xTimerCreateTimerTask+0x74>
 8010b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b18:	f383 8811 	msr	BASEPRI, r3
 8010b1c:	f3bf 8f6f 	isb	sy
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	613b      	str	r3, [r7, #16]
 8010b26:	e7fe      	b.n	8010b26 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010b28:	697b      	ldr	r3, [r7, #20]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3718      	adds	r7, #24
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	20000d48 	.word	0x20000d48
 8010b38:	08012300 	.word	0x08012300
 8010b3c:	08010c75 	.word	0x08010c75
 8010b40:	20000d4c 	.word	0x20000d4c

08010b44 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b08a      	sub	sp, #40	; 0x28
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	60f8      	str	r0, [r7, #12]
 8010b4c:	60b9      	str	r1, [r7, #8]
 8010b4e:	607a      	str	r2, [r7, #4]
 8010b50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010b52:	2300      	movs	r3, #0
 8010b54:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d109      	bne.n	8010b70 <xTimerGenericCommand+0x2c>
 8010b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b60:	f383 8811 	msr	BASEPRI, r3
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	f3bf 8f4f 	dsb	sy
 8010b6c:	623b      	str	r3, [r7, #32]
 8010b6e:	e7fe      	b.n	8010b6e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010b70:	4b19      	ldr	r3, [pc, #100]	; (8010bd8 <xTimerGenericCommand+0x94>)
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d02a      	beq.n	8010bce <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	2b05      	cmp	r3, #5
 8010b88:	dc18      	bgt.n	8010bbc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010b8a:	f7ff feb5 	bl	80108f8 <xTaskGetSchedulerState>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	2b02      	cmp	r3, #2
 8010b92:	d109      	bne.n	8010ba8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010b94:	4b10      	ldr	r3, [pc, #64]	; (8010bd8 <xTimerGenericCommand+0x94>)
 8010b96:	6818      	ldr	r0, [r3, #0]
 8010b98:	f107 0110 	add.w	r1, r7, #16
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ba0:	f7fe fc4e 	bl	800f440 <xQueueGenericSend>
 8010ba4:	6278      	str	r0, [r7, #36]	; 0x24
 8010ba6:	e012      	b.n	8010bce <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010ba8:	4b0b      	ldr	r3, [pc, #44]	; (8010bd8 <xTimerGenericCommand+0x94>)
 8010baa:	6818      	ldr	r0, [r3, #0]
 8010bac:	f107 0110 	add.w	r1, r7, #16
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	f7fe fc44 	bl	800f440 <xQueueGenericSend>
 8010bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8010bba:	e008      	b.n	8010bce <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010bbc:	4b06      	ldr	r3, [pc, #24]	; (8010bd8 <xTimerGenericCommand+0x94>)
 8010bbe:	6818      	ldr	r0, [r3, #0]
 8010bc0:	f107 0110 	add.w	r1, r7, #16
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	683a      	ldr	r2, [r7, #0]
 8010bc8:	f7fe fd34 	bl	800f634 <xQueueGenericSendFromISR>
 8010bcc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3728      	adds	r7, #40	; 0x28
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	20000d48 	.word	0x20000d48

08010bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b088      	sub	sp, #32
 8010be0:	af02      	add	r7, sp, #8
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010be6:	4b22      	ldr	r3, [pc, #136]	; (8010c70 <prvProcessExpiredTimer+0x94>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	68db      	ldr	r3, [r3, #12]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	3304      	adds	r3, #4
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7fe fabb 	bl	800f170 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c00:	f003 0304 	and.w	r3, r3, #4
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d021      	beq.n	8010c4c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	699a      	ldr	r2, [r3, #24]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	18d1      	adds	r1, r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	683a      	ldr	r2, [r7, #0]
 8010c14:	6978      	ldr	r0, [r7, #20]
 8010c16:	f000 f8d1 	bl	8010dbc <prvInsertTimerInActiveList>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d01e      	beq.n	8010c5e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c20:	2300      	movs	r3, #0
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	2300      	movs	r3, #0
 8010c26:	687a      	ldr	r2, [r7, #4]
 8010c28:	2100      	movs	r1, #0
 8010c2a:	6978      	ldr	r0, [r7, #20]
 8010c2c:	f7ff ff8a 	bl	8010b44 <xTimerGenericCommand>
 8010c30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d112      	bne.n	8010c5e <prvProcessExpiredTimer+0x82>
 8010c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3c:	f383 8811 	msr	BASEPRI, r3
 8010c40:	f3bf 8f6f 	isb	sy
 8010c44:	f3bf 8f4f 	dsb	sy
 8010c48:	60fb      	str	r3, [r7, #12]
 8010c4a:	e7fe      	b.n	8010c4a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c52:	f023 0301 	bic.w	r3, r3, #1
 8010c56:	b2da      	uxtb	r2, r3
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	6a1b      	ldr	r3, [r3, #32]
 8010c62:	6978      	ldr	r0, [r7, #20]
 8010c64:	4798      	blx	r3
}
 8010c66:	bf00      	nop
 8010c68:	3718      	adds	r7, #24
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	20000d40 	.word	0x20000d40

08010c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c7c:	f107 0308 	add.w	r3, r7, #8
 8010c80:	4618      	mov	r0, r3
 8010c82:	f000 f857 	bl	8010d34 <prvGetNextExpireTime>
 8010c86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f000 f803 	bl	8010c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010c92:	f000 f8d5 	bl	8010e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010c96:	e7f1      	b.n	8010c7c <prvTimerTask+0x8>

08010c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010ca2:	f7ff fa57 	bl	8010154 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010ca6:	f107 0308 	add.w	r3, r7, #8
 8010caa:	4618      	mov	r0, r3
 8010cac:	f000 f866 	bl	8010d7c <prvSampleTimeNow>
 8010cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d130      	bne.n	8010d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d10a      	bne.n	8010cd4 <prvProcessTimerOrBlockTask+0x3c>
 8010cbe:	687a      	ldr	r2, [r7, #4]
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d806      	bhi.n	8010cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010cc6:	f7ff fa53 	bl	8010170 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010cca:	68f9      	ldr	r1, [r7, #12]
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	f7ff ff85 	bl	8010bdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010cd2:	e024      	b.n	8010d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d008      	beq.n	8010cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010cda:	4b13      	ldr	r3, [pc, #76]	; (8010d28 <prvProcessTimerOrBlockTask+0x90>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d101      	bne.n	8010ce8 <prvProcessTimerOrBlockTask+0x50>
 8010ce4:	2301      	movs	r3, #1
 8010ce6:	e000      	b.n	8010cea <prvProcessTimerOrBlockTask+0x52>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010cec:	4b0f      	ldr	r3, [pc, #60]	; (8010d2c <prvProcessTimerOrBlockTask+0x94>)
 8010cee:	6818      	ldr	r0, [r3, #0]
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	683a      	ldr	r2, [r7, #0]
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	f7fe ffc1 	bl	800fc80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010cfe:	f7ff fa37 	bl	8010170 <xTaskResumeAll>
 8010d02:	4603      	mov	r3, r0
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d10a      	bne.n	8010d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010d08:	4b09      	ldr	r3, [pc, #36]	; (8010d30 <prvProcessTimerOrBlockTask+0x98>)
 8010d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d0e:	601a      	str	r2, [r3, #0]
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	f3bf 8f6f 	isb	sy
}
 8010d18:	e001      	b.n	8010d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010d1a:	f7ff fa29 	bl	8010170 <xTaskResumeAll>
}
 8010d1e:	bf00      	nop
 8010d20:	3710      	adds	r7, #16
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}
 8010d26:	bf00      	nop
 8010d28:	20000d44 	.word	0x20000d44
 8010d2c:	20000d48 	.word	0x20000d48
 8010d30:	e000ed04 	.word	0xe000ed04

08010d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010d34:	b480      	push	{r7}
 8010d36:	b085      	sub	sp, #20
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010d3c:	4b0e      	ldr	r3, [pc, #56]	; (8010d78 <prvGetNextExpireTime+0x44>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d101      	bne.n	8010d4a <prvGetNextExpireTime+0x16>
 8010d46:	2201      	movs	r2, #1
 8010d48:	e000      	b.n	8010d4c <prvGetNextExpireTime+0x18>
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d105      	bne.n	8010d64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <prvGetNextExpireTime+0x44>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	68db      	ldr	r3, [r3, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	60fb      	str	r3, [r7, #12]
 8010d62:	e001      	b.n	8010d68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010d64:	2300      	movs	r3, #0
 8010d66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010d68:	68fb      	ldr	r3, [r7, #12]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3714      	adds	r7, #20
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr
 8010d76:	bf00      	nop
 8010d78:	20000d40 	.word	0x20000d40

08010d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b084      	sub	sp, #16
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010d84:	f7ff fa90 	bl	80102a8 <xTaskGetTickCount>
 8010d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010d8a:	4b0b      	ldr	r3, [pc, #44]	; (8010db8 <prvSampleTimeNow+0x3c>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	68fa      	ldr	r2, [r7, #12]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d205      	bcs.n	8010da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010d94:	f000 f930 	bl	8010ff8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	601a      	str	r2, [r3, #0]
 8010d9e:	e002      	b.n	8010da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010da6:	4a04      	ldr	r2, [pc, #16]	; (8010db8 <prvSampleTimeNow+0x3c>)
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010dac:	68fb      	ldr	r3, [r7, #12]
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3710      	adds	r7, #16
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	20000d50 	.word	0x20000d50

08010dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b086      	sub	sp, #24
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	607a      	str	r2, [r7, #4]
 8010dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010dca:	2300      	movs	r3, #0
 8010dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	68fa      	ldr	r2, [r7, #12]
 8010dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010dda:	68ba      	ldr	r2, [r7, #8]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d812      	bhi.n	8010e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010de2:	687a      	ldr	r2, [r7, #4]
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	1ad2      	subs	r2, r2, r3
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	699b      	ldr	r3, [r3, #24]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d302      	bcc.n	8010df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010df0:	2301      	movs	r3, #1
 8010df2:	617b      	str	r3, [r7, #20]
 8010df4:	e01b      	b.n	8010e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010df6:	4b10      	ldr	r3, [pc, #64]	; (8010e38 <prvInsertTimerInActiveList+0x7c>)
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	3304      	adds	r3, #4
 8010dfe:	4619      	mov	r1, r3
 8010e00:	4610      	mov	r0, r2
 8010e02:	f7fe f97c 	bl	800f0fe <vListInsert>
 8010e06:	e012      	b.n	8010e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010e08:	687a      	ldr	r2, [r7, #4]
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	429a      	cmp	r2, r3
 8010e0e:	d206      	bcs.n	8010e1e <prvInsertTimerInActiveList+0x62>
 8010e10:	68ba      	ldr	r2, [r7, #8]
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d302      	bcc.n	8010e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	617b      	str	r3, [r7, #20]
 8010e1c:	e007      	b.n	8010e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010e1e:	4b07      	ldr	r3, [pc, #28]	; (8010e3c <prvInsertTimerInActiveList+0x80>)
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	3304      	adds	r3, #4
 8010e26:	4619      	mov	r1, r3
 8010e28:	4610      	mov	r0, r2
 8010e2a:	f7fe f968 	bl	800f0fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010e2e:	697b      	ldr	r3, [r7, #20]
}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3718      	adds	r7, #24
 8010e34:	46bd      	mov	sp, r7
 8010e36:	bd80      	pop	{r7, pc}
 8010e38:	20000d44 	.word	0x20000d44
 8010e3c:	20000d40 	.word	0x20000d40

08010e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b08e      	sub	sp, #56	; 0x38
 8010e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e46:	e0c6      	b.n	8010fd6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	da17      	bge.n	8010e7e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010e4e:	1d3b      	adds	r3, r7, #4
 8010e50:	3304      	adds	r3, #4
 8010e52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d109      	bne.n	8010e6e <prvProcessReceivedCommands+0x2e>
 8010e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5e:	f383 8811 	msr	BASEPRI, r3
 8010e62:	f3bf 8f6f 	isb	sy
 8010e66:	f3bf 8f4f 	dsb	sy
 8010e6a:	61fb      	str	r3, [r7, #28]
 8010e6c:	e7fe      	b.n	8010e6c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e74:	6850      	ldr	r0, [r2, #4]
 8010e76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e78:	6892      	ldr	r2, [r2, #8]
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f2c0 80a7 	blt.w	8010fd4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e8c:	695b      	ldr	r3, [r3, #20]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d004      	beq.n	8010e9c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e94:	3304      	adds	r3, #4
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fe f96a 	bl	800f170 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010e9c:	463b      	mov	r3, r7
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7ff ff6c 	bl	8010d7c <prvSampleTimeNow>
 8010ea4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2b09      	cmp	r3, #9
 8010eaa:	f200 8094 	bhi.w	8010fd6 <prvProcessReceivedCommands+0x196>
 8010eae:	a201      	add	r2, pc, #4	; (adr r2, 8010eb4 <prvProcessReceivedCommands+0x74>)
 8010eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb4:	08010edd 	.word	0x08010edd
 8010eb8:	08010edd 	.word	0x08010edd
 8010ebc:	08010edd 	.word	0x08010edd
 8010ec0:	08010f4f 	.word	0x08010f4f
 8010ec4:	08010f63 	.word	0x08010f63
 8010ec8:	08010fab 	.word	0x08010fab
 8010ecc:	08010edd 	.word	0x08010edd
 8010ed0:	08010edd 	.word	0x08010edd
 8010ed4:	08010f4f 	.word	0x08010f4f
 8010ed8:	08010f63 	.word	0x08010f63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ee2:	f043 0301 	orr.w	r3, r3, #1
 8010ee6:	b2da      	uxtb	r2, r3
 8010ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010eee:	68ba      	ldr	r2, [r7, #8]
 8010ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef2:	699b      	ldr	r3, [r3, #24]
 8010ef4:	18d1      	adds	r1, r2, r3
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010efc:	f7ff ff5e 	bl	8010dbc <prvInsertTimerInActiveList>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d067      	beq.n	8010fd6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f08:	6a1b      	ldr	r3, [r3, #32]
 8010f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f14:	f003 0304 	and.w	r3, r3, #4
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d05c      	beq.n	8010fd6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010f1c:	68ba      	ldr	r2, [r7, #8]
 8010f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f20:	699b      	ldr	r3, [r3, #24]
 8010f22:	441a      	add	r2, r3
 8010f24:	2300      	movs	r3, #0
 8010f26:	9300      	str	r3, [sp, #0]
 8010f28:	2300      	movs	r3, #0
 8010f2a:	2100      	movs	r1, #0
 8010f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010f2e:	f7ff fe09 	bl	8010b44 <xTimerGenericCommand>
 8010f32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010f34:	6a3b      	ldr	r3, [r7, #32]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d14d      	bne.n	8010fd6 <prvProcessReceivedCommands+0x196>
 8010f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3e:	f383 8811 	msr	BASEPRI, r3
 8010f42:	f3bf 8f6f 	isb	sy
 8010f46:	f3bf 8f4f 	dsb	sy
 8010f4a:	61bb      	str	r3, [r7, #24]
 8010f4c:	e7fe      	b.n	8010f4c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f54:	f023 0301 	bic.w	r3, r3, #1
 8010f58:	b2da      	uxtb	r2, r3
 8010f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010f60:	e039      	b.n	8010fd6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010f68:	f043 0301 	orr.w	r3, r3, #1
 8010f6c:	b2da      	uxtb	r2, r3
 8010f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010f74:	68ba      	ldr	r2, [r7, #8]
 8010f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f7c:	699b      	ldr	r3, [r3, #24]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d109      	bne.n	8010f96 <prvProcessReceivedCommands+0x156>
 8010f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	617b      	str	r3, [r7, #20]
 8010f94:	e7fe      	b.n	8010f94 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f98:	699a      	ldr	r2, [r3, #24]
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	18d1      	adds	r1, r2, r3
 8010f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fa4:	f7ff ff0a 	bl	8010dbc <prvInsertTimerInActiveList>
					break;
 8010fa8:	e015      	b.n	8010fd6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fb0:	f003 0302 	and.w	r3, r3, #2
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d103      	bne.n	8010fc0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8010fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010fba:	f000 fbc3 	bl	8011744 <vPortFree>
 8010fbe:	e00a      	b.n	8010fd6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010fc6:	f023 0301 	bic.w	r3, r3, #1
 8010fca:	b2da      	uxtb	r2, r3
 8010fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010fd2:	e000      	b.n	8010fd6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010fd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010fd6:	4b07      	ldr	r3, [pc, #28]	; (8010ff4 <prvProcessReceivedCommands+0x1b4>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	1d39      	adds	r1, r7, #4
 8010fdc:	2200      	movs	r2, #0
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fe fbbc 	bl	800f75c <xQueueReceive>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	f47f af2e 	bne.w	8010e48 <prvProcessReceivedCommands+0x8>
	}
}
 8010fec:	bf00      	nop
 8010fee:	3730      	adds	r7, #48	; 0x30
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	20000d48 	.word	0x20000d48

08010ff8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b088      	sub	sp, #32
 8010ffc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010ffe:	e047      	b.n	8011090 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011000:	4b2d      	ldr	r3, [pc, #180]	; (80110b8 <prvSwitchTimerLists+0xc0>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	68db      	ldr	r3, [r3, #12]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801100a:	4b2b      	ldr	r3, [pc, #172]	; (80110b8 <prvSwitchTimerLists+0xc0>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	68db      	ldr	r3, [r3, #12]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	3304      	adds	r3, #4
 8011018:	4618      	mov	r0, r3
 801101a:	f7fe f8a9 	bl	800f170 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	6a1b      	ldr	r3, [r3, #32]
 8011022:	68f8      	ldr	r0, [r7, #12]
 8011024:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801102c:	f003 0304 	and.w	r3, r3, #4
 8011030:	2b00      	cmp	r3, #0
 8011032:	d02d      	beq.n	8011090 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	699b      	ldr	r3, [r3, #24]
 8011038:	693a      	ldr	r2, [r7, #16]
 801103a:	4413      	add	r3, r2
 801103c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	429a      	cmp	r2, r3
 8011044:	d90e      	bls.n	8011064 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	68ba      	ldr	r2, [r7, #8]
 801104a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011052:	4b19      	ldr	r3, [pc, #100]	; (80110b8 <prvSwitchTimerLists+0xc0>)
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	3304      	adds	r3, #4
 801105a:	4619      	mov	r1, r3
 801105c:	4610      	mov	r0, r2
 801105e:	f7fe f84e 	bl	800f0fe <vListInsert>
 8011062:	e015      	b.n	8011090 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011064:	2300      	movs	r3, #0
 8011066:	9300      	str	r3, [sp, #0]
 8011068:	2300      	movs	r3, #0
 801106a:	693a      	ldr	r2, [r7, #16]
 801106c:	2100      	movs	r1, #0
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	f7ff fd68 	bl	8010b44 <xTimerGenericCommand>
 8011074:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d109      	bne.n	8011090 <prvSwitchTimerLists+0x98>
 801107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011080:	f383 8811 	msr	BASEPRI, r3
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	603b      	str	r3, [r7, #0]
 801108e:	e7fe      	b.n	801108e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011090:	4b09      	ldr	r3, [pc, #36]	; (80110b8 <prvSwitchTimerLists+0xc0>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d1b2      	bne.n	8011000 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801109a:	4b07      	ldr	r3, [pc, #28]	; (80110b8 <prvSwitchTimerLists+0xc0>)
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80110a0:	4b06      	ldr	r3, [pc, #24]	; (80110bc <prvSwitchTimerLists+0xc4>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a04      	ldr	r2, [pc, #16]	; (80110b8 <prvSwitchTimerLists+0xc0>)
 80110a6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80110a8:	4a04      	ldr	r2, [pc, #16]	; (80110bc <prvSwitchTimerLists+0xc4>)
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	6013      	str	r3, [r2, #0]
}
 80110ae:	bf00      	nop
 80110b0:	3718      	adds	r7, #24
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
 80110b6:	bf00      	nop
 80110b8:	20000d40 	.word	0x20000d40
 80110bc:	20000d44 	.word	0x20000d44

080110c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80110c6:	f000 f961 	bl	801138c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80110ca:	4b15      	ldr	r3, [pc, #84]	; (8011120 <prvCheckForValidListAndQueue+0x60>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d120      	bne.n	8011114 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80110d2:	4814      	ldr	r0, [pc, #80]	; (8011124 <prvCheckForValidListAndQueue+0x64>)
 80110d4:	f7fd ffc2 	bl	800f05c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80110d8:	4813      	ldr	r0, [pc, #76]	; (8011128 <prvCheckForValidListAndQueue+0x68>)
 80110da:	f7fd ffbf 	bl	800f05c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80110de:	4b13      	ldr	r3, [pc, #76]	; (801112c <prvCheckForValidListAndQueue+0x6c>)
 80110e0:	4a10      	ldr	r2, [pc, #64]	; (8011124 <prvCheckForValidListAndQueue+0x64>)
 80110e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80110e4:	4b12      	ldr	r3, [pc, #72]	; (8011130 <prvCheckForValidListAndQueue+0x70>)
 80110e6:	4a10      	ldr	r2, [pc, #64]	; (8011128 <prvCheckForValidListAndQueue+0x68>)
 80110e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80110ea:	2300      	movs	r3, #0
 80110ec:	9300      	str	r3, [sp, #0]
 80110ee:	4b11      	ldr	r3, [pc, #68]	; (8011134 <prvCheckForValidListAndQueue+0x74>)
 80110f0:	4a11      	ldr	r2, [pc, #68]	; (8011138 <prvCheckForValidListAndQueue+0x78>)
 80110f2:	2110      	movs	r1, #16
 80110f4:	200a      	movs	r0, #10
 80110f6:	f7fe f8cd 	bl	800f294 <xQueueGenericCreateStatic>
 80110fa:	4602      	mov	r2, r0
 80110fc:	4b08      	ldr	r3, [pc, #32]	; (8011120 <prvCheckForValidListAndQueue+0x60>)
 80110fe:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011100:	4b07      	ldr	r3, [pc, #28]	; (8011120 <prvCheckForValidListAndQueue+0x60>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d005      	beq.n	8011114 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011108:	4b05      	ldr	r3, [pc, #20]	; (8011120 <prvCheckForValidListAndQueue+0x60>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	490b      	ldr	r1, [pc, #44]	; (801113c <prvCheckForValidListAndQueue+0x7c>)
 801110e:	4618      	mov	r0, r3
 8011110:	f7fe fd8e 	bl	800fc30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011114:	f000 f968 	bl	80113e8 <vPortExitCritical>
}
 8011118:	bf00      	nop
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	20000d48 	.word	0x20000d48
 8011124:	20000d18 	.word	0x20000d18
 8011128:	20000d2c 	.word	0x20000d2c
 801112c:	20000d40 	.word	0x20000d40
 8011130:	20000d44 	.word	0x20000d44
 8011134:	20000df4 	.word	0x20000df4
 8011138:	20000d54 	.word	0x20000d54
 801113c:	08012308 	.word	0x08012308

08011140 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	60b9      	str	r1, [r7, #8]
 801114a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	3b04      	subs	r3, #4
 8011150:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	3b04      	subs	r3, #4
 801115e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	f023 0201 	bic.w	r2, r3, #1
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	3b04      	subs	r3, #4
 801116e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011170:	4a0c      	ldr	r2, [pc, #48]	; (80111a4 <pxPortInitialiseStack+0x64>)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	3b14      	subs	r3, #20
 801117a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	3b04      	subs	r3, #4
 8011186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	f06f 0202 	mvn.w	r2, #2
 801118e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	3b20      	subs	r3, #32
 8011194:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011196:	68fb      	ldr	r3, [r7, #12]
}
 8011198:	4618      	mov	r0, r3
 801119a:	3714      	adds	r7, #20
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr
 80111a4:	080111a9 	.word	0x080111a9

080111a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80111a8:	b480      	push	{r7}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80111b2:	4b11      	ldr	r3, [pc, #68]	; (80111f8 <prvTaskExitError+0x50>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ba:	d009      	beq.n	80111d0 <prvTaskExitError+0x28>
 80111bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c0:	f383 8811 	msr	BASEPRI, r3
 80111c4:	f3bf 8f6f 	isb	sy
 80111c8:	f3bf 8f4f 	dsb	sy
 80111cc:	60fb      	str	r3, [r7, #12]
 80111ce:	e7fe      	b.n	80111ce <prvTaskExitError+0x26>
 80111d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d4:	f383 8811 	msr	BASEPRI, r3
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	f3bf 8f4f 	dsb	sy
 80111e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80111e2:	bf00      	nop
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d0fc      	beq.n	80111e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80111ea:	bf00      	nop
 80111ec:	3714      	adds	r7, #20
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	20000084 	.word	0x20000084
 80111fc:	00000000 	.word	0x00000000

08011200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011200:	4b07      	ldr	r3, [pc, #28]	; (8011220 <pxCurrentTCBConst2>)
 8011202:	6819      	ldr	r1, [r3, #0]
 8011204:	6808      	ldr	r0, [r1, #0]
 8011206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801120a:	f380 8809 	msr	PSP, r0
 801120e:	f3bf 8f6f 	isb	sy
 8011212:	f04f 0000 	mov.w	r0, #0
 8011216:	f380 8811 	msr	BASEPRI, r0
 801121a:	4770      	bx	lr
 801121c:	f3af 8000 	nop.w

08011220 <pxCurrentTCBConst2>:
 8011220:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011224:	bf00      	nop
 8011226:	bf00      	nop

08011228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011228:	4808      	ldr	r0, [pc, #32]	; (801124c <prvPortStartFirstTask+0x24>)
 801122a:	6800      	ldr	r0, [r0, #0]
 801122c:	6800      	ldr	r0, [r0, #0]
 801122e:	f380 8808 	msr	MSP, r0
 8011232:	f04f 0000 	mov.w	r0, #0
 8011236:	f380 8814 	msr	CONTROL, r0
 801123a:	b662      	cpsie	i
 801123c:	b661      	cpsie	f
 801123e:	f3bf 8f4f 	dsb	sy
 8011242:	f3bf 8f6f 	isb	sy
 8011246:	df00      	svc	0
 8011248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801124a:	bf00      	nop
 801124c:	e000ed08 	.word	0xe000ed08

08011250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b086      	sub	sp, #24
 8011254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011256:	4b44      	ldr	r3, [pc, #272]	; (8011368 <xPortStartScheduler+0x118>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	4a44      	ldr	r2, [pc, #272]	; (801136c <xPortStartScheduler+0x11c>)
 801125c:	4293      	cmp	r3, r2
 801125e:	d109      	bne.n	8011274 <xPortStartScheduler+0x24>
 8011260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011264:	f383 8811 	msr	BASEPRI, r3
 8011268:	f3bf 8f6f 	isb	sy
 801126c:	f3bf 8f4f 	dsb	sy
 8011270:	613b      	str	r3, [r7, #16]
 8011272:	e7fe      	b.n	8011272 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011274:	4b3c      	ldr	r3, [pc, #240]	; (8011368 <xPortStartScheduler+0x118>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a3d      	ldr	r2, [pc, #244]	; (8011370 <xPortStartScheduler+0x120>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d109      	bne.n	8011292 <xPortStartScheduler+0x42>
 801127e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011282:	f383 8811 	msr	BASEPRI, r3
 8011286:	f3bf 8f6f 	isb	sy
 801128a:	f3bf 8f4f 	dsb	sy
 801128e:	60fb      	str	r3, [r7, #12]
 8011290:	e7fe      	b.n	8011290 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011292:	4b38      	ldr	r3, [pc, #224]	; (8011374 <xPortStartScheduler+0x124>)
 8011294:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	b2db      	uxtb	r3, r3
 801129c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	22ff      	movs	r2, #255	; 0xff
 80112a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80112ac:	78fb      	ldrb	r3, [r7, #3]
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80112b4:	b2da      	uxtb	r2, r3
 80112b6:	4b30      	ldr	r3, [pc, #192]	; (8011378 <xPortStartScheduler+0x128>)
 80112b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80112ba:	4b30      	ldr	r3, [pc, #192]	; (801137c <xPortStartScheduler+0x12c>)
 80112bc:	2207      	movs	r2, #7
 80112be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112c0:	e009      	b.n	80112d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80112c2:	4b2e      	ldr	r3, [pc, #184]	; (801137c <xPortStartScheduler+0x12c>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	3b01      	subs	r3, #1
 80112c8:	4a2c      	ldr	r2, [pc, #176]	; (801137c <xPortStartScheduler+0x12c>)
 80112ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80112cc:	78fb      	ldrb	r3, [r7, #3]
 80112ce:	b2db      	uxtb	r3, r3
 80112d0:	005b      	lsls	r3, r3, #1
 80112d2:	b2db      	uxtb	r3, r3
 80112d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112d6:	78fb      	ldrb	r3, [r7, #3]
 80112d8:	b2db      	uxtb	r3, r3
 80112da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112de:	2b80      	cmp	r3, #128	; 0x80
 80112e0:	d0ef      	beq.n	80112c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80112e2:	4b26      	ldr	r3, [pc, #152]	; (801137c <xPortStartScheduler+0x12c>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	f1c3 0307 	rsb	r3, r3, #7
 80112ea:	2b04      	cmp	r3, #4
 80112ec:	d009      	beq.n	8011302 <xPortStartScheduler+0xb2>
 80112ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112f2:	f383 8811 	msr	BASEPRI, r3
 80112f6:	f3bf 8f6f 	isb	sy
 80112fa:	f3bf 8f4f 	dsb	sy
 80112fe:	60bb      	str	r3, [r7, #8]
 8011300:	e7fe      	b.n	8011300 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011302:	4b1e      	ldr	r3, [pc, #120]	; (801137c <xPortStartScheduler+0x12c>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	021b      	lsls	r3, r3, #8
 8011308:	4a1c      	ldr	r2, [pc, #112]	; (801137c <xPortStartScheduler+0x12c>)
 801130a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801130c:	4b1b      	ldr	r3, [pc, #108]	; (801137c <xPortStartScheduler+0x12c>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011314:	4a19      	ldr	r2, [pc, #100]	; (801137c <xPortStartScheduler+0x12c>)
 8011316:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	b2da      	uxtb	r2, r3
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011320:	4b17      	ldr	r3, [pc, #92]	; (8011380 <xPortStartScheduler+0x130>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a16      	ldr	r2, [pc, #88]	; (8011380 <xPortStartScheduler+0x130>)
 8011326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801132a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801132c:	4b14      	ldr	r3, [pc, #80]	; (8011380 <xPortStartScheduler+0x130>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4a13      	ldr	r2, [pc, #76]	; (8011380 <xPortStartScheduler+0x130>)
 8011332:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011336:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011338:	f000 f8d6 	bl	80114e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801133c:	4b11      	ldr	r3, [pc, #68]	; (8011384 <xPortStartScheduler+0x134>)
 801133e:	2200      	movs	r2, #0
 8011340:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011342:	f000 f8f5 	bl	8011530 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011346:	4b10      	ldr	r3, [pc, #64]	; (8011388 <xPortStartScheduler+0x138>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	4a0f      	ldr	r2, [pc, #60]	; (8011388 <xPortStartScheduler+0x138>)
 801134c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011350:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011352:	f7ff ff69 	bl	8011228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011356:	f7ff f86f 	bl	8010438 <vTaskSwitchContext>
	prvTaskExitError();
 801135a:	f7ff ff25 	bl	80111a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801135e:	2300      	movs	r3, #0
}
 8011360:	4618      	mov	r0, r3
 8011362:	3718      	adds	r7, #24
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	e000ed00 	.word	0xe000ed00
 801136c:	410fc271 	.word	0x410fc271
 8011370:	410fc270 	.word	0x410fc270
 8011374:	e000e400 	.word	0xe000e400
 8011378:	20000e44 	.word	0x20000e44
 801137c:	20000e48 	.word	0x20000e48
 8011380:	e000ed20 	.word	0xe000ed20
 8011384:	20000084 	.word	0x20000084
 8011388:	e000ef34 	.word	0xe000ef34

0801138c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801138c:	b480      	push	{r7}
 801138e:	b083      	sub	sp, #12
 8011390:	af00      	add	r7, sp, #0
 8011392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011396:	f383 8811 	msr	BASEPRI, r3
 801139a:	f3bf 8f6f 	isb	sy
 801139e:	f3bf 8f4f 	dsb	sy
 80113a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80113a4:	4b0e      	ldr	r3, [pc, #56]	; (80113e0 <vPortEnterCritical+0x54>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	3301      	adds	r3, #1
 80113aa:	4a0d      	ldr	r2, [pc, #52]	; (80113e0 <vPortEnterCritical+0x54>)
 80113ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80113ae:	4b0c      	ldr	r3, [pc, #48]	; (80113e0 <vPortEnterCritical+0x54>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2b01      	cmp	r3, #1
 80113b4:	d10e      	bne.n	80113d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80113b6:	4b0b      	ldr	r3, [pc, #44]	; (80113e4 <vPortEnterCritical+0x58>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d009      	beq.n	80113d4 <vPortEnterCritical+0x48>
 80113c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c4:	f383 8811 	msr	BASEPRI, r3
 80113c8:	f3bf 8f6f 	isb	sy
 80113cc:	f3bf 8f4f 	dsb	sy
 80113d0:	603b      	str	r3, [r7, #0]
 80113d2:	e7fe      	b.n	80113d2 <vPortEnterCritical+0x46>
	}
}
 80113d4:	bf00      	nop
 80113d6:	370c      	adds	r7, #12
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr
 80113e0:	20000084 	.word	0x20000084
 80113e4:	e000ed04 	.word	0xe000ed04

080113e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80113e8:	b480      	push	{r7}
 80113ea:	b083      	sub	sp, #12
 80113ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80113ee:	4b11      	ldr	r3, [pc, #68]	; (8011434 <vPortExitCritical+0x4c>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d109      	bne.n	801140a <vPortExitCritical+0x22>
 80113f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113fa:	f383 8811 	msr	BASEPRI, r3
 80113fe:	f3bf 8f6f 	isb	sy
 8011402:	f3bf 8f4f 	dsb	sy
 8011406:	607b      	str	r3, [r7, #4]
 8011408:	e7fe      	b.n	8011408 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801140a:	4b0a      	ldr	r3, [pc, #40]	; (8011434 <vPortExitCritical+0x4c>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	3b01      	subs	r3, #1
 8011410:	4a08      	ldr	r2, [pc, #32]	; (8011434 <vPortExitCritical+0x4c>)
 8011412:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011414:	4b07      	ldr	r3, [pc, #28]	; (8011434 <vPortExitCritical+0x4c>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d104      	bne.n	8011426 <vPortExitCritical+0x3e>
 801141c:	2300      	movs	r3, #0
 801141e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011426:	bf00      	nop
 8011428:	370c      	adds	r7, #12
 801142a:	46bd      	mov	sp, r7
 801142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011430:	4770      	bx	lr
 8011432:	bf00      	nop
 8011434:	20000084 	.word	0x20000084
	...

08011440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011440:	f3ef 8009 	mrs	r0, PSP
 8011444:	f3bf 8f6f 	isb	sy
 8011448:	4b15      	ldr	r3, [pc, #84]	; (80114a0 <pxCurrentTCBConst>)
 801144a:	681a      	ldr	r2, [r3, #0]
 801144c:	f01e 0f10 	tst.w	lr, #16
 8011450:	bf08      	it	eq
 8011452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145a:	6010      	str	r0, [r2, #0]
 801145c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011464:	f380 8811 	msr	BASEPRI, r0
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	f3bf 8f6f 	isb	sy
 8011470:	f7fe ffe2 	bl	8010438 <vTaskSwitchContext>
 8011474:	f04f 0000 	mov.w	r0, #0
 8011478:	f380 8811 	msr	BASEPRI, r0
 801147c:	bc09      	pop	{r0, r3}
 801147e:	6819      	ldr	r1, [r3, #0]
 8011480:	6808      	ldr	r0, [r1, #0]
 8011482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011486:	f01e 0f10 	tst.w	lr, #16
 801148a:	bf08      	it	eq
 801148c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011490:	f380 8809 	msr	PSP, r0
 8011494:	f3bf 8f6f 	isb	sy
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	f3af 8000 	nop.w

080114a0 <pxCurrentTCBConst>:
 80114a0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80114a4:	bf00      	nop
 80114a6:	bf00      	nop

080114a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
	__asm volatile
 80114ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80114c0:	f7fe ff02 	bl	80102c8 <xTaskIncrementTick>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d003      	beq.n	80114d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80114ca:	4b06      	ldr	r3, [pc, #24]	; (80114e4 <SysTick_Handler+0x3c>)
 80114cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114d0:	601a      	str	r2, [r3, #0]
 80114d2:	2300      	movs	r3, #0
 80114d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80114dc:	bf00      	nop
 80114de:	3708      	adds	r7, #8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	e000ed04 	.word	0xe000ed04

080114e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80114e8:	b480      	push	{r7}
 80114ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80114ec:	4b0b      	ldr	r3, [pc, #44]	; (801151c <vPortSetupTimerInterrupt+0x34>)
 80114ee:	2200      	movs	r2, #0
 80114f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80114f2:	4b0b      	ldr	r3, [pc, #44]	; (8011520 <vPortSetupTimerInterrupt+0x38>)
 80114f4:	2200      	movs	r2, #0
 80114f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80114f8:	4b0a      	ldr	r3, [pc, #40]	; (8011524 <vPortSetupTimerInterrupt+0x3c>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	4a0a      	ldr	r2, [pc, #40]	; (8011528 <vPortSetupTimerInterrupt+0x40>)
 80114fe:	fba2 2303 	umull	r2, r3, r2, r3
 8011502:	099b      	lsrs	r3, r3, #6
 8011504:	4a09      	ldr	r2, [pc, #36]	; (801152c <vPortSetupTimerInterrupt+0x44>)
 8011506:	3b01      	subs	r3, #1
 8011508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801150a:	4b04      	ldr	r3, [pc, #16]	; (801151c <vPortSetupTimerInterrupt+0x34>)
 801150c:	2207      	movs	r2, #7
 801150e:	601a      	str	r2, [r3, #0]
}
 8011510:	bf00      	nop
 8011512:	46bd      	mov	sp, r7
 8011514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop
 801151c:	e000e010 	.word	0xe000e010
 8011520:	e000e018 	.word	0xe000e018
 8011524:	20000000 	.word	0x20000000
 8011528:	10624dd3 	.word	0x10624dd3
 801152c:	e000e014 	.word	0xe000e014

08011530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011540 <vPortEnableVFP+0x10>
 8011534:	6801      	ldr	r1, [r0, #0]
 8011536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801153a:	6001      	str	r1, [r0, #0]
 801153c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801153e:	bf00      	nop
 8011540:	e000ed88 	.word	0xe000ed88

08011544 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011544:	b480      	push	{r7}
 8011546:	b085      	sub	sp, #20
 8011548:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801154a:	f3ef 8305 	mrs	r3, IPSR
 801154e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	2b0f      	cmp	r3, #15
 8011554:	d913      	bls.n	801157e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011556:	4a16      	ldr	r2, [pc, #88]	; (80115b0 <vPortValidateInterruptPriority+0x6c>)
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	4413      	add	r3, r2
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011560:	4b14      	ldr	r3, [pc, #80]	; (80115b4 <vPortValidateInterruptPriority+0x70>)
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	7afa      	ldrb	r2, [r7, #11]
 8011566:	429a      	cmp	r2, r3
 8011568:	d209      	bcs.n	801157e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801156a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156e:	f383 8811 	msr	BASEPRI, r3
 8011572:	f3bf 8f6f 	isb	sy
 8011576:	f3bf 8f4f 	dsb	sy
 801157a:	607b      	str	r3, [r7, #4]
 801157c:	e7fe      	b.n	801157c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801157e:	4b0e      	ldr	r3, [pc, #56]	; (80115b8 <vPortValidateInterruptPriority+0x74>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011586:	4b0d      	ldr	r3, [pc, #52]	; (80115bc <vPortValidateInterruptPriority+0x78>)
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	429a      	cmp	r2, r3
 801158c:	d909      	bls.n	80115a2 <vPortValidateInterruptPriority+0x5e>
 801158e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011592:	f383 8811 	msr	BASEPRI, r3
 8011596:	f3bf 8f6f 	isb	sy
 801159a:	f3bf 8f4f 	dsb	sy
 801159e:	603b      	str	r3, [r7, #0]
 80115a0:	e7fe      	b.n	80115a0 <vPortValidateInterruptPriority+0x5c>
	}
 80115a2:	bf00      	nop
 80115a4:	3714      	adds	r7, #20
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop
 80115b0:	e000e3f0 	.word	0xe000e3f0
 80115b4:	20000e44 	.word	0x20000e44
 80115b8:	e000ed0c 	.word	0xe000ed0c
 80115bc:	20000e48 	.word	0x20000e48

080115c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b08a      	sub	sp, #40	; 0x28
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80115c8:	2300      	movs	r3, #0
 80115ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80115cc:	f7fe fdc2 	bl	8010154 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115d0:	4b57      	ldr	r3, [pc, #348]	; (8011730 <pvPortMalloc+0x170>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d101      	bne.n	80115dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115d8:	f000 f90c 	bl	80117f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115dc:	4b55      	ldr	r3, [pc, #340]	; (8011734 <pvPortMalloc+0x174>)
 80115de:	681a      	ldr	r2, [r3, #0]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	4013      	ands	r3, r2
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	f040 808c 	bne.w	8011702 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d01c      	beq.n	801162a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80115f0:	2208      	movs	r2, #8
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4413      	add	r3, r2
 80115f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f003 0307 	and.w	r3, r3, #7
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d013      	beq.n	801162a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f023 0307 	bic.w	r3, r3, #7
 8011608:	3308      	adds	r3, #8
 801160a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f003 0307 	and.w	r3, r3, #7
 8011612:	2b00      	cmp	r3, #0
 8011614:	d009      	beq.n	801162a <pvPortMalloc+0x6a>
 8011616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801161a:	f383 8811 	msr	BASEPRI, r3
 801161e:	f3bf 8f6f 	isb	sy
 8011622:	f3bf 8f4f 	dsb	sy
 8011626:	617b      	str	r3, [r7, #20]
 8011628:	e7fe      	b.n	8011628 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d068      	beq.n	8011702 <pvPortMalloc+0x142>
 8011630:	4b41      	ldr	r3, [pc, #260]	; (8011738 <pvPortMalloc+0x178>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	429a      	cmp	r2, r3
 8011638:	d863      	bhi.n	8011702 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801163a:	4b40      	ldr	r3, [pc, #256]	; (801173c <pvPortMalloc+0x17c>)
 801163c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801163e:	4b3f      	ldr	r3, [pc, #252]	; (801173c <pvPortMalloc+0x17c>)
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011644:	e004      	b.n	8011650 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	429a      	cmp	r2, r3
 8011658:	d903      	bls.n	8011662 <pvPortMalloc+0xa2>
 801165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d1f1      	bne.n	8011646 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011662:	4b33      	ldr	r3, [pc, #204]	; (8011730 <pvPortMalloc+0x170>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011668:	429a      	cmp	r2, r3
 801166a:	d04a      	beq.n	8011702 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801166c:	6a3b      	ldr	r3, [r7, #32]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2208      	movs	r2, #8
 8011672:	4413      	add	r3, r2
 8011674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	6a3b      	ldr	r3, [r7, #32]
 801167c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011680:	685a      	ldr	r2, [r3, #4]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	1ad2      	subs	r2, r2, r3
 8011686:	2308      	movs	r3, #8
 8011688:	005b      	lsls	r3, r3, #1
 801168a:	429a      	cmp	r2, r3
 801168c:	d91e      	bls.n	80116cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	4413      	add	r3, r2
 8011694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	f003 0307 	and.w	r3, r3, #7
 801169c:	2b00      	cmp	r3, #0
 801169e:	d009      	beq.n	80116b4 <pvPortMalloc+0xf4>
 80116a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a4:	f383 8811 	msr	BASEPRI, r3
 80116a8:	f3bf 8f6f 	isb	sy
 80116ac:	f3bf 8f4f 	dsb	sy
 80116b0:	613b      	str	r3, [r7, #16]
 80116b2:	e7fe      	b.n	80116b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b6:	685a      	ldr	r2, [r3, #4]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	1ad2      	subs	r2, r2, r3
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116c6:	69b8      	ldr	r0, [r7, #24]
 80116c8:	f000 f8f6 	bl	80118b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116cc:	4b1a      	ldr	r3, [pc, #104]	; (8011738 <pvPortMalloc+0x178>)
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	4a18      	ldr	r2, [pc, #96]	; (8011738 <pvPortMalloc+0x178>)
 80116d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116da:	4b17      	ldr	r3, [pc, #92]	; (8011738 <pvPortMalloc+0x178>)
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	4b18      	ldr	r3, [pc, #96]	; (8011740 <pvPortMalloc+0x180>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d203      	bcs.n	80116ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80116e6:	4b14      	ldr	r3, [pc, #80]	; (8011738 <pvPortMalloc+0x178>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	4a15      	ldr	r2, [pc, #84]	; (8011740 <pvPortMalloc+0x180>)
 80116ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80116ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f0:	685a      	ldr	r2, [r3, #4]
 80116f2:	4b10      	ldr	r3, [pc, #64]	; (8011734 <pvPortMalloc+0x174>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	431a      	orrs	r2, r3
 80116f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fe:	2200      	movs	r2, #0
 8011700:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011702:	f7fe fd35 	bl	8010170 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	f003 0307 	and.w	r3, r3, #7
 801170c:	2b00      	cmp	r3, #0
 801170e:	d009      	beq.n	8011724 <pvPortMalloc+0x164>
 8011710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011714:	f383 8811 	msr	BASEPRI, r3
 8011718:	f3bf 8f6f 	isb	sy
 801171c:	f3bf 8f4f 	dsb	sy
 8011720:	60fb      	str	r3, [r7, #12]
 8011722:	e7fe      	b.n	8011722 <pvPortMalloc+0x162>
	return pvReturn;
 8011724:	69fb      	ldr	r3, [r7, #28]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3728      	adds	r7, #40	; 0x28
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	20004a54 	.word	0x20004a54
 8011734:	20004a60 	.word	0x20004a60
 8011738:	20004a58 	.word	0x20004a58
 801173c:	20004a4c 	.word	0x20004a4c
 8011740:	20004a5c 	.word	0x20004a5c

08011744 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b086      	sub	sp, #24
 8011748:	af00      	add	r7, sp, #0
 801174a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d046      	beq.n	80117e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011756:	2308      	movs	r3, #8
 8011758:	425b      	negs	r3, r3
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	4413      	add	r3, r2
 801175e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	685a      	ldr	r2, [r3, #4]
 8011768:	4b20      	ldr	r3, [pc, #128]	; (80117ec <vPortFree+0xa8>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	4013      	ands	r3, r2
 801176e:	2b00      	cmp	r3, #0
 8011770:	d109      	bne.n	8011786 <vPortFree+0x42>
 8011772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011776:	f383 8811 	msr	BASEPRI, r3
 801177a:	f3bf 8f6f 	isb	sy
 801177e:	f3bf 8f4f 	dsb	sy
 8011782:	60fb      	str	r3, [r7, #12]
 8011784:	e7fe      	b.n	8011784 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d009      	beq.n	80117a2 <vPortFree+0x5e>
 801178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011792:	f383 8811 	msr	BASEPRI, r3
 8011796:	f3bf 8f6f 	isb	sy
 801179a:	f3bf 8f4f 	dsb	sy
 801179e:	60bb      	str	r3, [r7, #8]
 80117a0:	e7fe      	b.n	80117a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80117a2:	693b      	ldr	r3, [r7, #16]
 80117a4:	685a      	ldr	r2, [r3, #4]
 80117a6:	4b11      	ldr	r3, [pc, #68]	; (80117ec <vPortFree+0xa8>)
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	4013      	ands	r3, r2
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d019      	beq.n	80117e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117b0:	693b      	ldr	r3, [r7, #16]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d115      	bne.n	80117e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	685a      	ldr	r2, [r3, #4]
 80117bc:	4b0b      	ldr	r3, [pc, #44]	; (80117ec <vPortFree+0xa8>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	43db      	mvns	r3, r3
 80117c2:	401a      	ands	r2, r3
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117c8:	f7fe fcc4 	bl	8010154 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117cc:	693b      	ldr	r3, [r7, #16]
 80117ce:	685a      	ldr	r2, [r3, #4]
 80117d0:	4b07      	ldr	r3, [pc, #28]	; (80117f0 <vPortFree+0xac>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	4413      	add	r3, r2
 80117d6:	4a06      	ldr	r2, [pc, #24]	; (80117f0 <vPortFree+0xac>)
 80117d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80117da:	6938      	ldr	r0, [r7, #16]
 80117dc:	f000 f86c 	bl	80118b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80117e0:	f7fe fcc6 	bl	8010170 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80117e4:	bf00      	nop
 80117e6:	3718      	adds	r7, #24
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	20004a60 	.word	0x20004a60
 80117f0:	20004a58 	.word	0x20004a58

080117f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80117fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80117fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011800:	4b27      	ldr	r3, [pc, #156]	; (80118a0 <prvHeapInit+0xac>)
 8011802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	f003 0307 	and.w	r3, r3, #7
 801180a:	2b00      	cmp	r3, #0
 801180c:	d00c      	beq.n	8011828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	3307      	adds	r3, #7
 8011812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	f023 0307 	bic.w	r3, r3, #7
 801181a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801181c:	68ba      	ldr	r2, [r7, #8]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	4a1f      	ldr	r2, [pc, #124]	; (80118a0 <prvHeapInit+0xac>)
 8011824:	4413      	add	r3, r2
 8011826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801182c:	4a1d      	ldr	r2, [pc, #116]	; (80118a4 <prvHeapInit+0xb0>)
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011832:	4b1c      	ldr	r3, [pc, #112]	; (80118a4 <prvHeapInit+0xb0>)
 8011834:	2200      	movs	r2, #0
 8011836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	68ba      	ldr	r2, [r7, #8]
 801183c:	4413      	add	r3, r2
 801183e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011840:	2208      	movs	r2, #8
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	1a9b      	subs	r3, r3, r2
 8011846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	f023 0307 	bic.w	r3, r3, #7
 801184e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	4a15      	ldr	r2, [pc, #84]	; (80118a8 <prvHeapInit+0xb4>)
 8011854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011856:	4b14      	ldr	r3, [pc, #80]	; (80118a8 <prvHeapInit+0xb4>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	2200      	movs	r2, #0
 801185c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801185e:	4b12      	ldr	r3, [pc, #72]	; (80118a8 <prvHeapInit+0xb4>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2200      	movs	r2, #0
 8011864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	68fa      	ldr	r2, [r7, #12]
 801186e:	1ad2      	subs	r2, r2, r3
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011874:	4b0c      	ldr	r3, [pc, #48]	; (80118a8 <prvHeapInit+0xb4>)
 8011876:	681a      	ldr	r2, [r3, #0]
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	4a0a      	ldr	r2, [pc, #40]	; (80118ac <prvHeapInit+0xb8>)
 8011882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	685b      	ldr	r3, [r3, #4]
 8011888:	4a09      	ldr	r2, [pc, #36]	; (80118b0 <prvHeapInit+0xbc>)
 801188a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801188c:	4b09      	ldr	r3, [pc, #36]	; (80118b4 <prvHeapInit+0xc0>)
 801188e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011892:	601a      	str	r2, [r3, #0]
}
 8011894:	bf00      	nop
 8011896:	3714      	adds	r7, #20
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr
 80118a0:	20000e4c 	.word	0x20000e4c
 80118a4:	20004a4c 	.word	0x20004a4c
 80118a8:	20004a54 	.word	0x20004a54
 80118ac:	20004a5c 	.word	0x20004a5c
 80118b0:	20004a58 	.word	0x20004a58
 80118b4:	20004a60 	.word	0x20004a60

080118b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118b8:	b480      	push	{r7}
 80118ba:	b085      	sub	sp, #20
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80118c0:	4b28      	ldr	r3, [pc, #160]	; (8011964 <prvInsertBlockIntoFreeList+0xac>)
 80118c2:	60fb      	str	r3, [r7, #12]
 80118c4:	e002      	b.n	80118cc <prvInsertBlockIntoFreeList+0x14>
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	60fb      	str	r3, [r7, #12]
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d8f7      	bhi.n	80118c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	68ba      	ldr	r2, [r7, #8]
 80118e0:	4413      	add	r3, r2
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d108      	bne.n	80118fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	685a      	ldr	r2, [r3, #4]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	441a      	add	r2, r3
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	68ba      	ldr	r2, [r7, #8]
 8011904:	441a      	add	r2, r3
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	429a      	cmp	r2, r3
 801190c:	d118      	bne.n	8011940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681a      	ldr	r2, [r3, #0]
 8011912:	4b15      	ldr	r3, [pc, #84]	; (8011968 <prvInsertBlockIntoFreeList+0xb0>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	429a      	cmp	r2, r3
 8011918:	d00d      	beq.n	8011936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	685a      	ldr	r2, [r3, #4]
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	685b      	ldr	r3, [r3, #4]
 8011924:	441a      	add	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	601a      	str	r2, [r3, #0]
 8011934:	e008      	b.n	8011948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011936:	4b0c      	ldr	r3, [pc, #48]	; (8011968 <prvInsertBlockIntoFreeList+0xb0>)
 8011938:	681a      	ldr	r2, [r3, #0]
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	601a      	str	r2, [r3, #0]
 801193e:	e003      	b.n	8011948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011948:	68fa      	ldr	r2, [r7, #12]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	429a      	cmp	r2, r3
 801194e:	d002      	beq.n	8011956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011956:	bf00      	nop
 8011958:	3714      	adds	r7, #20
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	20004a4c 	.word	0x20004a4c
 8011968:	20004a54 	.word	0x20004a54

0801196c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801196c:	b580      	push	{r7, lr}
 801196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011970:	2201      	movs	r2, #1
 8011972:	490e      	ldr	r1, [pc, #56]	; (80119ac <MX_USB_HOST_Init+0x40>)
 8011974:	480e      	ldr	r0, [pc, #56]	; (80119b0 <MX_USB_HOST_Init+0x44>)
 8011976:	f7fb fb01 	bl	800cf7c <USBH_Init>
 801197a:	4603      	mov	r3, r0
 801197c:	2b00      	cmp	r3, #0
 801197e:	d001      	beq.n	8011984 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011980:	f7ef fdb0 	bl	80014e4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011984:	490b      	ldr	r1, [pc, #44]	; (80119b4 <MX_USB_HOST_Init+0x48>)
 8011986:	480a      	ldr	r0, [pc, #40]	; (80119b0 <MX_USB_HOST_Init+0x44>)
 8011988:	f7fb fba8 	bl	800d0dc <USBH_RegisterClass>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d001      	beq.n	8011996 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011992:	f7ef fda7 	bl	80014e4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011996:	4806      	ldr	r0, [pc, #24]	; (80119b0 <MX_USB_HOST_Init+0x44>)
 8011998:	f7fb fc2c 	bl	800d1f4 <USBH_Start>
 801199c:	4603      	mov	r3, r0
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d001      	beq.n	80119a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80119a2:	f7ef fd9f 	bl	80014e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80119a6:	bf00      	nop
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	080119b9 	.word	0x080119b9
 80119b0:	2000530c 	.word	0x2000530c
 80119b4:	20000064 	.word	0x20000064

080119b8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	6078      	str	r0, [r7, #4]
 80119c0:	460b      	mov	r3, r1
 80119c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80119c4:	78fb      	ldrb	r3, [r7, #3]
 80119c6:	3b01      	subs	r3, #1
 80119c8:	2b04      	cmp	r3, #4
 80119ca:	d819      	bhi.n	8011a00 <USBH_UserProcess+0x48>
 80119cc:	a201      	add	r2, pc, #4	; (adr r2, 80119d4 <USBH_UserProcess+0x1c>)
 80119ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119d2:	bf00      	nop
 80119d4:	08011a01 	.word	0x08011a01
 80119d8:	080119f1 	.word	0x080119f1
 80119dc:	08011a01 	.word	0x08011a01
 80119e0:	080119f9 	.word	0x080119f9
 80119e4:	080119e9 	.word	0x080119e9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80119e8:	4b09      	ldr	r3, [pc, #36]	; (8011a10 <USBH_UserProcess+0x58>)
 80119ea:	2203      	movs	r2, #3
 80119ec:	701a      	strb	r2, [r3, #0]
  break;
 80119ee:	e008      	b.n	8011a02 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80119f0:	4b07      	ldr	r3, [pc, #28]	; (8011a10 <USBH_UserProcess+0x58>)
 80119f2:	2202      	movs	r2, #2
 80119f4:	701a      	strb	r2, [r3, #0]
  break;
 80119f6:	e004      	b.n	8011a02 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80119f8:	4b05      	ldr	r3, [pc, #20]	; (8011a10 <USBH_UserProcess+0x58>)
 80119fa:	2201      	movs	r2, #1
 80119fc:	701a      	strb	r2, [r3, #0]
  break;
 80119fe:	e000      	b.n	8011a02 <USBH_UserProcess+0x4a>

  default:
  break;
 8011a00:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011a02:	bf00      	nop
 8011a04:	370c      	adds	r7, #12
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr
 8011a0e:	bf00      	nop
 8011a10:	20004a64 	.word	0x20004a64

08011a14 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b08a      	sub	sp, #40	; 0x28
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a1c:	f107 0314 	add.w	r3, r7, #20
 8011a20:	2200      	movs	r2, #0
 8011a22:	601a      	str	r2, [r3, #0]
 8011a24:	605a      	str	r2, [r3, #4]
 8011a26:	609a      	str	r2, [r3, #8]
 8011a28:	60da      	str	r2, [r3, #12]
 8011a2a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011a34:	d147      	bne.n	8011ac6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a36:	2300      	movs	r3, #0
 8011a38:	613b      	str	r3, [r7, #16]
 8011a3a:	4b25      	ldr	r3, [pc, #148]	; (8011ad0 <HAL_HCD_MspInit+0xbc>)
 8011a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a3e:	4a24      	ldr	r2, [pc, #144]	; (8011ad0 <HAL_HCD_MspInit+0xbc>)
 8011a40:	f043 0301 	orr.w	r3, r3, #1
 8011a44:	6313      	str	r3, [r2, #48]	; 0x30
 8011a46:	4b22      	ldr	r3, [pc, #136]	; (8011ad0 <HAL_HCD_MspInit+0xbc>)
 8011a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a4a:	f003 0301 	and.w	r3, r3, #1
 8011a4e:	613b      	str	r3, [r7, #16]
 8011a50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8011a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011a60:	f107 0314 	add.w	r3, r7, #20
 8011a64:	4619      	mov	r1, r3
 8011a66:	481b      	ldr	r0, [pc, #108]	; (8011ad4 <HAL_HCD_MspInit+0xc0>)
 8011a68:	f7f3 f84a 	bl	8004b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8011a6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011a72:	2302      	movs	r3, #2
 8011a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011a76:	2300      	movs	r3, #0
 8011a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011a7a:	2303      	movs	r3, #3
 8011a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011a7e:	230a      	movs	r3, #10
 8011a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011a82:	f107 0314 	add.w	r3, r7, #20
 8011a86:	4619      	mov	r1, r3
 8011a88:	4812      	ldr	r0, [pc, #72]	; (8011ad4 <HAL_HCD_MspInit+0xc0>)
 8011a8a:	f7f3 f839 	bl	8004b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011a8e:	4b10      	ldr	r3, [pc, #64]	; (8011ad0 <HAL_HCD_MspInit+0xbc>)
 8011a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a92:	4a0f      	ldr	r2, [pc, #60]	; (8011ad0 <HAL_HCD_MspInit+0xbc>)
 8011a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a98:	6353      	str	r3, [r2, #52]	; 0x34
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	60fb      	str	r3, [r7, #12]
 8011a9e:	4b0c      	ldr	r3, [pc, #48]	; (8011ad0 <HAL_HCD_MspInit+0xbc>)
 8011aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aa2:	4a0b      	ldr	r2, [pc, #44]	; (8011ad0 <HAL_HCD_MspInit+0xbc>)
 8011aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8011aaa:	4b09      	ldr	r3, [pc, #36]	; (8011ad0 <HAL_HCD_MspInit+0xbc>)
 8011aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ab2:	60fb      	str	r3, [r7, #12]
 8011ab4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	2100      	movs	r1, #0
 8011aba:	2043      	movs	r0, #67	; 0x43
 8011abc:	f7f2 f96a 	bl	8003d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011ac0:	2043      	movs	r0, #67	; 0x43
 8011ac2:	f7f2 f983 	bl	8003dcc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011ac6:	bf00      	nop
 8011ac8:	3728      	adds	r7, #40	; 0x28
 8011aca:	46bd      	mov	sp, r7
 8011acc:	bd80      	pop	{r7, pc}
 8011ace:	bf00      	nop
 8011ad0:	40023800 	.word	0x40023800
 8011ad4:	40020000 	.word	0x40020000

08011ad8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fc f831 	bl	800db4e <USBH_LL_IncTimer>
}
 8011aec:	bf00      	nop
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fc f875 	bl	800dbf2 <USBH_LL_Connect>
}
 8011b08:	bf00      	nop
 8011b0a:	3708      	adds	r7, #8
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bd80      	pop	{r7, pc}

08011b10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b082      	sub	sp, #8
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fc f88a 	bl	800dc38 <USBH_LL_Disconnect>
}
 8011b24:	bf00      	nop
 8011b26:	3708      	adds	r7, #8
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
 8011b34:	460b      	mov	r3, r1
 8011b36:	70fb      	strb	r3, [r7, #3]
 8011b38:	4613      	mov	r3, r2
 8011b3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7fc f8c1 	bl	800dcca <USBH_LL_NotifyURBChange>
#endif
}
 8011b48:	bf00      	nop
 8011b4a:	3708      	adds	r7, #8
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b082      	sub	sp, #8
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7fc f81f 	bl	800dba2 <USBH_LL_PortEnabled>
}
 8011b64:	bf00      	nop
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f7fc f82b 	bl	800dbd6 <USBH_LL_PortDisabled>
}
 8011b80:	bf00      	nop
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d12a      	bne.n	8011bf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011b9a:	4a18      	ldr	r2, [pc, #96]	; (8011bfc <USBH_LL_Init+0x74>)
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	4a15      	ldr	r2, [pc, #84]	; (8011bfc <USBH_LL_Init+0x74>)
 8011ba6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011baa:	4b14      	ldr	r3, [pc, #80]	; (8011bfc <USBH_LL_Init+0x74>)
 8011bac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011bb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8011bb2:	4b12      	ldr	r3, [pc, #72]	; (8011bfc <USBH_LL_Init+0x74>)
 8011bb4:	220c      	movs	r2, #12
 8011bb6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011bb8:	4b10      	ldr	r3, [pc, #64]	; (8011bfc <USBH_LL_Init+0x74>)
 8011bba:	2201      	movs	r2, #1
 8011bbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011bbe:	4b0f      	ldr	r3, [pc, #60]	; (8011bfc <USBH_LL_Init+0x74>)
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011bc4:	4b0d      	ldr	r3, [pc, #52]	; (8011bfc <USBH_LL_Init+0x74>)
 8011bc6:	2202      	movs	r2, #2
 8011bc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011bca:	4b0c      	ldr	r3, [pc, #48]	; (8011bfc <USBH_LL_Init+0x74>)
 8011bcc:	2200      	movs	r2, #0
 8011bce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011bd0:	480a      	ldr	r0, [pc, #40]	; (8011bfc <USBH_LL_Init+0x74>)
 8011bd2:	f7f3 f940 	bl	8004e56 <HAL_HCD_Init>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d001      	beq.n	8011be0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011bdc:	f7ef fc82 	bl	80014e4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011be0:	4806      	ldr	r0, [pc, #24]	; (8011bfc <USBH_LL_Init+0x74>)
 8011be2:	f7f3 fd43 	bl	800566c <HAL_HCD_GetCurrentFrame>
 8011be6:	4603      	mov	r3, r0
 8011be8:	4619      	mov	r1, r3
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f7fb ffa0 	bl	800db30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011bf0:	2300      	movs	r3, #0
}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3708      	adds	r7, #8
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}
 8011bfa:	bf00      	nop
 8011bfc:	200056f0 	.word	0x200056f0

08011c00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b084      	sub	sp, #16
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c08:	2300      	movs	r3, #0
 8011c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7f3 fcb0 	bl	800557c <HAL_HCD_Start>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011c20:	7bfb      	ldrb	r3, [r7, #15]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f000 f95c 	bl	8011ee0 <USBH_Get_USB_Status>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3710      	adds	r7, #16
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011c36:	b580      	push	{r7, lr}
 8011c38:	b084      	sub	sp, #16
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011c42:	2300      	movs	r3, #0
 8011c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7f3 fcb8 	bl	80055c2 <HAL_HCD_Stop>
 8011c52:	4603      	mov	r3, r0
 8011c54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011c56:	7bfb      	ldrb	r3, [r7, #15]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f000 f941 	bl	8011ee0 <USBH_Get_USB_Status>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	3710      	adds	r7, #16
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011c6c:	b580      	push	{r7, lr}
 8011c6e:	b084      	sub	sp, #16
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011c74:	2301      	movs	r3, #1
 8011c76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7f3 fd02 	bl	8005688 <HAL_HCD_GetCurrentSpeed>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d007      	beq.n	8011c9a <USBH_LL_GetSpeed+0x2e>
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d302      	bcc.n	8011c94 <USBH_LL_GetSpeed+0x28>
 8011c8e:	2b02      	cmp	r3, #2
 8011c90:	d006      	beq.n	8011ca0 <USBH_LL_GetSpeed+0x34>
 8011c92:	e008      	b.n	8011ca6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011c94:	2300      	movs	r3, #0
 8011c96:	73fb      	strb	r3, [r7, #15]
    break;
 8011c98:	e008      	b.n	8011cac <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8011c9e:	e005      	b.n	8011cac <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ca4:	e002      	b.n	8011cac <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8011ca6:	2301      	movs	r3, #1
 8011ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8011caa:	bf00      	nop
  }
  return  speed;
 8011cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cae:	4618      	mov	r0, r3
 8011cb0:	3710      	adds	r7, #16
 8011cb2:	46bd      	mov	sp, r7
 8011cb4:	bd80      	pop	{r7, pc}

08011cb6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011cb6:	b580      	push	{r7, lr}
 8011cb8:	b084      	sub	sp, #16
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7f3 fc95 	bl	80055fc <HAL_HCD_ResetPort>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f000 f901 	bl	8011ee0 <USBH_Get_USB_Status>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3710      	adds	r7, #16
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
 8011cf4:	460b      	mov	r3, r1
 8011cf6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011cfe:	78fa      	ldrb	r2, [r7, #3]
 8011d00:	4611      	mov	r1, r2
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7f3 fc9d 	bl	8005642 <HAL_HCD_HC_GetXferCount>
 8011d08:	4603      	mov	r3, r0
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}

08011d12 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011d12:	b590      	push	{r4, r7, lr}
 8011d14:	b089      	sub	sp, #36	; 0x24
 8011d16:	af04      	add	r7, sp, #16
 8011d18:	6078      	str	r0, [r7, #4]
 8011d1a:	4608      	mov	r0, r1
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	461a      	mov	r2, r3
 8011d20:	4603      	mov	r3, r0
 8011d22:	70fb      	strb	r3, [r7, #3]
 8011d24:	460b      	mov	r3, r1
 8011d26:	70bb      	strb	r3, [r7, #2]
 8011d28:	4613      	mov	r3, r2
 8011d2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d30:	2300      	movs	r3, #0
 8011d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011d3a:	787c      	ldrb	r4, [r7, #1]
 8011d3c:	78ba      	ldrb	r2, [r7, #2]
 8011d3e:	78f9      	ldrb	r1, [r7, #3]
 8011d40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d42:	9302      	str	r3, [sp, #8]
 8011d44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	4623      	mov	r3, r4
 8011d52:	f7f3 f8e2 	bl	8004f1a <HAL_HCD_HC_Init>
 8011d56:	4603      	mov	r3, r0
 8011d58:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011d5a:	7bfb      	ldrb	r3, [r7, #15]
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f000 f8bf 	bl	8011ee0 <USBH_Get_USB_Status>
 8011d62:	4603      	mov	r3, r0
 8011d64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d66:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3714      	adds	r7, #20
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd90      	pop	{r4, r7, pc}

08011d70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b084      	sub	sp, #16
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	460b      	mov	r3, r1
 8011d7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011d80:	2300      	movs	r3, #0
 8011d82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011d8a:	78fa      	ldrb	r2, [r7, #3]
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7f3 f95b 	bl	800504a <HAL_HCD_HC_Halt>
 8011d94:	4603      	mov	r3, r0
 8011d96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011d98:	7bfb      	ldrb	r3, [r7, #15]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f000 f8a0 	bl	8011ee0 <USBH_Get_USB_Status>
 8011da0:	4603      	mov	r3, r0
 8011da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3710      	adds	r7, #16
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}

08011dae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011dae:	b590      	push	{r4, r7, lr}
 8011db0:	b089      	sub	sp, #36	; 0x24
 8011db2:	af04      	add	r7, sp, #16
 8011db4:	6078      	str	r0, [r7, #4]
 8011db6:	4608      	mov	r0, r1
 8011db8:	4611      	mov	r1, r2
 8011dba:	461a      	mov	r2, r3
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	70fb      	strb	r3, [r7, #3]
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	70bb      	strb	r3, [r7, #2]
 8011dc4:	4613      	mov	r3, r2
 8011dc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011dd6:	787c      	ldrb	r4, [r7, #1]
 8011dd8:	78ba      	ldrb	r2, [r7, #2]
 8011dda:	78f9      	ldrb	r1, [r7, #3]
 8011ddc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011de0:	9303      	str	r3, [sp, #12]
 8011de2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011de4:	9302      	str	r3, [sp, #8]
 8011de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de8:	9301      	str	r3, [sp, #4]
 8011dea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011dee:	9300      	str	r3, [sp, #0]
 8011df0:	4623      	mov	r3, r4
 8011df2:	f7f3 f94d 	bl	8005090 <HAL_HCD_HC_SubmitRequest>
 8011df6:	4603      	mov	r3, r0
 8011df8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011dfa:	7bfb      	ldrb	r3, [r7, #15]
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	f000 f86f 	bl	8011ee0 <USBH_Get_USB_Status>
 8011e02:	4603      	mov	r3, r0
 8011e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3714      	adds	r7, #20
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd90      	pop	{r4, r7, pc}

08011e10 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b082      	sub	sp, #8
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011e22:	78fa      	ldrb	r2, [r7, #3]
 8011e24:	4611      	mov	r1, r2
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7f3 fbf6 	bl	8005618 <HAL_HCD_HC_GetURBState>
 8011e2c:	4603      	mov	r3, r0
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3708      	adds	r7, #8
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b082      	sub	sp, #8
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
 8011e3e:	460b      	mov	r3, r1
 8011e40:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011e48:	2b01      	cmp	r3, #1
 8011e4a:	d103      	bne.n	8011e54 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011e4c:	78fb      	ldrb	r3, [r7, #3]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f000 f872 	bl	8011f38 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011e54:	20c8      	movs	r0, #200	; 0xc8
 8011e56:	f7f1 fc51 	bl	80036fc <HAL_Delay>
  return USBH_OK;
 8011e5a:	2300      	movs	r3, #0
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3708      	adds	r7, #8
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}

08011e64 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011e64:	b480      	push	{r7}
 8011e66:	b085      	sub	sp, #20
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
 8011e6c:	460b      	mov	r3, r1
 8011e6e:	70fb      	strb	r3, [r7, #3]
 8011e70:	4613      	mov	r3, r2
 8011e72:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011e7a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011e7c:	78fa      	ldrb	r2, [r7, #3]
 8011e7e:	68f9      	ldr	r1, [r7, #12]
 8011e80:	4613      	mov	r3, r2
 8011e82:	009b      	lsls	r3, r3, #2
 8011e84:	4413      	add	r3, r2
 8011e86:	00db      	lsls	r3, r3, #3
 8011e88:	440b      	add	r3, r1
 8011e8a:	333b      	adds	r3, #59	; 0x3b
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d00a      	beq.n	8011ea8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011e92:	78fa      	ldrb	r2, [r7, #3]
 8011e94:	68f9      	ldr	r1, [r7, #12]
 8011e96:	4613      	mov	r3, r2
 8011e98:	009b      	lsls	r3, r3, #2
 8011e9a:	4413      	add	r3, r2
 8011e9c:	00db      	lsls	r3, r3, #3
 8011e9e:	440b      	add	r3, r1
 8011ea0:	3350      	adds	r3, #80	; 0x50
 8011ea2:	78ba      	ldrb	r2, [r7, #2]
 8011ea4:	701a      	strb	r2, [r3, #0]
 8011ea6:	e009      	b.n	8011ebc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011ea8:	78fa      	ldrb	r2, [r7, #3]
 8011eaa:	68f9      	ldr	r1, [r7, #12]
 8011eac:	4613      	mov	r3, r2
 8011eae:	009b      	lsls	r3, r3, #2
 8011eb0:	4413      	add	r3, r2
 8011eb2:	00db      	lsls	r3, r3, #3
 8011eb4:	440b      	add	r3, r1
 8011eb6:	3351      	adds	r3, #81	; 0x51
 8011eb8:	78ba      	ldrb	r2, [r7, #2]
 8011eba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011ebc:	2300      	movs	r3, #0
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3714      	adds	r7, #20
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr

08011eca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011eca:	b580      	push	{r7, lr}
 8011ecc:	b082      	sub	sp, #8
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011ed2:	6878      	ldr	r0, [r7, #4]
 8011ed4:	f7f1 fc12 	bl	80036fc <HAL_Delay>
}
 8011ed8:	bf00      	nop
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b085      	sub	sp, #20
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011eea:	2300      	movs	r3, #0
 8011eec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011eee:	79fb      	ldrb	r3, [r7, #7]
 8011ef0:	2b03      	cmp	r3, #3
 8011ef2:	d817      	bhi.n	8011f24 <USBH_Get_USB_Status+0x44>
 8011ef4:	a201      	add	r2, pc, #4	; (adr r2, 8011efc <USBH_Get_USB_Status+0x1c>)
 8011ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011efa:	bf00      	nop
 8011efc:	08011f0d 	.word	0x08011f0d
 8011f00:	08011f13 	.word	0x08011f13
 8011f04:	08011f19 	.word	0x08011f19
 8011f08:	08011f1f 	.word	0x08011f1f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f10:	e00b      	b.n	8011f2a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011f12:	2302      	movs	r3, #2
 8011f14:	73fb      	strb	r3, [r7, #15]
    break;
 8011f16:	e008      	b.n	8011f2a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011f18:	2301      	movs	r3, #1
 8011f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8011f1c:	e005      	b.n	8011f2a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011f1e:	2302      	movs	r3, #2
 8011f20:	73fb      	strb	r3, [r7, #15]
    break;
 8011f22:	e002      	b.n	8011f2a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011f24:	2302      	movs	r3, #2
 8011f26:	73fb      	strb	r3, [r7, #15]
    break;
 8011f28:	bf00      	nop
  }
  return usb_status;
 8011f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3714      	adds	r7, #20
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b084      	sub	sp, #16
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	4603      	mov	r3, r0
 8011f40:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011f42:	79fb      	ldrb	r3, [r7, #7]
 8011f44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011f46:	79fb      	ldrb	r3, [r7, #7]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d102      	bne.n	8011f52 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	73fb      	strb	r3, [r7, #15]
 8011f50:	e001      	b.n	8011f56 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8011f52:	2300      	movs	r3, #0
 8011f54:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8011f56:	7bfb      	ldrb	r3, [r7, #15]
 8011f58:	461a      	mov	r2, r3
 8011f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011f5e:	4803      	ldr	r0, [pc, #12]	; (8011f6c <MX_DriverVbusFS+0x34>)
 8011f60:	f7f2 ff60 	bl	8004e24 <HAL_GPIO_WritePin>
}
 8011f64:	bf00      	nop
 8011f66:	3710      	adds	r7, #16
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	40021800 	.word	0x40021800

08011f70 <__errno>:
 8011f70:	4b01      	ldr	r3, [pc, #4]	; (8011f78 <__errno+0x8>)
 8011f72:	6818      	ldr	r0, [r3, #0]
 8011f74:	4770      	bx	lr
 8011f76:	bf00      	nop
 8011f78:	20000088 	.word	0x20000088

08011f7c <__libc_init_array>:
 8011f7c:	b570      	push	{r4, r5, r6, lr}
 8011f7e:	4e0d      	ldr	r6, [pc, #52]	; (8011fb4 <__libc_init_array+0x38>)
 8011f80:	4c0d      	ldr	r4, [pc, #52]	; (8011fb8 <__libc_init_array+0x3c>)
 8011f82:	1ba4      	subs	r4, r4, r6
 8011f84:	10a4      	asrs	r4, r4, #2
 8011f86:	2500      	movs	r5, #0
 8011f88:	42a5      	cmp	r5, r4
 8011f8a:	d109      	bne.n	8011fa0 <__libc_init_array+0x24>
 8011f8c:	4e0b      	ldr	r6, [pc, #44]	; (8011fbc <__libc_init_array+0x40>)
 8011f8e:	4c0c      	ldr	r4, [pc, #48]	; (8011fc0 <__libc_init_array+0x44>)
 8011f90:	f000 f94e 	bl	8012230 <_init>
 8011f94:	1ba4      	subs	r4, r4, r6
 8011f96:	10a4      	asrs	r4, r4, #2
 8011f98:	2500      	movs	r5, #0
 8011f9a:	42a5      	cmp	r5, r4
 8011f9c:	d105      	bne.n	8011faa <__libc_init_array+0x2e>
 8011f9e:	bd70      	pop	{r4, r5, r6, pc}
 8011fa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fa4:	4798      	blx	r3
 8011fa6:	3501      	adds	r5, #1
 8011fa8:	e7ee      	b.n	8011f88 <__libc_init_array+0xc>
 8011faa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011fae:	4798      	blx	r3
 8011fb0:	3501      	adds	r5, #1
 8011fb2:	e7f2      	b.n	8011f9a <__libc_init_array+0x1e>
 8011fb4:	08014eb4 	.word	0x08014eb4
 8011fb8:	08014eb4 	.word	0x08014eb4
 8011fbc:	08014eb4 	.word	0x08014eb4
 8011fc0:	08014eb8 	.word	0x08014eb8

08011fc4 <__itoa>:
 8011fc4:	1e93      	subs	r3, r2, #2
 8011fc6:	2b22      	cmp	r3, #34	; 0x22
 8011fc8:	b510      	push	{r4, lr}
 8011fca:	460c      	mov	r4, r1
 8011fcc:	d904      	bls.n	8011fd8 <__itoa+0x14>
 8011fce:	2300      	movs	r3, #0
 8011fd0:	700b      	strb	r3, [r1, #0]
 8011fd2:	461c      	mov	r4, r3
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	bd10      	pop	{r4, pc}
 8011fd8:	2a0a      	cmp	r2, #10
 8011fda:	d109      	bne.n	8011ff0 <__itoa+0x2c>
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	da07      	bge.n	8011ff0 <__itoa+0x2c>
 8011fe0:	232d      	movs	r3, #45	; 0x2d
 8011fe2:	700b      	strb	r3, [r1, #0]
 8011fe4:	4240      	negs	r0, r0
 8011fe6:	2101      	movs	r1, #1
 8011fe8:	4421      	add	r1, r4
 8011fea:	f000 f8e1 	bl	80121b0 <__utoa>
 8011fee:	e7f1      	b.n	8011fd4 <__itoa+0x10>
 8011ff0:	2100      	movs	r1, #0
 8011ff2:	e7f9      	b.n	8011fe8 <__itoa+0x24>

08011ff4 <itoa>:
 8011ff4:	f7ff bfe6 	b.w	8011fc4 <__itoa>

08011ff8 <malloc>:
 8011ff8:	4b02      	ldr	r3, [pc, #8]	; (8012004 <malloc+0xc>)
 8011ffa:	4601      	mov	r1, r0
 8011ffc:	6818      	ldr	r0, [r3, #0]
 8011ffe:	f000 b86d 	b.w	80120dc <_malloc_r>
 8012002:	bf00      	nop
 8012004:	20000088 	.word	0x20000088

08012008 <free>:
 8012008:	4b02      	ldr	r3, [pc, #8]	; (8012014 <free+0xc>)
 801200a:	4601      	mov	r1, r0
 801200c:	6818      	ldr	r0, [r3, #0]
 801200e:	f000 b817 	b.w	8012040 <_free_r>
 8012012:	bf00      	nop
 8012014:	20000088 	.word	0x20000088

08012018 <memcpy>:
 8012018:	b510      	push	{r4, lr}
 801201a:	1e43      	subs	r3, r0, #1
 801201c:	440a      	add	r2, r1
 801201e:	4291      	cmp	r1, r2
 8012020:	d100      	bne.n	8012024 <memcpy+0xc>
 8012022:	bd10      	pop	{r4, pc}
 8012024:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012028:	f803 4f01 	strb.w	r4, [r3, #1]!
 801202c:	e7f7      	b.n	801201e <memcpy+0x6>

0801202e <memset>:
 801202e:	4402      	add	r2, r0
 8012030:	4603      	mov	r3, r0
 8012032:	4293      	cmp	r3, r2
 8012034:	d100      	bne.n	8012038 <memset+0xa>
 8012036:	4770      	bx	lr
 8012038:	f803 1b01 	strb.w	r1, [r3], #1
 801203c:	e7f9      	b.n	8012032 <memset+0x4>
	...

08012040 <_free_r>:
 8012040:	b538      	push	{r3, r4, r5, lr}
 8012042:	4605      	mov	r5, r0
 8012044:	2900      	cmp	r1, #0
 8012046:	d045      	beq.n	80120d4 <_free_r+0x94>
 8012048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801204c:	1f0c      	subs	r4, r1, #4
 801204e:	2b00      	cmp	r3, #0
 8012050:	bfb8      	it	lt
 8012052:	18e4      	addlt	r4, r4, r3
 8012054:	f000 f8ea 	bl	801222c <__malloc_lock>
 8012058:	4a1f      	ldr	r2, [pc, #124]	; (80120d8 <_free_r+0x98>)
 801205a:	6813      	ldr	r3, [r2, #0]
 801205c:	4610      	mov	r0, r2
 801205e:	b933      	cbnz	r3, 801206e <_free_r+0x2e>
 8012060:	6063      	str	r3, [r4, #4]
 8012062:	6014      	str	r4, [r2, #0]
 8012064:	4628      	mov	r0, r5
 8012066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801206a:	f000 b8e0 	b.w	801222e <__malloc_unlock>
 801206e:	42a3      	cmp	r3, r4
 8012070:	d90c      	bls.n	801208c <_free_r+0x4c>
 8012072:	6821      	ldr	r1, [r4, #0]
 8012074:	1862      	adds	r2, r4, r1
 8012076:	4293      	cmp	r3, r2
 8012078:	bf04      	itt	eq
 801207a:	681a      	ldreq	r2, [r3, #0]
 801207c:	685b      	ldreq	r3, [r3, #4]
 801207e:	6063      	str	r3, [r4, #4]
 8012080:	bf04      	itt	eq
 8012082:	1852      	addeq	r2, r2, r1
 8012084:	6022      	streq	r2, [r4, #0]
 8012086:	6004      	str	r4, [r0, #0]
 8012088:	e7ec      	b.n	8012064 <_free_r+0x24>
 801208a:	4613      	mov	r3, r2
 801208c:	685a      	ldr	r2, [r3, #4]
 801208e:	b10a      	cbz	r2, 8012094 <_free_r+0x54>
 8012090:	42a2      	cmp	r2, r4
 8012092:	d9fa      	bls.n	801208a <_free_r+0x4a>
 8012094:	6819      	ldr	r1, [r3, #0]
 8012096:	1858      	adds	r0, r3, r1
 8012098:	42a0      	cmp	r0, r4
 801209a:	d10b      	bne.n	80120b4 <_free_r+0x74>
 801209c:	6820      	ldr	r0, [r4, #0]
 801209e:	4401      	add	r1, r0
 80120a0:	1858      	adds	r0, r3, r1
 80120a2:	4282      	cmp	r2, r0
 80120a4:	6019      	str	r1, [r3, #0]
 80120a6:	d1dd      	bne.n	8012064 <_free_r+0x24>
 80120a8:	6810      	ldr	r0, [r2, #0]
 80120aa:	6852      	ldr	r2, [r2, #4]
 80120ac:	605a      	str	r2, [r3, #4]
 80120ae:	4401      	add	r1, r0
 80120b0:	6019      	str	r1, [r3, #0]
 80120b2:	e7d7      	b.n	8012064 <_free_r+0x24>
 80120b4:	d902      	bls.n	80120bc <_free_r+0x7c>
 80120b6:	230c      	movs	r3, #12
 80120b8:	602b      	str	r3, [r5, #0]
 80120ba:	e7d3      	b.n	8012064 <_free_r+0x24>
 80120bc:	6820      	ldr	r0, [r4, #0]
 80120be:	1821      	adds	r1, r4, r0
 80120c0:	428a      	cmp	r2, r1
 80120c2:	bf04      	itt	eq
 80120c4:	6811      	ldreq	r1, [r2, #0]
 80120c6:	6852      	ldreq	r2, [r2, #4]
 80120c8:	6062      	str	r2, [r4, #4]
 80120ca:	bf04      	itt	eq
 80120cc:	1809      	addeq	r1, r1, r0
 80120ce:	6021      	streq	r1, [r4, #0]
 80120d0:	605c      	str	r4, [r3, #4]
 80120d2:	e7c7      	b.n	8012064 <_free_r+0x24>
 80120d4:	bd38      	pop	{r3, r4, r5, pc}
 80120d6:	bf00      	nop
 80120d8:	20004a68 	.word	0x20004a68

080120dc <_malloc_r>:
 80120dc:	b570      	push	{r4, r5, r6, lr}
 80120de:	1ccd      	adds	r5, r1, #3
 80120e0:	f025 0503 	bic.w	r5, r5, #3
 80120e4:	3508      	adds	r5, #8
 80120e6:	2d0c      	cmp	r5, #12
 80120e8:	bf38      	it	cc
 80120ea:	250c      	movcc	r5, #12
 80120ec:	2d00      	cmp	r5, #0
 80120ee:	4606      	mov	r6, r0
 80120f0:	db01      	blt.n	80120f6 <_malloc_r+0x1a>
 80120f2:	42a9      	cmp	r1, r5
 80120f4:	d903      	bls.n	80120fe <_malloc_r+0x22>
 80120f6:	230c      	movs	r3, #12
 80120f8:	6033      	str	r3, [r6, #0]
 80120fa:	2000      	movs	r0, #0
 80120fc:	bd70      	pop	{r4, r5, r6, pc}
 80120fe:	f000 f895 	bl	801222c <__malloc_lock>
 8012102:	4a21      	ldr	r2, [pc, #132]	; (8012188 <_malloc_r+0xac>)
 8012104:	6814      	ldr	r4, [r2, #0]
 8012106:	4621      	mov	r1, r4
 8012108:	b991      	cbnz	r1, 8012130 <_malloc_r+0x54>
 801210a:	4c20      	ldr	r4, [pc, #128]	; (801218c <_malloc_r+0xb0>)
 801210c:	6823      	ldr	r3, [r4, #0]
 801210e:	b91b      	cbnz	r3, 8012118 <_malloc_r+0x3c>
 8012110:	4630      	mov	r0, r6
 8012112:	f000 f83d 	bl	8012190 <_sbrk_r>
 8012116:	6020      	str	r0, [r4, #0]
 8012118:	4629      	mov	r1, r5
 801211a:	4630      	mov	r0, r6
 801211c:	f000 f838 	bl	8012190 <_sbrk_r>
 8012120:	1c43      	adds	r3, r0, #1
 8012122:	d124      	bne.n	801216e <_malloc_r+0x92>
 8012124:	230c      	movs	r3, #12
 8012126:	6033      	str	r3, [r6, #0]
 8012128:	4630      	mov	r0, r6
 801212a:	f000 f880 	bl	801222e <__malloc_unlock>
 801212e:	e7e4      	b.n	80120fa <_malloc_r+0x1e>
 8012130:	680b      	ldr	r3, [r1, #0]
 8012132:	1b5b      	subs	r3, r3, r5
 8012134:	d418      	bmi.n	8012168 <_malloc_r+0x8c>
 8012136:	2b0b      	cmp	r3, #11
 8012138:	d90f      	bls.n	801215a <_malloc_r+0x7e>
 801213a:	600b      	str	r3, [r1, #0]
 801213c:	50cd      	str	r5, [r1, r3]
 801213e:	18cc      	adds	r4, r1, r3
 8012140:	4630      	mov	r0, r6
 8012142:	f000 f874 	bl	801222e <__malloc_unlock>
 8012146:	f104 000b 	add.w	r0, r4, #11
 801214a:	1d23      	adds	r3, r4, #4
 801214c:	f020 0007 	bic.w	r0, r0, #7
 8012150:	1ac3      	subs	r3, r0, r3
 8012152:	d0d3      	beq.n	80120fc <_malloc_r+0x20>
 8012154:	425a      	negs	r2, r3
 8012156:	50e2      	str	r2, [r4, r3]
 8012158:	e7d0      	b.n	80120fc <_malloc_r+0x20>
 801215a:	428c      	cmp	r4, r1
 801215c:	684b      	ldr	r3, [r1, #4]
 801215e:	bf16      	itet	ne
 8012160:	6063      	strne	r3, [r4, #4]
 8012162:	6013      	streq	r3, [r2, #0]
 8012164:	460c      	movne	r4, r1
 8012166:	e7eb      	b.n	8012140 <_malloc_r+0x64>
 8012168:	460c      	mov	r4, r1
 801216a:	6849      	ldr	r1, [r1, #4]
 801216c:	e7cc      	b.n	8012108 <_malloc_r+0x2c>
 801216e:	1cc4      	adds	r4, r0, #3
 8012170:	f024 0403 	bic.w	r4, r4, #3
 8012174:	42a0      	cmp	r0, r4
 8012176:	d005      	beq.n	8012184 <_malloc_r+0xa8>
 8012178:	1a21      	subs	r1, r4, r0
 801217a:	4630      	mov	r0, r6
 801217c:	f000 f808 	bl	8012190 <_sbrk_r>
 8012180:	3001      	adds	r0, #1
 8012182:	d0cf      	beq.n	8012124 <_malloc_r+0x48>
 8012184:	6025      	str	r5, [r4, #0]
 8012186:	e7db      	b.n	8012140 <_malloc_r+0x64>
 8012188:	20004a68 	.word	0x20004a68
 801218c:	20004a6c 	.word	0x20004a6c

08012190 <_sbrk_r>:
 8012190:	b538      	push	{r3, r4, r5, lr}
 8012192:	4c06      	ldr	r4, [pc, #24]	; (80121ac <_sbrk_r+0x1c>)
 8012194:	2300      	movs	r3, #0
 8012196:	4605      	mov	r5, r0
 8012198:	4608      	mov	r0, r1
 801219a:	6023      	str	r3, [r4, #0]
 801219c:	f7f0 f88a 	bl	80022b4 <_sbrk>
 80121a0:	1c43      	adds	r3, r0, #1
 80121a2:	d102      	bne.n	80121aa <_sbrk_r+0x1a>
 80121a4:	6823      	ldr	r3, [r4, #0]
 80121a6:	b103      	cbz	r3, 80121aa <_sbrk_r+0x1a>
 80121a8:	602b      	str	r3, [r5, #0]
 80121aa:	bd38      	pop	{r3, r4, r5, pc}
 80121ac:	200059b4 	.word	0x200059b4

080121b0 <__utoa>:
 80121b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121b2:	4b1d      	ldr	r3, [pc, #116]	; (8012228 <__utoa+0x78>)
 80121b4:	b08b      	sub	sp, #44	; 0x2c
 80121b6:	4605      	mov	r5, r0
 80121b8:	460c      	mov	r4, r1
 80121ba:	466e      	mov	r6, sp
 80121bc:	f103 0c20 	add.w	ip, r3, #32
 80121c0:	6818      	ldr	r0, [r3, #0]
 80121c2:	6859      	ldr	r1, [r3, #4]
 80121c4:	4637      	mov	r7, r6
 80121c6:	c703      	stmia	r7!, {r0, r1}
 80121c8:	3308      	adds	r3, #8
 80121ca:	4563      	cmp	r3, ip
 80121cc:	463e      	mov	r6, r7
 80121ce:	d1f7      	bne.n	80121c0 <__utoa+0x10>
 80121d0:	6818      	ldr	r0, [r3, #0]
 80121d2:	791b      	ldrb	r3, [r3, #4]
 80121d4:	713b      	strb	r3, [r7, #4]
 80121d6:	1e93      	subs	r3, r2, #2
 80121d8:	2b22      	cmp	r3, #34	; 0x22
 80121da:	6038      	str	r0, [r7, #0]
 80121dc:	f04f 0300 	mov.w	r3, #0
 80121e0:	d904      	bls.n	80121ec <__utoa+0x3c>
 80121e2:	7023      	strb	r3, [r4, #0]
 80121e4:	461c      	mov	r4, r3
 80121e6:	4620      	mov	r0, r4
 80121e8:	b00b      	add	sp, #44	; 0x2c
 80121ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121ec:	1e66      	subs	r6, r4, #1
 80121ee:	fbb5 f0f2 	udiv	r0, r5, r2
 80121f2:	af0a      	add	r7, sp, #40	; 0x28
 80121f4:	fb02 5510 	mls	r5, r2, r0, r5
 80121f8:	443d      	add	r5, r7
 80121fa:	1c59      	adds	r1, r3, #1
 80121fc:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8012200:	f806 5f01 	strb.w	r5, [r6, #1]!
 8012204:	4605      	mov	r5, r0
 8012206:	b968      	cbnz	r0, 8012224 <__utoa+0x74>
 8012208:	5460      	strb	r0, [r4, r1]
 801220a:	4423      	add	r3, r4
 801220c:	4622      	mov	r2, r4
 801220e:	1b19      	subs	r1, r3, r4
 8012210:	1b10      	subs	r0, r2, r4
 8012212:	4281      	cmp	r1, r0
 8012214:	dde7      	ble.n	80121e6 <__utoa+0x36>
 8012216:	7811      	ldrb	r1, [r2, #0]
 8012218:	7818      	ldrb	r0, [r3, #0]
 801221a:	f802 0b01 	strb.w	r0, [r2], #1
 801221e:	f803 1901 	strb.w	r1, [r3], #-1
 8012222:	e7f4      	b.n	801220e <__utoa+0x5e>
 8012224:	460b      	mov	r3, r1
 8012226:	e7e2      	b.n	80121ee <__utoa+0x3e>
 8012228:	08014e84 	.word	0x08014e84

0801222c <__malloc_lock>:
 801222c:	4770      	bx	lr

0801222e <__malloc_unlock>:
 801222e:	4770      	bx	lr

08012230 <_init>:
 8012230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012232:	bf00      	nop
 8012234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012236:	bc08      	pop	{r3}
 8012238:	469e      	mov	lr, r3
 801223a:	4770      	bx	lr

0801223c <_fini>:
 801223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801223e:	bf00      	nop
 8012240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012242:	bc08      	pop	{r3}
 8012244:	469e      	mov	lr, r3
 8012246:	4770      	bx	lr
