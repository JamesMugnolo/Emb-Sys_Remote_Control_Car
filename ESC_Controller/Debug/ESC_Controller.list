
ESC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f88  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ba4  08011168  08011168  00021168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d0c  08013d0c  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08013d0c  08013d0c  00023d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d14  08013d14  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d14  08013d14  00023d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d18  08013d18  00023d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08013d1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005508  200000ec  08013e08  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200055f4  08013e08  000355f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00040c14  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000071bd  00000000  00000000  00070d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003098  00000000  00000000  00077ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002da8  00000000  00000000  0007af88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c014  00000000  00000000  0007dd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002b289  00000000  00000000  00089d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd958  00000000  00000000  000b4fcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b2925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d260  00000000  00000000  001b29a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011150 	.word	0x08011150

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f0 	.word	0x200000f0
 800021c:	08011150 	.word	0x08011150

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f002 fe32 	bl	800318c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f850 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 fbd0 	bl	8000cd0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000530:	f000 f8ec 	bl	800070c <MX_ADC1_Init>
  MX_DAC_Init();
 8000534:	f000 f93c 	bl	80007b0 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000538:	f000 f964 	bl	8000804 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 800053c:	f000 f99a 	bl	8000874 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000540:	f000 fa02 	bl	8000948 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000544:	f000 fd38 	bl	8000fb8 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000548:	f000 fa62 	bl	8000a10 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 800054c:	f000 fa8e 	bl	8000a6c <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000550:	f000 fab8 	bl	8000ac4 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000554:	f000 fb68 	bl	8000c28 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000558:	f000 fb90 	bl	8000c7c <MX_USART6_UART_Init>
  MX_I2C2_Init();
 800055c:	f000 fa2a 	bl	80009b4 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000560:	f000 fae0 	bl	8000b24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000564:	f002 faf3 	bl	8002b4e <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000568:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800056c:	f002 fbba 	bl	8002ce4 <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000570:	2100      	movs	r1, #0
 8000572:	2000      	movs	r0, #0
 8000574:	f002 f936 	bl	80027e4 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8000578:	480f      	ldr	r0, [pc, #60]	; (80005b8 <main+0x98>)
 800057a:	f002 fb97 	bl	8002cac <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800057e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000582:	f002 fb73 	bl	8002c6c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000586:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800058a:	f002 fb7f 	bl	8002c8c <BSP_LCD_SetBackColor>
  //BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project...", CENTER_MODE);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800058e:	2104      	movs	r1, #4
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <main+0x9c>)
 8000592:	f008 f971 	bl	8008878 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000596:	2108      	movs	r1, #8
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <main+0x9c>)
 800059a:	f008 f96d 	bl	8008878 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059e:	f00d fa0b 	bl	800d9b8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RunMoters */
  RunMotersHandle = osThreadNew(StartDefaultTask, NULL, &RunMoters_attributes);
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <main+0xa0>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <main+0xa4>)
 80005a8:	f00d fa70 	bl	800da8c <osThreadNew>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <main+0xa8>)
 80005b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b2:	f00d fa35 	bl	800da20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <main+0x96>
 80005b8:	2000004c 	.word	0x2000004c
 80005bc:	20004bcc 	.word	0x20004bcc
 80005c0:	0801119c 	.word	0x0801119c
 80005c4:	0800111d 	.word	0x0800111d
 80005c8:	20004afc 	.word	0x20004afc

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0aa      	sub	sp, #168	; 0xa8
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80005d6:	2234      	movs	r2, #52	; 0x34
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f010 fcb7 	bl	8010f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	2258      	movs	r2, #88	; 0x58
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f010 fca8 	bl	8010f4e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b40      	ldr	r3, [pc, #256]	; (8000704 <SystemClock_Config+0x138>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000606:	4a3f      	ldr	r2, [pc, #252]	; (8000704 <SystemClock_Config+0x138>)
 8000608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060c:	6413      	str	r3, [r2, #64]	; 0x40
 800060e:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <SystemClock_Config+0x138>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	2300      	movs	r3, #0
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	4b3a      	ldr	r3, [pc, #232]	; (8000708 <SystemClock_Config+0x13c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a39      	ldr	r2, [pc, #228]	; (8000708 <SystemClock_Config+0x13c>)
 8000624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	4b37      	ldr	r3, [pc, #220]	; (8000708 <SystemClock_Config+0x13c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000636:	2303      	movs	r3, #3
 8000638:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800063a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800063e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000640:	2301      	movs	r3, #1
 8000642:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	2302      	movs	r3, #2
 800064e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800065a:	230f      	movs	r3, #15
 800065c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000660:	2390      	movs	r3, #144	; 0x90
 8000662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800066c:	2305      	movs	r3, #5
 800066e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800067c:	4618      	mov	r0, r3
 800067e:	f007 f885 	bl	800778c <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000688:	f000 fdb0 	bl	80011ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f006 fa96 	bl	8006bd8 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80006b2:	f000 fd9b 	bl	80011ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80006b6:	f240 1371 	movw	r3, #369	; 0x171
 80006ba:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80006bc:	2332      	movs	r3, #50	; 0x32
 80006be:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80006c0:	230c      	movs	r3, #12
 80006c2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80006d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80006da:	2300      	movs	r3, #0
 80006dc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80006e2:	2300      	movs	r3, #0
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fc72 	bl	8006fd4 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80006f6:	f000 fd79 	bl	80011ec <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	37a8      	adds	r7, #168	; 0xa8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x9c>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800072a:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_ADC1_Init+0x98>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_ADC1_Init+0x98>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_ADC1_Init+0x98>)
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_ADC1_Init+0xa0>)
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000758:	2201      	movs	r2, #1
 800075a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC1_Init+0x98>)
 8000766:	2201      	movs	r2, #1
 8000768:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <MX_ADC1_Init+0x98>)
 800076c:	f002 fd72 	bl	8003254 <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000776:	f000 fd39 	bl	80011ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800077a:	230a      	movs	r3, #10
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_ADC1_Init+0x98>)
 800078c:	f002 fede 	bl	800354c <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000796:	f000 fd29 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20004c44 	.word	0x20004c44
 80007a8:	40012000 	.word	0x40012000
 80007ac:	0f000001 	.word	0x0f000001

080007b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_DAC_Init+0x4c>)
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_DAC_Init+0x50>)
 80007c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <MX_DAC_Init+0x4c>)
 80007c6:	f003 f9d1 	bl	8003b6c <HAL_DAC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007d0:	f000 fd0c 	bl	80011ec <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_DAC_Init+0x4c>)
 80007e4:	f003 fa38 	bl	8003c58 <HAL_DAC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007ee:	f000 fcfd 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20004c8c 	.word	0x20004c8c
 8000800:	40007400 	.word	0x40007400

08000804 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_DFSDM1_Init+0x68>)
 800080a:	4a19      	ldr	r2, [pc, #100]	; (8000870 <MX_DFSDM1_Init+0x6c>)
 800080c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000810:	2201      	movs	r2, #1
 8000812:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_DFSDM1_Init+0x68>)
 800081c:	2202      	movs	r2, #2
 800081e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_DFSDM1_Init+0x68>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000834:	2202      	movs	r2, #2
 8000836:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_DFSDM1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000846:	2201      	movs	r2, #1
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_DFSDM1_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000852:	2200      	movs	r2, #0
 8000854:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000858:	f003 fa56 	bl	8003d08 <HAL_DFSDM_ChannelInit>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000862:	f000 fcc3 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20004a70 	.word	0x20004a70
 8000870:	40016020 	.word	0x40016020

08000874 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 800087a:	4a30      	ldr	r2, [pc, #192]	; (800093c <MX_DFSDM2_Init+0xc8>)
 800087c:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 800087e:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 8000880:	2201      	movs	r2, #1
 8000882:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000884:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 800088c:	2202      	movs	r2, #2
 800088e:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 80008a4:	2202      	movs	r2, #2
 80008a6:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80008c6:	481c      	ldr	r0, [pc, #112]	; (8000938 <MX_DFSDM2_Init+0xc4>)
 80008c8:	f003 fa1e 	bl	8003d08 <HAL_DFSDM_ChannelInit>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80008d2:	f000 fc8b 	bl	80011ec <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 80008d8:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <MX_DFSDM2_Init+0xd0>)
 80008da:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 80008de:	2201      	movs	r2, #1
 80008e0:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 80008ea:	2202      	movs	r2, #2
 80008ec:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 8000902:	2202      	movs	r2, #2
 8000904:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 8000914:	2201      	movs	r2, #1
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 800091a:	2200      	movs	r2, #0
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000924:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_DFSDM2_Init+0xcc>)
 8000926:	f003 f9ef 	bl	8003d08 <HAL_DFSDM_ChannelInit>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000930:	f000 fc5c 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20004c0c 	.word	0x20004c0c
 800093c:	40016420 	.word	0x40016420
 8000940:	20004b00 	.word	0x20004b00
 8000944:	400164e0 	.word	0x400164e0

08000948 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 800094e:	4a17      	ldr	r2, [pc, #92]	; (80009ac <MX_FMPI2C1_Init+0x64>)
 8000950:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 8000954:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_FMPI2C1_Init+0x68>)
 8000956:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 8000984:	f003 fb14 	bl	8003fb0 <HAL_FMPI2C_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800098e:	f000 fc2d 	bl	80011ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_FMPI2C1_Init+0x60>)
 8000996:	f003 fb9a 	bl	80040ce <HAL_FMPI2CEx_ConfigAnalogFilter>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 80009a0:	f000 fc24 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20004ca0 	.word	0x20004ca0
 80009ac:	40006000 	.word	0x40006000
 80009b0:	00303d5b 	.word	0x00303d5b

080009b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009ba:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <MX_I2C2_Init+0x54>)
 80009bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009c0:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_I2C2_Init+0x58>)
 80009c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_I2C2_Init+0x50>)
 80009f2:	f005 fa53 	bl	8005e9c <HAL_I2C_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009fc:	f000 fbf6 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20004aa8 	.word	0x20004aa8
 8000a08:	40005800 	.word	0x40005800
 8000a0c:	000186a0 	.word	0x000186a0

08000a10 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <MX_I2S2_Init+0x58>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a20:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a38:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a3c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_I2S2_Init+0x54>)
 8000a52:	f005 fb5b 	bl	800610c <HAL_I2S_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000a5c:	f000 fbc6 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20004e00 	.word	0x20004e00
 8000a68:	40003800 	.word	0x40003800

08000a6c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000a72:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <MX_QUADSPI_Init+0x54>)
 8000a74:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000a78:	22ff      	movs	r2, #255	; 0xff
 8000a7a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_QUADSPI_Init+0x50>)
 8000aa8:	f005 ffd4 	bl	8006a54 <HAL_QSPI_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000ab2:	f000 fb9b 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20004e48 	.word	0x20004e48
 8000ac0:	a0001000 	.word	0xa0001000

08000ac4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <MX_SDIO_SD_Init+0x5c>)
 8000acc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ae0:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000af2:	480a      	ldr	r0, [pc, #40]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000af4:	f007 f88c 	bl	8007c10 <HAL_SD_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000afe:	f000 fb75 	bl	80011ec <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000b02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_SDIO_SD_Init+0x58>)
 8000b08:	f007 fab6 	bl	8008078 <HAL_SD_ConfigWideBusOperation>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000b12:	f000 fb6b 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20004d3c 	.word	0x20004d3c
 8000b20:	40012c00 	.word	0x40012c00

08000b24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	; 0x38
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 0320 	add.w	r3, r7, #32
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b54:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000b56:	4a33      	ldr	r2, [pc, #204]	; (8000c24 <MX_TIM3_Init+0x100>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000b5a:	4b31      	ldr	r3, [pc, #196]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000b5c:	220f      	movs	r2, #15
 8000b5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000b68:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b7a:	4829      	ldr	r0, [pc, #164]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000b7c:	f007 fdf8 	bl	8008770 <HAL_TIM_Base_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b86:	f000 fb31 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4822      	ldr	r0, [pc, #136]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000b98:	f008 f87a 	bl	8008c90 <HAL_TIM_ConfigClockSource>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ba2:	f000 fb23 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ba6:	481e      	ldr	r0, [pc, #120]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000ba8:	f007 fe31 	bl	800880e <HAL_TIM_PWM_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bb2:	f000 fb1b 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bbe:	f107 0320 	add.w	r3, r7, #32
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4816      	ldr	r0, [pc, #88]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000bc6:	f008 fc53 	bl	8009470 <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bd0:	f000 fb0c 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd4:	2360      	movs	r3, #96	; 0x60
 8000bd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2204      	movs	r2, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000bee:	f007 ff89 	bl	8008b04 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000bf8:	f000 faf8 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2208      	movs	r2, #8
 8000c00:	4619      	mov	r1, r3
 8000c02:	4807      	ldr	r0, [pc, #28]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000c04:	f007 ff7e 	bl	8008b04 <HAL_TIM_PWM_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c0e:	f000 faed 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c12:	4803      	ldr	r0, [pc, #12]	; (8000c20 <MX_TIM3_Init+0xfc>)
 8000c14:	f000 ff92 	bl	8001b3c <HAL_TIM_MspPostInit>

}
 8000c18:	bf00      	nop
 8000c1a:	3738      	adds	r7, #56	; 0x38
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20004bcc 	.word	0x20004bcc
 8000c24:	40000400 	.word	0x40000400

08000c28 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_UART10_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_UART10_Init+0x4c>)
 8000c60:	f008 fc96 	bl	8009590 <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000c6a:	f000 fabf 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20004b3c 	.word	0x20004b3c
 8000c78:	40011c00 	.word	0x40011c00

08000c7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART6_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART6_UART_Init+0x4c>)
 8000cb4:	f008 fc6c 	bl	8009590 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f000 fa95 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	20004dc0 	.word	0x20004dc0
 8000ccc:	40011400 	.word	0x40011400

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	; 0x38
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
 8000cea:	4bab      	ldr	r3, [pc, #684]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4aaa      	ldr	r2, [pc, #680]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000cf0:	f043 0310 	orr.w	r3, r3, #16
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4ba8      	ldr	r3, [pc, #672]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0310 	and.w	r3, r3, #16
 8000cfe:	623b      	str	r3, [r7, #32]
 8000d00:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	4ba4      	ldr	r3, [pc, #656]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4aa3      	ldr	r2, [pc, #652]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4ba1      	ldr	r3, [pc, #644]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0304 	and.w	r3, r3, #4
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	4b9d      	ldr	r3, [pc, #628]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a9c      	ldr	r2, [pc, #624]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d28:	f043 0320 	orr.w	r3, r3, #32
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b9a      	ldr	r3, [pc, #616]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0320 	and.w	r3, r3, #32
 8000d36:	61bb      	str	r3, [r7, #24]
 8000d38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	4b96      	ldr	r3, [pc, #600]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a95      	ldr	r2, [pc, #596]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b93      	ldr	r3, [pc, #588]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b8f      	ldr	r3, [pc, #572]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a8e      	ldr	r2, [pc, #568]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b8c      	ldr	r3, [pc, #560]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b88      	ldr	r3, [pc, #544]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a87      	ldr	r2, [pc, #540]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b85      	ldr	r3, [pc, #532]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	4b81      	ldr	r3, [pc, #516]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a80      	ldr	r2, [pc, #512]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b7e      	ldr	r3, [pc, #504]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b7a      	ldr	r3, [pc, #488]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a79      	ldr	r2, [pc, #484]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000db4:	f043 0308 	orr.w	r3, r3, #8
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b77      	ldr	r3, [pc, #476]	; (8000f98 <MX_GPIO_Init+0x2c8>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2138      	movs	r1, #56	; 0x38
 8000dca:	4874      	ldr	r0, [pc, #464]	; (8000f9c <MX_GPIO_Init+0x2cc>)
 8000dcc:	f003 fb5c 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	4872      	ldr	r0, [pc, #456]	; (8000fa0 <MX_GPIO_Init+0x2d0>)
 8000dd6:	f003 fb57 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000de0:	4870      	ldr	r0, [pc, #448]	; (8000fa4 <MX_GPIO_Init+0x2d4>)
 8000de2:	f003 fb51 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8000dec:	486e      	ldr	r0, [pc, #440]	; (8000fa8 <MX_GPIO_Init+0x2d8>)
 8000dee:	f003 fb4b 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	486c      	ldr	r0, [pc, #432]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000dfa:	f003 fb45 	bl	8004488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000dfe:	2338      	movs	r3, #56	; 0x38
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4861      	ldr	r0, [pc, #388]	; (8000f9c <MX_GPIO_Init+0x2cc>)
 8000e16:	f003 f9a5 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000e1a:	2340      	movs	r3, #64	; 0x40
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4859      	ldr	r0, [pc, #356]	; (8000f9c <MX_GPIO_Init+0x2cc>)
 8000e36:	f003 f995 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4856      	ldr	r0, [pc, #344]	; (8000fb0 <MX_GPIO_Init+0x2e0>)
 8000e58:	f003 f984 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e60:	4b54      	ldr	r3, [pc, #336]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	484c      	ldr	r0, [pc, #304]	; (8000fa0 <MX_GPIO_Init+0x2d0>)
 8000e70:	f003 f978 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000e74:	2301      	movs	r3, #1
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e78:	4b4e      	ldr	r3, [pc, #312]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	4849      	ldr	r0, [pc, #292]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000e88:	f003 f96c 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	483f      	ldr	r0, [pc, #252]	; (8000fa0 <MX_GPIO_Init+0x2d0>)
 8000ea4:	f003 f95e 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eae:	4b41      	ldr	r3, [pc, #260]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	483c      	ldr	r0, [pc, #240]	; (8000fb0 <MX_GPIO_Init+0x2e0>)
 8000ebe:	f003 f951 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	4619      	mov	r1, r3
 8000ede:	4831      	ldr	r0, [pc, #196]	; (8000fa4 <MX_GPIO_Init+0x2d4>)
 8000ee0:	f003 f940 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin PB8 */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8;
 8000ee4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <MX_GPIO_Init+0x2d4>)
 8000efe:	f003 f931 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000f02:	f248 0380 	movw	r3, #32896	; 0x8080
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f08:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4824      	ldr	r0, [pc, #144]	; (8000fa8 <MX_GPIO_Init+0x2d8>)
 8000f18:	f003 f924 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13;
 8000f1c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	481c      	ldr	r0, [pc, #112]	; (8000fa8 <MX_GPIO_Init+0x2d8>)
 8000f36:	f003 f915 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4816      	ldr	r0, [pc, #88]	; (8000fac <MX_GPIO_Init+0x2dc>)
 8000f54:	f003 f906 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D12_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_GPIO_Init+0x2d4>)
 8000f74:	f003 f8f6 	bl	8004164 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <MX_GPIO_Init+0x2e4>)
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_GPIO_Init+0x2d4>)
 8000f8c:	f003 f8ea 	bl	8004164 <HAL_GPIO_Init>

}
 8000f90:	bf00      	nop
 8000f92:	3738      	adds	r7, #56	; 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40021800 	.word	0x40021800
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40021400 	.word	0x40021400
 8000fb4:	10110000 	.word	0x10110000

08000fb8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fd0:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <MX_FSMC_Init+0x158>)
 8000fd2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fd6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <MX_FSMC_Init+0x158>)
 8000fda:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <MX_FSMC_Init+0x15c>)
 8000fdc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <MX_FSMC_Init+0x158>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <MX_FSMC_Init+0x158>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <MX_FSMC_Init+0x158>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000ff0:	4b47      	ldr	r3, [pc, #284]	; (8001110 <MX_FSMC_Init+0x158>)
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000ff6:	4b46      	ldr	r3, [pc, #280]	; (8001110 <MX_FSMC_Init+0x158>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ffc:	4b44      	ldr	r3, [pc, #272]	; (8001110 <MX_FSMC_Init+0x158>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <MX_FSMC_Init+0x158>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001008:	4b41      	ldr	r3, [pc, #260]	; (8001110 <MX_FSMC_Init+0x158>)
 800100a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001010:	4b3f      	ldr	r3, [pc, #252]	; (8001110 <MX_FSMC_Init+0x158>)
 8001012:	2200      	movs	r2, #0
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001016:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <MX_FSMC_Init+0x158>)
 8001018:	2200      	movs	r2, #0
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800101c:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <MX_FSMC_Init+0x158>)
 800101e:	2200      	movs	r2, #0
 8001020:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001022:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <MX_FSMC_Init+0x158>)
 8001024:	2200      	movs	r2, #0
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001028:	4b39      	ldr	r3, [pc, #228]	; (8001110 <MX_FSMC_Init+0x158>)
 800102a:	2200      	movs	r2, #0
 800102c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <MX_FSMC_Init+0x158>)
 8001030:	2200      	movs	r2, #0
 8001032:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <MX_FSMC_Init+0x158>)
 8001036:	2200      	movs	r2, #0
 8001038:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800103a:	230f      	movs	r3, #15
 800103c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800103e:	230f      	movs	r3, #15
 8001040:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001042:	23ff      	movs	r3, #255	; 0xff
 8001044:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001046:	230f      	movs	r3, #15
 8001048:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800104a:	2310      	movs	r3, #16
 800104c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800104e:	2311      	movs	r3, #17
 8001050:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001056:	1d3b      	adds	r3, r7, #4
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	482c      	ldr	r0, [pc, #176]	; (8001110 <MX_FSMC_Init+0x158>)
 800105e:	f007 fb43 	bl	80086e8 <HAL_SRAM_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001068:	f000 f8c0 	bl	80011ec <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <MX_FSMC_Init+0x160>)
 800106e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001072:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <MX_FSMC_Init+0x160>)
 8001076:	4a27      	ldr	r2, [pc, #156]	; (8001114 <MX_FSMC_Init+0x15c>)
 8001078:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <MX_FSMC_Init+0x160>)
 800107c:	2204      	movs	r2, #4
 800107e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <MX_FSMC_Init+0x160>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001086:	4b24      	ldr	r3, [pc, #144]	; (8001118 <MX_FSMC_Init+0x160>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_FSMC_Init+0x160>)
 800108e:	2210      	movs	r2, #16
 8001090:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_FSMC_Init+0x160>)
 8001094:	2200      	movs	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <MX_FSMC_Init+0x160>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_FSMC_Init+0x160>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_FSMC_Init+0x160>)
 80010a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_FSMC_Init+0x160>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <MX_FSMC_Init+0x160>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <MX_FSMC_Init+0x160>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_FSMC_Init+0x160>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_FSMC_Init+0x160>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_FSMC_Init+0x160>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_FSMC_Init+0x160>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010d6:	230f      	movs	r3, #15
 80010d8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80010da:	230f      	movs	r3, #15
 80010dc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80010e2:	230f      	movs	r3, #15
 80010e4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010e6:	2310      	movs	r3, #16
 80010e8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010ea:	2311      	movs	r3, #17
 80010ec:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_FSMC_Init+0x160>)
 80010fa:	f007 faf5 	bl	80086e8 <HAL_SRAM_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8001104:	f000 f872 	bl	80011ec <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001108:	bf00      	nop
 800110a:	3720      	adds	r7, #32
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20004b7c 	.word	0x20004b7c
 8001114:	a0000104 	.word	0xa0000104
 8001118:	20004cec 	.word	0x20004cec

0800111c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001124:	f00f fbb2 	bl	801088c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  char buffer[20];
  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,5); //this compares tim3 channel 2s pulse  and changes the pulse if its not the same
  /* Infinite loop */
  uint16_t resistorVal = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	83fb      	strh	r3, [r7, #30]
  uint16_t printVal;
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 800112c:	4822      	ldr	r0, [pc, #136]	; (80011b8 <StartDefaultTask+0x9c>)
 800112e:	f002 f8d5 	bl	80032dc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,50);
 8001132:	2132      	movs	r1, #50	; 0x32
 8001134:	4820      	ldr	r0, [pc, #128]	; (80011b8 <StartDefaultTask+0x9c>)
 8001136:	f002 f977 	bl	8003428 <HAL_ADC_PollForConversion>
	  resistorVal = HAL_ADC_GetValue(&hadc1);
 800113a:	481f      	ldr	r0, [pc, #124]	; (80011b8 <StartDefaultTask+0x9c>)
 800113c:	f002 f9f8 	bl	8003530 <HAL_ADC_GetValue>
 8001140:	4603      	mov	r3, r0
 8001142:	83fb      	strh	r3, [r7, #30]
	  motor1Val = (DUTY_CYCLE_MAX * resistorVal) / RESISTOR_MAX;
 8001144:	8bfb      	ldrh	r3, [r7, #30]
 8001146:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <StartDefaultTask+0xa0>)
 8001150:	fb82 1203 	smull	r1, r2, r2, r3
 8001154:	441a      	add	r2, r3
 8001156:	12d2      	asrs	r2, r2, #11
 8001158:	17db      	asrs	r3, r3, #31
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <StartDefaultTask+0xa4>)
 8001160:	801a      	strh	r2, [r3, #0]
	  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001162:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001166:	f001 fd81 	bl	8002c6c <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(1, buffer);
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	2001      	movs	r0, #1
 8001172:	f001 fea9 	bl	8002ec8 <BSP_LCD_DisplayStringAtLine>
	  itoa(motor1Val,buffer,10);
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <StartDefaultTask+0xa4>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	220a      	movs	r2, #10
 8001182:	4619      	mov	r1, r3
 8001184:	f00f fec6 	bl	8010f14 <itoa>
	  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001188:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800118c:	f001 fd6e 	bl	8002c6c <BSP_LCD_SetTextColor>
	  BSP_LCD_DisplayStringAtLine(1, buffer);
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4619      	mov	r1, r3
 8001196:	2001      	movs	r0, #1
 8001198:	f001 fe96 	bl	8002ec8 <BSP_LCD_DisplayStringAtLine>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,motor1Val);
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <StartDefaultTask+0xa4>)
 800119e:	881a      	ldrh	r2, [r3, #0]
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <StartDefaultTask+0xa8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,motor1Val);
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <StartDefaultTask+0xa4>)
 80011a8:	881a      	ldrh	r2, [r3, #0]
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <StartDefaultTask+0xa8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
	  osDelay(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f00c fd11 	bl	800dbd8 <osDelay>
  {
 80011b6:	e7b9      	b.n	800112c <StartDefaultTask+0x10>
 80011b8:	20004c44 	.word	0x20004c44
 80011bc:	80080081 	.word	0x80080081
 80011c0:	20004b38 	.word	0x20004b38
 80011c4:	20004bcc 	.word	0x20004bcc

080011c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d101      	bne.n	80011de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011da:	f001 fff9 	bl	80031d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40001000 	.word	0x40001000

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_MspInit+0x4c>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <HAL_MspInit+0x4c>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	6453      	str	r3, [r2, #68]	; 0x44
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_MspInit+0x4c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_MspInit+0x4c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800

0800124c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a31      	ldr	r2, [pc, #196]	; (8001330 <HAL_ADC_MspInit+0xe4>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d15b      	bne.n	8001326 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	4b29      	ldr	r3, [pc, #164]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a28      	ldr	r2, [pc, #160]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b26      	ldr	r3, [pc, #152]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a21      	ldr	r2, [pc, #132]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012cc:	f043 0302 	orr.w	r3, r3, #2
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_ADC_MspInit+0xe8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80012de:	2311      	movs	r3, #17
 80012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4811      	ldr	r0, [pc, #68]	; (8001338 <HAL_ADC_MspInit+0xec>)
 80012f2:	f002 ff37 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80012f6:	2326      	movs	r3, #38	; 0x26
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <HAL_ADC_MspInit+0xf0>)
 800130a:	f002 ff2b 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800130e:	2302      	movs	r3, #2
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <HAL_ADC_MspInit+0xf4>)
 8001322:	f002 ff1f 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40012000 	.word	0x40012000
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020000 	.word	0x40020000
 8001340:	40020400 	.word	0x40020400

08001344 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08a      	sub	sp, #40	; 0x28
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <HAL_DAC_MspInit+0x8c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d12f      	bne.n	80013c6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_DAC_MspInit+0x90>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_DAC_MspInit+0x90>)
 8001370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_DAC_MspInit+0x90>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HAL_DAC_MspInit+0x90>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_DAC_MspInit+0x90>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <HAL_DAC_MspInit+0x90>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800139e:	2310      	movs	r3, #16
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <HAL_DAC_MspInit+0x94>)
 80013b2:	f002 fed7 	bl	8004164 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2036      	movs	r0, #54	; 0x36
 80013bc:	f002 fbac 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013c0:	2036      	movs	r0, #54	; 0x36
 80013c2:	f002 fbc5 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40007400 	.word	0x40007400
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08e      	sub	sp, #56	; 0x38
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00e      	beq.n	800141c <HAL_DFSDM_ChannelMspInit+0x40>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a76      	ldr	r2, [pc, #472]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x200>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d009      	beq.n	800141c <HAL_DFSDM_ChannelMspInit+0x40>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a74      	ldr	r2, [pc, #464]	; (80015e0 <HAL_DFSDM_ChannelMspInit+0x204>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d004      	beq.n	800141c <HAL_DFSDM_ChannelMspInit+0x40>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a73      	ldr	r2, [pc, #460]	; (80015e4 <HAL_DFSDM_ChannelMspInit+0x208>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d154      	bne.n	80014c6 <HAL_DFSDM_ChannelMspInit+0xea>
 800141c:	4b72      	ldr	r3, [pc, #456]	; (80015e8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d150      	bne.n	80014c6 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	4b70      	ldr	r3, [pc, #448]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	4a6f      	ldr	r2, [pc, #444]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 800142e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001432:	6453      	str	r3, [r2, #68]	; 0x44
 8001434:	4b6d      	ldr	r3, [pc, #436]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800143c:	623b      	str	r3, [r7, #32]
 800143e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	4b69      	ldr	r3, [pc, #420]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a68      	ldr	r2, [pc, #416]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b66      	ldr	r3, [pc, #408]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	4b62      	ldr	r3, [pc, #392]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a61      	ldr	r2, [pc, #388]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b5f      	ldr	r3, [pc, #380]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	2300      	movs	r3, #0
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800148a:	2306      	movs	r3, #6
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001492:	4619      	mov	r1, r3
 8001494:	4856      	ldr	r0, [pc, #344]	; (80015f0 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001496:	f002 fe65 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 800149a:	2340      	movs	r3, #64	; 0x40
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014aa:	2306      	movs	r3, #6
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	484f      	ldr	r0, [pc, #316]	; (80015f4 <HAL_DFSDM_ChannelMspInit+0x218>)
 80014b6:	f002 fe55 	bl	8004164 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80014ba:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80014c4:	e084      	b.n	80015d0 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a43      	ldr	r2, [pc, #268]	; (80015d8 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d07f      	beq.n	80015d0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a41      	ldr	r2, [pc, #260]	; (80015dc <HAL_DFSDM_ChannelMspInit+0x200>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d07a      	beq.n	80015d0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a40      	ldr	r2, [pc, #256]	; (80015e0 <HAL_DFSDM_ChannelMspInit+0x204>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d075      	beq.n	80015d0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a3e      	ldr	r2, [pc, #248]	; (80015e4 <HAL_DFSDM_ChannelMspInit+0x208>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d070      	beq.n	80015d0 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d16c      	bne.n	80015d0 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a3b      	ldr	r2, [pc, #236]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001500:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a34      	ldr	r2, [pc, #208]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a2d      	ldr	r2, [pc, #180]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001538:	f043 0308 	orr.w	r3, r3, #8
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0308 	and.w	r3, r3, #8
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a26      	ldr	r2, [pc, #152]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_DFSDM_ChannelMspInit+0x210>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001576:	2307      	movs	r3, #7
 8001578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	481b      	ldr	r0, [pc, #108]	; (80015f0 <HAL_DFSDM_ChannelMspInit+0x214>)
 8001582:	f002 fdef 	bl	8004164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001586:	2304      	movs	r3, #4
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001596:	2303      	movs	r3, #3
 8001598:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800159a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159e:	4619      	mov	r1, r3
 80015a0:	4814      	ldr	r0, [pc, #80]	; (80015f4 <HAL_DFSDM_ChannelMspInit+0x218>)
 80015a2:	f002 fddf 	bl	8004164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80015b6:	2306      	movs	r3, #6
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <HAL_DFSDM_ChannelMspInit+0x220>)
 80015c2:	f002 fdcf 	bl	8004164 <HAL_GPIO_Init>
  DFSDM2_Init++;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80015ce:	6013      	str	r3, [r2, #0]
}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	; 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40016000 	.word	0x40016000
 80015dc:	40016020 	.word	0x40016020
 80015e0:	40016040 	.word	0x40016040
 80015e4:	40016060 	.word	0x40016060
 80015e8:	20000108 	.word	0x20000108
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	2000010c 	.word	0x2000010c
 80015fc:	40020400 	.word	0x40020400

08001600 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	; (8001684 <HAL_FMPI2C_MspInit+0x84>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12b      	bne.n	800167a <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <HAL_FMPI2C_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a17      	ldr	r2, [pc, #92]	; (8001688 <HAL_FMPI2C_MspInit+0x88>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_FMPI2C_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800163e:	23c0      	movs	r3, #192	; 0xc0
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001642:	2312      	movs	r3, #18
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001646:	2301      	movs	r3, #1
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800164e:	2304      	movs	r3, #4
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <HAL_FMPI2C_MspInit+0x8c>)
 800165a:	f002 fd83 	bl	8004164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_FMPI2C_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_FMPI2C_MspInit+0x88>)
 8001668:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_FMPI2C_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40006000 	.word	0x40006000
 8001688:	40023800 	.word	0x40023800
 800168c:	40020800 	.word	0x40020800

08001690 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a19      	ldr	r2, [pc, #100]	; (8001714 <HAL_I2C_MspInit+0x84>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12c      	bne.n	800170c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80016ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d4:	2312      	movs	r3, #18
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <HAL_I2C_MspInit+0x8c>)
 80016ec:	f002 fd3a 	bl	8004164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_I2C_MspInit+0x88>)
 80016fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_I2C_MspInit+0x88>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40005800 	.word	0x40005800
 8001718:	40023800 	.word	0x40023800
 800171c:	40020400 	.word	0x40020400

08001720 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a4f      	ldr	r2, [pc, #316]	; (800187c <HAL_I2S_MspInit+0x15c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	f040 8097 	bne.w	8001872 <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	61bb      	str	r3, [r7, #24]
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_I2S_MspInit+0x160>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_I2S_MspInit+0x160>)
 800174e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_I2S_MspInit+0x160>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_I2S_MspInit+0x160>)
 8001766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001768:	4a45      	ldr	r2, [pc, #276]	; (8001880 <HAL_I2S_MspInit+0x160>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6313      	str	r3, [r2, #48]	; 0x30
 8001770:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_I2S_MspInit+0x160>)
 8001772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_I2S_MspInit+0x160>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	4a3e      	ldr	r2, [pc, #248]	; (8001880 <HAL_I2S_MspInit+0x160>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6313      	str	r3, [r2, #48]	; 0x30
 800178c:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <HAL_I2S_MspInit+0x160>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_I2S_MspInit+0x160>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a37      	ldr	r2, [pc, #220]	; (8001880 <HAL_I2S_MspInit+0x160>)
 80017a2:	f043 0308 	orr.w	r3, r3, #8
 80017a6:	6313      	str	r3, [r2, #48]	; 0x30
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_I2S_MspInit+0x160>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b31      	ldr	r3, [pc, #196]	; (8001880 <HAL_I2S_MspInit+0x160>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	4a30      	ldr	r2, [pc, #192]	; (8001880 <HAL_I2S_MspInit+0x160>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	6313      	str	r3, [r2, #48]	; 0x30
 80017c4:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <HAL_I2S_MspInit+0x160>)
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80017d0:	2304      	movs	r3, #4
 80017d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80017e0:	2306      	movs	r3, #6
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 031c 	add.w	r3, r7, #28
 80017e8:	4619      	mov	r1, r3
 80017ea:	4826      	ldr	r0, [pc, #152]	; (8001884 <HAL_I2S_MspInit+0x164>)
 80017ec:	f002 fcba 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80017f0:	2308      	movs	r3, #8
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001800:	2305      	movs	r3, #5
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	481e      	ldr	r0, [pc, #120]	; (8001884 <HAL_I2S_MspInit+0x164>)
 800180c:	f002 fcaa 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001810:	2308      	movs	r3, #8
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001820:	2305      	movs	r3, #5
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 031c 	add.w	r3, r7, #28
 8001828:	4619      	mov	r1, r3
 800182a:	4817      	ldr	r0, [pc, #92]	; (8001888 <HAL_I2S_MspInit+0x168>)
 800182c:	f002 fc9a 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001830:	2308      	movs	r3, #8
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001840:	2305      	movs	r3, #5
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	4810      	ldr	r0, [pc, #64]	; (800188c <HAL_I2S_MspInit+0x16c>)
 800184c:	f002 fc8a 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001862:	2305      	movs	r3, #5
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4808      	ldr	r0, [pc, #32]	; (8001890 <HAL_I2S_MspInit+0x170>)
 800186e:	f002 fc79 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001872:	bf00      	nop
 8001874:	3730      	adds	r7, #48	; 0x30
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40003800 	.word	0x40003800
 8001880:	40023800 	.word	0x40023800
 8001884:	40020800 	.word	0x40020800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40020400 	.word	0x40020400

08001894 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_QSPI_MspInit+0x178>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	f040 80a6 	bne.w	8001a04 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
 80018bc:	4b54      	ldr	r3, [pc, #336]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 80018be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c0:	4a53      	ldr	r2, [pc, #332]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	6393      	str	r3, [r2, #56]	; 0x38
 80018c8:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 80018ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a45      	ldr	r2, [pc, #276]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 80018fa:	f043 0320 	orr.w	r3, r3, #32
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b43      	ldr	r3, [pc, #268]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0320 	and.w	r3, r3, #32
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
 8001910:	4b3f      	ldr	r3, [pc, #252]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	4a3e      	ldr	r2, [pc, #248]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	6313      	str	r3, [r2, #48]	; 0x30
 800191c:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	4b38      	ldr	r3, [pc, #224]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a37      	ldr	r2, [pc, #220]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
 8001938:	4b35      	ldr	r3, [pc, #212]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	4a30      	ldr	r2, [pc, #192]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 800194e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001952:	6313      	str	r3, [r2, #48]	; 0x30
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_QSPI_MspInit+0x17c>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001960:	2304      	movs	r3, #4
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001970:	2309      	movs	r3, #9
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	4826      	ldr	r0, [pc, #152]	; (8001a14 <HAL_QSPI_MspInit+0x180>)
 800197c:	f002 fbf2 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001980:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001992:	230a      	movs	r3, #10
 8001994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199a:	4619      	mov	r1, r3
 800199c:	481e      	ldr	r0, [pc, #120]	; (8001a18 <HAL_QSPI_MspInit+0x184>)
 800199e:	f002 fbe1 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80019a2:	2304      	movs	r3, #4
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80019b2:	2309      	movs	r3, #9
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ba:	4619      	mov	r1, r3
 80019bc:	4817      	ldr	r0, [pc, #92]	; (8001a1c <HAL_QSPI_MspInit+0x188>)
 80019be:	f002 fbd1 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80019c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d0:	2303      	movs	r3, #3
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80019d4:	2309      	movs	r3, #9
 80019d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	4619      	mov	r1, r3
 80019de:	4810      	ldr	r0, [pc, #64]	; (8001a20 <HAL_QSPI_MspInit+0x18c>)
 80019e0:	f002 fbc0 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019f4:	230a      	movs	r3, #10
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019fc:	4619      	mov	r1, r3
 80019fe:	4809      	ldr	r0, [pc, #36]	; (8001a24 <HAL_QSPI_MspInit+0x190>)
 8001a00:	f002 fbb0 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a04:	bf00      	nop
 8001a06:	3738      	adds	r7, #56	; 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	a0001000 	.word	0xa0001000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021800 	.word	0x40021800

08001a28 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <HAL_SD_MspInit+0xc0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d14a      	bne.n	8001ae0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a26      	ldr	r2, [pc, #152]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b20      	ldr	r3, [pc, #128]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <HAL_SD_MspInit+0xc4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001a9e:	2340      	movs	r3, #64	; 0x40
 8001aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001aae:	230c      	movs	r3, #12
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <HAL_SD_MspInit+0xc8>)
 8001aba:	f002 fb53 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001abe:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ac2:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ad0:	230c      	movs	r3, #12
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	; (8001af4 <HAL_SD_MspInit+0xcc>)
 8001adc:	f002 fb42 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40012c00 	.word	0x40012c00
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020800 	.word	0x40020800

08001af8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_TIM_Base_MspInit+0x3c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d10d      	bne.n	8001b26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b14:	f043 0302 	orr.w	r3, r3, #2
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <HAL_TIM_Base_MspInit+0x40>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40000400 	.word	0x40000400
 8001b38:	40023800 	.word	0x40023800

08001b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_TIM_MspPostInit+0x68>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d11d      	bne.n	8001b9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <HAL_TIM_MspPostInit+0x6c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001b7a:	2321      	movs	r3, #33	; 0x21
 8001b7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_TIM_MspPostInit+0x70>)
 8001b96:	f002 fae5 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020400 	.word	0x40020400

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a33      	ldr	r2, [pc, #204]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12d      	bne.n	8001c2e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a31      	ldr	r2, [pc, #196]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a2a      	ldr	r2, [pc, #168]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001c0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c14:	2301      	movs	r3, #1
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001c1c:	230b      	movs	r3, #11
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	481f      	ldr	r0, [pc, #124]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001c28:	f002 fa9c 	bl	8004164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c2c:	e031      	b.n	8001c92 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1d      	ldr	r2, [pc, #116]	; (8001ca8 <HAL_UART_MspInit+0xf8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d12c      	bne.n	8001c92 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c42:	f043 0320 	orr.w	r3, r3, #32
 8001c46:	6453      	str	r3, [r2, #68]	; 0x44
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f003 0320 	and.w	r3, r3, #32
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001c70:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c82:	2308      	movs	r3, #8
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001c8e:	f002 fa69 	bl	8004164 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40011c00 	.word	0x40011c00
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40021800 	.word	0x40021800
 8001ca8:	40011400 	.word	0x40011400

08001cac <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001cc0:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_FSMC_MspInit+0xc8>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d151      	bne.n	8001d6c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_FSMC_MspInit+0xc8>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <HAL_FSMC_MspInit+0xcc>)
 8001cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd6:	4a28      	ldr	r2, [pc, #160]	; (8001d78 <HAL_FSMC_MspInit+0xcc>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6393      	str	r3, [r2, #56]	; 0x38
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_FSMC_MspInit+0xcc>)
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001cea:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001cee:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	481d      	ldr	r0, [pc, #116]	; (8001d7c <HAL_FSMC_MspInit+0xd0>)
 8001d06:	f002 fa2d 	bl	8004164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001d0a:	f240 433f 	movw	r3, #1087	; 0x43f
 8001d0e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4816      	ldr	r0, [pc, #88]	; (8001d80 <HAL_FSMC_MspInit+0xd4>)
 8001d26:	f002 fa1d 	bl	8004164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001d2a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001d2e:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	480f      	ldr	r0, [pc, #60]	; (8001d84 <HAL_FSMC_MspInit+0xd8>)
 8001d46:	f002 fa0d 	bl	8004164 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001d4a:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001d4e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4808      	ldr	r0, [pc, #32]	; (8001d88 <HAL_FSMC_MspInit+0xdc>)
 8001d66:	f002 f9fd 	bl	8004164 <HAL_GPIO_Init>
 8001d6a:	e000      	b.n	8001d6e <HAL_FSMC_MspInit+0xc2>
    return;
 8001d6c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000110 	.word	0x20000110
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40020c00 	.word	0x40020c00

08001d8c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001d94:	f7ff ff8a 	bl	8001cac <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001da8:	2300      	movs	r3, #0
 8001daa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	2036      	movs	r0, #54	; 0x36
 8001db6:	f001 feaf 	bl	8003b18 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dba:	2036      	movs	r0, #54	; 0x36
 8001dbc:	f001 fec8 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_InitTick+0xa0>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_InitTick+0xa0>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_InitTick+0xa0>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ddc:	f107 0210 	add.w	r2, r7, #16
 8001de0:	f107 0314 	add.w	r3, r7, #20
 8001de4:	4611      	mov	r1, r2
 8001de6:	4618      	mov	r0, r3
 8001de8:	f005 f8c2 	bl	8006f70 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001dec:	f005 f898 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
 8001df0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df4:	4a13      	ldr	r2, [pc, #76]	; (8001e44 <HAL_InitTick+0xa4>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0c9b      	lsrs	r3, r3, #18
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e02:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_InitTick+0xac>)
 8001e04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001e20:	4809      	ldr	r0, [pc, #36]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e22:	f006 fca5 	bl	8008770 <HAL_TIM_Base_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d104      	bne.n	8001e36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001e2c:	4806      	ldr	r0, [pc, #24]	; (8001e48 <HAL_InitTick+0xa8>)
 8001e2e:	f006 fcca 	bl	80087c6 <HAL_TIM_Base_Start_IT>
 8001e32:	4603      	mov	r3, r0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3730      	adds	r7, #48	; 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40023800 	.word	0x40023800
 8001e44:	431bde83 	.word	0x431bde83
 8001e48:	20004e94 	.word	0x20004e94
 8001e4c:	40001000 	.word	0x40001000

08001e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <HardFault_Handler+0x4>

08001e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <MemManage_Handler+0x4>

08001e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e6e:	e7fe      	b.n	8001e6e <BusFault_Handler+0x4>

08001e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <UsageFault_Handler+0x4>

08001e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001e88:	4803      	ldr	r0, [pc, #12]	; (8001e98 <TIM6_DAC_IRQHandler+0x14>)
 8001e8a:	f001 fe91 	bl	8003bb0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001e8e:	4803      	ldr	r0, [pc, #12]	; (8001e9c <TIM6_DAC_IRQHandler+0x18>)
 8001e90:	f006 fd30 	bl	80088f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20004c8c 	.word	0x20004c8c
 8001e9c:	20004e94 	.word	0x20004e94

08001ea0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <OTG_FS_IRQHandler+0x10>)
 8001ea6:	f002 fd97 	bl	80049d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000532c 	.word	0x2000532c

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f00e ffd4 	bl	8010e90 <__errno>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	230c      	movs	r3, #12
 8001eec:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20050000 	.word	0x20050000
 8001f14:	00000400 	.word	0x00000400
 8001f18:	20000114 	.word	0x20000114
 8001f1c:	200055f8 	.word	0x200055f8

08001f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <SystemInit+0x28>)
 8001f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2a:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <SystemInit+0x28>)
 8001f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f34:	4b04      	ldr	r3, [pc, #16]	; (8001f48 <SystemInit+0x28>)
 8001f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f3a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001f50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f52:	e003      	b.n	8001f5c <LoopCopyDataInit>

08001f54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f5a:	3104      	adds	r1, #4

08001f5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f5c:	480b      	ldr	r0, [pc, #44]	; (8001f8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f64:	d3f6      	bcc.n	8001f54 <CopyDataInit>
  ldr  r2, =_sbss
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f68:	e002      	b.n	8001f70 <LoopFillZerobss>

08001f6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001f6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f6c:	f842 3b04 	str.w	r3, [r2], #4

08001f70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f74:	d3f9      	bcc.n	8001f6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f76:	f7ff ffd3 	bl	8001f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f00e ff8f 	bl	8010e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7fe facf 	bl	8000520 <main>
  bx  lr    
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f84:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001f88:	08013d1c 	.word	0x08013d1c
  ldr  r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f90:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8001f94:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8001f98:	200055f4 	.word	0x200055f4

08001f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC_IRQHandler>

08001f9e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b084      	sub	sp, #16
 8001fa2:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001fa4:	f000 fd6e 	bl	8002a84 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2010      	movs	r0, #16
 8001fae:	f000 f9e4 	bl	800237a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001fb2:	200a      	movs	r0, #10
 8001fb4:	f000 fd8d 	bl	8002ad2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f000 f9dc 	bl	800237a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8001fc2:	20c8      	movs	r0, #200	; 0xc8
 8001fc4:	f000 fd85 	bl	8002ad2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2011      	movs	r0, #17
 8001fce:	f000 f9d4 	bl	800237a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8001fd2:	2078      	movs	r0, #120	; 0x78
 8001fd4:	f000 fd7d 	bl	8002ad2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8001fd8:	2300      	movs	r3, #0
 8001fda:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001fdc:	463b      	mov	r3, r7
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	2036      	movs	r0, #54	; 0x36
 8001fe4:	f000 f9c9 	bl	800237a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8001fe8:	2305      	movs	r3, #5
 8001fea:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001fec:	463b      	mov	r3, r7
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	203a      	movs	r0, #58	; 0x3a
 8001ff4:	f000 f9c1 	bl	800237a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	2021      	movs	r0, #33	; 0x21
 8001ffe:	f000 f9bc 	bl	800237a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8002002:	2300      	movs	r3, #0
 8002004:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002006:	2300      	movs	r3, #0
 8002008:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800200a:	2300      	movs	r3, #0
 800200c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800200e:	23ef      	movs	r3, #239	; 0xef
 8002010:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002012:	463b      	mov	r3, r7
 8002014:	2204      	movs	r2, #4
 8002016:	4619      	mov	r1, r3
 8002018:	202a      	movs	r0, #42	; 0x2a
 800201a:	f000 f9ae 	bl	800237a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 800201e:	2300      	movs	r3, #0
 8002020:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002026:	2300      	movs	r3, #0
 8002028:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800202a:	23ef      	movs	r3, #239	; 0xef
 800202c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800202e:	463b      	mov	r3, r7
 8002030:	2204      	movs	r2, #4
 8002032:	4619      	mov	r1, r3
 8002034:	202b      	movs	r0, #43	; 0x2b
 8002036:	f000 f9a0 	bl	800237a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800203a:	230c      	movs	r3, #12
 800203c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800203e:	230c      	movs	r3, #12
 8002040:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8002046:	2333      	movs	r3, #51	; 0x33
 8002048:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800204a:	2333      	movs	r3, #51	; 0x33
 800204c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800204e:	463b      	mov	r3, r7
 8002050:	2205      	movs	r2, #5
 8002052:	4619      	mov	r1, r3
 8002054:	20b2      	movs	r0, #178	; 0xb2
 8002056:	f000 f990 	bl	800237a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800205a:	2335      	movs	r3, #53	; 0x35
 800205c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800205e:	463b      	mov	r3, r7
 8002060:	2201      	movs	r2, #1
 8002062:	4619      	mov	r1, r3
 8002064:	20b7      	movs	r0, #183	; 0xb7
 8002066:	f000 f988 	bl	800237a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800206a:	231f      	movs	r3, #31
 800206c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800206e:	463b      	mov	r3, r7
 8002070:	2201      	movs	r2, #1
 8002072:	4619      	mov	r1, r3
 8002074:	20bb      	movs	r0, #187	; 0xbb
 8002076:	f000 f980 	bl	800237a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800207a:	232c      	movs	r3, #44	; 0x2c
 800207c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800207e:	463b      	mov	r3, r7
 8002080:	2201      	movs	r2, #1
 8002082:	4619      	mov	r1, r3
 8002084:	20c0      	movs	r0, #192	; 0xc0
 8002086:	f000 f978 	bl	800237a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800208a:	2301      	movs	r3, #1
 800208c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 800208e:	23c3      	movs	r3, #195	; 0xc3
 8002090:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002092:	463b      	mov	r3, r7
 8002094:	2202      	movs	r2, #2
 8002096:	4619      	mov	r1, r3
 8002098:	20c2      	movs	r0, #194	; 0xc2
 800209a:	f000 f96e 	bl	800237a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800209e:	2320      	movs	r3, #32
 80020a0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80020a2:	463b      	mov	r3, r7
 80020a4:	2201      	movs	r2, #1
 80020a6:	4619      	mov	r1, r3
 80020a8:	20c4      	movs	r0, #196	; 0xc4
 80020aa:	f000 f966 	bl	800237a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80020ae:	230f      	movs	r3, #15
 80020b0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80020b2:	463b      	mov	r3, r7
 80020b4:	2201      	movs	r2, #1
 80020b6:	4619      	mov	r1, r3
 80020b8:	20c6      	movs	r0, #198	; 0xc6
 80020ba:	f000 f95e 	bl	800237a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80020be:	23a4      	movs	r3, #164	; 0xa4
 80020c0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80020c2:	23a1      	movs	r3, #161	; 0xa1
 80020c4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 80020c6:	463b      	mov	r3, r7
 80020c8:	2201      	movs	r2, #1
 80020ca:	4619      	mov	r1, r3
 80020cc:	20d0      	movs	r0, #208	; 0xd0
 80020ce:	f000 f954 	bl	800237a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80020d2:	23d0      	movs	r3, #208	; 0xd0
 80020d4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80020d6:	2308      	movs	r3, #8
 80020d8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80020da:	2311      	movs	r3, #17
 80020dc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80020de:	2308      	movs	r3, #8
 80020e0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80020e2:	230c      	movs	r3, #12
 80020e4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80020e6:	2315      	movs	r3, #21
 80020e8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80020ea:	2339      	movs	r3, #57	; 0x39
 80020ec:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80020ee:	2333      	movs	r3, #51	; 0x33
 80020f0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80020f2:	2350      	movs	r3, #80	; 0x50
 80020f4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80020f6:	2336      	movs	r3, #54	; 0x36
 80020f8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80020fa:	2313      	movs	r3, #19
 80020fc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80020fe:	2314      	movs	r3, #20
 8002100:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002102:	2329      	movs	r3, #41	; 0x29
 8002104:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8002106:	232d      	movs	r3, #45	; 0x2d
 8002108:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800210a:	463b      	mov	r3, r7
 800210c:	220e      	movs	r2, #14
 800210e:	4619      	mov	r1, r3
 8002110:	20e0      	movs	r0, #224	; 0xe0
 8002112:	f000 f932 	bl	800237a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8002116:	23d0      	movs	r3, #208	; 0xd0
 8002118:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800211a:	2308      	movs	r3, #8
 800211c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 800211e:	2310      	movs	r3, #16
 8002120:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002122:	2308      	movs	r3, #8
 8002124:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8002126:	2306      	movs	r3, #6
 8002128:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800212a:	2306      	movs	r3, #6
 800212c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800212e:	2339      	movs	r3, #57	; 0x39
 8002130:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002132:	2344      	movs	r3, #68	; 0x44
 8002134:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8002136:	2351      	movs	r3, #81	; 0x51
 8002138:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800213a:	230b      	movs	r3, #11
 800213c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800213e:	2316      	movs	r3, #22
 8002140:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002142:	2314      	movs	r3, #20
 8002144:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002146:	232f      	movs	r3, #47	; 0x2f
 8002148:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800214a:	2331      	movs	r3, #49	; 0x31
 800214c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800214e:	463b      	mov	r3, r7
 8002150:	220e      	movs	r2, #14
 8002152:	4619      	mov	r1, r3
 8002154:	20e1      	movs	r0, #225	; 0xe1
 8002156:	f000 f910 	bl	800237a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800215a:	f000 f847 	bl	80021ec <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800215e:	2300      	movs	r3, #0
 8002160:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002162:	463b      	mov	r3, r7
 8002164:	2201      	movs	r2, #1
 8002166:	4619      	mov	r1, r3
 8002168:	2035      	movs	r0, #53	; 0x35
 800216a:	f000 f906 	bl	800237a <ST7789H2_WriteReg>

}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d102      	bne.n	800218a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002184:	2300      	movs	r3, #0
 8002186:	723b      	strb	r3, [r7, #8]
 8002188:	e025      	b.n	80021d6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d120      	bne.n	80021d2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002190:	2300      	movs	r3, #0
 8002192:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002194:	2300      	movs	r3, #0
 8002196:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002198:	2301      	movs	r3, #1
 800219a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 800219c:	23f0      	movs	r3, #240	; 0xf0
 800219e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80021a0:	2300      	movs	r3, #0
 80021a2:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80021a4:	2300      	movs	r3, #0
 80021a6:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	2206      	movs	r2, #6
 80021ae:	4619      	mov	r1, r3
 80021b0:	2033      	movs	r0, #51	; 0x33
 80021b2:	f000 f8e2 	bl	800237a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80021b6:	2300      	movs	r3, #0
 80021b8:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80021ba:	2350      	movs	r3, #80	; 0x50
 80021bc:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80021be:	f107 0308 	add.w	r3, r7, #8
 80021c2:	2202      	movs	r2, #2
 80021c4:	4619      	mov	r1, r3
 80021c6:	2037      	movs	r0, #55	; 0x37
 80021c8:	f000 f8d7 	bl	800237a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80021cc:	23c0      	movs	r3, #192	; 0xc0
 80021ce:	723b      	strb	r3, [r7, #8]
 80021d0:	e001      	b.n	80021d6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80021d2:	2360      	movs	r3, #96	; 0x60
 80021d4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	2201      	movs	r2, #1
 80021dc:	4619      	mov	r1, r3
 80021de:	2036      	movs	r0, #54	; 0x36
 80021e0:	f000 f8cb 	bl	800237a <ST7789H2_WriteReg>
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	2029      	movs	r0, #41	; 0x29
 80021f6:	f000 f8c0 	bl	800237a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2011      	movs	r0, #17
 8002200:	f000 f8bb 	bl	800237a <ST7789H2_WriteReg>
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 800220e:	23fe      	movs	r3, #254	; 0xfe
 8002210:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	2201      	movs	r2, #1
 8002216:	4619      	mov	r1, r3
 8002218:	20bd      	movs	r0, #189	; 0xbd
 800221a:	f000 f8ae 	bl	800237a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	2010      	movs	r0, #16
 8002224:	f000 f8a9 	bl	800237a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002228:	200a      	movs	r0, #10
 800222a:	f000 fc52 	bl	8002ad2 <LCD_IO_Delay>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800223a:	23f0      	movs	r3, #240	; 0xf0
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800224a:	23f0      	movs	r3, #240	; 0xf0
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800225a:	f000 fc13 	bl	8002a84 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800225e:	2004      	movs	r0, #4
 8002260:	f000 f8ad 	bl	80023be <ST7789H2_ReadReg>
 8002264:	4603      	mov	r3, r0
 8002266:	b29b      	uxth	r3, r3
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}

0800226c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	460a      	mov	r2, r1
 8002276:	80fb      	strh	r3, [r7, #6]
 8002278:	4613      	mov	r3, r2
 800227a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 800227c:	2300      	movs	r3, #0
 800227e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002286:	2300      	movs	r3, #0
 8002288:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800228a:	88fb      	ldrh	r3, [r7, #6]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	3b11      	subs	r3, #17
 8002290:	b2db      	uxtb	r3, r3
 8002292:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	2204      	movs	r2, #4
 800229a:	4619      	mov	r1, r3
 800229c:	202a      	movs	r0, #42	; 0x2a
 800229e:	f000 f86c 	bl	800237a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80022a2:	2300      	movs	r3, #0
 80022a4:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80022a6:	88bb      	ldrh	r3, [r7, #4]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	3b11      	subs	r3, #17
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80022ba:	f107 030c 	add.w	r3, r7, #12
 80022be:	2204      	movs	r2, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	202b      	movs	r0, #43	; 0x2b
 80022c4:	f000 f859 	bl	800237a <ST7789H2_WriteReg>
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	80fb      	strh	r3, [r7, #6]
 80022da:	460b      	mov	r3, r1
 80022dc:	80bb      	strh	r3, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80022e2:	88ba      	ldrh	r2, [r7, #4]
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	4611      	mov	r1, r2
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ffbf 	bl	800226c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	202c      	movs	r0, #44	; 0x2c
 80022f4:	f000 f841 	bl	800237a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80022f8:	887b      	ldrh	r3, [r7, #2]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fbc8 	bl	8002a90 <LCD_IO_WriteData>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	460a      	mov	r2, r1
 8002312:	80fb      	strh	r3, [r7, #6]
 8002314:	4613      	mov	r3, r2
 8002316:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002318:	88ba      	ldrh	r2, [r7, #4]
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ffa4 	bl	800226c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002324:	88ba      	ldrh	r2, [r7, #4]
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4611      	mov	r1, r2
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f9bd 	bl	80026aa <ST7789H2_ReadPixel_rgb888>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	733a      	strb	r2, [r7, #12]
 8002336:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800233a:	737a      	strb	r2, [r7, #13]
 800233c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002340:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002342:	7b3b      	ldrb	r3, [r7, #12]
 8002344:	08db      	lsrs	r3, r3, #3
 8002346:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002348:	7b7b      	ldrb	r3, [r7, #13]
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800234e:	7bbb      	ldrb	r3, [r7, #14]
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	b29b      	uxth	r3, r3
 8002358:	02db      	lsls	r3, r3, #11
 800235a:	b29a      	uxth	r2, r3
 800235c:	7dbb      	ldrb	r3, [r7, #22]
 800235e:	b29b      	uxth	r3, r3
 8002360:	015b      	lsls	r3, r3, #5
 8002362:	b29b      	uxth	r3, r3
 8002364:	4413      	add	r3, r2
 8002366:	b29a      	uxth	r2, r3
 8002368:	7d7b      	ldrb	r3, [r7, #21]
 800236a:	b29b      	uxth	r3, r3
 800236c:	4413      	add	r3, r2
 800236e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002370:	8a7b      	ldrh	r3, [r7, #18]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	4603      	mov	r3, r0
 8002382:	6039      	str	r1, [r7, #0]
 8002384:	71fb      	strb	r3, [r7, #7]
 8002386:	4613      	mov	r3, r2
 8002388:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fb8c 	bl	8002aaa <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	73fb      	strb	r3, [r7, #15]
 8002396:	e00a      	b.n	80023ae <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002398:	7bfb      	ldrb	r3, [r7, #15]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	4413      	add	r3, r2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fb74 	bl	8002a90 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d3f0      	bcc.n	8002398 <ST7789H2_WriteReg+0x1e>
  }
}
 80023b6:	bf00      	nop
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	b082      	sub	sp, #8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 fb6d 	bl	8002aaa <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80023d0:	f000 fb78 	bl	8002ac4 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80023d4:	f000 fb76 	bl	8002ac4 <LCD_IO_ReadData>
 80023d8:	4603      	mov	r3, r0
 80023da:	b2db      	uxtb	r3, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80023e4:	b490      	push	{r4, r7}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4604      	mov	r4, r0
 80023ec:	4608      	mov	r0, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	80fb      	strh	r3, [r7, #6]
 80023f6:	4603      	mov	r3, r0
 80023f8:	80bb      	strh	r3, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]
 80023fe:	4613      	mov	r3, r2
 8002400:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8002402:	88fb      	ldrh	r3, [r7, #6]
 8002404:	2bef      	cmp	r3, #239	; 0xef
 8002406:	d803      	bhi.n	8002410 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <ST7789H2_SetDisplayWindow+0x94>)
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	8013      	strh	r3, [r2, #0]
 800240e:	e002      	b.n	8002416 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <ST7789H2_SetDisplayWindow+0x94>)
 8002412:	2200      	movs	r2, #0
 8002414:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8002416:	88bb      	ldrh	r3, [r7, #4]
 8002418:	2bef      	cmp	r3, #239	; 0xef
 800241a:	d803      	bhi.n	8002424 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 800241c:	4a17      	ldr	r2, [pc, #92]	; (800247c <ST7789H2_SetDisplayWindow+0x98>)
 800241e:	88bb      	ldrh	r3, [r7, #4]
 8002420:	8013      	strh	r3, [r2, #0]
 8002422:	e002      	b.n	800242a <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8002424:	4b15      	ldr	r3, [pc, #84]	; (800247c <ST7789H2_SetDisplayWindow+0x98>)
 8002426:	2200      	movs	r2, #0
 8002428:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	4413      	add	r3, r2
 8002430:	2bf0      	cmp	r3, #240	; 0xf0
 8002432:	dc08      	bgt.n	8002446 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002434:	887a      	ldrh	r2, [r7, #2]
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	4413      	add	r3, r2
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <ST7789H2_SetDisplayWindow+0x9c>)
 8002442:	801a      	strh	r2, [r3, #0]
 8002444:	e002      	b.n	800244c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <ST7789H2_SetDisplayWindow+0x9c>)
 8002448:	22ef      	movs	r2, #239	; 0xef
 800244a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800244c:	883a      	ldrh	r2, [r7, #0]
 800244e:	88bb      	ldrh	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	2bf0      	cmp	r3, #240	; 0xf0
 8002454:	dc08      	bgt.n	8002468 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002456:	883a      	ldrh	r2, [r7, #0]
 8002458:	88bb      	ldrh	r3, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	b29b      	uxth	r3, r3
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <ST7789H2_SetDisplayWindow+0xa0>)
 8002464:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002466:	e002      	b.n	800246e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <ST7789H2_SetDisplayWindow+0xa0>)
 800246a:	22ef      	movs	r2, #239	; 0xef
 800246c:	801a      	strh	r2, [r3, #0]
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bc90      	pop	{r4, r7}
 8002476:	4770      	bx	lr
 8002478:	20000118 	.word	0x20000118
 800247c:	2000011a 	.word	0x2000011a
 8002480:	2000003c 	.word	0x2000003c
 8002484:	2000003e 	.word	0x2000003e

08002488 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	4604      	mov	r4, r0
 8002490:	4608      	mov	r0, r1
 8002492:	4611      	mov	r1, r2
 8002494:	461a      	mov	r2, r3
 8002496:	4623      	mov	r3, r4
 8002498:	80fb      	strh	r3, [r7, #6]
 800249a:	4603      	mov	r3, r0
 800249c:	80bb      	strh	r3, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	807b      	strh	r3, [r7, #2]
 80024a2:	4613      	mov	r3, r2
 80024a4:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	88bb      	ldrh	r3, [r7, #4]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fedb 	bl	800226c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	202c      	movs	r0, #44	; 0x2c
 80024bc:	f7ff ff5d 	bl	800237a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80024c0:	2300      	movs	r3, #0
 80024c2:	81fb      	strh	r3, [r7, #14]
 80024c4:	e006      	b.n	80024d4 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fae1 	bl	8002a90 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	3301      	adds	r3, #1
 80024d2:	81fb      	strh	r3, [r7, #14]
 80024d4:	89fa      	ldrh	r2, [r7, #14]
 80024d6:	883b      	ldrh	r3, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3f4      	bcc.n	80024c6 <ST7789H2_DrawHLine+0x3e>
  }  
}
 80024dc:	bf00      	nop
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd90      	pop	{r4, r7, pc}

080024e4 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4604      	mov	r4, r0
 80024ec:	4608      	mov	r0, r1
 80024ee:	4611      	mov	r1, r2
 80024f0:	461a      	mov	r2, r3
 80024f2:	4623      	mov	r3, r4
 80024f4:	80fb      	strh	r3, [r7, #6]
 80024f6:	4603      	mov	r3, r0
 80024f8:	80bb      	strh	r3, [r7, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	807b      	strh	r3, [r7, #2]
 80024fe:	4613      	mov	r3, r2
 8002500:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fead 	bl	800226c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	202c      	movs	r0, #44	; 0x2c
 8002518:	f7ff ff2f 	bl	800237a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800251c:	2300      	movs	r3, #0
 800251e:	81fb      	strh	r3, [r7, #14]
 8002520:	e00b      	b.n	800253a <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002522:	887a      	ldrh	r2, [r7, #2]
 8002524:	89fb      	ldrh	r3, [r7, #14]
 8002526:	4413      	add	r3, r2
 8002528:	b299      	uxth	r1, r3
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	88bb      	ldrh	r3, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fece 	bl	80022d0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002534:	89fb      	ldrh	r3, [r7, #14]
 8002536:	3301      	adds	r3, #1
 8002538:	81fb      	strh	r3, [r7, #14]
 800253a:	89fa      	ldrh	r2, [r7, #14]
 800253c:	883b      	ldrh	r3, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d3ef      	bcc.n	8002522 <ST7789H2_DrawVLine+0x3e>
  }
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
	...

0800254c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	603a      	str	r2, [r7, #0]
 8002556:	80fb      	strh	r3, [r7, #6]
 8002558:	460b      	mov	r3, r1
 800255a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002568:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <ST7789H2_DrawBitmap+0xdc>)
 800256a:	881a      	ldrh	r2, [r3, #0]
 800256c:	4b2f      	ldr	r3, [pc, #188]	; (800262c <ST7789H2_DrawBitmap+0xe0>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	b29b      	uxth	r3, r3
 8002574:	3301      	adds	r3, #1
 8002576:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002578:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <ST7789H2_DrawBitmap+0xe4>)
 800257a:	881a      	ldrh	r2, [r3, #0]
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <ST7789H2_DrawBitmap+0xe8>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	3302      	adds	r3, #2
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	b29b      	uxth	r3, r3
 8002590:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	3304      	adds	r3, #4
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	461a      	mov	r2, r3
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	330a      	adds	r3, #10
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	330c      	adds	r3, #12
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	461a      	mov	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	4413      	add	r3, r2
 80025d0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80025d2:	88ba      	ldrh	r2, [r7, #4]
 80025d4:	89bb      	ldrh	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e01d      	b.n	8002618 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fe3f 	bl	800226c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b299      	uxth	r1, r3
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	4413      	add	r3, r2
 8002604:	89fa      	ldrh	r2, [r7, #14]
 8002606:	88f8      	ldrh	r0, [r7, #6]
 8002608:	f000 f898 	bl	800273c <ST7789H2_DrawRGBHLine>
    nb_line++;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	3301      	adds	r3, #1
 8002610:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b01      	subs	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	88bb      	ldrh	r3, [r7, #4]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	429a      	cmp	r2, r3
 800261e:	d8dd      	bhi.n	80025dc <ST7789H2_DrawBitmap+0x90>
  }
}
 8002620:	bf00      	nop
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	2000003c 	.word	0x2000003c
 800262c:	20000118 	.word	0x20000118
 8002630:	2000003e 	.word	0x2000003e
 8002634:	2000011a 	.word	0x2000011a

08002638 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002638:	b590      	push	{r4, r7, lr}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	4604      	mov	r4, r0
 8002640:	4608      	mov	r0, r1
 8002642:	4611      	mov	r1, r2
 8002644:	461a      	mov	r2, r3
 8002646:	4623      	mov	r3, r4
 8002648:	80fb      	strh	r3, [r7, #6]
 800264a:	4603      	mov	r3, r0
 800264c:	80bb      	strh	r3, [r7, #4]
 800264e:	460b      	mov	r3, r1
 8002650:	807b      	strh	r3, [r7, #2]
 8002652:	4613      	mov	r3, r2
 8002654:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800265a:	88bb      	ldrh	r3, [r7, #4]
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e019      	b.n	8002694 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	b29a      	uxth	r2, r3
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fdff 	bl	800226c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	b299      	uxth	r1, r3
 8002672:	887b      	ldrh	r3, [r7, #2]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	6a3a      	ldr	r2, [r7, #32]
 800267e:	4413      	add	r3, r2
 8002680:	887a      	ldrh	r2, [r7, #2]
 8002682:	88f8      	ldrh	r0, [r7, #6]
 8002684:	f000 f85a 	bl	800273c <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	3301      	adds	r3, #1
 800268c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3301      	adds	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	88ba      	ldrh	r2, [r7, #4]
 8002696:	883b      	ldrh	r3, [r7, #0]
 8002698:	4413      	add	r3, r2
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4293      	cmp	r3, r2
 80026a0:	d3de      	bcc.n	8002660 <ST7789H2_DrawRGBImage+0x28>
  }
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}

080026aa <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	460a      	mov	r2, r1
 80026b4:	80fb      	strh	r3, [r7, #6]
 80026b6:	4613      	mov	r3, r2
 80026b8:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80026ba:	88ba      	ldrh	r2, [r7, #4]
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fdd3 	bl	800226c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	202e      	movs	r0, #46	; 0x2e
 80026cc:	f7ff fe55 	bl	800237a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80026d0:	f000 f9f8 	bl	8002ac4 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80026d4:	f000 f9f6 	bl	8002ac4 <LCD_IO_ReadData>
 80026d8:	4603      	mov	r3, r0
 80026da:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80026dc:	f000 f9f2 	bl	8002ac4 <LCD_IO_ReadData>
 80026e0:	4603      	mov	r3, r0
 80026e2:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80026e4:	8afb      	ldrh	r3, [r7, #22]
 80026e6:	121b      	asrs	r3, r3, #8
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	f023 0303 	bic.w	r3, r3, #3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80026f2:	8afb      	ldrh	r3, [r7, #22]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f023 0303 	bic.w	r3, r3, #3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80026fe:	8abb      	ldrh	r3, [r7, #20]
 8002700:	121b      	asrs	r3, r3, #8
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f023 0303 	bic.w	r3, r3, #3
 8002708:	b2db      	uxtb	r3, r3
 800270a:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	f107 020c 	add.w	r2, r7, #12
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	4611      	mov	r1, r2
 8002718:	8019      	strh	r1, [r3, #0]
 800271a:	3302      	adds	r3, #2
 800271c:	0c12      	lsrs	r2, r2, #16
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	2300      	movs	r3, #0
 8002722:	7c3a      	ldrb	r2, [r7, #16]
 8002724:	f362 0307 	bfi	r3, r2, #0, #8
 8002728:	7c7a      	ldrb	r2, [r7, #17]
 800272a:	f362 230f 	bfi	r3, r2, #8, #8
 800272e:	7cba      	ldrb	r2, [r7, #18]
 8002730:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	4603      	mov	r3, r0
 8002746:	81fb      	strh	r3, [r7, #14]
 8002748:	460b      	mov	r3, r1
 800274a:	81bb      	strh	r3, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	202c      	movs	r0, #44	; 0x2c
 800275e:	f7ff fe0c 	bl	800237a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002762:	89fb      	ldrh	r3, [r7, #14]
 8002764:	61bb      	str	r3, [r7, #24]
 8002766:	e02a      	b.n	80027be <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002768:	4b1a      	ldr	r3, [pc, #104]	; (80027d4 <ST7789H2_DrawRGBHLine+0x98>)
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4293      	cmp	r3, r2
 8002772:	d321      	bcc.n	80027b8 <ST7789H2_DrawRGBHLine+0x7c>
 8002774:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <ST7789H2_DrawRGBHLine+0x9c>)
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	89ba      	ldrh	r2, [r7, #12]
 800277a:	429a      	cmp	r2, r3
 800277c:	d31c      	bcc.n	80027b8 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <ST7789H2_DrawRGBHLine+0xa0>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4293      	cmp	r3, r2
 8002788:	d816      	bhi.n	80027b8 <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <ST7789H2_DrawRGBHLine+0xa4>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	89ba      	ldrh	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d811      	bhi.n	80027b8 <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002794:	897a      	ldrh	r2, [r7, #10]
 8002796:	89fb      	ldrh	r3, [r7, #14]
 8002798:	4413      	add	r3, r2
 800279a:	461a      	mov	r2, r3
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4293      	cmp	r3, r2
 80027a0:	d007      	beq.n	80027b2 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4413      	add	r3, r2
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f96f 	bl	8002a90 <LCD_IO_WriteData>
      }      
      i++;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3301      	adds	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	3301      	adds	r3, #1
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	897a      	ldrh	r2, [r7, #10]
 80027c0:	89fb      	ldrh	r3, [r7, #14]
 80027c2:	4413      	add	r3, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d3cd      	bcc.n	8002768 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80027cc:	bf00      	nop
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000118 	.word	0x20000118
 80027d8:	2000011a 	.word	0x2000011a
 80027dc:	2000003c 	.word	0x2000003c
 80027e0:	2000003e 	.word	0x2000003e

080027e4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	4b22      	ldr	r3, [pc, #136]	; (8002884 <BSP_PB_Init+0xa0>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4a21      	ldr	r2, [pc, #132]	; (8002884 <BSP_PB_Init+0xa0>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6313      	str	r3, [r2, #48]	; 0x30
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <BSP_PB_Init+0xa0>)
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002810:	79bb      	ldrb	r3, [r7, #6]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d111      	bne.n	800283a <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002816:	2301      	movs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 800281e:	2302      	movs	r3, #2
 8002820:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002822:	2302      	movs	r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4a17      	ldr	r2, [pc, #92]	; (8002888 <BSP_PB_Init+0xa4>)
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	f107 020c 	add.w	r2, r7, #12
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f001 fc95 	bl	8004164 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800283a:	79bb      	ldrb	r3, [r7, #6]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d11d      	bne.n	800287c <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002840:	2301      	movs	r3, #1
 8002842:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002844:	2302      	movs	r3, #2
 8002846:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800284c:	4b0f      	ldr	r3, [pc, #60]	; (800288c <BSP_PB_Init+0xa8>)
 800284e:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <BSP_PB_Init+0xa4>)
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	f107 020c 	add.w	r2, r7, #12
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f001 fc80 	bl	8004164 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002864:	2306      	movs	r3, #6
 8002866:	b25b      	sxtb	r3, r3
 8002868:	2200      	movs	r2, #0
 800286a:	210f      	movs	r1, #15
 800286c:	4618      	mov	r0, r3
 800286e:	f001 f953 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002872:	2306      	movs	r3, #6
 8002874:	b25b      	sxtb	r3, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f001 f96a 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  }
}
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	20000040 	.word	0x20000040
 800288c:	10110000 	.word	0x10110000

08002890 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08a      	sub	sp, #40	; 0x28
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	613b      	str	r3, [r7, #16]
 800289a:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	4a39      	ldr	r2, [pc, #228]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6393      	str	r3, [r2, #56]	; 0x38
 80028a6:	4b37      	ldr	r3, [pc, #220]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	4b33      	ldr	r3, [pc, #204]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	4a32      	ldr	r2, [pc, #200]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028bc:	f043 0308 	orr.w	r3, r3, #8
 80028c0:	6313      	str	r3, [r2, #48]	; 0x30
 80028c2:	4b30      	ldr	r3, [pc, #192]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	4b2c      	ldr	r3, [pc, #176]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	4a2b      	ldr	r2, [pc, #172]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028d8:	f043 0310 	orr.w	r3, r3, #16
 80028dc:	6313      	str	r3, [r2, #48]	; 0x30
 80028de:	4b29      	ldr	r3, [pc, #164]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a24      	ldr	r2, [pc, #144]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028f4:	f043 0320 	orr.w	r3, r3, #32
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b22      	ldr	r3, [pc, #136]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4b1e      	ldr	r3, [pc, #120]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 8002910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002914:	6313      	str	r3, [r2, #48]	; 0x30
 8002916:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <FMC_BANK3_MspInit+0xf4>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002922:	2302      	movs	r3, #2
 8002924:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002926:	2301      	movs	r3, #1
 8002928:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 800292e:	230c      	movs	r3, #12
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002932:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002936:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	4619      	mov	r1, r3
 800293e:	4812      	ldr	r0, [pc, #72]	; (8002988 <FMC_BANK3_MspInit+0xf8>)
 8002940:	f001 fc10 	bl	8004164 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002944:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002948:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	480e      	ldr	r0, [pc, #56]	; (800298c <FMC_BANK3_MspInit+0xfc>)
 8002952:	f001 fc07 	bl	8004164 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002956:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800295a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	4619      	mov	r1, r3
 8002962:	480b      	ldr	r0, [pc, #44]	; (8002990 <FMC_BANK3_MspInit+0x100>)
 8002964:	f001 fbfe 	bl	8004164 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002968:	f240 433f 	movw	r3, #1087	; 0x43f
 800296c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	4619      	mov	r1, r3
 8002974:	4807      	ldr	r0, [pc, #28]	; (8002994 <FMC_BANK3_MspInit+0x104>)
 8002976:	f001 fbf5 	bl	8004164 <HAL_GPIO_Init>
}
 800297a:	bf00      	nop
 800297c:	3728      	adds	r7, #40	; 0x28
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	40021000 	.word	0x40021000
 8002990:	40021400 	.word	0x40021400
 8002994:	40021800 	.word	0x40021800

08002998 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002998:	b580      	push	{r7, lr}
 800299a:	b09c      	sub	sp, #112	; 0x70
 800299c:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 800299e:	f7ff ff77 	bl	8002890 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 80029a2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80029a6:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 80029a8:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <FMC_BANK3_Init+0x8c>)
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 80029ac:	2303      	movs	r3, #3
 80029ae:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 80029b0:	2301      	movs	r3, #1
 80029b2:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 80029b4:	2304      	movs	r3, #4
 80029b6:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 80029bc:	2302      	movs	r3, #2
 80029be:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 80029c8:	2304      	movs	r3, #4
 80029ca:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 80029d0:	2300      	movs	r3, #0
 80029d2:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80029d4:	2310      	movs	r3, #16
 80029d6:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80029dc:	2300      	movs	r3, #0
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 80029e4:	2300      	movs	r3, #0
 80029e6:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80029e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029ec:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 80029f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029f6:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002a00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a04:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002a0e:	1d3a      	adds	r2, r7, #4
 8002a10:	1d39      	adds	r1, r7, #4
 8002a12:	f107 0320 	add.w	r3, r7, #32
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 fe66 	bl	80086e8 <HAL_SRAM_Init>
}
 8002a1c:	bf00      	nop
 8002a1e:	3770      	adds	r7, #112	; 0x70
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	a0000104 	.word	0xa0000104

08002a28 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002a32:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a3a:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002a54:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002a58:	79fa      	ldrb	r2, [r7, #7]
 8002a5a:	b292      	uxth	r2, r2
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002a72:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002a76:	885b      	ldrh	r3, [r3, #2]
 8002a78:	b29b      	uxth	r3, r3
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002a88:	f7ff ff86 	bl	8002998 <FMC_BANK3_Init>
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ffc3 	bl	8002a28 <FMC_BANK3_WriteData>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ffc7 	bl	8002a4a <FMC_BANK3_WriteReg>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002ac8:	f7ff ffd1 	bl	8002a6e <FMC_BANK3_ReadData>
 8002acc:	4603      	mov	r3, r0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fb98 	bl	8003210 <HAL_Delay>
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002af0:	f000 f80e 	bl	8002b10 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002af4:	bf00      	nop
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002b04:	f000 f80b 	bl	8002b1e <BSP_AUDIO_OUT_Error_CallBack>
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002b34:	f000 f804 	bl	8002b40 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002b52:	2001      	movs	r0, #1
 8002b54:	f000 f804 	bl	8002b60 <BSP_LCD_InitEx>
 8002b58:	4603      	mov	r3, r0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002b6c:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <BSP_LCD_InitEx+0xc0>)
 8002b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b72:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002b74:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <BSP_LCD_InitEx+0xc0>)
 8002b76:	4a2b      	ldr	r2, [pc, #172]	; (8002c24 <BSP_LCD_InitEx+0xc4>)
 8002b78:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002b7a:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <BSP_LCD_InitEx+0xc0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002b80:	f000 fa10 	bl	8002fa4 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002b84:	2201      	movs	r2, #1
 8002b86:	2120      	movs	r1, #32
 8002b88:	4827      	ldr	r0, [pc, #156]	; (8002c28 <BSP_LCD_InitEx+0xc8>)
 8002b8a:	f001 fc7d 	bl	8004488 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b94:	4825      	ldr	r0, [pc, #148]	; (8002c2c <BSP_LCD_InitEx+0xcc>)
 8002b96:	f001 fc77 	bl	8004488 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002b9a:	2005      	movs	r0, #5
 8002b9c:	f000 fb38 	bl	8003210 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ba6:	4821      	ldr	r0, [pc, #132]	; (8002c2c <BSP_LCD_InitEx+0xcc>)
 8002ba8:	f001 fc6e 	bl	8004488 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002bac:	200a      	movs	r0, #10
 8002bae:	f000 fb2f 	bl	8003210 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bb8:	481c      	ldr	r0, [pc, #112]	; (8002c2c <BSP_LCD_InitEx+0xcc>)
 8002bba:	f001 fc65 	bl	8004488 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002bbe:	2014      	movs	r0, #20
 8002bc0:	f000 fb26 	bl	8003210 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bca:	4818      	ldr	r0, [pc, #96]	; (8002c2c <BSP_LCD_InitEx+0xcc>)
 8002bcc:	f001 fc5c 	bl	8004488 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002bd0:	200a      	movs	r0, #10
 8002bd2:	f000 fb1d 	bl	8003210 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002bd6:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <BSP_LCD_InitEx+0xd0>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4798      	blx	r3
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b85      	cmp	r3, #133	; 0x85
 8002be0:	d118      	bne.n	8002c14 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002be2:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <BSP_LCD_InitEx+0xd4>)
 8002be4:	4a12      	ldr	r2, [pc, #72]	; (8002c30 <BSP_LCD_InitEx+0xd0>)
 8002be6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <BSP_LCD_InitEx+0xd4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d103      	bne.n	8002bfe <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7ff fabd 	bl	8002176 <ST7789H2_SetOrientation>
 8002bfc:	e005      	b.n	8002c0a <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d102      	bne.n	8002c0a <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002c04:	2002      	movs	r0, #2
 8002c06:	f7ff fab6 	bl	8002176 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002c0a:	480b      	ldr	r0, [pc, #44]	; (8002c38 <BSP_LCD_InitEx+0xd8>)
 8002c0c:	f000 f84e 	bl	8002cac <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20004ed4 	.word	0x20004ed4
 8002c24:	20000044 	.word	0x20000044
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	20000004 	.word	0x20000004
 8002c34:	2000011c 	.word	0x2000011c
 8002c38:	20000054 	.word	0x20000054

08002c3c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <BSP_LCD_GetXSize+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	4798      	blx	r3
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000011c 	.word	0x2000011c

08002c54 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <BSP_LCD_GetYSize+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5e:	4798      	blx	r3
 8002c60:	4603      	mov	r3, r0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	2000011c 	.word	0x2000011c

08002c6c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <BSP_LCD_SetTextColor+0x1c>)
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	20004ed4 	.word	0x20004ed4

08002c8c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <BSP_LCD_SetBackColor+0x1c>)
 8002c9a:	6053      	str	r3, [r2, #4]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	20004ed4 	.word	0x20004ed4

08002cac <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <BSP_LCD_SetFont+0x1c>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6093      	str	r3, [r2, #8]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20004ed4 	.word	0x20004ed4

08002ccc <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <BSP_LCD_GetFont+0x14>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	20004ed4 	.word	0x20004ed4

08002ce4 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b087      	sub	sp, #28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002cf6:	4b15      	ldr	r3, [pc, #84]	; (8002d4c <BSP_LCD_Clear+0x68>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	4a13      	ldr	r2, [pc, #76]	; (8002d4c <BSP_LCD_Clear+0x68>)
 8002d00:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8002d02:	f7ff ffa7 	bl	8002c54 <BSP_LCD_GetYSize>
 8002d06:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e00d      	b.n	8002d2a <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	b29c      	uxth	r4, r3
 8002d12:	f7ff ff93 	bl	8002c3c <BSP_LCD_GetXSize>
 8002d16:	4603      	mov	r3, r0
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	2000      	movs	r0, #0
 8002d20:	f000 f906 	bl	8002f30 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3301      	adds	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3ed      	bcc.n	8002d0e <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8002d32:	4a06      	ldr	r2, [pc, #24]	; (8002d4c <BSP_LCD_Clear+0x68>)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002d38:	4b04      	ldr	r3, [pc, #16]	; (8002d4c <BSP_LCD_Clear+0x68>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff94 	bl	8002c6c <BSP_LCD_SetTextColor>
}
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd90      	pop	{r4, r7, pc}
 8002d4c:	20004ed4 	.word	0x20004ed4

08002d50 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	80fb      	strh	r3, [r7, #6]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	80bb      	strh	r3, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <BSP_LCD_DisplayChar+0x50>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002d6c:	490c      	ldr	r1, [pc, #48]	; (8002da0 <BSP_LCD_DisplayChar+0x50>)
 8002d6e:	6889      	ldr	r1, [r1, #8]
 8002d70:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002d72:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <BSP_LCD_DisplayChar+0x50>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	889b      	ldrh	r3, [r3, #4]
 8002d7c:	3307      	adds	r3, #7
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da00      	bge.n	8002d84 <BSP_LCD_DisplayChar+0x34>
 8002d82:	3307      	adds	r3, #7
 8002d84:	10db      	asrs	r3, r3, #3
 8002d86:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002d8a:	441a      	add	r2, r3
 8002d8c:	88b9      	ldrh	r1, [r7, #4]
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f963 	bl	800305c <DrawChar>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20004ed4 	.word	0x20004ed4

08002da4 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60ba      	str	r2, [r7, #8]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	81fb      	strh	r3, [r7, #14]
 8002db2:	460b      	mov	r3, r1
 8002db4:	81bb      	strh	r3, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	83fb      	strh	r3, [r7, #30]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002dce:	e002      	b.n	8002dd6 <BSP_LCD_DisplayStringAt+0x32>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	617a      	str	r2, [r7, #20]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f6      	bne.n	8002dd0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002de2:	f7ff ff2b 	bl	8002c3c <BSP_LCD_GetXSize>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <BSP_LCD_DisplayStringAt+0x120>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	889b      	ldrh	r3, [r3, #4]
 8002dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d014      	beq.n	8002e24 <BSP_LCD_DisplayStringAt+0x80>
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d00f      	beq.n	8002e1e <BSP_LCD_DisplayStringAt+0x7a>
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d11e      	bne.n	8002e40 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	4a2e      	ldr	r2, [pc, #184]	; (8002ec4 <BSP_LCD_DisplayStringAt+0x120>)
 8002e0a:	6892      	ldr	r2, [r2, #8]
 8002e0c:	8892      	ldrh	r2, [r2, #4]
 8002e0e:	fb02 f303 	mul.w	r3, r2, r3
 8002e12:	085b      	lsrs	r3, r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	89fb      	ldrh	r3, [r7, #14]
 8002e18:	4413      	add	r3, r2
 8002e1a:	83fb      	strh	r3, [r7, #30]
      break;
 8002e1c:	e013      	b.n	8002e46 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002e1e:	89fb      	ldrh	r3, [r7, #14]
 8002e20:	83fb      	strh	r3, [r7, #30]
      break;
 8002e22:	e010      	b.n	8002e46 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b25      	ldr	r3, [pc, #148]	; (8002ec4 <BSP_LCD_DisplayStringAt+0x120>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	889b      	ldrh	r3, [r3, #4]
 8002e32:	fb12 f303 	smulbb	r3, r2, r3
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	83fb      	strh	r3, [r7, #30]
      break;
 8002e3e:	e002      	b.n	8002e46 <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	83fb      	strh	r3, [r7, #30]
      break;
 8002e44:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002e46:	8bfb      	ldrh	r3, [r7, #30]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <BSP_LCD_DisplayStringAt+0xb0>
 8002e4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	da15      	bge.n	8002e80 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 8002e54:	2301      	movs	r3, #1
 8002e56:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002e58:	e012      	b.n	8002e80 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	89b9      	ldrh	r1, [r7, #12]
 8002e60:	8bfb      	ldrh	r3, [r7, #30]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff74 	bl	8002d50 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <BSP_LCD_DisplayStringAt+0x120>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	889a      	ldrh	r2, [r3, #4]
 8002e6e:	8bfb      	ldrh	r3, [r7, #30]
 8002e70:	4413      	add	r3, r2
 8002e72:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3301      	adds	r3, #1
 8002e78:	60bb      	str	r3, [r7, #8]
    i++;
 8002e7a:	8bbb      	ldrh	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2dc      	uxtb	r4, r3
 8002e8e:	f7ff fed5 	bl	8002c3c <BSP_LCD_GetXSize>
 8002e92:	4601      	mov	r1, r0
 8002e94:	8bbb      	ldrh	r3, [r7, #28]
 8002e96:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <BSP_LCD_DisplayStringAt+0x120>)
 8002e98:	6892      	ldr	r2, [r2, #8]
 8002e9a:	8892      	ldrh	r2, [r2, #4]
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	1acb      	subs	r3, r1, r3
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4a07      	ldr	r2, [pc, #28]	; (8002ec4 <BSP_LCD_DisplayStringAt+0x120>)
 8002ea6:	6892      	ldr	r2, [r2, #8]
 8002ea8:	8892      	ldrh	r2, [r2, #4]
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	bf2c      	ite	cs
 8002eae:	2301      	movcs	r3, #1
 8002eb0:	2300      	movcc	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4023      	ands	r3, r4
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ce      	bne.n	8002e5a <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3724      	adds	r7, #36	; 0x24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd90      	pop	{r4, r7, pc}
 8002ec4:	20004ed4 	.word	0x20004ed4

08002ec8 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	6039      	str	r1, [r7, #0]
 8002ed2:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002ed4:	f7ff fefa 	bl	8002ccc <BSP_LCD_GetFont>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	88db      	ldrh	r3, [r3, #6]
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	fb12 f303 	smulbb	r3, r2, r3
 8002ee2:	b299      	uxth	r1, r3
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7ff ff5b 	bl	8002da4 <BSP_LCD_DisplayStringAt>
}
 8002eee:	bf00      	nop
 8002ef0:	3708      	adds	r7, #8
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	80fb      	strh	r3, [r7, #6]
 8002f02:	460b      	mov	r3, r1
 8002f04:	80bb      	strh	r3, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002f0a:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <BSP_LCD_DrawPixel+0x34>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <BSP_LCD_DrawPixel+0x34>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	887a      	ldrh	r2, [r7, #2]
 8002f1c:	88b9      	ldrh	r1, [r7, #4]
 8002f1e:	88f8      	ldrh	r0, [r7, #6]
 8002f20:	4798      	blx	r3
  }
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000011c 	.word	0x2000011c

08002f30 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	80bb      	strh	r3, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <BSP_LCD_DrawHLine+0x6c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <BSP_LCD_DrawHLine+0x6c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6a1c      	ldr	r4, [r3, #32]
 8002f56:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <BSP_LCD_DrawHLine+0x70>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	b298      	uxth	r0, r3
 8002f5c:	887b      	ldrh	r3, [r7, #2]
 8002f5e:	88ba      	ldrh	r2, [r7, #4]
 8002f60:	88f9      	ldrh	r1, [r7, #6]
 8002f62:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002f64:	e015      	b.n	8002f92 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	e00e      	b.n	8002f8a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	4413      	add	r3, r2
 8002f74:	b298      	uxth	r0, r3
 8002f76:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <BSP_LCD_DrawHLine+0x70>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	88bb      	ldrh	r3, [r7, #4]
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7ff ffba 	bl	8002ef8 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d3ec      	bcc.n	8002f6c <BSP_LCD_DrawHLine+0x3c>
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd90      	pop	{r4, r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2000011c 	.word	0x2000011c
 8002fa0:	20004ed4 	.word	0x20004ed4

08002fa4 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b28      	ldr	r3, [pc, #160]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a27      	ldr	r2, [pc, #156]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b21      	ldr	r3, [pc, #132]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	4a20      	ldr	r2, [pc, #128]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002fd0:	f043 0302 	orr.w	r3, r3, #2
 8002fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a19      	ldr	r2, [pc, #100]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002fec:	f043 0310 	orr.w	r3, r3, #16
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <BSP_LCD_MspInit+0xac>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003002:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003008:	2302      	movs	r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800300c:	2301      	movs	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8003010:	f107 030c 	add.w	r3, r7, #12
 8003014:	4619      	mov	r1, r3
 8003016:	480f      	ldr	r0, [pc, #60]	; (8003054 <BSP_LCD_MspInit+0xb0>)
 8003018:	f001 f8a4 	bl	8004164 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 800301c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003020:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	4619      	mov	r1, r3
 800302c:	4809      	ldr	r0, [pc, #36]	; (8003054 <BSP_LCD_MspInit+0xb0>)
 800302e:	f001 f899 	bl	8004164 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8003032:	2320      	movs	r3, #32
 8003034:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003036:	2301      	movs	r3, #1
 8003038:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800303a:	f107 030c 	add.w	r3, r7, #12
 800303e:	4619      	mov	r1, r3
 8003040:	4805      	ldr	r0, [pc, #20]	; (8003058 <BSP_LCD_MspInit+0xb4>)
 8003042:	f001 f88f 	bl	8004164 <HAL_GPIO_Init>
}
 8003046:	bf00      	nop
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40020400 	.word	0x40020400
 8003058:	40021000 	.word	0x40021000

0800305c <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b088      	sub	sp, #32
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	603a      	str	r2, [r7, #0]
 8003066:	80fb      	strh	r3, [r7, #6]
 8003068:	460b      	mov	r3, r1
 800306a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	2300      	movs	r3, #0
 8003072:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <DrawChar+0x12c>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	88db      	ldrh	r3, [r3, #6]
 800307a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800307c:	4b42      	ldr	r3, [pc, #264]	; (8003188 <DrawChar+0x12c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	889b      	ldrh	r3, [r3, #4]
 8003082:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003084:	8a3b      	ldrh	r3, [r7, #16]
 8003086:	3307      	adds	r3, #7
 8003088:	2b00      	cmp	r3, #0
 800308a:	da00      	bge.n	800308e <DrawChar+0x32>
 800308c:	3307      	adds	r3, #7
 800308e:	10db      	asrs	r3, r3, #3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	b2da      	uxtb	r2, r3
 8003096:	8a3b      	ldrh	r3, [r7, #16]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e069      	b.n	8003178 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80030a4:	8a3b      	ldrh	r3, [r7, #16]
 80030a6:	3307      	adds	r3, #7
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da00      	bge.n	80030ae <DrawChar+0x52>
 80030ac:	3307      	adds	r3, #7
 80030ae:	10db      	asrs	r3, r3, #3
 80030b0:	461a      	mov	r2, r3
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fb03 f302 	mul.w	r3, r3, r2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	4413      	add	r3, r2
 80030bc:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80030be:	8a3b      	ldrh	r3, [r7, #16]
 80030c0:	3307      	adds	r3, #7
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	da00      	bge.n	80030c8 <DrawChar+0x6c>
 80030c6:	3307      	adds	r3, #7
 80030c8:	10db      	asrs	r3, r3, #3
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d002      	beq.n	80030d4 <DrawChar+0x78>
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d004      	beq.n	80030dc <DrawChar+0x80>
 80030d2:	e00c      	b.n	80030ee <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	617b      	str	r3, [r7, #20]
      break;    
 80030da:	e016      	b.n	800310a <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	3201      	adds	r2, #1
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
      break;
 80030ec:	e00d      	b.n	800310a <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	041a      	lsls	r2, r3, #16
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	3301      	adds	r3, #1
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	021b      	lsls	r3, r3, #8
 80030fc:	4313      	orrs	r3, r2
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	3202      	adds	r2, #2
 8003102:	7812      	ldrb	r2, [r2, #0]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
      break;
 8003108:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	e029      	b.n	8003164 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003110:	8a3a      	ldrh	r2, [r7, #16]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	1ad2      	subs	r2, r2, r3
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	4413      	add	r3, r2
 800311a:	3b01      	subs	r3, #1
 800311c:	2201      	movs	r2, #1
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	461a      	mov	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4013      	ands	r3, r2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	b29a      	uxth	r2, r3
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	4413      	add	r3, r2
 8003134:	b298      	uxth	r0, r3
 8003136:	4b14      	ldr	r3, [pc, #80]	; (8003188 <DrawChar+0x12c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	b29a      	uxth	r2, r3
 800313c:	88bb      	ldrh	r3, [r7, #4]
 800313e:	4619      	mov	r1, r3
 8003140:	f7ff feda 	bl	8002ef8 <BSP_LCD_DrawPixel>
 8003144:	e00b      	b.n	800315e <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	b29a      	uxth	r2, r3
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	4413      	add	r3, r2
 800314e:	b298      	uxth	r0, r3
 8003150:	4b0d      	ldr	r3, [pc, #52]	; (8003188 <DrawChar+0x12c>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	b29a      	uxth	r2, r3
 8003156:	88bb      	ldrh	r3, [r7, #4]
 8003158:	4619      	mov	r1, r3
 800315a:	f7ff fecd 	bl	8002ef8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3301      	adds	r3, #1
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	8a3b      	ldrh	r3, [r7, #16]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	429a      	cmp	r2, r3
 800316a:	d3d1      	bcc.n	8003110 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 800316c:	88bb      	ldrh	r3, [r7, #4]
 800316e:	3301      	adds	r3, #1
 8003170:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3301      	adds	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	8a7b      	ldrh	r3, [r7, #18]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	429a      	cmp	r2, r3
 800317e:	d391      	bcc.n	80030a4 <DrawChar+0x48>
  }
}
 8003180:	bf00      	nop
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20004ed4 	.word	0x20004ed4

0800318c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003190:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <HAL_Init+0x40>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <HAL_Init+0x40>)
 8003196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_Init+0x40>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <HAL_Init+0x40>)
 80031a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a07      	ldr	r2, [pc, #28]	; (80031cc <HAL_Init+0x40>)
 80031ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b4:	2003      	movs	r0, #3
 80031b6:	f000 fca4 	bl	8003b02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fe fdf0 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c0:	f7fe f81c 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40023c00 	.word	0x40023c00

080031d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <HAL_IncTick+0x20>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b06      	ldr	r3, [pc, #24]	; (80031f4 <HAL_IncTick+0x24>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a04      	ldr	r2, [pc, #16]	; (80031f4 <HAL_IncTick+0x24>)
 80031e2:	6013      	str	r3, [r2, #0]
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000060 	.word	0x20000060
 80031f4:	20004ee0 	.word	0x20004ee0

080031f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return uwTick;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <HAL_GetTick+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20004ee0 	.word	0x20004ee0

08003210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff ffee 	bl	80031f8 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d005      	beq.n	8003236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_Delay+0x40>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4413      	add	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003236:	bf00      	nop
 8003238:	f7ff ffde 	bl	80031f8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	429a      	cmp	r2, r3
 8003246:	d8f7      	bhi.n	8003238 <HAL_Delay+0x28>
  {
  }
}
 8003248:	bf00      	nop
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000060 	.word	0x20000060

08003254 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e033      	b.n	80032d2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fd ffea 	bl	800124c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b00      	cmp	r3, #0
 8003290:	d118      	bne.n	80032c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800329a:	f023 0302 	bic.w	r3, r3, #2
 800329e:	f043 0202 	orr.w	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 fa82 	bl	80037b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f023 0303 	bic.w	r3, r3, #3
 80032ba:	f043 0201 	orr.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	641a      	str	r2, [r3, #64]	; 0x40
 80032c2:	e001      	b.n	80032c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_Start+0x1a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e08a      	b.n	800340c <HAL_ADC_Start+0x130>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d018      	beq.n	800333e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800331c:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <HAL_ADC_Start+0x13c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a3e      	ldr	r2, [pc, #248]	; (800341c <HAL_ADC_Start+0x140>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	0c9a      	lsrs	r2, r3, #18
 8003328:	4613      	mov	r3, r2
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	4413      	add	r3, r2
 800332e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003330:	e002      	b.n	8003338 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3b01      	subs	r3, #1
 8003336:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f9      	bne.n	8003332 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d15e      	bne.n	800340a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003376:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338a:	d106      	bne.n	800339a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f023 0206 	bic.w	r2, r3, #6
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	645a      	str	r2, [r3, #68]	; 0x44
 8003398:	e002      	b.n	80033a0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a8:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <HAL_ADC_Start+0x144>)
 80033aa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d11c      	bne.n	800340a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	e013      	b.n	800340a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a0f      	ldr	r2, [pc, #60]	; (8003424 <HAL_ADC_Start+0x148>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10e      	bne.n	800340a <HAL_ADC_Start+0x12e>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003408:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	20000000 	.word	0x20000000
 800341c:	431bde83 	.word	0x431bde83
 8003420:	40012300 	.word	0x40012300
 8003424:	40012000 	.word	0x40012000

08003428 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d113      	bne.n	800346e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003454:	d10b      	bne.n	800346e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f043 0220 	orr.w	r2, r3, #32
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e05c      	b.n	8003528 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800346e:	f7ff fec3 	bl	80031f8 <HAL_GetTick>
 8003472:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003474:	e01a      	b.n	80034ac <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d016      	beq.n	80034ac <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <HAL_ADC_PollForConversion+0x6c>
 8003484:	f7ff feb8 	bl	80031f8 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	429a      	cmp	r2, r3
 8003492:	d20b      	bcs.n	80034ac <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e03d      	b.n	8003528 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d1dd      	bne.n	8003476 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0212 	mvn.w	r2, #18
 80034c2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d123      	bne.n	8003526 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d11f      	bne.n	8003526 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d111      	bne.n	8003526 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800353e:	4618      	mov	r0, r3
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x1c>
 8003564:	2302      	movs	r3, #2
 8003566:	e113      	b.n	8003790 <HAL_ADC_ConfigChannel+0x244>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b09      	cmp	r3, #9
 8003576:	d925      	bls.n	80035c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68d9      	ldr	r1, [r3, #12]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	3b1e      	subs	r3, #30
 800358e:	2207      	movs	r2, #7
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43da      	mvns	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	400a      	ands	r2, r1
 800359c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68d9      	ldr	r1, [r3, #12]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	4603      	mov	r3, r0
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4403      	add	r3, r0
 80035b6:	3b1e      	subs	r3, #30
 80035b8:	409a      	lsls	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	e022      	b.n	800360a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6919      	ldr	r1, [r3, #16]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	2207      	movs	r2, #7
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	400a      	ands	r2, r1
 80035e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6919      	ldr	r1, [r3, #16]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4403      	add	r3, r0
 8003600:	409a      	lsls	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d824      	bhi.n	800365c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	3b05      	subs	r3, #5
 8003624:	221f      	movs	r2, #31
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	400a      	ands	r2, r1
 8003632:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	4618      	mov	r0, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3b05      	subs	r3, #5
 800364e:	fa00 f203 	lsl.w	r2, r0, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	635a      	str	r2, [r3, #52]	; 0x34
 800365a:	e04c      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d824      	bhi.n	80036ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	3b23      	subs	r3, #35	; 0x23
 8003676:	221f      	movs	r2, #31
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43da      	mvns	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	400a      	ands	r2, r1
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4618      	mov	r0, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	3b23      	subs	r3, #35	; 0x23
 80036a0:	fa00 f203 	lsl.w	r2, r0, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
 80036ac:	e023      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	3b41      	subs	r3, #65	; 0x41
 80036c0:	221f      	movs	r2, #31
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	400a      	ands	r2, r1
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	3b41      	subs	r3, #65	; 0x41
 80036ea:	fa00 f203 	lsl.w	r2, r0, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_ADC_ConfigChannel+0x250>)
 80036f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_ADC_ConfigChannel+0x254>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d10f      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1d8>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b12      	cmp	r3, #18
 800370a:	d10b      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_ADC_ConfigChannel+0x254>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d12b      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x23a>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_ADC_ConfigChannel+0x258>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <HAL_ADC_ConfigChannel+0x1f4>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b11      	cmp	r3, #17
 800373e:	d122      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_ADC_ConfigChannel+0x258>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_ADC_ConfigChannel+0x25c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_ADC_ConfigChannel+0x260>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	0c9a      	lsrs	r2, r3, #18
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003778:	e002      	b.n	8003780 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3b01      	subs	r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f9      	bne.n	800377a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40012300 	.word	0x40012300
 80037a0:	40012000 	.word	0x40012000
 80037a4:	10000012 	.word	0x10000012
 80037a8:	20000000 	.word	0x20000000
 80037ac:	431bde83 	.word	0x431bde83

080037b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037b8:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <ADC_Init+0x1f0>)
 80037ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	021a      	lsls	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6899      	ldr	r1, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <ADC_Init+0x1f4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d022      	beq.n	800388e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003856:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6899      	ldr	r1, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	e00f      	b.n	80038ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800389c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0202 	bic.w	r2, r2, #2
 80038bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6899      	ldr	r1, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	7e1b      	ldrb	r3, [r3, #24]
 80038c8:	005a      	lsls	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	3b01      	subs	r3, #1
 8003908:	035a      	lsls	r2, r3, #13
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	e007      	b.n	8003924 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003922:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	3b01      	subs	r3, #1
 8003940:	051a      	lsls	r2, r3, #20
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6899      	ldr	r1, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003966:	025a      	lsls	r2, r3, #9
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	029a      	lsls	r2, r3, #10
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40012300 	.word	0x40012300
 80039a4:	0f000001 	.word	0x0f000001

080039a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c4:	4013      	ands	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <__NVIC_GetPriorityGrouping+0x18>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 0307 	and.w	r3, r3, #7
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	db0b      	blt.n	8003a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	f003 021f 	and.w	r2, r3, #31
 8003a24:	4907      	ldr	r1, [pc, #28]	; (8003a44 <__NVIC_EnableIRQ+0x38>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000e100 	.word	0xe000e100

08003a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db0a      	blt.n	8003a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	490c      	ldr	r1, [pc, #48]	; (8003a94 <__NVIC_SetPriority+0x4c>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a70:	e00a      	b.n	8003a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4908      	ldr	r1, [pc, #32]	; (8003a98 <__NVIC_SetPriority+0x50>)
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	440b      	add	r3, r1
 8003a86:	761a      	strb	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000e100 	.word	0xe000e100
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f1c3 0307 	rsb	r3, r3, #7
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf28      	it	cs
 8003aba:	2304      	movcs	r3, #4
 8003abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d902      	bls.n	8003acc <NVIC_EncodePriority+0x30>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3b03      	subs	r3, #3
 8003aca:	e000      	b.n	8003ace <NVIC_EncodePriority+0x32>
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	401a      	ands	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43d9      	mvns	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	4313      	orrs	r3, r2
         );
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ff4c 	bl	80039a8 <__NVIC_SetPriorityGrouping>
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b2a:	f7ff ff61 	bl	80039f0 <__NVIC_GetPriorityGrouping>
 8003b2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	6978      	ldr	r0, [r7, #20]
 8003b36:	f7ff ffb1 	bl	8003a9c <NVIC_EncodePriority>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7ff ff80 	bl	8003a48 <__NVIC_SetPriority>
}
 8003b48:	bf00      	nop
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff ff54 	bl	8003a0c <__NVIC_EnableIRQ>
}
 8003b64:	bf00      	nop
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e014      	b.n	8003ba8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	791b      	ldrb	r3, [r3, #4]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7fd fbd8 	bl	8001344 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bc6:	d118      	bne.n	8003bfa <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2204      	movs	r2, #4
 8003bcc:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	f043 0201 	orr.w	r2, r3, #1
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003be2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bf2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f825 	bl	8003c44 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c08:	d118      	bne.n	8003c3c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f043 0202 	orr.w	r2, r3, #2
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003c24:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003c34:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f85b 	bl	8003cf2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	795b      	ldrb	r3, [r3, #5]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_DAC_ConfigChannel+0x20>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e036      	b.n	8003ce6 <HAL_DAC_ConfigChannel+0x8e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2202      	movs	r2, #2
 8003c82:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003c8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6819      	ldr	r1, [r3, #0]
 8003cc6:	22c0      	movs	r2, #192	; 0xc0
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0cf      	b.n	8003eba <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a69      	ldr	r2, [pc, #420]	; (8003ec4 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_DFSDM_ChannelInit+0x3a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a67      	ldr	r2, [pc, #412]	; (8003ec8 <HAL_DFSDM_ChannelInit+0x1c0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_DFSDM_ChannelInit+0x3a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a66      	ldr	r2, [pc, #408]	; (8003ecc <HAL_DFSDM_ChannelInit+0x1c4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_DFSDM_ChannelInit+0x3a>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a64      	ldr	r2, [pc, #400]	; (8003ed0 <HAL_DFSDM_ChannelInit+0x1c8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d106      	bne.n	8003d50 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003d42:	4b64      	ldr	r3, [pc, #400]	; (8003ed4 <HAL_DFSDM_ChannelInit+0x1cc>)
 8003d44:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8003d46:	4b64      	ldr	r3, [pc, #400]	; (8003ed8 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003d48:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003d4a:	4b5e      	ldr	r3, [pc, #376]	; (8003ec4 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e005      	b.n	8003d5c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003d50:	4b62      	ldr	r3, [pc, #392]	; (8003edc <HAL_DFSDM_ChannelInit+0x1d4>)
 8003d52:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8003d54:	4b62      	ldr	r3, [pc, #392]	; (8003ee0 <HAL_DFSDM_ChannelInit+0x1d8>)
 8003d56:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003d58:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_DFSDM_ChannelInit+0x1dc>)
 8003d5a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f8c1 	bl	8003ee8 <DFSDM_GetChannelFromInstance>
 8003d66:	4603      	mov	r3, r0
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e0a0      	b.n	8003eba <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7fd fb2f 	bl	80013dc <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d125      	bne.n	8003ddc <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	791b      	ldrb	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d108      	bne.n	8003dd0 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	041b      	lsls	r3, r3, #16
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003dea:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003dfa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003e00:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 020f 	bic.w	r2, r2, #15
 8003e18:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003e40:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6899      	ldr	r1, [r3, #8]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e50:	3b01      	subs	r3, #1
 8003e52:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f002 0207 	and.w	r2, r2, #7
 8003e6c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e98:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f81e 	bl	8003ee8 <DFSDM_GetChannelFromInstance>
 8003eac:	4603      	mov	r3, r0
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40016000 	.word	0x40016000
 8003ec8:	40016020 	.word	0x40016020
 8003ecc:	40016040 	.word	0x40016040
 8003ed0:	40016060 	.word	0x40016060
 8003ed4:	20000120 	.word	0x20000120
 8003ed8:	20000124 	.word	0x20000124
 8003edc:	20000134 	.word	0x20000134
 8003ee0:	20000138 	.word	0x20000138
 8003ee4:	40016400 	.word	0x40016400

08003ee8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <DFSDM_GetChannelFromInstance+0x9c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <DFSDM_GetChannelFromInstance+0x18>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <DFSDM_GetChannelFromInstance+0xa0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d102      	bne.n	8003f06 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e037      	b.n	8003f76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a20      	ldr	r2, [pc, #128]	; (8003f8c <DFSDM_GetChannelFromInstance+0xa4>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d003      	beq.n	8003f16 <DFSDM_GetChannelFromInstance+0x2e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1f      	ldr	r2, [pc, #124]	; (8003f90 <DFSDM_GetChannelFromInstance+0xa8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d102      	bne.n	8003f1c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003f16:	2301      	movs	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e02c      	b.n	8003f76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	; (8003f94 <DFSDM_GetChannelFromInstance+0xac>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <DFSDM_GetChannelFromInstance+0x44>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <DFSDM_GetChannelFromInstance+0xb0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d102      	bne.n	8003f32 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e021      	b.n	8003f76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a19      	ldr	r2, [pc, #100]	; (8003f9c <DFSDM_GetChannelFromInstance+0xb4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <DFSDM_GetChannelFromInstance+0x5a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a18      	ldr	r2, [pc, #96]	; (8003fa0 <DFSDM_GetChannelFromInstance+0xb8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d102      	bne.n	8003f48 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8003f42:	2303      	movs	r3, #3
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e016      	b.n	8003f76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <DFSDM_GetChannelFromInstance+0xbc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d102      	bne.n	8003f56 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003f50:	2304      	movs	r3, #4
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e00f      	b.n	8003f76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <DFSDM_GetChannelFromInstance+0xc0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d102      	bne.n	8003f64 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8003f5e:	2305      	movs	r3, #5
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e008      	b.n	8003f76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a11      	ldr	r2, [pc, #68]	; (8003fac <DFSDM_GetChannelFromInstance+0xc4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d102      	bne.n	8003f72 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003f6c:	2306      	movs	r3, #6
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	e001      	b.n	8003f76 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8003f72:	2307      	movs	r3, #7
 8003f74:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003f76:	68fb      	ldr	r3, [r7, #12]
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40016000 	.word	0x40016000
 8003f88:	40016400 	.word	0x40016400
 8003f8c:	40016020 	.word	0x40016020
 8003f90:	40016420 	.word	0x40016420
 8003f94:	40016040 	.word	0x40016040
 8003f98:	40016440 	.word	0x40016440
 8003f9c:	40016060 	.word	0x40016060
 8003fa0:	40016460 	.word	0x40016460
 8003fa4:	40016480 	.word	0x40016480
 8003fa8:	400164a0 	.word	0x400164a0
 8003fac:	400164c0 	.word	0x400164c0

08003fb0 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e081      	b.n	80040c6 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d106      	bne.n	8003fdc <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fd fb12 	bl	8001600 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2224      	movs	r2, #36	; 0x24
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0201 	bic.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004000:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004010:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d107      	bne.n	800402a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	e006      	b.n	8004038 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689a      	ldr	r2, [r3, #8]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004036:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	2b02      	cmp	r3, #2
 800403e:	d104      	bne.n	800404a <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004048:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800405c:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800406c:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	ea42 0103 	orr.w	r1, r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	021a      	lsls	r2, r3, #8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69d9      	ldr	r1, [r3, #28]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1a      	ldr	r2, [r3, #32]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0201 	orr.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
 80040d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d138      	bne.n	8004156 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e032      	b.n	8004158 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2224      	movs	r2, #36	; 0x24
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0201 	bic.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004120:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6819      	ldr	r1, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800417a:	2300      	movs	r3, #0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	e165      	b.n	800444c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004180:	2201      	movs	r2, #1
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	fa02 f303 	lsl.w	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4013      	ands	r3, r2
 8004192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	429a      	cmp	r2, r3
 800419a:	f040 8154 	bne.w	8004446 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d00b      	beq.n	80041be <HAL_GPIO_Init+0x5a>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d007      	beq.n	80041be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80041b2:	2b11      	cmp	r3, #17
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b12      	cmp	r3, #18
 80041bc:	d130      	bne.n	8004220 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	2203      	movs	r2, #3
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f4:	2201      	movs	r2, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 0201 	and.w	r2, r3, #1
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	2203      	movs	r2, #3
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b02      	cmp	r3, #2
 8004256:	d003      	beq.n	8004260 <HAL_GPIO_Init+0xfc>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b12      	cmp	r3, #18
 800425e:	d123      	bne.n	80042a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	08da      	lsrs	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	3208      	adds	r2, #8
 8004268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	220f      	movs	r2, #15
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4313      	orrs	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	08da      	lsrs	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	3208      	adds	r2, #8
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2203      	movs	r2, #3
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0203 	and.w	r2, r3, #3
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80ae 	beq.w	8004446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	4b5c      	ldr	r3, [pc, #368]	; (8004460 <HAL_GPIO_Init+0x2fc>)
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	4a5b      	ldr	r2, [pc, #364]	; (8004460 <HAL_GPIO_Init+0x2fc>)
 80042f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f8:	6453      	str	r3, [r2, #68]	; 0x44
 80042fa:	4b59      	ldr	r3, [pc, #356]	; (8004460 <HAL_GPIO_Init+0x2fc>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004306:	4a57      	ldr	r2, [pc, #348]	; (8004464 <HAL_GPIO_Init+0x300>)
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	089b      	lsrs	r3, r3, #2
 800430c:	3302      	adds	r3, #2
 800430e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	220f      	movs	r2, #15
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a4e      	ldr	r2, [pc, #312]	; (8004468 <HAL_GPIO_Init+0x304>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d025      	beq.n	800437e <HAL_GPIO_Init+0x21a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a4d      	ldr	r2, [pc, #308]	; (800446c <HAL_GPIO_Init+0x308>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d01f      	beq.n	800437a <HAL_GPIO_Init+0x216>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a4c      	ldr	r2, [pc, #304]	; (8004470 <HAL_GPIO_Init+0x30c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d019      	beq.n	8004376 <HAL_GPIO_Init+0x212>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a4b      	ldr	r2, [pc, #300]	; (8004474 <HAL_GPIO_Init+0x310>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_GPIO_Init+0x20e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <HAL_GPIO_Init+0x314>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00d      	beq.n	800436e <HAL_GPIO_Init+0x20a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a49      	ldr	r2, [pc, #292]	; (800447c <HAL_GPIO_Init+0x318>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d007      	beq.n	800436a <HAL_GPIO_Init+0x206>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a48      	ldr	r2, [pc, #288]	; (8004480 <HAL_GPIO_Init+0x31c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d101      	bne.n	8004366 <HAL_GPIO_Init+0x202>
 8004362:	2306      	movs	r3, #6
 8004364:	e00c      	b.n	8004380 <HAL_GPIO_Init+0x21c>
 8004366:	2307      	movs	r3, #7
 8004368:	e00a      	b.n	8004380 <HAL_GPIO_Init+0x21c>
 800436a:	2305      	movs	r3, #5
 800436c:	e008      	b.n	8004380 <HAL_GPIO_Init+0x21c>
 800436e:	2304      	movs	r3, #4
 8004370:	e006      	b.n	8004380 <HAL_GPIO_Init+0x21c>
 8004372:	2303      	movs	r3, #3
 8004374:	e004      	b.n	8004380 <HAL_GPIO_Init+0x21c>
 8004376:	2302      	movs	r3, #2
 8004378:	e002      	b.n	8004380 <HAL_GPIO_Init+0x21c>
 800437a:	2301      	movs	r3, #1
 800437c:	e000      	b.n	8004380 <HAL_GPIO_Init+0x21c>
 800437e:	2300      	movs	r3, #0
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	f002 0203 	and.w	r2, r2, #3
 8004386:	0092      	lsls	r2, r2, #2
 8004388:	4093      	lsls	r3, r2
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004390:	4934      	ldr	r1, [pc, #208]	; (8004464 <HAL_GPIO_Init+0x300>)
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	089b      	lsrs	r3, r3, #2
 8004396:	3302      	adds	r3, #2
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800439e:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_GPIO_Init+0x320>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043c2:	4a30      	ldr	r2, [pc, #192]	; (8004484 <HAL_GPIO_Init+0x320>)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043c8:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <HAL_GPIO_Init+0x320>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043ec:	4a25      	ldr	r2, [pc, #148]	; (8004484 <HAL_GPIO_Init+0x320>)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043f2:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_GPIO_Init+0x320>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004416:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <HAL_GPIO_Init+0x320>)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_GPIO_Init+0x320>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004440:	4a10      	ldr	r2, [pc, #64]	; (8004484 <HAL_GPIO_Init+0x320>)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3301      	adds	r3, #1
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	2b0f      	cmp	r3, #15
 8004450:	f67f ae96 	bls.w	8004180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004454:	bf00      	nop
 8004456:	3724      	adds	r7, #36	; 0x24
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40023800 	.word	0x40023800
 8004464:	40013800 	.word	0x40013800
 8004468:	40020000 	.word	0x40020000
 800446c:	40020400 	.word	0x40020400
 8004470:	40020800 	.word	0x40020800
 8004474:	40020c00 	.word	0x40020c00
 8004478:	40021000 	.word	0x40021000
 800447c:	40021400 	.word	0x40021400
 8004480:	40021800 	.word	0x40021800
 8004484:	40013c00 	.word	0x40013c00

08004488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
 8004494:	4613      	mov	r3, r2
 8004496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004498:	787b      	ldrb	r3, [r7, #1]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800449e:	887a      	ldrh	r2, [r7, #2]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a4:	e003      	b.n	80044ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044a6:	887b      	ldrh	r3, [r7, #2]
 80044a8:	041a      	lsls	r2, r3, #16
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	619a      	str	r2, [r3, #24]
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80044ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044bc:	b08f      	sub	sp, #60	; 0x3c
 80044be:	af0a      	add	r7, sp, #40	; 0x28
 80044c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e054      	b.n	8004576 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d106      	bne.n	80044ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f00c fa24 	bl	8010934 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2203      	movs	r2, #3
 80044f0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d102      	bne.n	8004506 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f006 fa24 	bl	800a958 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	687e      	ldr	r6, [r7, #4]
 8004518:	466d      	mov	r5, sp
 800451a:	f106 0410 	add.w	r4, r6, #16
 800451e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004522:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004524:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004526:	e894 0003 	ldmia.w	r4, {r0, r1}
 800452a:	e885 0003 	stmia.w	r5, {r0, r1}
 800452e:	1d33      	adds	r3, r6, #4
 8004530:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004532:	6838      	ldr	r0, [r7, #0]
 8004534:	f006 f99e 	bl	800a874 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2101      	movs	r1, #1
 800453e:	4618      	mov	r0, r3
 8004540:	f006 fa1b 	bl	800a97a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	687e      	ldr	r6, [r7, #4]
 800454c:	466d      	mov	r5, sp
 800454e:	f106 0410 	add.w	r4, r6, #16
 8004552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004556:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004558:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800455a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800455e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004562:	1d33      	adds	r3, r6, #4
 8004564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004566:	6838      	ldr	r0, [r7, #0]
 8004568:	f006 fb2e 	bl	800abc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800457e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800457e:	b590      	push	{r4, r7, lr}
 8004580:	b089      	sub	sp, #36	; 0x24
 8004582:	af04      	add	r7, sp, #16
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	461a      	mov	r2, r3
 800458c:	4603      	mov	r3, r0
 800458e:	70fb      	strb	r3, [r7, #3]
 8004590:	460b      	mov	r3, r1
 8004592:	70bb      	strb	r3, [r7, #2]
 8004594:	4613      	mov	r3, r2
 8004596:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_HCD_HC_Init+0x28>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e07f      	b.n	80046a6 <HAL_HCD_HC_Init+0x128>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	440b      	add	r3, r1
 80045bc:	333d      	adds	r3, #61	; 0x3d
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80045c2:	78fa      	ldrb	r2, [r7, #3]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	440b      	add	r3, r1
 80045d0:	3338      	adds	r3, #56	; 0x38
 80045d2:	787a      	ldrb	r2, [r7, #1]
 80045d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	440b      	add	r3, r1
 80045e4:	3340      	adds	r3, #64	; 0x40
 80045e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80045e8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	440b      	add	r3, r1
 80045f8:	3339      	adds	r3, #57	; 0x39
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	440b      	add	r3, r1
 800460c:	333f      	adds	r3, #63	; 0x3f
 800460e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	78bb      	ldrb	r3, [r7, #2]
 8004618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800461c:	b2d8      	uxtb	r0, r3
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	440b      	add	r3, r1
 800462a:	333a      	adds	r3, #58	; 0x3a
 800462c:	4602      	mov	r2, r0
 800462e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004634:	2b00      	cmp	r3, #0
 8004636:	da0a      	bge.n	800464e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	440b      	add	r3, r1
 8004646:	333b      	adds	r3, #59	; 0x3b
 8004648:	2201      	movs	r2, #1
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e009      	b.n	8004662 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	440b      	add	r3, r1
 800465c:	333b      	adds	r3, #59	; 0x3b
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004662:	78fa      	ldrb	r2, [r7, #3]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	440b      	add	r3, r1
 8004670:	333c      	adds	r3, #60	; 0x3c
 8004672:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004676:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6818      	ldr	r0, [r3, #0]
 800467c:	787c      	ldrb	r4, [r7, #1]
 800467e:	78ba      	ldrb	r2, [r7, #2]
 8004680:	78f9      	ldrb	r1, [r7, #3]
 8004682:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004684:	9302      	str	r3, [sp, #8]
 8004686:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004690:	9300      	str	r3, [sp, #0]
 8004692:	4623      	mov	r3, r4
 8004694:	f006 fc14 	bl	800aec0 <USB_HC_Init>
 8004698:	4603      	mov	r3, r0
 800469a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd90      	pop	{r4, r7, pc}

080046ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_HCD_HC_Halt+0x1e>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e00f      	b.n	80046ec <HAL_HCD_HC_Halt+0x3e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f006 fe50 	bl	800b382 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	4608      	mov	r0, r1
 80046fe:	4611      	mov	r1, r2
 8004700:	461a      	mov	r2, r3
 8004702:	4603      	mov	r3, r0
 8004704:	70fb      	strb	r3, [r7, #3]
 8004706:	460b      	mov	r3, r1
 8004708:	70bb      	strb	r3, [r7, #2]
 800470a:	4613      	mov	r3, r2
 800470c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	333b      	adds	r3, #59	; 0x3b
 800471e:	78ba      	ldrb	r2, [r7, #2]
 8004720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	440b      	add	r3, r1
 8004730:	333f      	adds	r3, #63	; 0x3f
 8004732:	787a      	ldrb	r2, [r7, #1]
 8004734:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004736:	7c3b      	ldrb	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d114      	bne.n	8004766 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	440b      	add	r3, r1
 800474a:	3342      	adds	r3, #66	; 0x42
 800474c:	2203      	movs	r2, #3
 800474e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	440b      	add	r3, r1
 800475e:	333d      	adds	r3, #61	; 0x3d
 8004760:	7f3a      	ldrb	r2, [r7, #28]
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e009      	b.n	800477a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	440b      	add	r3, r1
 8004774:	3342      	adds	r3, #66	; 0x42
 8004776:	2202      	movs	r2, #2
 8004778:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800477a:	787b      	ldrb	r3, [r7, #1]
 800477c:	2b03      	cmp	r3, #3
 800477e:	f200 80d6 	bhi.w	800492e <HAL_HCD_HC_SubmitRequest+0x23a>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	08004799 	.word	0x08004799
 800478c:	08004919 	.word	0x08004919
 8004790:	08004805 	.word	0x08004805
 8004794:	0800488f 	.word	0x0800488f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004798:	7c3b      	ldrb	r3, [r7, #16]
 800479a:	2b01      	cmp	r3, #1
 800479c:	f040 80c9 	bne.w	8004932 <HAL_HCD_HC_SubmitRequest+0x23e>
 80047a0:	78bb      	ldrb	r3, [r7, #2]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 80c5 	bne.w	8004932 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80047a8:	8b3b      	ldrh	r3, [r7, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	440b      	add	r3, r1
 80047bc:	3351      	adds	r3, #81	; 0x51
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80047c2:	78fa      	ldrb	r2, [r7, #3]
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	440b      	add	r3, r1
 80047d0:	3351      	adds	r3, #81	; 0x51
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10a      	bne.n	80047ee <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047d8:	78fa      	ldrb	r2, [r7, #3]
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	440b      	add	r3, r1
 80047e6:	3342      	adds	r3, #66	; 0x42
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80047ec:	e0a1      	b.n	8004932 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047ee:	78fa      	ldrb	r2, [r7, #3]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	440b      	add	r3, r1
 80047fc:	3342      	adds	r3, #66	; 0x42
 80047fe:	2202      	movs	r2, #2
 8004800:	701a      	strb	r2, [r3, #0]
      break;
 8004802:	e096      	b.n	8004932 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004804:	78bb      	ldrb	r3, [r7, #2]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d120      	bne.n	800484c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	440b      	add	r3, r1
 8004818:	3351      	adds	r3, #81	; 0x51
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	440b      	add	r3, r1
 800482e:	3342      	adds	r3, #66	; 0x42
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004834:	e07e      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	440b      	add	r3, r1
 8004844:	3342      	adds	r3, #66	; 0x42
 8004846:	2202      	movs	r2, #2
 8004848:	701a      	strb	r2, [r3, #0]
      break;
 800484a:	e073      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	440b      	add	r3, r1
 800485a:	3350      	adds	r3, #80	; 0x50
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004862:	78fa      	ldrb	r2, [r7, #3]
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	440b      	add	r3, r1
 8004870:	3342      	adds	r3, #66	; 0x42
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
      break;
 8004876:	e05d      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	440b      	add	r3, r1
 8004886:	3342      	adds	r3, #66	; 0x42
 8004888:	2202      	movs	r2, #2
 800488a:	701a      	strb	r2, [r3, #0]
      break;
 800488c:	e052      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800488e:	78bb      	ldrb	r3, [r7, #2]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d120      	bne.n	80048d6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	440b      	add	r3, r1
 80048a2:	3351      	adds	r3, #81	; 0x51
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048aa:	78fa      	ldrb	r2, [r7, #3]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	440b      	add	r3, r1
 80048b8:	3342      	adds	r3, #66	; 0x42
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80048be:	e039      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80048c0:	78fa      	ldrb	r2, [r7, #3]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	440b      	add	r3, r1
 80048ce:	3342      	adds	r3, #66	; 0x42
 80048d0:	2202      	movs	r2, #2
 80048d2:	701a      	strb	r2, [r3, #0]
      break;
 80048d4:	e02e      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	440b      	add	r3, r1
 80048e4:	3350      	adds	r3, #80	; 0x50
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	440b      	add	r3, r1
 80048fa:	3342      	adds	r3, #66	; 0x42
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
      break;
 8004900:	e018      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	440b      	add	r3, r1
 8004910:	3342      	adds	r3, #66	; 0x42
 8004912:	2202      	movs	r2, #2
 8004914:	701a      	strb	r2, [r3, #0]
      break;
 8004916:	e00d      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	440b      	add	r3, r1
 8004926:	3342      	adds	r3, #66	; 0x42
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
      break;
 800492c:	e002      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800492e:	bf00      	nop
 8004930:	e000      	b.n	8004934 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004932:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	4413      	add	r3, r2
 800493e:	00db      	lsls	r3, r3, #3
 8004940:	440b      	add	r3, r1
 8004942:	3344      	adds	r3, #68	; 0x44
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	8b39      	ldrh	r1, [r7, #24]
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4403      	add	r3, r0
 8004958:	3348      	adds	r3, #72	; 0x48
 800495a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800495c:	78fa      	ldrb	r2, [r7, #3]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	440b      	add	r3, r1
 800496a:	335c      	adds	r3, #92	; 0x5c
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	440b      	add	r3, r1
 800497e:	334c      	adds	r3, #76	; 0x4c
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	440b      	add	r3, r1
 8004992:	3339      	adds	r3, #57	; 0x39
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	440b      	add	r3, r1
 80049a6:	335d      	adds	r3, #93	; 0x5d
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	78fa      	ldrb	r2, [r7, #3]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	3338      	adds	r3, #56	; 0x38
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	18d1      	adds	r1, r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	f006 fb84 	bl	800b0d4 <USB_HC_StartXfer>
 80049cc:	4603      	mov	r3, r0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop

080049d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f006 f8a7 	bl	800ab42 <USB_GetMode>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	f040 80ef 	bne.w	8004bda <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f006 f88b 	bl	800ab1c <USB_ReadInterrupts>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 80e5 	beq.w	8004bd8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f006 f882 	bl	800ab1c <USB_ReadInterrupts>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a22:	d104      	bne.n	8004a2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004a2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f006 f872 	bl	800ab1c <USB_ReadInterrupts>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a42:	d104      	bne.n	8004a4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f006 f862 	bl	800ab1c <USB_ReadInterrupts>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a62:	d104      	bne.n	8004a6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004a6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f006 f852 	bl	800ab1c <USB_ReadInterrupts>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d103      	bne.n	8004a8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2202      	movs	r2, #2
 8004a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f006 f844 	bl	800ab1c <USB_ReadInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a9e:	d115      	bne.n	8004acc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004aa8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d108      	bne.n	8004acc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f00b ffb8 	bl	8010a30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f006 f934 	bl	800ad34 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f006 f823 	bl	800ab1c <USB_ReadInterrupts>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ae0:	d102      	bne.n	8004ae8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f001 f966 	bl	8005db4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f006 f815 	bl	800ab1c <USB_ReadInterrupts>
 8004af2:	4603      	mov	r3, r0
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d106      	bne.n	8004b0a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f00b ff7b 	bl	80109f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2208      	movs	r2, #8
 8004b08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f006 f804 	bl	800ab1c <USB_ReadInterrupts>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b1e:	d138      	bne.n	8004b92 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f006 fc1b 	bl	800b360 <USB_HC_ReadInterrupt>
 8004b2a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e025      	b.n	8004b7e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 030f 	and.w	r3, r3, #15
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b5c:	d106      	bne.n	8004b6c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f8cf 	bl	8004d08 <HCD_HC_IN_IRQHandler>
 8004b6a:	e005      	b.n	8004b78 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fcfd 	bl	8005572 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d3d4      	bcc.n	8004b32 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f005 ffc0 	bl	800ab1c <USB_ReadInterrupts>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b10      	cmp	r3, #16
 8004ba4:	d101      	bne.n	8004baa <HAL_HCD_IRQHandler+0x1d2>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_HCD_IRQHandler+0x1d4>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d014      	beq.n	8004bda <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0210 	bic.w	r2, r2, #16
 8004bbe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f001 f84b 	bl	8005c5c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0210 	orr.w	r2, r2, #16
 8004bd4:	619a      	str	r2, [r3, #24]
 8004bd6:	e000      	b.n	8004bda <HAL_HCD_IRQHandler+0x202>
      return;
 8004bd8:	bf00      	nop
    }
  }
}
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_HCD_Start+0x16>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e013      	b.n	8004c1e <HAL_HCD_Start+0x3e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f005 fe97 	bl	800a936 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f006 f8f4 	bl	800adfc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_HCD_Stop+0x16>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e00d      	b.n	8004c58 <HAL_HCD_Stop+0x32>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f006 fcd5 	bl	800b5f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f006 f89b 	bl	800ada8 <USB_ResetPort>
 8004c72:	4603      	mov	r3, r0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	440b      	add	r3, r1
 8004c96:	335c      	adds	r3, #92	; 0x5c
 8004c98:	781b      	ldrb	r3, [r3, #0]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004cb2:	78fa      	ldrb	r2, [r7, #3]
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	440b      	add	r3, r1
 8004cc0:	334c      	adds	r3, #76	; 0x4c
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f006 f8dd 	bl	800ae9c <USB_GetCurrentFrame>
 8004ce2:	4603      	mov	r3, r0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f006 f8b8 	bl	800ae6e <USB_GetHostSpeed>
 8004cfe:	4603      	mov	r3, r0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	460b      	mov	r3, r1
 8004d12:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d119      	bne.n	8004d6c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	2304      	movs	r3, #4
 8004d48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d64:	f043 0302 	orr.w	r3, r3, #2
 8004d68:	60d3      	str	r3, [r2, #12]
 8004d6a:	e0ce      	b.n	8004f0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d82:	d12c      	bne.n	8004dde <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d90:	461a      	mov	r2, r3
 8004d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	440b      	add	r3, r1
 8004da6:	335d      	adds	r3, #93	; 0x5d
 8004da8:	2207      	movs	r2, #7
 8004daa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f006 fad3 	bl	800b382 <USB_HC_Halt>
 8004ddc:	e095      	b.n	8004f0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f003 0320 	and.w	r3, r3, #32
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d109      	bne.n	8004e08 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e00:	461a      	mov	r2, r3
 8004e02:	2320      	movs	r3, #32
 8004e04:	6093      	str	r3, [r2, #8]
 8004e06:	e080      	b.n	8004f0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0308 	and.w	r3, r3, #8
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d134      	bne.n	8004e88 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	015a      	lsls	r2, r3, #5
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4413      	add	r3, r2
 8004e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	0151      	lsls	r1, r2, #5
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	440a      	add	r2, r1
 8004e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	440b      	add	r3, r1
 8004e4c:	335d      	adds	r3, #93	; 0x5d
 8004e4e:	2205      	movs	r2, #5
 8004e50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e5e:	461a      	mov	r2, r3
 8004e60:	2310      	movs	r3, #16
 8004e62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	461a      	mov	r2, r3
 8004e72:	2308      	movs	r3, #8
 8004e74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f006 fa7e 	bl	800b382 <USB_HC_Halt>
 8004e86:	e040      	b.n	8004f0a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e9e:	d134      	bne.n	8004f0a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eba:	f043 0302 	orr.w	r3, r3, #2
 8004ebe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	b2d2      	uxtb	r2, r2
 8004ec8:	4611      	mov	r1, r2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f006 fa59 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004edc:	461a      	mov	r2, r3
 8004ede:	2310      	movs	r3, #16
 8004ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	4413      	add	r3, r2
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	440b      	add	r3, r1
 8004ef0:	335d      	adds	r3, #93	; 0x5d
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f08:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f20:	d122      	bne.n	8004f68 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	0151      	lsls	r1, r2, #5
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	440a      	add	r2, r1
 8004f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f006 fa18 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f64:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004f66:	e300      	b.n	800556a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	f040 80fd 	bne.w	800517a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01b      	beq.n	8004fc0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004f88:	6879      	ldr	r1, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	00db      	lsls	r3, r3, #3
 8004f94:	440b      	add	r3, r1
 8004f96:	3348      	adds	r3, #72	; 0x48
 8004f98:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	440b      	add	r3, r1
 8004fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004fac:	1ad1      	subs	r1, r2, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4403      	add	r3, r0
 8004fbc:	334c      	adds	r3, #76	; 0x4c
 8004fbe:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	440b      	add	r3, r1
 8004fce:	335d      	adds	r3, #93	; 0x5d
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	440b      	add	r3, r1
 8004fe2:	3358      	adds	r3, #88	; 0x58
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	440b      	add	r3, r1
 8005008:	333f      	adds	r3, #63	; 0x3f
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	440b      	add	r3, r1
 800501e:	333f      	adds	r3, #63	; 0x3f
 8005020:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005022:	2b02      	cmp	r3, #2
 8005024:	d121      	bne.n	800506a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4413      	add	r3, r2
 800502e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	440a      	add	r2, r1
 800503c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005040:	f043 0302 	orr.w	r3, r3, #2
 8005044:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f006 f996 	bl	800b382 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	015a      	lsls	r2, r3, #5
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4413      	add	r3, r2
 800505e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005062:	461a      	mov	r2, r3
 8005064:	2310      	movs	r3, #16
 8005066:	6093      	str	r3, [r2, #8]
 8005068:	e070      	b.n	800514c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	440b      	add	r3, r1
 8005078:	333f      	adds	r3, #63	; 0x3f
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d12a      	bne.n	80050d6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	015a      	lsls	r2, r3, #5
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4413      	add	r3, r2
 8005088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	0151      	lsls	r1, r2, #5
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	440a      	add	r2, r1
 8005096:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800509a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800509e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	335c      	adds	r3, #92	; 0x5c
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	b2d8      	uxtb	r0, r3
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4613      	mov	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	440b      	add	r3, r1
 80050c6:	335c      	adds	r3, #92	; 0x5c
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	4601      	mov	r1, r0
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f00b fcbc 	bl	8010a4c <HAL_HCD_HC_NotifyURBChange_Callback>
 80050d4:	e03a      	b.n	800514c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	440b      	add	r3, r1
 80050e4:	333f      	adds	r3, #63	; 0x3f
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d12f      	bne.n	800514c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	440b      	add	r3, r1
 80050fa:	335c      	adds	r3, #92	; 0x5c
 80050fc:	2201      	movs	r2, #1
 80050fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	3350      	adds	r3, #80	; 0x50
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	f083 0301 	eor.w	r3, r3, #1
 8005116:	b2d8      	uxtb	r0, r3
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	440b      	add	r3, r1
 8005126:	3350      	adds	r3, #80	; 0x50
 8005128:	4602      	mov	r2, r0
 800512a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	b2d8      	uxtb	r0, r3
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	440b      	add	r3, r1
 800513e:	335c      	adds	r3, #92	; 0x5c
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	4601      	mov	r1, r0
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f00b fc80 	bl	8010a4c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	440b      	add	r3, r1
 800515a:	3350      	adds	r3, #80	; 0x50
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	f083 0301 	eor.w	r3, r3, #1
 8005162:	b2d8      	uxtb	r0, r3
 8005164:	6879      	ldr	r1, [r7, #4]
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4613      	mov	r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	4413      	add	r3, r2
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	440b      	add	r3, r1
 8005172:	3350      	adds	r3, #80	; 0x50
 8005174:	4602      	mov	r2, r0
 8005176:	701a      	strb	r2, [r3, #0]
}
 8005178:	e1f7      	b.n	800556a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b02      	cmp	r3, #2
 800518e:	f040 811a 	bne.w	80053c6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ac:	f023 0302 	bic.w	r3, r3, #2
 80051b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4613      	mov	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	440b      	add	r3, r1
 80051c0:	335d      	adds	r3, #93	; 0x5d
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d10a      	bne.n	80051de <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	335c      	adds	r3, #92	; 0x5c
 80051d8:	2201      	movs	r2, #1
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e0d9      	b.n	8005392 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	335d      	adds	r3, #93	; 0x5d
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b05      	cmp	r3, #5
 80051f2:	d10a      	bne.n	800520a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	440b      	add	r3, r1
 8005202:	335c      	adds	r3, #92	; 0x5c
 8005204:	2205      	movs	r2, #5
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	e0c3      	b.n	8005392 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	440b      	add	r3, r1
 8005218:	335d      	adds	r3, #93	; 0x5d
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b06      	cmp	r3, #6
 800521e:	d00a      	beq.n	8005236 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	440b      	add	r3, r1
 800522e:	335d      	adds	r3, #93	; 0x5d
 8005230:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005232:	2b08      	cmp	r3, #8
 8005234:	d156      	bne.n	80052e4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	440b      	add	r3, r1
 8005244:	3358      	adds	r3, #88	; 0x58
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	1c59      	adds	r1, r3, #1
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4613      	mov	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	4413      	add	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4403      	add	r3, r0
 8005258:	3358      	adds	r3, #88	; 0x58
 800525a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	440b      	add	r3, r1
 800526a:	3358      	adds	r3, #88	; 0x58
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d914      	bls.n	800529c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	00db      	lsls	r3, r3, #3
 800527e:	440b      	add	r3, r1
 8005280:	3358      	adds	r3, #88	; 0x58
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	00db      	lsls	r3, r3, #3
 8005292:	440b      	add	r3, r1
 8005294:	335c      	adds	r3, #92	; 0x5c
 8005296:	2204      	movs	r2, #4
 8005298:	701a      	strb	r2, [r3, #0]
 800529a:	e009      	b.n	80052b0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	440b      	add	r3, r1
 80052aa:	335c      	adds	r3, #92	; 0x5c
 80052ac:	2202      	movs	r2, #2
 80052ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	e056      	b.n	8005392 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	440b      	add	r3, r1
 80052f2:	335d      	adds	r3, #93	; 0x5d
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d123      	bne.n	8005342 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	440b      	add	r3, r1
 8005308:	335c      	adds	r3, #92	; 0x5c
 800530a:	2202      	movs	r2, #2
 800530c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005324:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800532c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533a:	461a      	mov	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e027      	b.n	8005392 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	00db      	lsls	r3, r3, #3
 800534e:	440b      	add	r3, r1
 8005350:	335d      	adds	r3, #93	; 0x5d
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b07      	cmp	r3, #7
 8005356:	d11c      	bne.n	8005392 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	3358      	adds	r3, #88	; 0x58
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	1c59      	adds	r1, r3, #1
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4403      	add	r3, r0
 800537a:	3358      	adds	r3, #88	; 0x58
 800537c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	335c      	adds	r3, #92	; 0x5c
 800538e:	2204      	movs	r2, #4
 8005390:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	4413      	add	r3, r2
 800539a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539e:	461a      	mov	r2, r3
 80053a0:	2302      	movs	r3, #2
 80053a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	b2d8      	uxtb	r0, r3
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	440b      	add	r3, r1
 80053b6:	335c      	adds	r3, #92	; 0x5c
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	4601      	mov	r1, r0
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f00b fb44 	bl	8010a4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80053c4:	e0d1      	b.n	800556a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d8:	2b80      	cmp	r3, #128	; 0x80
 80053da:	d13e      	bne.n	800545a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f6:	f043 0302 	orr.w	r3, r3, #2
 80053fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80053fc:	6879      	ldr	r1, [r7, #4]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	440b      	add	r3, r1
 800540a:	3358      	adds	r3, #88	; 0x58
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	1c59      	adds	r1, r3, #1
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4403      	add	r3, r0
 800541e:	3358      	adds	r3, #88	; 0x58
 8005420:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	440b      	add	r3, r1
 8005430:	335d      	adds	r3, #93	; 0x5d
 8005432:	2206      	movs	r2, #6
 8005434:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f005 ff9e 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	015a      	lsls	r2, r3, #5
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4413      	add	r3, r2
 800544e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005452:	461a      	mov	r2, r3
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	6093      	str	r3, [r2, #8]
}
 8005458:	e087      	b.n	800556a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b10      	cmp	r3, #16
 800546e:	d17c      	bne.n	800556a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	440b      	add	r3, r1
 800547e:	333f      	adds	r3, #63	; 0x3f
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	2b03      	cmp	r3, #3
 8005484:	d122      	bne.n	80054cc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	440b      	add	r3, r1
 8005494:	3358      	adds	r3, #88	; 0x58
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b4:	f043 0302 	orr.w	r3, r3, #2
 80054b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	b2d2      	uxtb	r2, r2
 80054c2:	4611      	mov	r1, r2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f005 ff5c 	bl	800b382 <USB_HC_Halt>
 80054ca:	e045      	b.n	8005558 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	440b      	add	r3, r1
 80054da:	333f      	adds	r3, #63	; 0x3f
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	440b      	add	r3, r1
 80054f0:	333f      	adds	r3, #63	; 0x3f
 80054f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d12f      	bne.n	8005558 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	440b      	add	r3, r1
 8005506:	3358      	adds	r3, #88	; 0x58
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d121      	bne.n	8005558 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	440b      	add	r3, r1
 8005522:	335d      	adds	r3, #93	; 0x5d
 8005524:	2203      	movs	r2, #3
 8005526:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	440a      	add	r2, r1
 800553e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005542:	f043 0302 	orr.w	r3, r3, #2
 8005546:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	4611      	mov	r1, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f005 ff15 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005564:	461a      	mov	r2, r3
 8005566:	2310      	movs	r3, #16
 8005568:	6093      	str	r3, [r2, #8]
}
 800556a:	bf00      	nop
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	460b      	mov	r3, r1
 800557c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b04      	cmp	r3, #4
 80055a0:	d119      	bne.n	80055d6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ae:	461a      	mov	r2, r3
 80055b0:	2304      	movs	r3, #4
 80055b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ce:	f043 0302 	orr.w	r3, r3, #2
 80055d2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80055d4:	e33e      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0320 	and.w	r3, r3, #32
 80055e8:	2b20      	cmp	r3, #32
 80055ea:	d141      	bne.n	8005670 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f8:	461a      	mov	r2, r3
 80055fa:	2320      	movs	r3, #32
 80055fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	440b      	add	r3, r1
 800560c:	333d      	adds	r3, #61	; 0x3d
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	f040 831f 	bne.w	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	440b      	add	r3, r1
 8005624:	333d      	adds	r3, #61	; 0x3d
 8005626:	2200      	movs	r2, #0
 8005628:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	440b      	add	r3, r1
 8005638:	335c      	adds	r3, #92	; 0x5c
 800563a:	2202      	movs	r2, #2
 800563c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	0151      	lsls	r1, r2, #5
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	440a      	add	r2, r1
 8005654:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005658:	f043 0302 	orr.w	r3, r3, #2
 800565c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	b2d2      	uxtb	r2, r2
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f005 fe8a 	bl	800b382 <USB_HC_Halt>
}
 800566e:	e2f1      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	4413      	add	r3, r2
 8005678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d13f      	bne.n	8005706 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	335d      	adds	r3, #93	; 0x5d
 8005696:	2204      	movs	r2, #4
 8005698:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4613      	mov	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	333d      	adds	r3, #61	; 0x3d
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	3358      	adds	r3, #88	; 0x58
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056dc:	f043 0302 	orr.w	r3, r3, #2
 80056e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	b2d2      	uxtb	r2, r2
 80056ea:	4611      	mov	r1, r2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f005 fe48 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	461a      	mov	r2, r3
 8005700:	2340      	movs	r3, #64	; 0x40
 8005702:	6093      	str	r3, [r2, #8]
}
 8005704:	e2a6      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800571c:	d122      	bne.n	8005764 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4413      	add	r3, r2
 8005726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	0151      	lsls	r1, r2, #5
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	440a      	add	r2, r1
 8005734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005738:	f043 0302 	orr.w	r3, r3, #2
 800573c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f005 fe1a 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800575a:	461a      	mov	r2, r3
 800575c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005760:	6093      	str	r3, [r2, #8]
}
 8005762:	e277      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	4413      	add	r3, r2
 800576c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b01      	cmp	r3, #1
 8005778:	d135      	bne.n	80057e6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4613      	mov	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	440b      	add	r3, r1
 8005788:	3358      	adds	r3, #88	; 0x58
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	4413      	add	r3, r2
 8005796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a8:	f043 0302 	orr.w	r3, r3, #2
 80057ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	4611      	mov	r1, r2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f005 fde2 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ca:	461a      	mov	r2, r3
 80057cc:	2301      	movs	r3, #1
 80057ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	335d      	adds	r3, #93	; 0x5d
 80057e0:	2201      	movs	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
}
 80057e4:	e236      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d12b      	bne.n	8005854 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4413      	add	r3, r2
 8005804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005808:	461a      	mov	r2, r3
 800580a:	2308      	movs	r3, #8
 800580c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	015a      	lsls	r2, r3, #5
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4413      	add	r3, r2
 8005816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	440a      	add	r2, r1
 8005824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005828:	f043 0302 	orr.w	r3, r3, #2
 800582c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	4611      	mov	r1, r2
 8005838:	4618      	mov	r0, r3
 800583a:	f005 fda2 	bl	800b382 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4613      	mov	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	4413      	add	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	440b      	add	r3, r1
 800584c:	335d      	adds	r3, #93	; 0x5d
 800584e:	2205      	movs	r2, #5
 8005850:	701a      	strb	r2, [r3, #0]
}
 8005852:	e1ff      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0310 	and.w	r3, r3, #16
 8005866:	2b10      	cmp	r3, #16
 8005868:	d155      	bne.n	8005916 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	440b      	add	r3, r1
 8005878:	3358      	adds	r3, #88	; 0x58
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800587e:	6879      	ldr	r1, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	335d      	adds	r3, #93	; 0x5d
 800588e:	2203      	movs	r2, #3
 8005890:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	440b      	add	r3, r1
 80058a0:	333d      	adds	r3, #61	; 0x3d
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d114      	bne.n	80058d2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	440b      	add	r3, r1
 80058b6:	333c      	adds	r3, #60	; 0x3c
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	440b      	add	r3, r1
 80058cc:	333d      	adds	r3, #61	; 0x3d
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058ec:	f043 0302 	orr.w	r3, r3, #2
 80058f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f005 fd40 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4413      	add	r3, r2
 800590a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590e:	461a      	mov	r2, r3
 8005910:	2310      	movs	r3, #16
 8005912:	6093      	str	r3, [r2, #8]
}
 8005914:	e19e      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005928:	2b80      	cmp	r3, #128	; 0x80
 800592a:	d12b      	bne.n	8005984 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	440a      	add	r2, r1
 8005942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005946:	f043 0302 	orr.w	r3, r3, #2
 800594a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	b2d2      	uxtb	r2, r2
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f005 fd13 	bl	800b382 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4613      	mov	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	440b      	add	r3, r1
 800596a:	335d      	adds	r3, #93	; 0x5d
 800596c:	2206      	movs	r2, #6
 800596e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597c:	461a      	mov	r2, r3
 800597e:	2380      	movs	r3, #128	; 0x80
 8005980:	6093      	str	r3, [r2, #8]
}
 8005982:	e167      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800599a:	d135      	bne.n	8005a08 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	015a      	lsls	r2, r3, #5
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4413      	add	r3, r2
 80059a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	0151      	lsls	r1, r2, #5
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	440a      	add	r2, r1
 80059b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059b6:	f043 0302 	orr.w	r3, r3, #2
 80059ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	4611      	mov	r1, r2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f005 fcdb 	bl	800b382 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d8:	461a      	mov	r2, r3
 80059da:	2310      	movs	r3, #16
 80059dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	461a      	mov	r2, r3
 80059ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	335d      	adds	r3, #93	; 0x5d
 8005a02:	2208      	movs	r2, #8
 8005a04:	701a      	strb	r2, [r3, #0]
}
 8005a06:	e125      	b.n	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	f040 811a 	bne.w	8005c54 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a3a:	f023 0302 	bic.w	r3, r3, #2
 8005a3e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	440b      	add	r3, r1
 8005a4e:	335d      	adds	r3, #93	; 0x5d
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d137      	bne.n	8005ac6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	335c      	adds	r3, #92	; 0x5c
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	440b      	add	r3, r1
 8005a78:	333f      	adds	r3, #63	; 0x3f
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d00b      	beq.n	8005a98 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	440b      	add	r3, r1
 8005a8e:	333f      	adds	r3, #63	; 0x3f
 8005a90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	f040 80c5 	bne.w	8005c22 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	440b      	add	r3, r1
 8005aa6:	3351      	adds	r3, #81	; 0x51
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f083 0301 	eor.w	r3, r3, #1
 8005aae:	b2d8      	uxtb	r0, r3
 8005ab0:	6879      	ldr	r1, [r7, #4]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	440b      	add	r3, r1
 8005abe:	3351      	adds	r3, #81	; 0x51
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	701a      	strb	r2, [r3, #0]
 8005ac4:	e0ad      	b.n	8005c22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	440b      	add	r3, r1
 8005ad4:	335d      	adds	r3, #93	; 0x5d
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d10a      	bne.n	8005af2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	00db      	lsls	r3, r3, #3
 8005ae8:	440b      	add	r3, r1
 8005aea:	335c      	adds	r3, #92	; 0x5c
 8005aec:	2202      	movs	r2, #2
 8005aee:	701a      	strb	r2, [r3, #0]
 8005af0:	e097      	b.n	8005c22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	440b      	add	r3, r1
 8005b00:	335d      	adds	r3, #93	; 0x5d
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d10a      	bne.n	8005b1e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005b08:	6879      	ldr	r1, [r7, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	4413      	add	r3, r2
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	440b      	add	r3, r1
 8005b16:	335c      	adds	r3, #92	; 0x5c
 8005b18:	2202      	movs	r2, #2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	e081      	b.n	8005c22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	335d      	adds	r3, #93	; 0x5d
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d10a      	bne.n	8005b4a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	440b      	add	r3, r1
 8005b42:	335c      	adds	r3, #92	; 0x5c
 8005b44:	2205      	movs	r2, #5
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	e06b      	b.n	8005c22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	440b      	add	r3, r1
 8005b58:	335d      	adds	r3, #93	; 0x5d
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b06      	cmp	r3, #6
 8005b5e:	d00a      	beq.n	8005b76 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	440b      	add	r3, r1
 8005b6e:	335d      	adds	r3, #93	; 0x5d
 8005b70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d155      	bne.n	8005c22 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4413      	add	r3, r2
 8005b80:	00db      	lsls	r3, r3, #3
 8005b82:	440b      	add	r3, r1
 8005b84:	3358      	adds	r3, #88	; 0x58
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	1c59      	adds	r1, r3, #1
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	00db      	lsls	r3, r3, #3
 8005b96:	4403      	add	r3, r0
 8005b98:	3358      	adds	r3, #88	; 0x58
 8005b9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	440b      	add	r3, r1
 8005baa:	3358      	adds	r3, #88	; 0x58
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d914      	bls.n	8005bdc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3358      	adds	r3, #88	; 0x58
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	440b      	add	r3, r1
 8005bd4:	335c      	adds	r3, #92	; 0x5c
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	701a      	strb	r2, [r3, #0]
 8005bda:	e009      	b.n	8005bf0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005bdc:	6879      	ldr	r1, [r7, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4613      	mov	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	440b      	add	r3, r1
 8005bea:	335c      	adds	r3, #92	; 0x5c
 8005bec:	2202      	movs	r2, #2
 8005bee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c06:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c0e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2302      	movs	r3, #2
 8005c32:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	b2d8      	uxtb	r0, r3
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	00db      	lsls	r3, r3, #3
 8005c44:	440b      	add	r3, r1
 8005c46:	335c      	adds	r3, #92	; 0x5c
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4601      	mov	r1, r0
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f00a fefc 	bl	8010a4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005c54:	bf00      	nop
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	f003 030f 	and.w	r3, r3, #15
 8005c7c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	0c5b      	lsrs	r3, r3, #17
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	091b      	lsrs	r3, r3, #4
 8005c8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c90:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	d003      	beq.n	8005ca0 <HCD_RXQLVL_IRQHandler+0x44>
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	f000 8082 	beq.w	8005da2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005c9e:	e083      	b.n	8005da8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d07f      	beq.n	8005da6 <HCD_RXQLVL_IRQHandler+0x14a>
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	440b      	add	r3, r1
 8005cb4:	3344      	adds	r3, #68	; 0x44
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d074      	beq.n	8005da6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	440b      	add	r3, r1
 8005cce:	3344      	adds	r3, #68	; 0x44
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	b292      	uxth	r2, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	f004 fef7 	bl	800aaca <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	440b      	add	r3, r1
 8005cea:	3344      	adds	r3, #68	; 0x44
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	18d1      	adds	r1, r2, r3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	4403      	add	r3, r0
 8005d00:	3344      	adds	r3, #68	; 0x44
 8005d02:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4413      	add	r3, r2
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	440b      	add	r3, r1
 8005d12:	334c      	adds	r3, #76	; 0x4c
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	18d1      	adds	r1, r2, r3
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	69ba      	ldr	r2, [r7, #24]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4413      	add	r3, r2
 8005d24:	00db      	lsls	r3, r3, #3
 8005d26:	4403      	add	r3, r0
 8005d28:	334c      	adds	r3, #76	; 0x4c
 8005d2a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HCD_RXQLVL_IRQHandler+0x154>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d031      	beq.n	8005da6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d58:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	461a      	mov	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	440b      	add	r3, r1
 8005d82:	3350      	adds	r3, #80	; 0x50
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f083 0301 	eor.w	r3, r3, #1
 8005d8a:	b2d8      	uxtb	r0, r3
 8005d8c:	6879      	ldr	r1, [r7, #4]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	4613      	mov	r3, r2
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	440b      	add	r3, r1
 8005d9a:	3350      	adds	r3, #80	; 0x50
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	701a      	strb	r2, [r3, #0]
      break;
 8005da0:	e001      	b.n	8005da6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005da6:	bf00      	nop
  }
}
 8005da8:	bf00      	nop
 8005daa:	3728      	adds	r7, #40	; 0x28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	1ff80000 	.word	0x1ff80000

08005db4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005de0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d10b      	bne.n	8005e04 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d102      	bne.n	8005dfc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f00a fe0c 	bl	8010a14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f043 0302 	orr.w	r3, r3, #2
 8005e02:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0308 	and.w	r3, r3, #8
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d132      	bne.n	8005e74 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f043 0308 	orr.w	r3, r3, #8
 8005e14:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d126      	bne.n	8005e6e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	699b      	ldr	r3, [r3, #24]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d113      	bne.n	8005e50 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005e2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e32:	d106      	bne.n	8005e42 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2102      	movs	r1, #2
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f004 ff7a 	bl	800ad34 <USB_InitFSLSPClkSel>
 8005e40:	e011      	b.n	8005e66 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2101      	movs	r1, #1
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f004 ff73 	bl	800ad34 <USB_InitFSLSPClkSel>
 8005e4e:	e00a      	b.n	8005e66 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d106      	bne.n	8005e66 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005e64:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f00a fe02 	bl	8010a70 <HAL_HCD_PortEnabled_Callback>
 8005e6c:	e002      	b.n	8005e74 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f00a fe0c 	bl	8010a8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d103      	bne.n	8005e86 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f043 0320 	orr.w	r3, r3, #32
 8005e84:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6013      	str	r3, [r2, #0]
}
 8005e92:	bf00      	nop
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e11f      	b.n	80060ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb fbe4 	bl	8001690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2224      	movs	r2, #36	; 0x24
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0201 	bic.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005efe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f00:	f001 f80e 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
 8005f04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4a7b      	ldr	r2, [pc, #492]	; (80060f8 <HAL_I2C_Init+0x25c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d807      	bhi.n	8005f20 <HAL_I2C_Init+0x84>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a7a      	ldr	r2, [pc, #488]	; (80060fc <HAL_I2C_Init+0x260>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	bf94      	ite	ls
 8005f18:	2301      	movls	r3, #1
 8005f1a:	2300      	movhi	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e006      	b.n	8005f2e <HAL_I2C_Init+0x92>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a77      	ldr	r2, [pc, #476]	; (8006100 <HAL_I2C_Init+0x264>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	bf94      	ite	ls
 8005f28:	2301      	movls	r3, #1
 8005f2a:	2300      	movhi	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0db      	b.n	80060ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a72      	ldr	r2, [pc, #456]	; (8006104 <HAL_I2C_Init+0x268>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	0c9b      	lsrs	r3, r3, #18
 8005f40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a64      	ldr	r2, [pc, #400]	; (80060f8 <HAL_I2C_Init+0x25c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d802      	bhi.n	8005f70 <HAL_I2C_Init+0xd4>
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	e009      	b.n	8005f84 <HAL_I2C_Init+0xe8>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	4a63      	ldr	r2, [pc, #396]	; (8006108 <HAL_I2C_Init+0x26c>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	099b      	lsrs	r3, r3, #6
 8005f82:	3301      	adds	r3, #1
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6812      	ldr	r2, [r2, #0]
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4956      	ldr	r1, [pc, #344]	; (80060f8 <HAL_I2C_Init+0x25c>)
 8005fa0:	428b      	cmp	r3, r1
 8005fa2:	d80d      	bhi.n	8005fc0 <HAL_I2C_Init+0x124>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1e59      	subs	r1, r3, #1
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb8:	2b04      	cmp	r3, #4
 8005fba:	bf38      	it	cc
 8005fbc:	2304      	movcc	r3, #4
 8005fbe:	e04f      	b.n	8006060 <HAL_I2C_Init+0x1c4>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d111      	bne.n	8005fec <HAL_I2C_Init+0x150>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1e58      	subs	r0, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6859      	ldr	r1, [r3, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	440b      	add	r3, r1
 8005fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fda:	3301      	adds	r3, #1
 8005fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	e012      	b.n	8006012 <HAL_I2C_Init+0x176>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1e58      	subs	r0, r3, #1
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6859      	ldr	r1, [r3, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	0099      	lsls	r1, r3, #2
 8005ffc:	440b      	add	r3, r1
 8005ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8006002:	3301      	adds	r3, #1
 8006004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006008:	2b00      	cmp	r3, #0
 800600a:	bf0c      	ite	eq
 800600c:	2301      	moveq	r3, #1
 800600e:	2300      	movne	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_I2C_Init+0x17e>
 8006016:	2301      	movs	r3, #1
 8006018:	e022      	b.n	8006060 <HAL_I2C_Init+0x1c4>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10e      	bne.n	8006040 <HAL_I2C_Init+0x1a4>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1e58      	subs	r0, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6859      	ldr	r1, [r3, #4]
 800602a:	460b      	mov	r3, r1
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	440b      	add	r3, r1
 8006030:	fbb0 f3f3 	udiv	r3, r0, r3
 8006034:	3301      	adds	r3, #1
 8006036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800603e:	e00f      	b.n	8006060 <HAL_I2C_Init+0x1c4>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1e58      	subs	r0, r3, #1
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6859      	ldr	r1, [r3, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	0099      	lsls	r1, r3, #2
 8006050:	440b      	add	r3, r1
 8006052:	fbb0 f3f3 	udiv	r3, r0, r3
 8006056:	3301      	adds	r3, #1
 8006058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800605c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	6809      	ldr	r1, [r1, #0]
 8006064:	4313      	orrs	r3, r2
 8006066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69da      	ldr	r2, [r3, #28]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800608e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6911      	ldr	r1, [r2, #16]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68d2      	ldr	r2, [r2, #12]
 800609a:	4311      	orrs	r1, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6812      	ldr	r2, [r2, #0]
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695a      	ldr	r2, [r3, #20]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	000186a0 	.word	0x000186a0
 80060fc:	001e847f 	.word	0x001e847f
 8006100:	003d08ff 	.word	0x003d08ff
 8006104:	431bde83 	.word	0x431bde83
 8006108:	10624dd3 	.word	0x10624dd3

0800610c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e154      	b.n	80063c8 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d109      	bne.n	800613e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a98      	ldr	r2, [pc, #608]	; (8006398 <HAL_I2S_Init+0x28c>)
 8006136:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fb faf1 	bl	8001720 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6812      	ldr	r2, [r2, #0]
 8006150:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006154:	f023 030f 	bic.w	r3, r3, #15
 8006158:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2202      	movs	r2, #2
 8006160:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d06f      	beq.n	800624a <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d102      	bne.n	8006178 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006172:	2310      	movs	r3, #16
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e001      	b.n	800617c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006178:	2320      	movs	r3, #32
 800617a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b20      	cmp	r3, #32
 8006182:	d802      	bhi.n	800618a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a83      	ldr	r2, [pc, #524]	; (800639c <HAL_I2S_Init+0x290>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d004      	beq.n	800619e <HAL_I2S_Init+0x92>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a81      	ldr	r2, [pc, #516]	; (80063a0 <HAL_I2S_Init+0x294>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d104      	bne.n	80061a8 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800619e:	2001      	movs	r0, #1
 80061a0:	f001 f9a4 	bl	80074ec <HAL_RCCEx_GetPeriphCLKFreq>
 80061a4:	60f8      	str	r0, [r7, #12]
 80061a6:	e003      	b.n	80061b0 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80061a8:	2002      	movs	r0, #2
 80061aa:	f001 f99f 	bl	80074ec <HAL_RCCEx_GetPeriphCLKFreq>
 80061ae:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b8:	d125      	bne.n	8006206 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d010      	beq.n	80061e4 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	461a      	mov	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	fbb2 f3f3 	udiv	r3, r2, r3
 80061de:	3305      	adds	r3, #5
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	e01f      	b.n	8006224 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006200:	3305      	adds	r3, #5
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	e00e      	b.n	8006224 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	fbb2 f2f3 	udiv	r2, r2, r3
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006220:	3305      	adds	r3, #5
 8006222:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4a5f      	ldr	r2, [pc, #380]	; (80063a4 <HAL_I2S_Init+0x298>)
 8006228:	fba2 2303 	umull	r2, r3, r2, r3
 800622c:	08db      	lsrs	r3, r3, #3
 800622e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	61bb      	str	r3, [r7, #24]
 8006248:	e003      	b.n	8006252 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800624a:	2302      	movs	r3, #2
 800624c:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d902      	bls.n	800625e <HAL_I2S_Init+0x152>
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2bff      	cmp	r3, #255	; 0xff
 800625c:	d907      	bls.n	800626e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	f043 0210 	orr.w	r2, r3, #16
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e0ac      	b.n	80063c8 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	ea42 0103 	orr.w	r1, r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	430a      	orrs	r2, r1
 8006280:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800628c:	f023 030f 	bic.w	r3, r3, #15
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6851      	ldr	r1, [r2, #4]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6892      	ldr	r2, [r2, #8]
 8006298:	4311      	orrs	r1, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68d2      	ldr	r2, [r2, #12]
 800629e:	4311      	orrs	r1, r2
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6992      	ldr	r2, [r2, #24]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b0:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b30      	cmp	r3, #48	; 0x30
 80062b8:	d003      	beq.n	80062c2 <HAL_I2S_Init+0x1b6>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	2bb0      	cmp	r3, #176	; 0xb0
 80062c0:	d107      	bne.n	80062d2 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69da      	ldr	r2, [r3, #28]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062d0:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d16e      	bne.n	80063b8 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a32      	ldr	r2, [pc, #200]	; (80063a8 <HAL_I2S_Init+0x29c>)
 80062de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a2d      	ldr	r2, [pc, #180]	; (800639c <HAL_I2S_Init+0x290>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d101      	bne.n	80062ee <HAL_I2S_Init+0x1e2>
 80062ea:	4b30      	ldr	r3, [pc, #192]	; (80063ac <HAL_I2S_Init+0x2a0>)
 80062ec:	e001      	b.n	80062f2 <HAL_I2S_Init+0x1e6>
 80062ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	6812      	ldr	r2, [r2, #0]
 80062f8:	4928      	ldr	r1, [pc, #160]	; (800639c <HAL_I2S_Init+0x290>)
 80062fa:	428a      	cmp	r2, r1
 80062fc:	d101      	bne.n	8006302 <HAL_I2S_Init+0x1f6>
 80062fe:	4a2b      	ldr	r2, [pc, #172]	; (80063ac <HAL_I2S_Init+0x2a0>)
 8006300:	e001      	b.n	8006306 <HAL_I2S_Init+0x1fa>
 8006302:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006306:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800630a:	f023 030f 	bic.w	r3, r3, #15
 800630e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a21      	ldr	r2, [pc, #132]	; (800639c <HAL_I2S_Init+0x290>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d101      	bne.n	800631e <HAL_I2S_Init+0x212>
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <HAL_I2S_Init+0x2a0>)
 800631c:	e001      	b.n	8006322 <HAL_I2S_Init+0x216>
 800631e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006322:	2202      	movs	r2, #2
 8006324:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a1c      	ldr	r2, [pc, #112]	; (800639c <HAL_I2S_Init+0x290>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d101      	bne.n	8006334 <HAL_I2S_Init+0x228>
 8006330:	4b1e      	ldr	r3, [pc, #120]	; (80063ac <HAL_I2S_Init+0x2a0>)
 8006332:	e001      	b.n	8006338 <HAL_I2S_Init+0x22c>
 8006334:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006344:	d003      	beq.n	800634e <HAL_I2S_Init+0x242>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800634e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006352:	613b      	str	r3, [r7, #16]
 8006354:	e001      	b.n	800635a <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006356:	2300      	movs	r3, #0
 8006358:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	b299      	uxth	r1, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006370:	4303      	orrs	r3, r0
 8006372:	b29b      	uxth	r3, r3
 8006374:	430b      	orrs	r3, r1
 8006376:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006378:	4313      	orrs	r3, r2
 800637a:	b29a      	uxth	r2, r3
 800637c:	897b      	ldrh	r3, [r7, #10]
 800637e:	4313      	orrs	r3, r2
 8006380:	b29b      	uxth	r3, r3
 8006382:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006386:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a03      	ldr	r2, [pc, #12]	; (800639c <HAL_I2S_Init+0x290>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10e      	bne.n	80063b0 <HAL_I2S_Init+0x2a4>
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <HAL_I2S_Init+0x2a0>)
 8006394:	e00e      	b.n	80063b4 <HAL_I2S_Init+0x2a8>
 8006396:	bf00      	nop
 8006398:	0800648b 	.word	0x0800648b
 800639c:	40003800 	.word	0x40003800
 80063a0:	40003c00 	.word	0x40003c00
 80063a4:	cccccccd 	.word	0xcccccccd
 80063a8:	080065a1 	.word	0x080065a1
 80063ac:	40003400 	.word	0x40003400
 80063b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063b4:	897a      	ldrh	r2, [r7, #10]
 80063b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	881a      	ldrh	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	1c9a      	adds	r2, r3, #2
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10e      	bne.n	8006424 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006414:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7fc fb62 	bl	8002ae8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68da      	ldr	r2, [r3, #12]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	b292      	uxth	r2, r2
 8006440:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	1c9a      	adds	r2, r3, #2
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006450:	b29b      	uxth	r3, r3
 8006452:	3b01      	subs	r3, #1
 8006454:	b29a      	uxth	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10e      	bne.n	8006482 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006472:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7fc fb55 	bl	8002b2c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b086      	sub	sp, #24
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	d13a      	bne.n	800651c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d109      	bne.n	80064c4 <I2S_IRQHandler+0x3a>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d102      	bne.n	80064c4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff ffb4 	bl	800642c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ca:	2b40      	cmp	r3, #64	; 0x40
 80064cc:	d126      	bne.n	800651c <I2S_IRQHandler+0x92>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d11f      	bne.n	800651c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80064ec:	2300      	movs	r3, #0
 80064ee:	613b      	str	r3, [r7, #16]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	613b      	str	r3, [r7, #16]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800650e:	f043 0202 	orr.w	r2, r3, #2
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fc faf0 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b03      	cmp	r3, #3
 8006526:	d136      	bne.n	8006596 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f003 0302 	and.w	r3, r3, #2
 800652e:	2b02      	cmp	r3, #2
 8006530:	d109      	bne.n	8006546 <I2S_IRQHandler+0xbc>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	2b80      	cmp	r3, #128	; 0x80
 800653e:	d102      	bne.n	8006546 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff45 	bl	80063d0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b08      	cmp	r3, #8
 800654e:	d122      	bne.n	8006596 <I2S_IRQHandler+0x10c>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b20      	cmp	r3, #32
 800655c:	d11b      	bne.n	8006596 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800656c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006588:	f043 0204 	orr.w	r2, r3, #4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7fc fab3 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006596:	bf00      	nop
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4aa2      	ldr	r2, [pc, #648]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d101      	bne.n	80065be <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80065ba:	4ba2      	ldr	r3, [pc, #648]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065bc:	e001      	b.n	80065c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80065be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a9b      	ldr	r2, [pc, #620]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80065d8:	4b9a      	ldr	r3, [pc, #616]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80065da:	e001      	b.n	80065e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80065dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ec:	d004      	beq.n	80065f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f040 8099 	bne.w	800672a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d107      	bne.n	8006612 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006608:	2b00      	cmp	r3, #0
 800660a:	d002      	beq.n	8006612 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f925 	bl	800685c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d107      	bne.n	800662c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9c8 	bl	80069bc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006632:	2b40      	cmp	r3, #64	; 0x40
 8006634:	d13a      	bne.n	80066ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f003 0320 	and.w	r3, r3, #32
 800663c:	2b00      	cmp	r3, #0
 800663e:	d035      	beq.n	80066ac <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a7e      	ldr	r2, [pc, #504]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d101      	bne.n	800664e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800664a:	4b7e      	ldr	r3, [pc, #504]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800664c:	e001      	b.n	8006652 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800664e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4979      	ldr	r1, [pc, #484]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800665a:	428b      	cmp	r3, r1
 800665c:	d101      	bne.n	8006662 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800665e:	4b79      	ldr	r3, [pc, #484]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006660:	e001      	b.n	8006666 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006666:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800666a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800667a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f043 0202 	orr.w	r2, r3, #2
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fc fa28 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	f040 80be 	bne.w	8006834 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	f000 80b8 	beq.w	8006834 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066d2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a59      	ldr	r2, [pc, #356]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d101      	bne.n	80066e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80066de:	4b59      	ldr	r3, [pc, #356]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066e0:	e001      	b.n	80066e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80066e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4954      	ldr	r1, [pc, #336]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80066ee:	428b      	cmp	r3, r1
 80066f0:	d101      	bne.n	80066f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80066f2:	4b54      	ldr	r3, [pc, #336]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80066f4:	e001      	b.n	80066fa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80066f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80066fe:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006700:	2300      	movs	r3, #0
 8006702:	60bb      	str	r3, [r7, #8]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	60bb      	str	r3, [r7, #8]
 800670c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671a:	f043 0204 	orr.w	r2, r3, #4
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fc f9ea 	bl	8002afc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006728:	e084      	b.n	8006834 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b02      	cmp	r3, #2
 8006732:	d107      	bne.n	8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f8be 	bl	80068c0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b01      	cmp	r3, #1
 800674c:	d107      	bne.n	800675e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f8fd 	bl	8006958 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d12f      	bne.n	80067c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f003 0320 	and.w	r3, r3, #32
 800676e:	2b00      	cmp	r3, #0
 8006770:	d02a      	beq.n	80067c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006780:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a2e      	ldr	r2, [pc, #184]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d101      	bne.n	8006790 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800678c:	4b2d      	ldr	r3, [pc, #180]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800678e:	e001      	b.n	8006794 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4929      	ldr	r1, [pc, #164]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800679c:	428b      	cmp	r3, r1
 800679e:	d101      	bne.n	80067a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80067a0:	4b28      	ldr	r3, [pc, #160]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067a2:	e001      	b.n	80067a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80067a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80067ac:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ba:	f043 0202 	orr.w	r2, r3, #2
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7fc f99a 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b08      	cmp	r3, #8
 80067d0:	d131      	bne.n	8006836 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d02c      	beq.n	8006836 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a17      	ldr	r2, [pc, #92]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80067e6:	4b17      	ldr	r3, [pc, #92]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067e8:	e001      	b.n	80067ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80067ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4912      	ldr	r1, [pc, #72]	; (8006840 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067f6:	428b      	cmp	r3, r1
 80067f8:	d101      	bne.n	80067fe <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80067fc:	e001      	b.n	8006802 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80067fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006802:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006806:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006816:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006824:	f043 0204 	orr.w	r2, r3, #4
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fc f965 	bl	8002afc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006832:	e000      	b.n	8006836 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006834:	bf00      	nop
}
 8006836:	bf00      	nop
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40003800 	.word	0x40003800
 8006844:	40003400 	.word	0x40003400

08006848 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	1c99      	adds	r1, r3, #2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6251      	str	r1, [r2, #36]	; 0x24
 800686e:	881a      	ldrh	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006888:	b29b      	uxth	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d113      	bne.n	80068b6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800689c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff ffc9 	bl	8006848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80068b6:	bf00      	nop
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068cc:	1c99      	adds	r1, r3, #2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6251      	str	r1, [r2, #36]	; 0x24
 80068d2:	8819      	ldrh	r1, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <I2SEx_TxISR_I2SExt+0x90>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <I2SEx_TxISR_I2SExt+0x22>
 80068de:	4b1d      	ldr	r3, [pc, #116]	; (8006954 <I2SEx_TxISR_I2SExt+0x94>)
 80068e0:	e001      	b.n	80068e6 <I2SEx_TxISR_I2SExt+0x26>
 80068e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068e6:	460a      	mov	r2, r1
 80068e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d121      	bne.n	8006946 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a12      	ldr	r2, [pc, #72]	; (8006950 <I2SEx_TxISR_I2SExt+0x90>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d101      	bne.n	8006910 <I2SEx_TxISR_I2SExt+0x50>
 800690c:	4b11      	ldr	r3, [pc, #68]	; (8006954 <I2SEx_TxISR_I2SExt+0x94>)
 800690e:	e001      	b.n	8006914 <I2SEx_TxISR_I2SExt+0x54>
 8006910:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	490d      	ldr	r1, [pc, #52]	; (8006950 <I2SEx_TxISR_I2SExt+0x90>)
 800691c:	428b      	cmp	r3, r1
 800691e:	d101      	bne.n	8006924 <I2SEx_TxISR_I2SExt+0x64>
 8006920:	4b0c      	ldr	r3, [pc, #48]	; (8006954 <I2SEx_TxISR_I2SExt+0x94>)
 8006922:	e001      	b.n	8006928 <I2SEx_TxISR_I2SExt+0x68>
 8006924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006928:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800692c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d106      	bne.n	8006946 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ff81 	bl	8006848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006946:	bf00      	nop
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40003800 	.word	0x40003800
 8006954:	40003400 	.word	0x40003400

08006958 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68d8      	ldr	r0, [r3, #12]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	1c99      	adds	r1, r3, #2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006970:	b282      	uxth	r2, r0
 8006972:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006978:	b29b      	uxth	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	b29a      	uxth	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d113      	bne.n	80069b4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800699a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff ff4a 	bl	8006848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a20      	ldr	r2, [pc, #128]	; (8006a4c <I2SEx_RxISR_I2SExt+0x90>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <I2SEx_RxISR_I2SExt+0x16>
 80069ce:	4b20      	ldr	r3, [pc, #128]	; (8006a50 <I2SEx_RxISR_I2SExt+0x94>)
 80069d0:	e001      	b.n	80069d6 <I2SEx_RxISR_I2SExt+0x1a>
 80069d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069d6:	68d8      	ldr	r0, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	1c99      	adds	r1, r3, #2
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80069e2:	b282      	uxth	r2, r0
 80069e4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d121      	bne.n	8006a42 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a12      	ldr	r2, [pc, #72]	; (8006a4c <I2SEx_RxISR_I2SExt+0x90>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d101      	bne.n	8006a0c <I2SEx_RxISR_I2SExt+0x50>
 8006a08:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <I2SEx_RxISR_I2SExt+0x94>)
 8006a0a:	e001      	b.n	8006a10 <I2SEx_RxISR_I2SExt+0x54>
 8006a0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	490d      	ldr	r1, [pc, #52]	; (8006a4c <I2SEx_RxISR_I2SExt+0x90>)
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	d101      	bne.n	8006a20 <I2SEx_RxISR_I2SExt+0x64>
 8006a1c:	4b0c      	ldr	r3, [pc, #48]	; (8006a50 <I2SEx_RxISR_I2SExt+0x94>)
 8006a1e:	e001      	b.n	8006a24 <I2SEx_RxISR_I2SExt+0x68>
 8006a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a24:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006a28:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ff03 	bl	8006848 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a42:	bf00      	nop
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40003800 	.word	0x40003800
 8006a50:	40003400 	.word	0x40003400

08006a54 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006a5c:	f7fc fbcc 	bl	80031f8 <HAL_GetTick>
 8006a60:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e069      	b.n	8006b40 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7fa ff07 	bl	8001894 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006a86:	f241 3188 	movw	r1, #5000	; 0x1388
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f85e 	bl	8006b4c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	021a      	lsls	r2, r3, #8
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	2120      	movs	r1, #32
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f856 	bl	8006b68 <QSPI_WaitFlagStateUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d137      	bne.n	8006b36 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ad0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6852      	ldr	r2, [r2, #4]
 8006ad8:	0611      	lsls	r1, r2, #24
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68d2      	ldr	r2, [r2, #12]
 8006ade:	4311      	orrs	r1, r2
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	69d2      	ldr	r2, [r2, #28]
 8006ae4:	4311      	orrs	r1, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6a12      	ldr	r2, [r2, #32]
 8006aea:	4311      	orrs	r1, r2
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	430b      	orrs	r3, r1
 8006af2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	4b13      	ldr	r3, [pc, #76]	; (8006b48 <HAL_QSPI_Init+0xf4>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6912      	ldr	r2, [r2, #16]
 8006b02:	0411      	lsls	r1, r2, #16
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6952      	ldr	r2, [r2, #20]
 8006b08:	4311      	orrs	r1, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6992      	ldr	r2, [r2, #24]
 8006b0e:	4311      	orrs	r1, r2
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	430b      	orrs	r3, r1
 8006b16:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f042 0201 	orr.w	r2, r2, #1
 8006b26:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	ffe0f8fe 	.word	0xffe0f8fe

08006b4c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	4613      	mov	r3, r2
 8006b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006b78:	e01a      	b.n	8006bb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d016      	beq.n	8006bb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b82:	f7fc fb39 	bl	80031f8 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	69ba      	ldr	r2, [r7, #24]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d302      	bcc.n	8006b98 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2204      	movs	r2, #4
 8006b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba4:	f043 0201 	orr.w	r2, r3, #1
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e00e      	b.n	8006bce <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	bf14      	ite	ne
 8006bbe:	2301      	movne	r3, #1
 8006bc0:	2300      	moveq	r3, #0
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d1d6      	bne.n	8006b7a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
	...

08006bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0cc      	b.n	8006d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bec:	4b68      	ldr	r3, [pc, #416]	; (8006d90 <HAL_RCC_ClockConfig+0x1b8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 030f 	and.w	r3, r3, #15
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d90c      	bls.n	8006c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bfa:	4b65      	ldr	r3, [pc, #404]	; (8006d90 <HAL_RCC_ClockConfig+0x1b8>)
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c02:	4b63      	ldr	r3, [pc, #396]	; (8006d90 <HAL_RCC_ClockConfig+0x1b8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d001      	beq.n	8006c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0b8      	b.n	8006d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d020      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d005      	beq.n	8006c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c2c:	4b59      	ldr	r3, [pc, #356]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4a58      	ldr	r2, [pc, #352]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0308 	and.w	r3, r3, #8
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c44:	4b53      	ldr	r3, [pc, #332]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	4a52      	ldr	r2, [pc, #328]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c50:	4b50      	ldr	r3, [pc, #320]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	494d      	ldr	r1, [pc, #308]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d044      	beq.n	8006cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d107      	bne.n	8006c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c76:	4b47      	ldr	r3, [pc, #284]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d119      	bne.n	8006cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e07f      	b.n	8006d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d003      	beq.n	8006c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c96:	4b3f      	ldr	r3, [pc, #252]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e06f      	b.n	8006d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ca6:	4b3b      	ldr	r3, [pc, #236]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e067      	b.n	8006d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cb6:	4b37      	ldr	r3, [pc, #220]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f023 0203 	bic.w	r2, r3, #3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	4934      	ldr	r1, [pc, #208]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006cc8:	f7fc fa96 	bl	80031f8 <HAL_GetTick>
 8006ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cce:	e00a      	b.n	8006ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cd0:	f7fc fa92 	bl	80031f8 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d901      	bls.n	8006ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e04f      	b.n	8006d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ce6:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f003 020c 	and.w	r2, r3, #12
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d1eb      	bne.n	8006cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cf8:	4b25      	ldr	r3, [pc, #148]	; (8006d90 <HAL_RCC_ClockConfig+0x1b8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d20c      	bcs.n	8006d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d06:	4b22      	ldr	r3, [pc, #136]	; (8006d90 <HAL_RCC_ClockConfig+0x1b8>)
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d0e:	4b20      	ldr	r3, [pc, #128]	; (8006d90 <HAL_RCC_ClockConfig+0x1b8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 030f 	and.w	r3, r3, #15
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d001      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e032      	b.n	8006d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d008      	beq.n	8006d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d2c:	4b19      	ldr	r3, [pc, #100]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	4916      	ldr	r1, [pc, #88]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d4a:	4b12      	ldr	r3, [pc, #72]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	490e      	ldr	r1, [pc, #56]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d5e:	f000 f821 	bl	8006da4 <HAL_RCC_GetSysClockFreq>
 8006d62:	4601      	mov	r1, r0
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	f003 030f 	and.w	r3, r3, #15
 8006d6e:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <HAL_RCC_ClockConfig+0x1c0>)
 8006d70:	5cd3      	ldrb	r3, [r2, r3]
 8006d72:	fa21 f303 	lsr.w	r3, r1, r3
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <HAL_RCC_ClockConfig+0x1c4>)
 8006d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d7a:	4b09      	ldr	r3, [pc, #36]	; (8006da0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fb f80e 	bl	8001da0 <HAL_InitTick>

  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40023c00 	.word	0x40023c00
 8006d94:	40023800 	.word	0x40023800
 8006d98:	080111c0 	.word	0x080111c0
 8006d9c:	20000000 	.word	0x20000000
 8006da0:	2000005c 	.word	0x2000005c

08006da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	2300      	movs	r3, #0
 8006db4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dba:	4b50      	ldr	r3, [pc, #320]	; (8006efc <HAL_RCC_GetSysClockFreq+0x158>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d007      	beq.n	8006dd6 <HAL_RCC_GetSysClockFreq+0x32>
 8006dc6:	2b08      	cmp	r3, #8
 8006dc8:	d008      	beq.n	8006ddc <HAL_RCC_GetSysClockFreq+0x38>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 808d 	bne.w	8006eea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dd0:	4b4b      	ldr	r3, [pc, #300]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006dd2:	60bb      	str	r3, [r7, #8]
       break;
 8006dd4:	e08c      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dd6:	4b4b      	ldr	r3, [pc, #300]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8006dd8:	60bb      	str	r3, [r7, #8]
      break;
 8006dda:	e089      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ddc:	4b47      	ldr	r3, [pc, #284]	; (8006efc <HAL_RCC_GetSysClockFreq+0x158>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006de6:	4b45      	ldr	r3, [pc, #276]	; (8006efc <HAL_RCC_GetSysClockFreq+0x158>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d023      	beq.n	8006e3a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006df2:	4b42      	ldr	r3, [pc, #264]	; (8006efc <HAL_RCC_GetSysClockFreq+0x158>)
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	099b      	lsrs	r3, r3, #6
 8006df8:	f04f 0400 	mov.w	r4, #0
 8006dfc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	ea03 0501 	and.w	r5, r3, r1
 8006e08:	ea04 0602 	and.w	r6, r4, r2
 8006e0c:	4a3d      	ldr	r2, [pc, #244]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e0e:	fb02 f106 	mul.w	r1, r2, r6
 8006e12:	2200      	movs	r2, #0
 8006e14:	fb02 f205 	mul.w	r2, r2, r5
 8006e18:	440a      	add	r2, r1
 8006e1a:	493a      	ldr	r1, [pc, #232]	; (8006f04 <HAL_RCC_GetSysClockFreq+0x160>)
 8006e1c:	fba5 0101 	umull	r0, r1, r5, r1
 8006e20:	1853      	adds	r3, r2, r1
 8006e22:	4619      	mov	r1, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f04f 0400 	mov.w	r4, #0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	4623      	mov	r3, r4
 8006e2e:	f7f9 f9f7 	bl	8000220 <__aeabi_uldivmod>
 8006e32:	4603      	mov	r3, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e049      	b.n	8006ece <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3a:	4b30      	ldr	r3, [pc, #192]	; (8006efc <HAL_RCC_GetSysClockFreq+0x158>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	099b      	lsrs	r3, r3, #6
 8006e40:	f04f 0400 	mov.w	r4, #0
 8006e44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	ea03 0501 	and.w	r5, r3, r1
 8006e50:	ea04 0602 	and.w	r6, r4, r2
 8006e54:	4629      	mov	r1, r5
 8006e56:	4632      	mov	r2, r6
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	f04f 0400 	mov.w	r4, #0
 8006e60:	0154      	lsls	r4, r2, #5
 8006e62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e66:	014b      	lsls	r3, r1, #5
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	1b49      	subs	r1, r1, r5
 8006e6e:	eb62 0206 	sbc.w	r2, r2, r6
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	f04f 0400 	mov.w	r4, #0
 8006e7a:	0194      	lsls	r4, r2, #6
 8006e7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006e80:	018b      	lsls	r3, r1, #6
 8006e82:	1a5b      	subs	r3, r3, r1
 8006e84:	eb64 0402 	sbc.w	r4, r4, r2
 8006e88:	f04f 0100 	mov.w	r1, #0
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	00e2      	lsls	r2, r4, #3
 8006e92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e96:	00d9      	lsls	r1, r3, #3
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4614      	mov	r4, r2
 8006e9c:	195b      	adds	r3, r3, r5
 8006e9e:	eb44 0406 	adc.w	r4, r4, r6
 8006ea2:	f04f 0100 	mov.w	r1, #0
 8006ea6:	f04f 0200 	mov.w	r2, #0
 8006eaa:	02a2      	lsls	r2, r4, #10
 8006eac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006eb0:	0299      	lsls	r1, r3, #10
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	4621      	mov	r1, r4
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f04f 0400 	mov.w	r4, #0
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	f7f9 f9ac 	bl	8000220 <__aeabi_uldivmod>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	460c      	mov	r4, r1
 8006ecc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ece:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <HAL_RCC_GetSysClockFreq+0x158>)
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	0c1b      	lsrs	r3, r3, #16
 8006ed4:	f003 0303 	and.w	r3, r3, #3
 8006ed8:	3301      	adds	r3, #1
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee6:	60bb      	str	r3, [r7, #8]
      break;
 8006ee8:	e002      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006eec:	60bb      	str	r3, [r7, #8]
      break;
 8006eee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006efa:	bf00      	nop
 8006efc:	40023800 	.word	0x40023800
 8006f00:	00f42400 	.word	0x00f42400
 8006f04:	017d7840 	.word	0x017d7840

08006f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f0c:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000000 	.word	0x20000000

08006f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f24:	f7ff fff0 	bl	8006f08 <HAL_RCC_GetHCLKFreq>
 8006f28:	4601      	mov	r1, r0
 8006f2a:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	0a9b      	lsrs	r3, r3, #10
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	4a03      	ldr	r2, [pc, #12]	; (8006f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f36:	5cd3      	ldrb	r3, [r2, r3]
 8006f38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	40023800 	.word	0x40023800
 8006f44:	080111d0 	.word	0x080111d0

08006f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f4c:	f7ff ffdc 	bl	8006f08 <HAL_RCC_GetHCLKFreq>
 8006f50:	4601      	mov	r1, r0
 8006f52:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	0b5b      	lsrs	r3, r3, #13
 8006f58:	f003 0307 	and.w	r3, r3, #7
 8006f5c:	4a03      	ldr	r2, [pc, #12]	; (8006f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f5e:	5cd3      	ldrb	r3, [r2, r3]
 8006f60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	080111d0 	.word	0x080111d0

08006f70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	220f      	movs	r2, #15
 8006f7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f80:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <HAL_RCC_GetClockConfig+0x5c>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 0203 	and.w	r2, r3, #3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f8c:	4b0f      	ldr	r3, [pc, #60]	; (8006fcc <HAL_RCC_GetClockConfig+0x5c>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f98:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <HAL_RCC_GetClockConfig+0x5c>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006fa4:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <HAL_RCC_GetClockConfig+0x5c>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	08db      	lsrs	r3, r3, #3
 8006faa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <HAL_RCC_GetClockConfig+0x60>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 020f 	and.w	r2, r3, #15
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	601a      	str	r2, [r3, #0]
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	40023c00 	.word	0x40023c00

08006fd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d010      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006ff8:	4b7a      	ldr	r3, [pc, #488]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ffe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	4977      	ldr	r1, [pc, #476]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007016:	2301      	movs	r3, #1
 8007018:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0302 	and.w	r3, r3, #2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d010      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007026:	4b6f      	ldr	r3, [pc, #444]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800702c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	496b      	ldr	r1, [pc, #428]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007036:	4313      	orrs	r3, r2
 8007038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a1b      	ldr	r3, [r3, #32]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007044:	2301      	movs	r3, #1
 8007046:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d022      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007054:	4b63      	ldr	r3, [pc, #396]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007062:	4960      	ldr	r1, [pc, #384]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8007072:	2301      	movs	r3, #1
 8007074:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800707e:	d10c      	bne.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007080:	4b58      	ldr	r3, [pc, #352]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007082:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007086:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	3b01      	subs	r3, #1
 8007090:	021b      	lsls	r3, r3, #8
 8007092:	4954      	ldr	r1, [pc, #336]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007094:	4313      	orrs	r3, r2
 8007096:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d022      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 80070a6:	4b4f      	ldr	r3, [pc, #316]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80070a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070b4:	494b      	ldr	r1, [pc, #300]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80070c4:	2301      	movs	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070d0:	d10c      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 80070d2:	4b44      	ldr	r3, [pc, #272]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80070d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	021b      	lsls	r3, r3, #8
 80070e4:	493f      	ldr	r1, [pc, #252]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0308 	and.w	r3, r3, #8
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 808a 	beq.w	800720e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	4b39      	ldr	r3, [pc, #228]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007102:	4a38      	ldr	r2, [pc, #224]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007108:	6413      	str	r3, [r2, #64]	; 0x40
 800710a:	4b36      	ldr	r3, [pc, #216]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007116:	4b34      	ldr	r3, [pc, #208]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a33      	ldr	r2, [pc, #204]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800711c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007120:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007122:	f7fc f869 	bl	80031f8 <HAL_GetTick>
 8007126:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007128:	e008      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800712a:	f7fc f865 	bl	80031f8 <HAL_GetTick>
 800712e:	4602      	mov	r2, r0
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	2b02      	cmp	r3, #2
 8007136:	d901      	bls.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007138:	2303      	movs	r3, #3
 800713a:	e1d1      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800713c:	4b2a      	ldr	r3, [pc, #168]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007144:	2b00      	cmp	r3, #0
 8007146:	d0f0      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007148:	4b26      	ldr	r3, [pc, #152]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800714a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007150:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02f      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	429a      	cmp	r2, r3
 8007164:	d028      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007166:	4b1f      	ldr	r3, [pc, #124]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007170:	4b1e      	ldr	r3, [pc, #120]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007176:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800717c:	4a19      	ldr	r2, [pc, #100]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007182:	4b18      	ldr	r3, [pc, #96]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b01      	cmp	r3, #1
 800718c:	d114      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800718e:	f7fc f833 	bl	80031f8 <HAL_GetTick>
 8007192:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007194:	e00a      	b.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007196:	f7fc f82f 	bl	80031f8 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d901      	bls.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e199      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071ac:	4b0d      	ldr	r3, [pc, #52]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80071ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0ee      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071c4:	d114      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 80071c6:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80071d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071da:	4902      	ldr	r1, [pc, #8]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	608b      	str	r3, [r1, #8]
 80071e0:	e00c      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x228>
 80071e2:	bf00      	nop
 80071e4:	40023800 	.word	0x40023800
 80071e8:	40007000 	.word	0x40007000
 80071ec:	42470e40 	.word	0x42470e40
 80071f0:	4b89      	ldr	r3, [pc, #548]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	4a88      	ldr	r2, [pc, #544]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071fa:	6093      	str	r3, [r2, #8]
 80071fc:	4b86      	ldr	r3, [pc, #536]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007208:	4983      	ldr	r1, [pc, #524]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800720a:	4313      	orrs	r3, r2
 800720c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d004      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8007220:	4b7e      	ldr	r3, [pc, #504]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8007222:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007230:	4b79      	ldr	r3, [pc, #484]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007236:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723e:	4976      	ldr	r1, [pc, #472]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007240:	4313      	orrs	r3, r2
 8007242:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d011      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007252:	4b71      	ldr	r3, [pc, #452]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007258:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	496d      	ldr	r1, [pc, #436]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007262:	4313      	orrs	r3, r2
 8007264:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007270:	d101      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8007272:	2301      	movs	r3, #1
 8007274:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007282:	4b65      	ldr	r3, [pc, #404]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007288:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	4961      	ldr	r1, [pc, #388]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d004      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b80      	cmp	r3, #128	; 0x80
 80072a4:	f040 80c6 	bne.w	8007434 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80072a8:	4b5d      	ldr	r3, [pc, #372]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072ae:	f7fb ffa3 	bl	80031f8 <HAL_GetTick>
 80072b2:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072b4:	e008      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072b6:	f7fb ff9f 	bl	80031f8 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e10b      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80072c8:	4b53      	ldr	r3, [pc, #332]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1f0      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80072d4:	4a53      	ldr	r2, [pc, #332]	; (8007424 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072da:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	69db      	ldr	r3, [r3, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d023      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d019      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800730c:	2b00      	cmp	r3, #0
 800730e:	d004      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007318:	d00e      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007322:	2b00      	cmp	r3, #0
 8007324:	d019      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	2b00      	cmp	r3, #0
 800732c:	d115      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x386>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007336:	d110      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	431a      	orrs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	061b      	lsls	r3, r3, #24
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	071b      	lsls	r3, r3, #28
 8007352:	4931      	ldr	r1, [pc, #196]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800736a:	2b00      	cmp	r3, #0
 800736c:	d009      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007376:	2b00      	cmp	r3, #0
 8007378:	d026      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d122      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007382:	4b25      	ldr	r3, [pc, #148]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007388:	0e1b      	lsrs	r3, r3, #24
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	019b      	lsls	r3, r3, #6
 800739a:	431a      	orrs	r2, r3
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	061b      	lsls	r3, r3, #24
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	071b      	lsls	r3, r3, #28
 80073a8:	491b      	ldr	r1, [pc, #108]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 80073b0:	4b19      	ldr	r3, [pc, #100]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b6:	f023 021f 	bic.w	r2, r3, #31
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	3b01      	subs	r3, #1
 80073c0:	4915      	ldr	r1, [pc, #84]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d010      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	019b      	lsls	r3, r3, #6
 80073de:	431a      	orrs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	061b      	lsls	r3, r3, #24
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	071b      	lsls	r3, r3, #28
 80073ee:	490a      	ldr	r1, [pc, #40]	; (8007418 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073f6:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80073f8:	2201      	movs	r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073fc:	f7fb fefc 	bl	80031f8 <HAL_GetTick>
 8007400:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007402:	e011      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007404:	f7fb fef8 	bl	80031f8 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d90a      	bls.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e064      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007416:	bf00      	nop
 8007418:	40023800 	.word	0x40023800
 800741c:	424711e0 	.word	0x424711e0
 8007420:	42470068 	.word	0x42470068
 8007424:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007428:	4b2f      	ldr	r3, [pc, #188]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0e7      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007440:	4b29      	ldr	r3, [pc, #164]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007446:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800744e:	4926      	ldr	r1, [pc, #152]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007450:	4313      	orrs	r3, r2
 8007452:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007462:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007468:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	491d      	ldr	r1, [pc, #116]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007484:	4b18      	ldr	r3, [pc, #96]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800748a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	4915      	ldr	r1, [pc, #84]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007494:	4313      	orrs	r3, r2
 8007496:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 80074a6:	4b10      	ldr	r3, [pc, #64]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80074a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ac:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	490c      	ldr	r1, [pc, #48]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074c8:	4b07      	ldr	r3, [pc, #28]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80074ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d6:	4904      	ldr	r1, [pc, #16]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3720      	adds	r7, #32
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	40023800 	.word	0x40023800

080074ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80074f4:	2300      	movs	r3, #0
 80074f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d003      	beq.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800750a:	2b02      	cmp	r3, #2
 800750c:	f000 8098 	beq.w	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8007510:	e12d      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007512:	4b9a      	ldr	r3, [pc, #616]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007514:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007518:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800751c:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007524:	d00c      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8007526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800752a:	d802      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8007530:	e082      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007532:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007536:	d047      	beq.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8007538:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800753c:	d06f      	beq.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800753e:	e07b      	b.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007540:	4b8f      	ldr	r3, [pc, #572]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007542:	617b      	str	r3, [r7, #20]
          break;
 8007544:	e07b      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007546:	4b8d      	ldr	r3, [pc, #564]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800754c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007554:	d109      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007556:	4b89      	ldr	r3, [pc, #548]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800755c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007560:	4a87      	ldr	r2, [pc, #540]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007562:	fbb2 f3f3 	udiv	r3, r2, r3
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	e019      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800756a:	4b84      	ldr	r3, [pc, #528]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007576:	d109      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007578:	4b80      	ldr	r3, [pc, #512]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800757a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007582:	4a80      	ldr	r2, [pc, #512]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007584:	fbb2 f3f3 	udiv	r3, r2, r3
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	e008      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800758c:	4b7b      	ldr	r3, [pc, #492]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800758e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007596:	4a7c      	ldr	r2, [pc, #496]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007598:	fbb2 f3f3 	udiv	r3, r2, r3
 800759c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800759e:	4b77      	ldr	r3, [pc, #476]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80075a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a4:	099b      	lsrs	r3, r3, #6
 80075a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	fb02 f303 	mul.w	r3, r2, r3
 80075b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80075b2:	4b72      	ldr	r3, [pc, #456]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80075b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075b8:	0f1b      	lsrs	r3, r3, #28
 80075ba:	f003 0307 	and.w	r3, r3, #7
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c4:	617b      	str	r3, [r7, #20]
          break;
 80075c6:	e03a      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80075c8:	4b6c      	ldr	r3, [pc, #432]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075d4:	d108      	bne.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075d6:	4b69      	ldr	r3, [pc, #420]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075de:	4a69      	ldr	r2, [pc, #420]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80075e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	e007      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80075e8:	4b64      	ldr	r3, [pc, #400]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075f0:	4a65      	ldr	r2, [pc, #404]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80075f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f6:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80075f8:	4b60      	ldr	r3, [pc, #384]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	099b      	lsrs	r3, r3, #6
 80075fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	fb02 f303 	mul.w	r3, r2, r3
 8007608:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800760a:	4b5c      	ldr	r3, [pc, #368]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	0f1b      	lsrs	r3, r3, #28
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	fbb2 f3f3 	udiv	r3, r2, r3
 800761a:	617b      	str	r3, [r7, #20]
          break;
 800761c:	e00f      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800761e:	4b57      	ldr	r3, [pc, #348]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800762a:	d102      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 800762c:	4b55      	ldr	r3, [pc, #340]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800762e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007630:	e005      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8007632:	4b55      	ldr	r3, [pc, #340]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007634:	617b      	str	r3, [r7, #20]
          break;
 8007636:	e002      	b.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
          break;
 800763c:	bf00      	nop
        }
      }
      break;
 800763e:	e096      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007640:	4b4e      	ldr	r3, [pc, #312]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007646:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800764a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007652:	d00c      	beq.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8007654:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007658:	d802      	bhi.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800765e:	e082      	b.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8007660:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007664:	d047      	beq.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8007666:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800766a:	d06f      	beq.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800766c:	e07b      	b.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800766e:	4b44      	ldr	r3, [pc, #272]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007670:	617b      	str	r3, [r7, #20]
          break;
 8007672:	e07b      	b.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007674:	4b41      	ldr	r3, [pc, #260]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800767a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800767e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007682:	d109      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007684:	4b3d      	ldr	r3, [pc, #244]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007686:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800768e:	4a3c      	ldr	r2, [pc, #240]	; (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007690:	fbb2 f3f3 	udiv	r3, r2, r3
 8007694:	613b      	str	r3, [r7, #16]
 8007696:	e019      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007698:	4b38      	ldr	r3, [pc, #224]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076a4:	d109      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80076a6:	4b35      	ldr	r3, [pc, #212]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076b0:	4a34      	ldr	r2, [pc, #208]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80076b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	e008      	b.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80076ba:	4b30      	ldr	r3, [pc, #192]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80076bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076c4:	4a30      	ldr	r2, [pc, #192]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80076c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ca:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80076cc:	4b2b      	ldr	r3, [pc, #172]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80076ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076d2:	099b      	lsrs	r3, r3, #6
 80076d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	fb02 f303 	mul.w	r3, r2, r3
 80076de:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80076e0:	4b26      	ldr	r3, [pc, #152]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80076e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076e6:	0f1b      	lsrs	r3, r3, #28
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f2:	617b      	str	r3, [r7, #20]
          break;
 80076f4:	e03a      	b.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80076f6:	4b21      	ldr	r3, [pc, #132]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007702:	d108      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800770c:	4a1d      	ldr	r2, [pc, #116]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800770e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	e007      	b.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007716:	4b19      	ldr	r3, [pc, #100]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800771e:	4a1a      	ldr	r2, [pc, #104]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007720:	fbb2 f3f3 	udiv	r3, r2, r3
 8007724:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007726:	4b15      	ldr	r3, [pc, #84]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	099b      	lsrs	r3, r3, #6
 800772c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	fb02 f303 	mul.w	r3, r2, r3
 8007736:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007738:	4b10      	ldr	r3, [pc, #64]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	0f1b      	lsrs	r3, r3, #28
 800773e:	f003 0307 	and.w	r3, r3, #7
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	fbb2 f3f3 	udiv	r3, r2, r3
 8007748:	617b      	str	r3, [r7, #20]
          break;
 800774a:	e00f      	b.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800774c:	4b0b      	ldr	r3, [pc, #44]	; (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007758:	d102      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 800775a:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800775c:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 800775e:	e005      	b.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007762:	617b      	str	r3, [r7, #20]
          break;
 8007764:	e002      	b.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	617b      	str	r3, [r7, #20]
          break;
 800776a:	bf00      	nop
        }
      }
      break;
 800776c:	bf00      	nop
    }
  }
  return frequency;
 800776e:	697b      	ldr	r3, [r7, #20]
}
 8007770:	4618      	mov	r0, r3
 8007772:	371c      	adds	r7, #28
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	40023800 	.word	0x40023800
 8007780:	00bb8000 	.word	0x00bb8000
 8007784:	017d7840 	.word	0x017d7840
 8007788:	00f42400 	.word	0x00f42400

0800778c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d075      	beq.n	8007890 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80077a4:	4ba2      	ldr	r3, [pc, #648]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f003 030c 	and.w	r3, r3, #12
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d00c      	beq.n	80077ca <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077b0:	4b9f      	ldr	r3, [pc, #636]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d112      	bne.n	80077e2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077bc:	4b9c      	ldr	r3, [pc, #624]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077c8:	d10b      	bne.n	80077e2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077ca:	4b99      	ldr	r3, [pc, #612]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d05b      	beq.n	800788e <HAL_RCC_OscConfig+0x102>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d157      	bne.n	800788e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e20b      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ea:	d106      	bne.n	80077fa <HAL_RCC_OscConfig+0x6e>
 80077ec:	4b90      	ldr	r3, [pc, #576]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a8f      	ldr	r2, [pc, #572]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80077f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	e01d      	b.n	8007836 <HAL_RCC_OscConfig+0xaa>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007802:	d10c      	bne.n	800781e <HAL_RCC_OscConfig+0x92>
 8007804:	4b8a      	ldr	r3, [pc, #552]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a89      	ldr	r2, [pc, #548]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 800780a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	4b87      	ldr	r3, [pc, #540]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a86      	ldr	r2, [pc, #536]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	e00b      	b.n	8007836 <HAL_RCC_OscConfig+0xaa>
 800781e:	4b84      	ldr	r3, [pc, #528]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a83      	ldr	r2, [pc, #524]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	4b81      	ldr	r3, [pc, #516]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a80      	ldr	r2, [pc, #512]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007834:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d013      	beq.n	8007866 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800783e:	f7fb fcdb 	bl	80031f8 <HAL_GetTick>
 8007842:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007844:	e008      	b.n	8007858 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007846:	f7fb fcd7 	bl	80031f8 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	2b64      	cmp	r3, #100	; 0x64
 8007852:	d901      	bls.n	8007858 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007854:	2303      	movs	r3, #3
 8007856:	e1d0      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007858:	4b75      	ldr	r3, [pc, #468]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0f0      	beq.n	8007846 <HAL_RCC_OscConfig+0xba>
 8007864:	e014      	b.n	8007890 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007866:	f7fb fcc7 	bl	80031f8 <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800786c:	e008      	b.n	8007880 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800786e:	f7fb fcc3 	bl	80031f8 <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b64      	cmp	r3, #100	; 0x64
 800787a:	d901      	bls.n	8007880 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e1bc      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007880:	4b6b      	ldr	r3, [pc, #428]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f0      	bne.n	800786e <HAL_RCC_OscConfig+0xe2>
 800788c:	e000      	b.n	8007890 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800788e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d063      	beq.n	8007964 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800789c:	4b64      	ldr	r3, [pc, #400]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	f003 030c 	and.w	r3, r3, #12
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078a8:	4b61      	ldr	r3, [pc, #388]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80078b0:	2b08      	cmp	r3, #8
 80078b2:	d11c      	bne.n	80078ee <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078b4:	4b5e      	ldr	r3, [pc, #376]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d116      	bne.n	80078ee <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078c0:	4b5b      	ldr	r3, [pc, #364]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RCC_OscConfig+0x14c>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d001      	beq.n	80078d8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e190      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078d8:	4b55      	ldr	r3, [pc, #340]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	4952      	ldr	r1, [pc, #328]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ec:	e03a      	b.n	8007964 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d020      	beq.n	8007938 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078f6:	4b4f      	ldr	r3, [pc, #316]	; (8007a34 <HAL_RCC_OscConfig+0x2a8>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7fb fc7c 	bl	80031f8 <HAL_GetTick>
 8007900:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007902:	e008      	b.n	8007916 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007904:	f7fb fc78 	bl	80031f8 <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d901      	bls.n	8007916 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007912:	2303      	movs	r3, #3
 8007914:	e171      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007916:	4b46      	ldr	r3, [pc, #280]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0f0      	beq.n	8007904 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007922:	4b43      	ldr	r3, [pc, #268]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	493f      	ldr	r1, [pc, #252]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007932:	4313      	orrs	r3, r2
 8007934:	600b      	str	r3, [r1, #0]
 8007936:	e015      	b.n	8007964 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007938:	4b3e      	ldr	r3, [pc, #248]	; (8007a34 <HAL_RCC_OscConfig+0x2a8>)
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793e:	f7fb fc5b 	bl	80031f8 <HAL_GetTick>
 8007942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007944:	e008      	b.n	8007958 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007946:	f7fb fc57 	bl	80031f8 <HAL_GetTick>
 800794a:	4602      	mov	r2, r0
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	1ad3      	subs	r3, r2, r3
 8007950:	2b02      	cmp	r3, #2
 8007952:	d901      	bls.n	8007958 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e150      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007958:	4b35      	ldr	r3, [pc, #212]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1f0      	bne.n	8007946 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b00      	cmp	r3, #0
 800796e:	d030      	beq.n	80079d2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d016      	beq.n	80079a6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007978:	4b2f      	ldr	r3, [pc, #188]	; (8007a38 <HAL_RCC_OscConfig+0x2ac>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800797e:	f7fb fc3b 	bl	80031f8 <HAL_GetTick>
 8007982:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007984:	e008      	b.n	8007998 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007986:	f7fb fc37 	bl	80031f8 <HAL_GetTick>
 800798a:	4602      	mov	r2, r0
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	2b02      	cmp	r3, #2
 8007992:	d901      	bls.n	8007998 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007994:	2303      	movs	r3, #3
 8007996:	e130      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007998:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 800799a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0f0      	beq.n	8007986 <HAL_RCC_OscConfig+0x1fa>
 80079a4:	e015      	b.n	80079d2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079a6:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <HAL_RCC_OscConfig+0x2ac>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ac:	f7fb fc24 	bl	80031f8 <HAL_GetTick>
 80079b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079b4:	f7fb fc20 	bl	80031f8 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d901      	bls.n	80079c6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e119      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079c6:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80079c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f0      	bne.n	80079b4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 809f 	beq.w	8007b1e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079e0:	2300      	movs	r3, #0
 80079e2:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079e4:	4b12      	ldr	r3, [pc, #72]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80079e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10f      	bne.n	8007a10 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079f0:	2300      	movs	r3, #0
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	4a0d      	ldr	r2, [pc, #52]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 80079fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079fe:	6413      	str	r3, [r2, #64]	; 0x40
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <HAL_RCC_OscConfig+0x2a4>)
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a10:	4b0a      	ldr	r3, [pc, #40]	; (8007a3c <HAL_RCC_OscConfig+0x2b0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d120      	bne.n	8007a5e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a1c:	4b07      	ldr	r3, [pc, #28]	; (8007a3c <HAL_RCC_OscConfig+0x2b0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a06      	ldr	r2, [pc, #24]	; (8007a3c <HAL_RCC_OscConfig+0x2b0>)
 8007a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a28:	f7fb fbe6 	bl	80031f8 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a2e:	e010      	b.n	8007a52 <HAL_RCC_OscConfig+0x2c6>
 8007a30:	40023800 	.word	0x40023800
 8007a34:	42470000 	.word	0x42470000
 8007a38:	42470e80 	.word	0x42470e80
 8007a3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a40:	f7fb fbda 	bl	80031f8 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e0d3      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a52:	4b6c      	ldr	r3, [pc, #432]	; (8007c04 <HAL_RCC_OscConfig+0x478>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d0f0      	beq.n	8007a40 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d106      	bne.n	8007a74 <HAL_RCC_OscConfig+0x2e8>
 8007a66:	4b68      	ldr	r3, [pc, #416]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6a:	4a67      	ldr	r2, [pc, #412]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007a6c:	f043 0301 	orr.w	r3, r3, #1
 8007a70:	6713      	str	r3, [r2, #112]	; 0x70
 8007a72:	e01c      	b.n	8007aae <HAL_RCC_OscConfig+0x322>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	2b05      	cmp	r3, #5
 8007a7a:	d10c      	bne.n	8007a96 <HAL_RCC_OscConfig+0x30a>
 8007a7c:	4b62      	ldr	r3, [pc, #392]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a80:	4a61      	ldr	r2, [pc, #388]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007a82:	f043 0304 	orr.w	r3, r3, #4
 8007a86:	6713      	str	r3, [r2, #112]	; 0x70
 8007a88:	4b5f      	ldr	r3, [pc, #380]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a8c:	4a5e      	ldr	r2, [pc, #376]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007a8e:	f043 0301 	orr.w	r3, r3, #1
 8007a92:	6713      	str	r3, [r2, #112]	; 0x70
 8007a94:	e00b      	b.n	8007aae <HAL_RCC_OscConfig+0x322>
 8007a96:	4b5c      	ldr	r3, [pc, #368]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9a:	4a5b      	ldr	r2, [pc, #364]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8007aa2:	4b59      	ldr	r3, [pc, #356]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa6:	4a58      	ldr	r2, [pc, #352]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007aa8:	f023 0304 	bic.w	r3, r3, #4
 8007aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d015      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ab6:	f7fb fb9f 	bl	80031f8 <HAL_GetTick>
 8007aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007abc:	e00a      	b.n	8007ad4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007abe:	f7fb fb9b 	bl	80031f8 <HAL_GetTick>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	1ad3      	subs	r3, r2, r3
 8007ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d901      	bls.n	8007ad4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e092      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ad4:	4b4c      	ldr	r3, [pc, #304]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d0ee      	beq.n	8007abe <HAL_RCC_OscConfig+0x332>
 8007ae0:	e014      	b.n	8007b0c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae2:	f7fb fb89 	bl	80031f8 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ae8:	e00a      	b.n	8007b00 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aea:	f7fb fb85 	bl	80031f8 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d901      	bls.n	8007b00 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e07c      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b00:	4b41      	ldr	r3, [pc, #260]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1ee      	bne.n	8007aea <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d105      	bne.n	8007b1e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b12:	4b3d      	ldr	r3, [pc, #244]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b16:	4a3c      	ldr	r2, [pc, #240]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d068      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b26:	4b38      	ldr	r3, [pc, #224]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f003 030c 	and.w	r3, r3, #12
 8007b2e:	2b08      	cmp	r3, #8
 8007b30:	d060      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d145      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b3a:	4b34      	ldr	r3, [pc, #208]	; (8007c0c <HAL_RCC_OscConfig+0x480>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b40:	f7fb fb5a 	bl	80031f8 <HAL_GetTick>
 8007b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b46:	e008      	b.n	8007b5a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b48:	f7fb fb56 	bl	80031f8 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d901      	bls.n	8007b5a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e04f      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b5a:	4b2b      	ldr	r3, [pc, #172]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1f0      	bne.n	8007b48 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69da      	ldr	r2, [r3, #28]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	019b      	lsls	r3, r3, #6
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	041b      	lsls	r3, r3, #16
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b88:	061b      	lsls	r3, r3, #24
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b90:	071b      	lsls	r3, r3, #28
 8007b92:	491d      	ldr	r1, [pc, #116]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b98:	4b1c      	ldr	r3, [pc, #112]	; (8007c0c <HAL_RCC_OscConfig+0x480>)
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9e:	f7fb fb2b 	bl	80031f8 <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ba6:	f7fb fb27 	bl	80031f8 <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e020      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bb8:	4b13      	ldr	r3, [pc, #76]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d0f0      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x41a>
 8007bc4:	e018      	b.n	8007bf8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bc6:	4b11      	ldr	r3, [pc, #68]	; (8007c0c <HAL_RCC_OscConfig+0x480>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bcc:	f7fb fb14 	bl	80031f8 <HAL_GetTick>
 8007bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bd2:	e008      	b.n	8007be6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bd4:	f7fb fb10 	bl	80031f8 <HAL_GetTick>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	1ad3      	subs	r3, r2, r3
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d901      	bls.n	8007be6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e009      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007be6:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <HAL_RCC_OscConfig+0x47c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1f0      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x448>
 8007bf2:	e001      	b.n	8007bf8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e000      	b.n	8007bfa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3718      	adds	r7, #24
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40007000 	.word	0x40007000
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	42470060 	.word	0x42470060

08007c10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e022      	b.n	8007c68 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d105      	bne.n	8007c3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7f9 fef7 	bl	8001a28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f814 	bl	8007c70 <HAL_SD_InitCard>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e00a      	b.n	8007c68 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007c70:	b5b0      	push	{r4, r5, r7, lr}
 8007c72:	b08e      	sub	sp, #56	; 0x38
 8007c74:	af04      	add	r7, sp, #16
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007c8c:	2376      	movs	r3, #118	; 0x76
 8007c8e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681d      	ldr	r5, [r3, #0]
 8007c94:	466c      	mov	r4, sp
 8007c96:	f107 0314 	add.w	r3, r7, #20
 8007c9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ca2:	f107 0308 	add.w	r3, r7, #8
 8007ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ca8:	4628      	mov	r0, r5
 8007caa:	f002 f95b 	bl	8009f64 <SDIO_Init>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e031      	b.n	8007d24 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007cc0:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <HAL_SD_InitCard+0xbc>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f002 f982 	bl	8009fd4 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007cd0:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <HAL_SD_InitCard+0xbc>)
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fb18 	bl	800830c <SD_PowerON>
 8007cdc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00b      	beq.n	8007cfc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf0:	6a3b      	ldr	r3, [r7, #32]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e013      	b.n	8007d24 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa37 	bl	8008170 <SD_InitCard>
 8007d02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00b      	beq.n	8007d22 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3728      	adds	r7, #40	; 0x28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8007d2c:	422580a0 	.word	0x422580a0

08007d30 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d3e:	0f9b      	lsrs	r3, r3, #30
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d4a:	0e9b      	lsrs	r3, r3, #26
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d5c:	0e1b      	lsrs	r3, r3, #24
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 0303 	and.w	r3, r3, #3
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d6e:	0c1b      	lsrs	r3, r3, #16
 8007d70:	b2da      	uxtb	r2, r3
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d90:	0d1b      	lsrs	r3, r3, #20
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9c:	0c1b      	lsrs	r3, r3, #16
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 030f 	and.w	r3, r3, #15
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dae:	0bdb      	lsrs	r3, r3, #15
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 0301 	and.w	r3, r3, #1
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dc0:	0b9b      	lsrs	r3, r3, #14
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd2:	0b5b      	lsrs	r3, r3, #13
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de4:	0b1b      	lsrs	r3, r3, #12
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2200      	movs	r2, #0
 8007df6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d163      	bne.n	8007ec8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e04:	009a      	lsls	r2, r3, #2
 8007e06:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007e10:	0f92      	lsrs	r2, r2, #30
 8007e12:	431a      	orrs	r2, r3
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1c:	0edb      	lsrs	r3, r3, #27
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	f003 0307 	and.w	r3, r3, #7
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2e:	0e1b      	lsrs	r3, r3, #24
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e40:	0d5b      	lsrs	r3, r3, #21
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	b2da      	uxtb	r2, r3
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e52:	0c9b      	lsrs	r3, r3, #18
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	f003 0307 	and.w	r3, r3, #7
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e64:	0bdb      	lsrs	r3, r3, #15
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	1c5a      	adds	r2, r3, #1
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	7e1b      	ldrb	r3, [r3, #24]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	3302      	adds	r3, #2
 8007e88:	2201      	movs	r2, #1
 8007e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e92:	fb02 f203 	mul.w	r2, r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	7a1b      	ldrb	r3, [r3, #8]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 030f 	and.w	r3, r3, #15
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007eb4:	0a52      	lsrs	r2, r2, #9
 8007eb6:	fb02 f203 	mul.w	r2, r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ec4:	661a      	str	r2, [r3, #96]	; 0x60
 8007ec6:	e031      	b.n	8007f2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d11d      	bne.n	8007f0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed4:	041b      	lsls	r3, r3, #16
 8007ed6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ede:	0c1b      	lsrs	r3, r3, #16
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	3301      	adds	r3, #1
 8007eec:	029a      	lsls	r2, r3, #10
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f00:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	661a      	str	r2, [r3, #96]	; 0x60
 8007f0a:	e00f      	b.n	8007f2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a58      	ldr	r2, [pc, #352]	; (8008074 <HAL_SD_GetCardCSD+0x344>)
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e09d      	b.n	8008068 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f30:	0b9b      	lsrs	r3, r3, #14
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f42:	09db      	lsrs	r3, r3, #7
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f64:	0fdb      	lsrs	r3, r3, #31
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f70:	0f5b      	lsrs	r3, r3, #29
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0303 	and.w	r3, r3, #3
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f82:	0e9b      	lsrs	r3, r3, #26
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f94:	0d9b      	lsrs	r3, r3, #22
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa6:	0d5b      	lsrs	r3, r3, #21
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	0bdb      	lsrs	r3, r3, #15
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	0b9b      	lsrs	r3, r3, #14
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	0b5b      	lsrs	r3, r3, #13
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008012:	0b1b      	lsrs	r3, r3, #12
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	b2da      	uxtb	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008026:	0a9b      	lsrs	r3, r3, #10
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	085b      	lsrs	r3, r3, #1
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008056:	b2da      	uxtb	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	004005ff 	.word	0x004005ff

08008078 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008078:	b5b0      	push	{r4, r5, r7, lr}
 800807a:	b08e      	sub	sp, #56	; 0x38
 800807c:	af04      	add	r7, sp, #16
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2203      	movs	r2, #3
 8008086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808e:	2b03      	cmp	r3, #3
 8008090:	d02e      	beq.n	80080f0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008098:	d106      	bne.n	80080a8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
 80080a6:	e029      	b.n	80080fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ae:	d10a      	bne.n	80080c6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f9b9 	bl	8008428 <SD_WideBus_Enable>
 80080b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
 80080c4:	e01a      	b.n	80080fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10a      	bne.n	80080e2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9f6 	bl	80084be <SD_WideBus_Disable>
 80080d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	431a      	orrs	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	639a      	str	r2, [r3, #56]	; 0x38
 80080e0:	e00c      	b.n	80080fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	639a      	str	r2, [r3, #56]	; 0x38
 80080ee:	e005      	b.n	80080fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	2b00      	cmp	r3, #0
 8008102:	d009      	beq.n	8008118 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a18      	ldr	r2, [pc, #96]	; (800816c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e024      	b.n	8008162 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681d      	ldr	r5, [r3, #0]
 800813e:	466c      	mov	r4, sp
 8008140:	f107 0318 	add.w	r3, r7, #24
 8008144:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800814c:	f107 030c 	add.w	r3, r7, #12
 8008150:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008152:	4628      	mov	r0, r5
 8008154:	f001 ff06 	bl	8009f64 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3728      	adds	r7, #40	; 0x28
 8008166:	46bd      	mov	sp, r7
 8008168:	bdb0      	pop	{r4, r5, r7, pc}
 800816a:	bf00      	nop
 800816c:	004005ff 	.word	0x004005ff

08008170 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008170:	b5b0      	push	{r4, r5, r7, lr}
 8008172:	b094      	sub	sp, #80	; 0x50
 8008174:	af04      	add	r7, sp, #16
 8008176:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008178:	2301      	movs	r3, #1
 800817a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4618      	mov	r0, r3
 8008182:	f001 ff36 	bl	8009ff2 <SDIO_GetPowerState>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d102      	bne.n	8008192 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800818c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008190:	e0b7      	b.n	8008302 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008196:	2b03      	cmp	r3, #3
 8008198:	d02f      	beq.n	80081fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4618      	mov	r0, r3
 80081a0:	f002 f8b5 	bl	800a30e <SDMMC_CmdSendCID>
 80081a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80081a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80081ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ae:	e0a8      	b.n	8008302 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2100      	movs	r1, #0
 80081b6:	4618      	mov	r0, r3
 80081b8:	f001 ff60 	bl	800a07c <SDIO_GetResponse>
 80081bc:	4602      	mov	r2, r0
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2104      	movs	r1, #4
 80081c8:	4618      	mov	r0, r3
 80081ca:	f001 ff57 	bl	800a07c <SDIO_GetResponse>
 80081ce:	4602      	mov	r2, r0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2108      	movs	r1, #8
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 ff4e 	bl	800a07c <SDIO_GetResponse>
 80081e0:	4602      	mov	r2, r0
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	210c      	movs	r1, #12
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 ff45 	bl	800a07c <SDIO_GetResponse>
 80081f2:	4602      	mov	r2, r0
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fe:	2b03      	cmp	r3, #3
 8008200:	d00d      	beq.n	800821e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f107 020e 	add.w	r2, r7, #14
 800820a:	4611      	mov	r1, r2
 800820c:	4618      	mov	r0, r3
 800820e:	f002 f8bb 	bl	800a388 <SDMMC_CmdSetRelAdd>
 8008212:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <SD_InitCard+0xae>
    {
      return errorstate;
 800821a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800821c:	e071      	b.n	8008302 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008222:	2b03      	cmp	r3, #3
 8008224:	d036      	beq.n	8008294 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008226:	89fb      	ldrh	r3, [r7, #14]
 8008228:	461a      	mov	r2, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008236:	041b      	lsls	r3, r3, #16
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f002 f885 	bl	800a34a <SDMMC_CmdSendCSD>
 8008240:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800824a:	e05a      	b.n	8008302 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2100      	movs	r1, #0
 8008252:	4618      	mov	r0, r3
 8008254:	f001 ff12 	bl	800a07c <SDIO_GetResponse>
 8008258:	4602      	mov	r2, r0
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2104      	movs	r1, #4
 8008264:	4618      	mov	r0, r3
 8008266:	f001 ff09 	bl	800a07c <SDIO_GetResponse>
 800826a:	4602      	mov	r2, r0
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2108      	movs	r1, #8
 8008276:	4618      	mov	r0, r3
 8008278:	f001 ff00 	bl	800a07c <SDIO_GetResponse>
 800827c:	4602      	mov	r2, r0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	210c      	movs	r1, #12
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fef7 	bl	800a07c <SDIO_GetResponse>
 800828e:	4602      	mov	r2, r0
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2104      	movs	r1, #4
 800829a:	4618      	mov	r0, r3
 800829c:	f001 feee 	bl	800a07c <SDIO_GetResponse>
 80082a0:	4603      	mov	r3, r0
 80082a2:	0d1a      	lsrs	r2, r3, #20
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80082a8:	f107 0310 	add.w	r3, r7, #16
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff fd3e 	bl	8007d30 <HAL_SD_GetCardCSD>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082be:	e020      	b.n	8008302 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6819      	ldr	r1, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c8:	041b      	lsls	r3, r3, #16
 80082ca:	f04f 0400 	mov.w	r4, #0
 80082ce:	461a      	mov	r2, r3
 80082d0:	4623      	mov	r3, r4
 80082d2:	4608      	mov	r0, r1
 80082d4:	f001 ff33 	bl	800a13e <SDMMC_CmdSelDesel>
 80082d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80082da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <SD_InitCard+0x174>
  {
    return errorstate;
 80082e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e2:	e00e      	b.n	8008302 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681d      	ldr	r5, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	466c      	mov	r4, sp
 80082ec:	f103 0210 	add.w	r2, r3, #16
 80082f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80082f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082f6:	3304      	adds	r3, #4
 80082f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082fa:	4628      	mov	r0, r5
 80082fc:	f001 fe32 	bl	8009f64 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3740      	adds	r7, #64	; 0x40
 8008306:	46bd      	mov	sp, r7
 8008308:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800830c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	2300      	movs	r3, #0
 800831e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4618      	mov	r0, r3
 8008326:	f001 ff2d 	bl	800a184 <SDMMC_CmdGoIdleState>
 800832a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	e072      	b.n	800841c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f001 ff40 	bl	800a1c0 <SDMMC_CmdOperCond>
 8008340:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00d      	beq.n	8008364 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2200      	movs	r2, #0
 800834c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f001 ff16 	bl	800a184 <SDMMC_CmdGoIdleState>
 8008358:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d004      	beq.n	800836a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	e05b      	b.n	800841c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800836e:	2b01      	cmp	r3, #1
 8008370:	d137      	bne.n	80083e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2100      	movs	r1, #0
 8008378:	4618      	mov	r0, r3
 800837a:	f001 ff40 	bl	800a1fe <SDMMC_CmdAppCommand>
 800837e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d02d      	beq.n	80083e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008386:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800838a:	e047      	b.n	800841c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2100      	movs	r1, #0
 8008392:	4618      	mov	r0, r3
 8008394:	f001 ff33 	bl	800a1fe <SDMMC_CmdAppCommand>
 8008398:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	e03b      	b.n	800841c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	491e      	ldr	r1, [pc, #120]	; (8008424 <SD_PowerON+0x118>)
 80083aa:	4618      	mov	r0, r3
 80083ac:	f001 ff49 	bl	800a242 <SDMMC_CmdAppOperCommand>
 80083b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083bc:	e02e      	b.n	800841c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2100      	movs	r1, #0
 80083c4:	4618      	mov	r0, r3
 80083c6:	f001 fe59 	bl	800a07c <SDIO_GetResponse>
 80083ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	0fdb      	lsrs	r3, r3, #31
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <SD_PowerON+0xcc>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e000      	b.n	80083da <SD_PowerON+0xce>
 80083d8:	2300      	movs	r3, #0
 80083da:	613b      	str	r3, [r7, #16]

    count++;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	3301      	adds	r3, #1
 80083e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d802      	bhi.n	80083f2 <SD_PowerON+0xe6>
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d0cc      	beq.n	800838c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d902      	bls.n	8008402 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80083fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008400:	e00c      	b.n	800841c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	645a      	str	r2, [r3, #68]	; 0x44
 8008412:	e002      	b.n	800841a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3718      	adds	r7, #24
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	c1100000 	.word	0xc1100000

08008428 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008430:	2300      	movs	r3, #0
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2100      	movs	r1, #0
 800843e:	4618      	mov	r0, r3
 8008440:	f001 fe1c 	bl	800a07c <SDIO_GetResponse>
 8008444:	4603      	mov	r3, r0
 8008446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800844e:	d102      	bne.n	8008456 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008450:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008454:	e02f      	b.n	80084b6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008456:	f107 030c 	add.w	r3, r7, #12
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f879 	bl	8008554 <SD_FindSCR>
 8008462:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	e023      	b.n	80084b6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01c      	beq.n	80084b2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008480:	041b      	lsls	r3, r3, #16
 8008482:	4619      	mov	r1, r3
 8008484:	4610      	mov	r0, r2
 8008486:	f001 feba 	bl	800a1fe <SDMMC_CmdAppCommand>
 800848a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	e00f      	b.n	80084b6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2102      	movs	r1, #2
 800849c:	4618      	mov	r0, r3
 800849e:	f001 fef3 	bl	800a288 <SDMMC_CmdBusWidth>
 80084a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	e003      	b.n	80084b6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	e001      	b.n	80084b6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80084b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b086      	sub	sp, #24
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2100      	movs	r1, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 fdd1 	bl	800a07c <SDIO_GetResponse>
 80084da:	4603      	mov	r3, r0
 80084dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084e4:	d102      	bne.n	80084ec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80084e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80084ea:	e02f      	b.n	800854c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80084ec:	f107 030c 	add.w	r3, r7, #12
 80084f0:	4619      	mov	r1, r3
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 f82e 	bl	8008554 <SD_FindSCR>
 80084f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	e023      	b.n	800854c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01c      	beq.n	8008548 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	041b      	lsls	r3, r3, #16
 8008518:	4619      	mov	r1, r3
 800851a:	4610      	mov	r0, r2
 800851c:	f001 fe6f 	bl	800a1fe <SDMMC_CmdAppCommand>
 8008520:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	e00f      	b.n	800854c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2100      	movs	r1, #0
 8008532:	4618      	mov	r0, r3
 8008534:	f001 fea8 	bl	800a288 <SDMMC_CmdBusWidth>
 8008538:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	e003      	b.n	800854c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008544:	2300      	movs	r3, #0
 8008546:	e001      	b.n	800854c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008548:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800854c:	4618      	mov	r0, r3
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008554:	b590      	push	{r4, r7, lr}
 8008556:	b08f      	sub	sp, #60	; 0x3c
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800855e:	f7fa fe4b 	bl	80031f8 <HAL_GetTick>
 8008562:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008568:	2300      	movs	r3, #0
 800856a:	60bb      	str	r3, [r7, #8]
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2108      	movs	r1, #8
 800857a:	4618      	mov	r0, r3
 800857c:	f001 fdbd 	bl	800a0fa <SDMMC_CmdBlockLength>
 8008580:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	e0a9      	b.n	80086e0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	4619      	mov	r1, r3
 8008598:	4610      	mov	r0, r2
 800859a:	f001 fe30 	bl	800a1fe <SDMMC_CmdAppCommand>
 800859e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <SD_FindSCR+0x56>
  {
    return errorstate;
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	e09a      	b.n	80086e0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295
 80085ae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80085b0:	2308      	movs	r3, #8
 80085b2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80085b4:	2330      	movs	r3, #48	; 0x30
 80085b6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80085b8:	2302      	movs	r3, #2
 80085ba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80085bc:	2300      	movs	r3, #0
 80085be:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80085c0:	2301      	movs	r3, #1
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f107 0210 	add.w	r2, r7, #16
 80085cc:	4611      	mov	r1, r2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 fd67 	bl	800a0a2 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 fe77 	bl	800a2cc <SDMMC_CmdSendSCR>
 80085de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d022      	beq.n	800862c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80085e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e8:	e07a      	b.n	80086e0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00e      	beq.n	8008616 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6819      	ldr	r1, [r3, #0]
 80085fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	f107 0208 	add.w	r2, r7, #8
 8008604:	18d4      	adds	r4, r2, r3
 8008606:	4608      	mov	r0, r1
 8008608:	f001 fcd7 	bl	8009fba <SDIO_ReadFIFO>
 800860c:	4603      	mov	r3, r0
 800860e:	6023      	str	r3, [r4, #0]
      index++;
 8008610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008612:	3301      	adds	r3, #1
 8008614:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008616:	f7fa fdef 	bl	80031f8 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d102      	bne.n	800862c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008626:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800862a:	e059      	b.n	80086e0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008632:	f240 432a 	movw	r3, #1066	; 0x42a
 8008636:	4013      	ands	r3, r2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0d6      	beq.n	80085ea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008642:	f003 0308 	and.w	r3, r3, #8
 8008646:	2b00      	cmp	r3, #0
 8008648:	d005      	beq.n	8008656 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2208      	movs	r2, #8
 8008650:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008652:	2308      	movs	r3, #8
 8008654:	e044      	b.n	80086e0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865c:	f003 0302 	and.w	r3, r3, #2
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2202      	movs	r2, #2
 800866a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800866c:	2302      	movs	r3, #2
 800866e:	e037      	b.n	80086e0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008676:	f003 0320 	and.w	r3, r3, #32
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2220      	movs	r2, #32
 8008684:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008686:	2320      	movs	r3, #32
 8008688:	e02a      	b.n	80086e0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008692:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	061a      	lsls	r2, r3, #24
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	021b      	lsls	r3, r3, #8
 800869c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	0a1b      	lsrs	r3, r3, #8
 80086a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	0e1b      	lsrs	r3, r3, #24
 80086b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80086b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b4:	601a      	str	r2, [r3, #0]
    scr++;
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	3304      	adds	r3, #4
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	061a      	lsls	r2, r3, #24
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	021b      	lsls	r3, r3, #8
 80086c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	0a1b      	lsrs	r3, r3, #8
 80086ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	0e1b      	lsrs	r3, r3, #24
 80086d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	373c      	adds	r7, #60	; 0x3c
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd90      	pop	{r4, r7, pc}

080086e8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	e034      	b.n	8008768 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f7f9 fb3a 	bl	8001d8c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3308      	adds	r3, #8
 8008720:	4619      	mov	r1, r3
 8008722:	4610      	mov	r0, r2
 8008724:	f001 fb1a 	bl	8009d5c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	461a      	mov	r2, r3
 8008732:	68b9      	ldr	r1, [r7, #8]
 8008734:	f001 fb82 	bl	8009e3c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6858      	ldr	r0, [r3, #4]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	f001 fbcd 	bl	8009ee4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	6892      	ldr	r2, [r2, #8]
 8008752:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	6892      	ldr	r2, [r2, #8]
 800875e:	f041 0101 	orr.w	r1, r1, #1
 8008762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	e01d      	b.n	80087be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7f9 f9ae 	bl	8001af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f000 fb4e 	bl	8008e50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68da      	ldr	r2, [r3, #12]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f042 0201 	orr.w	r2, r2, #1
 80087dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 0307 	and.w	r3, r3, #7
 80087e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b06      	cmp	r3, #6
 80087ee:	d007      	beq.n	8008800 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0201 	orr.w	r2, r2, #1
 80087fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e01d      	b.n	800885c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008826:	b2db      	uxtb	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	d106      	bne.n	800883a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f815 	bl	8008864 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2202      	movs	r2, #2
 800883e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3304      	adds	r3, #4
 800884a:	4619      	mov	r1, r3
 800884c:	4610      	mov	r0, r2
 800884e:	f000 faff 	bl	8008e50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2201      	movs	r2, #1
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fdca 	bl	8009424 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a15      	ldr	r2, [pc, #84]	; (80088ec <HAL_TIM_PWM_Start+0x74>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d004      	beq.n	80088a4 <HAL_TIM_PWM_Start+0x2c>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a14      	ldr	r2, [pc, #80]	; (80088f0 <HAL_TIM_PWM_Start+0x78>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d101      	bne.n	80088a8 <HAL_TIM_PWM_Start+0x30>
 80088a4:	2301      	movs	r3, #1
 80088a6:	e000      	b.n	80088aa <HAL_TIM_PWM_Start+0x32>
 80088a8:	2300      	movs	r3, #0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f003 0307 	and.w	r3, r3, #7
 80088c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2b06      	cmp	r3, #6
 80088ce:	d007      	beq.n	80088e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0201 	orr.w	r2, r2, #1
 80088de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	40010000 	.word	0x40010000
 80088f0:	40010400 	.word	0x40010400

080088f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f003 0302 	and.w	r3, r3, #2
 8008906:	2b02      	cmp	r3, #2
 8008908:	d122      	bne.n	8008950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	2b02      	cmp	r3, #2
 8008916:	d11b      	bne.n	8008950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f06f 0202 	mvn.w	r2, #2
 8008920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699b      	ldr	r3, [r3, #24]
 800892e:	f003 0303 	and.w	r3, r3, #3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 fa6b 	bl	8008e12 <HAL_TIM_IC_CaptureCallback>
 800893c:	e005      	b.n	800894a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fa5d 	bl	8008dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa6e 	bl	8008e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	f003 0304 	and.w	r3, r3, #4
 800895a:	2b04      	cmp	r3, #4
 800895c:	d122      	bne.n	80089a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b04      	cmp	r3, #4
 800896a:	d11b      	bne.n	80089a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f06f 0204 	mvn.w	r2, #4
 8008974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa41 	bl	8008e12 <HAL_TIM_IC_CaptureCallback>
 8008990:	e005      	b.n	800899e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fa33 	bl	8008dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fa44 	bl	8008e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f003 0308 	and.w	r3, r3, #8
 80089ae:	2b08      	cmp	r3, #8
 80089b0:	d122      	bne.n	80089f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d11b      	bne.n	80089f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f06f 0208 	mvn.w	r2, #8
 80089c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2204      	movs	r2, #4
 80089ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	f003 0303 	and.w	r3, r3, #3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa17 	bl	8008e12 <HAL_TIM_IC_CaptureCallback>
 80089e4:	e005      	b.n	80089f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa09 	bl	8008dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa1a 	bl	8008e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f003 0310 	and.w	r3, r3, #16
 8008a02:	2b10      	cmp	r3, #16
 8008a04:	d122      	bne.n	8008a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f003 0310 	and.w	r3, r3, #16
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	d11b      	bne.n	8008a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f06f 0210 	mvn.w	r2, #16
 8008a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2208      	movs	r2, #8
 8008a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f9ed 	bl	8008e12 <HAL_TIM_IC_CaptureCallback>
 8008a38:	e005      	b.n	8008a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f9df 	bl	8008dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 f9f0 	bl	8008e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d10e      	bne.n	8008a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f003 0301 	and.w	r3, r3, #1
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d107      	bne.n	8008a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f06f 0201 	mvn.w	r2, #1
 8008a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7f8 fba8 	bl	80011c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a82:	2b80      	cmp	r3, #128	; 0x80
 8008a84:	d10e      	bne.n	8008aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a90:	2b80      	cmp	r3, #128	; 0x80
 8008a92:	d107      	bne.n	8008aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fd6c 	bl	800957c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aae:	2b40      	cmp	r3, #64	; 0x40
 8008ab0:	d10e      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008abc:	2b40      	cmp	r3, #64	; 0x40
 8008abe:	d107      	bne.n	8008ad0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9b5 	bl	8008e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b20      	cmp	r3, #32
 8008adc:	d10e      	bne.n	8008afc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b20      	cmp	r3, #32
 8008aea:	d107      	bne.n	8008afc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0220 	mvn.w	r2, #32
 8008af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fd36 	bl	8009568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d101      	bne.n	8008b1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008b1a:	2302      	movs	r3, #2
 8008b1c:	e0b4      	b.n	8008c88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b0c      	cmp	r3, #12
 8008b32:	f200 809f 	bhi.w	8008c74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008b36:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008b71 	.word	0x08008b71
 8008b40:	08008c75 	.word	0x08008c75
 8008b44:	08008c75 	.word	0x08008c75
 8008b48:	08008c75 	.word	0x08008c75
 8008b4c:	08008bb1 	.word	0x08008bb1
 8008b50:	08008c75 	.word	0x08008c75
 8008b54:	08008c75 	.word	0x08008c75
 8008b58:	08008c75 	.word	0x08008c75
 8008b5c:	08008bf3 	.word	0x08008bf3
 8008b60:	08008c75 	.word	0x08008c75
 8008b64:	08008c75 	.word	0x08008c75
 8008b68:	08008c75 	.word	0x08008c75
 8008b6c:	08008c33 	.word	0x08008c33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fa0a 	bl	8008f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	699a      	ldr	r2, [r3, #24]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f042 0208 	orr.w	r2, r2, #8
 8008b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	699a      	ldr	r2, [r3, #24]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0204 	bic.w	r2, r2, #4
 8008b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6999      	ldr	r1, [r3, #24]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	691a      	ldr	r2, [r3, #16]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	430a      	orrs	r2, r1
 8008bac:	619a      	str	r2, [r3, #24]
      break;
 8008bae:	e062      	b.n	8008c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fa5a 	bl	8009070 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	699a      	ldr	r2, [r3, #24]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	699a      	ldr	r2, [r3, #24]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6999      	ldr	r1, [r3, #24]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	021a      	lsls	r2, r3, #8
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	619a      	str	r2, [r3, #24]
      break;
 8008bf0:	e041      	b.n	8008c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68b9      	ldr	r1, [r7, #8]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 faaf 	bl	800915c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	69da      	ldr	r2, [r3, #28]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f042 0208 	orr.w	r2, r2, #8
 8008c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	69da      	ldr	r2, [r3, #28]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 0204 	bic.w	r2, r2, #4
 8008c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	69d9      	ldr	r1, [r3, #28]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	430a      	orrs	r2, r1
 8008c2e:	61da      	str	r2, [r3, #28]
      break;
 8008c30:	e021      	b.n	8008c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	68b9      	ldr	r1, [r7, #8]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f000 fb03 	bl	8009244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	69da      	ldr	r2, [r3, #28]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69da      	ldr	r2, [r3, #28]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69d9      	ldr	r1, [r3, #28]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	021a      	lsls	r2, r3, #8
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	61da      	str	r2, [r3, #28]
      break;
 8008c72:	e000      	b.n	8008c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008c74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d101      	bne.n	8008ca8 <HAL_TIM_ConfigClockSource+0x18>
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	e0a6      	b.n	8008df6 <HAL_TIM_ConfigClockSource+0x166>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b40      	cmp	r3, #64	; 0x40
 8008cde:	d067      	beq.n	8008db0 <HAL_TIM_ConfigClockSource+0x120>
 8008ce0:	2b40      	cmp	r3, #64	; 0x40
 8008ce2:	d80b      	bhi.n	8008cfc <HAL_TIM_ConfigClockSource+0x6c>
 8008ce4:	2b10      	cmp	r3, #16
 8008ce6:	d073      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x140>
 8008ce8:	2b10      	cmp	r3, #16
 8008cea:	d802      	bhi.n	8008cf2 <HAL_TIM_ConfigClockSource+0x62>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d06f      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008cf0:	e078      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	d06c      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x140>
 8008cf6:	2b30      	cmp	r3, #48	; 0x30
 8008cf8:	d06a      	beq.n	8008dd0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008cfa:	e073      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008cfc:	2b70      	cmp	r3, #112	; 0x70
 8008cfe:	d00d      	beq.n	8008d1c <HAL_TIM_ConfigClockSource+0x8c>
 8008d00:	2b70      	cmp	r3, #112	; 0x70
 8008d02:	d804      	bhi.n	8008d0e <HAL_TIM_ConfigClockSource+0x7e>
 8008d04:	2b50      	cmp	r3, #80	; 0x50
 8008d06:	d033      	beq.n	8008d70 <HAL_TIM_ConfigClockSource+0xe0>
 8008d08:	2b60      	cmp	r3, #96	; 0x60
 8008d0a:	d041      	beq.n	8008d90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008d0c:	e06a      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d12:	d066      	beq.n	8008de2 <HAL_TIM_ConfigClockSource+0x152>
 8008d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d18:	d017      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008d1a:	e063      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6818      	ldr	r0, [r3, #0]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	6899      	ldr	r1, [r3, #8]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f000 fb5a 	bl	80093e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	609a      	str	r2, [r3, #8]
      break;
 8008d48:	e04c      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	6899      	ldr	r1, [r3, #8]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f000 fb43 	bl	80093e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d6c:	609a      	str	r2, [r3, #8]
      break;
 8008d6e:	e039      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	6859      	ldr	r1, [r3, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	f000 fab7 	bl	80092f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2150      	movs	r1, #80	; 0x50
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fb10 	bl	80093ae <TIM_ITRx_SetConfig>
      break;
 8008d8e:	e029      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6818      	ldr	r0, [r3, #0]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	6859      	ldr	r1, [r3, #4]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	f000 fad6 	bl	800934e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2160      	movs	r1, #96	; 0x60
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 fb00 	bl	80093ae <TIM_ITRx_SetConfig>
      break;
 8008dae:	e019      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	6859      	ldr	r1, [r3, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	f000 fa97 	bl	80092f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2140      	movs	r1, #64	; 0x40
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f000 faf0 	bl	80093ae <TIM_ITRx_SetConfig>
      break;
 8008dce:	e009      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	4610      	mov	r0, r2
 8008ddc:	f000 fae7 	bl	80093ae <TIM_ITRx_SetConfig>
      break;
 8008de0:	e000      	b.n	8008de4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008de2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b083      	sub	sp, #12
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e2e:	bf00      	nop
 8008e30:	370c      	adds	r7, #12
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e42:	bf00      	nop
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
	...

08008e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a40      	ldr	r2, [pc, #256]	; (8008f64 <TIM_Base_SetConfig+0x114>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d013      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e6e:	d00f      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a3d      	ldr	r2, [pc, #244]	; (8008f68 <TIM_Base_SetConfig+0x118>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d00b      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a3c      	ldr	r2, [pc, #240]	; (8008f6c <TIM_Base_SetConfig+0x11c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d007      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a3b      	ldr	r2, [pc, #236]	; (8008f70 <TIM_Base_SetConfig+0x120>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d003      	beq.n	8008e90 <TIM_Base_SetConfig+0x40>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a3a      	ldr	r2, [pc, #232]	; (8008f74 <TIM_Base_SetConfig+0x124>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d108      	bne.n	8008ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a2f      	ldr	r2, [pc, #188]	; (8008f64 <TIM_Base_SetConfig+0x114>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d02b      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb0:	d027      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a2c      	ldr	r2, [pc, #176]	; (8008f68 <TIM_Base_SetConfig+0x118>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d023      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a2b      	ldr	r2, [pc, #172]	; (8008f6c <TIM_Base_SetConfig+0x11c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d01f      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a2a      	ldr	r2, [pc, #168]	; (8008f70 <TIM_Base_SetConfig+0x120>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d01b      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a29      	ldr	r2, [pc, #164]	; (8008f74 <TIM_Base_SetConfig+0x124>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d017      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a28      	ldr	r2, [pc, #160]	; (8008f78 <TIM_Base_SetConfig+0x128>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d013      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a27      	ldr	r2, [pc, #156]	; (8008f7c <TIM_Base_SetConfig+0x12c>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d00f      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a26      	ldr	r2, [pc, #152]	; (8008f80 <TIM_Base_SetConfig+0x130>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d00b      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a25      	ldr	r2, [pc, #148]	; (8008f84 <TIM_Base_SetConfig+0x134>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d007      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a24      	ldr	r2, [pc, #144]	; (8008f88 <TIM_Base_SetConfig+0x138>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d003      	beq.n	8008f02 <TIM_Base_SetConfig+0xb2>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4a23      	ldr	r2, [pc, #140]	; (8008f8c <TIM_Base_SetConfig+0x13c>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d108      	bne.n	8008f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a0a      	ldr	r2, [pc, #40]	; (8008f64 <TIM_Base_SetConfig+0x114>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d003      	beq.n	8008f48 <TIM_Base_SetConfig+0xf8>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a0c      	ldr	r2, [pc, #48]	; (8008f74 <TIM_Base_SetConfig+0x124>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d103      	bne.n	8008f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	691a      	ldr	r2, [r3, #16]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	615a      	str	r2, [r3, #20]
}
 8008f56:	bf00      	nop
 8008f58:	3714      	adds	r7, #20
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	40010000 	.word	0x40010000
 8008f68:	40000400 	.word	0x40000400
 8008f6c:	40000800 	.word	0x40000800
 8008f70:	40000c00 	.word	0x40000c00
 8008f74:	40010400 	.word	0x40010400
 8008f78:	40014000 	.word	0x40014000
 8008f7c:	40014400 	.word	0x40014400
 8008f80:	40014800 	.word	0x40014800
 8008f84:	40001800 	.word	0x40001800
 8008f88:	40001c00 	.word	0x40001c00
 8008f8c:	40002000 	.word	0x40002000

08008f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b087      	sub	sp, #28
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a1b      	ldr	r3, [r3, #32]
 8008f9e:	f023 0201 	bic.w	r2, r3, #1
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a1b      	ldr	r3, [r3, #32]
 8008faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0303 	bic.w	r3, r3, #3
 8008fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f023 0302 	bic.w	r3, r3, #2
 8008fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	697a      	ldr	r2, [r7, #20]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a20      	ldr	r2, [pc, #128]	; (8009068 <TIM_OC1_SetConfig+0xd8>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d003      	beq.n	8008ff4 <TIM_OC1_SetConfig+0x64>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a1f      	ldr	r2, [pc, #124]	; (800906c <TIM_OC1_SetConfig+0xdc>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d10c      	bne.n	800900e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f023 0308 	bic.w	r3, r3, #8
 8008ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4313      	orrs	r3, r2
 8009004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f023 0304 	bic.w	r3, r3, #4
 800900c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a15      	ldr	r2, [pc, #84]	; (8009068 <TIM_OC1_SetConfig+0xd8>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d003      	beq.n	800901e <TIM_OC1_SetConfig+0x8e>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a14      	ldr	r2, [pc, #80]	; (800906c <TIM_OC1_SetConfig+0xdc>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d111      	bne.n	8009042 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800902c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	4313      	orrs	r3, r2
 8009036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4313      	orrs	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	685a      	ldr	r2, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	621a      	str	r2, [r3, #32]
}
 800905c:	bf00      	nop
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr
 8009068:	40010000 	.word	0x40010000
 800906c:	40010400 	.word	0x40010400

08009070 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009070:	b480      	push	{r7}
 8009072:	b087      	sub	sp, #28
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	f023 0210 	bic.w	r2, r3, #16
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800909e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	021b      	lsls	r3, r3, #8
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	4313      	orrs	r3, r2
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f023 0320 	bic.w	r3, r3, #32
 80090ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	011b      	lsls	r3, r3, #4
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a22      	ldr	r2, [pc, #136]	; (8009154 <TIM_OC2_SetConfig+0xe4>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d003      	beq.n	80090d8 <TIM_OC2_SetConfig+0x68>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a21      	ldr	r2, [pc, #132]	; (8009158 <TIM_OC2_SetConfig+0xe8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d10d      	bne.n	80090f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	011b      	lsls	r3, r3, #4
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a17      	ldr	r2, [pc, #92]	; (8009154 <TIM_OC2_SetConfig+0xe4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d003      	beq.n	8009104 <TIM_OC2_SetConfig+0x94>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a16      	ldr	r2, [pc, #88]	; (8009158 <TIM_OC2_SetConfig+0xe8>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d113      	bne.n	800912c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800910a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009112:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	4313      	orrs	r3, r2
 800912a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	697a      	ldr	r2, [r7, #20]
 8009144:	621a      	str	r2, [r3, #32]
}
 8009146:	bf00      	nop
 8009148:	371c      	adds	r7, #28
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	40010000 	.word	0x40010000
 8009158:	40010400 	.word	0x40010400

0800915c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a1b      	ldr	r3, [r3, #32]
 800916a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a1b      	ldr	r3, [r3, #32]
 8009176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800918a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f023 0303 	bic.w	r3, r3, #3
 8009192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	4313      	orrs	r3, r2
 800919c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	021b      	lsls	r3, r3, #8
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a21      	ldr	r2, [pc, #132]	; (800923c <TIM_OC3_SetConfig+0xe0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d003      	beq.n	80091c2 <TIM_OC3_SetConfig+0x66>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a20      	ldr	r2, [pc, #128]	; (8009240 <TIM_OC3_SetConfig+0xe4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d10d      	bne.n	80091de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	021b      	lsls	r3, r3, #8
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a16      	ldr	r2, [pc, #88]	; (800923c <TIM_OC3_SetConfig+0xe0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d003      	beq.n	80091ee <TIM_OC3_SetConfig+0x92>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a15      	ldr	r2, [pc, #84]	; (8009240 <TIM_OC3_SetConfig+0xe4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d113      	bne.n	8009216 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	011b      	lsls	r3, r3, #4
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	4313      	orrs	r3, r2
 8009214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	621a      	str	r2, [r3, #32]
}
 8009230:	bf00      	nop
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	40010000 	.word	0x40010000
 8009240:	40010400 	.word	0x40010400

08009244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800927a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	021b      	lsls	r3, r3, #8
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	4313      	orrs	r3, r2
 8009286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800928e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	031b      	lsls	r3, r3, #12
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	4313      	orrs	r3, r2
 800929a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a12      	ldr	r2, [pc, #72]	; (80092e8 <TIM_OC4_SetConfig+0xa4>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d003      	beq.n	80092ac <TIM_OC4_SetConfig+0x68>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a11      	ldr	r2, [pc, #68]	; (80092ec <TIM_OC4_SetConfig+0xa8>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d109      	bne.n	80092c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	019b      	lsls	r3, r3, #6
 80092ba:	697a      	ldr	r2, [r7, #20]
 80092bc:	4313      	orrs	r3, r2
 80092be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	68fa      	ldr	r2, [r7, #12]
 80092ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685a      	ldr	r2, [r3, #4]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	621a      	str	r2, [r3, #32]
}
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	40010000 	.word	0x40010000
 80092ec:	40010400 	.word	0x40010400

080092f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a1b      	ldr	r3, [r3, #32]
 8009306:	f023 0201 	bic.w	r2, r3, #1
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	699b      	ldr	r3, [r3, #24]
 8009312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800931a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	011b      	lsls	r3, r3, #4
 8009320:	693a      	ldr	r2, [r7, #16]
 8009322:	4313      	orrs	r3, r2
 8009324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f023 030a 	bic.w	r3, r3, #10
 800932c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	621a      	str	r2, [r3, #32]
}
 8009342:	bf00      	nop
 8009344:	371c      	adds	r7, #28
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800934e:	b480      	push	{r7}
 8009350:	b087      	sub	sp, #28
 8009352:	af00      	add	r7, sp, #0
 8009354:	60f8      	str	r0, [r7, #12]
 8009356:	60b9      	str	r1, [r7, #8]
 8009358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	f023 0210 	bic.w	r2, r3, #16
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009378:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	031b      	lsls	r3, r3, #12
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4313      	orrs	r3, r2
 8009382:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800938a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	4313      	orrs	r3, r2
 8009394:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	621a      	str	r2, [r3, #32]
}
 80093a2:	bf00      	nop
 80093a4:	371c      	adds	r7, #28
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr

080093ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093c6:	683a      	ldr	r2, [r7, #0]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	f043 0307 	orr.w	r3, r3, #7
 80093d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	609a      	str	r2, [r3, #8]
}
 80093d8:	bf00      	nop
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	021a      	lsls	r2, r3, #8
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	431a      	orrs	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4313      	orrs	r3, r2
 800940c:	697a      	ldr	r2, [r7, #20]
 800940e:	4313      	orrs	r3, r2
 8009410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	609a      	str	r2, [r3, #8]
}
 8009418:	bf00      	nop
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	f003 031f 	and.w	r3, r3, #31
 8009436:	2201      	movs	r2, #1
 8009438:	fa02 f303 	lsl.w	r3, r2, r3
 800943c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6a1a      	ldr	r2, [r3, #32]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	43db      	mvns	r3, r3
 8009446:	401a      	ands	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a1a      	ldr	r2, [r3, #32]
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	fa01 f303 	lsl.w	r3, r1, r3
 800945c:	431a      	orrs	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	621a      	str	r2, [r3, #32]
}
 8009462:	bf00      	nop
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
	...

08009470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009484:	2302      	movs	r3, #2
 8009486:	e05a      	b.n	800953e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a21      	ldr	r2, [pc, #132]	; (800954c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d022      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d4:	d01d      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a1d      	ldr	r2, [pc, #116]	; (8009550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d018      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a1b      	ldr	r2, [pc, #108]	; (8009554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d013      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a1a      	ldr	r2, [pc, #104]	; (8009558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00e      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a18      	ldr	r2, [pc, #96]	; (800955c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d009      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a17      	ldr	r2, [pc, #92]	; (8009560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d004      	beq.n	8009512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a15      	ldr	r2, [pc, #84]	; (8009564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d10c      	bne.n	800952c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	4313      	orrs	r3, r2
 8009522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800953c:	2300      	movs	r3, #0
}
 800953e:	4618      	mov	r0, r3
 8009540:	3714      	adds	r7, #20
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	40010000 	.word	0x40010000
 8009550:	40000400 	.word	0x40000400
 8009554:	40000800 	.word	0x40000800
 8009558:	40000c00 	.word	0x40000c00
 800955c:	40010400 	.word	0x40010400
 8009560:	40014000 	.word	0x40014000
 8009564:	40001800 	.word	0x40001800

08009568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009584:	bf00      	nop
 8009586:	370c      	adds	r7, #12
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e03f      	b.n	8009622 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7f8 fafa 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2224      	movs	r2, #36	; 0x24
 80095c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68da      	ldr	r2, [r3, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f829 	bl	800962c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80095e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	695a      	ldr	r2, [r3, #20]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2220      	movs	r2, #32
 8009614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2220      	movs	r2, #32
 800961c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	b085      	sub	sp, #20
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68da      	ldr	r2, [r3, #12]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689a      	ldr	r2, [r3, #8]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	431a      	orrs	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	431a      	orrs	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	4313      	orrs	r3, r2
 8009662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
 800966a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800966e:	f023 030c 	bic.w	r3, r3, #12
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	6812      	ldr	r2, [r2, #0]
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	430b      	orrs	r3, r1
 800967a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	695b      	ldr	r3, [r3, #20]
 8009682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	699a      	ldr	r2, [r3, #24]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800969a:	f040 8199 	bne.w	80099d0 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4ac6      	ldr	r2, [pc, #792]	; (80099bc <UART_SetConfig+0x390>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00f      	beq.n	80096c8 <UART_SetConfig+0x9c>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4ac4      	ldr	r2, [pc, #784]	; (80099c0 <UART_SetConfig+0x394>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00a      	beq.n	80096c8 <UART_SetConfig+0x9c>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4ac3      	ldr	r2, [pc, #780]	; (80099c4 <UART_SetConfig+0x398>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d005      	beq.n	80096c8 <UART_SetConfig+0x9c>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4ac1      	ldr	r2, [pc, #772]	; (80099c8 <UART_SetConfig+0x39c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	f040 80bd 	bne.w	8009842 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096c8:	f7fd fc3e 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 80096cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	461d      	mov	r5, r3
 80096d2:	f04f 0600 	mov.w	r6, #0
 80096d6:	46a8      	mov	r8, r5
 80096d8:	46b1      	mov	r9, r6
 80096da:	eb18 0308 	adds.w	r3, r8, r8
 80096de:	eb49 0409 	adc.w	r4, r9, r9
 80096e2:	4698      	mov	r8, r3
 80096e4:	46a1      	mov	r9, r4
 80096e6:	eb18 0805 	adds.w	r8, r8, r5
 80096ea:	eb49 0906 	adc.w	r9, r9, r6
 80096ee:	f04f 0100 	mov.w	r1, #0
 80096f2:	f04f 0200 	mov.w	r2, #0
 80096f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80096fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80096fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009702:	4688      	mov	r8, r1
 8009704:	4691      	mov	r9, r2
 8009706:	eb18 0005 	adds.w	r0, r8, r5
 800970a:	eb49 0106 	adc.w	r1, r9, r6
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	461d      	mov	r5, r3
 8009714:	f04f 0600 	mov.w	r6, #0
 8009718:	196b      	adds	r3, r5, r5
 800971a:	eb46 0406 	adc.w	r4, r6, r6
 800971e:	461a      	mov	r2, r3
 8009720:	4623      	mov	r3, r4
 8009722:	f7f6 fd7d 	bl	8000220 <__aeabi_uldivmod>
 8009726:	4603      	mov	r3, r0
 8009728:	460c      	mov	r4, r1
 800972a:	461a      	mov	r2, r3
 800972c:	4ba7      	ldr	r3, [pc, #668]	; (80099cc <UART_SetConfig+0x3a0>)
 800972e:	fba3 2302 	umull	r2, r3, r3, r2
 8009732:	095b      	lsrs	r3, r3, #5
 8009734:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	461d      	mov	r5, r3
 800973c:	f04f 0600 	mov.w	r6, #0
 8009740:	46a9      	mov	r9, r5
 8009742:	46b2      	mov	sl, r6
 8009744:	eb19 0309 	adds.w	r3, r9, r9
 8009748:	eb4a 040a 	adc.w	r4, sl, sl
 800974c:	4699      	mov	r9, r3
 800974e:	46a2      	mov	sl, r4
 8009750:	eb19 0905 	adds.w	r9, r9, r5
 8009754:	eb4a 0a06 	adc.w	sl, sl, r6
 8009758:	f04f 0100 	mov.w	r1, #0
 800975c:	f04f 0200 	mov.w	r2, #0
 8009760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009764:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009768:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800976c:	4689      	mov	r9, r1
 800976e:	4692      	mov	sl, r2
 8009770:	eb19 0005 	adds.w	r0, r9, r5
 8009774:	eb4a 0106 	adc.w	r1, sl, r6
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	461d      	mov	r5, r3
 800977e:	f04f 0600 	mov.w	r6, #0
 8009782:	196b      	adds	r3, r5, r5
 8009784:	eb46 0406 	adc.w	r4, r6, r6
 8009788:	461a      	mov	r2, r3
 800978a:	4623      	mov	r3, r4
 800978c:	f7f6 fd48 	bl	8000220 <__aeabi_uldivmod>
 8009790:	4603      	mov	r3, r0
 8009792:	460c      	mov	r4, r1
 8009794:	461a      	mov	r2, r3
 8009796:	4b8d      	ldr	r3, [pc, #564]	; (80099cc <UART_SetConfig+0x3a0>)
 8009798:	fba3 1302 	umull	r1, r3, r3, r2
 800979c:	095b      	lsrs	r3, r3, #5
 800979e:	2164      	movs	r1, #100	; 0x64
 80097a0:	fb01 f303 	mul.w	r3, r1, r3
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	3332      	adds	r3, #50	; 0x32
 80097aa:	4a88      	ldr	r2, [pc, #544]	; (80099cc <UART_SetConfig+0x3a0>)
 80097ac:	fba2 2303 	umull	r2, r3, r2, r3
 80097b0:	095b      	lsrs	r3, r3, #5
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097b8:	4498      	add	r8, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	461d      	mov	r5, r3
 80097be:	f04f 0600 	mov.w	r6, #0
 80097c2:	46a9      	mov	r9, r5
 80097c4:	46b2      	mov	sl, r6
 80097c6:	eb19 0309 	adds.w	r3, r9, r9
 80097ca:	eb4a 040a 	adc.w	r4, sl, sl
 80097ce:	4699      	mov	r9, r3
 80097d0:	46a2      	mov	sl, r4
 80097d2:	eb19 0905 	adds.w	r9, r9, r5
 80097d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80097da:	f04f 0100 	mov.w	r1, #0
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097ee:	4689      	mov	r9, r1
 80097f0:	4692      	mov	sl, r2
 80097f2:	eb19 0005 	adds.w	r0, r9, r5
 80097f6:	eb4a 0106 	adc.w	r1, sl, r6
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	461d      	mov	r5, r3
 8009800:	f04f 0600 	mov.w	r6, #0
 8009804:	196b      	adds	r3, r5, r5
 8009806:	eb46 0406 	adc.w	r4, r6, r6
 800980a:	461a      	mov	r2, r3
 800980c:	4623      	mov	r3, r4
 800980e:	f7f6 fd07 	bl	8000220 <__aeabi_uldivmod>
 8009812:	4603      	mov	r3, r0
 8009814:	460c      	mov	r4, r1
 8009816:	461a      	mov	r2, r3
 8009818:	4b6c      	ldr	r3, [pc, #432]	; (80099cc <UART_SetConfig+0x3a0>)
 800981a:	fba3 1302 	umull	r1, r3, r3, r2
 800981e:	095b      	lsrs	r3, r3, #5
 8009820:	2164      	movs	r1, #100	; 0x64
 8009822:	fb01 f303 	mul.w	r3, r1, r3
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	00db      	lsls	r3, r3, #3
 800982a:	3332      	adds	r3, #50	; 0x32
 800982c:	4a67      	ldr	r2, [pc, #412]	; (80099cc <UART_SetConfig+0x3a0>)
 800982e:	fba2 2303 	umull	r2, r3, r2, r3
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	f003 0207 	and.w	r2, r3, #7
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4442      	add	r2, r8
 800983e:	609a      	str	r2, [r3, #8]
 8009840:	e27d      	b.n	8009d3e <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009842:	f7fd fb6d 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
 8009846:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	461d      	mov	r5, r3
 800984c:	f04f 0600 	mov.w	r6, #0
 8009850:	46a8      	mov	r8, r5
 8009852:	46b1      	mov	r9, r6
 8009854:	eb18 0308 	adds.w	r3, r8, r8
 8009858:	eb49 0409 	adc.w	r4, r9, r9
 800985c:	4698      	mov	r8, r3
 800985e:	46a1      	mov	r9, r4
 8009860:	eb18 0805 	adds.w	r8, r8, r5
 8009864:	eb49 0906 	adc.w	r9, r9, r6
 8009868:	f04f 0100 	mov.w	r1, #0
 800986c:	f04f 0200 	mov.w	r2, #0
 8009870:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009874:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009878:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800987c:	4688      	mov	r8, r1
 800987e:	4691      	mov	r9, r2
 8009880:	eb18 0005 	adds.w	r0, r8, r5
 8009884:	eb49 0106 	adc.w	r1, r9, r6
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	461d      	mov	r5, r3
 800988e:	f04f 0600 	mov.w	r6, #0
 8009892:	196b      	adds	r3, r5, r5
 8009894:	eb46 0406 	adc.w	r4, r6, r6
 8009898:	461a      	mov	r2, r3
 800989a:	4623      	mov	r3, r4
 800989c:	f7f6 fcc0 	bl	8000220 <__aeabi_uldivmod>
 80098a0:	4603      	mov	r3, r0
 80098a2:	460c      	mov	r4, r1
 80098a4:	461a      	mov	r2, r3
 80098a6:	4b49      	ldr	r3, [pc, #292]	; (80099cc <UART_SetConfig+0x3a0>)
 80098a8:	fba3 2302 	umull	r2, r3, r3, r2
 80098ac:	095b      	lsrs	r3, r3, #5
 80098ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	461d      	mov	r5, r3
 80098b6:	f04f 0600 	mov.w	r6, #0
 80098ba:	46a9      	mov	r9, r5
 80098bc:	46b2      	mov	sl, r6
 80098be:	eb19 0309 	adds.w	r3, r9, r9
 80098c2:	eb4a 040a 	adc.w	r4, sl, sl
 80098c6:	4699      	mov	r9, r3
 80098c8:	46a2      	mov	sl, r4
 80098ca:	eb19 0905 	adds.w	r9, r9, r5
 80098ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80098d2:	f04f 0100 	mov.w	r1, #0
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80098e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80098e6:	4689      	mov	r9, r1
 80098e8:	4692      	mov	sl, r2
 80098ea:	eb19 0005 	adds.w	r0, r9, r5
 80098ee:	eb4a 0106 	adc.w	r1, sl, r6
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	461d      	mov	r5, r3
 80098f8:	f04f 0600 	mov.w	r6, #0
 80098fc:	196b      	adds	r3, r5, r5
 80098fe:	eb46 0406 	adc.w	r4, r6, r6
 8009902:	461a      	mov	r2, r3
 8009904:	4623      	mov	r3, r4
 8009906:	f7f6 fc8b 	bl	8000220 <__aeabi_uldivmod>
 800990a:	4603      	mov	r3, r0
 800990c:	460c      	mov	r4, r1
 800990e:	461a      	mov	r2, r3
 8009910:	4b2e      	ldr	r3, [pc, #184]	; (80099cc <UART_SetConfig+0x3a0>)
 8009912:	fba3 1302 	umull	r1, r3, r3, r2
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	2164      	movs	r1, #100	; 0x64
 800991a:	fb01 f303 	mul.w	r3, r1, r3
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	00db      	lsls	r3, r3, #3
 8009922:	3332      	adds	r3, #50	; 0x32
 8009924:	4a29      	ldr	r2, [pc, #164]	; (80099cc <UART_SetConfig+0x3a0>)
 8009926:	fba2 2303 	umull	r2, r3, r2, r3
 800992a:	095b      	lsrs	r3, r3, #5
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009932:	4498      	add	r8, r3
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	461d      	mov	r5, r3
 8009938:	f04f 0600 	mov.w	r6, #0
 800993c:	46a9      	mov	r9, r5
 800993e:	46b2      	mov	sl, r6
 8009940:	eb19 0309 	adds.w	r3, r9, r9
 8009944:	eb4a 040a 	adc.w	r4, sl, sl
 8009948:	4699      	mov	r9, r3
 800994a:	46a2      	mov	sl, r4
 800994c:	eb19 0905 	adds.w	r9, r9, r5
 8009950:	eb4a 0a06 	adc.w	sl, sl, r6
 8009954:	f04f 0100 	mov.w	r1, #0
 8009958:	f04f 0200 	mov.w	r2, #0
 800995c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009960:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009964:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009968:	4689      	mov	r9, r1
 800996a:	4692      	mov	sl, r2
 800996c:	eb19 0005 	adds.w	r0, r9, r5
 8009970:	eb4a 0106 	adc.w	r1, sl, r6
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	461d      	mov	r5, r3
 800997a:	f04f 0600 	mov.w	r6, #0
 800997e:	196b      	adds	r3, r5, r5
 8009980:	eb46 0406 	adc.w	r4, r6, r6
 8009984:	461a      	mov	r2, r3
 8009986:	4623      	mov	r3, r4
 8009988:	f7f6 fc4a 	bl	8000220 <__aeabi_uldivmod>
 800998c:	4603      	mov	r3, r0
 800998e:	460c      	mov	r4, r1
 8009990:	461a      	mov	r2, r3
 8009992:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <UART_SetConfig+0x3a0>)
 8009994:	fba3 1302 	umull	r1, r3, r3, r2
 8009998:	095b      	lsrs	r3, r3, #5
 800999a:	2164      	movs	r1, #100	; 0x64
 800999c:	fb01 f303 	mul.w	r3, r1, r3
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	3332      	adds	r3, #50	; 0x32
 80099a6:	4a09      	ldr	r2, [pc, #36]	; (80099cc <UART_SetConfig+0x3a0>)
 80099a8:	fba2 2303 	umull	r2, r3, r2, r3
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	f003 0207 	and.w	r2, r3, #7
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4442      	add	r2, r8
 80099b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80099ba:	e1c0      	b.n	8009d3e <UART_SetConfig+0x712>
 80099bc:	40011000 	.word	0x40011000
 80099c0:	40011400 	.word	0x40011400
 80099c4:	40011800 	.word	0x40011800
 80099c8:	40011c00 	.word	0x40011c00
 80099cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4adc      	ldr	r2, [pc, #880]	; (8009d48 <UART_SetConfig+0x71c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d00f      	beq.n	80099fa <UART_SetConfig+0x3ce>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4adb      	ldr	r2, [pc, #876]	; (8009d4c <UART_SetConfig+0x720>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00a      	beq.n	80099fa <UART_SetConfig+0x3ce>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4ad9      	ldr	r2, [pc, #868]	; (8009d50 <UART_SetConfig+0x724>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d005      	beq.n	80099fa <UART_SetConfig+0x3ce>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4ad8      	ldr	r2, [pc, #864]	; (8009d54 <UART_SetConfig+0x728>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	f040 80d1 	bne.w	8009b9c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 80099fa:	f7fd faa5 	bl	8006f48 <HAL_RCC_GetPCLK2Freq>
 80099fe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	469a      	mov	sl, r3
 8009a04:	f04f 0b00 	mov.w	fp, #0
 8009a08:	46d0      	mov	r8, sl
 8009a0a:	46d9      	mov	r9, fp
 8009a0c:	eb18 0308 	adds.w	r3, r8, r8
 8009a10:	eb49 0409 	adc.w	r4, r9, r9
 8009a14:	4698      	mov	r8, r3
 8009a16:	46a1      	mov	r9, r4
 8009a18:	eb18 080a 	adds.w	r8, r8, sl
 8009a1c:	eb49 090b 	adc.w	r9, r9, fp
 8009a20:	f04f 0100 	mov.w	r1, #0
 8009a24:	f04f 0200 	mov.w	r2, #0
 8009a28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009a30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009a34:	4688      	mov	r8, r1
 8009a36:	4691      	mov	r9, r2
 8009a38:	eb1a 0508 	adds.w	r5, sl, r8
 8009a3c:	eb4b 0609 	adc.w	r6, fp, r9
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	4619      	mov	r1, r3
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	f04f 0400 	mov.w	r4, #0
 8009a52:	0094      	lsls	r4, r2, #2
 8009a54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a58:	008b      	lsls	r3, r1, #2
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	4623      	mov	r3, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	4631      	mov	r1, r6
 8009a62:	f7f6 fbdd 	bl	8000220 <__aeabi_uldivmod>
 8009a66:	4603      	mov	r3, r0
 8009a68:	460c      	mov	r4, r1
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	4bba      	ldr	r3, [pc, #744]	; (8009d58 <UART_SetConfig+0x72c>)
 8009a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a72:	095b      	lsrs	r3, r3, #5
 8009a74:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	469b      	mov	fp, r3
 8009a7c:	f04f 0c00 	mov.w	ip, #0
 8009a80:	46d9      	mov	r9, fp
 8009a82:	46e2      	mov	sl, ip
 8009a84:	eb19 0309 	adds.w	r3, r9, r9
 8009a88:	eb4a 040a 	adc.w	r4, sl, sl
 8009a8c:	4699      	mov	r9, r3
 8009a8e:	46a2      	mov	sl, r4
 8009a90:	eb19 090b 	adds.w	r9, r9, fp
 8009a94:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009a98:	f04f 0100 	mov.w	r1, #0
 8009a9c:	f04f 0200 	mov.w	r2, #0
 8009aa0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009aa4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009aa8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009aac:	4689      	mov	r9, r1
 8009aae:	4692      	mov	sl, r2
 8009ab0:	eb1b 0509 	adds.w	r5, fp, r9
 8009ab4:	eb4c 060a 	adc.w	r6, ip, sl
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	4619      	mov	r1, r3
 8009abe:	f04f 0200 	mov.w	r2, #0
 8009ac2:	f04f 0300 	mov.w	r3, #0
 8009ac6:	f04f 0400 	mov.w	r4, #0
 8009aca:	0094      	lsls	r4, r2, #2
 8009acc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ad0:	008b      	lsls	r3, r1, #2
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	4623      	mov	r3, r4
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	4631      	mov	r1, r6
 8009ada:	f7f6 fba1 	bl	8000220 <__aeabi_uldivmod>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	4b9c      	ldr	r3, [pc, #624]	; (8009d58 <UART_SetConfig+0x72c>)
 8009ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8009aea:	095b      	lsrs	r3, r3, #5
 8009aec:	2164      	movs	r1, #100	; 0x64
 8009aee:	fb01 f303 	mul.w	r3, r1, r3
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	011b      	lsls	r3, r3, #4
 8009af6:	3332      	adds	r3, #50	; 0x32
 8009af8:	4a97      	ldr	r2, [pc, #604]	; (8009d58 <UART_SetConfig+0x72c>)
 8009afa:	fba2 2303 	umull	r2, r3, r2, r3
 8009afe:	095b      	lsrs	r3, r3, #5
 8009b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b04:	4498      	add	r8, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	469b      	mov	fp, r3
 8009b0a:	f04f 0c00 	mov.w	ip, #0
 8009b0e:	46d9      	mov	r9, fp
 8009b10:	46e2      	mov	sl, ip
 8009b12:	eb19 0309 	adds.w	r3, r9, r9
 8009b16:	eb4a 040a 	adc.w	r4, sl, sl
 8009b1a:	4699      	mov	r9, r3
 8009b1c:	46a2      	mov	sl, r4
 8009b1e:	eb19 090b 	adds.w	r9, r9, fp
 8009b22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b26:	f04f 0100 	mov.w	r1, #0
 8009b2a:	f04f 0200 	mov.w	r2, #0
 8009b2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b3a:	4689      	mov	r9, r1
 8009b3c:	4692      	mov	sl, r2
 8009b3e:	eb1b 0509 	adds.w	r5, fp, r9
 8009b42:	eb4c 060a 	adc.w	r6, ip, sl
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	f04f 0300 	mov.w	r3, #0
 8009b54:	f04f 0400 	mov.w	r4, #0
 8009b58:	0094      	lsls	r4, r2, #2
 8009b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b5e:	008b      	lsls	r3, r1, #2
 8009b60:	461a      	mov	r2, r3
 8009b62:	4623      	mov	r3, r4
 8009b64:	4628      	mov	r0, r5
 8009b66:	4631      	mov	r1, r6
 8009b68:	f7f6 fb5a 	bl	8000220 <__aeabi_uldivmod>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	461a      	mov	r2, r3
 8009b72:	4b79      	ldr	r3, [pc, #484]	; (8009d58 <UART_SetConfig+0x72c>)
 8009b74:	fba3 1302 	umull	r1, r3, r3, r2
 8009b78:	095b      	lsrs	r3, r3, #5
 8009b7a:	2164      	movs	r1, #100	; 0x64
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	011b      	lsls	r3, r3, #4
 8009b84:	3332      	adds	r3, #50	; 0x32
 8009b86:	4a74      	ldr	r2, [pc, #464]	; (8009d58 <UART_SetConfig+0x72c>)
 8009b88:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8c:	095b      	lsrs	r3, r3, #5
 8009b8e:	f003 020f 	and.w	r2, r3, #15
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4442      	add	r2, r8
 8009b98:	609a      	str	r2, [r3, #8]
 8009b9a:	e0d0      	b.n	8009d3e <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b9c:	f7fd f9c0 	bl	8006f20 <HAL_RCC_GetPCLK1Freq>
 8009ba0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	469a      	mov	sl, r3
 8009ba6:	f04f 0b00 	mov.w	fp, #0
 8009baa:	46d0      	mov	r8, sl
 8009bac:	46d9      	mov	r9, fp
 8009bae:	eb18 0308 	adds.w	r3, r8, r8
 8009bb2:	eb49 0409 	adc.w	r4, r9, r9
 8009bb6:	4698      	mov	r8, r3
 8009bb8:	46a1      	mov	r9, r4
 8009bba:	eb18 080a 	adds.w	r8, r8, sl
 8009bbe:	eb49 090b 	adc.w	r9, r9, fp
 8009bc2:	f04f 0100 	mov.w	r1, #0
 8009bc6:	f04f 0200 	mov.w	r2, #0
 8009bca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009bce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009bd2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009bd6:	4688      	mov	r8, r1
 8009bd8:	4691      	mov	r9, r2
 8009bda:	eb1a 0508 	adds.w	r5, sl, r8
 8009bde:	eb4b 0609 	adc.w	r6, fp, r9
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	4619      	mov	r1, r3
 8009be8:	f04f 0200 	mov.w	r2, #0
 8009bec:	f04f 0300 	mov.w	r3, #0
 8009bf0:	f04f 0400 	mov.w	r4, #0
 8009bf4:	0094      	lsls	r4, r2, #2
 8009bf6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009bfa:	008b      	lsls	r3, r1, #2
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	4623      	mov	r3, r4
 8009c00:	4628      	mov	r0, r5
 8009c02:	4631      	mov	r1, r6
 8009c04:	f7f6 fb0c 	bl	8000220 <__aeabi_uldivmod>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	4b52      	ldr	r3, [pc, #328]	; (8009d58 <UART_SetConfig+0x72c>)
 8009c10:	fba3 2302 	umull	r2, r3, r3, r2
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	469b      	mov	fp, r3
 8009c1e:	f04f 0c00 	mov.w	ip, #0
 8009c22:	46d9      	mov	r9, fp
 8009c24:	46e2      	mov	sl, ip
 8009c26:	eb19 0309 	adds.w	r3, r9, r9
 8009c2a:	eb4a 040a 	adc.w	r4, sl, sl
 8009c2e:	4699      	mov	r9, r3
 8009c30:	46a2      	mov	sl, r4
 8009c32:	eb19 090b 	adds.w	r9, r9, fp
 8009c36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009c3a:	f04f 0100 	mov.w	r1, #0
 8009c3e:	f04f 0200 	mov.w	r2, #0
 8009c42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c4e:	4689      	mov	r9, r1
 8009c50:	4692      	mov	sl, r2
 8009c52:	eb1b 0509 	adds.w	r5, fp, r9
 8009c56:	eb4c 060a 	adc.w	r6, ip, sl
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	f04f 0200 	mov.w	r2, #0
 8009c64:	f04f 0300 	mov.w	r3, #0
 8009c68:	f04f 0400 	mov.w	r4, #0
 8009c6c:	0094      	lsls	r4, r2, #2
 8009c6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c72:	008b      	lsls	r3, r1, #2
 8009c74:	461a      	mov	r2, r3
 8009c76:	4623      	mov	r3, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	f7f6 fad0 	bl	8000220 <__aeabi_uldivmod>
 8009c80:	4603      	mov	r3, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	461a      	mov	r2, r3
 8009c86:	4b34      	ldr	r3, [pc, #208]	; (8009d58 <UART_SetConfig+0x72c>)
 8009c88:	fba3 1302 	umull	r1, r3, r3, r2
 8009c8c:	095b      	lsrs	r3, r3, #5
 8009c8e:	2164      	movs	r1, #100	; 0x64
 8009c90:	fb01 f303 	mul.w	r3, r1, r3
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	011b      	lsls	r3, r3, #4
 8009c98:	3332      	adds	r3, #50	; 0x32
 8009c9a:	4a2f      	ldr	r2, [pc, #188]	; (8009d58 <UART_SetConfig+0x72c>)
 8009c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca0:	095b      	lsrs	r3, r3, #5
 8009ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ca6:	4498      	add	r8, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	469b      	mov	fp, r3
 8009cac:	f04f 0c00 	mov.w	ip, #0
 8009cb0:	46d9      	mov	r9, fp
 8009cb2:	46e2      	mov	sl, ip
 8009cb4:	eb19 0309 	adds.w	r3, r9, r9
 8009cb8:	eb4a 040a 	adc.w	r4, sl, sl
 8009cbc:	4699      	mov	r9, r3
 8009cbe:	46a2      	mov	sl, r4
 8009cc0:	eb19 090b 	adds.w	r9, r9, fp
 8009cc4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009cc8:	f04f 0100 	mov.w	r1, #0
 8009ccc:	f04f 0200 	mov.w	r2, #0
 8009cd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009cd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009cdc:	4689      	mov	r9, r1
 8009cde:	4692      	mov	sl, r2
 8009ce0:	eb1b 0509 	adds.w	r5, fp, r9
 8009ce4:	eb4c 060a 	adc.w	r6, ip, sl
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	4619      	mov	r1, r3
 8009cee:	f04f 0200 	mov.w	r2, #0
 8009cf2:	f04f 0300 	mov.w	r3, #0
 8009cf6:	f04f 0400 	mov.w	r4, #0
 8009cfa:	0094      	lsls	r4, r2, #2
 8009cfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d00:	008b      	lsls	r3, r1, #2
 8009d02:	461a      	mov	r2, r3
 8009d04:	4623      	mov	r3, r4
 8009d06:	4628      	mov	r0, r5
 8009d08:	4631      	mov	r1, r6
 8009d0a:	f7f6 fa89 	bl	8000220 <__aeabi_uldivmod>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	460c      	mov	r4, r1
 8009d12:	461a      	mov	r2, r3
 8009d14:	4b10      	ldr	r3, [pc, #64]	; (8009d58 <UART_SetConfig+0x72c>)
 8009d16:	fba3 1302 	umull	r1, r3, r3, r2
 8009d1a:	095b      	lsrs	r3, r3, #5
 8009d1c:	2164      	movs	r1, #100	; 0x64
 8009d1e:	fb01 f303 	mul.w	r3, r1, r3
 8009d22:	1ad3      	subs	r3, r2, r3
 8009d24:	011b      	lsls	r3, r3, #4
 8009d26:	3332      	adds	r3, #50	; 0x32
 8009d28:	4a0b      	ldr	r2, [pc, #44]	; (8009d58 <UART_SetConfig+0x72c>)
 8009d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009d2e:	095b      	lsrs	r3, r3, #5
 8009d30:	f003 020f 	and.w	r2, r3, #15
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4442      	add	r2, r8
 8009d3a:	609a      	str	r2, [r3, #8]
}
 8009d3c:	e7ff      	b.n	8009d3e <UART_SetConfig+0x712>
 8009d3e:	bf00      	nop
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d48:	40011000 	.word	0x40011000
 8009d4c:	40011400 	.word	0x40011400
 8009d50:	40011800 	.word	0x40011800
 8009d54:	40011c00 	.word	0x40011c00
 8009d58:	51eb851f 	.word	0x51eb851f

08009d5c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d74:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8009d76:	68fa      	ldr	r2, [r7, #12]
 8009d78:	4b2f      	ldr	r3, [pc, #188]	; (8009e38 <FSMC_NORSRAM_Init+0xdc>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009d86:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8009d8c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8009d92:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8009d98:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8009d9e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8009da4:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8009daa:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8009db0:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8009db6:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8009dbc:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8009dc2:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8009dc8:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8009dce:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	2b08      	cmp	r3, #8
 8009ddc:	d103      	bne.n	8009de6 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de4:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68f9      	ldr	r1, [r7, #12]
 8009dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dfa:	d10a      	bne.n	8009e12 <FSMC_NORSRAM_Init+0xb6>
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d006      	beq.n	8009e12 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d006      	beq.n	8009e28 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	ffc00480 	.word	0xffc00480

08009e3c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	1c5a      	adds	r2, r3, #1
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e56:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009e5e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e6a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009e72:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009e7a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009e84:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	3b02      	subs	r3, #2
 8009e8c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009e8e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009e94:	4313      	orrs	r3, r2
 8009e96:	697a      	ldr	r2, [r7, #20]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6979      	ldr	r1, [r7, #20]
 8009ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eb4:	d10e      	bne.n	8009ed4 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ebe:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	051b      	lsls	r3, r3, #20
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	371c      	adds	r7, #28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
	...

08009ee4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009efc:	d122      	bne.n	8009f44 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f06:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009f1a:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8009f22:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009f2a:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009f30:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009f32:	697a      	ldr	r2, [r7, #20]
 8009f34:	4313      	orrs	r3, r2
 8009f36:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	6979      	ldr	r1, [r7, #20]
 8009f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009f42:	e005      	b.n	8009f50 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009f4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	371c      	adds	r7, #28
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	cff00000 	.word	0xcff00000

08009f64 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009f64:	b084      	sub	sp, #16
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	f107 001c 	add.w	r0, r7, #28
 8009f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009f7a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009f7e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009f82:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009f86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009f8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009f8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009f9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	431a      	orrs	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009faa:	2300      	movs	r3, #0
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	b004      	add	sp, #16
 8009fb8:	4770      	bx	lr

08009fba <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b083      	sub	sp, #12
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr

08009fd4 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2203      	movs	r2, #3
 8009fe0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009fe2:	2002      	movs	r0, #2
 8009fe4:	f7f9 f914 	bl	8003210 <HAL_Delay>
  
  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f003 0303 	and.w	r3, r3, #3
}
 800a002:	4618      	mov	r0, r3
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a00e:	b480      	push	{r7}
 800a010:	b085      	sub	sp, #20
 800a012:	af00      	add	r7, sp, #0
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a018:	2300      	movs	r3, #0
 800a01a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a02c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a032:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a038:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68db      	ldr	r3, [r3, #12]
 800a044:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a048:	f023 030f 	bic.w	r3, r3, #15
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	431a      	orrs	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3714      	adds	r7, #20
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	b2db      	uxtb	r3, r3
}
 800a070:	4618      	mov	r0, r3
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3314      	adds	r3, #20
 800a08a:	461a      	mov	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	4413      	add	r3, r2
 800a090:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
}  
 800a096:	4618      	mov	r0, r3
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr

0800a0a2 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a0a2:	b480      	push	{r7}
 800a0a4:	b085      	sub	sp, #20
 800a0a6:	af00      	add	r7, sp, #0
 800a0a8:	6078      	str	r0, [r7, #4]
 800a0aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0c8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a0ce:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a0d4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0

}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b088      	sub	sp, #32
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a108:	2310      	movs	r3, #16
 800a10a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a118:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff ff74 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a126:	f241 3288 	movw	r2, #5000	; 0x1388
 800a12a:	2110      	movs	r1, #16
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f975 	bl	800a41c <SDMMC_GetCmdResp1>
 800a132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a134:	69fb      	ldr	r3, [r7, #28]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3720      	adds	r7, #32
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b08a      	sub	sp, #40	; 0x28
 800a142:	af00      	add	r7, sp, #0
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a14e:	2307      	movs	r3, #7
 800a150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a152:	2340      	movs	r3, #64	; 0x40
 800a154:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a156:	2300      	movs	r3, #0
 800a158:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a15e:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a160:	f107 0310 	add.w	r3, r7, #16
 800a164:	4619      	mov	r1, r3
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7ff ff51 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a170:	2107      	movs	r1, #7
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 f952 	bl	800a41c <SDMMC_GetCmdResp1>
 800a178:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3728      	adds	r7, #40	; 0x28
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a190:	2300      	movs	r3, #0
 800a192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a194:	2300      	movs	r3, #0
 800a196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a198:	2300      	movs	r3, #0
 800a19a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a19c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1a2:	f107 0308 	add.w	r3, r7, #8
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff ff30 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f90c 	bl	800a3cc <SDMMC_GetCmdError>
 800a1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a1c8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a1ce:	2308      	movs	r3, #8
 800a1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1d2:	2340      	movs	r3, #64	; 0x40
 800a1d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1e0:	f107 0308 	add.w	r3, r7, #8
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f7ff ff11 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 faf5 	bl	800a7dc <SDMMC_GetCmdResp7>
 800a1f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1f4:	69fb      	ldr	r3, [r7, #28]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3720      	adds	r7, #32
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b088      	sub	sp, #32
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a20c:	2337      	movs	r3, #55	; 0x37
 800a20e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a210:	2340      	movs	r3, #64	; 0x40
 800a212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a214:	2300      	movs	r3, #0
 800a216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a21c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a21e:	f107 0308 	add.w	r3, r7, #8
 800a222:	4619      	mov	r1, r3
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff fef2 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a22a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a22e:	2137      	movs	r1, #55	; 0x37
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 f8f3 	bl	800a41c <SDMMC_GetCmdResp1>
 800a236:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a238:	69fb      	ldr	r3, [r7, #28]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3720      	adds	r7, #32
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b088      	sub	sp, #32
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a258:	2329      	movs	r3, #41	; 0x29
 800a25a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a268:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a26a:	f107 0308 	add.w	r3, r7, #8
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff fecc 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa02 	bl	800a680 <SDMMC_GetCmdResp3>
 800a27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a27e:	69fb      	ldr	r3, [r7, #28]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a296:	2306      	movs	r3, #6
 800a298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a29a:	2340      	movs	r3, #64	; 0x40
 800a29c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2a8:	f107 0308 	add.w	r3, r7, #8
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff fead 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b8:	2106      	movs	r1, #6
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f8ae 	bl	800a41c <SDMMC_GetCmdResp1>
 800a2c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2c2:	69fb      	ldr	r3, [r7, #28]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3720      	adds	r7, #32
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a2d8:	2333      	movs	r3, #51	; 0x33
 800a2da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2dc:	2340      	movs	r3, #64	; 0x40
 800a2de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2ea:	f107 0308 	add.w	r3, r7, #8
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f7ff fe8c 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a2f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2fa:	2133      	movs	r1, #51	; 0x33
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 f88d 	bl	800a41c <SDMMC_GetCmdResp1>
 800a302:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a304:	69fb      	ldr	r3, [r7, #28]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3720      	adds	r7, #32
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b088      	sub	sp, #32
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a31a:	2302      	movs	r3, #2
 800a31c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a31e:	23c0      	movs	r3, #192	; 0xc0
 800a320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a322:	2300      	movs	r3, #0
 800a324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a32a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a32c:	f107 0308 	add.w	r3, r7, #8
 800a330:	4619      	mov	r1, r3
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff fe6b 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f95b 	bl	800a5f4 <SDMMC_GetCmdResp2>
 800a33e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a340:	69fb      	ldr	r3, [r7, #28]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3720      	adds	r7, #32
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b088      	sub	sp, #32
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a358:	2309      	movs	r3, #9
 800a35a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a35c:	23c0      	movs	r3, #192	; 0xc0
 800a35e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a360:	2300      	movs	r3, #0
 800a362:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a368:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a36a:	f107 0308 	add.w	r3, r7, #8
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7ff fe4c 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f93c 	bl	800a5f4 <SDMMC_GetCmdResp2>
 800a37c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a37e:	69fb      	ldr	r3, [r7, #28]
}
 800a380:	4618      	mov	r0, r3
 800a382:	3720      	adds	r7, #32
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b088      	sub	sp, #32
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a392:	2300      	movs	r3, #0
 800a394:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a396:	2303      	movs	r3, #3
 800a398:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a39a:	2340      	movs	r3, #64	; 0x40
 800a39c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3a8:	f107 0308 	add.w	r3, r7, #8
 800a3ac:	4619      	mov	r1, r3
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff fe2d 	bl	800a00e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	2103      	movs	r1, #3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f99b 	bl	800a6f4 <SDMMC_GetCmdResp6>
 800a3be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3c0:	69fb      	ldr	r3, [r7, #28]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3720      	adds	r7, #32
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
	...

0800a3cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a3cc:	b490      	push	{r4, r7}
 800a3ce:	b082      	sub	sp, #8
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3d4:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <SDMMC_GetCmdError+0x48>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a0f      	ldr	r2, [pc, #60]	; (800a418 <SDMMC_GetCmdError+0x4c>)
 800a3da:	fba2 2303 	umull	r2, r3, r2, r3
 800a3de:	0a5b      	lsrs	r3, r3, #9
 800a3e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a3e8:	4623      	mov	r3, r4
 800a3ea:	1e5c      	subs	r4, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d102      	bne.n	800a3f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3f4:	e009      	b.n	800a40a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d0f2      	beq.n	800a3e8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	22c5      	movs	r2, #197	; 0xc5
 800a406:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bc90      	pop	{r4, r7}
 800a412:	4770      	bx	lr
 800a414:	20000000 	.word	0x20000000
 800a418:	10624dd3 	.word	0x10624dd3

0800a41c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a41c:	b590      	push	{r4, r7, lr}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	460b      	mov	r3, r1
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a42a:	4b6f      	ldr	r3, [pc, #444]	; (800a5e8 <SDMMC_GetCmdResp1+0x1cc>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a6f      	ldr	r2, [pc, #444]	; (800a5ec <SDMMC_GetCmdResp1+0x1d0>)
 800a430:	fba2 2303 	umull	r2, r3, r2, r3
 800a434:	0a5b      	lsrs	r3, r3, #9
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a43c:	4623      	mov	r3, r4
 800a43e:	1e5c      	subs	r4, r3, #1
 800a440:	2b00      	cmp	r3, #0
 800a442:	d102      	bne.n	800a44a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a444:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a448:	e0c9      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a44e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0f0      	beq.n	800a43c <SDMMC_GetCmdResp1+0x20>
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a460:	2b00      	cmp	r3, #0
 800a462:	d1eb      	bne.n	800a43c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d004      	beq.n	800a47a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2204      	movs	r2, #4
 800a474:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a476:	2304      	movs	r3, #4
 800a478:	e0b1      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a47e:	f003 0301 	and.w	r3, r3, #1
 800a482:	2b00      	cmp	r3, #0
 800a484:	d004      	beq.n	800a490 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a48c:	2301      	movs	r3, #1
 800a48e:	e0a6      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	22c5      	movs	r2, #197	; 0xc5
 800a494:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f7ff fde3 	bl	800a062 <SDIO_GetCommandResponse>
 800a49c:	4603      	mov	r3, r0
 800a49e:	461a      	mov	r2, r3
 800a4a0:	7afb      	ldrb	r3, [r7, #11]
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d001      	beq.n	800a4aa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e099      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f7ff fde5 	bl	800a07c <SDIO_GetResponse>
 800a4b2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	4b4e      	ldr	r3, [pc, #312]	; (800a5f0 <SDMMC_GetCmdResp1+0x1d4>)
 800a4b8:	4013      	ands	r3, r2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d101      	bne.n	800a4c2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	e08d      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	da02      	bge.n	800a4ce <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a4c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a4cc:	e087      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a4d8:	2340      	movs	r3, #64	; 0x40
 800a4da:	e080      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d001      	beq.n	800a4ea <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a4e6:	2380      	movs	r3, #128	; 0x80
 800a4e8:	e079      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d002      	beq.n	800a4fa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a4f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4f8:	e071      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d002      	beq.n	800a50a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a504:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a508:	e069      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a518:	e061      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d002      	beq.n	800a52a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a524:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a528:	e059      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a538:	e051      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a540:	2b00      	cmp	r3, #0
 800a542:	d002      	beq.n	800a54a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a544:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a548:	e049      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a558:	e041      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a568:	e039      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a578:	e031      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a588:	e029      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d002      	beq.n	800a59a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a594:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a598:	e021      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a5a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a5a8:	e019      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a5b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a5b8:	e011      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a5c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a5c8:	e009      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f003 0308 	and.w	r3, r3, #8
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a5d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a5d8:	e001      	b.n	800a5de <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a5da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd90      	pop	{r4, r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000000 	.word	0x20000000
 800a5ec:	10624dd3 	.word	0x10624dd3
 800a5f0:	fdffe008 	.word	0xfdffe008

0800a5f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a5f4:	b490      	push	{r4, r7}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5fc:	4b1e      	ldr	r3, [pc, #120]	; (800a678 <SDMMC_GetCmdResp2+0x84>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a1e      	ldr	r2, [pc, #120]	; (800a67c <SDMMC_GetCmdResp2+0x88>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	0a5b      	lsrs	r3, r3, #9
 800a608:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a610:	4623      	mov	r3, r4
 800a612:	1e5c      	subs	r4, r3, #1
 800a614:	2b00      	cmp	r3, #0
 800a616:	d102      	bne.n	800a61e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a618:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a61c:	e026      	b.n	800a66c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a622:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0f0      	beq.n	800a610 <SDMMC_GetCmdResp2+0x1c>
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1eb      	bne.n	800a610 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	d004      	beq.n	800a64e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2204      	movs	r2, #4
 800a648:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a64a:	2304      	movs	r3, #4
 800a64c:	e00e      	b.n	800a66c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a652:	f003 0301 	and.w	r3, r3, #1
 800a656:	2b00      	cmp	r3, #0
 800a658:	d004      	beq.n	800a664 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a660:	2301      	movs	r3, #1
 800a662:	e003      	b.n	800a66c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	22c5      	movs	r2, #197	; 0xc5
 800a668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bc90      	pop	{r4, r7}
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	20000000 	.word	0x20000000
 800a67c:	10624dd3 	.word	0x10624dd3

0800a680 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a680:	b490      	push	{r4, r7}
 800a682:	b084      	sub	sp, #16
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a688:	4b18      	ldr	r3, [pc, #96]	; (800a6ec <SDMMC_GetCmdResp3+0x6c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a18      	ldr	r2, [pc, #96]	; (800a6f0 <SDMMC_GetCmdResp3+0x70>)
 800a68e:	fba2 2303 	umull	r2, r3, r2, r3
 800a692:	0a5b      	lsrs	r3, r3, #9
 800a694:	f241 3288 	movw	r2, #5000	; 0x1388
 800a698:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a69c:	4623      	mov	r3, r4
 800a69e:	1e5c      	subs	r4, r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6a8:	e01b      	b.n	800a6e2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0f0      	beq.n	800a69c <SDMMC_GetCmdResp3+0x1c>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1eb      	bne.n	800a69c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d004      	beq.n	800a6da <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2204      	movs	r2, #4
 800a6d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6d6:	2304      	movs	r3, #4
 800a6d8:	e003      	b.n	800a6e2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	22c5      	movs	r2, #197	; 0xc5
 800a6de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bc90      	pop	{r4, r7}
 800a6ea:	4770      	bx	lr
 800a6ec:	20000000 	.word	0x20000000
 800a6f0:	10624dd3 	.word	0x10624dd3

0800a6f4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a6f4:	b590      	push	{r4, r7, lr}
 800a6f6:	b087      	sub	sp, #28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a702:	4b34      	ldr	r3, [pc, #208]	; (800a7d4 <SDMMC_GetCmdResp6+0xe0>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a34      	ldr	r2, [pc, #208]	; (800a7d8 <SDMMC_GetCmdResp6+0xe4>)
 800a708:	fba2 2303 	umull	r2, r3, r2, r3
 800a70c:	0a5b      	lsrs	r3, r3, #9
 800a70e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a712:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a716:	4623      	mov	r3, r4
 800a718:	1e5c      	subs	r4, r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d102      	bne.n	800a724 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a71e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a722:	e052      	b.n	800a7ca <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a728:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a730:	2b00      	cmp	r3, #0
 800a732:	d0f0      	beq.n	800a716 <SDMMC_GetCmdResp6+0x22>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1eb      	bne.n	800a716 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a742:	f003 0304 	and.w	r3, r3, #4
 800a746:	2b00      	cmp	r3, #0
 800a748:	d004      	beq.n	800a754 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2204      	movs	r2, #4
 800a74e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a750:	2304      	movs	r3, #4
 800a752:	e03a      	b.n	800a7ca <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a758:	f003 0301 	and.w	r3, r3, #1
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d004      	beq.n	800a76a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2201      	movs	r2, #1
 800a764:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a766:	2301      	movs	r3, #1
 800a768:	e02f      	b.n	800a7ca <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f7ff fc79 	bl	800a062 <SDIO_GetCommandResponse>
 800a770:	4603      	mov	r3, r0
 800a772:	461a      	mov	r2, r3
 800a774:	7afb      	ldrb	r3, [r7, #11]
 800a776:	4293      	cmp	r3, r2
 800a778:	d001      	beq.n	800a77e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a77a:	2301      	movs	r3, #1
 800a77c:	e025      	b.n	800a7ca <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	22c5      	movs	r2, #197	; 0xc5
 800a782:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a784:	2100      	movs	r1, #0
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	f7ff fc78 	bl	800a07c <SDIO_GetResponse>
 800a78c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a794:	2b00      	cmp	r3, #0
 800a796:	d106      	bne.n	800a7a6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	0c1b      	lsrs	r3, r3, #16
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	e011      	b.n	800a7ca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a7b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7b4:	e009      	b.n	800a7ca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a7c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7c4:	e001      	b.n	800a7ca <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a7c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	371c      	adds	r7, #28
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd90      	pop	{r4, r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20000000 	.word	0x20000000
 800a7d8:	10624dd3 	.word	0x10624dd3

0800a7dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a7dc:	b490      	push	{r4, r7}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7e4:	4b21      	ldr	r3, [pc, #132]	; (800a86c <SDMMC_GetCmdResp7+0x90>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a21      	ldr	r2, [pc, #132]	; (800a870 <SDMMC_GetCmdResp7+0x94>)
 800a7ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ee:	0a5b      	lsrs	r3, r3, #9
 800a7f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a7f8:	4623      	mov	r3, r4
 800a7fa:	1e5c      	subs	r4, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d102      	bne.n	800a806 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a800:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a804:	e02c      	b.n	800a860 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a80a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a812:	2b00      	cmp	r3, #0
 800a814:	d0f0      	beq.n	800a7f8 <SDMMC_GetCmdResp7+0x1c>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d1eb      	bne.n	800a7f8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d004      	beq.n	800a836 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2204      	movs	r2, #4
 800a830:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a832:	2304      	movs	r3, #4
 800a834:	e014      	b.n	800a860 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d004      	beq.n	800a84c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a848:	2301      	movs	r3, #1
 800a84a:	e009      	b.n	800a860 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2240      	movs	r2, #64	; 0x40
 800a85c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a85e:	2300      	movs	r3, #0
  
}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bc90      	pop	{r4, r7}
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	20000000 	.word	0x20000000
 800a870:	10624dd3 	.word	0x10624dd3

0800a874 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a874:	b084      	sub	sp, #16
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
 800a87e:	f107 001c 	add.w	r0, r7, #28
 800a882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d122      	bne.n	800a8d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a890:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a8a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d105      	bne.n	800a8c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68db      	ldr	r3, [r3, #12]
 800a8be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 f94a 	bl	800ab60 <USB_CoreReset>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]
 800a8d0:	e01a      	b.n	800a908 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f93e 	bl	800ab60 <USB_CoreReset>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a8e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d106      	bne.n	800a8fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	639a      	str	r2, [r3, #56]	; 0x38
 800a8fa:	e005      	b.n	800a908 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d10b      	bne.n	800a926 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f043 0206 	orr.w	r2, r3, #6
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	f043 0220 	orr.w	r2, r3, #32
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a926:	7bfb      	ldrb	r3, [r7, #15]
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a932:	b004      	add	sp, #16
 800a934:	4770      	bx	lr

0800a936 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a936:	b480      	push	{r7}
 800a938:	b083      	sub	sp, #12
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f043 0201 	orr.w	r2, r3, #1
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f023 0201 	bic.w	r2, r3, #1
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a96c:	2300      	movs	r3, #0
}
 800a96e:	4618      	mov	r0, r3
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b082      	sub	sp, #8
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	460b      	mov	r3, r1
 800a984:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a992:	78fb      	ldrb	r3, [r7, #3]
 800a994:	2b01      	cmp	r3, #1
 800a996:	d106      	bne.n	800a9a6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	60da      	str	r2, [r3, #12]
 800a9a4:	e00b      	b.n	800a9be <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9a6:	78fb      	ldrb	r3, [r7, #3]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	68db      	ldr	r3, [r3, #12]
 800a9b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	60da      	str	r2, [r3, #12]
 800a9b8:	e001      	b.n	800a9be <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e003      	b.n	800a9c6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a9be:	2032      	movs	r0, #50	; 0x32
 800a9c0:	f7f8 fc26 	bl	8003210 <HAL_Delay>

  return HAL_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	019b      	lsls	r3, r3, #6
 800a9e2:	f043 0220 	orr.w	r2, r3, #32
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4a09      	ldr	r2, [pc, #36]	; (800aa18 <USB_FlushTxFifo+0x48>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d901      	bls.n	800a9fc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	e006      	b.n	800aa0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	f003 0320 	and.w	r3, r3, #32
 800aa04:	2b20      	cmp	r3, #32
 800aa06:	d0f0      	beq.n	800a9ea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	00030d40 	.word	0x00030d40

0800aa1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2210      	movs	r2, #16
 800aa2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3301      	adds	r3, #1
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <USB_FlushRxFifo+0x40>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d901      	bls.n	800aa40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e006      	b.n	800aa4e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	f003 0310 	and.w	r3, r3, #16
 800aa48:	2b10      	cmp	r3, #16
 800aa4a:	d0f0      	beq.n	800aa2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	00030d40 	.word	0x00030d40

0800aa60 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b089      	sub	sp, #36	; 0x24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	460b      	mov	r3, r1
 800aa70:	71fb      	strb	r3, [r7, #7]
 800aa72:	4613      	mov	r3, r2
 800aa74:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800aa7e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d11a      	bne.n	800aabc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800aa86:	88bb      	ldrh	r3, [r7, #4]
 800aa88:	3303      	adds	r3, #3
 800aa8a:	089b      	lsrs	r3, r3, #2
 800aa8c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800aa8e:	2300      	movs	r3, #0
 800aa90:	61bb      	str	r3, [r7, #24]
 800aa92:	e00f      	b.n	800aab4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	031a      	lsls	r2, r3, #12
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	4413      	add	r3, r2
 800aa9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	3301      	adds	r3, #1
 800aab2:	61bb      	str	r3, [r7, #24]
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d3eb      	bcc.n	800aa94 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3724      	adds	r7, #36	; 0x24
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aaca:	b480      	push	{r7}
 800aacc:	b089      	sub	sp, #36	; 0x24
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	60b9      	str	r1, [r7, #8]
 800aad4:	4613      	mov	r3, r2
 800aad6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800aae0:	88fb      	ldrh	r3, [r7, #6]
 800aae2:	3303      	adds	r3, #3
 800aae4:	089b      	lsrs	r3, r3, #2
 800aae6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800aae8:	2300      	movs	r3, #0
 800aaea:	61bb      	str	r3, [r7, #24]
 800aaec:	e00b      	b.n	800ab06 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	601a      	str	r2, [r3, #0]
    pDest++;
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	3304      	adds	r3, #4
 800aafe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ab00:	69bb      	ldr	r3, [r7, #24]
 800ab02:	3301      	adds	r3, #1
 800ab04:	61bb      	str	r3, [r7, #24]
 800ab06:	69ba      	ldr	r2, [r7, #24]
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d3ef      	bcc.n	800aaee <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ab0e:	69fb      	ldr	r3, [r7, #28]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3724      	adds	r7, #36	; 0x24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	4013      	ands	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab34:	68fb      	ldr	r3, [r7, #12]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	f003 0301 	and.w	r3, r3, #1
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	60fb      	str	r3, [r7, #12]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	4a13      	ldr	r2, [pc, #76]	; (800abc4 <USB_CoreReset+0x64>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d901      	bls.n	800ab7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e01b      	b.n	800abb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	daf2      	bge.n	800ab6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ab86:	2300      	movs	r3, #0
 800ab88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	f043 0201 	orr.w	r2, r3, #1
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	60fb      	str	r3, [r7, #12]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	4a09      	ldr	r2, [pc, #36]	; (800abc4 <USB_CoreReset+0x64>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d901      	bls.n	800aba8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e006      	b.n	800abb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f003 0301 	and.w	r3, r3, #1
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	d0f0      	beq.n	800ab96 <USB_CoreReset+0x36>

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3714      	adds	r7, #20
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	00030d40 	.word	0x00030d40

0800abc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abc8:	b084      	sub	sp, #16
 800abca:	b580      	push	{r7, lr}
 800abcc:	b084      	sub	sp, #16
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	f107 001c 	add.w	r0, r7, #28
 800abd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abe4:	461a      	mov	r2, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d018      	beq.n	800ac40 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d10a      	bne.n	800ac2a <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac22:	f043 0304 	orr.w	r3, r3, #4
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	e014      	b.n	800ac54 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac38:	f023 0304 	bic.w	r3, r3, #4
 800ac3c:	6013      	str	r3, [r2, #0]
 800ac3e:	e009      	b.n	800ac54 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68ba      	ldr	r2, [r7, #8]
 800ac4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ac4e:	f023 0304 	bic.w	r3, r3, #4
 800ac52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800ac54:	2110      	movs	r1, #16
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f7ff feba 	bl	800a9d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff fedd 	bl	800aa1c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac62:	2300      	movs	r3, #0
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	e015      	b.n	800ac94 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	015a      	lsls	r2, r3, #5
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	4413      	add	r3, r2
 800ac70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac74:	461a      	mov	r2, r3
 800ac76:	f04f 33ff 	mov.w	r3, #4294967295
 800ac7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac88:	461a      	mov	r2, r3
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3301      	adds	r3, #1
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d3e5      	bcc.n	800ac68 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f8ac 	bl	800adfc <USB_DriveVbus>

  HAL_Delay(200U);
 800aca4:	20c8      	movs	r0, #200	; 0xc8
 800aca6:	f7f8 fab3 	bl	8003210 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f04f 32ff 	mov.w	r2, #4294967295
 800acb6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00b      	beq.n	800acdc <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a14      	ldr	r2, [pc, #80]	; (800ad20 <USB_HostInit+0x158>)
 800acd0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a13      	ldr	r2, [pc, #76]	; (800ad24 <USB_HostInit+0x15c>)
 800acd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800acda:	e009      	b.n	800acf0 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2280      	movs	r2, #128	; 0x80
 800ace0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a10      	ldr	r2, [pc, #64]	; (800ad28 <USB_HostInit+0x160>)
 800ace6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a10      	ldr	r2, [pc, #64]	; (800ad2c <USB_HostInit+0x164>)
 800acec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d105      	bne.n	800ad02 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	f043 0210 	orr.w	r2, r3, #16
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	699a      	ldr	r2, [r3, #24]
 800ad06:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <USB_HostInit+0x168>)
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad1a:	b004      	add	sp, #16
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	01000200 	.word	0x01000200
 800ad24:	00e00300 	.word	0x00e00300
 800ad28:	00600080 	.word	0x00600080
 800ad2c:	004000e0 	.word	0x004000e0
 800ad30:	a3200008 	.word	0xa3200008

0800ad34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	460b      	mov	r3, r1
 800ad3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	68f9      	ldr	r1, [r7, #12]
 800ad68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d107      	bne.n	800ad86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ad82:	6053      	str	r3, [r2, #4]
 800ad84:	e009      	b.n	800ad9a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ad86:	78fb      	ldrb	r3, [r7, #3]
 800ad88:	2b02      	cmp	r3, #2
 800ad8a:	d106      	bne.n	800ad9a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad92:	461a      	mov	r2, r3
 800ad94:	f241 7370 	movw	r3, #6000	; 0x1770
 800ad98:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3714      	adds	r7, #20
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800adc8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	68fa      	ldr	r2, [r7, #12]
 800adce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800add2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800add6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800add8:	2064      	movs	r0, #100	; 0x64
 800adda:	f7f8 fa19 	bl	8003210 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ade6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800adec:	200a      	movs	r0, #10
 800adee:	f7f8 fa0f 	bl	8003210 <HAL_Delay>

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ae20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d109      	bne.n	800ae40 <USB_DriveVbus+0x44>
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d106      	bne.n	800ae40 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	68fa      	ldr	r2, [r7, #12]
 800ae36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ae3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae3e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae4a:	d109      	bne.n	800ae60 <USB_DriveVbus+0x64>
 800ae4c:	78fb      	ldrb	r3, [r7, #3]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d106      	bne.n	800ae60 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ae5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae5e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b085      	sub	sp, #20
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	0c5b      	lsrs	r3, r3, #17
 800ae8c:	f003 0303 	and.w	r3, r3, #3
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3714      	adds	r7, #20
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	b29b      	uxth	r3, r3
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
	...

0800aec0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b087      	sub	sp, #28
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	4608      	mov	r0, r1
 800aeca:	4611      	mov	r1, r2
 800aecc:	461a      	mov	r2, r3
 800aece:	4603      	mov	r3, r0
 800aed0:	70fb      	strb	r3, [r7, #3]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70bb      	strb	r3, [r7, #2]
 800aed6:	4613      	mov	r3, r2
 800aed8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800aee2:	78fb      	ldrb	r3, [r7, #3]
 800aee4:	015a      	lsls	r2, r3, #5
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	4413      	add	r3, r2
 800aeea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeee:	461a      	mov	r2, r3
 800aef0:	f04f 33ff 	mov.w	r3, #4294967295
 800aef4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800aef6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aefa:	2b03      	cmp	r3, #3
 800aefc:	d87e      	bhi.n	800affc <USB_HC_Init+0x13c>
 800aefe:	a201      	add	r2, pc, #4	; (adr r2, 800af04 <USB_HC_Init+0x44>)
 800af00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af04:	0800af15 	.word	0x0800af15
 800af08:	0800afbf 	.word	0x0800afbf
 800af0c:	0800af15 	.word	0x0800af15
 800af10:	0800af81 	.word	0x0800af81
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af14:	78fb      	ldrb	r3, [r7, #3]
 800af16:	015a      	lsls	r2, r3, #5
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	4413      	add	r3, r2
 800af1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af20:	461a      	mov	r2, r3
 800af22:	f240 439d 	movw	r3, #1181	; 0x49d
 800af26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800af28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	da10      	bge.n	800af52 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800af30:	78fb      	ldrb	r3, [r7, #3]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	4413      	add	r3, r2
 800af38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	78fa      	ldrb	r2, [r7, #3]
 800af40:	0151      	lsls	r1, r2, #5
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	440a      	add	r2, r1
 800af46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af4e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800af50:	e057      	b.n	800b002 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d051      	beq.n	800b002 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800af5e:	78fb      	ldrb	r3, [r7, #3]
 800af60:	015a      	lsls	r2, r3, #5
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	4413      	add	r3, r2
 800af66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	78fa      	ldrb	r2, [r7, #3]
 800af6e:	0151      	lsls	r1, r2, #5
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	440a      	add	r2, r1
 800af74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800af78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800af7c:	60d3      	str	r3, [r2, #12]
      break;
 800af7e:	e040      	b.n	800b002 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	015a      	lsls	r2, r3, #5
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	4413      	add	r3, r2
 800af88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af8c:	461a      	mov	r2, r3
 800af8e:	f240 639d 	movw	r3, #1693	; 0x69d
 800af92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800af94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	da34      	bge.n	800b006 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	015a      	lsls	r2, r3, #5
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	4413      	add	r3, r2
 800afa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	78fa      	ldrb	r2, [r7, #3]
 800afac:	0151      	lsls	r1, r2, #5
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	440a      	add	r2, r1
 800afb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800afb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afba:	60d3      	str	r3, [r2, #12]
      }

      break;
 800afbc:	e023      	b.n	800b006 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800afbe:	78fb      	ldrb	r3, [r7, #3]
 800afc0:	015a      	lsls	r2, r3, #5
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	4413      	add	r3, r2
 800afc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afca:	461a      	mov	r2, r3
 800afcc:	f240 2325 	movw	r3, #549	; 0x225
 800afd0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800afd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	da17      	bge.n	800b00a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800afda:	78fb      	ldrb	r3, [r7, #3]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	78fa      	ldrb	r2, [r7, #3]
 800afea:	0151      	lsls	r1, r2, #5
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	440a      	add	r2, r1
 800aff0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aff4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800aff8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800affa:	e006      	b.n	800b00a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	75fb      	strb	r3, [r7, #23]
      break;
 800b000:	e004      	b.n	800b00c <USB_HC_Init+0x14c>
      break;
 800b002:	bf00      	nop
 800b004:	e002      	b.n	800b00c <USB_HC_Init+0x14c>
      break;
 800b006:	bf00      	nop
 800b008:	e000      	b.n	800b00c <USB_HC_Init+0x14c>
      break;
 800b00a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	f003 030f 	and.w	r3, r3, #15
 800b01a:	2101      	movs	r1, #1
 800b01c:	fa01 f303 	lsl.w	r3, r1, r3
 800b020:	68b9      	ldr	r1, [r7, #8]
 800b022:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b026:	4313      	orrs	r3, r2
 800b028:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	699b      	ldr	r3, [r3, #24]
 800b02e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b036:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	da03      	bge.n	800b046 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b03e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b042:	613b      	str	r3, [r7, #16]
 800b044:	e001      	b.n	800b04a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800b046:	2300      	movs	r3, #0
 800b048:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800b04a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	d103      	bne.n	800b05a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b056:	60fb      	str	r3, [r7, #12]
 800b058:	e001      	b.n	800b05e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b05a:	2300      	movs	r3, #0
 800b05c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b05e:	787b      	ldrb	r3, [r7, #1]
 800b060:	059b      	lsls	r3, r3, #22
 800b062:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b066:	78bb      	ldrb	r3, [r7, #2]
 800b068:	02db      	lsls	r3, r3, #11
 800b06a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b06e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b070:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b074:	049b      	lsls	r3, r3, #18
 800b076:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b07a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b07c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b07e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b082:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b088:	78fb      	ldrb	r3, [r7, #3]
 800b08a:	0159      	lsls	r1, r3, #5
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	440b      	add	r3, r1
 800b090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b094:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b09a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800b09c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b0a0:	2b03      	cmp	r3, #3
 800b0a2:	d10f      	bne.n	800b0c4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800b0a4:	78fb      	ldrb	r3, [r7, #3]
 800b0a6:	015a      	lsls	r2, r3, #5
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	78fa      	ldrb	r2, [r7, #3]
 800b0b4:	0151      	lsls	r1, r2, #5
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	440a      	add	r2, r1
 800b0ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b0be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0c2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	371c      	adds	r7, #28
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop

0800b0d4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b08c      	sub	sp, #48	; 0x30
 800b0d8:	af02      	add	r7, sp, #8
 800b0da:	60f8      	str	r0, [r7, #12]
 800b0dc:	60b9      	str	r1, [r7, #8]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	785b      	ldrb	r3, [r3, #1]
 800b0ea:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800b0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0f0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d028      	beq.n	800b150 <USB_HC_StartXfer+0x7c>
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	791b      	ldrb	r3, [r3, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d124      	bne.n	800b150 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10b      	bne.n	800b124 <USB_HC_StartXfer+0x50>
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	795b      	ldrb	r3, [r3, #5]
 800b110:	2b01      	cmp	r3, #1
 800b112:	d107      	bne.n	800b124 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	785b      	ldrb	r3, [r3, #1]
 800b118:	4619      	mov	r1, r3
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f000 fa30 	bl	800b580 <USB_DoPing>
      return HAL_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	e114      	b.n	800b34e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800b124:	79fb      	ldrb	r3, [r7, #7]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d112      	bne.n	800b150 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	6a3b      	ldr	r3, [r7, #32]
 800b130:	4413      	add	r3, r2
 800b132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	69fa      	ldr	r2, [r7, #28]
 800b13a:	0151      	lsls	r1, r2, #5
 800b13c:	6a3a      	ldr	r2, [r7, #32]
 800b13e:	440a      	add	r2, r1
 800b140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b144:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800b148:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2200      	movs	r2, #0
 800b14e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d018      	beq.n	800b18a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	68ba      	ldr	r2, [r7, #8]
 800b15e:	8912      	ldrh	r2, [r2, #8]
 800b160:	4413      	add	r3, r2
 800b162:	3b01      	subs	r3, #1
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	8912      	ldrh	r2, [r2, #8]
 800b168:	fbb3 f3f2 	udiv	r3, r3, r2
 800b16c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800b16e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b170:	8b7b      	ldrh	r3, [r7, #26]
 800b172:	429a      	cmp	r2, r3
 800b174:	d90b      	bls.n	800b18e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800b176:	8b7b      	ldrh	r3, [r7, #26]
 800b178:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b17a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	8912      	ldrh	r2, [r2, #8]
 800b180:	fb02 f203 	mul.w	r2, r2, r3
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	611a      	str	r2, [r3, #16]
 800b188:	e001      	b.n	800b18e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800b18a:	2301      	movs	r3, #1
 800b18c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	78db      	ldrb	r3, [r3, #3]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d006      	beq.n	800b1a4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800b196:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	8912      	ldrh	r2, [r2, #8]
 800b19c:	fb02 f203 	mul.w	r2, r2, r3
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b1ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1ae:	04d9      	lsls	r1, r3, #19
 800b1b0:	4b69      	ldr	r3, [pc, #420]	; (800b358 <USB_HC_StartXfer+0x284>)
 800b1b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b1b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	7a9b      	ldrb	r3, [r3, #10]
 800b1ba:	075b      	lsls	r3, r3, #29
 800b1bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b1c0:	69f9      	ldr	r1, [r7, #28]
 800b1c2:	0148      	lsls	r0, r1, #5
 800b1c4:	6a39      	ldr	r1, [r7, #32]
 800b1c6:	4401      	add	r1, r0
 800b1c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b1cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800b1ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b1d0:	79fb      	ldrb	r3, [r7, #7]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d009      	beq.n	800b1ea <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	68d9      	ldr	r1, [r3, #12]
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b1e6:	460a      	mov	r2, r1
 800b1e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b1ea:	6a3b      	ldr	r3, [r7, #32]
 800b1ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f003 0301 	and.w	r3, r3, #1
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	bf0c      	ite	eq
 800b1fa:	2301      	moveq	r3, #1
 800b1fc:	2300      	movne	r3, #0
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	015a      	lsls	r2, r3, #5
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	4413      	add	r3, r2
 800b20a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	69fa      	ldr	r2, [r7, #28]
 800b212:	0151      	lsls	r1, r2, #5
 800b214:	6a3a      	ldr	r2, [r7, #32]
 800b216:	440a      	add	r2, r1
 800b218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b21c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b220:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	7e7b      	ldrb	r3, [r7, #25]
 800b232:	075b      	lsls	r3, r3, #29
 800b234:	69f9      	ldr	r1, [r7, #28]
 800b236:	0148      	lsls	r0, r1, #5
 800b238:	6a39      	ldr	r1, [r7, #32]
 800b23a:	4401      	add	r1, r0
 800b23c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800b240:	4313      	orrs	r3, r2
 800b242:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a42      	ldr	r2, [pc, #264]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b254:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b256:	4b41      	ldr	r3, [pc, #260]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b25e:	4a3f      	ldr	r2, [pc, #252]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b260:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	78db      	ldrb	r3, [r3, #3]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d006      	beq.n	800b278 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b26a:	4b3c      	ldr	r3, [pc, #240]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b272:	4a3a      	ldr	r2, [pc, #232]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	e005      	b.n	800b284 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b278:	4b38      	ldr	r3, [pc, #224]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b280:	4a36      	ldr	r2, [pc, #216]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b282:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b284:	4b35      	ldr	r3, [pc, #212]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b28c:	4a33      	ldr	r2, [pc, #204]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b28e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	015a      	lsls	r2, r3, #5
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	4413      	add	r3, r2
 800b298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b29c:	461a      	mov	r2, r3
 800b29e:	4b2f      	ldr	r3, [pc, #188]	; (800b35c <USB_HC_StartXfer+0x288>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b2a4:	79fb      	ldrb	r3, [r7, #7]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d001      	beq.n	800b2ae <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	e04f      	b.n	800b34e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	78db      	ldrb	r3, [r3, #3]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d14a      	bne.n	800b34c <USB_HC_StartXfer+0x278>
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d046      	beq.n	800b34c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	79db      	ldrb	r3, [r3, #7]
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d830      	bhi.n	800b328 <USB_HC_StartXfer+0x254>
 800b2c6:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <USB_HC_StartXfer+0x1f8>)
 800b2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2cc:	0800b2dd 	.word	0x0800b2dd
 800b2d0:	0800b301 	.word	0x0800b301
 800b2d4:	0800b2dd 	.word	0x0800b2dd
 800b2d8:	0800b301 	.word	0x0800b301
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	691b      	ldr	r3, [r3, #16]
 800b2e0:	3303      	adds	r3, #3
 800b2e2:	089b      	lsrs	r3, r3, #2
 800b2e4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b2e6:	8afa      	ldrh	r2, [r7, #22]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d91c      	bls.n	800b32c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	699b      	ldr	r3, [r3, #24]
 800b2f6:	f043 0220 	orr.w	r2, r3, #32
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	619a      	str	r2, [r3, #24]
        }
        break;
 800b2fe:	e015      	b.n	800b32c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	3303      	adds	r3, #3
 800b306:	089b      	lsrs	r3, r3, #2
 800b308:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b30a:	8afa      	ldrh	r2, [r7, #22]
 800b30c:	6a3b      	ldr	r3, [r7, #32]
 800b30e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	b29b      	uxth	r3, r3
 800b316:	429a      	cmp	r2, r3
 800b318:	d90a      	bls.n	800b330 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	619a      	str	r2, [r3, #24]
        }
        break;
 800b326:	e003      	b.n	800b330 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800b328:	bf00      	nop
 800b32a:	e002      	b.n	800b332 <USB_HC_StartXfer+0x25e>
        break;
 800b32c:	bf00      	nop
 800b32e:	e000      	b.n	800b332 <USB_HC_StartXfer+0x25e>
        break;
 800b330:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	68d9      	ldr	r1, [r3, #12]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	785a      	ldrb	r2, [r3, #1]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	b298      	uxth	r0, r3
 800b340:	2300      	movs	r3, #0
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	4603      	mov	r3, r0
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f7ff fb8a 	bl	800aa60 <USB_WritePacket>
  }

  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3728      	adds	r7, #40	; 0x28
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	1ff80000 	.word	0x1ff80000
 800b35c:	20000158 	.word	0x20000158

0800b360 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	b29b      	uxth	r3, r3
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b382:	b480      	push	{r7}
 800b384:	b087      	sub	sp, #28
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	460b      	mov	r3, r1
 800b38c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800b392:	78fb      	ldrb	r3, [r7, #3]
 800b394:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b396:	2300      	movs	r3, #0
 800b398:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	0c9b      	lsrs	r3, r3, #18
 800b3aa:	f003 0303 	and.w	r3, r3, #3
 800b3ae:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <USB_HC_Halt+0x3a>
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	2b02      	cmp	r3, #2
 800b3ba:	d16c      	bne.n	800b496 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	0151      	lsls	r1, r2, #5
 800b3ce:	693a      	ldr	r2, [r7, #16]
 800b3d0:	440a      	add	r2, r1
 800b3d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b3d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3da:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d143      	bne.n	800b470 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	0151      	lsls	r1, r2, #5
 800b3fa:	693a      	ldr	r2, [r7, #16]
 800b3fc:	440a      	add	r2, r1
 800b3fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b402:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b406:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	015a      	lsls	r2, r3, #5
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	4413      	add	r3, r2
 800b410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	0151      	lsls	r1, r2, #5
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	440a      	add	r2, r1
 800b41e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b422:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b426:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	015a      	lsls	r2, r3, #5
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	4413      	add	r3, r2
 800b430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	0151      	lsls	r1, r2, #5
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	440a      	add	r2, r1
 800b43e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b442:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b446:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	3301      	adds	r3, #1
 800b44c:	617b      	str	r3, [r7, #20]
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b454:	d81d      	bhi.n	800b492 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	015a      	lsls	r2, r3, #5
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	4413      	add	r3, r2
 800b45e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b46c:	d0ec      	beq.n	800b448 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b46e:	e080      	b.n	800b572 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	015a      	lsls	r2, r3, #5
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	4413      	add	r3, r2
 800b478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	0151      	lsls	r1, r2, #5
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	440a      	add	r2, r1
 800b486:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b48a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b48e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b490:	e06f      	b.n	800b572 <USB_HC_Halt+0x1f0>
          break;
 800b492:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b494:	e06d      	b.n	800b572 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	0151      	lsls	r1, r2, #5
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	440a      	add	r2, r1
 800b4ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4b4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d143      	bne.n	800b54e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	0151      	lsls	r1, r2, #5
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	440a      	add	r2, r1
 800b4dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b4e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	015a      	lsls	r2, r3, #5
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	0151      	lsls	r1, r2, #5
 800b4f8:	693a      	ldr	r2, [r7, #16]
 800b4fa:	440a      	add	r2, r1
 800b4fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b500:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b504:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	015a      	lsls	r2, r3, #5
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	4413      	add	r3, r2
 800b50e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	0151      	lsls	r1, r2, #5
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	440a      	add	r2, r1
 800b51c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b520:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b524:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	3301      	adds	r3, #1
 800b52a:	617b      	str	r3, [r7, #20]
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b532:	d81d      	bhi.n	800b570 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	015a      	lsls	r2, r3, #5
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	4413      	add	r3, r2
 800b53c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b54a:	d0ec      	beq.n	800b526 <USB_HC_Halt+0x1a4>
 800b54c:	e011      	b.n	800b572 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	4413      	add	r3, r2
 800b556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	0151      	lsls	r1, r2, #5
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	440a      	add	r2, r1
 800b564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	e000      	b.n	800b572 <USB_HC_Halt+0x1f0>
          break;
 800b570:	bf00      	nop
    }
  }

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	371c      	adds	r7, #28
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800b580:	b480      	push	{r7}
 800b582:	b087      	sub	sp, #28
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	460b      	mov	r3, r1
 800b58a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800b594:	2301      	movs	r3, #1
 800b596:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	04da      	lsls	r2, r3, #19
 800b59c:	4b15      	ldr	r3, [pc, #84]	; (800b5f4 <USB_DoPing+0x74>)
 800b59e:	4013      	ands	r3, r2
 800b5a0:	693a      	ldr	r2, [r7, #16]
 800b5a2:	0151      	lsls	r1, r2, #5
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	440a      	add	r2, r1
 800b5a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800b5ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	015a      	lsls	r2, r3, #5
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b5c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b5d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	015a      	lsls	r2, r3, #5
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b5de:	461a      	mov	r2, r3
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	371c      	adds	r7, #28
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	1ff80000 	.word	0x1ff80000

0800b5f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7ff f9a5 	bl	800a958 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800b60e:	2110      	movs	r1, #16
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff f9dd 	bl	800a9d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7ff fa00 	bl	800aa1c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800b61c:	2300      	movs	r3, #0
 800b61e:	613b      	str	r3, [r7, #16]
 800b620:	e01f      	b.n	800b662 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	015a      	lsls	r2, r3, #5
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b638:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b640:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b648:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	015a      	lsls	r2, r3, #5
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	4413      	add	r3, r2
 800b652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b656:	461a      	mov	r2, r3
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	3301      	adds	r3, #1
 800b660:	613b      	str	r3, [r7, #16]
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	2b0f      	cmp	r3, #15
 800b666:	d9dc      	bls.n	800b622 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800b668:	2300      	movs	r3, #0
 800b66a:	613b      	str	r3, [r7, #16]
 800b66c:	e034      	b.n	800b6d8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4413      	add	r3, r2
 800b676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b684:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b68c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b694:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	015a      	lsls	r2, r3, #5
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4413      	add	r3, r2
 800b69e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6b4:	d80c      	bhi.n	800b6d0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6cc:	d0ec      	beq.n	800b6a8 <USB_StopHost+0xb0>
 800b6ce:	e000      	b.n	800b6d2 <USB_StopHost+0xda>
        break;
 800b6d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	613b      	str	r3, [r7, #16]
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	2b0f      	cmp	r3, #15
 800b6dc:	d9c7      	bls.n	800b66e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b6f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f7ff f91e 	bl	800a936 <USB_EnableGlobalInt>

  return HAL_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3718      	adds	r7, #24
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b089      	sub	sp, #36	; 0x24
 800b708:	af04      	add	r7, sp, #16
 800b70a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800b70c:	2301      	movs	r3, #1
 800b70e:	2202      	movs	r2, #2
 800b710:	2102      	movs	r1, #2
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fcb4 	bl	800c080 <USBH_FindInterface>
 800b718:	4603      	mov	r3, r0
 800b71a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b71c:	7bfb      	ldrb	r3, [r7, #15]
 800b71e:	2bff      	cmp	r3, #255	; 0xff
 800b720:	d002      	beq.n	800b728 <USBH_CDC_InterfaceInit+0x24>
 800b722:	7bfb      	ldrb	r3, [r7, #15]
 800b724:	2b01      	cmp	r3, #1
 800b726:	d901      	bls.n	800b72c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b728:	2302      	movs	r3, #2
 800b72a:	e13d      	b.n	800b9a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f000 fc89 	bl	800c048 <USBH_SelectInterface>
 800b736:	4603      	mov	r3, r0
 800b738:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b73a:	7bbb      	ldrb	r3, [r7, #14]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d001      	beq.n	800b744 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800b740:	2302      	movs	r3, #2
 800b742:	e131      	b.n	800b9a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b74a:	2050      	movs	r0, #80	; 0x50
 800b74c:	f005 fbe4 	bl	8010f18 <malloc>
 800b750:	4603      	mov	r3, r0
 800b752:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b75a:	69db      	ldr	r3, [r3, #28]
 800b75c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d101      	bne.n	800b768 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800b764:	2302      	movs	r3, #2
 800b766:	e11f      	b.n	800b9a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800b768:	2250      	movs	r2, #80	; 0x50
 800b76a:	2100      	movs	r1, #0
 800b76c:	68b8      	ldr	r0, [r7, #8]
 800b76e:	f005 fbee 	bl	8010f4e <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b772:	7bfb      	ldrb	r3, [r7, #15]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	211a      	movs	r1, #26
 800b778:	fb01 f303 	mul.w	r3, r1, r3
 800b77c:	4413      	add	r3, r2
 800b77e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	b25b      	sxtb	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	da15      	bge.n	800b7b6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b78a:	7bfb      	ldrb	r3, [r7, #15]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	211a      	movs	r1, #26
 800b790:	fb01 f303 	mul.w	r3, r1, r3
 800b794:	4413      	add	r3, r2
 800b796:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	211a      	movs	r1, #26
 800b7a6:	fb01 f303 	mul.w	r3, r1, r3
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b7b0:	881a      	ldrh	r2, [r3, #0]
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	785b      	ldrb	r3, [r3, #1]
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f002 f890 	bl	800d8e2 <USBH_AllocPipe>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	7819      	ldrb	r1, [r3, #0]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	7858      	ldrb	r0, [r3, #1]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	8952      	ldrh	r2, [r2, #10]
 800b7e2:	9202      	str	r2, [sp, #8]
 800b7e4:	2203      	movs	r2, #3
 800b7e6:	9201      	str	r2, [sp, #4]
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	4623      	mov	r3, r4
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f002 f848 	bl	800d884 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f005 fac1 	bl	8010d84 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800b802:	2300      	movs	r3, #0
 800b804:	2200      	movs	r2, #0
 800b806:	210a      	movs	r1, #10
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fc39 	bl	800c080 <USBH_FindInterface>
 800b80e:	4603      	mov	r3, r0
 800b810:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800b812:	7bfb      	ldrb	r3, [r7, #15]
 800b814:	2bff      	cmp	r3, #255	; 0xff
 800b816:	d002      	beq.n	800b81e <USBH_CDC_InterfaceInit+0x11a>
 800b818:	7bfb      	ldrb	r3, [r7, #15]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d901      	bls.n	800b822 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b81e:	2302      	movs	r3, #2
 800b820:	e0c2      	b.n	800b9a8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b822:	7bfb      	ldrb	r3, [r7, #15]
 800b824:	687a      	ldr	r2, [r7, #4]
 800b826:	211a      	movs	r1, #26
 800b828:	fb01 f303 	mul.w	r3, r1, r3
 800b82c:	4413      	add	r3, r2
 800b82e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	b25b      	sxtb	r3, r3
 800b836:	2b00      	cmp	r3, #0
 800b838:	da16      	bge.n	800b868 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	211a      	movs	r1, #26
 800b840:	fb01 f303 	mul.w	r3, r1, r3
 800b844:	4413      	add	r3, r2
 800b846:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b84a:	781a      	ldrb	r2, [r3, #0]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b850:	7bfb      	ldrb	r3, [r7, #15]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	211a      	movs	r1, #26
 800b856:	fb01 f303 	mul.w	r3, r1, r3
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b860:	881a      	ldrh	r2, [r3, #0]
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	835a      	strh	r2, [r3, #26]
 800b866:	e015      	b.n	800b894 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800b868:	7bfb      	ldrb	r3, [r7, #15]
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	211a      	movs	r1, #26
 800b86e:	fb01 f303 	mul.w	r3, r1, r3
 800b872:	4413      	add	r3, r2
 800b874:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b878:	781a      	ldrb	r2, [r3, #0]
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	211a      	movs	r1, #26
 800b884:	fb01 f303 	mul.w	r3, r1, r3
 800b888:	4413      	add	r3, r2
 800b88a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b88e:	881a      	ldrh	r2, [r3, #0]
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b894:	7bfb      	ldrb	r3, [r7, #15]
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	211a      	movs	r1, #26
 800b89a:	fb01 f303 	mul.w	r3, r1, r3
 800b89e:	4413      	add	r3, r2
 800b8a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	b25b      	sxtb	r3, r3
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	da16      	bge.n	800b8da <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	211a      	movs	r1, #26
 800b8b2:	fb01 f303 	mul.w	r3, r1, r3
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b8bc:	781a      	ldrb	r2, [r3, #0]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	211a      	movs	r1, #26
 800b8c8:	fb01 f303 	mul.w	r3, r1, r3
 800b8cc:	4413      	add	r3, r2
 800b8ce:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b8d2:	881a      	ldrh	r2, [r3, #0]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	835a      	strh	r2, [r3, #26]
 800b8d8:	e015      	b.n	800b906 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800b8da:	7bfb      	ldrb	r3, [r7, #15]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	211a      	movs	r1, #26
 800b8e0:	fb01 f303 	mul.w	r3, r1, r3
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b8ea:	781a      	ldrb	r2, [r3, #0]
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b8f0:	7bfb      	ldrb	r3, [r7, #15]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	211a      	movs	r1, #26
 800b8f6:	fb01 f303 	mul.w	r3, r1, r3
 800b8fa:	4413      	add	r3, r2
 800b8fc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b900:	881a      	ldrh	r2, [r3, #0]
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	7b9b      	ldrb	r3, [r3, #14]
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f001 ffe8 	bl	800d8e2 <USBH_AllocPipe>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	7bdb      	ldrb	r3, [r3, #15]
 800b91e:	4619      	mov	r1, r3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f001 ffde 	bl	800d8e2 <USBH_AllocPipe>
 800b926:	4603      	mov	r3, r0
 800b928:	461a      	mov	r2, r3
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	7b59      	ldrb	r1, [r3, #13]
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	7b98      	ldrb	r0, [r3, #14]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	8b12      	ldrh	r2, [r2, #24]
 800b946:	9202      	str	r2, [sp, #8]
 800b948:	2202      	movs	r2, #2
 800b94a:	9201      	str	r2, [sp, #4]
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	4623      	mov	r3, r4
 800b950:	4602      	mov	r2, r0
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f001 ff96 	bl	800d884 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	7b19      	ldrb	r1, [r3, #12]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	7bd8      	ldrb	r0, [r3, #15]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	8b52      	ldrh	r2, [r2, #26]
 800b970:	9202      	str	r2, [sp, #8]
 800b972:	2202      	movs	r2, #2
 800b974:	9201      	str	r2, [sp, #4]
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	4623      	mov	r3, r4
 800b97a:	4602      	mov	r2, r0
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f001 ff81 	bl	800d884 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	7b5b      	ldrb	r3, [r3, #13]
 800b98e:	2200      	movs	r2, #0
 800b990:	4619      	mov	r1, r3
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f005 f9f6 	bl	8010d84 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	7b1b      	ldrb	r3, [r3, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f005 f9ef 	bl	8010d84 <USBH_LL_SetToggle>

  return USBH_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd90      	pop	{r4, r7, pc}

0800b9b0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00e      	beq.n	800b9e8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f001 ff76 	bl	800d8c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f001 ffa1 	bl	800d924 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	7b1b      	ldrb	r3, [r3, #12]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00e      	beq.n	800ba0e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	7b1b      	ldrb	r3, [r3, #12]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f001 ff63 	bl	800d8c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	7b1b      	ldrb	r3, [r3, #12]
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f001 ff8e 	bl	800d924 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	7b5b      	ldrb	r3, [r3, #13]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00e      	beq.n	800ba34 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	7b5b      	ldrb	r3, [r3, #13]
 800ba1a:	4619      	mov	r1, r3
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f001 ff50 	bl	800d8c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	7b5b      	ldrb	r3, [r3, #13]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f001 ff7b 	bl	800d924 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba3a:	69db      	ldr	r3, [r3, #28]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00b      	beq.n	800ba58 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba46:	69db      	ldr	r3, [r3, #28]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f005 fa6d 	bl	8010f28 <free>
    phost->pActiveClass->pData = 0U;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba54:	2200      	movs	r2, #0
 800ba56:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}

0800ba62 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b084      	sub	sp, #16
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba70:	69db      	ldr	r3, [r3, #28]
 800ba72:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	3340      	adds	r3, #64	; 0x40
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f8b1 	bl	800bbe2 <GetLineCoding>
 800ba80:	4603      	mov	r3, r0
 800ba82:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ba84:	7afb      	ldrb	r3, [r7, #11]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d105      	bne.n	800ba96 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba90:	2102      	movs	r1, #2
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ba96:	7afb      	ldrb	r3, [r7, #11]
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800baa8:	2301      	movs	r3, #1
 800baaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bab6:	69db      	ldr	r3, [r3, #28]
 800bab8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d877      	bhi.n	800bbb4 <USBH_CDC_Process+0x114>
 800bac4:	a201      	add	r2, pc, #4	; (adr r2, 800bacc <USBH_CDC_Process+0x2c>)
 800bac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baca:	bf00      	nop
 800bacc:	0800bae1 	.word	0x0800bae1
 800bad0:	0800bae7 	.word	0x0800bae7
 800bad4:	0800bb17 	.word	0x0800bb17
 800bad8:	0800bb8b 	.word	0x0800bb8b
 800badc:	0800bb99 	.word	0x0800bb99
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	73fb      	strb	r3, [r7, #15]
      break;
 800bae4:	e06d      	b.n	800bbc2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 f897 	bl	800bc20 <SetLineCoding>
 800baf2:	4603      	mov	r3, r0
 800baf4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d104      	bne.n	800bb06 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2202      	movs	r2, #2
 800bb00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bb04:	e058      	b.n	800bbb8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800bb06:	7bbb      	ldrb	r3, [r7, #14]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d055      	beq.n	800bbb8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	2204      	movs	r2, #4
 800bb10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800bb14:	e050      	b.n	800bbb8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	3340      	adds	r3, #64	; 0x40
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f860 	bl	800bbe2 <GetLineCoding>
 800bb22:	4603      	mov	r3, r0
 800bb24:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d126      	bne.n	800bb7a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb3e:	791b      	ldrb	r3, [r3, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d13b      	bne.n	800bbbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb4e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d133      	bne.n	800bbbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb5e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d12b      	bne.n	800bbbc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb6c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d124      	bne.n	800bbbc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f984 	bl	800be80 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800bb78:	e020      	b.n	800bbbc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800bb7a:	7bbb      	ldrb	r3, [r7, #14]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d01d      	beq.n	800bbbc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2204      	movs	r2, #4
 800bb84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800bb88:	e018      	b.n	800bbbc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 f867 	bl	800bc5e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f8f8 	bl	800bd86 <CDC_ProcessReception>
      break;
 800bb96:	e014      	b.n	800bbc2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800bb98:	2100      	movs	r1, #0
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f001 f94f 	bl	800ce3e <USBH_ClrFeature>
 800bba0:	4603      	mov	r3, r0
 800bba2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d10a      	bne.n	800bbc0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800bbb2:	e005      	b.n	800bbc0 <USBH_CDC_Process+0x120>

    default:
      break;
 800bbb4:	bf00      	nop
 800bbb6:	e004      	b.n	800bbc2 <USBH_CDC_Process+0x122>
      break;
 800bbb8:	bf00      	nop
 800bbba:	e002      	b.n	800bbc2 <USBH_CDC_Process+0x122>
      break;
 800bbbc:	bf00      	nop
 800bbbe:	e000      	b.n	800bbc2 <USBH_CDC_Process+0x122>
      break;
 800bbc0:	bf00      	nop

  }

  return status;
 800bbc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3710      	adds	r7, #16
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	22a1      	movs	r2, #161	; 0xa1
 800bbf0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2221      	movs	r2, #33	; 0x21
 800bbf6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2207      	movs	r2, #7
 800bc08:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	2207      	movs	r2, #7
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 faf4 	bl	800d1fe <USBH_CtlReq>
 800bc16:	4603      	mov	r3, r0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2221      	movs	r2, #33	; 0x21
 800bc2e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2220      	movs	r2, #32
 800bc34:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2207      	movs	r2, #7
 800bc46:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2207      	movs	r2, #7
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f001 fad5 	bl	800d1fe <USBH_CtlReq>
 800bc54:	4603      	mov	r3, r0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b086      	sub	sp, #24
 800bc62:	af02      	add	r7, sp, #8
 800bc64:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc6c:	69db      	ldr	r3, [r3, #28]
 800bc6e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bc70:	2300      	movs	r3, #0
 800bc72:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d002      	beq.n	800bc84 <CDC_ProcessTransmission+0x26>
 800bc7e:	2b02      	cmp	r3, #2
 800bc80:	d025      	beq.n	800bcce <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800bc82:	e07c      	b.n	800bd7e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc88:	68fa      	ldr	r2, [r7, #12]
 800bc8a:	8b12      	ldrh	r2, [r2, #24]
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d90c      	bls.n	800bcaa <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	69d9      	ldr	r1, [r3, #28]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	8b1a      	ldrh	r2, [r3, #24]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	7b58      	ldrb	r0, [r3, #13]
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	4603      	mov	r3, r0
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 fdab 	bl	800d7fe <USBH_BulkSendData>
 800bca8:	e00c      	b.n	800bcc4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800bcb2:	b29a      	uxth	r2, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	7b58      	ldrb	r0, [r3, #13]
 800bcb8:	2301      	movs	r3, #1
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f001 fd9d 	bl	800d7fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800bccc:	e057      	b.n	800bd7e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	7b5b      	ldrb	r3, [r3, #13]
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f005 f82b 	bl	8010d30 <USBH_LL_GetURBState>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800bcde:	7afb      	ldrb	r3, [r7, #11]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d136      	bne.n	800bd52 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	8b12      	ldrh	r2, [r2, #24]
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d90e      	bls.n	800bd0e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	8b12      	ldrh	r2, [r2, #24]
 800bcf8:	1a9a      	subs	r2, r3, r2
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	68fa      	ldr	r2, [r7, #12]
 800bd04:	8b12      	ldrh	r2, [r2, #24]
 800bd06:	441a      	add	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	61da      	str	r2, [r3, #28]
 800bd0c:	e002      	b.n	800bd14 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2200      	movs	r2, #0
 800bd12:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d004      	beq.n	800bd26 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800bd24:	e006      	b.n	800bd34 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f000 f892 	bl	800be58 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2204      	movs	r2, #4
 800bd38:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd48:	2300      	movs	r3, #0
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f001 fff8 	bl	800dd40 <osMessageQueuePut>
      break;
 800bd50:	e014      	b.n	800bd7c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800bd52:	7afb      	ldrb	r3, [r7, #11]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d111      	bne.n	800bd7c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2204      	movs	r2, #4
 800bd64:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bd74:	2300      	movs	r3, #0
 800bd76:	2200      	movs	r2, #0
 800bd78:	f001 ffe2 	bl	800dd40 <osMessageQueuePut>
      break;
 800bd7c:	bf00      	nop
  }
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}

0800bd86 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800bd86:	b580      	push	{r7, lr}
 800bd88:	b086      	sub	sp, #24
 800bd8a:	af00      	add	r7, sp, #0
 800bd8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800bda2:	2b03      	cmp	r3, #3
 800bda4:	d002      	beq.n	800bdac <CDC_ProcessReception+0x26>
 800bda6:	2b04      	cmp	r3, #4
 800bda8:	d00e      	beq.n	800bdc8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800bdaa:	e051      	b.n	800be50 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	6a19      	ldr	r1, [r3, #32]
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	8b5a      	ldrh	r2, [r3, #26]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	7b1b      	ldrb	r3, [r3, #12]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f001 fd45 	bl	800d848 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2204      	movs	r2, #4
 800bdc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800bdc6:	e043      	b.n	800be50 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	7b1b      	ldrb	r3, [r3, #12]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f004 ffae 	bl	8010d30 <USBH_LL_GetURBState>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800bdd8:	7cfb      	ldrb	r3, [r7, #19]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d137      	bne.n	800be4e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	7b1b      	ldrb	r3, [r3, #12]
 800bde2:	4619      	mov	r1, r3
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f004 ff11 	bl	8010c0c <USBH_LL_GetLastXferSize>
 800bdea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdf0:	68fa      	ldr	r2, [r7, #12]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d016      	beq.n	800be24 <CDC_ProcessReception+0x9e>
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	8b5b      	ldrh	r3, [r3, #26]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d910      	bls.n	800be24 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	1ad2      	subs	r2, r2, r3
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	6a1a      	ldr	r2, [r3, #32]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	441a      	add	r2, r3
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	2203      	movs	r2, #3
 800be1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800be22:	e006      	b.n	800be32 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	2200      	movs	r2, #0
 800be28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 f81d 	bl	800be6c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2204      	movs	r2, #4
 800be36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800be46:	2300      	movs	r3, #0
 800be48:	2200      	movs	r2, #0
 800be4a:	f001 ff79 	bl	800dd40 <osMessageQueuePut>
      break;
 800be4e:	bf00      	nop
  }
}
 800be50:	bf00      	nop
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800be80:	b480      	push	{r7}
 800be82:	b083      	sub	sp, #12
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800be88:	bf00      	nop
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	4613      	mov	r3, r2
 800bea0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d101      	bne.n	800beac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800bea8:	2302      	movs	r3, #2
 800beaa:	e044      	b.n	800bf36 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	79fa      	ldrb	r2, [r7, #7]
 800beb0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2200      	movs	r2, #0
 800beb8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800bec4:	68f8      	ldr	r0, [r7, #12]
 800bec6:	f000 f841 	bl	800bf4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2200      	movs	r2, #0
 800bede:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	2200      	movs	r2, #0
 800bee6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d003      	beq.n	800bef8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800bef8:	2200      	movs	r2, #0
 800befa:	2104      	movs	r1, #4
 800befc:	2010      	movs	r0, #16
 800befe:	f001 fe99 	bl	800dc34 <osMessageQueueNew>
 800bf02:	4602      	mov	r2, r0
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800bf0a:	4b0d      	ldr	r3, [pc, #52]	; (800bf40 <USBH_Init+0xac>)
 800bf0c:	4a0d      	ldr	r2, [pc, #52]	; (800bf44 <USBH_Init+0xb0>)
 800bf0e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800bf10:	4b0b      	ldr	r3, [pc, #44]	; (800bf40 <USBH_Init+0xac>)
 800bf12:	2280      	movs	r2, #128	; 0x80
 800bf14:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800bf16:	4b0a      	ldr	r3, [pc, #40]	; (800bf40 <USBH_Init+0xac>)
 800bf18:	2218      	movs	r2, #24
 800bf1a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800bf1c:	4a08      	ldr	r2, [pc, #32]	; (800bf40 <USBH_Init+0xac>)
 800bf1e:	68f9      	ldr	r1, [r7, #12]
 800bf20:	4809      	ldr	r0, [pc, #36]	; (800bf48 <USBH_Init+0xb4>)
 800bf22:	f001 fdb3 	bl	800da8c <osThreadNew>
 800bf26:	4602      	mov	r2, r0
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f004 fdba 	bl	8010aa8 <USBH_LL_Init>

  return USBH_OK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	20004ee4 	.word	0x20004ee4
 800bf44:	08011178 	.word	0x08011178
 800bf48:	0800cbb5 	.word	0x0800cbb5

0800bf4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800bf54:	2300      	movs	r3, #0
 800bf56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60fb      	str	r3, [r7, #12]
 800bf5c:	e009      	b.n	800bf72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	33e0      	adds	r3, #224	; 0xe0
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	2200      	movs	r2, #0
 800bf6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2b0e      	cmp	r3, #14
 800bf76:	d9f2      	bls.n	800bf5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e009      	b.n	800bf92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4413      	add	r3, r2
 800bf84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bf88:	2200      	movs	r2, #0
 800bf8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	60fb      	str	r3, [r7, #12]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf98:	d3f1      	bcc.n	800bf7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2240      	movs	r2, #64	; 0x40
 800bfbe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800bffe:	2300      	movs	r3, #0
 800c000:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d016      	beq.n	800c036 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10e      	bne.n	800c030 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c018:	1c59      	adds	r1, r3, #1
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	33de      	adds	r3, #222	; 0xde
 800c024:	6839      	ldr	r1, [r7, #0]
 800c026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]
 800c02e:	e004      	b.n	800c03a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c030:	2302      	movs	r3, #2
 800c032:	73fb      	strb	r3, [r7, #15]
 800c034:	e001      	b.n	800c03a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c036:	2302      	movs	r3, #2
 800c038:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c048:	b480      	push	{r7}
 800c04a:	b085      	sub	sp, #20
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	460b      	mov	r3, r1
 800c052:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c054:	2300      	movs	r3, #0
 800c056:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c05e:	78fa      	ldrb	r2, [r7, #3]
 800c060:	429a      	cmp	r2, r3
 800c062:	d204      	bcs.n	800c06e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	78fa      	ldrb	r2, [r7, #3]
 800c068:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c06c:	e001      	b.n	800c072 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c06e:	2302      	movs	r3, #2
 800c070:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c072:	7bfb      	ldrb	r3, [r7, #15]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	4608      	mov	r0, r1
 800c08a:	4611      	mov	r1, r2
 800c08c:	461a      	mov	r2, r3
 800c08e:	4603      	mov	r3, r0
 800c090:	70fb      	strb	r3, [r7, #3]
 800c092:	460b      	mov	r3, r1
 800c094:	70bb      	strb	r3, [r7, #2]
 800c096:	4613      	mov	r3, r2
 800c098:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c0a8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c0aa:	e025      	b.n	800c0f8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
 800c0ae:	221a      	movs	r2, #26
 800c0b0:	fb02 f303 	mul.w	r3, r2, r3
 800c0b4:	3308      	adds	r3, #8
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	3302      	adds	r3, #2
 800c0bc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	795b      	ldrb	r3, [r3, #5]
 800c0c2:	78fa      	ldrb	r2, [r7, #3]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d002      	beq.n	800c0ce <USBH_FindInterface+0x4e>
 800c0c8:	78fb      	ldrb	r3, [r7, #3]
 800c0ca:	2bff      	cmp	r3, #255	; 0xff
 800c0cc:	d111      	bne.n	800c0f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c0d2:	78ba      	ldrb	r2, [r7, #2]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d002      	beq.n	800c0de <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0d8:	78bb      	ldrb	r3, [r7, #2]
 800c0da:	2bff      	cmp	r3, #255	; 0xff
 800c0dc:	d109      	bne.n	800c0f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c0e2:	787a      	ldrb	r2, [r7, #1]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d002      	beq.n	800c0ee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c0e8:	787b      	ldrb	r3, [r7, #1]
 800c0ea:	2bff      	cmp	r3, #255	; 0xff
 800c0ec:	d101      	bne.n	800c0f2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
 800c0f0:	e006      	b.n	800c100 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c0f8:	7dfb      	ldrb	r3, [r7, #23]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d9d6      	bls.n	800c0ac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c0fe:	23ff      	movs	r3, #255	; 0xff
}
 800c100:	4618      	mov	r0, r3
 800c102:	371c      	adds	r7, #28
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f004 fd03 	bl	8010b20 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c11a:	2101      	movs	r1, #1
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f004 fe1a 	bl	8010d56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3708      	adds	r7, #8
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af04      	add	r7, sp, #16
 800c132:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c134:	2302      	movs	r3, #2
 800c136:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c138:	2300      	movs	r3, #0
 800c13a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c142:	b2db      	uxtb	r3, r3
 800c144:	2b01      	cmp	r3, #1
 800c146:	d102      	bne.n	800c14e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2203      	movs	r2, #3
 800c14c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b0b      	cmp	r3, #11
 800c156:	f200 823c 	bhi.w	800c5d2 <USBH_Process+0x4a6>
 800c15a:	a201      	add	r2, pc, #4	; (adr r2, 800c160 <USBH_Process+0x34>)
 800c15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c160:	0800c191 	.word	0x0800c191
 800c164:	0800c1df 	.word	0x0800c1df
 800c168:	0800c263 	.word	0x0800c263
 800c16c:	0800c551 	.word	0x0800c551
 800c170:	0800c5d3 	.word	0x0800c5d3
 800c174:	0800c323 	.word	0x0800c323
 800c178:	0800c4db 	.word	0x0800c4db
 800c17c:	0800c375 	.word	0x0800c375
 800c180:	0800c3b1 	.word	0x0800c3b1
 800c184:	0800c3eb 	.word	0x0800c3eb
 800c188:	0800c433 	.word	0x0800c433
 800c18c:	0800c539 	.word	0x0800c539
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 821c 	beq.w	800c5d6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c1a4:	20c8      	movs	r0, #200	; 0xc8
 800c1a6:	f004 fe20 	bl	8010dea <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f004 fd13 	bl	8010bd6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f001 fdb2 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c1dc:	e1fb      	b.n	800c5d6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d107      	bne.n	800c1f8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2202      	movs	r2, #2
 800c1f4:	701a      	strb	r2, [r3, #0]
 800c1f6:	e025      	b.n	800c244 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c1fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c202:	d914      	bls.n	800c22e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c20a:	3301      	adds	r3, #1
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d903      	bls.n	800c226 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	220d      	movs	r2, #13
 800c222:	701a      	strb	r2, [r3, #0]
 800c224:	e00e      	b.n	800c244 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	701a      	strb	r2, [r3, #0]
 800c22c:	e00a      	b.n	800c244 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c234:	f103 020a 	add.w	r2, r3, #10
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c23e:	200a      	movs	r0, #10
 800c240:	f004 fdd3 	bl	8010dea <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c258:	2300      	movs	r3, #0
 800c25a:	2200      	movs	r2, #0
 800c25c:	f001 fd70 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      break;
 800c260:	e1c0      	b.n	800c5e4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d005      	beq.n	800c278 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c272:	2104      	movs	r1, #4
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c278:	2064      	movs	r0, #100	; 0x64
 800c27a:	f004 fdb6 	bl	8010dea <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f004 fc84 	bl	8010b8c <USBH_LL_GetSpeed>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2205      	movs	r2, #5
 800c292:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c294:	2100      	movs	r1, #0
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f001 fb23 	bl	800d8e2 <USBH_AllocPipe>
 800c29c:	4603      	mov	r3, r0
 800c29e:	461a      	mov	r2, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c2a4:	2180      	movs	r1, #128	; 0x80
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f001 fb1b 	bl	800d8e2 <USBH_AllocPipe>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7919      	ldrb	r1, [r3, #4]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c2c8:	b292      	uxth	r2, r2
 800c2ca:	9202      	str	r2, [sp, #8]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	9201      	str	r2, [sp, #4]
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2280      	movs	r2, #128	; 0x80
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f001 fad4 	bl	800d884 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	7959      	ldrb	r1, [r3, #5]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c2f0:	b292      	uxth	r2, r2
 800c2f2:	9202      	str	r2, [sp, #8]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	9201      	str	r2, [sp, #4]
 800c2f8:	9300      	str	r3, [sp, #0]
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 fac0 	bl	800d884 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c318:	2300      	movs	r3, #0
 800c31a:	2200      	movs	r2, #0
 800c31c:	f001 fd10 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      break;
 800c320:	e160      	b.n	800c5e4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f964 	bl	800c5f0 <USBH_HandleEnum>
 800c328:	4603      	mov	r3, r0
 800c32a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
 800c32e:	b2db      	uxtb	r3, r3
 800c330:	2b00      	cmp	r3, #0
 800c332:	f040 8152 	bne.w	800c5da <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c344:	2b01      	cmp	r3, #1
 800c346:	d103      	bne.n	800c350 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2208      	movs	r2, #8
 800c34c:	701a      	strb	r2, [r3, #0]
 800c34e:	e002      	b.n	800c356 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2207      	movs	r2, #7
 800c354:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2205      	movs	r2, #5
 800c35a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c36a:	2300      	movs	r3, #0
 800c36c:	2200      	movs	r2, #0
 800c36e:	f001 fce7 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800c372:	e132      	b.n	800c5da <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f000 812f 	beq.w	800c5de <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c386:	2101      	movs	r1, #1
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2208      	movs	r2, #8
 800c390:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2205      	movs	r2, #5
 800c396:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f001 fcc9 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800c3ae:	e116      	b.n	800c5de <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	4619      	mov	r1, r3
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 fcf8 	bl	800cdb0 <USBH_SetCfg>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d102      	bne.n	800c3cc <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2209      	movs	r2, #9
 800c3ca:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f001 fcac 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      break;
 800c3e8:	e0fc      	b.n	800c5e4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c3f0:	f003 0320 	and.w	r3, r3, #32
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00a      	beq.n	800c40e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 fcfb 	bl	800cdf6 <USBH_SetFeature>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	220a      	movs	r2, #10
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	e002      	b.n	800c414 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	220a      	movs	r2, #10
 800c412:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c428:	2300      	movs	r3, #0
 800c42a:	2200      	movs	r2, #0
 800c42c:	f001 fc88 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      break;
 800c430:	e0d8      	b.n	800c5e4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d03f      	beq.n	800c4bc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c444:	2300      	movs	r3, #0
 800c446:	73fb      	strb	r3, [r7, #15]
 800c448:	e016      	b.n	800c478 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c44a:	7bfa      	ldrb	r2, [r7, #15]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	32de      	adds	r2, #222	; 0xde
 800c450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c454:	791a      	ldrb	r2, [r3, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d108      	bne.n	800c472 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c460:	7bfa      	ldrb	r2, [r7, #15]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	32de      	adds	r2, #222	; 0xde
 800c466:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c470:	e005      	b.n	800c47e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c472:	7bfb      	ldrb	r3, [r7, #15]
 800c474:	3301      	adds	r3, #1
 800c476:	73fb      	strb	r3, [r7, #15]
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0e5      	beq.n	800c44a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c484:	2b00      	cmp	r3, #0
 800c486:	d016      	beq.n	800c4b6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	4798      	blx	r3
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d109      	bne.n	800c4ae <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2206      	movs	r2, #6
 800c49e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4a6:	2103      	movs	r1, #3
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	4798      	blx	r3
 800c4ac:	e006      	b.n	800c4bc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	220d      	movs	r2, #13
 800c4b2:	701a      	strb	r2, [r3, #0]
 800c4b4:	e002      	b.n	800c4bc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	220d      	movs	r2, #13
 800c4ba:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2205      	movs	r2, #5
 800c4c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f001 fc34 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      break;
 800c4d8:	e084      	b.n	800c5e4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d017      	beq.n	800c514 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4ea:	691b      	ldr	r3, [r3, #16]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	4798      	blx	r3
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c4f4:	7bbb      	ldrb	r3, [r7, #14]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d103      	bne.n	800c504 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	220b      	movs	r2, #11
 800c500:	701a      	strb	r2, [r3, #0]
 800c502:	e00a      	b.n	800c51a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800c504:	7bbb      	ldrb	r3, [r7, #14]
 800c506:	b2db      	uxtb	r3, r3
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d106      	bne.n	800c51a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	220d      	movs	r2, #13
 800c510:	701a      	strb	r2, [r3, #0]
 800c512:	e002      	b.n	800c51a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	220d      	movs	r2, #13
 800c518:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2205      	movs	r2, #5
 800c51e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c52e:	2300      	movs	r3, #0
 800c530:	2200      	movs	r2, #0
 800c532:	f001 fc05 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      break;
 800c536:	e055      	b.n	800c5e4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d04f      	beq.n	800c5e2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	4798      	blx	r3
      }
      break;
 800c54e:	e048      	b.n	800c5e2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff fcf7 	bl	800bf4c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c564:	2b00      	cmp	r3, #0
 800c566:	d009      	beq.n	800c57c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c582:	2b00      	cmp	r3, #0
 800c584:	d005      	beq.n	800c592 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c58c:	2105      	movs	r1, #5
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d107      	bne.n	800c5ae <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7ff fdb0 	bl	800c10c <USBH_Start>
 800c5ac:	e002      	b.n	800c5b4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f004 fab6 	bl	8010b20 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f001 fbb8 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      break;
 800c5d0:	e008      	b.n	800c5e4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c5d2:	bf00      	nop
 800c5d4:	e006      	b.n	800c5e4 <USBH_Process+0x4b8>
      break;
 800c5d6:	bf00      	nop
 800c5d8:	e004      	b.n	800c5e4 <USBH_Process+0x4b8>
      break;
 800c5da:	bf00      	nop
 800c5dc:	e002      	b.n	800c5e4 <USBH_Process+0x4b8>
    break;
 800c5de:	bf00      	nop
 800c5e0:	e000      	b.n	800c5e4 <USBH_Process+0x4b8>
      break;
 800c5e2:	bf00      	nop
  }
  return USBH_OK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop

0800c5f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b088      	sub	sp, #32
 800c5f4:	af04      	add	r7, sp, #16
 800c5f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	785b      	ldrb	r3, [r3, #1]
 800c604:	2b07      	cmp	r3, #7
 800c606:	f200 8208 	bhi.w	800ca1a <USBH_HandleEnum+0x42a>
 800c60a:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <USBH_HandleEnum+0x20>)
 800c60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c610:	0800c631 	.word	0x0800c631
 800c614:	0800c6ef 	.word	0x0800c6ef
 800c618:	0800c759 	.word	0x0800c759
 800c61c:	0800c7e7 	.word	0x0800c7e7
 800c620:	0800c851 	.word	0x0800c851
 800c624:	0800c8c1 	.word	0x0800c8c1
 800c628:	0800c95d 	.word	0x0800c95d
 800c62c:	0800c9db 	.word	0x0800c9db
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c630:	2108      	movs	r1, #8
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 faec 	bl	800cc10 <USBH_Get_DevDesc>
 800c638:	4603      	mov	r3, r0
 800c63a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d130      	bne.n	800c6a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2201      	movs	r2, #1
 800c650:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	7919      	ldrb	r1, [r3, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c666:	b292      	uxth	r2, r2
 800c668:	9202      	str	r2, [sp, #8]
 800c66a:	2200      	movs	r2, #0
 800c66c:	9201      	str	r2, [sp, #4]
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	4603      	mov	r3, r0
 800c672:	2280      	movs	r2, #128	; 0x80
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f001 f905 	bl	800d884 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	7959      	ldrb	r1, [r3, #5]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c68e:	b292      	uxth	r2, r2
 800c690:	9202      	str	r2, [sp, #8]
 800c692:	2200      	movs	r2, #0
 800c694:	9201      	str	r2, [sp, #4]
 800c696:	9300      	str	r3, [sp, #0]
 800c698:	4603      	mov	r3, r0
 800c69a:	2200      	movs	r2, #0
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f001 f8f1 	bl	800d884 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c6a2:	e1bc      	b.n	800ca1e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c6a4:	7bbb      	ldrb	r3, [r7, #14]
 800c6a6:	2b03      	cmp	r3, #3
 800c6a8:	f040 81b9 	bne.w	800ca1e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c6c2:	2b03      	cmp	r3, #3
 800c6c4:	d903      	bls.n	800c6ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	220d      	movs	r2, #13
 800c6ca:	701a      	strb	r2, [r3, #0]
      break;
 800c6cc:	e1a7      	b.n	800ca1e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	795b      	ldrb	r3, [r3, #5]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 f925 	bl	800d924 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	791b      	ldrb	r3, [r3, #4]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f001 f91f 	bl	800d924 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	701a      	strb	r2, [r3, #0]
      break;
 800c6ec:	e197      	b.n	800ca1e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c6ee:	2112      	movs	r1, #18
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fa8d 	bl	800cc10 <USBH_Get_DevDesc>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c6fa:	7bbb      	ldrb	r3, [r7, #14]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d103      	bne.n	800c708 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c706:	e18c      	b.n	800ca22 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c708:	7bbb      	ldrb	r3, [r7, #14]
 800c70a:	2b03      	cmp	r3, #3
 800c70c:	f040 8189 	bne.w	800ca22 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c716:	3301      	adds	r3, #1
 800c718:	b2da      	uxtb	r2, r3
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c726:	2b03      	cmp	r3, #3
 800c728:	d903      	bls.n	800c732 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	220d      	movs	r2, #13
 800c72e:	701a      	strb	r2, [r3, #0]
      break;
 800c730:	e177      	b.n	800ca22 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	795b      	ldrb	r3, [r3, #5]
 800c736:	4619      	mov	r1, r3
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f001 f8f3 	bl	800d924 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	791b      	ldrb	r3, [r3, #4]
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f001 f8ed 	bl	800d924 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	701a      	strb	r2, [r3, #0]
      break;
 800c756:	e164      	b.n	800ca22 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c758:	2101      	movs	r1, #1
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 fb04 	bl	800cd68 <USBH_SetAddress>
 800c760:	4603      	mov	r3, r0
 800c762:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c764:	7bbb      	ldrb	r3, [r7, #14]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d132      	bne.n	800c7d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c76a:	2002      	movs	r0, #2
 800c76c:	f004 fb3d 	bl	8010dea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2203      	movs	r2, #3
 800c77c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	7919      	ldrb	r1, [r3, #4]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c792:	b292      	uxth	r2, r2
 800c794:	9202      	str	r2, [sp, #8]
 800c796:	2200      	movs	r2, #0
 800c798:	9201      	str	r2, [sp, #4]
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	4603      	mov	r3, r0
 800c79e:	2280      	movs	r2, #128	; 0x80
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f001 f86f 	bl	800d884 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	7959      	ldrb	r1, [r3, #5]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c7ba:	b292      	uxth	r2, r2
 800c7bc:	9202      	str	r2, [sp, #8]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	9201      	str	r2, [sp, #4]
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f001 f85b 	bl	800d884 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c7ce:	e12a      	b.n	800ca26 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c7d0:	7bbb      	ldrb	r3, [r7, #14]
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	f040 8127 	bne.w	800ca26 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	220d      	movs	r2, #13
 800c7dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	705a      	strb	r2, [r3, #1]
      break;
 800c7e4:	e11f      	b.n	800ca26 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800c7e6:	2109      	movs	r1, #9
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fa39 	bl	800cc60 <USBH_Get_CfgDesc>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c7f2:	7bbb      	ldrb	r3, [r7, #14]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d103      	bne.n	800c800 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2204      	movs	r2, #4
 800c7fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c7fe:	e114      	b.n	800ca2a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c800:	7bbb      	ldrb	r3, [r7, #14]
 800c802:	2b03      	cmp	r3, #3
 800c804:	f040 8111 	bne.w	800ca2a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c80e:	3301      	adds	r3, #1
 800c810:	b2da      	uxtb	r2, r3
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d903      	bls.n	800c82a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	220d      	movs	r2, #13
 800c826:	701a      	strb	r2, [r3, #0]
      break;
 800c828:	e0ff      	b.n	800ca2a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	795b      	ldrb	r3, [r3, #5]
 800c82e:	4619      	mov	r1, r3
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f001 f877 	bl	800d924 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	791b      	ldrb	r3, [r3, #4]
 800c83a:	4619      	mov	r1, r3
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f001 f871 	bl	800d924 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	701a      	strb	r2, [r3, #0]
      break;
 800c84e:	e0ec      	b.n	800ca2a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800c856:	4619      	mov	r1, r3
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f000 fa01 	bl	800cc60 <USBH_Get_CfgDesc>
 800c85e:	4603      	mov	r3, r0
 800c860:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c862:	7bbb      	ldrb	r3, [r7, #14]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d103      	bne.n	800c870 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2205      	movs	r2, #5
 800c86c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c86e:	e0de      	b.n	800ca2e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c870:	7bbb      	ldrb	r3, [r7, #14]
 800c872:	2b03      	cmp	r3, #3
 800c874:	f040 80db 	bne.w	800ca2e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c87e:	3301      	adds	r3, #1
 800c880:	b2da      	uxtb	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c88e:	2b03      	cmp	r3, #3
 800c890:	d903      	bls.n	800c89a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	220d      	movs	r2, #13
 800c896:	701a      	strb	r2, [r3, #0]
      break;
 800c898:	e0c9      	b.n	800ca2e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	795b      	ldrb	r3, [r3, #5]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f001 f83f 	bl	800d924 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	791b      	ldrb	r3, [r3, #4]
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 f839 	bl	800d924 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]
      break;
 800c8be:	e0b6      	b.n	800ca2e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d036      	beq.n	800c938 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c8d6:	23ff      	movs	r3, #255	; 0xff
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 f9e5 	bl	800cca8 <USBH_Get_StringDesc>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c8e2:	7bbb      	ldrb	r3, [r7, #14]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d111      	bne.n	800c90c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2206      	movs	r2, #6
 800c8ec:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2205      	movs	r2, #5
 800c8f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c902:	2300      	movs	r3, #0
 800c904:	2200      	movs	r2, #0
 800c906:	f001 fa1b 	bl	800dd40 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c90a:	e092      	b.n	800ca32 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c90c:	7bbb      	ldrb	r3, [r7, #14]
 800c90e:	2b03      	cmp	r3, #3
 800c910:	f040 808f 	bne.w	800ca32 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2206      	movs	r2, #6
 800c918:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	2205      	movs	r2, #5
 800c91e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c92e:	2300      	movs	r3, #0
 800c930:	2200      	movs	r2, #0
 800c932:	f001 fa05 	bl	800dd40 <osMessageQueuePut>
      break;
 800c936:	e07c      	b.n	800ca32 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2206      	movs	r2, #6
 800c93c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2205      	movs	r2, #5
 800c942:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c952:	2300      	movs	r3, #0
 800c954:	2200      	movs	r2, #0
 800c956:	f001 f9f3 	bl	800dd40 <osMessageQueuePut>
      break;
 800c95a:	e06a      	b.n	800ca32 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800c962:	2b00      	cmp	r3, #0
 800c964:	d027      	beq.n	800c9b6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c972:	23ff      	movs	r3, #255	; 0xff
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f997 	bl	800cca8 <USBH_Get_StringDesc>
 800c97a:	4603      	mov	r3, r0
 800c97c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c97e:	7bbb      	ldrb	r3, [r7, #14]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d103      	bne.n	800c98c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2207      	movs	r2, #7
 800c988:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c98a:	e054      	b.n	800ca36 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c98c:	7bbb      	ldrb	r3, [r7, #14]
 800c98e:	2b03      	cmp	r3, #3
 800c990:	d151      	bne.n	800ca36 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2207      	movs	r2, #7
 800c996:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2205      	movs	r2, #5
 800c99c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f001 f9c6 	bl	800dd40 <osMessageQueuePut>
      break;
 800c9b4:	e03f      	b.n	800ca36 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2207      	movs	r2, #7
 800c9ba:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2205      	movs	r2, #5
 800c9c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f001 f9b4 	bl	800dd40 <osMessageQueuePut>
      break;
 800c9d8:	e02d      	b.n	800ca36 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d017      	beq.n	800ca14 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c9f0:	23ff      	movs	r3, #255	; 0xff
 800c9f2:	6878      	ldr	r0, [r7, #4]
 800c9f4:	f000 f958 	bl	800cca8 <USBH_Get_StringDesc>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c9fc:	7bbb      	ldrb	r3, [r7, #14]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d102      	bne.n	800ca08 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ca06:	e018      	b.n	800ca3a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca08:	7bbb      	ldrb	r3, [r7, #14]
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d115      	bne.n	800ca3a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73fb      	strb	r3, [r7, #15]
      break;
 800ca12:	e012      	b.n	800ca3a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ca14:	2300      	movs	r3, #0
 800ca16:	73fb      	strb	r3, [r7, #15]
      break;
 800ca18:	e00f      	b.n	800ca3a <USBH_HandleEnum+0x44a>

    default:
      break;
 800ca1a:	bf00      	nop
 800ca1c:	e00e      	b.n	800ca3c <USBH_HandleEnum+0x44c>
      break;
 800ca1e:	bf00      	nop
 800ca20:	e00c      	b.n	800ca3c <USBH_HandleEnum+0x44c>
      break;
 800ca22:	bf00      	nop
 800ca24:	e00a      	b.n	800ca3c <USBH_HandleEnum+0x44c>
      break;
 800ca26:	bf00      	nop
 800ca28:	e008      	b.n	800ca3c <USBH_HandleEnum+0x44c>
      break;
 800ca2a:	bf00      	nop
 800ca2c:	e006      	b.n	800ca3c <USBH_HandleEnum+0x44c>
      break;
 800ca2e:	bf00      	nop
 800ca30:	e004      	b.n	800ca3c <USBH_HandleEnum+0x44c>
      break;
 800ca32:	bf00      	nop
 800ca34:	e002      	b.n	800ca3c <USBH_HandleEnum+0x44c>
      break;
 800ca36:	bf00      	nop
 800ca38:	e000      	b.n	800ca3c <USBH_HandleEnum+0x44c>
      break;
 800ca3a:	bf00      	nop
  }
  return Status;
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop

0800ca48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ca5a:	bf00      	nop
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b082      	sub	sp, #8
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f804 	bl	800ca8a <USBH_HandleSof>
}
 800ca82:	bf00      	nop
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	2b0b      	cmp	r3, #11
 800ca9a:	d10a      	bne.n	800cab2 <USBH_HandleSof+0x28>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d005      	beq.n	800cab2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caac:	699b      	ldr	r3, [r3, #24]
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	4798      	blx	r3
  }
}
 800cab2:	bf00      	nop
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}

0800caba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800caba:	b580      	push	{r7, lr}
 800cabc:	b082      	sub	sp, #8
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2201      	movs	r2, #1
 800cac6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2201      	movs	r2, #1
 800cace:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cade:	2300      	movs	r3, #0
 800cae0:	2200      	movs	r2, #0
 800cae2:	f001 f92d 	bl	800dd40 <osMessageQueuePut>
#endif
#endif

  return;
 800cae6:	bf00      	nop
}
 800cae8:	3708      	adds	r7, #8
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}

0800caee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800caee:	b480      	push	{r7}
 800caf0:	b083      	sub	sp, #12
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cafe:	bf00      	nop
}
 800cb00:	370c      	adds	r7, #12
 800cb02:	46bd      	mov	sp, r7
 800cb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb08:	4770      	bx	lr

0800cb0a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cb0a:	b580      	push	{r7, lr}
 800cb0c:	b082      	sub	sp, #8
 800cb0e:	af00      	add	r7, sp, #0
 800cb10:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2201      	movs	r2, #1
 800cb16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cb3e:	2300      	movs	r3, #0
 800cb40:	2200      	movs	r2, #0
 800cb42:	f001 f8fd 	bl	800dd40 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f003 fff0 	bl	8010b56 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	791b      	ldrb	r3, [r3, #4]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fed1 	bl	800d924 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	795b      	ldrb	r3, [r3, #5]
 800cb86:	4619      	mov	r1, r3
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fecb 	bl	800d924 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cba2:	2300      	movs	r3, #0
 800cba4:	2200      	movs	r2, #0
 800cba6:	f001 f8cb 	bl	800dd40 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cbc8:	f04f 33ff 	mov.w	r3, #4294967295
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f001 f92b 	bl	800de28 <osMessageQueueGet>
 800cbd2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d1f0      	bne.n	800cbbc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7ff faa6 	bl	800c12c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800cbe0:	e7ec      	b.n	800cbbc <USBH_Process_OS+0x8>

0800cbe2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2201      	movs	r2, #1
 800cbee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cbfe:	2300      	movs	r3, #0
 800cc00:	2200      	movs	r2, #0
 800cc02:	f001 f89d 	bl	800dd40 <osMessageQueuePut>
#endif

  return USBH_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cc22:	78fb      	ldrb	r3, [r7, #3]
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	9300      	str	r3, [sp, #0]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc2e:	2100      	movs	r1, #0
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f864 	bl	800ccfe <USBH_GetDescriptor>
 800cc36:	4603      	mov	r3, r0
 800cc38:	73fb      	strb	r3, [r7, #15]
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10a      	bne.n	800cc56 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f203 3026 	addw	r0, r3, #806	; 0x326
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cc4c:	78fa      	ldrb	r2, [r7, #3]
 800cc4e:	b292      	uxth	r2, r2
 800cc50:	4619      	mov	r1, r3
 800cc52:	f000 f918 	bl	800ce86 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b086      	sub	sp, #24
 800cc64:	af02      	add	r7, sp, #8
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	331c      	adds	r3, #28
 800cc70:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cc72:	887b      	ldrh	r3, [r7, #2]
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc7c:	2100      	movs	r1, #0
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f83d 	bl	800ccfe <USBH_GetDescriptor>
 800cc84:	4603      	mov	r3, r0
 800cc86:	72fb      	strb	r3, [r7, #11]
 800cc88:	7afb      	ldrb	r3, [r7, #11]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d107      	bne.n	800cc9e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cc94:	887a      	ldrh	r2, [r7, #2]
 800cc96:	68f9      	ldr	r1, [r7, #12]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f000 f964 	bl	800cf66 <USBH_ParseCfgDesc>
  }

  return status;
 800cc9e:	7afb      	ldrb	r3, [r7, #11]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b088      	sub	sp, #32
 800ccac:	af02      	add	r7, sp, #8
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	607a      	str	r2, [r7, #4]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	72fb      	strb	r3, [r7, #11]
 800ccb8:	4613      	mov	r3, r2
 800ccba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ccc4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cccc:	893b      	ldrh	r3, [r7, #8]
 800ccce:	9300      	str	r3, [sp, #0]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 f812 	bl	800ccfe <USBH_GetDescriptor>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	75fb      	strb	r3, [r7, #23]
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d107      	bne.n	800ccf4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ccea:	893a      	ldrh	r2, [r7, #8]
 800ccec:	6879      	ldr	r1, [r7, #4]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fa37 	bl	800d162 <USBH_ParseStringDesc>
  }

  return status;
 800ccf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b084      	sub	sp, #16
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	60f8      	str	r0, [r7, #12]
 800cd06:	607b      	str	r3, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	72fb      	strb	r3, [r7, #11]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	789b      	ldrb	r3, [r3, #2]
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d11c      	bne.n	800cd52 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cd18:	7afb      	ldrb	r3, [r7, #11]
 800cd1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2206      	movs	r2, #6
 800cd28:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	893a      	ldrh	r2, [r7, #8]
 800cd2e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cd30:	893b      	ldrh	r3, [r7, #8]
 800cd32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cd36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd3a:	d104      	bne.n	800cd46 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f240 4209 	movw	r2, #1033	; 0x409
 800cd42:	829a      	strh	r2, [r3, #20]
 800cd44:	e002      	b.n	800cd4c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	8b3a      	ldrh	r2, [r7, #24]
 800cd50:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cd52:	8b3b      	ldrh	r3, [r7, #24]
 800cd54:	461a      	mov	r2, r3
 800cd56:	6879      	ldr	r1, [r7, #4]
 800cd58:	68f8      	ldr	r0, [r7, #12]
 800cd5a:	f000 fa50 	bl	800d1fe <USBH_CtlReq>
 800cd5e:	4603      	mov	r3, r0
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b082      	sub	sp, #8
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	789b      	ldrb	r3, [r3, #2]
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d10f      	bne.n	800cd9c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2205      	movs	r2, #5
 800cd86:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cd88:	78fb      	ldrb	r3, [r7, #3]
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	2100      	movs	r1, #0
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fa2c 	bl	800d1fe <USBH_CtlReq>
 800cda6:	4603      	mov	r3, r0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	789b      	ldrb	r3, [r3, #2]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d10e      	bne.n	800cde2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2209      	movs	r2, #9
 800cdce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	887a      	ldrh	r2, [r7, #2]
 800cdd4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cde2:	2200      	movs	r2, #0
 800cde4:	2100      	movs	r1, #0
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fa09 	bl	800d1fe <USBH_CtlReq>
 800cdec:	4603      	mov	r3, r0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b082      	sub	sp, #8
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	460b      	mov	r3, r1
 800ce00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	789b      	ldrb	r3, [r3, #2]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d10f      	bne.n	800ce2a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2203      	movs	r2, #3
 800ce14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ce16:	78fb      	ldrb	r3, [r7, #3]
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 f9e5 	bl	800d1fe <USBH_CtlReq>
 800ce34:	4603      	mov	r3, r0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	460b      	mov	r3, r1
 800ce48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	789b      	ldrb	r3, [r3, #2]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d10f      	bne.n	800ce72 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2202      	movs	r2, #2
 800ce56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	b29a      	uxth	r2, r3
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ce72:	2200      	movs	r2, #0
 800ce74:	2100      	movs	r1, #0
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f9c1 	bl	800d1fe <USBH_CtlReq>
 800ce7c:	4603      	mov	r3, r0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}

0800ce86 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ce86:	b480      	push	{r7}
 800ce88:	b085      	sub	sp, #20
 800ce8a:	af00      	add	r7, sp, #0
 800ce8c:	60f8      	str	r0, [r7, #12]
 800ce8e:	60b9      	str	r1, [r7, #8]
 800ce90:	4613      	mov	r3, r2
 800ce92:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	781a      	ldrb	r2, [r3, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	785a      	ldrb	r2, [r3, #1]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	3302      	adds	r3, #2
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	b29a      	uxth	r2, r3
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	3303      	adds	r3, #3
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	021b      	lsls	r3, r3, #8
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	4313      	orrs	r3, r2
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	791a      	ldrb	r2, [r3, #4]
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	795a      	ldrb	r2, [r3, #5]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	799a      	ldrb	r2, [r3, #6]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	79da      	ldrb	r2, [r3, #7]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800cee0:	88fb      	ldrh	r3, [r7, #6]
 800cee2:	2b08      	cmp	r3, #8
 800cee4:	d939      	bls.n	800cf5a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	3308      	adds	r3, #8
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	3309      	adds	r3, #9
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	021b      	lsls	r3, r3, #8
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	4313      	orrs	r3, r2
 800cefc:	b29a      	uxth	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	330a      	adds	r3, #10
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	330b      	adds	r3, #11
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	021b      	lsls	r3, r3, #8
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	4313      	orrs	r3, r2
 800cf18:	b29a      	uxth	r2, r3
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	330c      	adds	r3, #12
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	330d      	adds	r3, #13
 800cf2a:	781b      	ldrb	r3, [r3, #0]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	021b      	lsls	r3, r3, #8
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	4313      	orrs	r3, r2
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	7b9a      	ldrb	r2, [r3, #14]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	7bda      	ldrb	r2, [r3, #15]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	7c1a      	ldrb	r2, [r3, #16]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800cf52:	68bb      	ldr	r3, [r7, #8]
 800cf54:	7c5a      	ldrb	r2, [r3, #17]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	745a      	strb	r2, [r3, #17]
  }
}
 800cf5a:	bf00      	nop
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b08a      	sub	sp, #40	; 0x28
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	60f8      	str	r0, [r7, #12]
 800cf6e:	60b9      	str	r1, [r7, #8]
 800cf70:	4613      	mov	r3, r2
 800cf72:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	781a      	ldrb	r2, [r3, #0]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	785a      	ldrb	r2, [r3, #1]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	3302      	adds	r3, #2
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	3303      	adds	r3, #3
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	021b      	lsls	r3, r3, #8
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	4313      	orrs	r3, r2
 800cfae:	b29a      	uxth	r2, r3
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800cfb4:	68bb      	ldr	r3, [r7, #8]
 800cfb6:	791a      	ldrb	r2, [r3, #4]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800cfbc:	68bb      	ldr	r3, [r7, #8]
 800cfbe:	795a      	ldrb	r2, [r3, #5]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	799a      	ldrb	r2, [r3, #6]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	79da      	ldrb	r2, [r3, #7]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	7a1a      	ldrb	r2, [r3, #8]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800cfdc:	88fb      	ldrh	r3, [r7, #6]
 800cfde:	2b09      	cmp	r3, #9
 800cfe0:	d95f      	bls.n	800d0a2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800cfe2:	2309      	movs	r3, #9
 800cfe4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800cfea:	e051      	b.n	800d090 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800cfec:	f107 0316 	add.w	r3, r7, #22
 800cff0:	4619      	mov	r1, r3
 800cff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cff4:	f000 f8e8 	bl	800d1c8 <USBH_GetNextDesc>
 800cff8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	785b      	ldrb	r3, [r3, #1]
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d146      	bne.n	800d090 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d002:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d006:	221a      	movs	r2, #26
 800d008:	fb02 f303 	mul.w	r3, r2, r3
 800d00c:	3308      	adds	r3, #8
 800d00e:	68fa      	ldr	r2, [r7, #12]
 800d010:	4413      	add	r3, r2
 800d012:	3302      	adds	r3, #2
 800d014:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d016:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d018:	69f8      	ldr	r0, [r7, #28]
 800d01a:	f000 f846 	bl	800d0aa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d01e:	2300      	movs	r3, #0
 800d020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d024:	2300      	movs	r3, #0
 800d026:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d028:	e022      	b.n	800d070 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d02a:	f107 0316 	add.w	r3, r7, #22
 800d02e:	4619      	mov	r1, r3
 800d030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d032:	f000 f8c9 	bl	800d1c8 <USBH_GetNextDesc>
 800d036:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	785b      	ldrb	r3, [r3, #1]
 800d03c:	2b05      	cmp	r3, #5
 800d03e:	d117      	bne.n	800d070 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d040:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d044:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d048:	3201      	adds	r2, #1
 800d04a:	00d2      	lsls	r2, r2, #3
 800d04c:	211a      	movs	r1, #26
 800d04e:	fb01 f303 	mul.w	r3, r1, r3
 800d052:	4413      	add	r3, r2
 800d054:	3308      	adds	r3, #8
 800d056:	68fa      	ldr	r2, [r7, #12]
 800d058:	4413      	add	r3, r2
 800d05a:	3304      	adds	r3, #4
 800d05c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d05e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d060:	69b8      	ldr	r0, [r7, #24]
 800d062:	f000 f851 	bl	800d108 <USBH_ParseEPDesc>
            ep_ix++;
 800d066:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d06a:	3301      	adds	r3, #1
 800d06c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	791b      	ldrb	r3, [r3, #4]
 800d074:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d078:	429a      	cmp	r2, r3
 800d07a:	d204      	bcs.n	800d086 <USBH_ParseCfgDesc+0x120>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	885a      	ldrh	r2, [r3, #2]
 800d080:	8afb      	ldrh	r3, [r7, #22]
 800d082:	429a      	cmp	r2, r3
 800d084:	d8d1      	bhi.n	800d02a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d08a:	3301      	adds	r3, #1
 800d08c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d090:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d094:	2b01      	cmp	r3, #1
 800d096:	d804      	bhi.n	800d0a2 <USBH_ParseCfgDesc+0x13c>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	885a      	ldrh	r2, [r3, #2]
 800d09c:	8afb      	ldrh	r3, [r7, #22]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d8a4      	bhi.n	800cfec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d0a2:	bf00      	nop
 800d0a4:	3728      	adds	r7, #40	; 0x28
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}

0800d0aa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
 800d0b2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781a      	ldrb	r2, [r3, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	785a      	ldrb	r2, [r3, #1]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	789a      	ldrb	r2, [r3, #2]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	78da      	ldrb	r2, [r3, #3]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	791a      	ldrb	r2, [r3, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	795a      	ldrb	r2, [r3, #5]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	799a      	ldrb	r2, [r3, #6]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	79da      	ldrb	r2, [r3, #7]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	7a1a      	ldrb	r2, [r3, #8]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	721a      	strb	r2, [r3, #8]
}
 800d0fc:	bf00      	nop
 800d0fe:	370c      	adds	r7, #12
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d108:	b480      	push	{r7}
 800d10a:	b083      	sub	sp, #12
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	781a      	ldrb	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	785a      	ldrb	r2, [r3, #1]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	789a      	ldrb	r2, [r3, #2]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	78da      	ldrb	r2, [r3, #3]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	3304      	adds	r3, #4
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	b29a      	uxth	r2, r3
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	3305      	adds	r3, #5
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	b29b      	uxth	r3, r3
 800d142:	021b      	lsls	r3, r3, #8
 800d144:	b29b      	uxth	r3, r3
 800d146:	4313      	orrs	r3, r2
 800d148:	b29a      	uxth	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	799a      	ldrb	r2, [r3, #6]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	719a      	strb	r2, [r3, #6]
}
 800d156:	bf00      	nop
 800d158:	370c      	adds	r7, #12
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr

0800d162 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d162:	b480      	push	{r7}
 800d164:	b087      	sub	sp, #28
 800d166:	af00      	add	r7, sp, #0
 800d168:	60f8      	str	r0, [r7, #12]
 800d16a:	60b9      	str	r1, [r7, #8]
 800d16c:	4613      	mov	r3, r2
 800d16e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	3301      	adds	r3, #1
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	2b03      	cmp	r3, #3
 800d178:	d120      	bne.n	800d1bc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	1e9a      	subs	r2, r3, #2
 800d180:	88fb      	ldrh	r3, [r7, #6]
 800d182:	4293      	cmp	r3, r2
 800d184:	bf28      	it	cs
 800d186:	4613      	movcs	r3, r2
 800d188:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3302      	adds	r3, #2
 800d18e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d190:	2300      	movs	r3, #0
 800d192:	82fb      	strh	r3, [r7, #22]
 800d194:	e00b      	b.n	800d1ae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d196:	8afb      	ldrh	r3, [r7, #22]
 800d198:	68fa      	ldr	r2, [r7, #12]
 800d19a:	4413      	add	r3, r2
 800d19c:	781a      	ldrb	r2, [r3, #0]
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d1a8:	8afb      	ldrh	r3, [r7, #22]
 800d1aa:	3302      	adds	r3, #2
 800d1ac:	82fb      	strh	r3, [r7, #22]
 800d1ae:	8afa      	ldrh	r2, [r7, #22]
 800d1b0:	8abb      	ldrh	r3, [r7, #20]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d3ef      	bcc.n	800d196 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	701a      	strb	r2, [r3, #0]
  }
}
 800d1bc:	bf00      	nop
 800d1be:	371c      	adds	r7, #28
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	881a      	ldrh	r2, [r3, #0]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	4413      	add	r3, r2
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3714      	adds	r7, #20
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fc:	4770      	bx	lr

0800d1fe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b086      	sub	sp, #24
 800d202:	af00      	add	r7, sp, #0
 800d204:	60f8      	str	r0, [r7, #12]
 800d206:	60b9      	str	r1, [r7, #8]
 800d208:	4613      	mov	r3, r2
 800d20a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d20c:	2301      	movs	r3, #1
 800d20e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	789b      	ldrb	r3, [r3, #2]
 800d214:	2b01      	cmp	r3, #1
 800d216:	d002      	beq.n	800d21e <USBH_CtlReq+0x20>
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d01d      	beq.n	800d258 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d21c:	e043      	b.n	800d2a6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	68ba      	ldr	r2, [r7, #8]
 800d222:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	88fa      	ldrh	r2, [r7, #6]
 800d228:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2201      	movs	r2, #1
 800d22e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	2202      	movs	r2, #2
 800d234:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d236:	2301      	movs	r3, #1
 800d238:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2203      	movs	r2, #3
 800d23e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d24e:	2300      	movs	r3, #0
 800d250:	2200      	movs	r2, #0
 800d252:	f000 fd75 	bl	800dd40 <osMessageQueuePut>
      break;
 800d256:	e026      	b.n	800d2a6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 f829 	bl	800d2b0 <USBH_HandleControl>
 800d25e:	4603      	mov	r3, r0
 800d260:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d262:	7dfb      	ldrb	r3, [r7, #23]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <USBH_CtlReq+0x70>
 800d268:	7dfb      	ldrb	r3, [r7, #23]
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d106      	bne.n	800d27c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2201      	movs	r2, #1
 800d272:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2200      	movs	r2, #0
 800d278:	761a      	strb	r2, [r3, #24]
 800d27a:	e005      	b.n	800d288 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d27c:	7dfb      	ldrb	r3, [r7, #23]
 800d27e:	2b02      	cmp	r3, #2
 800d280:	d102      	bne.n	800d288 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2203      	movs	r2, #3
 800d28c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d29c:	2300      	movs	r3, #0
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f000 fd4e 	bl	800dd40 <osMessageQueuePut>
      break;
 800d2a4:	bf00      	nop
  }
  return status;
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af02      	add	r7, sp, #8
 800d2b6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	7e1b      	ldrb	r3, [r3, #24]
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	2b0a      	cmp	r3, #10
 800d2c8:	f200 822b 	bhi.w	800d722 <USBH_HandleControl+0x472>
 800d2cc:	a201      	add	r2, pc, #4	; (adr r2, 800d2d4 <USBH_HandleControl+0x24>)
 800d2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d2:	bf00      	nop
 800d2d4:	0800d301 	.word	0x0800d301
 800d2d8:	0800d31b 	.word	0x0800d31b
 800d2dc:	0800d3bd 	.word	0x0800d3bd
 800d2e0:	0800d3e3 	.word	0x0800d3e3
 800d2e4:	0800d46f 	.word	0x0800d46f
 800d2e8:	0800d49b 	.word	0x0800d49b
 800d2ec:	0800d55d 	.word	0x0800d55d
 800d2f0:	0800d57f 	.word	0x0800d57f
 800d2f4:	0800d611 	.word	0x0800d611
 800d2f8:	0800d639 	.word	0x0800d639
 800d2fc:	0800d6cb 	.word	0x0800d6cb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f103 0110 	add.w	r1, r3, #16
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	795b      	ldrb	r3, [r3, #5]
 800d30a:	461a      	mov	r2, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 fa19 	bl	800d744 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2202      	movs	r2, #2
 800d316:	761a      	strb	r2, [r3, #24]
      break;
 800d318:	e20e      	b.n	800d738 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	795b      	ldrb	r3, [r3, #5]
 800d31e:	4619      	mov	r1, r3
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f003 fd05 	bl	8010d30 <USBH_LL_GetURBState>
 800d326:	4603      	mov	r3, r0
 800d328:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d32a:	7bbb      	ldrb	r3, [r7, #14]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d12c      	bne.n	800d38a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	7c1b      	ldrb	r3, [r3, #16]
 800d334:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d338:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	8adb      	ldrh	r3, [r3, #22]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00a      	beq.n	800d358 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d342:	7b7b      	ldrb	r3, [r7, #13]
 800d344:	2b80      	cmp	r3, #128	; 0x80
 800d346:	d103      	bne.n	800d350 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2203      	movs	r2, #3
 800d34c:	761a      	strb	r2, [r3, #24]
 800d34e:	e00d      	b.n	800d36c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2205      	movs	r2, #5
 800d354:	761a      	strb	r2, [r3, #24]
 800d356:	e009      	b.n	800d36c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d358:	7b7b      	ldrb	r3, [r7, #13]
 800d35a:	2b80      	cmp	r3, #128	; 0x80
 800d35c:	d103      	bne.n	800d366 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2209      	movs	r2, #9
 800d362:	761a      	strb	r2, [r3, #24]
 800d364:	e002      	b.n	800d36c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2207      	movs	r2, #7
 800d36a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2203      	movs	r2, #3
 800d370:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d380:	2300      	movs	r3, #0
 800d382:	2200      	movs	r2, #0
 800d384:	f000 fcdc 	bl	800dd40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d388:	e1cd      	b.n	800d726 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d38a:	7bbb      	ldrb	r3, [r7, #14]
 800d38c:	2b04      	cmp	r3, #4
 800d38e:	d003      	beq.n	800d398 <USBH_HandleControl+0xe8>
 800d390:	7bbb      	ldrb	r3, [r7, #14]
 800d392:	2b02      	cmp	r3, #2
 800d394:	f040 81c7 	bne.w	800d726 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	220b      	movs	r2, #11
 800d39c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2203      	movs	r2, #3
 800d3a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f000 fcc3 	bl	800dd40 <osMessageQueuePut>
      break;
 800d3ba:	e1b4      	b.n	800d726 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6899      	ldr	r1, [r3, #8]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	899a      	ldrh	r2, [r3, #12]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	791b      	ldrb	r3, [r3, #4]
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 f9f4 	bl	800d7c2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2204      	movs	r2, #4
 800d3de:	761a      	strb	r2, [r3, #24]
      break;
 800d3e0:	e1aa      	b.n	800d738 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	791b      	ldrb	r3, [r3, #4]
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f003 fca1 	bl	8010d30 <USBH_LL_GetURBState>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d3f2:	7bbb      	ldrb	r3, [r7, #14]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d110      	bne.n	800d41a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2209      	movs	r2, #9
 800d3fc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2203      	movs	r2, #3
 800d402:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d412:	2300      	movs	r3, #0
 800d414:	2200      	movs	r2, #0
 800d416:	f000 fc93 	bl	800dd40 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	2b05      	cmp	r3, #5
 800d41e:	d110      	bne.n	800d442 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d420:	2303      	movs	r3, #3
 800d422:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2203      	movs	r2, #3
 800d428:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d438:	2300      	movs	r3, #0
 800d43a:	2200      	movs	r2, #0
 800d43c:	f000 fc80 	bl	800dd40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d440:	e173      	b.n	800d72a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d442:	7bbb      	ldrb	r3, [r7, #14]
 800d444:	2b04      	cmp	r3, #4
 800d446:	f040 8170 	bne.w	800d72a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	220b      	movs	r2, #11
 800d44e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2203      	movs	r2, #3
 800d454:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d464:	2300      	movs	r3, #0
 800d466:	2200      	movs	r2, #0
 800d468:	f000 fc6a 	bl	800dd40 <osMessageQueuePut>
      break;
 800d46c:	e15d      	b.n	800d72a <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6899      	ldr	r1, [r3, #8]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	899a      	ldrh	r2, [r3, #12]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	7958      	ldrb	r0, [r3, #5]
 800d47a:	2301      	movs	r3, #1
 800d47c:	9300      	str	r3, [sp, #0]
 800d47e:	4603      	mov	r3, r0
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f979 	bl	800d778 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d48c:	b29a      	uxth	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2206      	movs	r2, #6
 800d496:	761a      	strb	r2, [r3, #24]
      break;
 800d498:	e14e      	b.n	800d738 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	795b      	ldrb	r3, [r3, #5]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f003 fc45 	bl	8010d30 <USBH_LL_GetURBState>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d4aa:	7bbb      	ldrb	r3, [r7, #14]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d111      	bne.n	800d4d4 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2207      	movs	r2, #7
 800d4b4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2203      	movs	r2, #3
 800d4ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	f000 fc37 	bl	800dd40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d4d2:	e12c      	b.n	800d72e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800d4d4:	7bbb      	ldrb	r3, [r7, #14]
 800d4d6:	2b05      	cmp	r3, #5
 800d4d8:	d113      	bne.n	800d502 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	220c      	movs	r2, #12
 800d4de:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d4e0:	2303      	movs	r3, #3
 800d4e2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2203      	movs	r2, #3
 800d4e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	f000 fc20 	bl	800dd40 <osMessageQueuePut>
      break;
 800d500:	e115      	b.n	800d72e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d502:	7bbb      	ldrb	r3, [r7, #14]
 800d504:	2b02      	cmp	r3, #2
 800d506:	d111      	bne.n	800d52c <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2205      	movs	r2, #5
 800d50c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2203      	movs	r2, #3
 800d512:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d522:	2300      	movs	r3, #0
 800d524:	2200      	movs	r2, #0
 800d526:	f000 fc0b 	bl	800dd40 <osMessageQueuePut>
      break;
 800d52a:	e100      	b.n	800d72e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800d52c:	7bbb      	ldrb	r3, [r7, #14]
 800d52e:	2b04      	cmp	r3, #4
 800d530:	f040 80fd 	bne.w	800d72e <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	220b      	movs	r2, #11
 800d538:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d53a:	2302      	movs	r3, #2
 800d53c:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2203      	movs	r2, #3
 800d542:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d552:	2300      	movs	r3, #0
 800d554:	2200      	movs	r2, #0
 800d556:	f000 fbf3 	bl	800dd40 <osMessageQueuePut>
      break;
 800d55a:	e0e8      	b.n	800d72e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	791b      	ldrb	r3, [r3, #4]
 800d560:	2200      	movs	r2, #0
 800d562:	2100      	movs	r1, #0
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f000 f92c 	bl	800d7c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d570:	b29a      	uxth	r2, r3
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2208      	movs	r2, #8
 800d57a:	761a      	strb	r2, [r3, #24]

      break;
 800d57c:	e0dc      	b.n	800d738 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	791b      	ldrb	r3, [r3, #4]
 800d582:	4619      	mov	r1, r3
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f003 fbd3 	bl	8010d30 <USBH_LL_GetURBState>
 800d58a:	4603      	mov	r3, r0
 800d58c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d58e:	7bbb      	ldrb	r3, [r7, #14]
 800d590:	2b01      	cmp	r3, #1
 800d592:	d113      	bne.n	800d5bc <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	220d      	movs	r2, #13
 800d598:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2203      	movs	r2, #3
 800d5a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f000 fbc3 	bl	800dd40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d5ba:	e0ba      	b.n	800d732 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800d5bc:	7bbb      	ldrb	r3, [r7, #14]
 800d5be:	2b04      	cmp	r3, #4
 800d5c0:	d111      	bne.n	800d5e6 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	220b      	movs	r2, #11
 800d5c6:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2203      	movs	r2, #3
 800d5cc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5dc:	2300      	movs	r3, #0
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f000 fbae 	bl	800dd40 <osMessageQueuePut>
      break;
 800d5e4:	e0a5      	b.n	800d732 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800d5e6:	7bbb      	ldrb	r3, [r7, #14]
 800d5e8:	2b05      	cmp	r3, #5
 800d5ea:	f040 80a2 	bne.w	800d732 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2203      	movs	r2, #3
 800d5f6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d606:	2300      	movs	r3, #0
 800d608:	2200      	movs	r2, #0
 800d60a:	f000 fb99 	bl	800dd40 <osMessageQueuePut>
      break;
 800d60e:	e090      	b.n	800d732 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	795a      	ldrb	r2, [r3, #5]
 800d614:	2301      	movs	r3, #1
 800d616:	9300      	str	r3, [sp, #0]
 800d618:	4613      	mov	r3, r2
 800d61a:	2200      	movs	r2, #0
 800d61c:	2100      	movs	r1, #0
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f8aa 	bl	800d778 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	220a      	movs	r2, #10
 800d634:	761a      	strb	r2, [r3, #24]
      break;
 800d636:	e07f      	b.n	800d738 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	795b      	ldrb	r3, [r3, #5]
 800d63c:	4619      	mov	r1, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f003 fb76 	bl	8010d30 <USBH_LL_GetURBState>
 800d644:	4603      	mov	r3, r0
 800d646:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d648:	7bbb      	ldrb	r3, [r7, #14]
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d113      	bne.n	800d676 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	220d      	movs	r2, #13
 800d656:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2203      	movs	r2, #3
 800d65c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d66c:	2300      	movs	r3, #0
 800d66e:	2200      	movs	r2, #0
 800d670:	f000 fb66 	bl	800dd40 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d674:	e05f      	b.n	800d736 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d676:	7bbb      	ldrb	r3, [r7, #14]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	d111      	bne.n	800d6a0 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2209      	movs	r2, #9
 800d680:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2203      	movs	r2, #3
 800d686:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d696:	2300      	movs	r3, #0
 800d698:	2200      	movs	r2, #0
 800d69a:	f000 fb51 	bl	800dd40 <osMessageQueuePut>
      break;
 800d69e:	e04a      	b.n	800d736 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800d6a0:	7bbb      	ldrb	r3, [r7, #14]
 800d6a2:	2b04      	cmp	r3, #4
 800d6a4:	d147      	bne.n	800d736 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	220b      	movs	r2, #11
 800d6aa:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2203      	movs	r2, #3
 800d6b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f000 fb3c 	bl	800dd40 <osMessageQueuePut>
      break;
 800d6c8:	e035      	b.n	800d736 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	7e5b      	ldrb	r3, [r3, #25]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	765a      	strb	r2, [r3, #25]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	7e5b      	ldrb	r3, [r3, #25]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d806      	bhi.n	800d6ec <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d6ea:	e025      	b.n	800d738 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d6f2:	2106      	movs	r1, #6
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	795b      	ldrb	r3, [r3, #5]
 800d702:	4619      	mov	r1, r3
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 f90d 	bl	800d924 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	791b      	ldrb	r3, [r3, #4]
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f907 	bl	800d924 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d71c:	2302      	movs	r3, #2
 800d71e:	73fb      	strb	r3, [r7, #15]
      break;
 800d720:	e00a      	b.n	800d738 <USBH_HandleControl+0x488>

    default:
      break;
 800d722:	bf00      	nop
 800d724:	e008      	b.n	800d738 <USBH_HandleControl+0x488>
      break;
 800d726:	bf00      	nop
 800d728:	e006      	b.n	800d738 <USBH_HandleControl+0x488>
      break;
 800d72a:	bf00      	nop
 800d72c:	e004      	b.n	800d738 <USBH_HandleControl+0x488>
      break;
 800d72e:	bf00      	nop
 800d730:	e002      	b.n	800d738 <USBH_HandleControl+0x488>
      break;
 800d732:	bf00      	nop
 800d734:	e000      	b.n	800d738 <USBH_HandleControl+0x488>
      break;
 800d736:	bf00      	nop
  }

  return status;
 800d738:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}
 800d742:	bf00      	nop

0800d744 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b088      	sub	sp, #32
 800d748:	af04      	add	r7, sp, #16
 800d74a:	60f8      	str	r0, [r7, #12]
 800d74c:	60b9      	str	r1, [r7, #8]
 800d74e:	4613      	mov	r3, r2
 800d750:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d752:	79f9      	ldrb	r1, [r7, #7]
 800d754:	2300      	movs	r3, #0
 800d756:	9303      	str	r3, [sp, #12]
 800d758:	2308      	movs	r3, #8
 800d75a:	9302      	str	r3, [sp, #8]
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	9301      	str	r3, [sp, #4]
 800d760:	2300      	movs	r3, #0
 800d762:	9300      	str	r3, [sp, #0]
 800d764:	2300      	movs	r3, #0
 800d766:	2200      	movs	r2, #0
 800d768:	68f8      	ldr	r0, [r7, #12]
 800d76a:	f003 fab0 	bl	8010cce <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d76e:	2300      	movs	r3, #0
}
 800d770:	4618      	mov	r0, r3
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	b088      	sub	sp, #32
 800d77c:	af04      	add	r7, sp, #16
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	4611      	mov	r1, r2
 800d784:	461a      	mov	r2, r3
 800d786:	460b      	mov	r3, r1
 800d788:	80fb      	strh	r3, [r7, #6]
 800d78a:	4613      	mov	r3, r2
 800d78c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d798:	2300      	movs	r3, #0
 800d79a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d79c:	7979      	ldrb	r1, [r7, #5]
 800d79e:	7e3b      	ldrb	r3, [r7, #24]
 800d7a0:	9303      	str	r3, [sp, #12]
 800d7a2:	88fb      	ldrh	r3, [r7, #6]
 800d7a4:	9302      	str	r3, [sp, #8]
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	9301      	str	r3, [sp, #4]
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	9300      	str	r3, [sp, #0]
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f003 fa8b 	bl	8010cce <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b088      	sub	sp, #32
 800d7c6:	af04      	add	r7, sp, #16
 800d7c8:	60f8      	str	r0, [r7, #12]
 800d7ca:	60b9      	str	r1, [r7, #8]
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	461a      	mov	r2, r3
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	80fb      	strh	r3, [r7, #6]
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d7d8:	7979      	ldrb	r1, [r7, #5]
 800d7da:	2300      	movs	r3, #0
 800d7dc:	9303      	str	r3, [sp, #12]
 800d7de:	88fb      	ldrh	r3, [r7, #6]
 800d7e0:	9302      	str	r3, [sp, #8]
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	9301      	str	r3, [sp, #4]
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f003 fa6d 	bl	8010cce <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d7f4:	2300      	movs	r3, #0

}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3710      	adds	r7, #16
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b088      	sub	sp, #32
 800d802:	af04      	add	r7, sp, #16
 800d804:	60f8      	str	r0, [r7, #12]
 800d806:	60b9      	str	r1, [r7, #8]
 800d808:	4611      	mov	r1, r2
 800d80a:	461a      	mov	r2, r3
 800d80c:	460b      	mov	r3, r1
 800d80e:	80fb      	strh	r3, [r7, #6]
 800d810:	4613      	mov	r3, r2
 800d812:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d81e:	2300      	movs	r3, #0
 800d820:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d822:	7979      	ldrb	r1, [r7, #5]
 800d824:	7e3b      	ldrb	r3, [r7, #24]
 800d826:	9303      	str	r3, [sp, #12]
 800d828:	88fb      	ldrh	r3, [r7, #6]
 800d82a:	9302      	str	r3, [sp, #8]
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	9301      	str	r3, [sp, #4]
 800d830:	2301      	movs	r3, #1
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	2302      	movs	r3, #2
 800d836:	2200      	movs	r2, #0
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f003 fa48 	bl	8010cce <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af04      	add	r7, sp, #16
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4611      	mov	r1, r2
 800d854:	461a      	mov	r2, r3
 800d856:	460b      	mov	r3, r1
 800d858:	80fb      	strh	r3, [r7, #6]
 800d85a:	4613      	mov	r3, r2
 800d85c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d85e:	7979      	ldrb	r1, [r7, #5]
 800d860:	2300      	movs	r3, #0
 800d862:	9303      	str	r3, [sp, #12]
 800d864:	88fb      	ldrh	r3, [r7, #6]
 800d866:	9302      	str	r3, [sp, #8]
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	9301      	str	r3, [sp, #4]
 800d86c:	2301      	movs	r3, #1
 800d86e:	9300      	str	r3, [sp, #0]
 800d870:	2302      	movs	r3, #2
 800d872:	2201      	movs	r2, #1
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f003 fa2a 	bl	8010cce <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b086      	sub	sp, #24
 800d888:	af04      	add	r7, sp, #16
 800d88a:	6078      	str	r0, [r7, #4]
 800d88c:	4608      	mov	r0, r1
 800d88e:	4611      	mov	r1, r2
 800d890:	461a      	mov	r2, r3
 800d892:	4603      	mov	r3, r0
 800d894:	70fb      	strb	r3, [r7, #3]
 800d896:	460b      	mov	r3, r1
 800d898:	70bb      	strb	r3, [r7, #2]
 800d89a:	4613      	mov	r3, r2
 800d89c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d89e:	7878      	ldrb	r0, [r7, #1]
 800d8a0:	78ba      	ldrb	r2, [r7, #2]
 800d8a2:	78f9      	ldrb	r1, [r7, #3]
 800d8a4:	8b3b      	ldrh	r3, [r7, #24]
 800d8a6:	9302      	str	r3, [sp, #8]
 800d8a8:	7d3b      	ldrb	r3, [r7, #20]
 800d8aa:	9301      	str	r3, [sp, #4]
 800d8ac:	7c3b      	ldrb	r3, [r7, #16]
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f003 f9bd 	bl	8010c32 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d8b8:	2300      	movs	r3, #0
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
 800d8ca:	460b      	mov	r3, r1
 800d8cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800d8ce:	78fb      	ldrb	r3, [r7, #3]
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f003 f9dc 	bl	8010c90 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b084      	sub	sp, #16
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f836 	bl	800d960 <USBH_GetFreePipe>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d8f8:	89fb      	ldrh	r3, [r7, #14]
 800d8fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d8fe:	4293      	cmp	r3, r2
 800d900:	d00a      	beq.n	800d918 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800d902:	78fa      	ldrb	r2, [r7, #3]
 800d904:	89fb      	ldrh	r3, [r7, #14]
 800d906:	f003 030f 	and.w	r3, r3, #15
 800d90a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	33e0      	adds	r3, #224	; 0xe0
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	440b      	add	r3, r1
 800d916:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d918:	89fb      	ldrh	r3, [r7, #14]
 800d91a:	b2db      	uxtb	r3, r3
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	460b      	mov	r3, r1
 800d92e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800d930:	78fb      	ldrb	r3, [r7, #3]
 800d932:	2b0a      	cmp	r3, #10
 800d934:	d80d      	bhi.n	800d952 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d936:	78fb      	ldrb	r3, [r7, #3]
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	33e0      	adds	r3, #224	; 0xe0
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	685a      	ldr	r2, [r3, #4]
 800d942:	78fb      	ldrb	r3, [r7, #3]
 800d944:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d948:	6879      	ldr	r1, [r7, #4]
 800d94a:	33e0      	adds	r3, #224	; 0xe0
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	440b      	add	r3, r1
 800d950:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d968:	2300      	movs	r3, #0
 800d96a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800d96c:	2300      	movs	r3, #0
 800d96e:	73fb      	strb	r3, [r7, #15]
 800d970:	e00f      	b.n	800d992 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d972:	7bfb      	ldrb	r3, [r7, #15]
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	33e0      	adds	r3, #224	; 0xe0
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	4413      	add	r3, r2
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d982:	2b00      	cmp	r3, #0
 800d984:	d102      	bne.n	800d98c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d986:	7bfb      	ldrb	r3, [r7, #15]
 800d988:	b29b      	uxth	r3, r3
 800d98a:	e007      	b.n	800d99c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
 800d98e:	3301      	adds	r3, #1
 800d990:	73fb      	strb	r3, [r7, #15]
 800d992:	7bfb      	ldrb	r3, [r7, #15]
 800d994:	2b0a      	cmp	r3, #10
 800d996:	d9ec      	bls.n	800d972 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d998:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr

0800d9a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d9a8:	b480      	push	{r7}
 800d9aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d9ac:	bf00      	nop
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
	...

0800d9b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9be:	f3ef 8305 	mrs	r3, IPSR
 800d9c2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d9c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d10f      	bne.n	800d9ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d9ce:	607b      	str	r3, [r7, #4]
  return(result);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d105      	bne.n	800d9e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d9d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d9da:	603b      	str	r3, [r7, #0]
  return(result);
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d007      	beq.n	800d9f2 <osKernelInitialize+0x3a>
 800d9e2:	4b0e      	ldr	r3, [pc, #56]	; (800da1c <osKernelInitialize+0x64>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d103      	bne.n	800d9f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d9ea:	f06f 0305 	mvn.w	r3, #5
 800d9ee:	60fb      	str	r3, [r7, #12]
 800d9f0:	e00c      	b.n	800da0c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d9f2:	4b0a      	ldr	r3, [pc, #40]	; (800da1c <osKernelInitialize+0x64>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d105      	bne.n	800da06 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d9fa:	4b08      	ldr	r3, [pc, #32]	; (800da1c <osKernelInitialize+0x64>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da00:	2300      	movs	r3, #0
 800da02:	60fb      	str	r3, [r7, #12]
 800da04:	e002      	b.n	800da0c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800da06:	f04f 33ff 	mov.w	r3, #4294967295
 800da0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800da0c:	68fb      	ldr	r3, [r7, #12]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3714      	adds	r7, #20
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	2000015c 	.word	0x2000015c

0800da20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da20:	b580      	push	{r7, lr}
 800da22:	b084      	sub	sp, #16
 800da24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da26:	f3ef 8305 	mrs	r3, IPSR
 800da2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800da2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d10f      	bne.n	800da52 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da32:	f3ef 8310 	mrs	r3, PRIMASK
 800da36:	607b      	str	r3, [r7, #4]
  return(result);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d105      	bne.n	800da4a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da3e:	f3ef 8311 	mrs	r3, BASEPRI
 800da42:	603b      	str	r3, [r7, #0]
  return(result);
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d007      	beq.n	800da5a <osKernelStart+0x3a>
 800da4a:	4b0f      	ldr	r3, [pc, #60]	; (800da88 <osKernelStart+0x68>)
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	2b02      	cmp	r3, #2
 800da50:	d103      	bne.n	800da5a <osKernelStart+0x3a>
    stat = osErrorISR;
 800da52:	f06f 0305 	mvn.w	r3, #5
 800da56:	60fb      	str	r3, [r7, #12]
 800da58:	e010      	b.n	800da7c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da5a:	4b0b      	ldr	r3, [pc, #44]	; (800da88 <osKernelStart+0x68>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d109      	bne.n	800da76 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da62:	f7ff ffa1 	bl	800d9a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da66:	4b08      	ldr	r3, [pc, #32]	; (800da88 <osKernelStart+0x68>)
 800da68:	2202      	movs	r2, #2
 800da6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da6c:	f001 fa9a 	bl	800efa4 <vTaskStartScheduler>
      stat = osOK;
 800da70:	2300      	movs	r3, #0
 800da72:	60fb      	str	r3, [r7, #12]
 800da74:	e002      	b.n	800da7c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800da76:	f04f 33ff 	mov.w	r3, #4294967295
 800da7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800da7c:	68fb      	ldr	r3, [r7, #12]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	2000015c 	.word	0x2000015c

0800da8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b090      	sub	sp, #64	; 0x40
 800da90:	af04      	add	r7, sp, #16
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800da98:	2300      	movs	r3, #0
 800da9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da9c:	f3ef 8305 	mrs	r3, IPSR
 800daa0:	61fb      	str	r3, [r7, #28]
  return(result);
 800daa2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f040 808f 	bne.w	800dbc8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daaa:	f3ef 8310 	mrs	r3, PRIMASK
 800daae:	61bb      	str	r3, [r7, #24]
  return(result);
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d105      	bne.n	800dac2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dab6:	f3ef 8311 	mrs	r3, BASEPRI
 800daba:	617b      	str	r3, [r7, #20]
  return(result);
 800dabc:	697b      	ldr	r3, [r7, #20]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <osThreadNew+0x3e>
 800dac2:	4b44      	ldr	r3, [pc, #272]	; (800dbd4 <osThreadNew+0x148>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b02      	cmp	r3, #2
 800dac8:	d07e      	beq.n	800dbc8 <osThreadNew+0x13c>
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d07b      	beq.n	800dbc8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800dad0:	2380      	movs	r3, #128	; 0x80
 800dad2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800dad4:	2318      	movs	r3, #24
 800dad6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800dadc:	f04f 33ff 	mov.w	r3, #4294967295
 800dae0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d045      	beq.n	800db74 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <osThreadNew+0x6a>
        name = attr->name;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d002      	beq.n	800db04 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	699b      	ldr	r3, [r3, #24]
 800db02:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800db04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db06:	2b00      	cmp	r3, #0
 800db08:	d008      	beq.n	800db1c <osThreadNew+0x90>
 800db0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0c:	2b38      	cmp	r3, #56	; 0x38
 800db0e:	d805      	bhi.n	800db1c <osThreadNew+0x90>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	f003 0301 	and.w	r3, r3, #1
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d001      	beq.n	800db20 <osThreadNew+0x94>
        return (NULL);
 800db1c:	2300      	movs	r3, #0
 800db1e:	e054      	b.n	800dbca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	695b      	ldr	r3, [r3, #20]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d003      	beq.n	800db30 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	695b      	ldr	r3, [r3, #20]
 800db2c:	089b      	lsrs	r3, r3, #2
 800db2e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00e      	beq.n	800db56 <osThreadNew+0xca>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	2b5b      	cmp	r3, #91	; 0x5b
 800db3e:	d90a      	bls.n	800db56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db44:	2b00      	cmp	r3, #0
 800db46:	d006      	beq.n	800db56 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	695b      	ldr	r3, [r3, #20]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <osThreadNew+0xca>
        mem = 1;
 800db50:	2301      	movs	r3, #1
 800db52:	623b      	str	r3, [r7, #32]
 800db54:	e010      	b.n	800db78 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10c      	bne.n	800db78 <osThreadNew+0xec>
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d108      	bne.n	800db78 <osThreadNew+0xec>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d104      	bne.n	800db78 <osThreadNew+0xec>
          mem = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	623b      	str	r3, [r7, #32]
 800db72:	e001      	b.n	800db78 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800db74:	2300      	movs	r3, #0
 800db76:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800db78:	6a3b      	ldr	r3, [r7, #32]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d110      	bne.n	800dba0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db86:	9202      	str	r2, [sp, #8]
 800db88:	9301      	str	r3, [sp, #4]
 800db8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f001 f833 	bl	800ec00 <xTaskCreateStatic>
 800db9a:	4603      	mov	r3, r0
 800db9c:	613b      	str	r3, [r7, #16]
 800db9e:	e013      	b.n	800dbc8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800dba0:	6a3b      	ldr	r3, [r7, #32]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d110      	bne.n	800dbc8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	f107 0310 	add.w	r3, r7, #16
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f001 f87b 	bl	800ecb4 <xTaskCreate>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d001      	beq.n	800dbc8 <osThreadNew+0x13c>
          hTask = NULL;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dbc8:	693b      	ldr	r3, [r7, #16]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3730      	adds	r7, #48	; 0x30
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	2000015c 	.word	0x2000015c

0800dbd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b086      	sub	sp, #24
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbe0:	f3ef 8305 	mrs	r3, IPSR
 800dbe4:	613b      	str	r3, [r7, #16]
  return(result);
 800dbe6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d10f      	bne.n	800dc0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbec:	f3ef 8310 	mrs	r3, PRIMASK
 800dbf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d105      	bne.n	800dc04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dbf8:	f3ef 8311 	mrs	r3, BASEPRI
 800dbfc:	60bb      	str	r3, [r7, #8]
  return(result);
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d007      	beq.n	800dc14 <osDelay+0x3c>
 800dc04:	4b0a      	ldr	r3, [pc, #40]	; (800dc30 <osDelay+0x58>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d103      	bne.n	800dc14 <osDelay+0x3c>
    stat = osErrorISR;
 800dc0c:	f06f 0305 	mvn.w	r3, #5
 800dc10:	617b      	str	r3, [r7, #20]
 800dc12:	e007      	b.n	800dc24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800dc14:	2300      	movs	r3, #0
 800dc16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d002      	beq.n	800dc24 <osDelay+0x4c>
      vTaskDelay(ticks);
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f001 f98c 	bl	800ef3c <vTaskDelay>
    }
  }

  return (stat);
 800dc24:	697b      	ldr	r3, [r7, #20]
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3718      	adds	r7, #24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
 800dc2e:	bf00      	nop
 800dc30:	2000015c 	.word	0x2000015c

0800dc34 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08c      	sub	sp, #48	; 0x30
 800dc38:	af02      	add	r7, sp, #8
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dc40:	2300      	movs	r3, #0
 800dc42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc44:	f3ef 8305 	mrs	r3, IPSR
 800dc48:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc4a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d170      	bne.n	800dd32 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc50:	f3ef 8310 	mrs	r3, PRIMASK
 800dc54:	617b      	str	r3, [r7, #20]
  return(result);
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d105      	bne.n	800dc68 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc5c:	f3ef 8311 	mrs	r3, BASEPRI
 800dc60:	613b      	str	r3, [r7, #16]
  return(result);
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d003      	beq.n	800dc70 <osMessageQueueNew+0x3c>
 800dc68:	4b34      	ldr	r3, [pc, #208]	; (800dd3c <osMessageQueueNew+0x108>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b02      	cmp	r3, #2
 800dc6e:	d060      	beq.n	800dd32 <osMessageQueueNew+0xfe>
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d05d      	beq.n	800dd32 <osMessageQueueNew+0xfe>
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d05a      	beq.n	800dd32 <osMessageQueueNew+0xfe>
    mem = -1;
 800dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d029      	beq.n	800dcdc <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	689b      	ldr	r3, [r3, #8]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d012      	beq.n	800dcb6 <osMessageQueueNew+0x82>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	2b4f      	cmp	r3, #79	; 0x4f
 800dc96:	d90e      	bls.n	800dcb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d00a      	beq.n	800dcb6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	695a      	ldr	r2, [r3, #20]
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	68b9      	ldr	r1, [r7, #8]
 800dca8:	fb01 f303 	mul.w	r3, r1, r3
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d302      	bcc.n	800dcb6 <osMessageQueueNew+0x82>
        mem = 1;
 800dcb0:	2301      	movs	r3, #1
 800dcb2:	623b      	str	r3, [r7, #32]
 800dcb4:	e014      	b.n	800dce0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	689b      	ldr	r3, [r3, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d110      	bne.n	800dce0 <osMessageQueueNew+0xac>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d10c      	bne.n	800dce0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d108      	bne.n	800dce0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d104      	bne.n	800dce0 <osMessageQueueNew+0xac>
          mem = 0;
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	623b      	str	r3, [r7, #32]
 800dcda:	e001      	b.n	800dce0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800dcdc:	2300      	movs	r3, #0
 800dcde:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d10c      	bne.n	800dd00 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	691a      	ldr	r2, [r3, #16]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6899      	ldr	r1, [r3, #8]
 800dcee:	2300      	movs	r3, #0
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	68b9      	ldr	r1, [r7, #8]
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f000 fa58 	bl	800e1ac <xQueueGenericCreateStatic>
 800dcfc:	6278      	str	r0, [r7, #36]	; 0x24
 800dcfe:	e008      	b.n	800dd12 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800dd00:	6a3b      	ldr	r3, [r7, #32]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d105      	bne.n	800dd12 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800dd06:	2200      	movs	r2, #0
 800dd08:	68b9      	ldr	r1, [r7, #8]
 800dd0a:	68f8      	ldr	r0, [r7, #12]
 800dd0c:	f000 fac1 	bl	800e292 <xQueueGenericCreate>
 800dd10:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00c      	beq.n	800dd32 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d003      	beq.n	800dd26 <osMessageQueueNew+0xf2>
        name = attr->name;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	61fb      	str	r3, [r7, #28]
 800dd24:	e001      	b.n	800dd2a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800dd26:	2300      	movs	r3, #0
 800dd28:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800dd2a:	69f9      	ldr	r1, [r7, #28]
 800dd2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd2e:	f000 ff0b 	bl	800eb48 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3728      	adds	r7, #40	; 0x28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	2000015c 	.word	0x2000015c

0800dd40 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08a      	sub	sp, #40	; 0x28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	603b      	str	r3, [r7, #0]
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd54:	2300      	movs	r3, #0
 800dd56:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd58:	f3ef 8305 	mrs	r3, IPSR
 800dd5c:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd5e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d10f      	bne.n	800dd84 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd64:	f3ef 8310 	mrs	r3, PRIMASK
 800dd68:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d105      	bne.n	800dd7c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd70:	f3ef 8311 	mrs	r3, BASEPRI
 800dd74:	617b      	str	r3, [r7, #20]
  return(result);
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d02c      	beq.n	800ddd6 <osMessageQueuePut+0x96>
 800dd7c:	4b28      	ldr	r3, [pc, #160]	; (800de20 <osMessageQueuePut+0xe0>)
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b02      	cmp	r3, #2
 800dd82:	d128      	bne.n	800ddd6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd84:	6a3b      	ldr	r3, [r7, #32]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d005      	beq.n	800dd96 <osMessageQueuePut+0x56>
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <osMessageQueuePut+0x56>
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d003      	beq.n	800dd9e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dd96:	f06f 0303 	mvn.w	r3, #3
 800dd9a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd9c:	e039      	b.n	800de12 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dda2:	f107 0210 	add.w	r2, r7, #16
 800dda6:	2300      	movs	r3, #0
 800dda8:	68b9      	ldr	r1, [r7, #8]
 800ddaa:	6a38      	ldr	r0, [r7, #32]
 800ddac:	f000 fbce 	bl	800e54c <xQueueGenericSendFromISR>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	d003      	beq.n	800ddbe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ddb6:	f06f 0302 	mvn.w	r3, #2
 800ddba:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddbc:	e029      	b.n	800de12 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ddbe:	693b      	ldr	r3, [r7, #16]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d026      	beq.n	800de12 <osMessageQueuePut+0xd2>
 800ddc4:	4b17      	ldr	r3, [pc, #92]	; (800de24 <osMessageQueuePut+0xe4>)
 800ddc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddca:	601a      	str	r2, [r3, #0]
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddd4:	e01d      	b.n	800de12 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d002      	beq.n	800dde2 <osMessageQueuePut+0xa2>
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d103      	bne.n	800ddea <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800dde2:	f06f 0303 	mvn.w	r3, #3
 800dde6:	627b      	str	r3, [r7, #36]	; 0x24
 800dde8:	e014      	b.n	800de14 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ddea:	2300      	movs	r3, #0
 800ddec:	683a      	ldr	r2, [r7, #0]
 800ddee:	68b9      	ldr	r1, [r7, #8]
 800ddf0:	6a38      	ldr	r0, [r7, #32]
 800ddf2:	f000 fab1 	bl	800e358 <xQueueGenericSend>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d00b      	beq.n	800de14 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d003      	beq.n	800de0a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800de02:	f06f 0301 	mvn.w	r3, #1
 800de06:	627b      	str	r3, [r7, #36]	; 0x24
 800de08:	e004      	b.n	800de14 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800de0a:	f06f 0302 	mvn.w	r3, #2
 800de0e:	627b      	str	r3, [r7, #36]	; 0x24
 800de10:	e000      	b.n	800de14 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de12:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de16:	4618      	mov	r0, r3
 800de18:	3728      	adds	r7, #40	; 0x28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	2000015c 	.word	0x2000015c
 800de24:	e000ed04 	.word	0xe000ed04

0800de28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800de28:	b580      	push	{r7, lr}
 800de2a:	b08a      	sub	sp, #40	; 0x28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
 800de34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de3e:	f3ef 8305 	mrs	r3, IPSR
 800de42:	61fb      	str	r3, [r7, #28]
  return(result);
 800de44:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800de46:	2b00      	cmp	r3, #0
 800de48:	d10f      	bne.n	800de6a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de4a:	f3ef 8310 	mrs	r3, PRIMASK
 800de4e:	61bb      	str	r3, [r7, #24]
  return(result);
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d105      	bne.n	800de62 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de56:	f3ef 8311 	mrs	r3, BASEPRI
 800de5a:	617b      	str	r3, [r7, #20]
  return(result);
 800de5c:	697b      	ldr	r3, [r7, #20]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d02c      	beq.n	800debc <osMessageQueueGet+0x94>
 800de62:	4b28      	ldr	r3, [pc, #160]	; (800df04 <osMessageQueueGet+0xdc>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	2b02      	cmp	r3, #2
 800de68:	d128      	bne.n	800debc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de6a:	6a3b      	ldr	r3, [r7, #32]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d005      	beq.n	800de7c <osMessageQueueGet+0x54>
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d002      	beq.n	800de7c <osMessageQueueGet+0x54>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800de7c:	f06f 0303 	mvn.w	r3, #3
 800de80:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de82:	e038      	b.n	800def6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800de84:	2300      	movs	r3, #0
 800de86:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800de88:	f107 0310 	add.w	r3, r7, #16
 800de8c:	461a      	mov	r2, r3
 800de8e:	68b9      	ldr	r1, [r7, #8]
 800de90:	6a38      	ldr	r0, [r7, #32]
 800de92:	f000 fccb 	bl	800e82c <xQueueReceiveFromISR>
 800de96:	4603      	mov	r3, r0
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d003      	beq.n	800dea4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800de9c:	f06f 0302 	mvn.w	r3, #2
 800dea0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dea2:	e028      	b.n	800def6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d025      	beq.n	800def6 <osMessageQueueGet+0xce>
 800deaa:	4b17      	ldr	r3, [pc, #92]	; (800df08 <osMessageQueueGet+0xe0>)
 800deac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	f3bf 8f4f 	dsb	sy
 800deb6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800deba:	e01c      	b.n	800def6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d002      	beq.n	800dec8 <osMessageQueueGet+0xa0>
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d103      	bne.n	800ded0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800dec8:	f06f 0303 	mvn.w	r3, #3
 800decc:	627b      	str	r3, [r7, #36]	; 0x24
 800dece:	e013      	b.n	800def8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ded0:	683a      	ldr	r2, [r7, #0]
 800ded2:	68b9      	ldr	r1, [r7, #8]
 800ded4:	6a38      	ldr	r0, [r7, #32]
 800ded6:	f000 fbcd 	bl	800e674 <xQueueReceive>
 800deda:	4603      	mov	r3, r0
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d00b      	beq.n	800def8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d003      	beq.n	800deee <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800dee6:	f06f 0301 	mvn.w	r3, #1
 800deea:	627b      	str	r3, [r7, #36]	; 0x24
 800deec:	e004      	b.n	800def8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800deee:	f06f 0302 	mvn.w	r3, #2
 800def2:	627b      	str	r3, [r7, #36]	; 0x24
 800def4:	e000      	b.n	800def8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800def6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800def8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800defa:	4618      	mov	r0, r3
 800defc:	3728      	adds	r7, #40	; 0x28
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	2000015c 	.word	0x2000015c
 800df08:	e000ed04 	.word	0xe000ed04

0800df0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800df0c:	b480      	push	{r7}
 800df0e:	b085      	sub	sp, #20
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	4a07      	ldr	r2, [pc, #28]	; (800df38 <vApplicationGetIdleTaskMemory+0x2c>)
 800df1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	4a06      	ldr	r2, [pc, #24]	; (800df3c <vApplicationGetIdleTaskMemory+0x30>)
 800df22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2280      	movs	r2, #128	; 0x80
 800df28:	601a      	str	r2, [r3, #0]
}
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	20000160 	.word	0x20000160
 800df3c:	200001bc 	.word	0x200001bc

0800df40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800df40:	b480      	push	{r7}
 800df42:	b085      	sub	sp, #20
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	4a07      	ldr	r2, [pc, #28]	; (800df6c <vApplicationGetTimerTaskMemory+0x2c>)
 800df50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	4a06      	ldr	r2, [pc, #24]	; (800df70 <vApplicationGetTimerTaskMemory+0x30>)
 800df56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df5e:	601a      	str	r2, [r3, #0]
}
 800df60:	bf00      	nop
 800df62:	3714      	adds	r7, #20
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr
 800df6c:	200003bc 	.word	0x200003bc
 800df70:	20000418 	.word	0x20000418

0800df74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f103 0208 	add.w	r2, r3, #8
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f04f 32ff 	mov.w	r2, #4294967295
 800df8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f103 0208 	add.w	r2, r3, #8
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f103 0208 	add.w	r2, r3, #8
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dfc2:	bf00      	nop
 800dfc4:	370c      	adds	r7, #12
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfcc:	4770      	bx	lr

0800dfce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfce:	b480      	push	{r7}
 800dfd0:	b085      	sub	sp, #20
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	6078      	str	r0, [r7, #4]
 800dfd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	689a      	ldr	r2, [r3, #8]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	683a      	ldr	r2, [r7, #0]
 800dff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	683a      	ldr	r2, [r7, #0]
 800dff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	1c5a      	adds	r2, r3, #1
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	601a      	str	r2, [r3, #0]
}
 800e00a:	bf00      	nop
 800e00c:	3714      	adds	r7, #20
 800e00e:	46bd      	mov	sp, r7
 800e010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e014:	4770      	bx	lr

0800e016 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e016:	b480      	push	{r7}
 800e018:	b085      	sub	sp, #20
 800e01a:	af00      	add	r7, sp, #0
 800e01c:	6078      	str	r0, [r7, #4]
 800e01e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02c:	d103      	bne.n	800e036 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	691b      	ldr	r3, [r3, #16]
 800e032:	60fb      	str	r3, [r7, #12]
 800e034:	e00c      	b.n	800e050 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	3308      	adds	r3, #8
 800e03a:	60fb      	str	r3, [r7, #12]
 800e03c:	e002      	b.n	800e044 <vListInsert+0x2e>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	60fb      	str	r3, [r7, #12]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	68ba      	ldr	r2, [r7, #8]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d2f6      	bcs.n	800e03e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	683a      	ldr	r2, [r7, #0]
 800e05e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	683a      	ldr	r2, [r7, #0]
 800e06a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	1c5a      	adds	r2, r3, #1
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	601a      	str	r2, [r3, #0]
}
 800e07c:	bf00      	nop
 800e07e:	3714      	adds	r7, #20
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	687a      	ldr	r2, [r7, #4]
 800e09c:	6892      	ldr	r2, [r2, #8]
 800e09e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	689b      	ldr	r3, [r3, #8]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	6852      	ldr	r2, [r2, #4]
 800e0a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	685b      	ldr	r3, [r3, #4]
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d103      	bne.n	800e0bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	689a      	ldr	r2, [r3, #8]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	1e5a      	subs	r2, r3, #1
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3714      	adds	r7, #20
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0da:	4770      	bx	lr

0800e0dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d109      	bne.n	800e104 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	60bb      	str	r3, [r7, #8]
 800e102:	e7fe      	b.n	800e102 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800e104:	f002 f8d2 	bl	80102ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e110:	68f9      	ldr	r1, [r7, #12]
 800e112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e114:	fb01 f303 	mul.w	r3, r1, r3
 800e118:	441a      	add	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	2200      	movs	r2, #0
 800e122:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e134:	3b01      	subs	r3, #1
 800e136:	68f9      	ldr	r1, [r7, #12]
 800e138:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e13a:	fb01 f303 	mul.w	r3, r1, r3
 800e13e:	441a      	add	r2, r3
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	22ff      	movs	r2, #255	; 0xff
 800e148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	22ff      	movs	r2, #255	; 0xff
 800e150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d114      	bne.n	800e184 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	691b      	ldr	r3, [r3, #16]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d01a      	beq.n	800e198 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	3310      	adds	r3, #16
 800e166:	4618      	mov	r0, r3
 800e168:	f001 f99c 	bl	800f4a4 <xTaskRemoveFromEventList>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d012      	beq.n	800e198 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e172:	4b0d      	ldr	r3, [pc, #52]	; (800e1a8 <xQueueGenericReset+0xcc>)
 800e174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e178:	601a      	str	r2, [r3, #0]
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	e009      	b.n	800e198 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	3310      	adds	r3, #16
 800e188:	4618      	mov	r0, r3
 800e18a:	f7ff fef3 	bl	800df74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3324      	adds	r3, #36	; 0x24
 800e192:	4618      	mov	r0, r3
 800e194:	f7ff feee 	bl	800df74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e198:	f002 f8b6 	bl	8010308 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e19c:	2301      	movs	r3, #1
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	e000ed04 	.word	0xe000ed04

0800e1ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08e      	sub	sp, #56	; 0x38
 800e1b0:	af02      	add	r7, sp, #8
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
 800e1b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d109      	bne.n	800e1d4 <xQueueGenericCreateStatic+0x28>
 800e1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c4:	f383 8811 	msr	BASEPRI, r3
 800e1c8:	f3bf 8f6f 	isb	sy
 800e1cc:	f3bf 8f4f 	dsb	sy
 800e1d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1d2:	e7fe      	b.n	800e1d2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d109      	bne.n	800e1ee <xQueueGenericCreateStatic+0x42>
 800e1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1de:	f383 8811 	msr	BASEPRI, r3
 800e1e2:	f3bf 8f6f 	isb	sy
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ec:	e7fe      	b.n	800e1ec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d002      	beq.n	800e1fa <xQueueGenericCreateStatic+0x4e>
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d001      	beq.n	800e1fe <xQueueGenericCreateStatic+0x52>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	e000      	b.n	800e200 <xQueueGenericCreateStatic+0x54>
 800e1fe:	2300      	movs	r3, #0
 800e200:	2b00      	cmp	r3, #0
 800e202:	d109      	bne.n	800e218 <xQueueGenericCreateStatic+0x6c>
 800e204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e208:	f383 8811 	msr	BASEPRI, r3
 800e20c:	f3bf 8f6f 	isb	sy
 800e210:	f3bf 8f4f 	dsb	sy
 800e214:	623b      	str	r3, [r7, #32]
 800e216:	e7fe      	b.n	800e216 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d102      	bne.n	800e224 <xQueueGenericCreateStatic+0x78>
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d101      	bne.n	800e228 <xQueueGenericCreateStatic+0x7c>
 800e224:	2301      	movs	r3, #1
 800e226:	e000      	b.n	800e22a <xQueueGenericCreateStatic+0x7e>
 800e228:	2300      	movs	r3, #0
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d109      	bne.n	800e242 <xQueueGenericCreateStatic+0x96>
 800e22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	61fb      	str	r3, [r7, #28]
 800e240:	e7fe      	b.n	800e240 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e242:	2350      	movs	r3, #80	; 0x50
 800e244:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	2b50      	cmp	r3, #80	; 0x50
 800e24a:	d009      	beq.n	800e260 <xQueueGenericCreateStatic+0xb4>
 800e24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e250:	f383 8811 	msr	BASEPRI, r3
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	f3bf 8f4f 	dsb	sy
 800e25c:	61bb      	str	r3, [r7, #24]
 800e25e:	e7fe      	b.n	800e25e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e260:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00d      	beq.n	800e288 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e274:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	4613      	mov	r3, r2
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	68b9      	ldr	r1, [r7, #8]
 800e282:	68f8      	ldr	r0, [r7, #12]
 800e284:	f000 f844 	bl	800e310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3730      	adds	r7, #48	; 0x30
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e292:	b580      	push	{r7, lr}
 800e294:	b08a      	sub	sp, #40	; 0x28
 800e296:	af02      	add	r7, sp, #8
 800e298:	60f8      	str	r0, [r7, #12]
 800e29a:	60b9      	str	r1, [r7, #8]
 800e29c:	4613      	mov	r3, r2
 800e29e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d109      	bne.n	800e2ba <xQueueGenericCreate+0x28>
 800e2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2aa:	f383 8811 	msr	BASEPRI, r3
 800e2ae:	f3bf 8f6f 	isb	sy
 800e2b2:	f3bf 8f4f 	dsb	sy
 800e2b6:	613b      	str	r3, [r7, #16]
 800e2b8:	e7fe      	b.n	800e2b8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d102      	bne.n	800e2c6 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	61fb      	str	r3, [r7, #28]
 800e2c4:	e004      	b.n	800e2d0 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	68ba      	ldr	r2, [r7, #8]
 800e2ca:	fb02 f303 	mul.w	r3, r2, r3
 800e2ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	3350      	adds	r3, #80	; 0x50
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f002 f903 	bl	80104e0 <pvPortMalloc>
 800e2da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e2dc:	69bb      	ldr	r3, [r7, #24]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d011      	beq.n	800e306 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	3350      	adds	r3, #80	; 0x50
 800e2ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e2f4:	79fa      	ldrb	r2, [r7, #7]
 800e2f6:	69bb      	ldr	r3, [r7, #24]
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	4613      	mov	r3, r2
 800e2fc:	697a      	ldr	r2, [r7, #20]
 800e2fe:	68b9      	ldr	r1, [r7, #8]
 800e300:	68f8      	ldr	r0, [r7, #12]
 800e302:	f000 f805 	bl	800e310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e306:	69bb      	ldr	r3, [r7, #24]
	}
 800e308:	4618      	mov	r0, r3
 800e30a:	3720      	adds	r7, #32
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b084      	sub	sp, #16
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d103      	bne.n	800e32c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e324:	69bb      	ldr	r3, [r7, #24]
 800e326:	69ba      	ldr	r2, [r7, #24]
 800e328:	601a      	str	r2, [r3, #0]
 800e32a:	e002      	b.n	800e332 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e332:	69bb      	ldr	r3, [r7, #24]
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e338:	69bb      	ldr	r3, [r7, #24]
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e33e:	2101      	movs	r1, #1
 800e340:	69b8      	ldr	r0, [r7, #24]
 800e342:	f7ff fecb 	bl	800e0dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	78fa      	ldrb	r2, [r7, #3]
 800e34a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e34e:	bf00      	nop
 800e350:	3710      	adds	r7, #16
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b08e      	sub	sp, #56	; 0x38
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	60f8      	str	r0, [r7, #12]
 800e360:	60b9      	str	r1, [r7, #8]
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e366:	2300      	movs	r3, #0
 800e368:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e370:	2b00      	cmp	r3, #0
 800e372:	d109      	bne.n	800e388 <xQueueGenericSend+0x30>
 800e374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e378:	f383 8811 	msr	BASEPRI, r3
 800e37c:	f3bf 8f6f 	isb	sy
 800e380:	f3bf 8f4f 	dsb	sy
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28
 800e386:	e7fe      	b.n	800e386 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d103      	bne.n	800e396 <xQueueGenericSend+0x3e>
 800e38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e392:	2b00      	cmp	r3, #0
 800e394:	d101      	bne.n	800e39a <xQueueGenericSend+0x42>
 800e396:	2301      	movs	r3, #1
 800e398:	e000      	b.n	800e39c <xQueueGenericSend+0x44>
 800e39a:	2300      	movs	r3, #0
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d109      	bne.n	800e3b4 <xQueueGenericSend+0x5c>
 800e3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	627b      	str	r3, [r7, #36]	; 0x24
 800e3b2:	e7fe      	b.n	800e3b2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d103      	bne.n	800e3c2 <xQueueGenericSend+0x6a>
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d101      	bne.n	800e3c6 <xQueueGenericSend+0x6e>
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	e000      	b.n	800e3c8 <xQueueGenericSend+0x70>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d109      	bne.n	800e3e0 <xQueueGenericSend+0x88>
 800e3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d0:	f383 8811 	msr	BASEPRI, r3
 800e3d4:	f3bf 8f6f 	isb	sy
 800e3d8:	f3bf 8f4f 	dsb	sy
 800e3dc:	623b      	str	r3, [r7, #32]
 800e3de:	e7fe      	b.n	800e3de <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e3e0:	f001 fa16 	bl	800f810 <xTaskGetSchedulerState>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d102      	bne.n	800e3f0 <xQueueGenericSend+0x98>
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <xQueueGenericSend+0x9c>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	e000      	b.n	800e3f6 <xQueueGenericSend+0x9e>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d109      	bne.n	800e40e <xQueueGenericSend+0xb6>
 800e3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	61fb      	str	r3, [r7, #28]
 800e40c:	e7fe      	b.n	800e40c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e40e:	f001 ff4d 	bl	80102ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d302      	bcc.n	800e424 <xQueueGenericSend+0xcc>
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	2b02      	cmp	r3, #2
 800e422:	d129      	bne.n	800e478 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e424:	683a      	ldr	r2, [r7, #0]
 800e426:	68b9      	ldr	r1, [r7, #8]
 800e428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e42a:	f000 fa7c 	bl	800e926 <prvCopyDataToQueue>
 800e42e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e434:	2b00      	cmp	r3, #0
 800e436:	d010      	beq.n	800e45a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e43a:	3324      	adds	r3, #36	; 0x24
 800e43c:	4618      	mov	r0, r3
 800e43e:	f001 f831 	bl	800f4a4 <xTaskRemoveFromEventList>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d013      	beq.n	800e470 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e448:	4b3f      	ldr	r3, [pc, #252]	; (800e548 <xQueueGenericSend+0x1f0>)
 800e44a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e44e:	601a      	str	r2, [r3, #0]
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	e00a      	b.n	800e470 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d007      	beq.n	800e470 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e460:	4b39      	ldr	r3, [pc, #228]	; (800e548 <xQueueGenericSend+0x1f0>)
 800e462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e466:	601a      	str	r2, [r3, #0]
 800e468:	f3bf 8f4f 	dsb	sy
 800e46c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e470:	f001 ff4a 	bl	8010308 <vPortExitCritical>
				return pdPASS;
 800e474:	2301      	movs	r3, #1
 800e476:	e063      	b.n	800e540 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d103      	bne.n	800e486 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e47e:	f001 ff43 	bl	8010308 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e482:	2300      	movs	r3, #0
 800e484:	e05c      	b.n	800e540 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d106      	bne.n	800e49a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e48c:	f107 0314 	add.w	r3, r7, #20
 800e490:	4618      	mov	r0, r3
 800e492:	f001 f869 	bl	800f568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e496:	2301      	movs	r3, #1
 800e498:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e49a:	f001 ff35 	bl	8010308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e49e:	f000 fde5 	bl	800f06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e4a2:	f001 ff03 	bl	80102ac <vPortEnterCritical>
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e4ac:	b25b      	sxtb	r3, r3
 800e4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4b2:	d103      	bne.n	800e4bc <xQueueGenericSend+0x164>
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e4c2:	b25b      	sxtb	r3, r3
 800e4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4c8:	d103      	bne.n	800e4d2 <xQueueGenericSend+0x17a>
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e4d2:	f001 ff19 	bl	8010308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e4d6:	1d3a      	adds	r2, r7, #4
 800e4d8:	f107 0314 	add.w	r3, r7, #20
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f001 f858 	bl	800f594 <xTaskCheckForTimeOut>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d124      	bne.n	800e534 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e4ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e4ec:	f000 fb13 	bl	800eb16 <prvIsQueueFull>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d018      	beq.n	800e528 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4f8:	3310      	adds	r3, #16
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 ff82 	bl	800f408 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e506:	f000 fa9e 	bl	800ea46 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e50a:	f000 fdbd 	bl	800f088 <xTaskResumeAll>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	f47f af7c 	bne.w	800e40e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800e516:	4b0c      	ldr	r3, [pc, #48]	; (800e548 <xQueueGenericSend+0x1f0>)
 800e518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e51c:	601a      	str	r2, [r3, #0]
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	f3bf 8f6f 	isb	sy
 800e526:	e772      	b.n	800e40e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e52a:	f000 fa8c 	bl	800ea46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e52e:	f000 fdab 	bl	800f088 <xTaskResumeAll>
 800e532:	e76c      	b.n	800e40e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e536:	f000 fa86 	bl	800ea46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e53a:	f000 fda5 	bl	800f088 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e53e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e540:	4618      	mov	r0, r3
 800e542:	3738      	adds	r7, #56	; 0x38
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	e000ed04 	.word	0xe000ed04

0800e54c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b08e      	sub	sp, #56	; 0x38
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
 800e558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e560:	2b00      	cmp	r3, #0
 800e562:	d109      	bne.n	800e578 <xQueueGenericSendFromISR+0x2c>
 800e564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e568:	f383 8811 	msr	BASEPRI, r3
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	627b      	str	r3, [r7, #36]	; 0x24
 800e576:	e7fe      	b.n	800e576 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d103      	bne.n	800e586 <xQueueGenericSendFromISR+0x3a>
 800e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e582:	2b00      	cmp	r3, #0
 800e584:	d101      	bne.n	800e58a <xQueueGenericSendFromISR+0x3e>
 800e586:	2301      	movs	r3, #1
 800e588:	e000      	b.n	800e58c <xQueueGenericSendFromISR+0x40>
 800e58a:	2300      	movs	r3, #0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d109      	bne.n	800e5a4 <xQueueGenericSendFromISR+0x58>
 800e590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	623b      	str	r3, [r7, #32]
 800e5a2:	e7fe      	b.n	800e5a2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d103      	bne.n	800e5b2 <xQueueGenericSendFromISR+0x66>
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d101      	bne.n	800e5b6 <xQueueGenericSendFromISR+0x6a>
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e000      	b.n	800e5b8 <xQueueGenericSendFromISR+0x6c>
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d109      	bne.n	800e5d0 <xQueueGenericSendFromISR+0x84>
 800e5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c0:	f383 8811 	msr	BASEPRI, r3
 800e5c4:	f3bf 8f6f 	isb	sy
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	61fb      	str	r3, [r7, #28]
 800e5ce:	e7fe      	b.n	800e5ce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e5d0:	f001 ff48 	bl	8010464 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e5d4:	f3ef 8211 	mrs	r2, BASEPRI
 800e5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5dc:	f383 8811 	msr	BASEPRI, r3
 800e5e0:	f3bf 8f6f 	isb	sy
 800e5e4:	f3bf 8f4f 	dsb	sy
 800e5e8:	61ba      	str	r2, [r7, #24]
 800e5ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e5ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d302      	bcc.n	800e602 <xQueueGenericSendFromISR+0xb6>
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	2b02      	cmp	r3, #2
 800e600:	d12c      	bne.n	800e65c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e60c:	683a      	ldr	r2, [r7, #0]
 800e60e:	68b9      	ldr	r1, [r7, #8]
 800e610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e612:	f000 f988 	bl	800e926 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e616:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e61e:	d112      	bne.n	800e646 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e624:	2b00      	cmp	r3, #0
 800e626:	d016      	beq.n	800e656 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62a:	3324      	adds	r3, #36	; 0x24
 800e62c:	4618      	mov	r0, r3
 800e62e:	f000 ff39 	bl	800f4a4 <xTaskRemoveFromEventList>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00e      	beq.n	800e656 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00b      	beq.n	800e656 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	e007      	b.n	800e656 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e646:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e64a:	3301      	adds	r3, #1
 800e64c:	b2db      	uxtb	r3, r3
 800e64e:	b25a      	sxtb	r2, r3
 800e650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e656:	2301      	movs	r3, #1
 800e658:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e65a:	e001      	b.n	800e660 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e65c:	2300      	movs	r3, #0
 800e65e:	637b      	str	r3, [r7, #52]	; 0x34
 800e660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e662:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3738      	adds	r7, #56	; 0x38
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b08c      	sub	sp, #48	; 0x30
 800e678:	af00      	add	r7, sp, #0
 800e67a:	60f8      	str	r0, [r7, #12]
 800e67c:	60b9      	str	r1, [r7, #8]
 800e67e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e680:	2300      	movs	r3, #0
 800e682:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d109      	bne.n	800e6a2 <xQueueReceive+0x2e>
	__asm volatile
 800e68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e692:	f383 8811 	msr	BASEPRI, r3
 800e696:	f3bf 8f6f 	isb	sy
 800e69a:	f3bf 8f4f 	dsb	sy
 800e69e:	623b      	str	r3, [r7, #32]
 800e6a0:	e7fe      	b.n	800e6a0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d103      	bne.n	800e6b0 <xQueueReceive+0x3c>
 800e6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d101      	bne.n	800e6b4 <xQueueReceive+0x40>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e000      	b.n	800e6b6 <xQueueReceive+0x42>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d109      	bne.n	800e6ce <xQueueReceive+0x5a>
 800e6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6be:	f383 8811 	msr	BASEPRI, r3
 800e6c2:	f3bf 8f6f 	isb	sy
 800e6c6:	f3bf 8f4f 	dsb	sy
 800e6ca:	61fb      	str	r3, [r7, #28]
 800e6cc:	e7fe      	b.n	800e6cc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e6ce:	f001 f89f 	bl	800f810 <xTaskGetSchedulerState>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d102      	bne.n	800e6de <xQueueReceive+0x6a>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d101      	bne.n	800e6e2 <xQueueReceive+0x6e>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e000      	b.n	800e6e4 <xQueueReceive+0x70>
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d109      	bne.n	800e6fc <xQueueReceive+0x88>
 800e6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	61bb      	str	r3, [r7, #24]
 800e6fa:	e7fe      	b.n	800e6fa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e6fc:	f001 fdd6 	bl	80102ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e704:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d01f      	beq.n	800e74c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e70c:	68b9      	ldr	r1, [r7, #8]
 800e70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e710:	f000 f973 	bl	800e9fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e71e:	691b      	ldr	r3, [r3, #16]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00f      	beq.n	800e744 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e726:	3310      	adds	r3, #16
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 febb 	bl	800f4a4 <xTaskRemoveFromEventList>
 800e72e:	4603      	mov	r3, r0
 800e730:	2b00      	cmp	r3, #0
 800e732:	d007      	beq.n	800e744 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e734:	4b3c      	ldr	r3, [pc, #240]	; (800e828 <xQueueReceive+0x1b4>)
 800e736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e73a:	601a      	str	r2, [r3, #0]
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e744:	f001 fde0 	bl	8010308 <vPortExitCritical>
				return pdPASS;
 800e748:	2301      	movs	r3, #1
 800e74a:	e069      	b.n	800e820 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d103      	bne.n	800e75a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e752:	f001 fdd9 	bl	8010308 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e756:	2300      	movs	r3, #0
 800e758:	e062      	b.n	800e820 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d106      	bne.n	800e76e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e760:	f107 0310 	add.w	r3, r7, #16
 800e764:	4618      	mov	r0, r3
 800e766:	f000 feff 	bl	800f568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e76a:	2301      	movs	r3, #1
 800e76c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e76e:	f001 fdcb 	bl	8010308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e772:	f000 fc7b 	bl	800f06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e776:	f001 fd99 	bl	80102ac <vPortEnterCritical>
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e780:	b25b      	sxtb	r3, r3
 800e782:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e786:	d103      	bne.n	800e790 <xQueueReceive+0x11c>
 800e788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78a:	2200      	movs	r2, #0
 800e78c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e796:	b25b      	sxtb	r3, r3
 800e798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79c:	d103      	bne.n	800e7a6 <xQueueReceive+0x132>
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e7a6:	f001 fdaf 	bl	8010308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e7aa:	1d3a      	adds	r2, r7, #4
 800e7ac:	f107 0310 	add.w	r3, r7, #16
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f000 feee 	bl	800f594 <xTaskCheckForTimeOut>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d123      	bne.n	800e806 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e7be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7c0:	f000 f993 	bl	800eaea <prvIsQueueEmpty>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d017      	beq.n	800e7fa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7cc:	3324      	adds	r3, #36	; 0x24
 800e7ce:	687a      	ldr	r2, [r7, #4]
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f000 fe18 	bl	800f408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7da:	f000 f934 	bl	800ea46 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e7de:	f000 fc53 	bl	800f088 <xTaskResumeAll>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d189      	bne.n	800e6fc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800e7e8:	4b0f      	ldr	r3, [pc, #60]	; (800e828 <xQueueReceive+0x1b4>)
 800e7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e7ee:	601a      	str	r2, [r3, #0]
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	f3bf 8f6f 	isb	sy
 800e7f8:	e780      	b.n	800e6fc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e7fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7fc:	f000 f923 	bl	800ea46 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e800:	f000 fc42 	bl	800f088 <xTaskResumeAll>
 800e804:	e77a      	b.n	800e6fc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e808:	f000 f91d 	bl	800ea46 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e80c:	f000 fc3c 	bl	800f088 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e812:	f000 f96a 	bl	800eaea <prvIsQueueEmpty>
 800e816:	4603      	mov	r3, r0
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f43f af6f 	beq.w	800e6fc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e81e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e820:	4618      	mov	r0, r3
 800e822:	3730      	adds	r7, #48	; 0x30
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	e000ed04 	.word	0xe000ed04

0800e82c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b08e      	sub	sp, #56	; 0x38
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d109      	bne.n	800e856 <xQueueReceiveFromISR+0x2a>
 800e842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e846:	f383 8811 	msr	BASEPRI, r3
 800e84a:	f3bf 8f6f 	isb	sy
 800e84e:	f3bf 8f4f 	dsb	sy
 800e852:	623b      	str	r3, [r7, #32]
 800e854:	e7fe      	b.n	800e854 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d103      	bne.n	800e864 <xQueueReceiveFromISR+0x38>
 800e85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e860:	2b00      	cmp	r3, #0
 800e862:	d101      	bne.n	800e868 <xQueueReceiveFromISR+0x3c>
 800e864:	2301      	movs	r3, #1
 800e866:	e000      	b.n	800e86a <xQueueReceiveFromISR+0x3e>
 800e868:	2300      	movs	r3, #0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d109      	bne.n	800e882 <xQueueReceiveFromISR+0x56>
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	61fb      	str	r3, [r7, #28]
 800e880:	e7fe      	b.n	800e880 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e882:	f001 fdef 	bl	8010464 <vPortValidateInterruptPriority>
	__asm volatile
 800e886:	f3ef 8211 	mrs	r2, BASEPRI
 800e88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88e:	f383 8811 	msr	BASEPRI, r3
 800e892:	f3bf 8f6f 	isb	sy
 800e896:	f3bf 8f4f 	dsb	sy
 800e89a:	61ba      	str	r2, [r7, #24]
 800e89c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e89e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d02f      	beq.n	800e90e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e8b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8b8:	68b9      	ldr	r1, [r7, #8]
 800e8ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8bc:	f000 f89d 	bl	800e9fa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c2:	1e5a      	subs	r2, r3, #1
 800e8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e8c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d0:	d112      	bne.n	800e8f8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d016      	beq.n	800e908 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8dc:	3310      	adds	r3, #16
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f000 fde0 	bl	800f4a4 <xTaskRemoveFromEventList>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00e      	beq.n	800e908 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00b      	beq.n	800e908 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	601a      	str	r2, [r3, #0]
 800e8f6:	e007      	b.n	800e908 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8fc:	3301      	adds	r3, #1
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	b25a      	sxtb	r2, r3
 800e902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e908:	2301      	movs	r3, #1
 800e90a:	637b      	str	r3, [r7, #52]	; 0x34
 800e90c:	e001      	b.n	800e912 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800e90e:	2300      	movs	r3, #0
 800e910:	637b      	str	r3, [r7, #52]	; 0x34
 800e912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e914:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e91c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3738      	adds	r7, #56	; 0x38
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}

0800e926 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e926:	b580      	push	{r7, lr}
 800e928:	b086      	sub	sp, #24
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	60f8      	str	r0, [r7, #12]
 800e92e:	60b9      	str	r1, [r7, #8]
 800e930:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e932:	2300      	movs	r3, #0
 800e934:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10d      	bne.n	800e960 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d14d      	bne.n	800e9e8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	689b      	ldr	r3, [r3, #8]
 800e950:	4618      	mov	r0, r3
 800e952:	f000 ff7b 	bl	800f84c <xTaskPriorityDisinherit>
 800e956:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2200      	movs	r2, #0
 800e95c:	609a      	str	r2, [r3, #8]
 800e95e:	e043      	b.n	800e9e8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d119      	bne.n	800e99a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6858      	ldr	r0, [r3, #4]
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e96e:	461a      	mov	r2, r3
 800e970:	68b9      	ldr	r1, [r7, #8]
 800e972:	f002 fae1 	bl	8010f38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	685a      	ldr	r2, [r3, #4]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e97e:	441a      	add	r2, r3
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	685a      	ldr	r2, [r3, #4]
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	689b      	ldr	r3, [r3, #8]
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d32b      	bcc.n	800e9e8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	605a      	str	r2, [r3, #4]
 800e998:	e026      	b.n	800e9e8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	68d8      	ldr	r0, [r3, #12]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9a2:	461a      	mov	r2, r3
 800e9a4:	68b9      	ldr	r1, [r7, #8]
 800e9a6:	f002 fac7 	bl	8010f38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	68da      	ldr	r2, [r3, #12]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9b2:	425b      	negs	r3, r3
 800e9b4:	441a      	add	r2, r3
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	68da      	ldr	r2, [r3, #12]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d207      	bcs.n	800e9d6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	689a      	ldr	r2, [r3, #8]
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9ce:	425b      	negs	r3, r3
 800e9d0:	441a      	add	r2, r3
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b02      	cmp	r3, #2
 800e9da:	d105      	bne.n	800e9e8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e9f0:	697b      	ldr	r3, [r7, #20]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3718      	adds	r7, #24
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b082      	sub	sp, #8
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d018      	beq.n	800ea3e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	68da      	ldr	r2, [r3, #12]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea14:	441a      	add	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	68da      	ldr	r2, [r3, #12]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d303      	bcc.n	800ea2e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68d9      	ldr	r1, [r3, #12]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea36:	461a      	mov	r2, r3
 800ea38:	6838      	ldr	r0, [r7, #0]
 800ea3a:	f002 fa7d 	bl	8010f38 <memcpy>
	}
}
 800ea3e:	bf00      	nop
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b084      	sub	sp, #16
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ea4e:	f001 fc2d 	bl	80102ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea58:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea5a:	e011      	b.n	800ea80 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d012      	beq.n	800ea8a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	3324      	adds	r3, #36	; 0x24
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 fd1b 	bl	800f4a4 <xTaskRemoveFromEventList>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d001      	beq.n	800ea78 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ea74:	f000 fdee 	bl	800f654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
 800ea7a:	3b01      	subs	r3, #1
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	dce9      	bgt.n	800ea5c <prvUnlockQueue+0x16>
 800ea88:	e000      	b.n	800ea8c <prvUnlockQueue+0x46>
					break;
 800ea8a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	22ff      	movs	r2, #255	; 0xff
 800ea90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ea94:	f001 fc38 	bl	8010308 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea98:	f001 fc08 	bl	80102ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800eaa2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eaa4:	e011      	b.n	800eaca <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	691b      	ldr	r3, [r3, #16]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d012      	beq.n	800ead4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	3310      	adds	r3, #16
 800eab2:	4618      	mov	r0, r3
 800eab4:	f000 fcf6 	bl	800f4a4 <xTaskRemoveFromEventList>
 800eab8:	4603      	mov	r3, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d001      	beq.n	800eac2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eabe:	f000 fdc9 	bl	800f654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eac2:	7bbb      	ldrb	r3, [r7, #14]
 800eac4:	3b01      	subs	r3, #1
 800eac6:	b2db      	uxtb	r3, r3
 800eac8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eaca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	dce9      	bgt.n	800eaa6 <prvUnlockQueue+0x60>
 800ead2:	e000      	b.n	800ead6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ead4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	22ff      	movs	r2, #255	; 0xff
 800eada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eade:	f001 fc13 	bl	8010308 <vPortExitCritical>
}
 800eae2:	bf00      	nop
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b084      	sub	sp, #16
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eaf2:	f001 fbdb 	bl	80102ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d102      	bne.n	800eb04 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eafe:	2301      	movs	r3, #1
 800eb00:	60fb      	str	r3, [r7, #12]
 800eb02:	e001      	b.n	800eb08 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eb04:	2300      	movs	r3, #0
 800eb06:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb08:	f001 fbfe 	bl	8010308 <vPortExitCritical>

	return xReturn;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b084      	sub	sp, #16
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eb1e:	f001 fbc5 	bl	80102ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d102      	bne.n	800eb34 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eb2e:	2301      	movs	r3, #1
 800eb30:	60fb      	str	r3, [r7, #12]
 800eb32:	e001      	b.n	800eb38 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eb34:	2300      	movs	r3, #0
 800eb36:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eb38:	f001 fbe6 	bl	8010308 <vPortExitCritical>

	return xReturn;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
	...

0800eb48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb52:	2300      	movs	r3, #0
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	e014      	b.n	800eb82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eb58:	4a0e      	ldr	r2, [pc, #56]	; (800eb94 <vQueueAddToRegistry+0x4c>)
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d10b      	bne.n	800eb7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb64:	490b      	ldr	r1, [pc, #44]	; (800eb94 <vQueueAddToRegistry+0x4c>)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	683a      	ldr	r2, [r7, #0]
 800eb6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eb6e:	4a09      	ldr	r2, [pc, #36]	; (800eb94 <vQueueAddToRegistry+0x4c>)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	00db      	lsls	r3, r3, #3
 800eb74:	4413      	add	r3, r2
 800eb76:	687a      	ldr	r2, [r7, #4]
 800eb78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eb7a:	e005      	b.n	800eb88 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	3301      	adds	r3, #1
 800eb80:	60fb      	str	r3, [r7, #12]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2b07      	cmp	r3, #7
 800eb86:	d9e7      	bls.n	800eb58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb88:	bf00      	nop
 800eb8a:	3714      	adds	r7, #20
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	20004f08 	.word	0x20004f08

0800eb98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b086      	sub	sp, #24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800eba8:	f001 fb80 	bl	80102ac <vPortEnterCritical>
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebb2:	b25b      	sxtb	r3, r3
 800ebb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb8:	d103      	bne.n	800ebc2 <vQueueWaitForMessageRestricted+0x2a>
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebc8:	b25b      	sxtb	r3, r3
 800ebca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebce:	d103      	bne.n	800ebd8 <vQueueWaitForMessageRestricted+0x40>
 800ebd0:	697b      	ldr	r3, [r7, #20]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebd8:	f001 fb96 	bl	8010308 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d106      	bne.n	800ebf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	3324      	adds	r3, #36	; 0x24
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	68b9      	ldr	r1, [r7, #8]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f000 fc2f 	bl	800f450 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ebf2:	6978      	ldr	r0, [r7, #20]
 800ebf4:	f7ff ff27 	bl	800ea46 <prvUnlockQueue>
	}
 800ebf8:	bf00      	nop
 800ebfa:	3718      	adds	r7, #24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b08e      	sub	sp, #56	; 0x38
 800ec04:	af04      	add	r7, sp, #16
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
 800ec0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ec0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d109      	bne.n	800ec28 <xTaskCreateStatic+0x28>
	__asm volatile
 800ec14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	623b      	str	r3, [r7, #32]
 800ec26:	e7fe      	b.n	800ec26 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d109      	bne.n	800ec42 <xTaskCreateStatic+0x42>
 800ec2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec32:	f383 8811 	msr	BASEPRI, r3
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	f3bf 8f4f 	dsb	sy
 800ec3e:	61fb      	str	r3, [r7, #28]
 800ec40:	e7fe      	b.n	800ec40 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec42:	235c      	movs	r3, #92	; 0x5c
 800ec44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec46:	693b      	ldr	r3, [r7, #16]
 800ec48:	2b5c      	cmp	r3, #92	; 0x5c
 800ec4a:	d009      	beq.n	800ec60 <xTaskCreateStatic+0x60>
 800ec4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec50:	f383 8811 	msr	BASEPRI, r3
 800ec54:	f3bf 8f6f 	isb	sy
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	61bb      	str	r3, [r7, #24]
 800ec5e:	e7fe      	b.n	800ec5e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d01e      	beq.n	800eca6 <xTaskCreateStatic+0xa6>
 800ec68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d01b      	beq.n	800eca6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec70:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec76:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ec78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ec80:	2300      	movs	r3, #0
 800ec82:	9303      	str	r3, [sp, #12]
 800ec84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec86:	9302      	str	r3, [sp, #8]
 800ec88:	f107 0314 	add.w	r3, r7, #20
 800ec8c:	9301      	str	r3, [sp, #4]
 800ec8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	68b9      	ldr	r1, [r7, #8]
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f000 f850 	bl	800ed3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ec9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eca0:	f000 f8dc 	bl	800ee5c <prvAddNewTaskToReadyList>
 800eca4:	e001      	b.n	800ecaa <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800eca6:	2300      	movs	r3, #0
 800eca8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ecaa:	697b      	ldr	r3, [r7, #20]
	}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3728      	adds	r7, #40	; 0x28
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b08c      	sub	sp, #48	; 0x30
 800ecb8:	af04      	add	r7, sp, #16
 800ecba:	60f8      	str	r0, [r7, #12]
 800ecbc:	60b9      	str	r1, [r7, #8]
 800ecbe:	603b      	str	r3, [r7, #0]
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ecc4:	88fb      	ldrh	r3, [r7, #6]
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f001 fc09 	bl	80104e0 <pvPortMalloc>
 800ecce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00e      	beq.n	800ecf4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ecd6:	205c      	movs	r0, #92	; 0x5c
 800ecd8:	f001 fc02 	bl	80104e0 <pvPortMalloc>
 800ecdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d003      	beq.n	800ecec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	697a      	ldr	r2, [r7, #20]
 800ece8:	631a      	str	r2, [r3, #48]	; 0x30
 800ecea:	e005      	b.n	800ecf8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ecec:	6978      	ldr	r0, [r7, #20]
 800ecee:	f001 fcb9 	bl	8010664 <vPortFree>
 800ecf2:	e001      	b.n	800ecf8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d017      	beq.n	800ed2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed06:	88fa      	ldrh	r2, [r7, #6]
 800ed08:	2300      	movs	r3, #0
 800ed0a:	9303      	str	r3, [sp, #12]
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	9302      	str	r3, [sp, #8]
 800ed10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed12:	9301      	str	r3, [sp, #4]
 800ed14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed16:	9300      	str	r3, [sp, #0]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	68b9      	ldr	r1, [r7, #8]
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f000 f80e 	bl	800ed3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed22:	69f8      	ldr	r0, [r7, #28]
 800ed24:	f000 f89a 	bl	800ee5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	61bb      	str	r3, [r7, #24]
 800ed2c:	e002      	b.n	800ed34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed34:	69bb      	ldr	r3, [r7, #24]
	}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3720      	adds	r7, #32
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b088      	sub	sp, #32
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	60f8      	str	r0, [r7, #12]
 800ed46:	60b9      	str	r1, [r7, #8]
 800ed48:	607a      	str	r2, [r7, #4]
 800ed4a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	461a      	mov	r2, r3
 800ed56:	21a5      	movs	r1, #165	; 0xa5
 800ed58:	f002 f8f9 	bl	8010f4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed66:	3b01      	subs	r3, #1
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	4413      	add	r3, r2
 800ed6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed6e:	69bb      	ldr	r3, [r7, #24]
 800ed70:	f023 0307 	bic.w	r3, r3, #7
 800ed74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	f003 0307 	and.w	r3, r3, #7
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d009      	beq.n	800ed94 <prvInitialiseNewTask+0x56>
 800ed80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed84:	f383 8811 	msr	BASEPRI, r3
 800ed88:	f3bf 8f6f 	isb	sy
 800ed8c:	f3bf 8f4f 	dsb	sy
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	e7fe      	b.n	800ed92 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed94:	68bb      	ldr	r3, [r7, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d01f      	beq.n	800edda <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	61fb      	str	r3, [r7, #28]
 800ed9e:	e012      	b.n	800edc6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800eda0:	68ba      	ldr	r2, [r7, #8]
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	4413      	add	r3, r2
 800eda6:	7819      	ldrb	r1, [r3, #0]
 800eda8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	4413      	add	r3, r2
 800edae:	3334      	adds	r3, #52	; 0x34
 800edb0:	460a      	mov	r2, r1
 800edb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800edb4:	68ba      	ldr	r2, [r7, #8]
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	4413      	add	r3, r2
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d006      	beq.n	800edce <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	3301      	adds	r3, #1
 800edc4:	61fb      	str	r3, [r7, #28]
 800edc6:	69fb      	ldr	r3, [r7, #28]
 800edc8:	2b0f      	cmp	r3, #15
 800edca:	d9e9      	bls.n	800eda0 <prvInitialiseNewTask+0x62>
 800edcc:	e000      	b.n	800edd0 <prvInitialiseNewTask+0x92>
			{
				break;
 800edce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800edd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd2:	2200      	movs	r2, #0
 800edd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800edd8:	e003      	b.n	800ede2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800edda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eddc:	2200      	movs	r2, #0
 800edde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ede2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede4:	2b37      	cmp	r3, #55	; 0x37
 800ede6:	d901      	bls.n	800edec <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ede8:	2337      	movs	r3, #55	; 0x37
 800edea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800edec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	2200      	movs	r2, #0
 800edfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800edfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee00:	3304      	adds	r3, #4
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7ff f8d6 	bl	800dfb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	3318      	adds	r3, #24
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7ff f8d1 	bl	800dfb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee30:	2200      	movs	r2, #0
 800ee32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee36:	683a      	ldr	r2, [r7, #0]
 800ee38:	68f9      	ldr	r1, [r7, #12]
 800ee3a:	69b8      	ldr	r0, [r7, #24]
 800ee3c:	f001 f90c 	bl	8010058 <pxPortInitialiseStack>
 800ee40:	4602      	mov	r2, r0
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee52:	bf00      	nop
 800ee54:	3720      	adds	r7, #32
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
	...

0800ee5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee64:	f001 fa22 	bl	80102ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee68:	4b2d      	ldr	r3, [pc, #180]	; (800ef20 <prvAddNewTaskToReadyList+0xc4>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	4a2c      	ldr	r2, [pc, #176]	; (800ef20 <prvAddNewTaskToReadyList+0xc4>)
 800ee70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee72:	4b2c      	ldr	r3, [pc, #176]	; (800ef24 <prvAddNewTaskToReadyList+0xc8>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d109      	bne.n	800ee8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee7a:	4a2a      	ldr	r2, [pc, #168]	; (800ef24 <prvAddNewTaskToReadyList+0xc8>)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee80:	4b27      	ldr	r3, [pc, #156]	; (800ef20 <prvAddNewTaskToReadyList+0xc4>)
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d110      	bne.n	800eeaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee88:	f000 fc08 	bl	800f69c <prvInitialiseTaskLists>
 800ee8c:	e00d      	b.n	800eeaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee8e:	4b26      	ldr	r3, [pc, #152]	; (800ef28 <prvAddNewTaskToReadyList+0xcc>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d109      	bne.n	800eeaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee96:	4b23      	ldr	r3, [pc, #140]	; (800ef24 <prvAddNewTaskToReadyList+0xc8>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d802      	bhi.n	800eeaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eea4:	4a1f      	ldr	r2, [pc, #124]	; (800ef24 <prvAddNewTaskToReadyList+0xc8>)
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eeaa:	4b20      	ldr	r3, [pc, #128]	; (800ef2c <prvAddNewTaskToReadyList+0xd0>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	3301      	adds	r3, #1
 800eeb0:	4a1e      	ldr	r2, [pc, #120]	; (800ef2c <prvAddNewTaskToReadyList+0xd0>)
 800eeb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800eeb4:	4b1d      	ldr	r3, [pc, #116]	; (800ef2c <prvAddNewTaskToReadyList+0xd0>)
 800eeb6:	681a      	ldr	r2, [r3, #0]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec0:	4b1b      	ldr	r3, [pc, #108]	; (800ef30 <prvAddNewTaskToReadyList+0xd4>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d903      	bls.n	800eed0 <prvAddNewTaskToReadyList+0x74>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eecc:	4a18      	ldr	r2, [pc, #96]	; (800ef30 <prvAddNewTaskToReadyList+0xd4>)
 800eece:	6013      	str	r3, [r2, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eed4:	4613      	mov	r3, r2
 800eed6:	009b      	lsls	r3, r3, #2
 800eed8:	4413      	add	r3, r2
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	4a15      	ldr	r2, [pc, #84]	; (800ef34 <prvAddNewTaskToReadyList+0xd8>)
 800eede:	441a      	add	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	3304      	adds	r3, #4
 800eee4:	4619      	mov	r1, r3
 800eee6:	4610      	mov	r0, r2
 800eee8:	f7ff f871 	bl	800dfce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eeec:	f001 fa0c 	bl	8010308 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eef0:	4b0d      	ldr	r3, [pc, #52]	; (800ef28 <prvAddNewTaskToReadyList+0xcc>)
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d00e      	beq.n	800ef16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eef8:	4b0a      	ldr	r3, [pc, #40]	; (800ef24 <prvAddNewTaskToReadyList+0xc8>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d207      	bcs.n	800ef16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef06:	4b0c      	ldr	r3, [pc, #48]	; (800ef38 <prvAddNewTaskToReadyList+0xdc>)
 800ef08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef0c:	601a      	str	r2, [r3, #0]
 800ef0e:	f3bf 8f4f 	dsb	sy
 800ef12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef16:	bf00      	nop
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
 800ef1e:	bf00      	nop
 800ef20:	20000cec 	.word	0x20000cec
 800ef24:	20000818 	.word	0x20000818
 800ef28:	20000cf8 	.word	0x20000cf8
 800ef2c:	20000d08 	.word	0x20000d08
 800ef30:	20000cf4 	.word	0x20000cf4
 800ef34:	2000081c 	.word	0x2000081c
 800ef38:	e000ed04 	.word	0xe000ed04

0800ef3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef44:	2300      	movs	r3, #0
 800ef46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d016      	beq.n	800ef7c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef4e:	4b13      	ldr	r3, [pc, #76]	; (800ef9c <vTaskDelay+0x60>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d009      	beq.n	800ef6a <vTaskDelay+0x2e>
 800ef56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	60bb      	str	r3, [r7, #8]
 800ef68:	e7fe      	b.n	800ef68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800ef6a:	f000 f87f 	bl	800f06c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef6e:	2100      	movs	r1, #0
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 fcd7 	bl	800f924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef76:	f000 f887 	bl	800f088 <xTaskResumeAll>
 800ef7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d107      	bne.n	800ef92 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800ef82:	4b07      	ldr	r3, [pc, #28]	; (800efa0 <vTaskDelay+0x64>)
 800ef84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef88:	601a      	str	r2, [r3, #0]
 800ef8a:	f3bf 8f4f 	dsb	sy
 800ef8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef92:	bf00      	nop
 800ef94:	3710      	adds	r7, #16
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	20000d14 	.word	0x20000d14
 800efa0:	e000ed04 	.word	0xe000ed04

0800efa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b08a      	sub	sp, #40	; 0x28
 800efa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800efaa:	2300      	movs	r3, #0
 800efac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800efae:	2300      	movs	r3, #0
 800efb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800efb2:	463a      	mov	r2, r7
 800efb4:	1d39      	adds	r1, r7, #4
 800efb6:	f107 0308 	add.w	r3, r7, #8
 800efba:	4618      	mov	r0, r3
 800efbc:	f7fe ffa6 	bl	800df0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800efc0:	6839      	ldr	r1, [r7, #0]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	68ba      	ldr	r2, [r7, #8]
 800efc6:	9202      	str	r2, [sp, #8]
 800efc8:	9301      	str	r3, [sp, #4]
 800efca:	2300      	movs	r3, #0
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	2300      	movs	r3, #0
 800efd0:	460a      	mov	r2, r1
 800efd2:	4920      	ldr	r1, [pc, #128]	; (800f054 <vTaskStartScheduler+0xb0>)
 800efd4:	4820      	ldr	r0, [pc, #128]	; (800f058 <vTaskStartScheduler+0xb4>)
 800efd6:	f7ff fe13 	bl	800ec00 <xTaskCreateStatic>
 800efda:	4602      	mov	r2, r0
 800efdc:	4b1f      	ldr	r3, [pc, #124]	; (800f05c <vTaskStartScheduler+0xb8>)
 800efde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800efe0:	4b1e      	ldr	r3, [pc, #120]	; (800f05c <vTaskStartScheduler+0xb8>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d002      	beq.n	800efee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800efe8:	2301      	movs	r3, #1
 800efea:	617b      	str	r3, [r7, #20]
 800efec:	e001      	b.n	800eff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800efee:	2300      	movs	r3, #0
 800eff0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d102      	bne.n	800effe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800eff8:	f000 fce8 	bl	800f9cc <xTimerCreateTimerTask>
 800effc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	2b01      	cmp	r3, #1
 800f002:	d115      	bne.n	800f030 <vTaskStartScheduler+0x8c>
 800f004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f016:	4b12      	ldr	r3, [pc, #72]	; (800f060 <vTaskStartScheduler+0xbc>)
 800f018:	f04f 32ff 	mov.w	r2, #4294967295
 800f01c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f01e:	4b11      	ldr	r3, [pc, #68]	; (800f064 <vTaskStartScheduler+0xc0>)
 800f020:	2201      	movs	r2, #1
 800f022:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f024:	4b10      	ldr	r3, [pc, #64]	; (800f068 <vTaskStartScheduler+0xc4>)
 800f026:	2200      	movs	r2, #0
 800f028:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f02a:	f001 f8a1 	bl	8010170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f02e:	e00d      	b.n	800f04c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f036:	d109      	bne.n	800f04c <vTaskStartScheduler+0xa8>
 800f038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f03c:	f383 8811 	msr	BASEPRI, r3
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	60fb      	str	r3, [r7, #12]
 800f04a:	e7fe      	b.n	800f04a <vTaskStartScheduler+0xa6>
}
 800f04c:	bf00      	nop
 800f04e:	3718      	adds	r7, #24
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	08011184 	.word	0x08011184
 800f058:	0800f66d 	.word	0x0800f66d
 800f05c:	20000d10 	.word	0x20000d10
 800f060:	20000d0c 	.word	0x20000d0c
 800f064:	20000cf8 	.word	0x20000cf8
 800f068:	20000cf0 	.word	0x20000cf0

0800f06c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f06c:	b480      	push	{r7}
 800f06e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f070:	4b04      	ldr	r3, [pc, #16]	; (800f084 <vTaskSuspendAll+0x18>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	3301      	adds	r3, #1
 800f076:	4a03      	ldr	r2, [pc, #12]	; (800f084 <vTaskSuspendAll+0x18>)
 800f078:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f07a:	bf00      	nop
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr
 800f084:	20000d14 	.word	0x20000d14

0800f088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f08e:	2300      	movs	r3, #0
 800f090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f092:	2300      	movs	r3, #0
 800f094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f096:	4b41      	ldr	r3, [pc, #260]	; (800f19c <xTaskResumeAll+0x114>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d109      	bne.n	800f0b2 <xTaskResumeAll+0x2a>
 800f09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a2:	f383 8811 	msr	BASEPRI, r3
 800f0a6:	f3bf 8f6f 	isb	sy
 800f0aa:	f3bf 8f4f 	dsb	sy
 800f0ae:	603b      	str	r3, [r7, #0]
 800f0b0:	e7fe      	b.n	800f0b0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f0b2:	f001 f8fb 	bl	80102ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f0b6:	4b39      	ldr	r3, [pc, #228]	; (800f19c <xTaskResumeAll+0x114>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	4a37      	ldr	r2, [pc, #220]	; (800f19c <xTaskResumeAll+0x114>)
 800f0be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0c0:	4b36      	ldr	r3, [pc, #216]	; (800f19c <xTaskResumeAll+0x114>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d162      	bne.n	800f18e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f0c8:	4b35      	ldr	r3, [pc, #212]	; (800f1a0 <xTaskResumeAll+0x118>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d05e      	beq.n	800f18e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0d0:	e02f      	b.n	800f132 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0d2:	4b34      	ldr	r3, [pc, #208]	; (800f1a4 <xTaskResumeAll+0x11c>)
 800f0d4:	68db      	ldr	r3, [r3, #12]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	3318      	adds	r3, #24
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe ffd2 	bl	800e088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fe ffcd 	bl	800e088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0f2:	4b2d      	ldr	r3, [pc, #180]	; (800f1a8 <xTaskResumeAll+0x120>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d903      	bls.n	800f102 <xTaskResumeAll+0x7a>
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0fe:	4a2a      	ldr	r2, [pc, #168]	; (800f1a8 <xTaskResumeAll+0x120>)
 800f100:	6013      	str	r3, [r2, #0]
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f106:	4613      	mov	r3, r2
 800f108:	009b      	lsls	r3, r3, #2
 800f10a:	4413      	add	r3, r2
 800f10c:	009b      	lsls	r3, r3, #2
 800f10e:	4a27      	ldr	r2, [pc, #156]	; (800f1ac <xTaskResumeAll+0x124>)
 800f110:	441a      	add	r2, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	3304      	adds	r3, #4
 800f116:	4619      	mov	r1, r3
 800f118:	4610      	mov	r0, r2
 800f11a:	f7fe ff58 	bl	800dfce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f122:	4b23      	ldr	r3, [pc, #140]	; (800f1b0 <xTaskResumeAll+0x128>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f128:	429a      	cmp	r2, r3
 800f12a:	d302      	bcc.n	800f132 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f12c:	4b21      	ldr	r3, [pc, #132]	; (800f1b4 <xTaskResumeAll+0x12c>)
 800f12e:	2201      	movs	r2, #1
 800f130:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f132:	4b1c      	ldr	r3, [pc, #112]	; (800f1a4 <xTaskResumeAll+0x11c>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d1cb      	bne.n	800f0d2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d001      	beq.n	800f144 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f140:	f000 fb46 	bl	800f7d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f144:	4b1c      	ldr	r3, [pc, #112]	; (800f1b8 <xTaskResumeAll+0x130>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d010      	beq.n	800f172 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f150:	f000 f846 	bl	800f1e0 <xTaskIncrementTick>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d002      	beq.n	800f160 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f15a:	4b16      	ldr	r3, [pc, #88]	; (800f1b4 <xTaskResumeAll+0x12c>)
 800f15c:	2201      	movs	r2, #1
 800f15e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	3b01      	subs	r3, #1
 800f164:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d1f1      	bne.n	800f150 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800f16c:	4b12      	ldr	r3, [pc, #72]	; (800f1b8 <xTaskResumeAll+0x130>)
 800f16e:	2200      	movs	r2, #0
 800f170:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f172:	4b10      	ldr	r3, [pc, #64]	; (800f1b4 <xTaskResumeAll+0x12c>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d009      	beq.n	800f18e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f17a:	2301      	movs	r3, #1
 800f17c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f17e:	4b0f      	ldr	r3, [pc, #60]	; (800f1bc <xTaskResumeAll+0x134>)
 800f180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f18e:	f001 f8bb 	bl	8010308 <vPortExitCritical>

	return xAlreadyYielded;
 800f192:	68bb      	ldr	r3, [r7, #8]
}
 800f194:	4618      	mov	r0, r3
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	20000d14 	.word	0x20000d14
 800f1a0:	20000cec 	.word	0x20000cec
 800f1a4:	20000cac 	.word	0x20000cac
 800f1a8:	20000cf4 	.word	0x20000cf4
 800f1ac:	2000081c 	.word	0x2000081c
 800f1b0:	20000818 	.word	0x20000818
 800f1b4:	20000d00 	.word	0x20000d00
 800f1b8:	20000cfc 	.word	0x20000cfc
 800f1bc:	e000ed04 	.word	0xe000ed04

0800f1c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f1c0:	b480      	push	{r7}
 800f1c2:	b083      	sub	sp, #12
 800f1c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f1c6:	4b05      	ldr	r3, [pc, #20]	; (800f1dc <xTaskGetTickCount+0x1c>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f1cc:	687b      	ldr	r3, [r7, #4]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	370c      	adds	r7, #12
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d8:	4770      	bx	lr
 800f1da:	bf00      	nop
 800f1dc:	20000cf0 	.word	0x20000cf0

0800f1e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b086      	sub	sp, #24
 800f1e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f1ea:	4b4e      	ldr	r3, [pc, #312]	; (800f324 <xTaskIncrementTick+0x144>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	f040 8088 	bne.w	800f304 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f1f4:	4b4c      	ldr	r3, [pc, #304]	; (800f328 <xTaskIncrementTick+0x148>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f1fc:	4a4a      	ldr	r2, [pc, #296]	; (800f328 <xTaskIncrementTick+0x148>)
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d11f      	bne.n	800f248 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800f208:	4b48      	ldr	r3, [pc, #288]	; (800f32c <xTaskIncrementTick+0x14c>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d009      	beq.n	800f226 <xTaskIncrementTick+0x46>
 800f212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f216:	f383 8811 	msr	BASEPRI, r3
 800f21a:	f3bf 8f6f 	isb	sy
 800f21e:	f3bf 8f4f 	dsb	sy
 800f222:	603b      	str	r3, [r7, #0]
 800f224:	e7fe      	b.n	800f224 <xTaskIncrementTick+0x44>
 800f226:	4b41      	ldr	r3, [pc, #260]	; (800f32c <xTaskIncrementTick+0x14c>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	60fb      	str	r3, [r7, #12]
 800f22c:	4b40      	ldr	r3, [pc, #256]	; (800f330 <xTaskIncrementTick+0x150>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a3e      	ldr	r2, [pc, #248]	; (800f32c <xTaskIncrementTick+0x14c>)
 800f232:	6013      	str	r3, [r2, #0]
 800f234:	4a3e      	ldr	r2, [pc, #248]	; (800f330 <xTaskIncrementTick+0x150>)
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6013      	str	r3, [r2, #0]
 800f23a:	4b3e      	ldr	r3, [pc, #248]	; (800f334 <xTaskIncrementTick+0x154>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	3301      	adds	r3, #1
 800f240:	4a3c      	ldr	r2, [pc, #240]	; (800f334 <xTaskIncrementTick+0x154>)
 800f242:	6013      	str	r3, [r2, #0]
 800f244:	f000 fac4 	bl	800f7d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f248:	4b3b      	ldr	r3, [pc, #236]	; (800f338 <xTaskIncrementTick+0x158>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	693a      	ldr	r2, [r7, #16]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d349      	bcc.n	800f2e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f252:	4b36      	ldr	r3, [pc, #216]	; (800f32c <xTaskIncrementTick+0x14c>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d104      	bne.n	800f266 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f25c:	4b36      	ldr	r3, [pc, #216]	; (800f338 <xTaskIncrementTick+0x158>)
 800f25e:	f04f 32ff 	mov.w	r2, #4294967295
 800f262:	601a      	str	r2, [r3, #0]
					break;
 800f264:	e03f      	b.n	800f2e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f266:	4b31      	ldr	r3, [pc, #196]	; (800f32c <xTaskIncrementTick+0x14c>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	68db      	ldr	r3, [r3, #12]
 800f26c:	68db      	ldr	r3, [r3, #12]
 800f26e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f276:	693a      	ldr	r2, [r7, #16]
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d203      	bcs.n	800f286 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f27e:	4a2e      	ldr	r2, [pc, #184]	; (800f338 <xTaskIncrementTick+0x158>)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f284:	e02f      	b.n	800f2e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	3304      	adds	r3, #4
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fe fefc 	bl	800e088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f294:	2b00      	cmp	r3, #0
 800f296:	d004      	beq.n	800f2a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	3318      	adds	r3, #24
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fe fef3 	bl	800e088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2a6:	4b25      	ldr	r3, [pc, #148]	; (800f33c <xTaskIncrementTick+0x15c>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d903      	bls.n	800f2b6 <xTaskIncrementTick+0xd6>
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2b2:	4a22      	ldr	r2, [pc, #136]	; (800f33c <xTaskIncrementTick+0x15c>)
 800f2b4:	6013      	str	r3, [r2, #0]
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	4413      	add	r3, r2
 800f2c0:	009b      	lsls	r3, r3, #2
 800f2c2:	4a1f      	ldr	r2, [pc, #124]	; (800f340 <xTaskIncrementTick+0x160>)
 800f2c4:	441a      	add	r2, r3
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	3304      	adds	r3, #4
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	4610      	mov	r0, r2
 800f2ce:	f7fe fe7e 	bl	800dfce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d6:	4b1b      	ldr	r3, [pc, #108]	; (800f344 <xTaskIncrementTick+0x164>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d3b8      	bcc.n	800f252 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f2e4:	e7b5      	b.n	800f252 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f2e6:	4b17      	ldr	r3, [pc, #92]	; (800f344 <xTaskIncrementTick+0x164>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2ec:	4914      	ldr	r1, [pc, #80]	; (800f340 <xTaskIncrementTick+0x160>)
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	4413      	add	r3, r2
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	440b      	add	r3, r1
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d907      	bls.n	800f30e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800f2fe:	2301      	movs	r3, #1
 800f300:	617b      	str	r3, [r7, #20]
 800f302:	e004      	b.n	800f30e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f304:	4b10      	ldr	r3, [pc, #64]	; (800f348 <xTaskIncrementTick+0x168>)
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	3301      	adds	r3, #1
 800f30a:	4a0f      	ldr	r2, [pc, #60]	; (800f348 <xTaskIncrementTick+0x168>)
 800f30c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f30e:	4b0f      	ldr	r3, [pc, #60]	; (800f34c <xTaskIncrementTick+0x16c>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d001      	beq.n	800f31a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800f316:	2301      	movs	r3, #1
 800f318:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f31a:	697b      	ldr	r3, [r7, #20]
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3718      	adds	r7, #24
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	20000d14 	.word	0x20000d14
 800f328:	20000cf0 	.word	0x20000cf0
 800f32c:	20000ca4 	.word	0x20000ca4
 800f330:	20000ca8 	.word	0x20000ca8
 800f334:	20000d04 	.word	0x20000d04
 800f338:	20000d0c 	.word	0x20000d0c
 800f33c:	20000cf4 	.word	0x20000cf4
 800f340:	2000081c 	.word	0x2000081c
 800f344:	20000818 	.word	0x20000818
 800f348:	20000cfc 	.word	0x20000cfc
 800f34c:	20000d00 	.word	0x20000d00

0800f350 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f356:	4b27      	ldr	r3, [pc, #156]	; (800f3f4 <vTaskSwitchContext+0xa4>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d003      	beq.n	800f366 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f35e:	4b26      	ldr	r3, [pc, #152]	; (800f3f8 <vTaskSwitchContext+0xa8>)
 800f360:	2201      	movs	r2, #1
 800f362:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f364:	e040      	b.n	800f3e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800f366:	4b24      	ldr	r3, [pc, #144]	; (800f3f8 <vTaskSwitchContext+0xa8>)
 800f368:	2200      	movs	r2, #0
 800f36a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f36c:	4b23      	ldr	r3, [pc, #140]	; (800f3fc <vTaskSwitchContext+0xac>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	60fb      	str	r3, [r7, #12]
 800f372:	e00f      	b.n	800f394 <vTaskSwitchContext+0x44>
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d109      	bne.n	800f38e <vTaskSwitchContext+0x3e>
 800f37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37e:	f383 8811 	msr	BASEPRI, r3
 800f382:	f3bf 8f6f 	isb	sy
 800f386:	f3bf 8f4f 	dsb	sy
 800f38a:	607b      	str	r3, [r7, #4]
 800f38c:	e7fe      	b.n	800f38c <vTaskSwitchContext+0x3c>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	3b01      	subs	r3, #1
 800f392:	60fb      	str	r3, [r7, #12]
 800f394:	491a      	ldr	r1, [pc, #104]	; (800f400 <vTaskSwitchContext+0xb0>)
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	4613      	mov	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4413      	add	r3, r2
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	440b      	add	r3, r1
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d0e5      	beq.n	800f374 <vTaskSwitchContext+0x24>
 800f3a8:	68fa      	ldr	r2, [r7, #12]
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	4413      	add	r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	4a13      	ldr	r2, [pc, #76]	; (800f400 <vTaskSwitchContext+0xb0>)
 800f3b4:	4413      	add	r3, r2
 800f3b6:	60bb      	str	r3, [r7, #8]
 800f3b8:	68bb      	ldr	r3, [r7, #8]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	605a      	str	r2, [r3, #4]
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	685a      	ldr	r2, [r3, #4]
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	3308      	adds	r3, #8
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d104      	bne.n	800f3d8 <vTaskSwitchContext+0x88>
 800f3ce:	68bb      	ldr	r3, [r7, #8]
 800f3d0:	685b      	ldr	r3, [r3, #4]
 800f3d2:	685a      	ldr	r2, [r3, #4]
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	605a      	str	r2, [r3, #4]
 800f3d8:	68bb      	ldr	r3, [r7, #8]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	4a09      	ldr	r2, [pc, #36]	; (800f404 <vTaskSwitchContext+0xb4>)
 800f3e0:	6013      	str	r3, [r2, #0]
 800f3e2:	4a06      	ldr	r2, [pc, #24]	; (800f3fc <vTaskSwitchContext+0xac>)
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	6013      	str	r3, [r2, #0]
}
 800f3e8:	bf00      	nop
 800f3ea:	3714      	adds	r7, #20
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f2:	4770      	bx	lr
 800f3f4:	20000d14 	.word	0x20000d14
 800f3f8:	20000d00 	.word	0x20000d00
 800f3fc:	20000cf4 	.word	0x20000cf4
 800f400:	2000081c 	.word	0x2000081c
 800f404:	20000818 	.word	0x20000818

0800f408 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b084      	sub	sp, #16
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d109      	bne.n	800f42c <vTaskPlaceOnEventList+0x24>
 800f418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41c:	f383 8811 	msr	BASEPRI, r3
 800f420:	f3bf 8f6f 	isb	sy
 800f424:	f3bf 8f4f 	dsb	sy
 800f428:	60fb      	str	r3, [r7, #12]
 800f42a:	e7fe      	b.n	800f42a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f42c:	4b07      	ldr	r3, [pc, #28]	; (800f44c <vTaskPlaceOnEventList+0x44>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	3318      	adds	r3, #24
 800f432:	4619      	mov	r1, r3
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f7fe fdee 	bl	800e016 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f43a:	2101      	movs	r1, #1
 800f43c:	6838      	ldr	r0, [r7, #0]
 800f43e:	f000 fa71 	bl	800f924 <prvAddCurrentTaskToDelayedList>
}
 800f442:	bf00      	nop
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	20000818 	.word	0x20000818

0800f450 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f450:	b580      	push	{r7, lr}
 800f452:	b086      	sub	sp, #24
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d109      	bne.n	800f476 <vTaskPlaceOnEventListRestricted+0x26>
 800f462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	617b      	str	r3, [r7, #20]
 800f474:	e7fe      	b.n	800f474 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f476:	4b0a      	ldr	r3, [pc, #40]	; (800f4a0 <vTaskPlaceOnEventListRestricted+0x50>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	3318      	adds	r3, #24
 800f47c:	4619      	mov	r1, r3
 800f47e:	68f8      	ldr	r0, [r7, #12]
 800f480:	f7fe fda5 	bl	800dfce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d002      	beq.n	800f490 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800f48a:	f04f 33ff 	mov.w	r3, #4294967295
 800f48e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f490:	6879      	ldr	r1, [r7, #4]
 800f492:	68b8      	ldr	r0, [r7, #8]
 800f494:	f000 fa46 	bl	800f924 <prvAddCurrentTaskToDelayedList>
	}
 800f498:	bf00      	nop
 800f49a:	3718      	adds	r7, #24
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	20000818 	.word	0x20000818

0800f4a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b086      	sub	sp, #24
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f4b4:	693b      	ldr	r3, [r7, #16]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d109      	bne.n	800f4ce <xTaskRemoveFromEventList+0x2a>
 800f4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4be:	f383 8811 	msr	BASEPRI, r3
 800f4c2:	f3bf 8f6f 	isb	sy
 800f4c6:	f3bf 8f4f 	dsb	sy
 800f4ca:	60fb      	str	r3, [r7, #12]
 800f4cc:	e7fe      	b.n	800f4cc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f4ce:	693b      	ldr	r3, [r7, #16]
 800f4d0:	3318      	adds	r3, #24
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fe fdd8 	bl	800e088 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4d8:	4b1d      	ldr	r3, [pc, #116]	; (800f550 <xTaskRemoveFromEventList+0xac>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d11d      	bne.n	800f51c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	3304      	adds	r3, #4
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fe fdcf 	bl	800e088 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4ee:	4b19      	ldr	r3, [pc, #100]	; (800f554 <xTaskRemoveFromEventList+0xb0>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d903      	bls.n	800f4fe <xTaskRemoveFromEventList+0x5a>
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4fa:	4a16      	ldr	r2, [pc, #88]	; (800f554 <xTaskRemoveFromEventList+0xb0>)
 800f4fc:	6013      	str	r3, [r2, #0]
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f502:	4613      	mov	r3, r2
 800f504:	009b      	lsls	r3, r3, #2
 800f506:	4413      	add	r3, r2
 800f508:	009b      	lsls	r3, r3, #2
 800f50a:	4a13      	ldr	r2, [pc, #76]	; (800f558 <xTaskRemoveFromEventList+0xb4>)
 800f50c:	441a      	add	r2, r3
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	3304      	adds	r3, #4
 800f512:	4619      	mov	r1, r3
 800f514:	4610      	mov	r0, r2
 800f516:	f7fe fd5a 	bl	800dfce <vListInsertEnd>
 800f51a:	e005      	b.n	800f528 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	3318      	adds	r3, #24
 800f520:	4619      	mov	r1, r3
 800f522:	480e      	ldr	r0, [pc, #56]	; (800f55c <xTaskRemoveFromEventList+0xb8>)
 800f524:	f7fe fd53 	bl	800dfce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f52c:	4b0c      	ldr	r3, [pc, #48]	; (800f560 <xTaskRemoveFromEventList+0xbc>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f532:	429a      	cmp	r2, r3
 800f534:	d905      	bls.n	800f542 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f536:	2301      	movs	r3, #1
 800f538:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f53a:	4b0a      	ldr	r3, [pc, #40]	; (800f564 <xTaskRemoveFromEventList+0xc0>)
 800f53c:	2201      	movs	r2, #1
 800f53e:	601a      	str	r2, [r3, #0]
 800f540:	e001      	b.n	800f546 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f542:	2300      	movs	r3, #0
 800f544:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f546:	697b      	ldr	r3, [r7, #20]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3718      	adds	r7, #24
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	20000d14 	.word	0x20000d14
 800f554:	20000cf4 	.word	0x20000cf4
 800f558:	2000081c 	.word	0x2000081c
 800f55c:	20000cac 	.word	0x20000cac
 800f560:	20000818 	.word	0x20000818
 800f564:	20000d00 	.word	0x20000d00

0800f568 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f570:	4b06      	ldr	r3, [pc, #24]	; (800f58c <vTaskInternalSetTimeOutState+0x24>)
 800f572:	681a      	ldr	r2, [r3, #0]
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f578:	4b05      	ldr	r3, [pc, #20]	; (800f590 <vTaskInternalSetTimeOutState+0x28>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	605a      	str	r2, [r3, #4]
}
 800f580:	bf00      	nop
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	20000d04 	.word	0x20000d04
 800f590:	20000cf0 	.word	0x20000cf0

0800f594 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b088      	sub	sp, #32
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d109      	bne.n	800f5b8 <xTaskCheckForTimeOut+0x24>
 800f5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a8:	f383 8811 	msr	BASEPRI, r3
 800f5ac:	f3bf 8f6f 	isb	sy
 800f5b0:	f3bf 8f4f 	dsb	sy
 800f5b4:	613b      	str	r3, [r7, #16]
 800f5b6:	e7fe      	b.n	800f5b6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d109      	bne.n	800f5d2 <xTaskCheckForTimeOut+0x3e>
 800f5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	60fb      	str	r3, [r7, #12]
 800f5d0:	e7fe      	b.n	800f5d0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800f5d2:	f000 fe6b 	bl	80102ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f5d6:	4b1d      	ldr	r3, [pc, #116]	; (800f64c <xTaskCheckForTimeOut+0xb8>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	69ba      	ldr	r2, [r7, #24]
 800f5e2:	1ad3      	subs	r3, r2, r3
 800f5e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ee:	d102      	bne.n	800f5f6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	61fb      	str	r3, [r7, #28]
 800f5f4:	e023      	b.n	800f63e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	4b15      	ldr	r3, [pc, #84]	; (800f650 <xTaskCheckForTimeOut+0xbc>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d007      	beq.n	800f612 <xTaskCheckForTimeOut+0x7e>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	69ba      	ldr	r2, [r7, #24]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d302      	bcc.n	800f612 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f60c:	2301      	movs	r3, #1
 800f60e:	61fb      	str	r3, [r7, #28]
 800f610:	e015      	b.n	800f63e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	697a      	ldr	r2, [r7, #20]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d20b      	bcs.n	800f634 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	681a      	ldr	r2, [r3, #0]
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	1ad2      	subs	r2, r2, r3
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f7ff ff9d 	bl	800f568 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f62e:	2300      	movs	r3, #0
 800f630:	61fb      	str	r3, [r7, #28]
 800f632:	e004      	b.n	800f63e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	2200      	movs	r2, #0
 800f638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f63a:	2301      	movs	r3, #1
 800f63c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f63e:	f000 fe63 	bl	8010308 <vPortExitCritical>

	return xReturn;
 800f642:	69fb      	ldr	r3, [r7, #28]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3720      	adds	r7, #32
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	20000cf0 	.word	0x20000cf0
 800f650:	20000d04 	.word	0x20000d04

0800f654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f654:	b480      	push	{r7}
 800f656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f658:	4b03      	ldr	r3, [pc, #12]	; (800f668 <vTaskMissedYield+0x14>)
 800f65a:	2201      	movs	r2, #1
 800f65c:	601a      	str	r2, [r3, #0]
}
 800f65e:	bf00      	nop
 800f660:	46bd      	mov	sp, r7
 800f662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f666:	4770      	bx	lr
 800f668:	20000d00 	.word	0x20000d00

0800f66c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f674:	f000 f852 	bl	800f71c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f678:	4b06      	ldr	r3, [pc, #24]	; (800f694 <prvIdleTask+0x28>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d9f9      	bls.n	800f674 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f680:	4b05      	ldr	r3, [pc, #20]	; (800f698 <prvIdleTask+0x2c>)
 800f682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f686:	601a      	str	r2, [r3, #0]
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f690:	e7f0      	b.n	800f674 <prvIdleTask+0x8>
 800f692:	bf00      	nop
 800f694:	2000081c 	.word	0x2000081c
 800f698:	e000ed04 	.word	0xe000ed04

0800f69c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b082      	sub	sp, #8
 800f6a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	607b      	str	r3, [r7, #4]
 800f6a6:	e00c      	b.n	800f6c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f6a8:	687a      	ldr	r2, [r7, #4]
 800f6aa:	4613      	mov	r3, r2
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	4413      	add	r3, r2
 800f6b0:	009b      	lsls	r3, r3, #2
 800f6b2:	4a12      	ldr	r2, [pc, #72]	; (800f6fc <prvInitialiseTaskLists+0x60>)
 800f6b4:	4413      	add	r3, r2
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fe fc5c 	bl	800df74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	3301      	adds	r3, #1
 800f6c0:	607b      	str	r3, [r7, #4]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2b37      	cmp	r3, #55	; 0x37
 800f6c6:	d9ef      	bls.n	800f6a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f6c8:	480d      	ldr	r0, [pc, #52]	; (800f700 <prvInitialiseTaskLists+0x64>)
 800f6ca:	f7fe fc53 	bl	800df74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6ce:	480d      	ldr	r0, [pc, #52]	; (800f704 <prvInitialiseTaskLists+0x68>)
 800f6d0:	f7fe fc50 	bl	800df74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f6d4:	480c      	ldr	r0, [pc, #48]	; (800f708 <prvInitialiseTaskLists+0x6c>)
 800f6d6:	f7fe fc4d 	bl	800df74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f6da:	480c      	ldr	r0, [pc, #48]	; (800f70c <prvInitialiseTaskLists+0x70>)
 800f6dc:	f7fe fc4a 	bl	800df74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f6e0:	480b      	ldr	r0, [pc, #44]	; (800f710 <prvInitialiseTaskLists+0x74>)
 800f6e2:	f7fe fc47 	bl	800df74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6e6:	4b0b      	ldr	r3, [pc, #44]	; (800f714 <prvInitialiseTaskLists+0x78>)
 800f6e8:	4a05      	ldr	r2, [pc, #20]	; (800f700 <prvInitialiseTaskLists+0x64>)
 800f6ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6ec:	4b0a      	ldr	r3, [pc, #40]	; (800f718 <prvInitialiseTaskLists+0x7c>)
 800f6ee:	4a05      	ldr	r2, [pc, #20]	; (800f704 <prvInitialiseTaskLists+0x68>)
 800f6f0:	601a      	str	r2, [r3, #0]
}
 800f6f2:	bf00      	nop
 800f6f4:	3708      	adds	r7, #8
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	2000081c 	.word	0x2000081c
 800f700:	20000c7c 	.word	0x20000c7c
 800f704:	20000c90 	.word	0x20000c90
 800f708:	20000cac 	.word	0x20000cac
 800f70c:	20000cc0 	.word	0x20000cc0
 800f710:	20000cd8 	.word	0x20000cd8
 800f714:	20000ca4 	.word	0x20000ca4
 800f718:	20000ca8 	.word	0x20000ca8

0800f71c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f722:	e019      	b.n	800f758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f724:	f000 fdc2 	bl	80102ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f728:	4b0f      	ldr	r3, [pc, #60]	; (800f768 <prvCheckTasksWaitingTermination+0x4c>)
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	3304      	adds	r3, #4
 800f734:	4618      	mov	r0, r3
 800f736:	f7fe fca7 	bl	800e088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f73a:	4b0c      	ldr	r3, [pc, #48]	; (800f76c <prvCheckTasksWaitingTermination+0x50>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3b01      	subs	r3, #1
 800f740:	4a0a      	ldr	r2, [pc, #40]	; (800f76c <prvCheckTasksWaitingTermination+0x50>)
 800f742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f744:	4b0a      	ldr	r3, [pc, #40]	; (800f770 <prvCheckTasksWaitingTermination+0x54>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	3b01      	subs	r3, #1
 800f74a:	4a09      	ldr	r2, [pc, #36]	; (800f770 <prvCheckTasksWaitingTermination+0x54>)
 800f74c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f74e:	f000 fddb 	bl	8010308 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 f80e 	bl	800f774 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f758:	4b05      	ldr	r3, [pc, #20]	; (800f770 <prvCheckTasksWaitingTermination+0x54>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d1e1      	bne.n	800f724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f760:	bf00      	nop
 800f762:	3708      	adds	r7, #8
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	20000cc0 	.word	0x20000cc0
 800f76c:	20000cec 	.word	0x20000cec
 800f770:	20000cd4 	.word	0x20000cd4

0800f774 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f782:	2b00      	cmp	r3, #0
 800f784:	d108      	bne.n	800f798 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f78a:	4618      	mov	r0, r3
 800f78c:	f000 ff6a 	bl	8010664 <vPortFree>
				vPortFree( pxTCB );
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 ff67 	bl	8010664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f796:	e017      	b.n	800f7c8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f79e:	2b01      	cmp	r3, #1
 800f7a0:	d103      	bne.n	800f7aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	f000 ff5e 	bl	8010664 <vPortFree>
	}
 800f7a8:	e00e      	b.n	800f7c8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800f7b0:	2b02      	cmp	r3, #2
 800f7b2:	d009      	beq.n	800f7c8 <prvDeleteTCB+0x54>
 800f7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b8:	f383 8811 	msr	BASEPRI, r3
 800f7bc:	f3bf 8f6f 	isb	sy
 800f7c0:	f3bf 8f4f 	dsb	sy
 800f7c4:	60fb      	str	r3, [r7, #12]
 800f7c6:	e7fe      	b.n	800f7c6 <prvDeleteTCB+0x52>
	}
 800f7c8:	bf00      	nop
 800f7ca:	3710      	adds	r7, #16
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7d6:	4b0c      	ldr	r3, [pc, #48]	; (800f808 <prvResetNextTaskUnblockTime+0x38>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d104      	bne.n	800f7ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7e0:	4b0a      	ldr	r3, [pc, #40]	; (800f80c <prvResetNextTaskUnblockTime+0x3c>)
 800f7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f7e8:	e008      	b.n	800f7fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7ea:	4b07      	ldr	r3, [pc, #28]	; (800f808 <prvResetNextTaskUnblockTime+0x38>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	685b      	ldr	r3, [r3, #4]
 800f7f8:	4a04      	ldr	r2, [pc, #16]	; (800f80c <prvResetNextTaskUnblockTime+0x3c>)
 800f7fa:	6013      	str	r3, [r2, #0]
}
 800f7fc:	bf00      	nop
 800f7fe:	370c      	adds	r7, #12
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr
 800f808:	20000ca4 	.word	0x20000ca4
 800f80c:	20000d0c 	.word	0x20000d0c

0800f810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f816:	4b0b      	ldr	r3, [pc, #44]	; (800f844 <xTaskGetSchedulerState+0x34>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d102      	bne.n	800f824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f81e:	2301      	movs	r3, #1
 800f820:	607b      	str	r3, [r7, #4]
 800f822:	e008      	b.n	800f836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f824:	4b08      	ldr	r3, [pc, #32]	; (800f848 <xTaskGetSchedulerState+0x38>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d102      	bne.n	800f832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f82c:	2302      	movs	r3, #2
 800f82e:	607b      	str	r3, [r7, #4]
 800f830:	e001      	b.n	800f836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f832:	2300      	movs	r3, #0
 800f834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f836:	687b      	ldr	r3, [r7, #4]
	}
 800f838:	4618      	mov	r0, r3
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr
 800f844:	20000cf8 	.word	0x20000cf8
 800f848:	20000d14 	.word	0x20000d14

0800f84c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f858:	2300      	movs	r3, #0
 800f85a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d054      	beq.n	800f90c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f862:	4b2d      	ldr	r3, [pc, #180]	; (800f918 <xTaskPriorityDisinherit+0xcc>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	693a      	ldr	r2, [r7, #16]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d009      	beq.n	800f880 <xTaskPriorityDisinherit+0x34>
 800f86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f870:	f383 8811 	msr	BASEPRI, r3
 800f874:	f3bf 8f6f 	isb	sy
 800f878:	f3bf 8f4f 	dsb	sy
 800f87c:	60fb      	str	r3, [r7, #12]
 800f87e:	e7fe      	b.n	800f87e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f884:	2b00      	cmp	r3, #0
 800f886:	d109      	bne.n	800f89c <xTaskPriorityDisinherit+0x50>
 800f888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88c:	f383 8811 	msr	BASEPRI, r3
 800f890:	f3bf 8f6f 	isb	sy
 800f894:	f3bf 8f4f 	dsb	sy
 800f898:	60bb      	str	r3, [r7, #8]
 800f89a:	e7fe      	b.n	800f89a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8a0:	1e5a      	subs	r2, r3, #1
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d02c      	beq.n	800f90c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d128      	bne.n	800f90c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	3304      	adds	r3, #4
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fe fbe2 	bl	800e088 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8cc:	693b      	ldr	r3, [r7, #16]
 800f8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8dc:	4b0f      	ldr	r3, [pc, #60]	; (800f91c <xTaskPriorityDisinherit+0xd0>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d903      	bls.n	800f8ec <xTaskPriorityDisinherit+0xa0>
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e8:	4a0c      	ldr	r2, [pc, #48]	; (800f91c <xTaskPriorityDisinherit+0xd0>)
 800f8ea:	6013      	str	r3, [r2, #0]
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f0:	4613      	mov	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4413      	add	r3, r2
 800f8f6:	009b      	lsls	r3, r3, #2
 800f8f8:	4a09      	ldr	r2, [pc, #36]	; (800f920 <xTaskPriorityDisinherit+0xd4>)
 800f8fa:	441a      	add	r2, r3
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	3304      	adds	r3, #4
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7fe fb63 	bl	800dfce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f908:	2301      	movs	r3, #1
 800f90a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f90c:	697b      	ldr	r3, [r7, #20]
	}
 800f90e:	4618      	mov	r0, r3
 800f910:	3718      	adds	r7, #24
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	20000818 	.word	0x20000818
 800f91c:	20000cf4 	.word	0x20000cf4
 800f920:	2000081c 	.word	0x2000081c

0800f924 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f92e:	4b21      	ldr	r3, [pc, #132]	; (800f9b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f934:	4b20      	ldr	r3, [pc, #128]	; (800f9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	3304      	adds	r3, #4
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fe fba4 	bl	800e088 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f946:	d10a      	bne.n	800f95e <prvAddCurrentTaskToDelayedList+0x3a>
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d007      	beq.n	800f95e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f94e:	4b1a      	ldr	r3, [pc, #104]	; (800f9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	3304      	adds	r3, #4
 800f954:	4619      	mov	r1, r3
 800f956:	4819      	ldr	r0, [pc, #100]	; (800f9bc <prvAddCurrentTaskToDelayedList+0x98>)
 800f958:	f7fe fb39 	bl	800dfce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f95c:	e026      	b.n	800f9ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f95e:	68fa      	ldr	r2, [r7, #12]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4413      	add	r3, r2
 800f964:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f966:	4b14      	ldr	r3, [pc, #80]	; (800f9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	68ba      	ldr	r2, [r7, #8]
 800f96c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f96e:	68ba      	ldr	r2, [r7, #8]
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	429a      	cmp	r2, r3
 800f974:	d209      	bcs.n	800f98a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f976:	4b12      	ldr	r3, [pc, #72]	; (800f9c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f978:	681a      	ldr	r2, [r3, #0]
 800f97a:	4b0f      	ldr	r3, [pc, #60]	; (800f9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	3304      	adds	r3, #4
 800f980:	4619      	mov	r1, r3
 800f982:	4610      	mov	r0, r2
 800f984:	f7fe fb47 	bl	800e016 <vListInsert>
}
 800f988:	e010      	b.n	800f9ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f98a:	4b0e      	ldr	r3, [pc, #56]	; (800f9c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f98c:	681a      	ldr	r2, [r3, #0]
 800f98e:	4b0a      	ldr	r3, [pc, #40]	; (800f9b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	3304      	adds	r3, #4
 800f994:	4619      	mov	r1, r3
 800f996:	4610      	mov	r0, r2
 800f998:	f7fe fb3d 	bl	800e016 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f99c:	4b0a      	ldr	r3, [pc, #40]	; (800f9c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	68ba      	ldr	r2, [r7, #8]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d202      	bcs.n	800f9ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f9a6:	4a08      	ldr	r2, [pc, #32]	; (800f9c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	6013      	str	r3, [r2, #0]
}
 800f9ac:	bf00      	nop
 800f9ae:	3710      	adds	r7, #16
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	20000cf0 	.word	0x20000cf0
 800f9b8:	20000818 	.word	0x20000818
 800f9bc:	20000cd8 	.word	0x20000cd8
 800f9c0:	20000ca8 	.word	0x20000ca8
 800f9c4:	20000ca4 	.word	0x20000ca4
 800f9c8:	20000d0c 	.word	0x20000d0c

0800f9cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b08a      	sub	sp, #40	; 0x28
 800f9d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f9d6:	f000 faff 	bl	800ffd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f9da:	4b1c      	ldr	r3, [pc, #112]	; (800fa4c <xTimerCreateTimerTask+0x80>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d021      	beq.n	800fa26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f9ea:	1d3a      	adds	r2, r7, #4
 800f9ec:	f107 0108 	add.w	r1, r7, #8
 800f9f0:	f107 030c 	add.w	r3, r7, #12
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7fe faa3 	bl	800df40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f9fa:	6879      	ldr	r1, [r7, #4]
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	68fa      	ldr	r2, [r7, #12]
 800fa00:	9202      	str	r2, [sp, #8]
 800fa02:	9301      	str	r3, [sp, #4]
 800fa04:	2302      	movs	r3, #2
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	2300      	movs	r3, #0
 800fa0a:	460a      	mov	r2, r1
 800fa0c:	4910      	ldr	r1, [pc, #64]	; (800fa50 <xTimerCreateTimerTask+0x84>)
 800fa0e:	4811      	ldr	r0, [pc, #68]	; (800fa54 <xTimerCreateTimerTask+0x88>)
 800fa10:	f7ff f8f6 	bl	800ec00 <xTaskCreateStatic>
 800fa14:	4602      	mov	r2, r0
 800fa16:	4b10      	ldr	r3, [pc, #64]	; (800fa58 <xTimerCreateTimerTask+0x8c>)
 800fa18:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fa1a:	4b0f      	ldr	r3, [pc, #60]	; (800fa58 <xTimerCreateTimerTask+0x8c>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fa22:	2301      	movs	r3, #1
 800fa24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d109      	bne.n	800fa40 <xTimerCreateTimerTask+0x74>
 800fa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa30:	f383 8811 	msr	BASEPRI, r3
 800fa34:	f3bf 8f6f 	isb	sy
 800fa38:	f3bf 8f4f 	dsb	sy
 800fa3c:	613b      	str	r3, [r7, #16]
 800fa3e:	e7fe      	b.n	800fa3e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800fa40:	697b      	ldr	r3, [r7, #20]
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3718      	adds	r7, #24
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	20000d48 	.word	0x20000d48
 800fa50:	0801118c 	.word	0x0801118c
 800fa54:	0800fb8d 	.word	0x0800fb8d
 800fa58:	20000d4c 	.word	0x20000d4c

0800fa5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b08a      	sub	sp, #40	; 0x28
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	607a      	str	r2, [r7, #4]
 800fa68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d109      	bne.n	800fa88 <xTimerGenericCommand+0x2c>
 800fa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa78:	f383 8811 	msr	BASEPRI, r3
 800fa7c:	f3bf 8f6f 	isb	sy
 800fa80:	f3bf 8f4f 	dsb	sy
 800fa84:	623b      	str	r3, [r7, #32]
 800fa86:	e7fe      	b.n	800fa86 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fa88:	4b19      	ldr	r3, [pc, #100]	; (800faf0 <xTimerGenericCommand+0x94>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d02a      	beq.n	800fae6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b05      	cmp	r3, #5
 800faa0:	dc18      	bgt.n	800fad4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800faa2:	f7ff feb5 	bl	800f810 <xTaskGetSchedulerState>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b02      	cmp	r3, #2
 800faaa:	d109      	bne.n	800fac0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800faac:	4b10      	ldr	r3, [pc, #64]	; (800faf0 <xTimerGenericCommand+0x94>)
 800faae:	6818      	ldr	r0, [r3, #0]
 800fab0:	f107 0110 	add.w	r1, r7, #16
 800fab4:	2300      	movs	r3, #0
 800fab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fab8:	f7fe fc4e 	bl	800e358 <xQueueGenericSend>
 800fabc:	6278      	str	r0, [r7, #36]	; 0x24
 800fabe:	e012      	b.n	800fae6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fac0:	4b0b      	ldr	r3, [pc, #44]	; (800faf0 <xTimerGenericCommand+0x94>)
 800fac2:	6818      	ldr	r0, [r3, #0]
 800fac4:	f107 0110 	add.w	r1, r7, #16
 800fac8:	2300      	movs	r3, #0
 800faca:	2200      	movs	r2, #0
 800facc:	f7fe fc44 	bl	800e358 <xQueueGenericSend>
 800fad0:	6278      	str	r0, [r7, #36]	; 0x24
 800fad2:	e008      	b.n	800fae6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fad4:	4b06      	ldr	r3, [pc, #24]	; (800faf0 <xTimerGenericCommand+0x94>)
 800fad6:	6818      	ldr	r0, [r3, #0]
 800fad8:	f107 0110 	add.w	r1, r7, #16
 800fadc:	2300      	movs	r3, #0
 800fade:	683a      	ldr	r2, [r7, #0]
 800fae0:	f7fe fd34 	bl	800e54c <xQueueGenericSendFromISR>
 800fae4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3728      	adds	r7, #40	; 0x28
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}
 800faf0:	20000d48 	.word	0x20000d48

0800faf4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b088      	sub	sp, #32
 800faf8:	af02      	add	r7, sp, #8
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fafe:	4b22      	ldr	r3, [pc, #136]	; (800fb88 <prvProcessExpiredTimer+0x94>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	68db      	ldr	r3, [r3, #12]
 800fb04:	68db      	ldr	r3, [r3, #12]
 800fb06:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	3304      	adds	r3, #4
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7fe fabb 	bl	800e088 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb18:	f003 0304 	and.w	r3, r3, #4
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d021      	beq.n	800fb64 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	699a      	ldr	r2, [r3, #24]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	18d1      	adds	r1, r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	6978      	ldr	r0, [r7, #20]
 800fb2e:	f000 f8d1 	bl	800fcd4 <prvInsertTimerInActiveList>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d01e      	beq.n	800fb76 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fb38:	2300      	movs	r3, #0
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	2100      	movs	r1, #0
 800fb42:	6978      	ldr	r0, [r7, #20]
 800fb44:	f7ff ff8a 	bl	800fa5c <xTimerGenericCommand>
 800fb48:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d112      	bne.n	800fb76 <prvProcessExpiredTimer+0x82>
 800fb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	60fb      	str	r3, [r7, #12]
 800fb62:	e7fe      	b.n	800fb62 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fb6a:	f023 0301 	bic.w	r3, r3, #1
 800fb6e:	b2da      	uxtb	r2, r3
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	6978      	ldr	r0, [r7, #20]
 800fb7c:	4798      	blx	r3
}
 800fb7e:	bf00      	nop
 800fb80:	3718      	adds	r7, #24
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}
 800fb86:	bf00      	nop
 800fb88:	20000d40 	.word	0x20000d40

0800fb8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fb94:	f107 0308 	add.w	r3, r7, #8
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f000 f857 	bl	800fc4c <prvGetNextExpireTime>
 800fb9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	4619      	mov	r1, r3
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f000 f803 	bl	800fbb0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fbaa:	f000 f8d5 	bl	800fd58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fbae:	e7f1      	b.n	800fb94 <prvTimerTask+0x8>

0800fbb0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b084      	sub	sp, #16
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fbba:	f7ff fa57 	bl	800f06c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fbbe:	f107 0308 	add.w	r3, r7, #8
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f000 f866 	bl	800fc94 <prvSampleTimeNow>
 800fbc8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d130      	bne.n	800fc32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d10a      	bne.n	800fbec <prvProcessTimerOrBlockTask+0x3c>
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d806      	bhi.n	800fbec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800fbde:	f7ff fa53 	bl	800f088 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800fbe2:	68f9      	ldr	r1, [r7, #12]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f7ff ff85 	bl	800faf4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800fbea:	e024      	b.n	800fc36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d008      	beq.n	800fc04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800fbf2:	4b13      	ldr	r3, [pc, #76]	; (800fc40 <prvProcessTimerOrBlockTask+0x90>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d101      	bne.n	800fc00 <prvProcessTimerOrBlockTask+0x50>
 800fbfc:	2301      	movs	r3, #1
 800fbfe:	e000      	b.n	800fc02 <prvProcessTimerOrBlockTask+0x52>
 800fc00:	2300      	movs	r3, #0
 800fc02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800fc04:	4b0f      	ldr	r3, [pc, #60]	; (800fc44 <prvProcessTimerOrBlockTask+0x94>)
 800fc06:	6818      	ldr	r0, [r3, #0]
 800fc08:	687a      	ldr	r2, [r7, #4]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	1ad3      	subs	r3, r2, r3
 800fc0e:	683a      	ldr	r2, [r7, #0]
 800fc10:	4619      	mov	r1, r3
 800fc12:	f7fe ffc1 	bl	800eb98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fc16:	f7ff fa37 	bl	800f088 <xTaskResumeAll>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d10a      	bne.n	800fc36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800fc20:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <prvProcessTimerOrBlockTask+0x98>)
 800fc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc26:	601a      	str	r2, [r3, #0]
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	f3bf 8f6f 	isb	sy
}
 800fc30:	e001      	b.n	800fc36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800fc32:	f7ff fa29 	bl	800f088 <xTaskResumeAll>
}
 800fc36:	bf00      	nop
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	20000d44 	.word	0x20000d44
 800fc44:	20000d48 	.word	0x20000d48
 800fc48:	e000ed04 	.word	0xe000ed04

0800fc4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b085      	sub	sp, #20
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fc54:	4b0e      	ldr	r3, [pc, #56]	; (800fc90 <prvGetNextExpireTime+0x44>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d101      	bne.n	800fc62 <prvGetNextExpireTime+0x16>
 800fc5e:	2201      	movs	r2, #1
 800fc60:	e000      	b.n	800fc64 <prvGetNextExpireTime+0x18>
 800fc62:	2200      	movs	r2, #0
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d105      	bne.n	800fc7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fc70:	4b07      	ldr	r3, [pc, #28]	; (800fc90 <prvGetNextExpireTime+0x44>)
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	60fb      	str	r3, [r7, #12]
 800fc7a:	e001      	b.n	800fc80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800fc80:	68fb      	ldr	r3, [r7, #12]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3714      	adds	r7, #20
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	20000d40 	.word	0x20000d40

0800fc94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b084      	sub	sp, #16
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800fc9c:	f7ff fa90 	bl	800f1c0 <xTaskGetTickCount>
 800fca0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800fca2:	4b0b      	ldr	r3, [pc, #44]	; (800fcd0 <prvSampleTimeNow+0x3c>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d205      	bcs.n	800fcb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800fcac:	f000 f930 	bl	800ff10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	e002      	b.n	800fcbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800fcbe:	4a04      	ldr	r2, [pc, #16]	; (800fcd0 <prvSampleTimeNow+0x3c>)
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3710      	adds	r7, #16
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	20000d50 	.word	0x20000d50

0800fcd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
 800fce0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800fce2:	2300      	movs	r3, #0
 800fce4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	68fa      	ldr	r2, [r7, #12]
 800fcf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fcf2:	68ba      	ldr	r2, [r7, #8]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d812      	bhi.n	800fd20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	1ad2      	subs	r2, r2, r3
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	699b      	ldr	r3, [r3, #24]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d302      	bcc.n	800fd0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	617b      	str	r3, [r7, #20]
 800fd0c:	e01b      	b.n	800fd46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fd0e:	4b10      	ldr	r3, [pc, #64]	; (800fd50 <prvInsertTimerInActiveList+0x7c>)
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	3304      	adds	r3, #4
 800fd16:	4619      	mov	r1, r3
 800fd18:	4610      	mov	r0, r2
 800fd1a:	f7fe f97c 	bl	800e016 <vListInsert>
 800fd1e:	e012      	b.n	800fd46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fd20:	687a      	ldr	r2, [r7, #4]
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d206      	bcs.n	800fd36 <prvInsertTimerInActiveList+0x62>
 800fd28:	68ba      	ldr	r2, [r7, #8]
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d302      	bcc.n	800fd36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fd30:	2301      	movs	r3, #1
 800fd32:	617b      	str	r3, [r7, #20]
 800fd34:	e007      	b.n	800fd46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fd36:	4b07      	ldr	r3, [pc, #28]	; (800fd54 <prvInsertTimerInActiveList+0x80>)
 800fd38:	681a      	ldr	r2, [r3, #0]
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	3304      	adds	r3, #4
 800fd3e:	4619      	mov	r1, r3
 800fd40:	4610      	mov	r0, r2
 800fd42:	f7fe f968 	bl	800e016 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800fd46:	697b      	ldr	r3, [r7, #20]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3718      	adds	r7, #24
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}
 800fd50:	20000d44 	.word	0x20000d44
 800fd54:	20000d40 	.word	0x20000d40

0800fd58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b08e      	sub	sp, #56	; 0x38
 800fd5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd5e:	e0c6      	b.n	800feee <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	da17      	bge.n	800fd96 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800fd66:	1d3b      	adds	r3, r7, #4
 800fd68:	3304      	adds	r3, #4
 800fd6a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800fd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d109      	bne.n	800fd86 <prvProcessReceivedCommands+0x2e>
 800fd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd76:	f383 8811 	msr	BASEPRI, r3
 800fd7a:	f3bf 8f6f 	isb	sy
 800fd7e:	f3bf 8f4f 	dsb	sy
 800fd82:	61fb      	str	r3, [r7, #28]
 800fd84:	e7fe      	b.n	800fd84 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd8c:	6850      	ldr	r0, [r2, #4]
 800fd8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd90:	6892      	ldr	r2, [r2, #8]
 800fd92:	4611      	mov	r1, r2
 800fd94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f2c0 80a7 	blt.w	800feec <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda4:	695b      	ldr	r3, [r3, #20]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d004      	beq.n	800fdb4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdac:	3304      	adds	r3, #4
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f7fe f96a 	bl	800e088 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fdb4:	463b      	mov	r3, r7
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7ff ff6c 	bl	800fc94 <prvSampleTimeNow>
 800fdbc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2b09      	cmp	r3, #9
 800fdc2:	f200 8094 	bhi.w	800feee <prvProcessReceivedCommands+0x196>
 800fdc6:	a201      	add	r2, pc, #4	; (adr r2, 800fdcc <prvProcessReceivedCommands+0x74>)
 800fdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdcc:	0800fdf5 	.word	0x0800fdf5
 800fdd0:	0800fdf5 	.word	0x0800fdf5
 800fdd4:	0800fdf5 	.word	0x0800fdf5
 800fdd8:	0800fe67 	.word	0x0800fe67
 800fddc:	0800fe7b 	.word	0x0800fe7b
 800fde0:	0800fec3 	.word	0x0800fec3
 800fde4:	0800fdf5 	.word	0x0800fdf5
 800fde8:	0800fdf5 	.word	0x0800fdf5
 800fdec:	0800fe67 	.word	0x0800fe67
 800fdf0:	0800fe7b 	.word	0x0800fe7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fdfa:	f043 0301 	orr.w	r3, r3, #1
 800fdfe:	b2da      	uxtb	r2, r3
 800fe00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fe06:	68ba      	ldr	r2, [r7, #8]
 800fe08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	18d1      	adds	r1, r2, r3
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe14:	f7ff ff5e 	bl	800fcd4 <prvInsertTimerInActiveList>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d067      	beq.n	800feee <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe20:	6a1b      	ldr	r3, [r3, #32]
 800fe22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe2c:	f003 0304 	and.w	r3, r3, #4
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d05c      	beq.n	800feee <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe34:	68ba      	ldr	r2, [r7, #8]
 800fe36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	441a      	add	r2, r3
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	2300      	movs	r3, #0
 800fe42:	2100      	movs	r1, #0
 800fe44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe46:	f7ff fe09 	bl	800fa5c <xTimerGenericCommand>
 800fe4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fe4c:	6a3b      	ldr	r3, [r7, #32]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d14d      	bne.n	800feee <prvProcessReceivedCommands+0x196>
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	61bb      	str	r3, [r7, #24]
 800fe64:	e7fe      	b.n	800fe64 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe6c:	f023 0301 	bic.w	r3, r3, #1
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800fe78:	e039      	b.n	800feee <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fe7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fe80:	f043 0301 	orr.w	r3, r3, #1
 800fe84:	b2da      	uxtb	r2, r3
 800fe86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe8c:	68ba      	ldr	r2, [r7, #8]
 800fe8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fe92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe94:	699b      	ldr	r3, [r3, #24]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d109      	bne.n	800feae <prvProcessReceivedCommands+0x156>
 800fe9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	617b      	str	r3, [r7, #20]
 800feac:	e7fe      	b.n	800feac <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800feae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feb0:	699a      	ldr	r2, [r3, #24]
 800feb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb4:	18d1      	adds	r1, r2, r3
 800feb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800febc:	f7ff ff0a 	bl	800fcd4 <prvInsertTimerInActiveList>
					break;
 800fec0:	e015      	b.n	800feee <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fec8:	f003 0302 	and.w	r3, r3, #2
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d103      	bne.n	800fed8 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800fed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fed2:	f000 fbc7 	bl	8010664 <vPortFree>
 800fed6:	e00a      	b.n	800feee <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fede:	f023 0301 	bic.w	r3, r3, #1
 800fee2:	b2da      	uxtb	r2, r3
 800fee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800feea:	e000      	b.n	800feee <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800feec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800feee:	4b07      	ldr	r3, [pc, #28]	; (800ff0c <prvProcessReceivedCommands+0x1b4>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	1d39      	adds	r1, r7, #4
 800fef4:	2200      	movs	r2, #0
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7fe fbbc 	bl	800e674 <xQueueReceive>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	f47f af2e 	bne.w	800fd60 <prvProcessReceivedCommands+0x8>
	}
}
 800ff04:	bf00      	nop
 800ff06:	3730      	adds	r7, #48	; 0x30
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}
 800ff0c:	20000d48 	.word	0x20000d48

0800ff10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b088      	sub	sp, #32
 800ff14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ff16:	e047      	b.n	800ffa8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff18:	4b2d      	ldr	r3, [pc, #180]	; (800ffd0 <prvSwitchTimerLists+0xc0>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff22:	4b2b      	ldr	r3, [pc, #172]	; (800ffd0 <prvSwitchTimerLists+0xc0>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	68db      	ldr	r3, [r3, #12]
 800ff2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	3304      	adds	r3, #4
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fe f8a9 	bl	800e088 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	6a1b      	ldr	r3, [r3, #32]
 800ff3a:	68f8      	ldr	r0, [r7, #12]
 800ff3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ff44:	f003 0304 	and.w	r3, r3, #4
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d02d      	beq.n	800ffa8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	699b      	ldr	r3, [r3, #24]
 800ff50:	693a      	ldr	r2, [r7, #16]
 800ff52:	4413      	add	r3, r2
 800ff54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ff56:	68ba      	ldr	r2, [r7, #8]
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	d90e      	bls.n	800ff7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	68fa      	ldr	r2, [r7, #12]
 800ff68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ff6a:	4b19      	ldr	r3, [pc, #100]	; (800ffd0 <prvSwitchTimerLists+0xc0>)
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	3304      	adds	r3, #4
 800ff72:	4619      	mov	r1, r3
 800ff74:	4610      	mov	r0, r2
 800ff76:	f7fe f84e 	bl	800e016 <vListInsert>
 800ff7a:	e015      	b.n	800ffa8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	2300      	movs	r3, #0
 800ff82:	693a      	ldr	r2, [r7, #16]
 800ff84:	2100      	movs	r1, #0
 800ff86:	68f8      	ldr	r0, [r7, #12]
 800ff88:	f7ff fd68 	bl	800fa5c <xTimerGenericCommand>
 800ff8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d109      	bne.n	800ffa8 <prvSwitchTimerLists+0x98>
 800ff94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff98:	f383 8811 	msr	BASEPRI, r3
 800ff9c:	f3bf 8f6f 	isb	sy
 800ffa0:	f3bf 8f4f 	dsb	sy
 800ffa4:	603b      	str	r3, [r7, #0]
 800ffa6:	e7fe      	b.n	800ffa6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ffa8:	4b09      	ldr	r3, [pc, #36]	; (800ffd0 <prvSwitchTimerLists+0xc0>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1b2      	bne.n	800ff18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ffb2:	4b07      	ldr	r3, [pc, #28]	; (800ffd0 <prvSwitchTimerLists+0xc0>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ffb8:	4b06      	ldr	r3, [pc, #24]	; (800ffd4 <prvSwitchTimerLists+0xc4>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a04      	ldr	r2, [pc, #16]	; (800ffd0 <prvSwitchTimerLists+0xc0>)
 800ffbe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ffc0:	4a04      	ldr	r2, [pc, #16]	; (800ffd4 <prvSwitchTimerLists+0xc4>)
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	6013      	str	r3, [r2, #0]
}
 800ffc6:	bf00      	nop
 800ffc8:	3718      	adds	r7, #24
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	20000d40 	.word	0x20000d40
 800ffd4:	20000d44 	.word	0x20000d44

0800ffd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ffde:	f000 f965 	bl	80102ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ffe2:	4b15      	ldr	r3, [pc, #84]	; (8010038 <prvCheckForValidListAndQueue+0x60>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d120      	bne.n	801002c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ffea:	4814      	ldr	r0, [pc, #80]	; (801003c <prvCheckForValidListAndQueue+0x64>)
 800ffec:	f7fd ffc2 	bl	800df74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fff0:	4813      	ldr	r0, [pc, #76]	; (8010040 <prvCheckForValidListAndQueue+0x68>)
 800fff2:	f7fd ffbf 	bl	800df74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fff6:	4b13      	ldr	r3, [pc, #76]	; (8010044 <prvCheckForValidListAndQueue+0x6c>)
 800fff8:	4a10      	ldr	r2, [pc, #64]	; (801003c <prvCheckForValidListAndQueue+0x64>)
 800fffa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fffc:	4b12      	ldr	r3, [pc, #72]	; (8010048 <prvCheckForValidListAndQueue+0x70>)
 800fffe:	4a10      	ldr	r2, [pc, #64]	; (8010040 <prvCheckForValidListAndQueue+0x68>)
 8010000:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010002:	2300      	movs	r3, #0
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	4b11      	ldr	r3, [pc, #68]	; (801004c <prvCheckForValidListAndQueue+0x74>)
 8010008:	4a11      	ldr	r2, [pc, #68]	; (8010050 <prvCheckForValidListAndQueue+0x78>)
 801000a:	2110      	movs	r1, #16
 801000c:	200a      	movs	r0, #10
 801000e:	f7fe f8cd 	bl	800e1ac <xQueueGenericCreateStatic>
 8010012:	4602      	mov	r2, r0
 8010014:	4b08      	ldr	r3, [pc, #32]	; (8010038 <prvCheckForValidListAndQueue+0x60>)
 8010016:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010018:	4b07      	ldr	r3, [pc, #28]	; (8010038 <prvCheckForValidListAndQueue+0x60>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d005      	beq.n	801002c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010020:	4b05      	ldr	r3, [pc, #20]	; (8010038 <prvCheckForValidListAndQueue+0x60>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	490b      	ldr	r1, [pc, #44]	; (8010054 <prvCheckForValidListAndQueue+0x7c>)
 8010026:	4618      	mov	r0, r3
 8010028:	f7fe fd8e 	bl	800eb48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801002c:	f000 f96c 	bl	8010308 <vPortExitCritical>
}
 8010030:	bf00      	nop
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}
 8010036:	bf00      	nop
 8010038:	20000d48 	.word	0x20000d48
 801003c:	20000d18 	.word	0x20000d18
 8010040:	20000d2c 	.word	0x20000d2c
 8010044:	20000d40 	.word	0x20000d40
 8010048:	20000d44 	.word	0x20000d44
 801004c:	20000df4 	.word	0x20000df4
 8010050:	20000d54 	.word	0x20000d54
 8010054:	08011194 	.word	0x08011194

08010058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010058:	b480      	push	{r7}
 801005a:	b085      	sub	sp, #20
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	3b04      	subs	r3, #4
 8010068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	3b04      	subs	r3, #4
 8010076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	f023 0201 	bic.w	r2, r3, #1
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	3b04      	subs	r3, #4
 8010086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010088:	4a0c      	ldr	r2, [pc, #48]	; (80100bc <pxPortInitialiseStack+0x64>)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	3b14      	subs	r3, #20
 8010092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	3b04      	subs	r3, #4
 801009e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f06f 0202 	mvn.w	r2, #2
 80100a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	3b20      	subs	r3, #32
 80100ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80100ae:	68fb      	ldr	r3, [r7, #12]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	3714      	adds	r7, #20
 80100b4:	46bd      	mov	sp, r7
 80100b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ba:	4770      	bx	lr
 80100bc:	080100c1 	.word	0x080100c1

080100c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80100c0:	b480      	push	{r7}
 80100c2:	b085      	sub	sp, #20
 80100c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80100c6:	2300      	movs	r3, #0
 80100c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80100ca:	4b11      	ldr	r3, [pc, #68]	; (8010110 <prvTaskExitError+0x50>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100d2:	d009      	beq.n	80100e8 <prvTaskExitError+0x28>
 80100d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	60fb      	str	r3, [r7, #12]
 80100e6:	e7fe      	b.n	80100e6 <prvTaskExitError+0x26>
 80100e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80100fa:	bf00      	nop
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d0fc      	beq.n	80100fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010102:	bf00      	nop
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	20000084 	.word	0x20000084
	...

08010120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010120:	4b07      	ldr	r3, [pc, #28]	; (8010140 <pxCurrentTCBConst2>)
 8010122:	6819      	ldr	r1, [r3, #0]
 8010124:	6808      	ldr	r0, [r1, #0]
 8010126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801012a:	f380 8809 	msr	PSP, r0
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f04f 0000 	mov.w	r0, #0
 8010136:	f380 8811 	msr	BASEPRI, r0
 801013a:	4770      	bx	lr
 801013c:	f3af 8000 	nop.w

08010140 <pxCurrentTCBConst2>:
 8010140:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010144:	bf00      	nop
 8010146:	bf00      	nop

08010148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010148:	4808      	ldr	r0, [pc, #32]	; (801016c <prvPortStartFirstTask+0x24>)
 801014a:	6800      	ldr	r0, [r0, #0]
 801014c:	6800      	ldr	r0, [r0, #0]
 801014e:	f380 8808 	msr	MSP, r0
 8010152:	f04f 0000 	mov.w	r0, #0
 8010156:	f380 8814 	msr	CONTROL, r0
 801015a:	b662      	cpsie	i
 801015c:	b661      	cpsie	f
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	f3bf 8f6f 	isb	sy
 8010166:	df00      	svc	0
 8010168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801016a:	bf00      	nop
 801016c:	e000ed08 	.word	0xe000ed08

08010170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b086      	sub	sp, #24
 8010174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010176:	4b44      	ldr	r3, [pc, #272]	; (8010288 <xPortStartScheduler+0x118>)
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	4a44      	ldr	r2, [pc, #272]	; (801028c <xPortStartScheduler+0x11c>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d109      	bne.n	8010194 <xPortStartScheduler+0x24>
 8010180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010184:	f383 8811 	msr	BASEPRI, r3
 8010188:	f3bf 8f6f 	isb	sy
 801018c:	f3bf 8f4f 	dsb	sy
 8010190:	613b      	str	r3, [r7, #16]
 8010192:	e7fe      	b.n	8010192 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010194:	4b3c      	ldr	r3, [pc, #240]	; (8010288 <xPortStartScheduler+0x118>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a3d      	ldr	r2, [pc, #244]	; (8010290 <xPortStartScheduler+0x120>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d109      	bne.n	80101b2 <xPortStartScheduler+0x42>
 801019e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a2:	f383 8811 	msr	BASEPRI, r3
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	f3bf 8f4f 	dsb	sy
 80101ae:	60fb      	str	r3, [r7, #12]
 80101b0:	e7fe      	b.n	80101b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80101b2:	4b38      	ldr	r3, [pc, #224]	; (8010294 <xPortStartScheduler+0x124>)
 80101b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	22ff      	movs	r2, #255	; 0xff
 80101c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80101cc:	78fb      	ldrb	r3, [r7, #3]
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80101d4:	b2da      	uxtb	r2, r3
 80101d6:	4b30      	ldr	r3, [pc, #192]	; (8010298 <xPortStartScheduler+0x128>)
 80101d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80101da:	4b30      	ldr	r3, [pc, #192]	; (801029c <xPortStartScheduler+0x12c>)
 80101dc:	2207      	movs	r2, #7
 80101de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101e0:	e009      	b.n	80101f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80101e2:	4b2e      	ldr	r3, [pc, #184]	; (801029c <xPortStartScheduler+0x12c>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	3b01      	subs	r3, #1
 80101e8:	4a2c      	ldr	r2, [pc, #176]	; (801029c <xPortStartScheduler+0x12c>)
 80101ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80101ec:	78fb      	ldrb	r3, [r7, #3]
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	005b      	lsls	r3, r3, #1
 80101f2:	b2db      	uxtb	r3, r3
 80101f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80101f6:	78fb      	ldrb	r3, [r7, #3]
 80101f8:	b2db      	uxtb	r3, r3
 80101fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101fe:	2b80      	cmp	r3, #128	; 0x80
 8010200:	d0ef      	beq.n	80101e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010202:	4b26      	ldr	r3, [pc, #152]	; (801029c <xPortStartScheduler+0x12c>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f1c3 0307 	rsb	r3, r3, #7
 801020a:	2b04      	cmp	r3, #4
 801020c:	d009      	beq.n	8010222 <xPortStartScheduler+0xb2>
 801020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010212:	f383 8811 	msr	BASEPRI, r3
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	60bb      	str	r3, [r7, #8]
 8010220:	e7fe      	b.n	8010220 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010222:	4b1e      	ldr	r3, [pc, #120]	; (801029c <xPortStartScheduler+0x12c>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	021b      	lsls	r3, r3, #8
 8010228:	4a1c      	ldr	r2, [pc, #112]	; (801029c <xPortStartScheduler+0x12c>)
 801022a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801022c:	4b1b      	ldr	r3, [pc, #108]	; (801029c <xPortStartScheduler+0x12c>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010234:	4a19      	ldr	r2, [pc, #100]	; (801029c <xPortStartScheduler+0x12c>)
 8010236:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	b2da      	uxtb	r2, r3
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010240:	4b17      	ldr	r3, [pc, #92]	; (80102a0 <xPortStartScheduler+0x130>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	4a16      	ldr	r2, [pc, #88]	; (80102a0 <xPortStartScheduler+0x130>)
 8010246:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801024a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801024c:	4b14      	ldr	r3, [pc, #80]	; (80102a0 <xPortStartScheduler+0x130>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	4a13      	ldr	r2, [pc, #76]	; (80102a0 <xPortStartScheduler+0x130>)
 8010252:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010256:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010258:	f000 f8d6 	bl	8010408 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801025c:	4b11      	ldr	r3, [pc, #68]	; (80102a4 <xPortStartScheduler+0x134>)
 801025e:	2200      	movs	r2, #0
 8010260:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010262:	f000 f8f5 	bl	8010450 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010266:	4b10      	ldr	r3, [pc, #64]	; (80102a8 <xPortStartScheduler+0x138>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a0f      	ldr	r2, [pc, #60]	; (80102a8 <xPortStartScheduler+0x138>)
 801026c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010270:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010272:	f7ff ff69 	bl	8010148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010276:	f7ff f86b 	bl	800f350 <vTaskSwitchContext>
	prvTaskExitError();
 801027a:	f7ff ff21 	bl	80100c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801027e:	2300      	movs	r3, #0
}
 8010280:	4618      	mov	r0, r3
 8010282:	3718      	adds	r7, #24
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	e000ed00 	.word	0xe000ed00
 801028c:	410fc271 	.word	0x410fc271
 8010290:	410fc270 	.word	0x410fc270
 8010294:	e000e400 	.word	0xe000e400
 8010298:	20000e44 	.word	0x20000e44
 801029c:	20000e48 	.word	0x20000e48
 80102a0:	e000ed20 	.word	0xe000ed20
 80102a4:	20000084 	.word	0x20000084
 80102a8:	e000ef34 	.word	0xe000ef34

080102ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80102ac:	b480      	push	{r7}
 80102ae:	b083      	sub	sp, #12
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b6:	f383 8811 	msr	BASEPRI, r3
 80102ba:	f3bf 8f6f 	isb	sy
 80102be:	f3bf 8f4f 	dsb	sy
 80102c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80102c4:	4b0e      	ldr	r3, [pc, #56]	; (8010300 <vPortEnterCritical+0x54>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	3301      	adds	r3, #1
 80102ca:	4a0d      	ldr	r2, [pc, #52]	; (8010300 <vPortEnterCritical+0x54>)
 80102cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80102ce:	4b0c      	ldr	r3, [pc, #48]	; (8010300 <vPortEnterCritical+0x54>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	d10e      	bne.n	80102f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80102d6:	4b0b      	ldr	r3, [pc, #44]	; (8010304 <vPortEnterCritical+0x58>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d009      	beq.n	80102f4 <vPortEnterCritical+0x48>
 80102e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102e4:	f383 8811 	msr	BASEPRI, r3
 80102e8:	f3bf 8f6f 	isb	sy
 80102ec:	f3bf 8f4f 	dsb	sy
 80102f0:	603b      	str	r3, [r7, #0]
 80102f2:	e7fe      	b.n	80102f2 <vPortEnterCritical+0x46>
	}
}
 80102f4:	bf00      	nop
 80102f6:	370c      	adds	r7, #12
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr
 8010300:	20000084 	.word	0x20000084
 8010304:	e000ed04 	.word	0xe000ed04

08010308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801030e:	4b11      	ldr	r3, [pc, #68]	; (8010354 <vPortExitCritical+0x4c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d109      	bne.n	801032a <vPortExitCritical+0x22>
 8010316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801031a:	f383 8811 	msr	BASEPRI, r3
 801031e:	f3bf 8f6f 	isb	sy
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	607b      	str	r3, [r7, #4]
 8010328:	e7fe      	b.n	8010328 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801032a:	4b0a      	ldr	r3, [pc, #40]	; (8010354 <vPortExitCritical+0x4c>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	3b01      	subs	r3, #1
 8010330:	4a08      	ldr	r2, [pc, #32]	; (8010354 <vPortExitCritical+0x4c>)
 8010332:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010334:	4b07      	ldr	r3, [pc, #28]	; (8010354 <vPortExitCritical+0x4c>)
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d104      	bne.n	8010346 <vPortExitCritical+0x3e>
 801033c:	2300      	movs	r3, #0
 801033e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010340:	683b      	ldr	r3, [r7, #0]
 8010342:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010346:	bf00      	nop
 8010348:	370c      	adds	r7, #12
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr
 8010352:	bf00      	nop
 8010354:	20000084 	.word	0x20000084
	...

08010360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010360:	f3ef 8009 	mrs	r0, PSP
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	4b15      	ldr	r3, [pc, #84]	; (80103c0 <pxCurrentTCBConst>)
 801036a:	681a      	ldr	r2, [r3, #0]
 801036c:	f01e 0f10 	tst.w	lr, #16
 8010370:	bf08      	it	eq
 8010372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801037a:	6010      	str	r0, [r2, #0]
 801037c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010384:	f380 8811 	msr	BASEPRI, r0
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f7fe ffde 	bl	800f350 <vTaskSwitchContext>
 8010394:	f04f 0000 	mov.w	r0, #0
 8010398:	f380 8811 	msr	BASEPRI, r0
 801039c:	bc09      	pop	{r0, r3}
 801039e:	6819      	ldr	r1, [r3, #0]
 80103a0:	6808      	ldr	r0, [r1, #0]
 80103a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a6:	f01e 0f10 	tst.w	lr, #16
 80103aa:	bf08      	it	eq
 80103ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80103b0:	f380 8809 	msr	PSP, r0
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	4770      	bx	lr
 80103ba:	bf00      	nop
 80103bc:	f3af 8000 	nop.w

080103c0 <pxCurrentTCBConst>:
 80103c0:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80103c4:	bf00      	nop
 80103c6:	bf00      	nop

080103c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
	__asm volatile
 80103ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d2:	f383 8811 	msr	BASEPRI, r3
 80103d6:	f3bf 8f6f 	isb	sy
 80103da:	f3bf 8f4f 	dsb	sy
 80103de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80103e0:	f7fe fefe 	bl	800f1e0 <xTaskIncrementTick>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d003      	beq.n	80103f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80103ea:	4b06      	ldr	r3, [pc, #24]	; (8010404 <SysTick_Handler+0x3c>)
 80103ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80103f0:	601a      	str	r2, [r3, #0]
 80103f2:	2300      	movs	r3, #0
 80103f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80103fc:	bf00      	nop
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}
 8010404:	e000ed04 	.word	0xe000ed04

08010408 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010408:	b480      	push	{r7}
 801040a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801040c:	4b0b      	ldr	r3, [pc, #44]	; (801043c <vPortSetupTimerInterrupt+0x34>)
 801040e:	2200      	movs	r2, #0
 8010410:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010412:	4b0b      	ldr	r3, [pc, #44]	; (8010440 <vPortSetupTimerInterrupt+0x38>)
 8010414:	2200      	movs	r2, #0
 8010416:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010418:	4b0a      	ldr	r3, [pc, #40]	; (8010444 <vPortSetupTimerInterrupt+0x3c>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a0a      	ldr	r2, [pc, #40]	; (8010448 <vPortSetupTimerInterrupt+0x40>)
 801041e:	fba2 2303 	umull	r2, r3, r2, r3
 8010422:	099b      	lsrs	r3, r3, #6
 8010424:	4a09      	ldr	r2, [pc, #36]	; (801044c <vPortSetupTimerInterrupt+0x44>)
 8010426:	3b01      	subs	r3, #1
 8010428:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801042a:	4b04      	ldr	r3, [pc, #16]	; (801043c <vPortSetupTimerInterrupt+0x34>)
 801042c:	2207      	movs	r2, #7
 801042e:	601a      	str	r2, [r3, #0]
}
 8010430:	bf00      	nop
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop
 801043c:	e000e010 	.word	0xe000e010
 8010440:	e000e018 	.word	0xe000e018
 8010444:	20000000 	.word	0x20000000
 8010448:	10624dd3 	.word	0x10624dd3
 801044c:	e000e014 	.word	0xe000e014

08010450 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010450:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010460 <vPortEnableVFP+0x10>
 8010454:	6801      	ldr	r1, [r0, #0]
 8010456:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801045a:	6001      	str	r1, [r0, #0]
 801045c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801045e:	bf00      	nop
 8010460:	e000ed88 	.word	0xe000ed88

08010464 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010464:	b480      	push	{r7}
 8010466:	b085      	sub	sp, #20
 8010468:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801046a:	f3ef 8305 	mrs	r3, IPSR
 801046e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2b0f      	cmp	r3, #15
 8010474:	d913      	bls.n	801049e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010476:	4a16      	ldr	r2, [pc, #88]	; (80104d0 <vPortValidateInterruptPriority+0x6c>)
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	4413      	add	r3, r2
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010480:	4b14      	ldr	r3, [pc, #80]	; (80104d4 <vPortValidateInterruptPriority+0x70>)
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	7afa      	ldrb	r2, [r7, #11]
 8010486:	429a      	cmp	r2, r3
 8010488:	d209      	bcs.n	801049e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801048a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801048e:	f383 8811 	msr	BASEPRI, r3
 8010492:	f3bf 8f6f 	isb	sy
 8010496:	f3bf 8f4f 	dsb	sy
 801049a:	607b      	str	r3, [r7, #4]
 801049c:	e7fe      	b.n	801049c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801049e:	4b0e      	ldr	r3, [pc, #56]	; (80104d8 <vPortValidateInterruptPriority+0x74>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80104a6:	4b0d      	ldr	r3, [pc, #52]	; (80104dc <vPortValidateInterruptPriority+0x78>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d909      	bls.n	80104c2 <vPortValidateInterruptPriority+0x5e>
 80104ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104b2:	f383 8811 	msr	BASEPRI, r3
 80104b6:	f3bf 8f6f 	isb	sy
 80104ba:	f3bf 8f4f 	dsb	sy
 80104be:	603b      	str	r3, [r7, #0]
 80104c0:	e7fe      	b.n	80104c0 <vPortValidateInterruptPriority+0x5c>
	}
 80104c2:	bf00      	nop
 80104c4:	3714      	adds	r7, #20
 80104c6:	46bd      	mov	sp, r7
 80104c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	e000e3f0 	.word	0xe000e3f0
 80104d4:	20000e44 	.word	0x20000e44
 80104d8:	e000ed0c 	.word	0xe000ed0c
 80104dc:	20000e48 	.word	0x20000e48

080104e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b08a      	sub	sp, #40	; 0x28
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80104e8:	2300      	movs	r3, #0
 80104ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80104ec:	f7fe fdbe 	bl	800f06c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80104f0:	4b57      	ldr	r3, [pc, #348]	; (8010650 <pvPortMalloc+0x170>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d101      	bne.n	80104fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80104f8:	f000 f90c 	bl	8010714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80104fc:	4b55      	ldr	r3, [pc, #340]	; (8010654 <pvPortMalloc+0x174>)
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	4013      	ands	r3, r2
 8010504:	2b00      	cmp	r3, #0
 8010506:	f040 808c 	bne.w	8010622 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d01c      	beq.n	801054a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010510:	2208      	movs	r2, #8
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4413      	add	r3, r2
 8010516:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f003 0307 	and.w	r3, r3, #7
 801051e:	2b00      	cmp	r3, #0
 8010520:	d013      	beq.n	801054a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f023 0307 	bic.w	r3, r3, #7
 8010528:	3308      	adds	r3, #8
 801052a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f003 0307 	and.w	r3, r3, #7
 8010532:	2b00      	cmp	r3, #0
 8010534:	d009      	beq.n	801054a <pvPortMalloc+0x6a>
 8010536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053a:	f383 8811 	msr	BASEPRI, r3
 801053e:	f3bf 8f6f 	isb	sy
 8010542:	f3bf 8f4f 	dsb	sy
 8010546:	617b      	str	r3, [r7, #20]
 8010548:	e7fe      	b.n	8010548 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d068      	beq.n	8010622 <pvPortMalloc+0x142>
 8010550:	4b41      	ldr	r3, [pc, #260]	; (8010658 <pvPortMalloc+0x178>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	429a      	cmp	r2, r3
 8010558:	d863      	bhi.n	8010622 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801055a:	4b40      	ldr	r3, [pc, #256]	; (801065c <pvPortMalloc+0x17c>)
 801055c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801055e:	4b3f      	ldr	r3, [pc, #252]	; (801065c <pvPortMalloc+0x17c>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010564:	e004      	b.n	8010570 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010572:	685b      	ldr	r3, [r3, #4]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	429a      	cmp	r2, r3
 8010578:	d903      	bls.n	8010582 <pvPortMalloc+0xa2>
 801057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1f1      	bne.n	8010566 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010582:	4b33      	ldr	r3, [pc, #204]	; (8010650 <pvPortMalloc+0x170>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010588:	429a      	cmp	r2, r3
 801058a:	d04a      	beq.n	8010622 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801058c:	6a3b      	ldr	r3, [r7, #32]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	2208      	movs	r2, #8
 8010592:	4413      	add	r3, r2
 8010594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	6a3b      	ldr	r3, [r7, #32]
 801059c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105a0:	685a      	ldr	r2, [r3, #4]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	1ad2      	subs	r2, r2, r3
 80105a6:	2308      	movs	r3, #8
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d91e      	bls.n	80105ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80105ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	4413      	add	r3, r2
 80105b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	f003 0307 	and.w	r3, r3, #7
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d009      	beq.n	80105d4 <pvPortMalloc+0xf4>
 80105c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c4:	f383 8811 	msr	BASEPRI, r3
 80105c8:	f3bf 8f6f 	isb	sy
 80105cc:	f3bf 8f4f 	dsb	sy
 80105d0:	613b      	str	r3, [r7, #16]
 80105d2:	e7fe      	b.n	80105d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80105d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105d6:	685a      	ldr	r2, [r3, #4]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	1ad2      	subs	r2, r2, r3
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	687a      	ldr	r2, [r7, #4]
 80105e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80105e6:	69b8      	ldr	r0, [r7, #24]
 80105e8:	f000 f8f6 	bl	80107d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80105ec:	4b1a      	ldr	r3, [pc, #104]	; (8010658 <pvPortMalloc+0x178>)
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	1ad3      	subs	r3, r2, r3
 80105f6:	4a18      	ldr	r2, [pc, #96]	; (8010658 <pvPortMalloc+0x178>)
 80105f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80105fa:	4b17      	ldr	r3, [pc, #92]	; (8010658 <pvPortMalloc+0x178>)
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	4b18      	ldr	r3, [pc, #96]	; (8010660 <pvPortMalloc+0x180>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	429a      	cmp	r2, r3
 8010604:	d203      	bcs.n	801060e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010606:	4b14      	ldr	r3, [pc, #80]	; (8010658 <pvPortMalloc+0x178>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	4a15      	ldr	r2, [pc, #84]	; (8010660 <pvPortMalloc+0x180>)
 801060c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801060e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010610:	685a      	ldr	r2, [r3, #4]
 8010612:	4b10      	ldr	r3, [pc, #64]	; (8010654 <pvPortMalloc+0x174>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	431a      	orrs	r2, r3
 8010618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061e:	2200      	movs	r2, #0
 8010620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010622:	f7fe fd31 	bl	800f088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	f003 0307 	and.w	r3, r3, #7
 801062c:	2b00      	cmp	r3, #0
 801062e:	d009      	beq.n	8010644 <pvPortMalloc+0x164>
 8010630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010634:	f383 8811 	msr	BASEPRI, r3
 8010638:	f3bf 8f6f 	isb	sy
 801063c:	f3bf 8f4f 	dsb	sy
 8010640:	60fb      	str	r3, [r7, #12]
 8010642:	e7fe      	b.n	8010642 <pvPortMalloc+0x162>
	return pvReturn;
 8010644:	69fb      	ldr	r3, [r7, #28]
}
 8010646:	4618      	mov	r0, r3
 8010648:	3728      	adds	r7, #40	; 0x28
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}
 801064e:	bf00      	nop
 8010650:	20004a54 	.word	0x20004a54
 8010654:	20004a60 	.word	0x20004a60
 8010658:	20004a58 	.word	0x20004a58
 801065c:	20004a4c 	.word	0x20004a4c
 8010660:	20004a5c 	.word	0x20004a5c

08010664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b086      	sub	sp, #24
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d046      	beq.n	8010704 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010676:	2308      	movs	r3, #8
 8010678:	425b      	negs	r3, r3
 801067a:	697a      	ldr	r2, [r7, #20]
 801067c:	4413      	add	r3, r2
 801067e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010684:	693b      	ldr	r3, [r7, #16]
 8010686:	685a      	ldr	r2, [r3, #4]
 8010688:	4b20      	ldr	r3, [pc, #128]	; (801070c <vPortFree+0xa8>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4013      	ands	r3, r2
 801068e:	2b00      	cmp	r3, #0
 8010690:	d109      	bne.n	80106a6 <vPortFree+0x42>
 8010692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010696:	f383 8811 	msr	BASEPRI, r3
 801069a:	f3bf 8f6f 	isb	sy
 801069e:	f3bf 8f4f 	dsb	sy
 80106a2:	60fb      	str	r3, [r7, #12]
 80106a4:	e7fe      	b.n	80106a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d009      	beq.n	80106c2 <vPortFree+0x5e>
 80106ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b2:	f383 8811 	msr	BASEPRI, r3
 80106b6:	f3bf 8f6f 	isb	sy
 80106ba:	f3bf 8f4f 	dsb	sy
 80106be:	60bb      	str	r3, [r7, #8]
 80106c0:	e7fe      	b.n	80106c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	685a      	ldr	r2, [r3, #4]
 80106c6:	4b11      	ldr	r3, [pc, #68]	; (801070c <vPortFree+0xa8>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4013      	ands	r3, r2
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d019      	beq.n	8010704 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d115      	bne.n	8010704 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	685a      	ldr	r2, [r3, #4]
 80106dc:	4b0b      	ldr	r3, [pc, #44]	; (801070c <vPortFree+0xa8>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	43db      	mvns	r3, r3
 80106e2:	401a      	ands	r2, r3
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80106e8:	f7fe fcc0 	bl	800f06c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	685a      	ldr	r2, [r3, #4]
 80106f0:	4b07      	ldr	r3, [pc, #28]	; (8010710 <vPortFree+0xac>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4413      	add	r3, r2
 80106f6:	4a06      	ldr	r2, [pc, #24]	; (8010710 <vPortFree+0xac>)
 80106f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80106fa:	6938      	ldr	r0, [r7, #16]
 80106fc:	f000 f86c 	bl	80107d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010700:	f7fe fcc2 	bl	800f088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010704:	bf00      	nop
 8010706:	3718      	adds	r7, #24
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	20004a60 	.word	0x20004a60
 8010710:	20004a58 	.word	0x20004a58

08010714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010714:	b480      	push	{r7}
 8010716:	b085      	sub	sp, #20
 8010718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801071a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801071e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010720:	4b27      	ldr	r3, [pc, #156]	; (80107c0 <prvHeapInit+0xac>)
 8010722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	f003 0307 	and.w	r3, r3, #7
 801072a:	2b00      	cmp	r3, #0
 801072c:	d00c      	beq.n	8010748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	3307      	adds	r3, #7
 8010732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	f023 0307 	bic.w	r3, r3, #7
 801073a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801073c:	68ba      	ldr	r2, [r7, #8]
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	1ad3      	subs	r3, r2, r3
 8010742:	4a1f      	ldr	r2, [pc, #124]	; (80107c0 <prvHeapInit+0xac>)
 8010744:	4413      	add	r3, r2
 8010746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801074c:	4a1d      	ldr	r2, [pc, #116]	; (80107c4 <prvHeapInit+0xb0>)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010752:	4b1c      	ldr	r3, [pc, #112]	; (80107c4 <prvHeapInit+0xb0>)
 8010754:	2200      	movs	r2, #0
 8010756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	68ba      	ldr	r2, [r7, #8]
 801075c:	4413      	add	r3, r2
 801075e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010760:	2208      	movs	r2, #8
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	1a9b      	subs	r3, r3, r2
 8010766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	f023 0307 	bic.w	r3, r3, #7
 801076e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	4a15      	ldr	r2, [pc, #84]	; (80107c8 <prvHeapInit+0xb4>)
 8010774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010776:	4b14      	ldr	r3, [pc, #80]	; (80107c8 <prvHeapInit+0xb4>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2200      	movs	r2, #0
 801077c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801077e:	4b12      	ldr	r3, [pc, #72]	; (80107c8 <prvHeapInit+0xb4>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	2200      	movs	r2, #0
 8010784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	68fa      	ldr	r2, [r7, #12]
 801078e:	1ad2      	subs	r2, r2, r3
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010794:	4b0c      	ldr	r3, [pc, #48]	; (80107c8 <prvHeapInit+0xb4>)
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	4a0a      	ldr	r2, [pc, #40]	; (80107cc <prvHeapInit+0xb8>)
 80107a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80107a4:	683b      	ldr	r3, [r7, #0]
 80107a6:	685b      	ldr	r3, [r3, #4]
 80107a8:	4a09      	ldr	r2, [pc, #36]	; (80107d0 <prvHeapInit+0xbc>)
 80107aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80107ac:	4b09      	ldr	r3, [pc, #36]	; (80107d4 <prvHeapInit+0xc0>)
 80107ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80107b2:	601a      	str	r2, [r3, #0]
}
 80107b4:	bf00      	nop
 80107b6:	3714      	adds	r7, #20
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr
 80107c0:	20000e4c 	.word	0x20000e4c
 80107c4:	20004a4c 	.word	0x20004a4c
 80107c8:	20004a54 	.word	0x20004a54
 80107cc:	20004a5c 	.word	0x20004a5c
 80107d0:	20004a58 	.word	0x20004a58
 80107d4:	20004a60 	.word	0x20004a60

080107d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80107d8:	b480      	push	{r7}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80107e0:	4b28      	ldr	r3, [pc, #160]	; (8010884 <prvInsertBlockIntoFreeList+0xac>)
 80107e2:	60fb      	str	r3, [r7, #12]
 80107e4:	e002      	b.n	80107ec <prvInsertBlockIntoFreeList+0x14>
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	60fb      	str	r3, [r7, #12]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	687a      	ldr	r2, [r7, #4]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d8f7      	bhi.n	80107e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	685b      	ldr	r3, [r3, #4]
 80107fe:	68ba      	ldr	r2, [r7, #8]
 8010800:	4413      	add	r3, r2
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	429a      	cmp	r2, r3
 8010806:	d108      	bne.n	801081a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	685a      	ldr	r2, [r3, #4]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	685b      	ldr	r3, [r3, #4]
 8010810:	441a      	add	r2, r3
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	685b      	ldr	r3, [r3, #4]
 8010822:	68ba      	ldr	r2, [r7, #8]
 8010824:	441a      	add	r2, r3
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	429a      	cmp	r2, r3
 801082c:	d118      	bne.n	8010860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	4b15      	ldr	r3, [pc, #84]	; (8010888 <prvInsertBlockIntoFreeList+0xb0>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	429a      	cmp	r2, r3
 8010838:	d00d      	beq.n	8010856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	685a      	ldr	r2, [r3, #4]
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	441a      	add	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	601a      	str	r2, [r3, #0]
 8010854:	e008      	b.n	8010868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010856:	4b0c      	ldr	r3, [pc, #48]	; (8010888 <prvInsertBlockIntoFreeList+0xb0>)
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	601a      	str	r2, [r3, #0]
 801085e:	e003      	b.n	8010868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010868:	68fa      	ldr	r2, [r7, #12]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	429a      	cmp	r2, r3
 801086e:	d002      	beq.n	8010876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010876:	bf00      	nop
 8010878:	3714      	adds	r7, #20
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	20004a4c 	.word	0x20004a4c
 8010888:	20004a54 	.word	0x20004a54

0801088c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010890:	2201      	movs	r2, #1
 8010892:	490e      	ldr	r1, [pc, #56]	; (80108cc <MX_USB_HOST_Init+0x40>)
 8010894:	480e      	ldr	r0, [pc, #56]	; (80108d0 <MX_USB_HOST_Init+0x44>)
 8010896:	f7fb fafd 	bl	800be94 <USBH_Init>
 801089a:	4603      	mov	r3, r0
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80108a0:	f7f0 fca4 	bl	80011ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80108a4:	490b      	ldr	r1, [pc, #44]	; (80108d4 <MX_USB_HOST_Init+0x48>)
 80108a6:	480a      	ldr	r0, [pc, #40]	; (80108d0 <MX_USB_HOST_Init+0x44>)
 80108a8:	f7fb fba4 	bl	800bff4 <USBH_RegisterClass>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d001      	beq.n	80108b6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80108b2:	f7f0 fc9b 	bl	80011ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80108b6:	4806      	ldr	r0, [pc, #24]	; (80108d0 <MX_USB_HOST_Init+0x44>)
 80108b8:	f7fb fc28 	bl	800c10c <USBH_Start>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d001      	beq.n	80108c6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80108c2:	f7f0 fc93 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80108c6:	bf00      	nop
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	080108d9 	.word	0x080108d9
 80108d0:	20004f48 	.word	0x20004f48
 80108d4:	20000064 	.word	0x20000064

080108d8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80108d8:	b480      	push	{r7}
 80108da:	b083      	sub	sp, #12
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	460b      	mov	r3, r1
 80108e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80108e4:	78fb      	ldrb	r3, [r7, #3]
 80108e6:	3b01      	subs	r3, #1
 80108e8:	2b04      	cmp	r3, #4
 80108ea:	d819      	bhi.n	8010920 <USBH_UserProcess+0x48>
 80108ec:	a201      	add	r2, pc, #4	; (adr r2, 80108f4 <USBH_UserProcess+0x1c>)
 80108ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108f2:	bf00      	nop
 80108f4:	08010921 	.word	0x08010921
 80108f8:	08010911 	.word	0x08010911
 80108fc:	08010921 	.word	0x08010921
 8010900:	08010919 	.word	0x08010919
 8010904:	08010909 	.word	0x08010909
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010908:	4b09      	ldr	r3, [pc, #36]	; (8010930 <USBH_UserProcess+0x58>)
 801090a:	2203      	movs	r2, #3
 801090c:	701a      	strb	r2, [r3, #0]
  break;
 801090e:	e008      	b.n	8010922 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010910:	4b07      	ldr	r3, [pc, #28]	; (8010930 <USBH_UserProcess+0x58>)
 8010912:	2202      	movs	r2, #2
 8010914:	701a      	strb	r2, [r3, #0]
  break;
 8010916:	e004      	b.n	8010922 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010918:	4b05      	ldr	r3, [pc, #20]	; (8010930 <USBH_UserProcess+0x58>)
 801091a:	2201      	movs	r2, #1
 801091c:	701a      	strb	r2, [r3, #0]
  break;
 801091e:	e000      	b.n	8010922 <USBH_UserProcess+0x4a>

  default:
  break;
 8010920:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010922:	bf00      	nop
 8010924:	370c      	adds	r7, #12
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop
 8010930:	20004a64 	.word	0x20004a64

08010934 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b08a      	sub	sp, #40	; 0x28
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801093c:	f107 0314 	add.w	r3, r7, #20
 8010940:	2200      	movs	r2, #0
 8010942:	601a      	str	r2, [r3, #0]
 8010944:	605a      	str	r2, [r3, #4]
 8010946:	609a      	str	r2, [r3, #8]
 8010948:	60da      	str	r2, [r3, #12]
 801094a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010954:	d147      	bne.n	80109e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010956:	2300      	movs	r3, #0
 8010958:	613b      	str	r3, [r7, #16]
 801095a:	4b25      	ldr	r3, [pc, #148]	; (80109f0 <HAL_HCD_MspInit+0xbc>)
 801095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801095e:	4a24      	ldr	r2, [pc, #144]	; (80109f0 <HAL_HCD_MspInit+0xbc>)
 8010960:	f043 0301 	orr.w	r3, r3, #1
 8010964:	6313      	str	r3, [r2, #48]	; 0x30
 8010966:	4b22      	ldr	r3, [pc, #136]	; (80109f0 <HAL_HCD_MspInit+0xbc>)
 8010968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	613b      	str	r3, [r7, #16]
 8010970:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8010972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010978:	2300      	movs	r3, #0
 801097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801097c:	2300      	movs	r3, #0
 801097e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8010980:	f107 0314 	add.w	r3, r7, #20
 8010984:	4619      	mov	r1, r3
 8010986:	481b      	ldr	r0, [pc, #108]	; (80109f4 <HAL_HCD_MspInit+0xc0>)
 8010988:	f7f3 fbec 	bl	8004164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 801098c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010992:	2302      	movs	r3, #2
 8010994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010996:	2300      	movs	r3, #0
 8010998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801099a:	2303      	movs	r3, #3
 801099c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801099e:	230a      	movs	r3, #10
 80109a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80109a2:	f107 0314 	add.w	r3, r7, #20
 80109a6:	4619      	mov	r1, r3
 80109a8:	4812      	ldr	r0, [pc, #72]	; (80109f4 <HAL_HCD_MspInit+0xc0>)
 80109aa:	f7f3 fbdb 	bl	8004164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80109ae:	4b10      	ldr	r3, [pc, #64]	; (80109f0 <HAL_HCD_MspInit+0xbc>)
 80109b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109b2:	4a0f      	ldr	r2, [pc, #60]	; (80109f0 <HAL_HCD_MspInit+0xbc>)
 80109b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109b8:	6353      	str	r3, [r2, #52]	; 0x34
 80109ba:	2300      	movs	r3, #0
 80109bc:	60fb      	str	r3, [r7, #12]
 80109be:	4b0c      	ldr	r3, [pc, #48]	; (80109f0 <HAL_HCD_MspInit+0xbc>)
 80109c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109c2:	4a0b      	ldr	r2, [pc, #44]	; (80109f0 <HAL_HCD_MspInit+0xbc>)
 80109c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80109c8:	6453      	str	r3, [r2, #68]	; 0x44
 80109ca:	4b09      	ldr	r3, [pc, #36]	; (80109f0 <HAL_HCD_MspInit+0xbc>)
 80109cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109d2:	60fb      	str	r3, [r7, #12]
 80109d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80109d6:	2200      	movs	r2, #0
 80109d8:	2100      	movs	r1, #0
 80109da:	2043      	movs	r0, #67	; 0x43
 80109dc:	f7f3 f89c 	bl	8003b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80109e0:	2043      	movs	r0, #67	; 0x43
 80109e2:	f7f3 f8b5 	bl	8003b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80109e6:	bf00      	nop
 80109e8:	3728      	adds	r7, #40	; 0x28
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	40023800 	.word	0x40023800
 80109f4:	40020000 	.word	0x40020000

080109f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b082      	sub	sp, #8
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a06:	4618      	mov	r0, r3
 8010a08:	f7fc f82d 	bl	800ca66 <USBH_LL_IncTimer>
}
 8010a0c:	bf00      	nop
 8010a0e:	3708      	adds	r7, #8
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}

08010a14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7fc f871 	bl	800cb0a <USBH_LL_Connect>
}
 8010a28:	bf00      	nop
 8010a2a:	3708      	adds	r7, #8
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7fc f886 	bl	800cb50 <USBH_LL_Disconnect>
}
 8010a44:	bf00      	nop
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	460b      	mov	r3, r1
 8010a56:	70fb      	strb	r3, [r7, #3]
 8010a58:	4613      	mov	r3, r2
 8010a5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a62:	4618      	mov	r0, r3
 8010a64:	f7fc f8bd 	bl	800cbe2 <USBH_LL_NotifyURBChange>
#endif
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fc f81b 	bl	800caba <USBH_LL_PortEnabled>
}
 8010a84:	bf00      	nop
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fc f827 	bl	800caee <USBH_LL_PortDisabled>
}
 8010aa0:	bf00      	nop
 8010aa2:	3708      	adds	r7, #8
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b082      	sub	sp, #8
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d12a      	bne.n	8010b10 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8010aba:	4a18      	ldr	r2, [pc, #96]	; (8010b1c <USBH_LL_Init+0x74>)
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	4a15      	ldr	r2, [pc, #84]	; (8010b1c <USBH_LL_Init+0x74>)
 8010ac6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010aca:	4b14      	ldr	r3, [pc, #80]	; (8010b1c <USBH_LL_Init+0x74>)
 8010acc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8010ad0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8010ad2:	4b12      	ldr	r3, [pc, #72]	; (8010b1c <USBH_LL_Init+0x74>)
 8010ad4:	220c      	movs	r2, #12
 8010ad6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8010ad8:	4b10      	ldr	r3, [pc, #64]	; (8010b1c <USBH_LL_Init+0x74>)
 8010ada:	2201      	movs	r2, #1
 8010adc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010ade:	4b0f      	ldr	r3, [pc, #60]	; (8010b1c <USBH_LL_Init+0x74>)
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8010ae4:	4b0d      	ldr	r3, [pc, #52]	; (8010b1c <USBH_LL_Init+0x74>)
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010aea:	4b0c      	ldr	r3, [pc, #48]	; (8010b1c <USBH_LL_Init+0x74>)
 8010aec:	2200      	movs	r2, #0
 8010aee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8010af0:	480a      	ldr	r0, [pc, #40]	; (8010b1c <USBH_LL_Init+0x74>)
 8010af2:	f7f3 fce2 	bl	80044ba <HAL_HCD_Init>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d001      	beq.n	8010b00 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8010afc:	f7f0 fb76 	bl	80011ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8010b00:	4806      	ldr	r0, [pc, #24]	; (8010b1c <USBH_LL_Init+0x74>)
 8010b02:	f7f4 f8e5 	bl	8004cd0 <HAL_HCD_GetCurrentFrame>
 8010b06:	4603      	mov	r3, r0
 8010b08:	4619      	mov	r1, r3
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7fb ff9c 	bl	800ca48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3708      	adds	r7, #8
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	2000532c 	.word	0x2000532c

08010b20 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b36:	4618      	mov	r0, r3
 8010b38:	f7f4 f852 	bl	8004be0 <HAL_HCD_Start>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b40:	7bfb      	ldrb	r3, [r7, #15]
 8010b42:	4618      	mov	r0, r3
 8010b44:	f000 f95c 	bl	8010e00 <USBH_Get_USB_Status>
 8010b48:	4603      	mov	r3, r0
 8010b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010b56:	b580      	push	{r7, lr}
 8010b58:	b084      	sub	sp, #16
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b62:	2300      	movs	r3, #0
 8010b64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7f4 f85a 	bl	8004c26 <HAL_HCD_Stop>
 8010b72:	4603      	mov	r3, r0
 8010b74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f000 f941 	bl	8010e00 <USBH_Get_USB_Status>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3710      	adds	r7, #16
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b084      	sub	sp, #16
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010b94:	2301      	movs	r3, #1
 8010b96:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7f4 f8a4 	bl	8004cec <HAL_HCD_GetCurrentSpeed>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b01      	cmp	r3, #1
 8010ba8:	d007      	beq.n	8010bba <USBH_LL_GetSpeed+0x2e>
 8010baa:	2b01      	cmp	r3, #1
 8010bac:	d302      	bcc.n	8010bb4 <USBH_LL_GetSpeed+0x28>
 8010bae:	2b02      	cmp	r3, #2
 8010bb0:	d006      	beq.n	8010bc0 <USBH_LL_GetSpeed+0x34>
 8010bb2:	e008      	b.n	8010bc6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8010bb8:	e008      	b.n	8010bcc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8010bbe:	e005      	b.n	8010bcc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010bc0:	2302      	movs	r3, #2
 8010bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8010bc4:	e002      	b.n	8010bcc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8010bc6:	2301      	movs	r3, #1
 8010bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8010bca:	bf00      	nop
  }
  return  speed;
 8010bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3710      	adds	r7, #16
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b084      	sub	sp, #16
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bde:	2300      	movs	r3, #0
 8010be0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010be2:	2300      	movs	r3, #0
 8010be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7f4 f837 	bl	8004c60 <HAL_HCD_ResetPort>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bf6:	7bfb      	ldrb	r3, [r7, #15]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f000 f901 	bl	8010e00 <USBH_Get_USB_Status>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	3710      	adds	r7, #16
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	460b      	mov	r3, r1
 8010c16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c1e:	78fa      	ldrb	r2, [r7, #3]
 8010c20:	4611      	mov	r1, r2
 8010c22:	4618      	mov	r0, r3
 8010c24:	f7f4 f83f 	bl	8004ca6 <HAL_HCD_HC_GetXferCount>
 8010c28:	4603      	mov	r3, r0
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3708      	adds	r7, #8
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010c32:	b590      	push	{r4, r7, lr}
 8010c34:	b089      	sub	sp, #36	; 0x24
 8010c36:	af04      	add	r7, sp, #16
 8010c38:	6078      	str	r0, [r7, #4]
 8010c3a:	4608      	mov	r0, r1
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	461a      	mov	r2, r3
 8010c40:	4603      	mov	r3, r0
 8010c42:	70fb      	strb	r3, [r7, #3]
 8010c44:	460b      	mov	r3, r1
 8010c46:	70bb      	strb	r3, [r7, #2]
 8010c48:	4613      	mov	r3, r2
 8010c4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c50:	2300      	movs	r3, #0
 8010c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010c5a:	787c      	ldrb	r4, [r7, #1]
 8010c5c:	78ba      	ldrb	r2, [r7, #2]
 8010c5e:	78f9      	ldrb	r1, [r7, #3]
 8010c60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c62:	9302      	str	r3, [sp, #8]
 8010c64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010c68:	9301      	str	r3, [sp, #4]
 8010c6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c6e:	9300      	str	r3, [sp, #0]
 8010c70:	4623      	mov	r3, r4
 8010c72:	f7f3 fc84 	bl	800457e <HAL_HCD_HC_Init>
 8010c76:	4603      	mov	r3, r0
 8010c78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010c7a:	7bfb      	ldrb	r3, [r7, #15]
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f000 f8bf 	bl	8010e00 <USBH_Get_USB_Status>
 8010c82:	4603      	mov	r3, r0
 8010c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3714      	adds	r7, #20
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd90      	pop	{r4, r7, pc}

08010c90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	460b      	mov	r3, r1
 8010c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ca0:	2300      	movs	r3, #0
 8010ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010caa:	78fa      	ldrb	r2, [r7, #3]
 8010cac:	4611      	mov	r1, r2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7f3 fcfd 	bl	80046ae <HAL_HCD_HC_Halt>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f000 f8a0 	bl	8010e00 <USBH_Get_USB_Status>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3710      	adds	r7, #16
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010cce:	b590      	push	{r4, r7, lr}
 8010cd0:	b089      	sub	sp, #36	; 0x24
 8010cd2:	af04      	add	r7, sp, #16
 8010cd4:	6078      	str	r0, [r7, #4]
 8010cd6:	4608      	mov	r0, r1
 8010cd8:	4611      	mov	r1, r2
 8010cda:	461a      	mov	r2, r3
 8010cdc:	4603      	mov	r3, r0
 8010cde:	70fb      	strb	r3, [r7, #3]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	70bb      	strb	r3, [r7, #2]
 8010ce4:	4613      	mov	r3, r2
 8010ce6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010cec:	2300      	movs	r3, #0
 8010cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010cf6:	787c      	ldrb	r4, [r7, #1]
 8010cf8:	78ba      	ldrb	r2, [r7, #2]
 8010cfa:	78f9      	ldrb	r1, [r7, #3]
 8010cfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010d00:	9303      	str	r3, [sp, #12]
 8010d02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010d04:	9302      	str	r3, [sp, #8]
 8010d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d08:	9301      	str	r3, [sp, #4]
 8010d0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010d0e:	9300      	str	r3, [sp, #0]
 8010d10:	4623      	mov	r3, r4
 8010d12:	f7f3 fcef 	bl	80046f4 <HAL_HCD_HC_SubmitRequest>
 8010d16:	4603      	mov	r3, r0
 8010d18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010d1a:	7bfb      	ldrb	r3, [r7, #15]
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f000 f86f 	bl	8010e00 <USBH_Get_USB_Status>
 8010d22:	4603      	mov	r3, r0
 8010d24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d26:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d28:	4618      	mov	r0, r3
 8010d2a:	3714      	adds	r7, #20
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	bd90      	pop	{r4, r7, pc}

08010d30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d42:	78fa      	ldrb	r2, [r7, #3]
 8010d44:	4611      	mov	r1, r2
 8010d46:	4618      	mov	r0, r3
 8010d48:	f7f3 ff98 	bl	8004c7c <HAL_HCD_HC_GetURBState>
 8010d4c:	4603      	mov	r3, r0
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}

08010d56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010d56:	b580      	push	{r7, lr}
 8010d58:	b082      	sub	sp, #8
 8010d5a:	af00      	add	r7, sp, #0
 8010d5c:	6078      	str	r0, [r7, #4]
 8010d5e:	460b      	mov	r3, r1
 8010d60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d103      	bne.n	8010d74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010d6c:	78fb      	ldrb	r3, [r7, #3]
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f000 f872 	bl	8010e58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010d74:	20c8      	movs	r0, #200	; 0xc8
 8010d76:	f7f2 fa4b 	bl	8003210 <HAL_Delay>
  return USBH_OK;
 8010d7a:	2300      	movs	r3, #0
}
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	70fb      	strb	r3, [r7, #3]
 8010d90:	4613      	mov	r3, r2
 8010d92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010d9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010d9c:	78fa      	ldrb	r2, [r7, #3]
 8010d9e:	68f9      	ldr	r1, [r7, #12]
 8010da0:	4613      	mov	r3, r2
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	4413      	add	r3, r2
 8010da6:	00db      	lsls	r3, r3, #3
 8010da8:	440b      	add	r3, r1
 8010daa:	333b      	adds	r3, #59	; 0x3b
 8010dac:	781b      	ldrb	r3, [r3, #0]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00a      	beq.n	8010dc8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010db2:	78fa      	ldrb	r2, [r7, #3]
 8010db4:	68f9      	ldr	r1, [r7, #12]
 8010db6:	4613      	mov	r3, r2
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	4413      	add	r3, r2
 8010dbc:	00db      	lsls	r3, r3, #3
 8010dbe:	440b      	add	r3, r1
 8010dc0:	3350      	adds	r3, #80	; 0x50
 8010dc2:	78ba      	ldrb	r2, [r7, #2]
 8010dc4:	701a      	strb	r2, [r3, #0]
 8010dc6:	e009      	b.n	8010ddc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010dc8:	78fa      	ldrb	r2, [r7, #3]
 8010dca:	68f9      	ldr	r1, [r7, #12]
 8010dcc:	4613      	mov	r3, r2
 8010dce:	009b      	lsls	r3, r3, #2
 8010dd0:	4413      	add	r3, r2
 8010dd2:	00db      	lsls	r3, r3, #3
 8010dd4:	440b      	add	r3, r1
 8010dd6:	3351      	adds	r3, #81	; 0x51
 8010dd8:	78ba      	ldrb	r2, [r7, #2]
 8010dda:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010ddc:	2300      	movs	r3, #0
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3714      	adds	r7, #20
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b082      	sub	sp, #8
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7f2 fa0c 	bl	8003210 <HAL_Delay>
}
 8010df8:	bf00      	nop
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b085      	sub	sp, #20
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	4603      	mov	r3, r0
 8010e08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e0e:	79fb      	ldrb	r3, [r7, #7]
 8010e10:	2b03      	cmp	r3, #3
 8010e12:	d817      	bhi.n	8010e44 <USBH_Get_USB_Status+0x44>
 8010e14:	a201      	add	r2, pc, #4	; (adr r2, 8010e1c <USBH_Get_USB_Status+0x1c>)
 8010e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e1a:	bf00      	nop
 8010e1c:	08010e2d 	.word	0x08010e2d
 8010e20:	08010e33 	.word	0x08010e33
 8010e24:	08010e39 	.word	0x08010e39
 8010e28:	08010e3f 	.word	0x08010e3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010e30:	e00b      	b.n	8010e4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010e32:	2302      	movs	r3, #2
 8010e34:	73fb      	strb	r3, [r7, #15]
    break;
 8010e36:	e008      	b.n	8010e4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010e38:	2301      	movs	r3, #1
 8010e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e3c:	e005      	b.n	8010e4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010e3e:	2302      	movs	r3, #2
 8010e40:	73fb      	strb	r3, [r7, #15]
    break;
 8010e42:	e002      	b.n	8010e4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010e44:	2302      	movs	r3, #2
 8010e46:	73fb      	strb	r3, [r7, #15]
    break;
 8010e48:	bf00      	nop
  }
  return usb_status;
 8010e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3714      	adds	r7, #20
 8010e50:	46bd      	mov	sp, r7
 8010e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e56:	4770      	bx	lr

08010e58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	4603      	mov	r3, r0
 8010e60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010e62:	79fb      	ldrb	r3, [r7, #7]
 8010e64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010e66:	79fb      	ldrb	r3, [r7, #7]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d102      	bne.n	8010e72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	73fb      	strb	r3, [r7, #15]
 8010e70:	e001      	b.n	8010e76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010e72:	2300      	movs	r3, #0
 8010e74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8010e76:	7bfb      	ldrb	r3, [r7, #15]
 8010e78:	461a      	mov	r2, r3
 8010e7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010e7e:	4803      	ldr	r0, [pc, #12]	; (8010e8c <MX_DriverVbusFS+0x34>)
 8010e80:	f7f3 fb02 	bl	8004488 <HAL_GPIO_WritePin>
}
 8010e84:	bf00      	nop
 8010e86:	3710      	adds	r7, #16
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	bd80      	pop	{r7, pc}
 8010e8c:	40021800 	.word	0x40021800

08010e90 <__errno>:
 8010e90:	4b01      	ldr	r3, [pc, #4]	; (8010e98 <__errno+0x8>)
 8010e92:	6818      	ldr	r0, [r3, #0]
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	20000088 	.word	0x20000088

08010e9c <__libc_init_array>:
 8010e9c:	b570      	push	{r4, r5, r6, lr}
 8010e9e:	4e0d      	ldr	r6, [pc, #52]	; (8010ed4 <__libc_init_array+0x38>)
 8010ea0:	4c0d      	ldr	r4, [pc, #52]	; (8010ed8 <__libc_init_array+0x3c>)
 8010ea2:	1ba4      	subs	r4, r4, r6
 8010ea4:	10a4      	asrs	r4, r4, #2
 8010ea6:	2500      	movs	r5, #0
 8010ea8:	42a5      	cmp	r5, r4
 8010eaa:	d109      	bne.n	8010ec0 <__libc_init_array+0x24>
 8010eac:	4e0b      	ldr	r6, [pc, #44]	; (8010edc <__libc_init_array+0x40>)
 8010eae:	4c0c      	ldr	r4, [pc, #48]	; (8010ee0 <__libc_init_array+0x44>)
 8010eb0:	f000 f94e 	bl	8011150 <_init>
 8010eb4:	1ba4      	subs	r4, r4, r6
 8010eb6:	10a4      	asrs	r4, r4, #2
 8010eb8:	2500      	movs	r5, #0
 8010eba:	42a5      	cmp	r5, r4
 8010ebc:	d105      	bne.n	8010eca <__libc_init_array+0x2e>
 8010ebe:	bd70      	pop	{r4, r5, r6, pc}
 8010ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ec4:	4798      	blx	r3
 8010ec6:	3501      	adds	r5, #1
 8010ec8:	e7ee      	b.n	8010ea8 <__libc_init_array+0xc>
 8010eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ece:	4798      	blx	r3
 8010ed0:	3501      	adds	r5, #1
 8010ed2:	e7f2      	b.n	8010eba <__libc_init_array+0x1e>
 8010ed4:	08013d14 	.word	0x08013d14
 8010ed8:	08013d14 	.word	0x08013d14
 8010edc:	08013d14 	.word	0x08013d14
 8010ee0:	08013d18 	.word	0x08013d18

08010ee4 <__itoa>:
 8010ee4:	1e93      	subs	r3, r2, #2
 8010ee6:	2b22      	cmp	r3, #34	; 0x22
 8010ee8:	b510      	push	{r4, lr}
 8010eea:	460c      	mov	r4, r1
 8010eec:	d904      	bls.n	8010ef8 <__itoa+0x14>
 8010eee:	2300      	movs	r3, #0
 8010ef0:	700b      	strb	r3, [r1, #0]
 8010ef2:	461c      	mov	r4, r3
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	bd10      	pop	{r4, pc}
 8010ef8:	2a0a      	cmp	r2, #10
 8010efa:	d109      	bne.n	8010f10 <__itoa+0x2c>
 8010efc:	2800      	cmp	r0, #0
 8010efe:	da07      	bge.n	8010f10 <__itoa+0x2c>
 8010f00:	232d      	movs	r3, #45	; 0x2d
 8010f02:	700b      	strb	r3, [r1, #0]
 8010f04:	4240      	negs	r0, r0
 8010f06:	2101      	movs	r1, #1
 8010f08:	4421      	add	r1, r4
 8010f0a:	f000 f8e1 	bl	80110d0 <__utoa>
 8010f0e:	e7f1      	b.n	8010ef4 <__itoa+0x10>
 8010f10:	2100      	movs	r1, #0
 8010f12:	e7f9      	b.n	8010f08 <__itoa+0x24>

08010f14 <itoa>:
 8010f14:	f7ff bfe6 	b.w	8010ee4 <__itoa>

08010f18 <malloc>:
 8010f18:	4b02      	ldr	r3, [pc, #8]	; (8010f24 <malloc+0xc>)
 8010f1a:	4601      	mov	r1, r0
 8010f1c:	6818      	ldr	r0, [r3, #0]
 8010f1e:	f000 b86d 	b.w	8010ffc <_malloc_r>
 8010f22:	bf00      	nop
 8010f24:	20000088 	.word	0x20000088

08010f28 <free>:
 8010f28:	4b02      	ldr	r3, [pc, #8]	; (8010f34 <free+0xc>)
 8010f2a:	4601      	mov	r1, r0
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	f000 b817 	b.w	8010f60 <_free_r>
 8010f32:	bf00      	nop
 8010f34:	20000088 	.word	0x20000088

08010f38 <memcpy>:
 8010f38:	b510      	push	{r4, lr}
 8010f3a:	1e43      	subs	r3, r0, #1
 8010f3c:	440a      	add	r2, r1
 8010f3e:	4291      	cmp	r1, r2
 8010f40:	d100      	bne.n	8010f44 <memcpy+0xc>
 8010f42:	bd10      	pop	{r4, pc}
 8010f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f4c:	e7f7      	b.n	8010f3e <memcpy+0x6>

08010f4e <memset>:
 8010f4e:	4402      	add	r2, r0
 8010f50:	4603      	mov	r3, r0
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d100      	bne.n	8010f58 <memset+0xa>
 8010f56:	4770      	bx	lr
 8010f58:	f803 1b01 	strb.w	r1, [r3], #1
 8010f5c:	e7f9      	b.n	8010f52 <memset+0x4>
	...

08010f60 <_free_r>:
 8010f60:	b538      	push	{r3, r4, r5, lr}
 8010f62:	4605      	mov	r5, r0
 8010f64:	2900      	cmp	r1, #0
 8010f66:	d045      	beq.n	8010ff4 <_free_r+0x94>
 8010f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f6c:	1f0c      	subs	r4, r1, #4
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	bfb8      	it	lt
 8010f72:	18e4      	addlt	r4, r4, r3
 8010f74:	f000 f8ea 	bl	801114c <__malloc_lock>
 8010f78:	4a1f      	ldr	r2, [pc, #124]	; (8010ff8 <_free_r+0x98>)
 8010f7a:	6813      	ldr	r3, [r2, #0]
 8010f7c:	4610      	mov	r0, r2
 8010f7e:	b933      	cbnz	r3, 8010f8e <_free_r+0x2e>
 8010f80:	6063      	str	r3, [r4, #4]
 8010f82:	6014      	str	r4, [r2, #0]
 8010f84:	4628      	mov	r0, r5
 8010f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f8a:	f000 b8e0 	b.w	801114e <__malloc_unlock>
 8010f8e:	42a3      	cmp	r3, r4
 8010f90:	d90c      	bls.n	8010fac <_free_r+0x4c>
 8010f92:	6821      	ldr	r1, [r4, #0]
 8010f94:	1862      	adds	r2, r4, r1
 8010f96:	4293      	cmp	r3, r2
 8010f98:	bf04      	itt	eq
 8010f9a:	681a      	ldreq	r2, [r3, #0]
 8010f9c:	685b      	ldreq	r3, [r3, #4]
 8010f9e:	6063      	str	r3, [r4, #4]
 8010fa0:	bf04      	itt	eq
 8010fa2:	1852      	addeq	r2, r2, r1
 8010fa4:	6022      	streq	r2, [r4, #0]
 8010fa6:	6004      	str	r4, [r0, #0]
 8010fa8:	e7ec      	b.n	8010f84 <_free_r+0x24>
 8010faa:	4613      	mov	r3, r2
 8010fac:	685a      	ldr	r2, [r3, #4]
 8010fae:	b10a      	cbz	r2, 8010fb4 <_free_r+0x54>
 8010fb0:	42a2      	cmp	r2, r4
 8010fb2:	d9fa      	bls.n	8010faa <_free_r+0x4a>
 8010fb4:	6819      	ldr	r1, [r3, #0]
 8010fb6:	1858      	adds	r0, r3, r1
 8010fb8:	42a0      	cmp	r0, r4
 8010fba:	d10b      	bne.n	8010fd4 <_free_r+0x74>
 8010fbc:	6820      	ldr	r0, [r4, #0]
 8010fbe:	4401      	add	r1, r0
 8010fc0:	1858      	adds	r0, r3, r1
 8010fc2:	4282      	cmp	r2, r0
 8010fc4:	6019      	str	r1, [r3, #0]
 8010fc6:	d1dd      	bne.n	8010f84 <_free_r+0x24>
 8010fc8:	6810      	ldr	r0, [r2, #0]
 8010fca:	6852      	ldr	r2, [r2, #4]
 8010fcc:	605a      	str	r2, [r3, #4]
 8010fce:	4401      	add	r1, r0
 8010fd0:	6019      	str	r1, [r3, #0]
 8010fd2:	e7d7      	b.n	8010f84 <_free_r+0x24>
 8010fd4:	d902      	bls.n	8010fdc <_free_r+0x7c>
 8010fd6:	230c      	movs	r3, #12
 8010fd8:	602b      	str	r3, [r5, #0]
 8010fda:	e7d3      	b.n	8010f84 <_free_r+0x24>
 8010fdc:	6820      	ldr	r0, [r4, #0]
 8010fde:	1821      	adds	r1, r4, r0
 8010fe0:	428a      	cmp	r2, r1
 8010fe2:	bf04      	itt	eq
 8010fe4:	6811      	ldreq	r1, [r2, #0]
 8010fe6:	6852      	ldreq	r2, [r2, #4]
 8010fe8:	6062      	str	r2, [r4, #4]
 8010fea:	bf04      	itt	eq
 8010fec:	1809      	addeq	r1, r1, r0
 8010fee:	6021      	streq	r1, [r4, #0]
 8010ff0:	605c      	str	r4, [r3, #4]
 8010ff2:	e7c7      	b.n	8010f84 <_free_r+0x24>
 8010ff4:	bd38      	pop	{r3, r4, r5, pc}
 8010ff6:	bf00      	nop
 8010ff8:	20004a68 	.word	0x20004a68

08010ffc <_malloc_r>:
 8010ffc:	b570      	push	{r4, r5, r6, lr}
 8010ffe:	1ccd      	adds	r5, r1, #3
 8011000:	f025 0503 	bic.w	r5, r5, #3
 8011004:	3508      	adds	r5, #8
 8011006:	2d0c      	cmp	r5, #12
 8011008:	bf38      	it	cc
 801100a:	250c      	movcc	r5, #12
 801100c:	2d00      	cmp	r5, #0
 801100e:	4606      	mov	r6, r0
 8011010:	db01      	blt.n	8011016 <_malloc_r+0x1a>
 8011012:	42a9      	cmp	r1, r5
 8011014:	d903      	bls.n	801101e <_malloc_r+0x22>
 8011016:	230c      	movs	r3, #12
 8011018:	6033      	str	r3, [r6, #0]
 801101a:	2000      	movs	r0, #0
 801101c:	bd70      	pop	{r4, r5, r6, pc}
 801101e:	f000 f895 	bl	801114c <__malloc_lock>
 8011022:	4a21      	ldr	r2, [pc, #132]	; (80110a8 <_malloc_r+0xac>)
 8011024:	6814      	ldr	r4, [r2, #0]
 8011026:	4621      	mov	r1, r4
 8011028:	b991      	cbnz	r1, 8011050 <_malloc_r+0x54>
 801102a:	4c20      	ldr	r4, [pc, #128]	; (80110ac <_malloc_r+0xb0>)
 801102c:	6823      	ldr	r3, [r4, #0]
 801102e:	b91b      	cbnz	r3, 8011038 <_malloc_r+0x3c>
 8011030:	4630      	mov	r0, r6
 8011032:	f000 f83d 	bl	80110b0 <_sbrk_r>
 8011036:	6020      	str	r0, [r4, #0]
 8011038:	4629      	mov	r1, r5
 801103a:	4630      	mov	r0, r6
 801103c:	f000 f838 	bl	80110b0 <_sbrk_r>
 8011040:	1c43      	adds	r3, r0, #1
 8011042:	d124      	bne.n	801108e <_malloc_r+0x92>
 8011044:	230c      	movs	r3, #12
 8011046:	6033      	str	r3, [r6, #0]
 8011048:	4630      	mov	r0, r6
 801104a:	f000 f880 	bl	801114e <__malloc_unlock>
 801104e:	e7e4      	b.n	801101a <_malloc_r+0x1e>
 8011050:	680b      	ldr	r3, [r1, #0]
 8011052:	1b5b      	subs	r3, r3, r5
 8011054:	d418      	bmi.n	8011088 <_malloc_r+0x8c>
 8011056:	2b0b      	cmp	r3, #11
 8011058:	d90f      	bls.n	801107a <_malloc_r+0x7e>
 801105a:	600b      	str	r3, [r1, #0]
 801105c:	50cd      	str	r5, [r1, r3]
 801105e:	18cc      	adds	r4, r1, r3
 8011060:	4630      	mov	r0, r6
 8011062:	f000 f874 	bl	801114e <__malloc_unlock>
 8011066:	f104 000b 	add.w	r0, r4, #11
 801106a:	1d23      	adds	r3, r4, #4
 801106c:	f020 0007 	bic.w	r0, r0, #7
 8011070:	1ac3      	subs	r3, r0, r3
 8011072:	d0d3      	beq.n	801101c <_malloc_r+0x20>
 8011074:	425a      	negs	r2, r3
 8011076:	50e2      	str	r2, [r4, r3]
 8011078:	e7d0      	b.n	801101c <_malloc_r+0x20>
 801107a:	428c      	cmp	r4, r1
 801107c:	684b      	ldr	r3, [r1, #4]
 801107e:	bf16      	itet	ne
 8011080:	6063      	strne	r3, [r4, #4]
 8011082:	6013      	streq	r3, [r2, #0]
 8011084:	460c      	movne	r4, r1
 8011086:	e7eb      	b.n	8011060 <_malloc_r+0x64>
 8011088:	460c      	mov	r4, r1
 801108a:	6849      	ldr	r1, [r1, #4]
 801108c:	e7cc      	b.n	8011028 <_malloc_r+0x2c>
 801108e:	1cc4      	adds	r4, r0, #3
 8011090:	f024 0403 	bic.w	r4, r4, #3
 8011094:	42a0      	cmp	r0, r4
 8011096:	d005      	beq.n	80110a4 <_malloc_r+0xa8>
 8011098:	1a21      	subs	r1, r4, r0
 801109a:	4630      	mov	r0, r6
 801109c:	f000 f808 	bl	80110b0 <_sbrk_r>
 80110a0:	3001      	adds	r0, #1
 80110a2:	d0cf      	beq.n	8011044 <_malloc_r+0x48>
 80110a4:	6025      	str	r5, [r4, #0]
 80110a6:	e7db      	b.n	8011060 <_malloc_r+0x64>
 80110a8:	20004a68 	.word	0x20004a68
 80110ac:	20004a6c 	.word	0x20004a6c

080110b0 <_sbrk_r>:
 80110b0:	b538      	push	{r3, r4, r5, lr}
 80110b2:	4c06      	ldr	r4, [pc, #24]	; (80110cc <_sbrk_r+0x1c>)
 80110b4:	2300      	movs	r3, #0
 80110b6:	4605      	mov	r5, r0
 80110b8:	4608      	mov	r0, r1
 80110ba:	6023      	str	r3, [r4, #0]
 80110bc:	f7f0 fefa 	bl	8001eb4 <_sbrk>
 80110c0:	1c43      	adds	r3, r0, #1
 80110c2:	d102      	bne.n	80110ca <_sbrk_r+0x1a>
 80110c4:	6823      	ldr	r3, [r4, #0]
 80110c6:	b103      	cbz	r3, 80110ca <_sbrk_r+0x1a>
 80110c8:	602b      	str	r3, [r5, #0]
 80110ca:	bd38      	pop	{r3, r4, r5, pc}
 80110cc:	200055f0 	.word	0x200055f0

080110d0 <__utoa>:
 80110d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110d2:	4b1d      	ldr	r3, [pc, #116]	; (8011148 <__utoa+0x78>)
 80110d4:	b08b      	sub	sp, #44	; 0x2c
 80110d6:	4605      	mov	r5, r0
 80110d8:	460c      	mov	r4, r1
 80110da:	466e      	mov	r6, sp
 80110dc:	f103 0c20 	add.w	ip, r3, #32
 80110e0:	6818      	ldr	r0, [r3, #0]
 80110e2:	6859      	ldr	r1, [r3, #4]
 80110e4:	4637      	mov	r7, r6
 80110e6:	c703      	stmia	r7!, {r0, r1}
 80110e8:	3308      	adds	r3, #8
 80110ea:	4563      	cmp	r3, ip
 80110ec:	463e      	mov	r6, r7
 80110ee:	d1f7      	bne.n	80110e0 <__utoa+0x10>
 80110f0:	6818      	ldr	r0, [r3, #0]
 80110f2:	791b      	ldrb	r3, [r3, #4]
 80110f4:	713b      	strb	r3, [r7, #4]
 80110f6:	1e93      	subs	r3, r2, #2
 80110f8:	2b22      	cmp	r3, #34	; 0x22
 80110fa:	6038      	str	r0, [r7, #0]
 80110fc:	f04f 0300 	mov.w	r3, #0
 8011100:	d904      	bls.n	801110c <__utoa+0x3c>
 8011102:	7023      	strb	r3, [r4, #0]
 8011104:	461c      	mov	r4, r3
 8011106:	4620      	mov	r0, r4
 8011108:	b00b      	add	sp, #44	; 0x2c
 801110a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801110c:	1e66      	subs	r6, r4, #1
 801110e:	fbb5 f0f2 	udiv	r0, r5, r2
 8011112:	af0a      	add	r7, sp, #40	; 0x28
 8011114:	fb02 5510 	mls	r5, r2, r0, r5
 8011118:	443d      	add	r5, r7
 801111a:	1c59      	adds	r1, r3, #1
 801111c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8011120:	f806 5f01 	strb.w	r5, [r6, #1]!
 8011124:	4605      	mov	r5, r0
 8011126:	b968      	cbnz	r0, 8011144 <__utoa+0x74>
 8011128:	5460      	strb	r0, [r4, r1]
 801112a:	4423      	add	r3, r4
 801112c:	4622      	mov	r2, r4
 801112e:	1b19      	subs	r1, r3, r4
 8011130:	1b10      	subs	r0, r2, r4
 8011132:	4281      	cmp	r1, r0
 8011134:	dde7      	ble.n	8011106 <__utoa+0x36>
 8011136:	7811      	ldrb	r1, [r2, #0]
 8011138:	7818      	ldrb	r0, [r3, #0]
 801113a:	f802 0b01 	strb.w	r0, [r2], #1
 801113e:	f803 1901 	strb.w	r1, [r3], #-1
 8011142:	e7f4      	b.n	801112e <__utoa+0x5e>
 8011144:	460b      	mov	r3, r1
 8011146:	e7e2      	b.n	801110e <__utoa+0x3e>
 8011148:	08013ce4 	.word	0x08013ce4

0801114c <__malloc_lock>:
 801114c:	4770      	bx	lr

0801114e <__malloc_unlock>:
 801114e:	4770      	bx	lr

08011150 <_init>:
 8011150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011152:	bf00      	nop
 8011154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011156:	bc08      	pop	{r3}
 8011158:	469e      	mov	lr, r3
 801115a:	4770      	bx	lr

0801115c <_fini>:
 801115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115e:	bf00      	nop
 8011160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011162:	bc08      	pop	{r3}
 8011164:	469e      	mov	lr, r3
 8011166:	4770      	bx	lr
