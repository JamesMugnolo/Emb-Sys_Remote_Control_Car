
ESC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cc8  080125d8  080125d8  000225d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080152a0  080152a0  000300fc  2**0
                  CONTENTS
  4 .ARM          00000008  080152a0  080152a0  000252a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080152a8  080152a8  000300fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080152a8  080152a8  000252a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080152ac  080152ac  000252ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080152b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005948  200000fc  080153ac  000300fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005a44  080153ac  00035a44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000426a0  00000000  00000000  0003012c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075c0  00000000  00000000  000727cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000031c8  00000000  00000000  00079d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002eb8  00000000  00000000  0007cf58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c624  00000000  00000000  0007fe10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c90d  00000000  00000000  0008c434  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe183  00000000  00000000  000b8d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b6ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d688  00000000  00000000  001b6f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000fc 	.word	0x200000fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080125c0 	.word	0x080125c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000100 	.word	0x20000100
 800021c:	080125c0 	.word	0x080125c0

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <CheckFlags>:
float MappedVals[8] = {MAP_MID,MAP_MID,MAP_MID,MAP_MID,MAP_MID,MAP_MID,MAP_MID,MAP_MID};//Value of inputs as percentage. Values within MAP_* or SWITCH_*.
int MotorVals[4] = {DUTY_CYCLE_DISARM,DUTY_CYCLE_DISARM,DUTY_CYCLE_DISARM,DUTY_CYCLE_DISARM};//2 or 4 size (how many signals). Length of duty cycle in microsec.
bool FlagBuffer[5] = {0,0,0,0,0};//Flags! See *_FG defines.

bool CheckFlags()
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	return FlagBuffer[ARM_FG] && FlagBuffer[RX_CON_FG]
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <CheckFlags+0x3c>)
 8000526:	781b      	ldrb	r3, [r3, #0]
		&& FlagBuffer[RX_FAILSAFE_FG] && FlagBuffer[BAT_LVL_FG];
 8000528:	2b00      	cmp	r3, #0
 800052a:	d00d      	beq.n	8000548 <CheckFlags+0x28>
	return FlagBuffer[ARM_FG] && FlagBuffer[RX_CON_FG]
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <CheckFlags+0x3c>)
 800052e:	785b      	ldrb	r3, [r3, #1]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d009      	beq.n	8000548 <CheckFlags+0x28>
		&& FlagBuffer[RX_FAILSAFE_FG] && FlagBuffer[BAT_LVL_FG];
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <CheckFlags+0x3c>)
 8000536:	789b      	ldrb	r3, [r3, #2]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d005      	beq.n	8000548 <CheckFlags+0x28>
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <CheckFlags+0x3c>)
 800053e:	78db      	ldrb	r3, [r3, #3]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <CheckFlags+0x28>
 8000544:	2301      	movs	r3, #1
 8000546:	e000      	b.n	800054a <CheckFlags+0x2a>
 8000548:	2300      	movs	r3, #0
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	b2db      	uxtb	r3, r3
}
 8000550:	4618      	mov	r0, r3
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000138 	.word	0x20000138

08000560 <MapRxToSwitch>:

int MapRxToSwitch(uint16_t swVal)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	if(swVal < RX_SWITCH_LOW_THRESH)
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000570:	d201      	bcs.n	8000576 <MapRxToSwitch+0x16>
		return MAP_SWITCH_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	e007      	b.n	8000586 <MapRxToSwitch+0x26>
	else if(swVal > RX_SWITCH_HIGH_THRESH)
 8000576:	88fb      	ldrh	r3, [r7, #6]
 8000578:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800057c:	4293      	cmp	r3, r2
 800057e:	d901      	bls.n	8000584 <MapRxToSwitch+0x24>
		return MAP_SWITCH_HIGH;
 8000580:	2302      	movs	r3, #2
 8000582:	e000      	b.n	8000586 <MapRxToSwitch+0x26>
	else
		return MAP_SWITCH_MID;
 8000584:	2301      	movs	r3, #1
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
	...

08000594 <MapRxToPercent>:

float MapRxToPercent(uint16_t rxVal)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	80fb      	strh	r3, [r7, #6]
	float val = rxVal;
 800059e:	88fb      	ldrh	r3, [r7, #6]
 80005a0:	ee07 3a90 	vmov	s15, r3
 80005a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005a8:	edc7 7a03 	vstr	s15, [r7, #12]

	//if we are within deadzone
	if (val <= (RX_MID_POINT + RX_DEADZONE_THRESH)
 80005ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000608 <MapRxToPercent+0x74>
 80005b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005bc:	d80b      	bhi.n	80005d6 <MapRxToPercent+0x42>
			&& val >= (RX_MID_POINT - RX_DEADZONE_THRESH))
 80005be:	edd7 7a03 	vldr	s15, [r7, #12]
 80005c2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800060c <MapRxToPercent+0x78>
 80005c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005ce:	db02      	blt.n	80005d6 <MapRxToPercent+0x42>
	{
		return 0;
 80005d0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000610 <MapRxToPercent+0x7c>
 80005d4:	e011      	b.n	80005fa <MapRxToPercent+0x66>
	}
	else
	{
		return ((((val - RX_MIN) * (MAP_MAX - MAP_MIN))
 80005d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80005da:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000614 <MapRxToPercent+0x80>
 80005de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000618 <MapRxToPercent+0x84>
 80005e6:	ee27 7a87 	vmul.f32	s14, s15, s14
					/ (RX_MAX - RX_MIN)) + MAP_MIN);
 80005ea:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800061c <MapRxToPercent+0x88>
 80005ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005f2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000620 <MapRxToPercent+0x8c>
 80005f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
	}
}
 80005fa:	eeb0 0a67 	vmov.f32	s0, s15
 80005fe:	3714      	adds	r7, #20
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	447f8000 	.word	0x447f8000
 800060c:	44708000 	.word	0x44708000
 8000610:	00000000 	.word	0x00000000
 8000614:	432c0000 	.word	0x432c0000
 8000618:	43480000 	.word	0x43480000
 800061c:	44ccc000 	.word	0x44ccc000
 8000620:	42c80000 	.word	0x42c80000

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f003 fa88 	bl	8003b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f8a0 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f000 fc6e 	bl	8000f10 <MX_GPIO_Init>
  MX_DMA_Init();
 8000634:	f000 fc4c 	bl	8000ed0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000638:	f000 f93a 	bl	80008b0 <MX_ADC1_Init>
  MX_DAC_Init();
 800063c:	f000 f98a 	bl	8000954 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000640:	f000 f9b2 	bl	80009a8 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000644:	f000 f9e8 	bl	8000a18 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000648:	f000 fa50 	bl	8000aec <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 800064c:	f000 fdd4 	bl	80011f8 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000650:	f000 fab0 	bl	8000bb4 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000654:	f000 fadc 	bl	8000c10 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000658:	f000 fb06 	bl	8000c68 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 800065c:	f000 fbe4 	bl	8000e28 <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000660:	f000 fc0c 	bl	8000e7c <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000664:	f000 fa78 	bl	8000b58 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000668:	f000 fb2e 	bl	8000cc8 <MX_TIM3_Init>
  MX_UART7_Init();
 800066c:	f000 fbae 	bl	8000dcc <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000670:	f002 fd57 	bl	8003122 <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000674:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000678:	f002 fe1e 	bl	80032b8 <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 800067c:	2100      	movs	r1, #0
 800067e:	2000      	movs	r0, #0
 8000680:	f002 fb9a 	bl	8002db8 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8000684:	4825      	ldr	r0, [pc, #148]	; (800071c <main+0xf8>)
 8000686:	f002 fdfb 	bl	8003280 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800068a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800068e:	f002 fdd7 	bl	8003240 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000692:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000696:	f002 fde3 	bl	8003260 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAtLine(1, "Hello");
 800069a:	4921      	ldr	r1, [pc, #132]	; (8000720 <main+0xfc>)
 800069c:	2001      	movs	r0, #1
 800069e:	f002 ff2b 	bl	80034f8 <BSP_LCD_DisplayStringAtLine>
  //BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project...", CENTER_MODE);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80006a2:	2104      	movs	r1, #4
 80006a4:	481f      	ldr	r0, [pc, #124]	; (8000724 <main+0x100>)
 80006a6:	f009 f817 	bl	80096d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80006aa:	2108      	movs	r1, #8
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <main+0x100>)
 80006ae:	f009 f813 	bl	80096d8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006b2:	f00e fc13 	bl	800eedc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Run_Motors */
  Run_MotorsHandle = osThreadNew(Start_Run_Motors, NULL, &Run_Motors_attributes);
 80006b6:	4a1c      	ldr	r2, [pc, #112]	; (8000728 <main+0x104>)
 80006b8:	2100      	movs	r1, #0
 80006ba:	481c      	ldr	r0, [pc, #112]	; (800072c <main+0x108>)
 80006bc:	f00e fc78 	bl	800efb0 <osThreadNew>
 80006c0:	4602      	mov	r2, r0
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <main+0x10c>)
 80006c4:	601a      	str	r2, [r3, #0]

  /* creation of Radio_Receiver */
  Radio_ReceiverHandle = osThreadNew(Receive_Radio_Signal, NULL, &Radio_Receiver_attributes);
 80006c6:	4a1b      	ldr	r2, [pc, #108]	; (8000734 <main+0x110>)
 80006c8:	2100      	movs	r1, #0
 80006ca:	481b      	ldr	r0, [pc, #108]	; (8000738 <main+0x114>)
 80006cc:	f00e fc70 	bl	800efb0 <osThreadNew>
 80006d0:	4602      	mov	r2, r0
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <main+0x118>)
 80006d4:	601a      	str	r2, [r3, #0]

  /* creation of Rx_Mapping */
  Rx_MappingHandle = osThreadNew(Start_Rx_Mapping, NULL, &Rx_Mapping_attributes);
 80006d6:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <main+0x11c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	481a      	ldr	r0, [pc, #104]	; (8000744 <main+0x120>)
 80006dc:	f00e fc68 	bl	800efb0 <osThreadNew>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <main+0x124>)
 80006e4:	601a      	str	r2, [r3, #0]

  /* creation of Battery_Monitor */
  Battery_MonitorHandle = osThreadNew(Start_Battery_Monitor, NULL, &Battery_Monitor_attributes);
 80006e6:	4a19      	ldr	r2, [pc, #100]	; (800074c <main+0x128>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4819      	ldr	r0, [pc, #100]	; (8000750 <main+0x12c>)
 80006ec:	f00e fc60 	bl	800efb0 <osThreadNew>
 80006f0:	4602      	mov	r2, r0
 80006f2:	4b18      	ldr	r3, [pc, #96]	; (8000754 <main+0x130>)
 80006f4:	601a      	str	r2, [r3, #0]

  /* creation of Data_To_LCD */
  Data_To_LCDHandle = osThreadNew(Start_Data_To_LCD, NULL, &Data_To_LCD_attributes);
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <main+0x134>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	4818      	ldr	r0, [pc, #96]	; (800075c <main+0x138>)
 80006fc:	f00e fc58 	bl	800efb0 <osThreadNew>
 8000700:	4602      	mov	r2, r0
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <main+0x13c>)
 8000704:	601a      	str	r2, [r3, #0]

  /* creation of Map_To_Motors */
  Map_To_MotorsHandle = osThreadNew(Start_Map_To_Motors, NULL, &Map_To_Motors_attributes);
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <main+0x140>)
 8000708:	2100      	movs	r1, #0
 800070a:	4817      	ldr	r0, [pc, #92]	; (8000768 <main+0x144>)
 800070c:	f00e fc50 	bl	800efb0 <osThreadNew>
 8000710:	4602      	mov	r2, r0
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <main+0x148>)
 8000714:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000716:	f00e fc15 	bl	800ef44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071a:	e7fe      	b.n	800071a <main+0xf6>
 800071c:	2000005c 	.word	0x2000005c
 8000720:	0801262c 	.word	0x0801262c
 8000724:	20004c50 	.word	0x20004c50
 8000728:	0801269c 	.word	0x0801269c
 800072c:	08001375 	.word	0x08001375
 8000730:	20005134 	.word	0x20005134
 8000734:	080126c0 	.word	0x080126c0
 8000738:	08001399 	.word	0x08001399
 800073c:	20004ae0 	.word	0x20004ae0
 8000740:	080126e4 	.word	0x080126e4
 8000744:	08001569 	.word	0x08001569
 8000748:	20004bb8 	.word	0x20004bb8
 800074c:	08012708 	.word	0x08012708
 8000750:	08001631 	.word	0x08001631
 8000754:	20004bbc 	.word	0x20004bbc
 8000758:	0801272c 	.word	0x0801272c
 800075c:	08001651 	.word	0x08001651
 8000760:	20005138 	.word	0x20005138
 8000764:	08012750 	.word	0x08012750
 8000768:	08001675 	.word	0x08001675
 800076c:	2000512c 	.word	0x2000512c

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b0aa      	sub	sp, #168	; 0xa8
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800077a:	2234      	movs	r2, #52	; 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f011 fe5b 	bl	801243a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000794:	f107 0308 	add.w	r3, r7, #8
 8000798:	2258      	movs	r2, #88	; 0x58
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f011 fe4c 	bl	801243a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b40      	ldr	r3, [pc, #256]	; (80008a8 <SystemClock_Config+0x138>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a3f      	ldr	r2, [pc, #252]	; (80008a8 <SystemClock_Config+0x138>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <SystemClock_Config+0x138>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	4b3a      	ldr	r3, [pc, #232]	; (80008ac <SystemClock_Config+0x13c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a39      	ldr	r2, [pc, #228]	; (80008ac <SystemClock_Config+0x13c>)
 80007c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <SystemClock_Config+0x13c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007da:	2303      	movs	r3, #3
 80007dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007de:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ea:	2310      	movs	r3, #16
 80007ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f0:	2302      	movs	r3, #2
 80007f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007fe:	230f      	movs	r3, #15
 8000800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000804:	2390      	movs	r3, #144	; 0x90
 8000806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080a:	2302      	movs	r3, #2
 800080c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000810:	2305      	movs	r3, #5
 8000812:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000820:	4618      	mov	r0, r3
 8000822:	f007 fee3 	bl	80085ec <HAL_RCC_OscConfig>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800082c:	f000 ff44 	bl	80016b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000830:	230f      	movs	r3, #15
 8000832:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000834:	2300      	movs	r3, #0
 8000836:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000844:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f007 f8f4 	bl	8007a38 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000856:	f000 ff2f 	bl	80016b8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800085a:	f240 1371 	movw	r3, #369	; 0x171
 800085e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000860:	2332      	movs	r3, #50	; 0x32
 8000862:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000864:	230c      	movs	r3, #12
 8000866:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000868:	2302      	movs	r3, #2
 800086a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000874:	2300      	movs	r3, #0
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000878:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800087e:	2300      	movs	r3, #0
 8000880:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000886:	2300      	movs	r3, #0
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	4618      	mov	r0, r3
 8000890:	f007 fad0 	bl	8007e34 <HAL_RCCEx_PeriphCLKConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800089a:	f000 ff0d 	bl	80016b8 <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	37a8      	adds	r7, #168	; 0xa8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_ADC1_Init+0x98>)
 80008c4:	4a21      	ldr	r2, [pc, #132]	; (800094c <MX_ADC1_Init+0x9c>)
 80008c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_ADC1_Init+0x98>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_ADC1_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e0:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_ADC1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_ADC1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_ADC1_Init+0x98>)
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <MX_ADC1_Init+0xa0>)
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_ADC1_Init+0x98>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_ADC1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_ADC1_Init+0x98>)
 800090a:	2201      	movs	r2, #1
 800090c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800090e:	480e      	ldr	r0, [pc, #56]	; (8000948 <MX_ADC1_Init+0x98>)
 8000910:	f003 f978 	bl	8003c04 <HAL_ADC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800091a:	f000 fecd 	bl	80016b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800091e:	230a      	movs	r3, #10
 8000920:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_ADC1_Init+0x98>)
 8000930:	f003 f9ac 	bl	8003c8c <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800093a:	f000 febd 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20004dcc 	.word	0x20004dcc
 800094c:	40012000 	.word	0x40012000
 8000950:	0f000001 	.word	0x0f000001

08000954 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_DAC_Init+0x4c>)
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <MX_DAC_Init+0x50>)
 8000966:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_DAC_Init+0x4c>)
 800096a:	f003 fc9f 	bl	80042ac <HAL_DAC_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000974:	f000 fea0 	bl	80016b8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000978:	2300      	movs	r3, #0
 800097a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_DAC_Init+0x4c>)
 8000988:	f003 fd06 	bl	8004398 <HAL_DAC_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000992:	f000 fe91 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200050cc 	.word	0x200050cc
 80009a4:	40007400 	.word	0x40007400

080009a8 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009ae:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <MX_DFSDM1_Init+0x6c>)
 80009b0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009d8:	2202      	movs	r2, #2
 80009da:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_DFSDM1_Init+0x68>)
 80009fc:	f003 fd24 	bl	8004448 <HAL_DFSDM_ChannelInit>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000a06:	f000 fe57 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20004aa8 	.word	0x20004aa8
 8000a14:	40016020 	.word	0x40016020

08000a18 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a1e:	4a30      	ldr	r2, [pc, #192]	; (8000ae0 <MX_DFSDM2_Init+0xc8>)
 8000a20:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a3a:	4b28      	ldr	r3, [pc, #160]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000a4c:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000a5e:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 8000a6a:	481c      	ldr	r0, [pc, #112]	; (8000adc <MX_DFSDM2_Init+0xc4>)
 8000a6c:	f003 fcec 	bl	8004448 <HAL_DFSDM_ChannelInit>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000a76:	f000 fe1f 	bl	80016b8 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <MX_DFSDM2_Init+0xd0>)
 8000a7e:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000a8e:	2202      	movs	r2, #2
 8000a90:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_DFSDM2_Init+0xcc>)
 8000aca:	f003 fcbd 	bl	8004448 <HAL_DFSDM_ChannelInit>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000ad4:	f000 fdf0 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20004c90 	.word	0x20004c90
 8000ae0:	40016420 	.word	0x40016420
 8000ae4:	20004b7c 	.word	0x20004b7c
 8000ae8:	400164e0 	.word	0x400164e0

08000aec <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <MX_FMPI2C1_Init+0x64>)
 8000af4:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <MX_FMPI2C1_Init+0x68>)
 8000afa:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000b26:	4809      	ldr	r0, [pc, #36]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000b28:	f004 f972 	bl	8004e10 <HAL_FMPI2C_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000b32:	f000 fdc1 	bl	80016b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_FMPI2C1_Init+0x60>)
 8000b3a:	f004 f9f8 	bl	8004f2e <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000b44:	f000 fdb8 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200050e0 	.word	0x200050e0
 8000b50:	40006000 	.word	0x40006000
 8000b54:	00303d5b 	.word	0x00303d5b

08000b58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <MX_I2C2_Init+0x54>)
 8000b60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b64:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_I2C2_Init+0x58>)
 8000b66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b88:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b94:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <MX_I2C2_Init+0x50>)
 8000b96:	f006 f8b1 	bl	8006cfc <HAL_I2C_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 fd8a 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20004b28 	.word	0x20004b28
 8000bac:	40005800 	.word	0x40005800
 8000bb0:	000186a0 	.word	0x000186a0

08000bb4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <MX_I2S2_Init+0x58>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bdc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000be0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_I2S2_Init+0x54>)
 8000bf6:	f006 f9b9 	bl	8006f6c <HAL_I2S_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000c00:	f000 fd5a 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20005250 	.word	0x20005250
 8000c0c:	40003800 	.word	0x40003800

08000c10 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c16:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <MX_QUADSPI_Init+0x54>)
 8000c18:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_QUADSPI_Init+0x50>)
 8000c4c:	f006 fe32 	bl	80078b4 <HAL_QSPI_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 fd2f 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20005298 	.word	0x20005298
 8000c64:	a0001000 	.word	0xa0001000

08000c68 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <MX_SDIO_SD_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000c96:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000c98:	f007 feea 	bl	8008a70 <HAL_SD_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000ca2:	f000 fd09 	bl	80016b8 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_SDIO_SD_Init+0x58>)
 8000cac:	f008 f914 	bl	8008ed8 <HAL_SD_ConfigWideBusOperation>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f000 fcff 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000518c 	.word	0x2000518c
 8000cc4:	40012c00 	.word	0x40012c00

08000cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	; 0x38
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
 8000cf4:	615a      	str	r2, [r3, #20]
 8000cf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <MX_TIM3_Init+0x100>)
 8000cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8000cfe:	4b31      	ldr	r3, [pc, #196]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d00:	220f      	movs	r2, #15
 8000d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d18:	4b2a      	ldr	r3, [pc, #168]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d1e:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d20:	f008 fc56 	bl	80095d0 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d2a:	f000 fcc5 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4822      	ldr	r0, [pc, #136]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d3c:	f008 fed8 	bl	8009af0 <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d46:	f000 fcb7 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d4a:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d4c:	f008 fc8f 	bl	800966e <HAL_TIM_PWM_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d56:	f000 fcaf 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d62:	f107 0320 	add.w	r3, r7, #32
 8000d66:	4619      	mov	r1, r3
 8000d68:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d6a:	f009 fab1 	bl	800a2d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d74:	f000 fca0 	bl	80016b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d78:	2360      	movs	r3, #96	; 0x60
 8000d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000d92:	f008 fde7 	bl	8009964 <HAL_TIM_PWM_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d9c:	f000 fc8c 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2208      	movs	r2, #8
 8000da4:	4619      	mov	r1, r3
 8000da6:	4807      	ldr	r0, [pc, #28]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000da8:	f008 fddc 	bl	8009964 <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000db2:	f000 fc81 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <MX_TIM3_Init+0xfc>)
 8000db8:	f001 f926 	bl	8002008 <HAL_TIM_MspPostInit>

}
 8000dbc:	bf00      	nop
 8000dbe:	3738      	adds	r7, #56	; 0x38
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20004c50 	.word	0x20004c50
 8000dc8:	40000400 	.word	0x40000400

08000dcc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000dd0:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <MX_UART7_Init+0x50>)
 8000dd2:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <MX_UART7_Init+0x54>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <MX_UART7_Init+0x50>)
 8000dd8:	4a12      	ldr	r2, [pc, #72]	; (8000e24 <MX_UART7_Init+0x58>)
 8000dda:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <MX_UART7_Init+0x50>)
 8000dde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000de2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <MX_UART7_Init+0x50>)
 8000de6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dea:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <MX_UART7_Init+0x50>)
 8000dee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000df2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <MX_UART7_Init+0x50>)
 8000df6:	220c      	movs	r2, #12
 8000df8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <MX_UART7_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <MX_UART7_Init+0x50>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_UART7_Init+0x50>)
 8000e08:	f009 faf2 	bl	800a3f0 <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8000e12:	f000 fc51 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20004ae4 	.word	0x20004ae4
 8000e20:	40007800 	.word	0x40007800
 8000e24:	000186a0 	.word	0x000186a0

08000e28 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_UART10_Init+0x50>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000e5e:	4805      	ldr	r0, [pc, #20]	; (8000e74 <MX_UART10_Init+0x4c>)
 8000e60:	f009 fac6 	bl	800a3f0 <HAL_UART_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000e6a:	f000 fc25 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20004bc0 	.word	0x20004bc0
 8000e78:	40011c00 	.word	0x40011c00

08000e7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000e82:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_USART6_UART_Init+0x50>)
 8000e84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e94:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ea0:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ea6:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_USART6_UART_Init+0x4c>)
 8000eb4:	f009 fa9c 	bl	800a3f0 <HAL_UART_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ebe:	f000 fbfb 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20005210 	.word	0x20005210
 8000ecc:	40011400 	.word	0x40011400

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_DMA_Init+0x3c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <MX_DMA_Init+0x3c>)
 8000ee0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_DMA_Init+0x3c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	200e      	movs	r0, #14
 8000ef8:	f003 f9ae 	bl	8004258 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000efc:	200e      	movs	r0, #14
 8000efe:	f003 f9c7 	bl	8004290 <HAL_NVIC_EnableIRQ>

}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40023800 	.word	0x40023800

08000f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	; 0x38
 8000f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	4bab      	ldr	r3, [pc, #684]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4aaa      	ldr	r2, [pc, #680]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f30:	f043 0310 	orr.w	r3, r3, #16
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4ba8      	ldr	r3, [pc, #672]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0310 	and.w	r3, r3, #16
 8000f3e:	623b      	str	r3, [r7, #32]
 8000f40:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	4ba4      	ldr	r3, [pc, #656]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4aa3      	ldr	r2, [pc, #652]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4ba1      	ldr	r3, [pc, #644]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	4b9d      	ldr	r3, [pc, #628]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a9c      	ldr	r2, [pc, #624]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b9a      	ldr	r3, [pc, #616]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0320 	and.w	r3, r3, #32
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	4b96      	ldr	r3, [pc, #600]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a95      	ldr	r2, [pc, #596]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b93      	ldr	r3, [pc, #588]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b8f      	ldr	r3, [pc, #572]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a8e      	ldr	r2, [pc, #568]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b8c      	ldr	r3, [pc, #560]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b88      	ldr	r3, [pc, #544]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a87      	ldr	r2, [pc, #540]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b85      	ldr	r3, [pc, #532]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b81      	ldr	r3, [pc, #516]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a80      	ldr	r2, [pc, #512]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b7e      	ldr	r3, [pc, #504]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	4b7a      	ldr	r3, [pc, #488]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a79      	ldr	r2, [pc, #484]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b77      	ldr	r3, [pc, #476]	; (80011d8 <MX_GPIO_Init+0x2c8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	2138      	movs	r1, #56	; 0x38
 800100a:	4874      	ldr	r0, [pc, #464]	; (80011dc <MX_GPIO_Init+0x2cc>)
 800100c:	f004 f96c 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001010:	2200      	movs	r2, #0
 8001012:	2120      	movs	r1, #32
 8001014:	4872      	ldr	r0, [pc, #456]	; (80011e0 <MX_GPIO_Init+0x2d0>)
 8001016:	f004 f967 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001020:	4870      	ldr	r0, [pc, #448]	; (80011e4 <MX_GPIO_Init+0x2d4>)
 8001022:	f004 f961 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 800102c:	486e      	ldr	r0, [pc, #440]	; (80011e8 <MX_GPIO_Init+0x2d8>)
 800102e:	f004 f95b 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001038:	486c      	ldr	r0, [pc, #432]	; (80011ec <MX_GPIO_Init+0x2dc>)
 800103a:	f004 f955 	bl	80052e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 800103e:	2338      	movs	r3, #56	; 0x38
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4861      	ldr	r0, [pc, #388]	; (80011dc <MX_GPIO_Init+0x2cc>)
 8001056:	f003 ffb5 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800105a:	2340      	movs	r3, #64	; 0x40
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800106a:	2303      	movs	r3, #3
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4859      	ldr	r0, [pc, #356]	; (80011dc <MX_GPIO_Init+0x2cc>)
 8001076:	f003 ffa5 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800107a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800108c:	2302      	movs	r3, #2
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4856      	ldr	r0, [pc, #344]	; (80011f0 <MX_GPIO_Init+0x2e0>)
 8001098:	f003 ff94 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 800109c:	2302      	movs	r3, #2
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a0:	4b54      	ldr	r3, [pc, #336]	; (80011f4 <MX_GPIO_Init+0x2e4>)
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ac:	4619      	mov	r1, r3
 80010ae:	484c      	ldr	r0, [pc, #304]	; (80011e0 <MX_GPIO_Init+0x2d0>)
 80010b0:	f003 ff88 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 80010b4:	2301      	movs	r3, #1
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b8:	4b4e      	ldr	r3, [pc, #312]	; (80011f4 <MX_GPIO_Init+0x2e4>)
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	4849      	ldr	r0, [pc, #292]	; (80011ec <MX_GPIO_Init+0x2dc>)
 80010c8:	f003 ff7c 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 80010cc:	2320      	movs	r3, #32
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	483f      	ldr	r0, [pc, #252]	; (80011e0 <MX_GPIO_Init+0x2d0>)
 80010e4:	f003 ff6e 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 80010e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <MX_GPIO_Init+0x2e4>)
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	4619      	mov	r1, r3
 80010fc:	483c      	ldr	r0, [pc, #240]	; (80011f0 <MX_GPIO_Init+0x2e0>)
 80010fe:	f003 ff61 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001114:	2307      	movs	r3, #7
 8001116:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	4619      	mov	r1, r3
 800111e:	4831      	ldr	r0, [pc, #196]	; (80011e4 <MX_GPIO_Init+0x2d4>)
 8001120:	f003 ff50 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin PB8 */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8;
 8001124:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	2301      	movs	r3, #1
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	4829      	ldr	r0, [pc, #164]	; (80011e4 <MX_GPIO_Init+0x2d4>)
 800113e:	f003 ff41 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001142:	f248 0380 	movw	r3, #32896	; 0x8080
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_GPIO_Init+0x2e4>)
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001154:	4619      	mov	r1, r3
 8001156:	4824      	ldr	r0, [pc, #144]	; (80011e8 <MX_GPIO_Init+0x2d8>)
 8001158:	f003 ff34 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13;
 800115c:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	481c      	ldr	r0, [pc, #112]	; (80011e8 <MX_GPIO_Init+0x2d8>)
 8001176:	f003 ff25 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800117a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	4816      	ldr	r0, [pc, #88]	; (80011ec <MX_GPIO_Init+0x2dc>)
 8001194:	f003 ff16 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin;
 8001198:	2310      	movs	r3, #16
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011a8:	2306      	movs	r3, #6
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D12_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	480c      	ldr	r0, [pc, #48]	; (80011e4 <MX_GPIO_Init+0x2d4>)
 80011b4:	f003 ff06 	bl	8004fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80011b8:	2340      	movs	r3, #64	; 0x40
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_GPIO_Init+0x2e4>)
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_GPIO_Init+0x2d4>)
 80011cc:	f003 fefa 	bl	8004fc4 <HAL_GPIO_Init>

}
 80011d0:	bf00      	nop
 80011d2:	3738      	adds	r7, #56	; 0x38
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40021800 	.word	0x40021800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	10110000 	.word	0x10110000

080011f8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001210:	4b4f      	ldr	r3, [pc, #316]	; (8001350 <MX_FSMC_Init+0x158>)
 8001212:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001216:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001218:	4b4d      	ldr	r3, [pc, #308]	; (8001350 <MX_FSMC_Init+0x158>)
 800121a:	4a4e      	ldr	r2, [pc, #312]	; (8001354 <MX_FSMC_Init+0x15c>)
 800121c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800121e:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <MX_FSMC_Init+0x158>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001224:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <MX_FSMC_Init+0x158>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800122a:	4b49      	ldr	r3, [pc, #292]	; (8001350 <MX_FSMC_Init+0x158>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001230:	4b47      	ldr	r3, [pc, #284]	; (8001350 <MX_FSMC_Init+0x158>)
 8001232:	2210      	movs	r2, #16
 8001234:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001236:	4b46      	ldr	r3, [pc, #280]	; (8001350 <MX_FSMC_Init+0x158>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800123c:	4b44      	ldr	r3, [pc, #272]	; (8001350 <MX_FSMC_Init+0x158>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <MX_FSMC_Init+0x158>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001248:	4b41      	ldr	r3, [pc, #260]	; (8001350 <MX_FSMC_Init+0x158>)
 800124a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800124e:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001250:	4b3f      	ldr	r3, [pc, #252]	; (8001350 <MX_FSMC_Init+0x158>)
 8001252:	2200      	movs	r2, #0
 8001254:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <MX_FSMC_Init+0x158>)
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800125c:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <MX_FSMC_Init+0x158>)
 800125e:	2200      	movs	r2, #0
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <MX_FSMC_Init+0x158>)
 8001264:	2200      	movs	r2, #0
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <MX_FSMC_Init+0x158>)
 800126a:	2200      	movs	r2, #0
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800126e:	4b38      	ldr	r3, [pc, #224]	; (8001350 <MX_FSMC_Init+0x158>)
 8001270:	2200      	movs	r2, #0
 8001272:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001274:	4b36      	ldr	r3, [pc, #216]	; (8001350 <MX_FSMC_Init+0x158>)
 8001276:	2200      	movs	r2, #0
 8001278:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800127a:	230f      	movs	r3, #15
 800127c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800127e:	230f      	movs	r3, #15
 8001280:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001282:	23ff      	movs	r3, #255	; 0xff
 8001284:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001286:	230f      	movs	r3, #15
 8001288:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800128a:	2310      	movs	r3, #16
 800128c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800128e:	2311      	movs	r3, #17
 8001290:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	4619      	mov	r1, r3
 800129c:	482c      	ldr	r0, [pc, #176]	; (8001350 <MX_FSMC_Init+0x158>)
 800129e:	f008 f953 	bl	8009548 <HAL_SRAM_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 80012a8:	f000 fa06 	bl	80016b8 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <MX_FSMC_Init+0x160>)
 80012ae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012b2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012b4:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MX_FSMC_Init+0x160>)
 80012b6:	4a27      	ldr	r2, [pc, #156]	; (8001354 <MX_FSMC_Init+0x15c>)
 80012b8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 80012ba:	4b27      	ldr	r3, [pc, #156]	; (8001358 <MX_FSMC_Init+0x160>)
 80012bc:	2204      	movs	r2, #4
 80012be:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_FSMC_Init+0x160>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012c6:	4b24      	ldr	r3, [pc, #144]	; (8001358 <MX_FSMC_Init+0x160>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <MX_FSMC_Init+0x160>)
 80012ce:	2210      	movs	r2, #16
 80012d0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_FSMC_Init+0x160>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_FSMC_Init+0x160>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_FSMC_Init+0x160>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_FSMC_Init+0x160>)
 80012e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_FSMC_Init+0x160>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_FSMC_Init+0x160>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_FSMC_Init+0x160>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_FSMC_Init+0x160>)
 8001300:	2200      	movs	r2, #0
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_FSMC_Init+0x160>)
 8001306:	2200      	movs	r2, #0
 8001308:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_FSMC_Init+0x160>)
 800130c:	2200      	movs	r2, #0
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_FSMC_Init+0x160>)
 8001312:	2200      	movs	r2, #0
 8001314:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001316:	230f      	movs	r3, #15
 8001318:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800131a:	230f      	movs	r3, #15
 800131c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001322:	230f      	movs	r3, #15
 8001324:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800132a:	2311      	movs	r3, #17
 800132c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_FSMC_Init+0x160>)
 800133a:	f008 f905 	bl	8009548 <HAL_SRAM_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8001344:	f000 f9b8 	bl	80016b8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001348:	bf00      	nop
 800134a:	3720      	adds	r7, #32
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20004c00 	.word	0x20004c00
 8001354:	a0000104 	.word	0xa0000104
 8001358:	2000513c 	.word	0x2000513c

0800135c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
	__NOP(); //checks if we receive all data
 8001364:	bf00      	nop
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <Start_Run_Motors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Run_Motors */
void Start_Run_Motors(void *argument)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800137c:	f010 fd16 	bl	8011dac <MX_USB_HOST_Init>
  /* Infinite loop */
  //uint16_t resistorVal = 0;
  //uint16_t printVal;
  for(;;)
  {
	  BSP_LCD_DisplayStringAtLine(2, "RUN MOTORS");
 8001380:	4904      	ldr	r1, [pc, #16]	; (8001394 <Start_Run_Motors+0x20>)
 8001382:	2002      	movs	r0, #2
 8001384:	f002 f8b8 	bl	80034f8 <BSP_LCD_DisplayStringAtLine>
	  //itoa(motor1Val,buffer,10);
	  //BSP_LCD_SetTextColor(LCD_COLOR_RED);
	  //BSP_LCD_DisplayStringAtLine(1, buffer);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,motor1Val);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,motor1Val);
	  osDelay(500);
 8001388:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800138c:	f00d feb6 	bl	800f0fc <osDelay>
	  BSP_LCD_DisplayStringAtLine(2, "RUN MOTORS");
 8001390:	e7f6      	b.n	8001380 <Start_Run_Motors+0xc>
 8001392:	bf00      	nop
 8001394:	08012634 	.word	0x08012634

08001398 <Receive_Radio_Signal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receive_Radio_Signal */
void Receive_Radio_Signal(void *argument)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b09a      	sub	sp, #104	; 0x68
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Receive_Radio_Signal */
	/* Infinite loop */
	//char buffer[20];
	//itoa(motor1Val,buffer,10);
	SBUS sbus;
	sbus.arm = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sbus.disarm = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	FlagBuffer[RX_CON_FG] = 0;
 80013ac:	4b65      	ldr	r3, [pc, #404]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	705a      	strb	r2, [r3, #1]
	FlagBuffer[RX_FAILSAFE_FG] = 0;
 80013b2:	4b64      	ldr	r3, [pc, #400]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	709a      	strb	r2, [r3, #2]
	FlagBuffer[RX_ARM] = 0;
 80013b8:	4b62      	ldr	r3, [pc, #392]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	711a      	strb	r2, [r3, #4]
	int count = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	667b      	str	r3, [r7, #100]	; 0x64
	for(;;)
	{
		//BSP_LCD_ClearStringLine(3);
		BSP_LCD_DisplayStringAtLine(3, "RECEIVE RADIO");
 80013c2:	4961      	ldr	r1, [pc, #388]	; (8001548 <Receive_Radio_Signal+0x1b0>)
 80013c4:	2003      	movs	r0, #3
 80013c6:	f002 f897 	bl	80034f8 <BSP_LCD_DisplayStringAtLine>
		if (RC_READ_SBUS(&huart7 ,&sbus))
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	485e      	ldr	r0, [pc, #376]	; (800154c <Receive_Radio_Signal+0x1b4>)
 80013d2:	f002 fa1b 	bl	800380c <RC_READ_SBUS>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d053      	beq.n	8001484 <Receive_Radio_Signal+0xec>
		{
			//verifying that sbus is reading properly and we are connected(not failsafing)
			//If we enter, we are connected now.
			if(!FlagBuffer[RX_CON_FG]){
 80013dc:	4b59      	ldr	r3, [pc, #356]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 80013de:	785b      	ldrb	r3, [r3, #1]
 80013e0:	f083 0301 	eor.w	r3, r3, #1
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <Receive_Radio_Signal+0x58>
				FlagBuffer[RX_CON_FG] = 1;
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	705a      	strb	r2, [r3, #1]
			}
			if(!sbus.failsafe){
 80013f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d103      	bne.n	8001400 <Receive_Radio_Signal+0x68>
				FlagBuffer[RX_FAILSAFE_FG] = 1;
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	709a      	strb	r2, [r3, #2]
 80013fe:	e002      	b.n	8001406 <Receive_Radio_Signal+0x6e>
			}
			else{
				FlagBuffer[RX_FAILSAFE_FG] = 0;
 8001400:	4b50      	ldr	r3, [pc, #320]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 8001402:	2200      	movs	r2, #0
 8001404:	709a      	strb	r2, [r3, #2]
			}


			for(int i = 0; i < sizeof(ChannelVals); i++ ) {
 8001406:	2300      	movs	r3, #0
 8001408:	663b      	str	r3, [r7, #96]	; 0x60
 800140a:	e00d      	b.n	8001428 <Receive_Radio_Signal+0x90>
				ChannelVals[i] = sbus.PWM_US_RC_CH[i];
 800140c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001414:	4413      	add	r3, r2
 8001416:	f833 1c5c 	ldrh.w	r1, [r3, #-92]
 800141a:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <Receive_Radio_Signal+0x1b8>)
 800141c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800141e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < sizeof(ChannelVals); i++ ) {
 8001422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001424:	3301      	adds	r3, #1
 8001426:	663b      	str	r3, [r7, #96]	; 0x60
 8001428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d9ee      	bls.n	800140c <Receive_Radio_Signal+0x74>
			}

			if(MapRxToSwitch(ChannelVals[RX_ARM]) == MAP_SWITCH_HIGH)
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <Receive_Radio_Signal+0x1b8>)
 8001430:	891b      	ldrh	r3, [r3, #8]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f894 	bl	8000560 <MapRxToSwitch>
 8001438:	4603      	mov	r3, r0
 800143a:	2b02      	cmp	r3, #2
 800143c:	d103      	bne.n	8001446 <Receive_Radio_Signal+0xae>
				FlagBuffer[ARM_FG] = true;
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 8001440:	2201      	movs	r2, #1
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e002      	b.n	800144c <Receive_Radio_Signal+0xb4>
			else
				FlagBuffer[ARM_FG] = false;
 8001446:	4b3f      	ldr	r3, [pc, #252]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]

			//debug stuff
			position1Vals[count] = sbus.PWM_US_RC_CH[0];
 800144c:	89bb      	ldrh	r3, [r7, #12]
 800144e:	4619      	mov	r1, r3
 8001450:	4a40      	ldr	r2, [pc, #256]	; (8001554 <Receive_Radio_Signal+0x1bc>)
 8001452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position2Vals[count] = sbus.PWM_US_RC_CH[1];
 8001458:	89fb      	ldrh	r3, [r7, #14]
 800145a:	4619      	mov	r1, r3
 800145c:	4a3e      	ldr	r2, [pc, #248]	; (8001558 <Receive_Radio_Signal+0x1c0>)
 800145e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001460:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position3Vals[count] = sbus.PWM_US_RC_CH[2];
 8001464:	8a3b      	ldrh	r3, [r7, #16]
 8001466:	4619      	mov	r1, r3
 8001468:	4a3c      	ldr	r2, [pc, #240]	; (800155c <Receive_Radio_Signal+0x1c4>)
 800146a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800146c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			position4Vals[count] = sbus.PWM_US_RC_CH[3];
 8001470:	8a7b      	ldrh	r3, [r7, #18]
 8001472:	4619      	mov	r1, r3
 8001474:	4a3a      	ldr	r2, [pc, #232]	; (8001560 <Receive_Radio_Signal+0x1c8>)
 8001476:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001478:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			count++;
 800147c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800147e:	3301      	adds	r3, #1
 8001480:	667b      	str	r3, [r7, #100]	; 0x64
 8001482:	e006      	b.n	8001492 <Receive_Radio_Signal+0xfa>
			//end debug stuff
	  	}
		//Too many frames without connection.
		else if(sbus.error) {
 8001484:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <Receive_Radio_Signal+0xfa>
			FlagBuffer[RX_CON_FG] = 0;
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <Receive_Radio_Signal+0x1ac>)
 800148e:	2200      	movs	r2, #0
 8001490:	705a      	strb	r2, [r3, #1]
		}

		//more debug stuff
		if(count >= 50) {
 8001492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001494:	2b31      	cmp	r3, #49	; 0x31
 8001496:	dd4f      	ble.n	8001538 <Receive_Radio_Signal+0x1a0>
			count = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	667b      	str	r3, [r7, #100]	; 0x64
			int tot1 = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	65fb      	str	r3, [r7, #92]	; 0x5c
			int tot2 = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	65bb      	str	r3, [r7, #88]	; 0x58
			int tot3 = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	657b      	str	r3, [r7, #84]	; 0x54
			int tot4 = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	653b      	str	r3, [r7, #80]	; 0x50
			for(int i=0; i< 50; i++) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014b0:	e01e      	b.n	80014f0 <Receive_Radio_Signal+0x158>
				tot1 += position1Vals[i];
 80014b2:	4a28      	ldr	r2, [pc, #160]	; (8001554 <Receive_Radio_Signal+0x1bc>)
 80014b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014bc:	4413      	add	r3, r2
 80014be:	65fb      	str	r3, [r7, #92]	; 0x5c
				tot2 += position2Vals[i];
 80014c0:	4a25      	ldr	r2, [pc, #148]	; (8001558 <Receive_Radio_Signal+0x1c0>)
 80014c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80014ca:	4413      	add	r3, r2
 80014cc:	65bb      	str	r3, [r7, #88]	; 0x58
				tot3 += position3Vals[i];
 80014ce:	4a23      	ldr	r2, [pc, #140]	; (800155c <Receive_Radio_Signal+0x1c4>)
 80014d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80014d8:	4413      	add	r3, r2
 80014da:	657b      	str	r3, [r7, #84]	; 0x54
				tot4 += position4Vals[i];
 80014dc:	4a20      	ldr	r2, [pc, #128]	; (8001560 <Receive_Radio_Signal+0x1c8>)
 80014de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014e6:	4413      	add	r3, r2
 80014e8:	653b      	str	r3, [r7, #80]	; 0x50
			for(int i=0; i< 50; i++) {
 80014ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014ec:	3301      	adds	r3, #1
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f2:	2b31      	cmp	r3, #49	; 0x31
 80014f4:	dddd      	ble.n	80014b2 <Receive_Radio_Signal+0x11a>
			}
			tot1 = tot1 / 50;
 80014f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014f8:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <Receive_Radio_Signal+0x1cc>)
 80014fa:	fb82 1203 	smull	r1, r2, r2, r3
 80014fe:	1112      	asrs	r2, r2, #4
 8001500:	17db      	asrs	r3, r3, #31
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	65fb      	str	r3, [r7, #92]	; 0x5c
			tot2 = tot2 / 50;
 8001506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001508:	4a16      	ldr	r2, [pc, #88]	; (8001564 <Receive_Radio_Signal+0x1cc>)
 800150a:	fb82 1203 	smull	r1, r2, r2, r3
 800150e:	1112      	asrs	r2, r2, #4
 8001510:	17db      	asrs	r3, r3, #31
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	65bb      	str	r3, [r7, #88]	; 0x58
			tot3 = tot3 / 50;
 8001516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <Receive_Radio_Signal+0x1cc>)
 800151a:	fb82 1203 	smull	r1, r2, r2, r3
 800151e:	1112      	asrs	r2, r2, #4
 8001520:	17db      	asrs	r3, r3, #31
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	657b      	str	r3, [r7, #84]	; 0x54
			tot4 = tot4 / 50;
 8001526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <Receive_Radio_Signal+0x1cc>)
 800152a:	fb82 1203 	smull	r1, r2, r2, r3
 800152e:	1112      	asrs	r2, r2, #4
 8001530:	17db      	asrs	r3, r3, #31
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	653b      	str	r3, [r7, #80]	; 0x50
			__NOP();
 8001536:	bf00      	nop
		}
		//end more debug stuff
		osDelay(500);
 8001538:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800153c:	f00d fdde 	bl	800f0fc <osDelay>
		BSP_LCD_DisplayStringAtLine(3, "RECEIVE RADIO");
 8001540:	e73f      	b.n	80013c2 <Receive_Radio_Signal+0x2a>
 8001542:	bf00      	nop
 8001544:	20000138 	.word	0x20000138
 8001548:	08012640 	.word	0x08012640
 800154c:	20004ae4 	.word	0x20004ae4
 8001550:	20000000 	.word	0x20000000
 8001554:	20004d04 	.word	0x20004d04
 8001558:	20004f3c 	.word	0x20004f3c
 800155c:	20004e74 	.word	0x20004e74
 8001560:	20005004 	.word	0x20005004
 8001564:	51eb851f 	.word	0x51eb851f

08001568 <Start_Rx_Mapping>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Rx_Mapping */
void Start_Rx_Mapping(void *argument)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Rx_Mapping */
	/* Infinite loop */
	for(;;)
	{
		BSP_LCD_ClearStringLine(4);
 8001570:	2004      	movs	r0, #4
 8001572:	f001 fed7 	bl	8003324 <BSP_LCD_ClearStringLine>
		BSP_LCD_DisplayStringAtLine(4, "RX MAPPING");
 8001576:	492b      	ldr	r1, [pc, #172]	; (8001624 <Start_Rx_Mapping+0xbc>)
 8001578:	2004      	movs	r0, #4
 800157a:	f001 ffbd 	bl	80034f8 <BSP_LCD_DisplayStringAtLine>
		if(CheckFlags())
 800157e:	f7fe ffcf 	bl	8000520 <CheckFlags>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d02d      	beq.n	80015e4 <Start_Rx_Mapping+0x7c>
		{
			for(int i = 0; i < 8; i++ ) {
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e026      	b.n	80015dc <Start_Rx_Mapping+0x74>
				if(i < 4) //First 4 channels are sticks, all others are switches
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b03      	cmp	r3, #3
 8001592:	dc0f      	bgt.n	80015b4 <Start_Rx_Mapping+0x4c>
					MappedVals[i] = MapRxToPercent(ChannelVals[i]);
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <Start_Rx_Mapping+0xc0>)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fff9 	bl	8000594 <MapRxToPercent>
 80015a2:	eef0 7a40 	vmov.f32	s15, s0
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <Start_Rx_Mapping+0xc4>)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	edc3 7a00 	vstr	s15, [r3]
 80015b2:	e010      	b.n	80015d6 <Start_Rx_Mapping+0x6e>
				else
					MappedVals[i] = MapRxToSwitch(ChannelVals[i]);
 80015b4:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <Start_Rx_Mapping+0xc0>)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffcf 	bl	8000560 <MapRxToSwitch>
 80015c2:	ee07 0a90 	vmov	s15, r0
 80015c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <Start_Rx_Mapping+0xc4>)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 0; i < 8; i++ ) {
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	ddd5      	ble.n	800158e <Start_Rx_Mapping+0x26>
 80015e2:	e01a      	b.n	800161a <Start_Rx_Mapping+0xb2>
			}
		}
		else //Flags are not good, set values to safe values
		{
			for(int i = 0; i < 8; i++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	e014      	b.n	8001614 <Start_Rx_Mapping+0xac>
			{
				if(i < 4) //First 4 channels are sticks, all others are switches
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	dc07      	bgt.n	8001600 <Start_Rx_Mapping+0x98>
					MappedVals[i] = MAP_MID;
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <Start_Rx_Mapping+0xc4>)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e006      	b.n	800160e <Start_Rx_Mapping+0xa6>
				else
					MappedVals[i] = MAP_SWITCH_LOW;
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <Start_Rx_Mapping+0xc4>)
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	3301      	adds	r3, #1
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b07      	cmp	r3, #7
 8001618:	dde7      	ble.n	80015ea <Start_Rx_Mapping+0x82>
			}
		}
		//TODO:CALL MAP_TO_MOTOR WHEN VALUES CHANGE*/
		osDelay(500);
 800161a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800161e:	f00d fd6d 	bl	800f0fc <osDelay>
		BSP_LCD_ClearStringLine(4);
 8001622:	e7a5      	b.n	8001570 <Start_Rx_Mapping+0x8>
 8001624:	08012650 	.word	0x08012650
 8001628:	20000000 	.word	0x20000000
 800162c:	20000118 	.word	0x20000118

08001630 <Start_Battery_Monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Battery_Monitor */
void Start_Battery_Monitor(void *argument)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Battery_Monitor */
	/* Infinite loop */
	for(;;)
	{
		BSP_LCD_DisplayStringAtLine(5, "BATTERY");
 8001638:	4904      	ldr	r1, [pc, #16]	; (800164c <Start_Battery_Monitor+0x1c>)
 800163a:	2005      	movs	r0, #5
 800163c:	f001 ff5c 	bl	80034f8 <BSP_LCD_DisplayStringAtLine>
		//__NOP();
		osDelay(500);
 8001640:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001644:	f00d fd5a 	bl	800f0fc <osDelay>
		BSP_LCD_DisplayStringAtLine(5, "BATTERY");
 8001648:	e7f6      	b.n	8001638 <Start_Battery_Monitor+0x8>
 800164a:	bf00      	nop
 800164c:	0801265c 	.word	0x0801265c

08001650 <Start_Data_To_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_To_LCD */
void Start_Data_To_LCD(void *argument)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	  //itoa(motor1Val,buffer,10);
	  //BSP_LCD_SetTextColor(LCD_COLOR_RED);
	  //BSP_LCD_DisplayStringAtLine(1, buffer);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,motor1Val);
	  //__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,motor1Val);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001658:	2000      	movs	r0, #0
 800165a:	f001 fdf1 	bl	8003240 <BSP_LCD_SetTextColor>
	for(;;)
	{
		BSP_LCD_DisplayStringAtLine(6, "LCD");
 800165e:	4904      	ldr	r1, [pc, #16]	; (8001670 <Start_Data_To_LCD+0x20>)
 8001660:	2006      	movs	r0, #6
 8001662:	f001 ff49 	bl	80034f8 <BSP_LCD_DisplayStringAtLine>
		BSP_LCD_DisplayStringAtLine(3, ChanBuffer);

		BSP_LCD_ClearStringLine(5);
		//sprintf(ChanBuffer, "MotorVals: 1:%04d, 2:%04d, 3:%04d, 4:%04d", MotorVals[0], MotorVals[1], MotorVals[2], MotorVals[3]);
		BSP_LCD_DisplayStringAtLine(5, ChanBuffer);*/
		osDelay(500);
 8001666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166a:	f00d fd47 	bl	800f0fc <osDelay>
		BSP_LCD_DisplayStringAtLine(6, "LCD");
 800166e:	e7f6      	b.n	800165e <Start_Data_To_LCD+0xe>
 8001670:	08012664 	.word	0x08012664

08001674 <Start_Map_To_Motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Map_To_Motors */
void Start_Map_To_Motors(void *argument)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Map_To_Motors */
	/* Infinite loop */
	for(;;)
	{
		BSP_LCD_DisplayStringAtLine(7, "MAP MOTORS");
 800167c:	4904      	ldr	r1, [pc, #16]	; (8001690 <Start_Map_To_Motors+0x1c>)
 800167e:	2007      	movs	r0, #7
 8001680:	f001 ff3a 	bl	80034f8 <BSP_LCD_DisplayStringAtLine>
/*		for(int i = 0; i < sizeof(MotorVals); i++)
		{
			MotorVals[i] = MapPercentToMotor(MappedVals[i]);
		}*/
		osDelay(500);
 8001684:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001688:	f00d fd38 	bl	800f0fc <osDelay>
		BSP_LCD_DisplayStringAtLine(7, "MAP MOTORS");
 800168c:	e7f6      	b.n	800167c <Start_Map_To_Motors+0x8>
 800168e:	bf00      	nop
 8001690:	08012668 	.word	0x08012668

08001694 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016a6:	f002 fa6b 	bl	8003b80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40001000 	.word	0x40001000

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_MspInit+0x4c>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a0f      	ldr	r2, [pc, #60]	; (8001714 <HAL_MspInit+0x4c>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_MspInit+0x4c>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x4c>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6413      	str	r3, [r2, #64]	; 0x40
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	; 0x30
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a31      	ldr	r2, [pc, #196]	; (80017fc <HAL_ADC_MspInit+0xe4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d15b      	bne.n	80017f2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	4b30      	ldr	r3, [pc, #192]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a2f      	ldr	r2, [pc, #188]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	4b29      	ldr	r3, [pc, #164]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a28      	ldr	r2, [pc, #160]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a21      	ldr	r2, [pc, #132]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 80017aa:	2311      	movs	r3, #17
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ae:	2303      	movs	r3, #3
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4619      	mov	r1, r3
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <HAL_ADC_MspInit+0xec>)
 80017be:	f003 fc01 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80017c2:	2326      	movs	r3, #38	; 0x26
 80017c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c6:	2303      	movs	r3, #3
 80017c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <HAL_ADC_MspInit+0xf0>)
 80017d6:	f003 fbf5 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017da:	2302      	movs	r3, #2
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017de:	2303      	movs	r3, #3
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	; (800180c <HAL_ADC_MspInit+0xf4>)
 80017ee:	f003 fbe9 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3730      	adds	r7, #48	; 0x30
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012000 	.word	0x40012000
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800
 8001808:	40020000 	.word	0x40020000
 800180c:	40020400 	.word	0x40020400

08001810 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <HAL_DAC_MspInit+0x8c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12f      	bne.n	8001892 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <HAL_DAC_MspInit+0x90>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <HAL_DAC_MspInit+0x90>)
 800183c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <HAL_DAC_MspInit+0x90>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <HAL_DAC_MspInit+0x90>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <HAL_DAC_MspInit+0x90>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <HAL_DAC_MspInit+0x90>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800186a:	2310      	movs	r3, #16
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186e:	2303      	movs	r3, #3
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <HAL_DAC_MspInit+0x94>)
 800187e:	f003 fba1 	bl	8004fc4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2036      	movs	r0, #54	; 0x36
 8001888:	f002 fce6 	bl	8004258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800188c:	2036      	movs	r0, #54	; 0x36
 800188e:	f002 fcff 	bl	8004290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	; 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40007400 	.word	0x40007400
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40020000 	.word	0x40020000

080018a8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a77      	ldr	r2, [pc, #476]	; (8001aa4 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00e      	beq.n	80018e8 <HAL_DFSDM_ChannelMspInit+0x40>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a76      	ldr	r2, [pc, #472]	; (8001aa8 <HAL_DFSDM_ChannelMspInit+0x200>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d009      	beq.n	80018e8 <HAL_DFSDM_ChannelMspInit+0x40>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a74      	ldr	r2, [pc, #464]	; (8001aac <HAL_DFSDM_ChannelMspInit+0x204>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d004      	beq.n	80018e8 <HAL_DFSDM_ChannelMspInit+0x40>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a73      	ldr	r2, [pc, #460]	; (8001ab0 <HAL_DFSDM_ChannelMspInit+0x208>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d154      	bne.n	8001992 <HAL_DFSDM_ChannelMspInit+0xea>
 80018e8:	4b72      	ldr	r3, [pc, #456]	; (8001ab4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d150      	bne.n	8001992 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	4b70      	ldr	r3, [pc, #448]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	4a6f      	ldr	r2, [pc, #444]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80018fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001900:	4b6d      	ldr	r3, [pc, #436]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001908:	623b      	str	r3, [r7, #32]
 800190a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	4a68      	ldr	r2, [pc, #416]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6313      	str	r3, [r2, #48]	; 0x30
 800191c:	4b66      	ldr	r3, [pc, #408]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	4b62      	ldr	r3, [pc, #392]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4a61      	ldr	r2, [pc, #388]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001932:	f043 0308 	orr.w	r3, r3, #8
 8001936:	6313      	str	r3, [r2, #48]	; 0x30
 8001938:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001956:	2306      	movs	r3, #6
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	4856      	ldr	r0, [pc, #344]	; (8001abc <HAL_DFSDM_ChannelMspInit+0x214>)
 8001962:	f003 fb2f 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001966:	2340      	movs	r3, #64	; 0x40
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001976:	2306      	movs	r3, #6
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	4619      	mov	r1, r3
 8001980:	484f      	ldr	r0, [pc, #316]	; (8001ac0 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001982:	f003 fb1f 	bl	8004fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001986:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800198e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001990:	e084      	b.n	8001a9c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a43      	ldr	r2, [pc, #268]	; (8001aa4 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d07f      	beq.n	8001a9c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a41      	ldr	r2, [pc, #260]	; (8001aa8 <HAL_DFSDM_ChannelMspInit+0x200>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d07a      	beq.n	8001a9c <HAL_DFSDM_ChannelMspInit+0x1f4>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a40      	ldr	r2, [pc, #256]	; (8001aac <HAL_DFSDM_ChannelMspInit+0x204>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d075      	beq.n	8001a9c <HAL_DFSDM_ChannelMspInit+0x1f4>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3e      	ldr	r2, [pc, #248]	; (8001ab0 <HAL_DFSDM_ChannelMspInit+0x208>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d070      	beq.n	8001a9c <HAL_DFSDM_ChannelMspInit+0x1f4>
 80019ba:	4b42      	ldr	r3, [pc, #264]	; (8001ac4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d16c      	bne.n	8001a9c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a3b      	ldr	r2, [pc, #236]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a34      	ldr	r2, [pc, #208]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a26      	ldr	r2, [pc, #152]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001a42:	2307      	movs	r3, #7
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	481b      	ldr	r0, [pc, #108]	; (8001abc <HAL_DFSDM_ChannelMspInit+0x214>)
 8001a4e:	f003 fab9 	bl	8004fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001a52:	2304      	movs	r3, #4
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001a62:	2303      	movs	r3, #3
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4814      	ldr	r0, [pc, #80]	; (8001ac0 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001a6e:	f003 faa9 	bl	8004fc4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001a82:	2306      	movs	r3, #6
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480e      	ldr	r0, [pc, #56]	; (8001ac8 <HAL_DFSDM_ChannelMspInit+0x220>)
 8001a8e:	f003 fa99 	bl	8004fc4 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	3738      	adds	r7, #56	; 0x38
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40016000 	.word	0x40016000
 8001aa8:	40016020 	.word	0x40016020
 8001aac:	40016040 	.word	0x40016040
 8001ab0:	40016060 	.word	0x40016060
 8001ab4:	20000140 	.word	0x20000140
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	20000144 	.word	0x20000144
 8001ac8:	40020400 	.word	0x40020400

08001acc <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_FMPI2C_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12b      	bne.n	8001b46 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_FMPI2C_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_FMPI2C_MspInit+0x88>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_FMPI2C_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001b0a:	23c0      	movs	r3, #192	; 0xc0
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0e:	2312      	movs	r3, #18
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b12:	2301      	movs	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <HAL_FMPI2C_MspInit+0x8c>)
 8001b26:	f003 fa4d 	bl	8004fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_FMPI2C_MspInit+0x88>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_FMPI2C_MspInit+0x88>)
 8001b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_FMPI2C_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40006000 	.word	0x40006000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020800 	.word	0x40020800

08001b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_I2C_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12c      	bne.n	8001bd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a17      	ldr	r2, [pc, #92]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001b9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba0:	2312      	movs	r3, #18
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bac:	2304      	movs	r3, #4
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480c      	ldr	r0, [pc, #48]	; (8001be8 <HAL_I2C_MspInit+0x8c>)
 8001bb8:	f003 fa04 	bl	8004fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a07      	ldr	r2, [pc, #28]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001bc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_I2C_MspInit+0x88>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40005800 	.word	0x40005800
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020400 	.word	0x40020400

08001bec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	; 0x30
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_I2S_MspInit+0x15c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	f040 8097 	bne.w	8001d3e <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	4b4d      	ldr	r3, [pc, #308]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	4a4c      	ldr	r2, [pc, #304]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c20:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a45      	ldr	r2, [pc, #276]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	4a3e      	ldr	r2, [pc, #248]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6313      	str	r3, [r2, #48]	; 0x30
 8001c58:	4b3c      	ldr	r3, [pc, #240]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	4b38      	ldr	r3, [pc, #224]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6c:	4a37      	ldr	r2, [pc, #220]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6313      	str	r3, [r2, #48]	; 0x30
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4a30      	ldr	r2, [pc, #192]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c90:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <HAL_I2S_MspInit+0x160>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001cac:	2306      	movs	r3, #6
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8001cb0:	f107 031c 	add.w	r3, r7, #28
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4826      	ldr	r0, [pc, #152]	; (8001d50 <HAL_I2S_MspInit+0x164>)
 8001cb8:	f003 f984 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ccc:	2305      	movs	r3, #5
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	481e      	ldr	r0, [pc, #120]	; (8001d50 <HAL_I2S_MspInit+0x164>)
 8001cd8:	f003 f974 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cec:	2305      	movs	r3, #5
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4817      	ldr	r0, [pc, #92]	; (8001d54 <HAL_I2S_MspInit+0x168>)
 8001cf8:	f003 f964 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d0c:	2305      	movs	r3, #5
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	4810      	ldr	r0, [pc, #64]	; (8001d58 <HAL_I2S_MspInit+0x16c>)
 8001d18:	f003 f954 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4808      	ldr	r0, [pc, #32]	; (8001d5c <HAL_I2S_MspInit+0x170>)
 8001d3a:	f003 f943 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	; 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40003800 	.word	0x40003800
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40020400 	.word	0x40020400

08001d60 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08e      	sub	sp, #56	; 0x38
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a56      	ldr	r2, [pc, #344]	; (8001ed8 <HAL_QSPI_MspInit+0x178>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	f040 80a6 	bne.w	8001ed0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	4b54      	ldr	r3, [pc, #336]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	4a53      	ldr	r2, [pc, #332]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001d8e:	f043 0302 	orr.w	r3, r3, #2
 8001d92:	6393      	str	r3, [r2, #56]	; 0x38
 8001d94:	4b51      	ldr	r3, [pc, #324]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	623b      	str	r3, [r7, #32]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	4b4d      	ldr	r3, [pc, #308]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	4a4c      	ldr	r2, [pc, #304]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001daa:	f043 0310 	orr.w	r3, r3, #16
 8001dae:	6313      	str	r3, [r2, #48]	; 0x30
 8001db0:	4b4a      	ldr	r3, [pc, #296]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	f003 0310 	and.w	r3, r3, #16
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	4b46      	ldr	r3, [pc, #280]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc4:	4a45      	ldr	r2, [pc, #276]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001dc6:	f043 0320 	orr.w	r3, r3, #32
 8001dca:	6313      	str	r3, [r2, #48]	; 0x30
 8001dcc:	4b43      	ldr	r3, [pc, #268]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	f003 0320 	and.w	r3, r3, #32
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a3e      	ldr	r2, [pc, #248]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b3c      	ldr	r3, [pc, #240]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	4b38      	ldr	r3, [pc, #224]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a37      	ldr	r2, [pc, #220]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001dfe:	f043 0308 	orr.w	r3, r3, #8
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b35      	ldr	r3, [pc, #212]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	4a30      	ldr	r2, [pc, #192]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <HAL_QSPI_MspInit+0x17c>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001e2c:	2304      	movs	r3, #4
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001e3c:	2309      	movs	r3, #9
 8001e3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4826      	ldr	r0, [pc, #152]	; (8001ee0 <HAL_QSPI_MspInit+0x180>)
 8001e48:	f003 f8bc 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e5e:	230a      	movs	r3, #10
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	4619      	mov	r1, r3
 8001e68:	481e      	ldr	r0, [pc, #120]	; (8001ee4 <HAL_QSPI_MspInit+0x184>)
 8001e6a:	f003 f8ab 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001e6e:	2304      	movs	r3, #4
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001e7e:	2309      	movs	r3, #9
 8001e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	4817      	ldr	r0, [pc, #92]	; (8001ee8 <HAL_QSPI_MspInit+0x188>)
 8001e8a:	f003 f89b 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e94:	2302      	movs	r3, #2
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001ea0:	2309      	movs	r3, #9
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4810      	ldr	r0, [pc, #64]	; (8001eec <HAL_QSPI_MspInit+0x18c>)
 8001eac:	f003 f88a 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001eb0:	2340      	movs	r3, #64	; 0x40
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4809      	ldr	r0, [pc, #36]	; (8001ef0 <HAL_QSPI_MspInit+0x190>)
 8001ecc:	f003 f87a 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3738      	adds	r7, #56	; 0x38
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	a0001000 	.word	0xa0001000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40021400 	.word	0x40021400
 8001ee8:	40020400 	.word	0x40020400
 8001eec:	40020c00 	.word	0x40020c00
 8001ef0:	40021800 	.word	0x40021800

08001ef4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <HAL_SD_MspInit+0xc0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d14a      	bne.n	8001fac <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_SD_MspInit+0xc4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001f6a:	2340      	movs	r3, #64	; 0x40
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f7a:	230c      	movs	r3, #12
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <HAL_SD_MspInit+0xc8>)
 8001f86:	f003 f81d 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001f8a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f8e:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f9c:	230c      	movs	r3, #12
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4806      	ldr	r0, [pc, #24]	; (8001fc0 <HAL_SD_MspInit+0xcc>)
 8001fa8:	f003 f80c 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40012c00 	.word	0x40012c00
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020800 	.word	0x40020800

08001fc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <HAL_TIM_Base_MspInit+0x3c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d10d      	bne.n	8001ff2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_TIM_Base_MspInit+0x40>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a09      	ldr	r2, [pc, #36]	; (8002004 <HAL_TIM_Base_MspInit+0x40>)
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <HAL_TIM_Base_MspInit+0x40>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40000400 	.word	0x40000400
 8002004:	40023800 	.word	0x40023800

08002008 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_TIM_MspPostInit+0x68>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d11d      	bne.n	8002066 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_TIM_MspPostInit+0x6c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_TIM_MspPostInit+0x6c>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_TIM_MspPostInit+0x6c>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8002046:	2321      	movs	r3, #33	; 0x21
 8002048:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002056:	2302      	movs	r3, #2
 8002058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	; (8002078 <HAL_TIM_MspPostInit+0x70>)
 8002062:	f002 ffaf 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002066:	bf00      	nop
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40000400 	.word	0x40000400
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400

0800207c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	; 0x38
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a67      	ldr	r2, [pc, #412]	; (8002238 <HAL_UART_MspInit+0x1bc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d163      	bne.n	8002166 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
 80020a2:	4b66      	ldr	r3, [pc, #408]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a65      	ldr	r2, [pc, #404]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80020a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b63      	ldr	r3, [pc, #396]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020b6:	623b      	str	r3, [r7, #32]
 80020b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	4b5f      	ldr	r3, [pc, #380]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a5e      	ldr	r2, [pc, #376]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b5c      	ldr	r3, [pc, #368]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d6:	23c0      	movs	r3, #192	; 0xc0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020de:	2301      	movs	r3, #1
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80020e6:	2308      	movs	r3, #8
 80020e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	4853      	ldr	r0, [pc, #332]	; (8002240 <HAL_UART_MspInit+0x1c4>)
 80020f2:	f002 ff67 	bl	8004fc4 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 80020f6:	4b53      	ldr	r3, [pc, #332]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 80020f8:	4a53      	ldr	r2, [pc, #332]	; (8002248 <HAL_UART_MspInit+0x1cc>)
 80020fa:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 80020fc:	4b51      	ldr	r3, [pc, #324]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 80020fe:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002102:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002104:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800210a:	4b4e      	ldr	r3, [pc, #312]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002110:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 8002112:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002116:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002118:	4b4a      	ldr	r3, [pc, #296]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800211e:	4b49      	ldr	r3, [pc, #292]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8002124:	4b47      	ldr	r3, [pc, #284]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800212a:	4b46      	ldr	r3, [pc, #280]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 800212c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002130:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002132:	4b44      	ldr	r3, [pc, #272]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 8002134:	2200      	movs	r2, #0
 8002136:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002138:	4842      	ldr	r0, [pc, #264]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 800213a:	f002 fad9 	bl	80046f0 <HAL_DMA_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002144:	f7ff fab8 	bl	80016b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
 800214e:	4a3d      	ldr	r2, [pc, #244]	; (8002244 <HAL_UART_MspInit+0x1c8>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	2052      	movs	r0, #82	; 0x52
 800215a:	f002 f87d 	bl	8004258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800215e:	2052      	movs	r0, #82	; 0x52
 8002160:	f002 f896 	bl	8004290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002164:	e064      	b.n	8002230 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==UART10)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a38      	ldr	r2, [pc, #224]	; (800224c <HAL_UART_MspInit+0x1d0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d12d      	bne.n	80021cc <HAL_UART_MspInit+0x150>
    __HAL_RCC_UART10_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
 8002174:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_UART_MspInit+0x1c0>)
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	4a30      	ldr	r2, [pc, #192]	; (800223c <HAL_UART_MspInit+0x1c0>)
 800217a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800217e:	6453      	str	r3, [r2, #68]	; 0x44
 8002180:	4b2e      	ldr	r3, [pc, #184]	; (800223c <HAL_UART_MspInit+0x1c0>)
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	61bb      	str	r3, [r7, #24]
 800218a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_UART_MspInit+0x1c0>)
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <HAL_UART_MspInit+0x1c0>)
 8002196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800219a:	6313      	str	r3, [r2, #48]	; 0x30
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <HAL_UART_MspInit+0x1c0>)
 800219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 80021a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ae:	2302      	movs	r3, #2
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 80021ba:	230b      	movs	r3, #11
 80021bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c2:	4619      	mov	r1, r3
 80021c4:	4822      	ldr	r0, [pc, #136]	; (8002250 <HAL_UART_MspInit+0x1d4>)
 80021c6:	f002 fefd 	bl	8004fc4 <HAL_GPIO_Init>
}
 80021ca:	e031      	b.n	8002230 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_UART_MspInit+0x1d8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d12c      	bne.n	8002230 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80021e0:	f043 0320 	orr.w	r3, r3, #32
 80021e4:	6453      	str	r3, [r2, #68]	; 0x44
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a10      	ldr	r2, [pc, #64]	; (800223c <HAL_UART_MspInit+0x1c0>)
 80021fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <HAL_UART_MspInit+0x1c0>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800220e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002220:	2308      	movs	r3, #8
 8002222:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	4619      	mov	r1, r3
 800222a:	4809      	ldr	r0, [pc, #36]	; (8002250 <HAL_UART_MspInit+0x1d4>)
 800222c:	f002 feca 	bl	8004fc4 <HAL_GPIO_Init>
}
 8002230:	bf00      	nop
 8002232:	3738      	adds	r7, #56	; 0x38
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40007800 	.word	0x40007800
 800223c:	40023800 	.word	0x40023800
 8002240:	40021400 	.word	0x40021400
 8002244:	20004e14 	.word	0x20004e14
 8002248:	40026058 	.word	0x40026058
 800224c:	40011c00 	.word	0x40011c00
 8002250:	40021800 	.word	0x40021800
 8002254:	40011400 	.word	0x40011400

08002258 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
 800226a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_FSMC_MspInit+0xc8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d151      	bne.n	8002318 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <HAL_FSMC_MspInit+0xc8>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_FSMC_MspInit+0xcc>)
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	4a28      	ldr	r2, [pc, #160]	; (8002324 <HAL_FSMC_MspInit+0xcc>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6393      	str	r3, [r2, #56]	; 0x38
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <HAL_FSMC_MspInit+0xcc>)
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8002296:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800229a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229c:	2302      	movs	r3, #2
 800229e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a4:	2303      	movs	r3, #3
 80022a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80022a8:	230c      	movs	r3, #12
 80022aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	4619      	mov	r1, r3
 80022b0:	481d      	ldr	r0, [pc, #116]	; (8002328 <HAL_FSMC_MspInit+0xd0>)
 80022b2:	f002 fe87 	bl	8004fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 80022b6:	f240 433f 	movw	r3, #1087	; 0x43f
 80022ba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80022c8:	230c      	movs	r3, #12
 80022ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022cc:	1d3b      	adds	r3, r7, #4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4816      	ldr	r0, [pc, #88]	; (800232c <HAL_FSMC_MspInit+0xd4>)
 80022d2:	f002 fe77 	bl	8004fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 80022d6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80022da:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80022e8:	230c      	movs	r3, #12
 80022ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	4619      	mov	r1, r3
 80022f0:	480f      	ldr	r0, [pc, #60]	; (8002330 <HAL_FSMC_MspInit+0xd8>)
 80022f2:	f002 fe67 	bl	8004fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 80022f6:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 80022fa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002308:	230c      	movs	r3, #12
 800230a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	4619      	mov	r1, r3
 8002310:	4808      	ldr	r0, [pc, #32]	; (8002334 <HAL_FSMC_MspInit+0xdc>)
 8002312:	f002 fe57 	bl	8004fc4 <HAL_GPIO_Init>
 8002316:	e000      	b.n	800231a <HAL_FSMC_MspInit+0xc2>
    return;
 8002318:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000148 	.word	0x20000148
 8002324:	40023800 	.word	0x40023800
 8002328:	40021400 	.word	0x40021400
 800232c:	40021800 	.word	0x40021800
 8002330:	40021000 	.word	0x40021000
 8002334:	40020c00 	.word	0x40020c00

08002338 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002340:	f7ff ff8a 	bl	8002258 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800235c:	2200      	movs	r2, #0
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	2036      	movs	r0, #54	; 0x36
 8002362:	f001 ff79 	bl	8004258 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002366:	2036      	movs	r0, #54	; 0x36
 8002368:	f001 ff92 	bl	8004290 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_InitTick+0xa0>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4a1d      	ldr	r2, [pc, #116]	; (80023ec <HAL_InitTick+0xa0>)
 8002376:	f043 0310 	orr.w	r3, r3, #16
 800237a:	6413      	str	r3, [r2, #64]	; 0x40
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_InitTick+0xa0>)
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002388:	f107 0210 	add.w	r2, r7, #16
 800238c:	f107 0314 	add.w	r3, r7, #20
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f005 fd1c 	bl	8007dd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002398:	f005 fcf2 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 800239c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	4a13      	ldr	r2, [pc, #76]	; (80023f0 <HAL_InitTick+0xa4>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0c9b      	lsrs	r3, r3, #18
 80023a8:	3b01      	subs	r3, #1
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <HAL_InitTick+0xa8>)
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_InitTick+0xac>)
 80023b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_InitTick+0xa8>)
 80023b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023ba:	4a0e      	ldr	r2, [pc, #56]	; (80023f4 <HAL_InitTick+0xa8>)
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <HAL_InitTick+0xa8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_InitTick+0xa8>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80023cc:	4809      	ldr	r0, [pc, #36]	; (80023f4 <HAL_InitTick+0xa8>)
 80023ce:	f007 f8ff 	bl	80095d0 <HAL_TIM_Base_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80023d8:	4806      	ldr	r0, [pc, #24]	; (80023f4 <HAL_InitTick+0xa8>)
 80023da:	f007 f924 	bl	8009626 <HAL_TIM_Base_Start_IT>
 80023de:	4603      	mov	r3, r0
 80023e0:	e000      	b.n	80023e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3730      	adds	r7, #48	; 0x30
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	431bde83 	.word	0x431bde83
 80023f4:	200052e4 	.word	0x200052e4
 80023f8:	40001000 	.word	0x40001000

080023fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800240a:	b480      	push	{r7}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800240e:	e7fe      	b.n	800240e <HardFault_Handler+0x4>

08002410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002414:	e7fe      	b.n	8002414 <MemManage_Handler+0x4>

08002416 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800241a:	e7fe      	b.n	800241a <BusFault_Handler+0x4>

0800241c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002420:	e7fe      	b.n	8002420 <UsageFault_Handler+0x4>

08002422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <DMA1_Stream3_IRQHandler+0x10>)
 8002436:	f002 fa83 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20004e14 	.word	0x20004e14

08002444 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002448:	4803      	ldr	r0, [pc, #12]	; (8002458 <TIM6_DAC_IRQHandler+0x14>)
 800244a:	f001 ff51 	bl	80042f0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800244e:	4803      	ldr	r0, [pc, #12]	; (800245c <TIM6_DAC_IRQHandler+0x18>)
 8002450:	f007 f980 	bl	8009754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002454:	bf00      	nop
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200050cc 	.word	0x200050cc
 800245c:	200052e4 	.word	0x200052e4

08002460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <OTG_FS_IRQHandler+0x10>)
 8002466:	f003 f9e7 	bl	8005838 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2000577c 	.word	0x2000577c

08002474 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <UART7_IRQHandler+0x10>)
 800247a:	f008 f887 	bl	800a58c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20004ae4 	.word	0x20004ae4

08002488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002490:	4a14      	ldr	r2, [pc, #80]	; (80024e4 <_sbrk+0x5c>)
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <_sbrk+0x60>)
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <_sbrk+0x64>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <_sbrk+0x64>)
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <_sbrk+0x68>)
 80024a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <_sbrk+0x64>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d207      	bcs.n	80024c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024b8:	f00f ff7a 	bl	80123b0 <__errno>
 80024bc:	4602      	mov	r2, r0
 80024be:	230c      	movs	r3, #12
 80024c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80024c2:	f04f 33ff 	mov.w	r3, #4294967295
 80024c6:	e009      	b.n	80024dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <_sbrk+0x64>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ce:	4b07      	ldr	r3, [pc, #28]	; (80024ec <_sbrk+0x64>)
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	4a05      	ldr	r2, [pc, #20]	; (80024ec <_sbrk+0x64>)
 80024d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024da:	68fb      	ldr	r3, [r7, #12]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20050000 	.word	0x20050000
 80024e8:	00000400 	.word	0x00000400
 80024ec:	2000014c 	.word	0x2000014c
 80024f0:	20005a48 	.word	0x20005a48

080024f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <SystemInit+0x28>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <SystemInit+0x28>)
 8002500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <SystemInit+0x28>)
 800250a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800250e:	609a      	str	r2, [r3, #8]
#endif
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002558 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002524:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002526:	e003      	b.n	8002530 <LoopCopyDataInit>

08002528 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800252a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800252c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800252e:	3104      	adds	r1, #4

08002530 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002530:	480b      	ldr	r0, [pc, #44]	; (8002560 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002534:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002536:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002538:	d3f6      	bcc.n	8002528 <CopyDataInit>
  ldr  r2, =_sbss
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800253c:	e002      	b.n	8002544 <LoopFillZerobss>

0800253e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800253e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002540:	f842 3b04 	str.w	r3, [r2], #4

08002544 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002546:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002548:	d3f9      	bcc.n	800253e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800254a:	f7ff ffd3 	bl	80024f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800254e:	f00f ff35 	bl	80123bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002552:	f7fe f867 	bl	8000624 <main>
  bx  lr    
 8002556:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002558:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800255c:	080152b0 	.word	0x080152b0
  ldr  r0, =_sdata
 8002560:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002564:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8002568:	200000fc 	.word	0x200000fc
  ldr  r3, = _ebss
 800256c:	20005a44 	.word	0x20005a44

08002570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002570:	e7fe      	b.n	8002570 <ADC_IRQHandler>

08002572 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b084      	sub	sp, #16
 8002576:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002578:	f000 fd6e 	bl	8003058 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	2010      	movs	r0, #16
 8002582:	f000 f9e4 	bl	800294e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8002586:	200a      	movs	r0, #10
 8002588:	f000 fd8d 	bl	80030a6 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	2001      	movs	r0, #1
 8002592:	f000 f9dc 	bl	800294e <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8002596:	20c8      	movs	r0, #200	; 0xc8
 8002598:	f000 fd85 	bl	80030a6 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	2011      	movs	r0, #17
 80025a2:	f000 f9d4 	bl	800294e <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80025a6:	2078      	movs	r0, #120	; 0x78
 80025a8:	f000 fd7d 	bl	80030a6 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80025ac:	2300      	movs	r3, #0
 80025ae:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80025b0:	463b      	mov	r3, r7
 80025b2:	2201      	movs	r2, #1
 80025b4:	4619      	mov	r1, r3
 80025b6:	2036      	movs	r0, #54	; 0x36
 80025b8:	f000 f9c9 	bl	800294e <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80025bc:	2305      	movs	r3, #5
 80025be:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80025c0:	463b      	mov	r3, r7
 80025c2:	2201      	movs	r2, #1
 80025c4:	4619      	mov	r1, r3
 80025c6:	203a      	movs	r0, #58	; 0x3a
 80025c8:	f000 f9c1 	bl	800294e <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2021      	movs	r0, #33	; 0x21
 80025d2:	f000 f9bc 	bl	800294e <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80025da:	2300      	movs	r3, #0
 80025dc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80025de:	2300      	movs	r3, #0
 80025e0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80025e2:	23ef      	movs	r3, #239	; 0xef
 80025e4:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80025e6:	463b      	mov	r3, r7
 80025e8:	2204      	movs	r2, #4
 80025ea:	4619      	mov	r1, r3
 80025ec:	202a      	movs	r0, #42	; 0x2a
 80025ee:	f000 f9ae 	bl	800294e <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80025f2:	2300      	movs	r3, #0
 80025f4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80025fe:	23ef      	movs	r3, #239	; 0xef
 8002600:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002602:	463b      	mov	r3, r7
 8002604:	2204      	movs	r2, #4
 8002606:	4619      	mov	r1, r3
 8002608:	202b      	movs	r0, #43	; 0x2b
 800260a:	f000 f9a0 	bl	800294e <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800260e:	230c      	movs	r3, #12
 8002610:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8002612:	230c      	movs	r3, #12
 8002614:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 800261a:	2333      	movs	r3, #51	; 0x33
 800261c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800261e:	2333      	movs	r3, #51	; 0x33
 8002620:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8002622:	463b      	mov	r3, r7
 8002624:	2205      	movs	r2, #5
 8002626:	4619      	mov	r1, r3
 8002628:	20b2      	movs	r0, #178	; 0xb2
 800262a:	f000 f990 	bl	800294e <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800262e:	2335      	movs	r3, #53	; 0x35
 8002630:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8002632:	463b      	mov	r3, r7
 8002634:	2201      	movs	r2, #1
 8002636:	4619      	mov	r1, r3
 8002638:	20b7      	movs	r0, #183	; 0xb7
 800263a:	f000 f988 	bl	800294e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800263e:	231f      	movs	r3, #31
 8002640:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8002642:	463b      	mov	r3, r7
 8002644:	2201      	movs	r2, #1
 8002646:	4619      	mov	r1, r3
 8002648:	20bb      	movs	r0, #187	; 0xbb
 800264a:	f000 f980 	bl	800294e <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800264e:	232c      	movs	r3, #44	; 0x2c
 8002650:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8002652:	463b      	mov	r3, r7
 8002654:	2201      	movs	r2, #1
 8002656:	4619      	mov	r1, r3
 8002658:	20c0      	movs	r0, #192	; 0xc0
 800265a:	f000 f978 	bl	800294e <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800265e:	2301      	movs	r3, #1
 8002660:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8002662:	23c3      	movs	r3, #195	; 0xc3
 8002664:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8002666:	463b      	mov	r3, r7
 8002668:	2202      	movs	r2, #2
 800266a:	4619      	mov	r1, r3
 800266c:	20c2      	movs	r0, #194	; 0xc2
 800266e:	f000 f96e 	bl	800294e <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8002672:	2320      	movs	r3, #32
 8002674:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8002676:	463b      	mov	r3, r7
 8002678:	2201      	movs	r2, #1
 800267a:	4619      	mov	r1, r3
 800267c:	20c4      	movs	r0, #196	; 0xc4
 800267e:	f000 f966 	bl	800294e <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002682:	230f      	movs	r3, #15
 8002684:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002686:	463b      	mov	r3, r7
 8002688:	2201      	movs	r2, #1
 800268a:	4619      	mov	r1, r3
 800268c:	20c6      	movs	r0, #198	; 0xc6
 800268e:	f000 f95e 	bl	800294e <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002692:	23a4      	movs	r3, #164	; 0xa4
 8002694:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002696:	23a1      	movs	r3, #161	; 0xa1
 8002698:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 800269a:	463b      	mov	r3, r7
 800269c:	2201      	movs	r2, #1
 800269e:	4619      	mov	r1, r3
 80026a0:	20d0      	movs	r0, #208	; 0xd0
 80026a2:	f000 f954 	bl	800294e <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80026a6:	23d0      	movs	r3, #208	; 0xd0
 80026a8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80026aa:	2308      	movs	r3, #8
 80026ac:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80026ae:	2311      	movs	r3, #17
 80026b0:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80026b2:	2308      	movs	r3, #8
 80026b4:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80026b6:	230c      	movs	r3, #12
 80026b8:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80026ba:	2315      	movs	r3, #21
 80026bc:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80026be:	2339      	movs	r3, #57	; 0x39
 80026c0:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80026c2:	2333      	movs	r3, #51	; 0x33
 80026c4:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80026c6:	2350      	movs	r3, #80	; 0x50
 80026c8:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80026ca:	2336      	movs	r3, #54	; 0x36
 80026cc:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80026ce:	2313      	movs	r3, #19
 80026d0:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80026d2:	2314      	movs	r3, #20
 80026d4:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80026d6:	2329      	movs	r3, #41	; 0x29
 80026d8:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80026da:	232d      	movs	r3, #45	; 0x2d
 80026dc:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80026de:	463b      	mov	r3, r7
 80026e0:	220e      	movs	r2, #14
 80026e2:	4619      	mov	r1, r3
 80026e4:	20e0      	movs	r0, #224	; 0xe0
 80026e6:	f000 f932 	bl	800294e <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80026ea:	23d0      	movs	r3, #208	; 0xd0
 80026ec:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80026ee:	2308      	movs	r3, #8
 80026f0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80026f2:	2310      	movs	r3, #16
 80026f4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80026f6:	2308      	movs	r3, #8
 80026f8:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 80026fa:	2306      	movs	r3, #6
 80026fc:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80026fe:	2306      	movs	r3, #6
 8002700:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002702:	2339      	movs	r3, #57	; 0x39
 8002704:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002706:	2344      	movs	r3, #68	; 0x44
 8002708:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 800270a:	2351      	movs	r3, #81	; 0x51
 800270c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800270e:	230b      	movs	r3, #11
 8002710:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8002712:	2316      	movs	r3, #22
 8002714:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002716:	2314      	movs	r3, #20
 8002718:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 800271a:	232f      	movs	r3, #47	; 0x2f
 800271c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800271e:	2331      	movs	r3, #49	; 0x31
 8002720:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8002722:	463b      	mov	r3, r7
 8002724:	220e      	movs	r2, #14
 8002726:	4619      	mov	r1, r3
 8002728:	20e1      	movs	r0, #225	; 0xe1
 800272a:	f000 f910 	bl	800294e <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800272e:	f000 f847 	bl	80027c0 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8002732:	2300      	movs	r3, #0
 8002734:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8002736:	463b      	mov	r3, r7
 8002738:	2201      	movs	r2, #1
 800273a:	4619      	mov	r1, r3
 800273c:	2035      	movs	r0, #53	; 0x35
 800273e:	f000 f906 	bl	800294e <ST7789H2_WriteReg>

}
 8002742:	bf00      	nop
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d102      	bne.n	800275e <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002758:	2300      	movs	r3, #0
 800275a:	723b      	strb	r3, [r7, #8]
 800275c:	e025      	b.n	80027aa <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d120      	bne.n	80027a6 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8002764:	2300      	movs	r3, #0
 8002766:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002768:	2300      	movs	r3, #0
 800276a:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 800276c:	2301      	movs	r3, #1
 800276e:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002770:	23f0      	movs	r3, #240	; 0xf0
 8002772:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8002774:	2300      	movs	r3, #0
 8002776:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002778:	2300      	movs	r3, #0
 800277a:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 800277c:	f107 0308 	add.w	r3, r7, #8
 8002780:	2206      	movs	r2, #6
 8002782:	4619      	mov	r1, r3
 8002784:	2033      	movs	r0, #51	; 0x33
 8002786:	f000 f8e2 	bl	800294e <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800278a:	2300      	movs	r3, #0
 800278c:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800278e:	2350      	movs	r3, #80	; 0x50
 8002790:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	2202      	movs	r2, #2
 8002798:	4619      	mov	r1, r3
 800279a:	2037      	movs	r0, #55	; 0x37
 800279c:	f000 f8d7 	bl	800294e <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80027a0:	23c0      	movs	r3, #192	; 0xc0
 80027a2:	723b      	strb	r3, [r7, #8]
 80027a4:	e001      	b.n	80027aa <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80027a6:	2360      	movs	r3, #96	; 0x60
 80027a8:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	2201      	movs	r2, #1
 80027b0:	4619      	mov	r1, r3
 80027b2:	2036      	movs	r0, #54	; 0x36
 80027b4:	f000 f8cb 	bl	800294e <ST7789H2_WriteReg>
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2100      	movs	r1, #0
 80027c8:	2029      	movs	r0, #41	; 0x29
 80027ca:	f000 f8c0 	bl	800294e <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	2011      	movs	r0, #17
 80027d4:	f000 f8bb 	bl	800294e <ST7789H2_WriteReg>
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}

080027dc <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80027e2:	23fe      	movs	r3, #254	; 0xfe
 80027e4:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2201      	movs	r2, #1
 80027ea:	4619      	mov	r1, r3
 80027ec:	20bd      	movs	r0, #189	; 0xbd
 80027ee:	f000 f8ae 	bl	800294e <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	2010      	movs	r0, #16
 80027f8:	f000 f8a9 	bl	800294e <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80027fc:	200a      	movs	r0, #10
 80027fe:	f000 fc52 	bl	80030a6 <LCD_IO_Delay>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 800280a:	b480      	push	{r7}
 800280c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800280e:	23f0      	movs	r3, #240	; 0xf0
}
 8002810:	4618      	mov	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 800281a:	b480      	push	{r7}
 800281c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800281e:	23f0      	movs	r3, #240	; 0xf0
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800282e:	f000 fc13 	bl	8003058 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8002832:	2004      	movs	r0, #4
 8002834:	f000 f8ad 	bl	8002992 <ST7789H2_ReadReg>
 8002838:	4603      	mov	r3, r0
 800283a:	b29b      	uxth	r3, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}

08002840 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	460a      	mov	r2, r1
 800284a:	80fb      	strh	r3, [r7, #6]
 800284c:	4613      	mov	r3, r2
 800284e:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002850:	2300      	movs	r3, #0
 8002852:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800285a:	2300      	movs	r3, #0
 800285c:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3b11      	subs	r3, #17
 8002864:	b2db      	uxtb	r3, r3
 8002866:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	2204      	movs	r2, #4
 800286e:	4619      	mov	r1, r3
 8002870:	202a      	movs	r0, #42	; 0x2a
 8002872:	f000 f86c 	bl	800294e <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8002876:	2300      	movs	r3, #0
 8002878:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 800287a:	88bb      	ldrh	r3, [r7, #4]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002880:	2300      	movs	r3, #0
 8002882:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002884:	88bb      	ldrh	r3, [r7, #4]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	3b11      	subs	r3, #17
 800288a:	b2db      	uxtb	r3, r3
 800288c:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800288e:	f107 030c 	add.w	r3, r7, #12
 8002892:	2204      	movs	r2, #4
 8002894:	4619      	mov	r1, r3
 8002896:	202b      	movs	r0, #43	; 0x2b
 8002898:	f000 f859 	bl	800294e <ST7789H2_WriteReg>
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	80fb      	strh	r3, [r7, #6]
 80028ae:	460b      	mov	r3, r1
 80028b0:	80bb      	strh	r3, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80028b6:	88ba      	ldrh	r2, [r7, #4]
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ffbf 	bl	8002840 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	202c      	movs	r0, #44	; 0x2c
 80028c8:	f000 f841 	bl	800294e <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fbc8 	bl	8003064 <LCD_IO_WriteData>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	460a      	mov	r2, r1
 80028e6:	80fb      	strh	r3, [r7, #6]
 80028e8:	4613      	mov	r3, r2
 80028ea:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80028ec:	88ba      	ldrh	r2, [r7, #4]
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ffa4 	bl	8002840 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80028f8:	88ba      	ldrh	r2, [r7, #4]
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f9bd 	bl	8002c7e <ST7789H2_ReadPixel_rgb888>
 8002904:	4603      	mov	r3, r0
 8002906:	461a      	mov	r2, r3
 8002908:	733a      	strb	r2, [r7, #12]
 800290a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800290e:	737a      	strb	r2, [r7, #13]
 8002910:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002914:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002916:	7b3b      	ldrb	r3, [r7, #12]
 8002918:	08db      	lsrs	r3, r3, #3
 800291a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 800291c:	7b7b      	ldrb	r3, [r7, #13]
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8002922:	7bbb      	ldrb	r3, [r7, #14]
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	b29b      	uxth	r3, r3
 800292c:	02db      	lsls	r3, r3, #11
 800292e:	b29a      	uxth	r2, r3
 8002930:	7dbb      	ldrb	r3, [r7, #22]
 8002932:	b29b      	uxth	r3, r3
 8002934:	015b      	lsls	r3, r3, #5
 8002936:	b29b      	uxth	r3, r3
 8002938:	4413      	add	r3, r2
 800293a:	b29a      	uxth	r2, r3
 800293c:	7d7b      	ldrb	r3, [r7, #21]
 800293e:	b29b      	uxth	r3, r3
 8002940:	4413      	add	r3, r2
 8002942:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8002944:	8a7b      	ldrh	r3, [r7, #18]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	6039      	str	r1, [r7, #0]
 8002958:	71fb      	strb	r3, [r7, #7]
 800295a:	4613      	mov	r3, r2
 800295c:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fb8c 	bl	800307e <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
 800296a:	e00a      	b.n	8002982 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 800296c:	7bfb      	ldrb	r3, [r7, #15]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	4413      	add	r3, r2
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b29b      	uxth	r3, r3
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fb74 	bl	8003064 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	3301      	adds	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	79bb      	ldrb	r3, [r7, #6]
 8002986:	429a      	cmp	r2, r3
 8002988:	d3f0      	bcc.n	800296c <ST7789H2_WriteReg+0x1e>
  }
}
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 fb6d 	bl	800307e <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80029a4:	f000 fb78 	bl	8003098 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80029a8:	f000 fb76 	bl	8003098 <LCD_IO_ReadData>
 80029ac:	4603      	mov	r3, r0
 80029ae:	b2db      	uxtb	r3, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3708      	adds	r7, #8
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80029b8:	b490      	push	{r4, r7}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4604      	mov	r4, r0
 80029c0:	4608      	mov	r0, r1
 80029c2:	4611      	mov	r1, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	4623      	mov	r3, r4
 80029c8:	80fb      	strh	r3, [r7, #6]
 80029ca:	4603      	mov	r3, r0
 80029cc:	80bb      	strh	r3, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	807b      	strh	r3, [r7, #2]
 80029d2:	4613      	mov	r3, r2
 80029d4:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	2bef      	cmp	r3, #239	; 0xef
 80029da:	d803      	bhi.n	80029e4 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80029dc:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <ST7789H2_SetDisplayWindow+0x94>)
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	8013      	strh	r3, [r2, #0]
 80029e2:	e002      	b.n	80029ea <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <ST7789H2_SetDisplayWindow+0x94>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80029ea:	88bb      	ldrh	r3, [r7, #4]
 80029ec:	2bef      	cmp	r3, #239	; 0xef
 80029ee:	d803      	bhi.n	80029f8 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <ST7789H2_SetDisplayWindow+0x98>)
 80029f2:	88bb      	ldrh	r3, [r7, #4]
 80029f4:	8013      	strh	r3, [r2, #0]
 80029f6:	e002      	b.n	80029fe <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <ST7789H2_SetDisplayWindow+0x98>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80029fe:	887a      	ldrh	r2, [r7, #2]
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	4413      	add	r3, r2
 8002a04:	2bf0      	cmp	r3, #240	; 0xf0
 8002a06:	dc08      	bgt.n	8002a1a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8002a08:	887a      	ldrh	r2, [r7, #2]
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <ST7789H2_SetDisplayWindow+0x9c>)
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	e002      	b.n	8002a20 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <ST7789H2_SetDisplayWindow+0x9c>)
 8002a1c:	22ef      	movs	r2, #239	; 0xef
 8002a1e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8002a20:	883a      	ldrh	r2, [r7, #0]
 8002a22:	88bb      	ldrh	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	2bf0      	cmp	r3, #240	; 0xf0
 8002a28:	dc08      	bgt.n	8002a3c <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002a2a:	883a      	ldrh	r2, [r7, #0]
 8002a2c:	88bb      	ldrh	r3, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <ST7789H2_SetDisplayWindow+0xa0>)
 8002a38:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002a3a:	e002      	b.n	8002a42 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <ST7789H2_SetDisplayWindow+0xa0>)
 8002a3e:	22ef      	movs	r2, #239	; 0xef
 8002a40:	801a      	strh	r2, [r3, #0]
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc90      	pop	{r4, r7}
 8002a4a:	4770      	bx	lr
 8002a4c:	20000150 	.word	0x20000150
 8002a50:	20000152 	.word	0x20000152
 8002a54:	2000004c 	.word	0x2000004c
 8002a58:	2000004e 	.word	0x2000004e

08002a5c <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4604      	mov	r4, r0
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4623      	mov	r3, r4
 8002a6c:	80fb      	strh	r3, [r7, #6]
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80bb      	strh	r3, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	807b      	strh	r3, [r7, #2]
 8002a76:	4613      	mov	r3, r2
 8002a78:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8002a7e:	887a      	ldrh	r2, [r7, #2]
 8002a80:	88bb      	ldrh	r3, [r7, #4]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fedb 	bl	8002840 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	202c      	movs	r0, #44	; 0x2c
 8002a90:	f7ff ff5d 	bl	800294e <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	81fb      	strh	r3, [r7, #14]
 8002a98:	e006      	b.n	8002aa8 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fae1 	bl	8003064 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002aa2:	89fb      	ldrh	r3, [r7, #14]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	81fb      	strh	r3, [r7, #14]
 8002aa8:	89fa      	ldrh	r2, [r7, #14]
 8002aaa:	883b      	ldrh	r3, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d3f4      	bcc.n	8002a9a <ST7789H2_DrawHLine+0x3e>
  }  
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd90      	pop	{r4, r7, pc}

08002ab8 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002ab8:	b590      	push	{r4, r7, lr}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4604      	mov	r4, r0
 8002ac0:	4608      	mov	r0, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	4623      	mov	r3, r4
 8002ac8:	80fb      	strh	r3, [r7, #6]
 8002aca:	4603      	mov	r3, r0
 8002acc:	80bb      	strh	r3, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	807b      	strh	r3, [r7, #2]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002ada:	887a      	ldrh	r2, [r7, #2]
 8002adc:	88bb      	ldrh	r3, [r7, #4]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fead 	bl	8002840 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	202c      	movs	r0, #44	; 0x2c
 8002aec:	f7ff ff2f 	bl	800294e <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002af0:	2300      	movs	r3, #0
 8002af2:	81fb      	strh	r3, [r7, #14]
 8002af4:	e00b      	b.n	8002b0e <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8002af6:	887a      	ldrh	r2, [r7, #2]
 8002af8:	89fb      	ldrh	r3, [r7, #14]
 8002afa:	4413      	add	r3, r2
 8002afc:	b299      	uxth	r1, r3
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	88bb      	ldrh	r3, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fece 	bl	80028a4 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8002b08:	89fb      	ldrh	r3, [r7, #14]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	81fb      	strh	r3, [r7, #14]
 8002b0e:	89fa      	ldrh	r2, [r7, #14]
 8002b10:	883b      	ldrh	r3, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d3ef      	bcc.n	8002af6 <ST7789H2_DrawVLine+0x3e>
  }
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd90      	pop	{r4, r7, pc}
	...

08002b20 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	603a      	str	r2, [r7, #0]
 8002b2a:	80fb      	strh	r3, [r7, #6]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8002b3c:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <ST7789H2_DrawBitmap+0xdc>)
 8002b3e:	881a      	ldrh	r2, [r3, #0]
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <ST7789H2_DrawBitmap+0xe0>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <ST7789H2_DrawBitmap+0xe4>)
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <ST7789H2_DrawBitmap+0xe8>)
 8002b52:	881b      	ldrh	r3, [r3, #0]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	3302      	adds	r3, #2
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	041b      	lsls	r3, r3, #16
 8002b70:	461a      	mov	r2, r3
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	330a      	adds	r3, #10
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	330c      	adds	r3, #12
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	085b      	lsrs	r3, r3, #1
 8002b9c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002ba6:	88ba      	ldrh	r2, [r7, #4]
 8002ba8:	89bb      	ldrh	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e01d      	b.n	8002bec <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fe3f 	bl	8002840 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b299      	uxth	r1, r3
 8002bca:	89fb      	ldrh	r3, [r7, #14]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	89fa      	ldrh	r2, [r7, #14]
 8002bda:	88f8      	ldrh	r0, [r7, #6]
 8002bdc:	f000 f898 	bl	8002d10 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	3301      	adds	r3, #1
 8002be4:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	88bb      	ldrh	r3, [r7, #4]
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d8dd      	bhi.n	8002bb0 <ST7789H2_DrawBitmap+0x90>
  }
}
 8002bf4:	bf00      	nop
 8002bf6:	3720      	adds	r7, #32
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	2000004c 	.word	0x2000004c
 8002c00:	20000150 	.word	0x20000150
 8002c04:	2000004e 	.word	0x2000004e
 8002c08:	20000152 	.word	0x20000152

08002c0c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4604      	mov	r4, r0
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	80fb      	strh	r3, [r7, #6]
 8002c1e:	4603      	mov	r3, r0
 8002c20:	80bb      	strh	r3, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	807b      	strh	r3, [r7, #2]
 8002c26:	4613      	mov	r3, r2
 8002c28:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002c2e:	88bb      	ldrh	r3, [r7, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e019      	b.n	8002c68 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fdff 	bl	8002840 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	b299      	uxth	r1, r3
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	4413      	add	r3, r2
 8002c54:	887a      	ldrh	r2, [r7, #2]
 8002c56:	88f8      	ldrh	r0, [r7, #6]
 8002c58:	f000 f85a 	bl	8002d10 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	88ba      	ldrh	r2, [r7, #4]
 8002c6a:	883b      	ldrh	r3, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d3de      	bcc.n	8002c34 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002c76:	bf00      	nop
 8002c78:	3714      	adds	r7, #20
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd90      	pop	{r4, r7, pc}

08002c7e <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b086      	sub	sp, #24
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	4603      	mov	r3, r0
 8002c86:	460a      	mov	r2, r1
 8002c88:	80fb      	strh	r3, [r7, #6]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002c8e:	88ba      	ldrh	r2, [r7, #4]
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fdd3 	bl	8002840 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	202e      	movs	r0, #46	; 0x2e
 8002ca0:	f7ff fe55 	bl	800294e <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002ca4:	f000 f9f8 	bl	8003098 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002ca8:	f000 f9f6 	bl	8003098 <LCD_IO_ReadData>
 8002cac:	4603      	mov	r3, r0
 8002cae:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8002cb0:	f000 f9f2 	bl	8003098 <LCD_IO_ReadData>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002cb8:	8afb      	ldrh	r3, [r7, #22]
 8002cba:	121b      	asrs	r3, r3, #8
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	f023 0303 	bic.w	r3, r3, #3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002cc6:	8afb      	ldrh	r3, [r7, #22]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	f023 0303 	bic.w	r3, r3, #3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002cd2:	8abb      	ldrh	r3, [r7, #20]
 8002cd4:	121b      	asrs	r3, r3, #8
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	f023 0303 	bic.w	r3, r3, #3
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8002ce0:	f107 0310 	add.w	r3, r7, #16
 8002ce4:	f107 020c 	add.w	r2, r7, #12
 8002ce8:	6812      	ldr	r2, [r2, #0]
 8002cea:	4611      	mov	r1, r2
 8002cec:	8019      	strh	r1, [r3, #0]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	0c12      	lsrs	r2, r2, #16
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	7c3a      	ldrb	r2, [r7, #16]
 8002cf8:	f362 0307 	bfi	r3, r2, #0, #8
 8002cfc:	7c7a      	ldrb	r2, [r7, #17]
 8002cfe:	f362 230f 	bfi	r3, r2, #8, #8
 8002d02:	7cba      	ldrb	r2, [r7, #18]
 8002d04:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	607b      	str	r3, [r7, #4]
 8002d18:	4603      	mov	r3, r0
 8002d1a:	81fb      	strh	r3, [r7, #14]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	81bb      	strh	r3, [r7, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	202c      	movs	r0, #44	; 0x2c
 8002d32:	f7ff fe0c 	bl	800294e <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002d36:	89fb      	ldrh	r3, [r7, #14]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	e02a      	b.n	8002d92 <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <ST7789H2_DrawRGBHLine+0x98>)
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d321      	bcc.n	8002d8c <ST7789H2_DrawRGBHLine+0x7c>
 8002d48:	4b18      	ldr	r3, [pc, #96]	; (8002dac <ST7789H2_DrawRGBHLine+0x9c>)
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	89ba      	ldrh	r2, [r7, #12]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d31c      	bcc.n	8002d8c <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <ST7789H2_DrawRGBHLine+0xa0>)
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d816      	bhi.n	8002d8c <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <ST7789H2_DrawRGBHLine+0xa4>)
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	89ba      	ldrh	r2, [r7, #12]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d811      	bhi.n	8002d8c <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002d68:	897a      	ldrh	r2, [r7, #10]
 8002d6a:	89fb      	ldrh	r3, [r7, #14]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	881b      	ldrh	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f000 f96f 	bl	8003064 <LCD_IO_WriteData>
      }      
      i++;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	897a      	ldrh	r2, [r7, #10]
 8002d94:	89fb      	ldrh	r3, [r7, #14]
 8002d96:	4413      	add	r3, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d3cd      	bcc.n	8002d3c <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002da0:	bf00      	nop
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000150 	.word	0x20000150
 8002dac:	20000152 	.word	0x20000152
 8002db0:	2000004c 	.word	0x2000004c
 8002db4:	2000004e 	.word	0x2000004e

08002db8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	71fb      	strb	r3, [r7, #7]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <BSP_PB_Init+0xa0>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	4a21      	ldr	r2, [pc, #132]	; (8002e58 <BSP_PB_Init+0xa0>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd8:	4b1f      	ldr	r3, [pc, #124]	; (8002e58 <BSP_PB_Init+0xa0>)
 8002dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002de4:	79bb      	ldrb	r3, [r7, #6]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d111      	bne.n	8002e0e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002dea:	2301      	movs	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002dee:	2300      	movs	r3, #0
 8002df0:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002df2:	2302      	movs	r3, #2
 8002df4:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002df6:	2302      	movs	r3, #2
 8002df8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	4a17      	ldr	r2, [pc, #92]	; (8002e5c <BSP_PB_Init+0xa4>)
 8002dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e02:	f107 020c 	add.w	r2, r7, #12
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f002 f8db 	bl	8004fc4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002e0e:	79bb      	ldrb	r3, [r7, #6]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d11d      	bne.n	8002e50 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8002e14:	2301      	movs	r3, #1
 8002e16:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <BSP_PB_Init+0xa8>)
 8002e22:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <BSP_PB_Init+0xa4>)
 8002e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e2c:	f107 020c 	add.w	r2, r7, #12
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f002 f8c6 	bl	8004fc4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002e38:	2306      	movs	r3, #6
 8002e3a:	b25b      	sxtb	r3, r3
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	210f      	movs	r1, #15
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fa09 	bl	8004258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002e46:	2306      	movs	r3, #6
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fa20 	bl	8004290 <HAL_NVIC_EnableIRQ>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	20000050 	.word	0x20000050
 8002e60:	10110000 	.word	0x10110000

08002e64 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	; 0x28
 8002e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b3a      	ldr	r3, [pc, #232]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	4a39      	ldr	r2, [pc, #228]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6393      	str	r3, [r2, #56]	; 0x38
 8002e7a:	4b37      	ldr	r3, [pc, #220]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b33      	ldr	r3, [pc, #204]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a32      	ldr	r2, [pc, #200]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002e90:	f043 0308 	orr.w	r3, r3, #8
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b30      	ldr	r3, [pc, #192]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002eac:	f043 0310 	orr.w	r3, r3, #16
 8002eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	4a24      	ldr	r2, [pc, #144]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002ec8:	f043 0320 	orr.w	r3, r3, #32
 8002ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	603b      	str	r3, [r7, #0]
 8002ede:	4b1e      	ldr	r3, [pc, #120]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b1b      	ldr	r3, [pc, #108]	; (8002f58 <FMC_BANK3_MspInit+0xf4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002f02:	230c      	movs	r3, #12
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002f06:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002f0a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	4619      	mov	r1, r3
 8002f12:	4812      	ldr	r0, [pc, #72]	; (8002f5c <FMC_BANK3_MspInit+0xf8>)
 8002f14:	f002 f856 	bl	8004fc4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002f18:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002f1c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002f1e:	f107 0314 	add.w	r3, r7, #20
 8002f22:	4619      	mov	r1, r3
 8002f24:	480e      	ldr	r0, [pc, #56]	; (8002f60 <FMC_BANK3_MspInit+0xfc>)
 8002f26:	f002 f84d 	bl	8004fc4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002f2a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002f2e:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4619      	mov	r1, r3
 8002f36:	480b      	ldr	r0, [pc, #44]	; (8002f64 <FMC_BANK3_MspInit+0x100>)
 8002f38:	f002 f844 	bl	8004fc4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002f3c:	f240 433f 	movw	r3, #1087	; 0x43f
 8002f40:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	4619      	mov	r1, r3
 8002f48:	4807      	ldr	r0, [pc, #28]	; (8002f68 <FMC_BANK3_MspInit+0x104>)
 8002f4a:	f002 f83b 	bl	8004fc4 <HAL_GPIO_Init>
}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020c00 	.word	0x40020c00
 8002f60:	40021000 	.word	0x40021000
 8002f64:	40021400 	.word	0x40021400
 8002f68:	40021800 	.word	0x40021800

08002f6c <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b09c      	sub	sp, #112	; 0x70
 8002f70:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002f72:	f7ff ff77 	bl	8002e64 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002f76:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002f7a:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002f7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <FMC_BANK3_Init+0x8c>)
 8002f7e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002f80:	2303      	movs	r3, #3
 8002f82:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002f88:	2304      	movs	r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002f90:	2302      	movs	r3, #2
 8002f92:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002f94:	2302      	movs	r3, #2
 8002f96:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002fa8:	2310      	movs	r3, #16
 8002faa:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002fac:	2300      	movs	r3, #0
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fc0:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fca:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002fd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fd8:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002fe2:	1d3a      	adds	r2, r7, #4
 8002fe4:	1d39      	adds	r1, r7, #4
 8002fe6:	f107 0320 	add.w	r3, r7, #32
 8002fea:	4618      	mov	r0, r3
 8002fec:	f006 faac 	bl	8009548 <HAL_SRAM_Init>
}
 8002ff0:	bf00      	nop
 8002ff2:	3770      	adds	r7, #112	; 0x70
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	a0000104 	.word	0xa0000104

08002ffc <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8003006:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800300e:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8003012:	bf00      	nop
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	4603      	mov	r3, r0
 8003026:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8003028:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800302c:	79fa      	ldrb	r2, [r7, #7]
 800302e:	b292      	uxth	r2, r2
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8003046:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800304a:	885b      	ldrh	r3, [r3, #2]
 800304c:	b29b      	uxth	r3, r3
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 800305c:	f7ff ff86 	bl	8002f6c <FMC_BANK3_Init>
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff ffc3 	bl	8002ffc <FMC_BANK3_WriteData>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff ffc7 	bl	800301e <FMC_BANK3_WriteReg>
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 800309c:	f7ff ffd1 	bl	8003042 <FMC_BANK3_ReadData>
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b082      	sub	sp, #8
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fd86 	bl	8003bc0 <HAL_Delay>
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80030c4:	f000 f80e 	bl	80030e4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 80030d8:	f000 f80b 	bl	80030f2 <BSP_AUDIO_OUT_Error_CallBack>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
}
 80030e8:	bf00      	nop
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr

080030f2 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8003108:	f000 f804 	bl	8003114 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8003126:	2001      	movs	r0, #1
 8003128:	f000 f804 	bl	8003134 <BSP_LCD_InitEx>
 800312c:	4603      	mov	r3, r0
}
 800312e:	4618      	mov	r0, r3
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8003140:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <BSP_LCD_InitEx+0xc0>)
 8003142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003146:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <BSP_LCD_InitEx+0xc0>)
 800314a:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <BSP_LCD_InitEx+0xc4>)
 800314c:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800314e:	4b29      	ldr	r3, [pc, #164]	; (80031f4 <BSP_LCD_InitEx+0xc0>)
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8003154:	f000 fa66 	bl	8003624 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003158:	2201      	movs	r2, #1
 800315a:	2120      	movs	r1, #32
 800315c:	4827      	ldr	r0, [pc, #156]	; (80031fc <BSP_LCD_InitEx+0xc8>)
 800315e:	f002 f8c3 	bl	80052e8 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003168:	4825      	ldr	r0, [pc, #148]	; (8003200 <BSP_LCD_InitEx+0xcc>)
 800316a:	f002 f8bd 	bl	80052e8 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800316e:	2005      	movs	r0, #5
 8003170:	f000 fd26 	bl	8003bc0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003174:	2201      	movs	r2, #1
 8003176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800317a:	4821      	ldr	r0, [pc, #132]	; (8003200 <BSP_LCD_InitEx+0xcc>)
 800317c:	f002 f8b4 	bl	80052e8 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8003180:	200a      	movs	r0, #10
 8003182:	f000 fd1d 	bl	8003bc0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8003186:	2200      	movs	r2, #0
 8003188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800318c:	481c      	ldr	r0, [pc, #112]	; (8003200 <BSP_LCD_InitEx+0xcc>)
 800318e:	f002 f8ab 	bl	80052e8 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8003192:	2014      	movs	r0, #20
 8003194:	f000 fd14 	bl	8003bc0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8003198:	2201      	movs	r2, #1
 800319a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800319e:	4818      	ldr	r0, [pc, #96]	; (8003200 <BSP_LCD_InitEx+0xcc>)
 80031a0:	f002 f8a2 	bl	80052e8 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80031a4:	200a      	movs	r0, #10
 80031a6:	f000 fd0b 	bl	8003bc0 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <BSP_LCD_InitEx+0xd0>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4798      	blx	r3
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b85      	cmp	r3, #133	; 0x85
 80031b4:	d118      	bne.n	80031e8 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <BSP_LCD_InitEx+0xd4>)
 80031b8:	4a12      	ldr	r2, [pc, #72]	; (8003204 <BSP_LCD_InitEx+0xd0>)
 80031ba:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <BSP_LCD_InitEx+0xd4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d103      	bne.n	80031d2 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80031ca:	2000      	movs	r0, #0
 80031cc:	f7ff fabd 	bl	800274a <ST7789H2_SetOrientation>
 80031d0:	e005      	b.n	80031de <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d102      	bne.n	80031de <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80031d8:	2002      	movs	r0, #2
 80031da:	f7ff fab6 	bl	800274a <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80031de:	480b      	ldr	r0, [pc, #44]	; (800320c <BSP_LCD_InitEx+0xd8>)
 80031e0:	f000 f84e 	bl	8003280 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20005324 	.word	0x20005324
 80031f8:	20000054 	.word	0x20000054
 80031fc:	40021000 	.word	0x40021000
 8003200:	40020400 	.word	0x40020400
 8003204:	20000014 	.word	0x20000014
 8003208:	20000154 	.word	0x20000154
 800320c:	20000064 	.word	0x20000064

08003210 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <BSP_LCD_GetXSize+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	4798      	blx	r3
 800321c:	4603      	mov	r3, r0
}
 800321e:	4618      	mov	r0, r3
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000154 	.word	0x20000154

08003228 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <BSP_LCD_GetYSize+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	4798      	blx	r3
 8003234:	4603      	mov	r3, r0
}
 8003236:	4618      	mov	r0, r3
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000154 	.word	0x20000154

08003240 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	4a03      	ldr	r2, [pc, #12]	; (800325c <BSP_LCD_SetTextColor+0x1c>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	20005324 	.word	0x20005324

08003260 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4a03      	ldr	r2, [pc, #12]	; (800327c <BSP_LCD_SetBackColor+0x1c>)
 800326e:	6053      	str	r3, [r2, #4]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	20005324 	.word	0x20005324

08003280 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8003288:	4a04      	ldr	r2, [pc, #16]	; (800329c <BSP_LCD_SetFont+0x1c>)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6093      	str	r3, [r2, #8]
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20005324 	.word	0x20005324

080032a0 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <BSP_LCD_GetFont+0x14>)
 80032a6:	689b      	ldr	r3, [r3, #8]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20005324 	.word	0x20005324

080032b8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <BSP_LCD_Clear+0x68>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <BSP_LCD_Clear+0x68>)
 80032d4:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 80032d6:	f7ff ffa7 	bl	8003228 <BSP_LCD_GetYSize>
 80032da:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	e00d      	b.n	80032fe <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	b29c      	uxth	r4, r3
 80032e6:	f7ff ff93 	bl	8003210 <BSP_LCD_GetXSize>
 80032ea:	4603      	mov	r3, r0
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	4621      	mov	r1, r4
 80032f2:	2000      	movs	r0, #0
 80032f4:	f000 f934 	bl	8003560 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	3301      	adds	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	429a      	cmp	r2, r3
 8003304:	d3ed      	bcc.n	80032e2 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8003306:	4a06      	ldr	r2, [pc, #24]	; (8003320 <BSP_LCD_Clear+0x68>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800330c:	4b04      	ldr	r3, [pc, #16]	; (8003320 <BSP_LCD_Clear+0x68>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff ff94 	bl	8003240 <BSP_LCD_SetTextColor>
}
 8003318:	bf00      	nop
 800331a:	371c      	adds	r7, #28
 800331c:	46bd      	mov	sp, r7
 800331e:	bd90      	pop	{r4, r7, pc}
 8003320:	20005324 	.word	0x20005324

08003324 <BSP_LCD_ClearStringLine>:
  *            @arg  0..9: if the Current fonts is Font16x24
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  */
void BSP_LCD_ClearStringLine(uint16_t Line)
{ 
 8003324:	b590      	push	{r4, r7, lr}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	80fb      	strh	r3, [r7, #6]
  uint32_t color_backup = DrawProp.TextColor; 
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <BSP_LCD_ClearStringLine+0x58>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = DrawProp.BackColor;;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <BSP_LCD_ClearStringLine+0x58>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4a10      	ldr	r2, [pc, #64]	; (800337c <BSP_LCD_ClearStringLine+0x58>)
 800333a:	6013      	str	r3, [r2, #0]
    
  /* Draw a rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp.pFont->Height), BSP_LCD_GetXSize(), DrawProp.pFont->Height);
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <BSP_LCD_ClearStringLine+0x58>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	88db      	ldrh	r3, [r3, #6]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	fb12 f303 	smulbb	r3, r2, r3
 8003348:	b29c      	uxth	r4, r3
 800334a:	f7ff ff61 	bl	8003210 <BSP_LCD_GetXSize>
 800334e:	4603      	mov	r3, r0
 8003350:	b29a      	uxth	r2, r3
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <BSP_LCD_ClearStringLine+0x58>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	88db      	ldrh	r3, [r3, #6]
 8003358:	4621      	mov	r1, r4
 800335a:	2000      	movs	r0, #0
 800335c:	f000 f93a 	bl	80035d4 <BSP_LCD_FillRect>
  
  DrawProp.TextColor = color_backup;
 8003360:	4a06      	ldr	r2, [pc, #24]	; (800337c <BSP_LCD_ClearStringLine+0x58>)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <BSP_LCD_ClearStringLine+0x58>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff ff67 	bl	8003240 <BSP_LCD_SetTextColor>
}
 8003372:	bf00      	nop
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	20005324 	.word	0x20005324

08003380 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	80fb      	strh	r3, [r7, #6]
 800338a:	460b      	mov	r3, r1
 800338c:	80bb      	strh	r3, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <BSP_LCD_DisplayChar+0x50>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800339c:	490c      	ldr	r1, [pc, #48]	; (80033d0 <BSP_LCD_DisplayChar+0x50>)
 800339e:	6889      	ldr	r1, [r1, #8]
 80033a0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80033a2:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <BSP_LCD_DisplayChar+0x50>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	889b      	ldrh	r3, [r3, #4]
 80033ac:	3307      	adds	r3, #7
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da00      	bge.n	80033b4 <BSP_LCD_DisplayChar+0x34>
 80033b2:	3307      	adds	r3, #7
 80033b4:	10db      	asrs	r3, r3, #3
 80033b6:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80033ba:	441a      	add	r2, r3
 80033bc:	88b9      	ldrh	r1, [r7, #4]
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f98b 	bl	80036dc <DrawChar>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20005324 	.word	0x20005324

080033d4 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60ba      	str	r2, [r7, #8]
 80033dc:	461a      	mov	r2, r3
 80033de:	4603      	mov	r3, r0
 80033e0:	81fb      	strh	r3, [r7, #14]
 80033e2:	460b      	mov	r3, r1
 80033e4:	81bb      	strh	r3, [r7, #12]
 80033e6:	4613      	mov	r3, r2
 80033e8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80033ea:	2301      	movs	r3, #1
 80033ec:	83fb      	strh	r3, [r7, #30]
 80033ee:	2300      	movs	r3, #0
 80033f0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80033fe:	e002      	b.n	8003406 <BSP_LCD_DisplayStringAt+0x32>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	3301      	adds	r3, #1
 8003404:	61bb      	str	r3, [r7, #24]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	617a      	str	r2, [r7, #20]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f6      	bne.n	8003400 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8003412:	f7ff fefd 	bl	8003210 <BSP_LCD_GetXSize>
 8003416:	4602      	mov	r2, r0
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <BSP_LCD_DisplayStringAt+0x120>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	889b      	ldrh	r3, [r3, #4]
 800341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003422:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d014      	beq.n	8003454 <BSP_LCD_DisplayStringAt+0x80>
 800342a:	2b03      	cmp	r3, #3
 800342c:	d00f      	beq.n	800344e <BSP_LCD_DisplayStringAt+0x7a>
 800342e:	2b01      	cmp	r3, #1
 8003430:	d11e      	bne.n	8003470 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <BSP_LCD_DisplayStringAt+0x120>)
 800343a:	6892      	ldr	r2, [r2, #8]
 800343c:	8892      	ldrh	r2, [r2, #4]
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	89fb      	ldrh	r3, [r7, #14]
 8003448:	4413      	add	r3, r2
 800344a:	83fb      	strh	r3, [r7, #30]
      break;
 800344c:	e013      	b.n	8003476 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800344e:	89fb      	ldrh	r3, [r7, #14]
 8003450:	83fb      	strh	r3, [r7, #30]
      break;
 8003452:	e010      	b.n	8003476 <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	b29a      	uxth	r2, r3
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <BSP_LCD_DisplayStringAt+0x120>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	889b      	ldrh	r3, [r3, #4]
 8003462:	fb12 f303 	smulbb	r3, r2, r3
 8003466:	b29a      	uxth	r2, r3
 8003468:	89fb      	ldrh	r3, [r7, #14]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	83fb      	strh	r3, [r7, #30]
      break;
 800346e:	e002      	b.n	8003476 <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8003470:	89fb      	ldrh	r3, [r7, #14]
 8003472:	83fb      	strh	r3, [r7, #30]
      break;
 8003474:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8003476:	8bfb      	ldrh	r3, [r7, #30]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <BSP_LCD_DisplayStringAt+0xb0>
 800347c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003480:	2b00      	cmp	r3, #0
 8003482:	da15      	bge.n	80034b0 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 8003484:	2301      	movs	r3, #1
 8003486:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003488:	e012      	b.n	80034b0 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	89b9      	ldrh	r1, [r7, #12]
 8003490:	8bfb      	ldrh	r3, [r7, #30]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff ff74 	bl	8003380 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003498:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <BSP_LCD_DisplayStringAt+0x120>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	889a      	ldrh	r2, [r3, #4]
 800349e:	8bfb      	ldrh	r3, [r7, #30]
 80034a0:	4413      	add	r3, r2
 80034a2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3301      	adds	r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
    i++;
 80034aa:	8bbb      	ldrh	r3, [r7, #28]
 80034ac:	3301      	adds	r3, #1
 80034ae:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2dc      	uxtb	r4, r3
 80034be:	f7ff fea7 	bl	8003210 <BSP_LCD_GetXSize>
 80034c2:	4601      	mov	r1, r0
 80034c4:	8bbb      	ldrh	r3, [r7, #28]
 80034c6:	4a0b      	ldr	r2, [pc, #44]	; (80034f4 <BSP_LCD_DisplayStringAt+0x120>)
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	8892      	ldrh	r2, [r2, #4]
 80034cc:	fb02 f303 	mul.w	r3, r2, r3
 80034d0:	1acb      	subs	r3, r1, r3
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4a07      	ldr	r2, [pc, #28]	; (80034f4 <BSP_LCD_DisplayStringAt+0x120>)
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	8892      	ldrh	r2, [r2, #4]
 80034da:	4293      	cmp	r3, r2
 80034dc:	bf2c      	ite	cs
 80034de:	2301      	movcs	r3, #1
 80034e0:	2300      	movcc	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4023      	ands	r3, r4
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1ce      	bne.n	800348a <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 80034ec:	bf00      	nop
 80034ee:	3724      	adds	r7, #36	; 0x24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	20005324 	.word	0x20005324

080034f8 <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	6039      	str	r1, [r7, #0]
 8003502:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003504:	f7ff fecc 	bl	80032a0 <BSP_LCD_GetFont>
 8003508:	4603      	mov	r3, r0
 800350a:	88db      	ldrh	r3, [r3, #6]
 800350c:	88fa      	ldrh	r2, [r7, #6]
 800350e:	fb12 f303 	smulbb	r3, r2, r3
 8003512:	b299      	uxth	r1, r3
 8003514:	2303      	movs	r3, #3
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	2000      	movs	r0, #0
 800351a:	f7ff ff5b 	bl	80033d4 <BSP_LCD_DisplayStringAt>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
 8003532:	460b      	mov	r3, r1
 8003534:	80bb      	strh	r3, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800353a:	4b08      	ldr	r3, [pc, #32]	; (800355c <BSP_LCD_DrawPixel+0x34>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d006      	beq.n	8003552 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <BSP_LCD_DrawPixel+0x34>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	88b9      	ldrh	r1, [r7, #4]
 800354e:	88f8      	ldrh	r0, [r7, #6]
 8003550:	4798      	blx	r3
  }
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000154 	.word	0x20000154

08003560 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
 800356a:	460b      	mov	r3, r1
 800356c:	80bb      	strh	r3, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <BSP_LCD_DrawHLine+0x6c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003580:	4b12      	ldr	r3, [pc, #72]	; (80035cc <BSP_LCD_DrawHLine+0x6c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6a1c      	ldr	r4, [r3, #32]
 8003586:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <BSP_LCD_DrawHLine+0x70>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b298      	uxth	r0, r3
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	88ba      	ldrh	r2, [r7, #4]
 8003590:	88f9      	ldrh	r1, [r7, #6]
 8003592:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003594:	e015      	b.n	80035c2 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e00e      	b.n	80035ba <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	4413      	add	r3, r2
 80035a4:	b298      	uxth	r0, r3
 80035a6:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <BSP_LCD_DrawHLine+0x70>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	4619      	mov	r1, r3
 80035b0:	f7ff ffba 	bl	8003528 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3301      	adds	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	887b      	ldrh	r3, [r7, #2]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d3ec      	bcc.n	800359c <BSP_LCD_DrawHLine+0x3c>
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd90      	pop	{r4, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000154 	.word	0x20000154
 80035d0:	20005324 	.word	0x20005324

080035d4 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80035d4:	b590      	push	{r4, r7, lr}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4604      	mov	r4, r0
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4623      	mov	r3, r4
 80035e4:	80fb      	strh	r3, [r7, #6]
 80035e6:	4603      	mov	r3, r0
 80035e8:	80bb      	strh	r3, [r7, #4]
 80035ea:	460b      	mov	r3, r1
 80035ec:	807b      	strh	r3, [r7, #2]
 80035ee:	4613      	mov	r3, r2
 80035f0:	803b      	strh	r3, [r7, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <BSP_LCD_FillRect+0x4c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff fe21 	bl	8003240 <BSP_LCD_SetTextColor>
  do
  {
    BSP_LCD_DrawHLine(Xpos, Ypos++, Width);    
 80035fe:	88bb      	ldrh	r3, [r7, #4]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	80ba      	strh	r2, [r7, #4]
 8003604:	887a      	ldrh	r2, [r7, #2]
 8003606:	88f8      	ldrh	r0, [r7, #6]
 8003608:	4619      	mov	r1, r3
 800360a:	f7ff ffa9 	bl	8003560 <BSP_LCD_DrawHLine>
  }
  while(Height--);
 800360e:	883b      	ldrh	r3, [r7, #0]
 8003610:	1e5a      	subs	r2, r3, #1
 8003612:	803a      	strh	r2, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f2      	bne.n	80035fe <BSP_LCD_FillRect+0x2a>
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bd90      	pop	{r4, r7, pc}
 8003620:	20005324 	.word	0x20005324

08003624 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	4b28      	ldr	r3, [pc, #160]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a27      	ldr	r2, [pc, #156]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a20      	ldr	r2, [pc, #128]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	4a19      	ldr	r2, [pc, #100]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 800366c:	f043 0310 	orr.w	r3, r3, #16
 8003670:	6313      	str	r3, [r2, #48]	; 0x30
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <BSP_LCD_MspInit+0xac>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 800367e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003682:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003688:	2302      	movs	r3, #2
 800368a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800368c:	2301      	movs	r3, #1
 800368e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	4619      	mov	r1, r3
 8003696:	480f      	ldr	r0, [pc, #60]	; (80036d4 <BSP_LCD_MspInit+0xb0>)
 8003698:	f001 fc94 	bl	8004fc4 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 800369c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036a0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80036a2:	2300      	movs	r3, #0
 80036a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80036a6:	f107 030c 	add.w	r3, r7, #12
 80036aa:	4619      	mov	r1, r3
 80036ac:	4809      	ldr	r0, [pc, #36]	; (80036d4 <BSP_LCD_MspInit+0xb0>)
 80036ae:	f001 fc89 	bl	8004fc4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80036b2:	2320      	movs	r3, #32
 80036b4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036b6:	2301      	movs	r3, #1
 80036b8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	4619      	mov	r1, r3
 80036c0:	4805      	ldr	r0, [pc, #20]	; (80036d8 <BSP_LCD_MspInit+0xb4>)
 80036c2:	f001 fc7f 	bl	8004fc4 <HAL_GPIO_Init>
}
 80036c6:	bf00      	nop
 80036c8:	3720      	adds	r7, #32
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40021000 	.word	0x40021000

080036dc <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	603a      	str	r2, [r7, #0]
 80036e6:	80fb      	strh	r3, [r7, #6]
 80036e8:	460b      	mov	r3, r1
 80036ea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 80036f4:	4b44      	ldr	r3, [pc, #272]	; (8003808 <DrawChar+0x12c>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	88db      	ldrh	r3, [r3, #6]
 80036fa:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 80036fc:	4b42      	ldr	r3, [pc, #264]	; (8003808 <DrawChar+0x12c>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	889b      	ldrh	r3, [r3, #4]
 8003702:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003704:	8a3b      	ldrh	r3, [r7, #16]
 8003706:	3307      	adds	r3, #7
 8003708:	2b00      	cmp	r3, #0
 800370a:	da00      	bge.n	800370e <DrawChar+0x32>
 800370c:	3307      	adds	r3, #7
 800370e:	10db      	asrs	r3, r3, #3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	b2da      	uxtb	r2, r3
 8003716:	8a3b      	ldrh	r3, [r7, #16]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800371e:	2300      	movs	r3, #0
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	e069      	b.n	80037f8 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003724:	8a3b      	ldrh	r3, [r7, #16]
 8003726:	3307      	adds	r3, #7
 8003728:	2b00      	cmp	r3, #0
 800372a:	da00      	bge.n	800372e <DrawChar+0x52>
 800372c:	3307      	adds	r3, #7
 800372e:	10db      	asrs	r3, r3, #3
 8003730:	461a      	mov	r2, r3
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fb03 f302 	mul.w	r3, r3, r2
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	4413      	add	r3, r2
 800373c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800373e:	8a3b      	ldrh	r3, [r7, #16]
 8003740:	3307      	adds	r3, #7
 8003742:	2b00      	cmp	r3, #0
 8003744:	da00      	bge.n	8003748 <DrawChar+0x6c>
 8003746:	3307      	adds	r3, #7
 8003748:	10db      	asrs	r3, r3, #3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d002      	beq.n	8003754 <DrawChar+0x78>
 800374e:	2b02      	cmp	r3, #2
 8003750:	d004      	beq.n	800375c <DrawChar+0x80>
 8003752:	e00c      	b.n	800376e <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	617b      	str	r3, [r7, #20]
      break;    
 800375a:	e016      	b.n	800378a <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	3201      	adds	r2, #1
 8003766:	7812      	ldrb	r2, [r2, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]
      break;
 800376c:	e00d      	b.n	800378a <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	041a      	lsls	r2, r3, #16
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	3301      	adds	r3, #1
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	4313      	orrs	r3, r2
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	3202      	adds	r2, #2
 8003782:	7812      	ldrb	r2, [r2, #0]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
      break;
 8003788:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e029      	b.n	80037e4 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003790:	8a3a      	ldrh	r2, [r7, #16]
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	1ad2      	subs	r2, r2, r3
 8003796:	7bfb      	ldrb	r3, [r7, #15]
 8003798:	4413      	add	r3, r2
 800379a:	3b01      	subs	r3, #1
 800379c:	2201      	movs	r2, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00c      	beq.n	80037c6 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	88fb      	ldrh	r3, [r7, #6]
 80037b2:	4413      	add	r3, r2
 80037b4:	b298      	uxth	r0, r3
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <DrawChar+0x12c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	88bb      	ldrh	r3, [r7, #4]
 80037be:	4619      	mov	r1, r3
 80037c0:	f7ff feb2 	bl	8003528 <BSP_LCD_DrawPixel>
 80037c4:	e00b      	b.n	80037de <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	4413      	add	r3, r2
 80037ce:	b298      	uxth	r0, r3
 80037d0:	4b0d      	ldr	r3, [pc, #52]	; (8003808 <DrawChar+0x12c>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	88bb      	ldrh	r3, [r7, #4]
 80037d8:	4619      	mov	r1, r3
 80037da:	f7ff fea5 	bl	8003528 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61bb      	str	r3, [r7, #24]
 80037e4:	8a3b      	ldrh	r3, [r7, #16]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d3d1      	bcc.n	8003790 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 80037ec:	88bb      	ldrh	r3, [r7, #4]
 80037ee:	3301      	adds	r3, #1
 80037f0:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	8a7b      	ldrh	r3, [r7, #18]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d391      	bcc.n	8003724 <DrawChar+0x48>
  }
}
 8003800:	bf00      	nop
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20005324 	.word	0x20005324

0800380c <RC_READ_SBUS>:
 * Purpose: To read RC SBUS data
 * Language:  C
 */
#include <rc_input_sbus.h>

uint8_t RC_READ_SBUS(UART_HandleTypeDef *huart,SBUS *sbus) {
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]

	HAL_UART_Receive_DMA(huart, sbus->sbus_msg_bytes, 25);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	3325      	adds	r3, #37	; 0x25
 800381a:	2219      	movs	r2, #25
 800381c:	4619      	mov	r1, r3
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f006 fe34 	bl	800a48c <HAL_UART_Receive_DMA>

	if (sbus->sbus_msg_bytes[0] != 0x0F) {
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800382a:	2b0f      	cmp	r3, #15
 800382c:	d012      	beq.n	8003854 <RC_READ_SBUS+0x48>
		//Error out of sync
		sbus->error_cnt++;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003834:	3301      	adds	r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		if (sbus->error_cnt > SBUS_ERROR_CNT) {
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003844:	2b0a      	cmp	r3, #10
 8003846:	d903      	bls.n	8003850 <RC_READ_SBUS+0x44>
			sbus->error = 1;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		return 0;
 8003850:	2300      	movs	r3, #0
 8003852:	e16e      	b.n	8003b32 <RC_READ_SBUS+0x326>
	}

	sbus->error = 0;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sbus->error_cnt = 0;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sbus->frame_lost = 0;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2020 	strb.w	r2, [r3, #32]
	sbus->failsafe = 0;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800387a:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[2] << 8)) & 0x07FF;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	b21b      	sxth	r3, r3
 8003886:	4313      	orrs	r3, r2
 8003888:	b21b      	sxth	r3, r3
 800388a:	b29b      	uxth	r3, r3
 800388c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003890:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	801a      	strh	r2, [r3, #0]
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
				| ((uint16_t) sbus->sbus_msg_bytes[3] << 5)) & 0x07FF;
 800389c:	08db      	lsrs	r3, r3, #3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	b21a      	sxth	r2, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038a8:	015b      	lsls	r3, r3, #5
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	4313      	orrs	r3, r2
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b6:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	805a      	strh	r2, [r3, #2]
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
				| ((uint16_t) sbus->sbus_msg_bytes[4] << 2)
 80038c2:	099b      	lsrs	r3, r3, #6
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	b21a      	sxth	r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	b21b      	sxth	r3, r3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[5] << 10)) & 0x07FF;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80038dc:	029b      	lsls	r3, r3, #10
 80038de:	b21b      	sxth	r3, r3
 80038e0:	4313      	orrs	r3, r2
 80038e2:	b21b      	sxth	r3, r3
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ea:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	809a      	strh	r2, [r3, #4]
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
				| ((uint16_t) sbus->sbus_msg_bytes[6] << 7)) & 0x07FF;
 80038f6:	085b      	lsrs	r3, r3, #1
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	b21a      	sxth	r2, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003902:	01db      	lsls	r3, r3, #7
 8003904:	b21b      	sxth	r3, r3
 8003906:	4313      	orrs	r3, r2
 8003908:	b21b      	sxth	r3, r3
 800390a:	b29b      	uxth	r3, r3
 800390c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003910:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	80da      	strh	r2, [r3, #6]
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
				| ((uint16_t) sbus->sbus_msg_bytes[7] << 4)) & 0x07FF;
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	b2db      	uxtb	r3, r3
 8003920:	b21a      	sxth	r2, r3
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	b21b      	sxth	r3, r3
 800392c:	4313      	orrs	r3, r2
 800392e:	b21b      	sxth	r3, r3
 8003930:	b29b      	uxth	r3, r3
 8003932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003936:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	811a      	strh	r2, [r3, #8]
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
				| ((uint16_t) sbus->sbus_msg_bytes[8] << 1)
 8003942:	09db      	lsrs	r3, r3, #7
 8003944:	b2db      	uxtb	r3, r3
 8003946:	b21a      	sxth	r2, r3
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	b21b      	sxth	r3, r3
 8003952:	4313      	orrs	r3, r2
 8003954:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[9] << 9)) & 0x07FF;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800395c:	025b      	lsls	r3, r3, #9
 800395e:	b21b      	sxth	r3, r3
 8003960:	4313      	orrs	r3, r2
 8003962:	b21b      	sxth	r3, r3
 8003964:	b29b      	uxth	r3, r3
 8003966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	815a      	strh	r2, [r3, #10]
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				| ((uint16_t) sbus->sbus_msg_bytes[10] << 6)) & 0x07FF;
 8003976:	089b      	lsrs	r3, r3, #2
 8003978:	b2db      	uxtb	r3, r3
 800397a:	b21a      	sxth	r2, r3
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003982:	019b      	lsls	r3, r3, #6
 8003984:	b21b      	sxth	r3, r3
 8003986:	4313      	orrs	r3, r2
 8003988:	b21b      	sxth	r3, r3
 800398a:	b29b      	uxth	r3, r3
 800398c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003990:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	819a      	strh	r2, [r3, #12]
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
				| ((uint16_t) sbus->sbus_msg_bytes[11] << 3)) & 0x07FF;
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	b21a      	sxth	r2, r3
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	b21b      	sxth	r3, r3
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b21b      	sxth	r3, r3
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039b6:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	81da      	strh	r2, [r3, #14]
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80039c2:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[13] << 8)) & 0x07FF;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	b21b      	sxth	r3, r3
 80039ce:	4313      	orrs	r3, r2
 80039d0:	b21b      	sxth	r3, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d8:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	821a      	strh	r2, [r3, #16]
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
				| ((uint16_t) sbus->sbus_msg_bytes[14] << 5)) & 0x07FF;
 80039e4:	08db      	lsrs	r3, r3, #3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	b21a      	sxth	r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80039f0:	015b      	lsls	r3, r3, #5
 80039f2:	b21b      	sxth	r3, r3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	b21b      	sxth	r3, r3
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039fe:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	825a      	strh	r2, [r3, #18]
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
				| ((uint16_t) sbus->sbus_msg_bytes[15] << 2)
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	b21a      	sxth	r2, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	b21b      	sxth	r3, r3
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[16] << 10)) & 0x07FF;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a24:	029b      	lsls	r3, r3, #10
 8003a26:	b21b      	sxth	r3, r3
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	b21b      	sxth	r3, r3
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a32:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	829a      	strh	r2, [r3, #20]
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				| ((uint16_t) sbus->sbus_msg_bytes[17] << 7)) & 0x07FF;
 8003a3e:	085b      	lsrs	r3, r3, #1
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	b21a      	sxth	r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a4a:	01db      	lsls	r3, r3, #7
 8003a4c:	b21b      	sxth	r3, r3
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	b21b      	sxth	r3, r3
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a58:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	82da      	strh	r2, [r3, #22]
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
				| ((uint16_t) sbus->sbus_msg_bytes[18] << 4)) & 0x07FF;
 8003a64:	091b      	lsrs	r3, r3, #4
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	b21a      	sxth	r2, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	b21b      	sxth	r3, r3
 8003a74:	4313      	orrs	r3, r2
 8003a76:	b21b      	sxth	r3, r3
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a7e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	831a      	strh	r2, [r3, #24]
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
				| ((uint16_t) sbus->sbus_msg_bytes[19] << 1)
 8003a8a:	09db      	lsrs	r3, r3, #7
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	b21a      	sxth	r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	b21b      	sxth	r3, r3
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[20] << 9)) & 0x07FF;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa4:	025b      	lsls	r3, r3, #9
 8003aa6:	b21b      	sxth	r3, r3
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	b21b      	sxth	r3, r3
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	835a      	strh	r2, [r3, #26]
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				| ((uint16_t) sbus->sbus_msg_bytes[21] << 6)) & 0x07FF;
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	b21a      	sxth	r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003aca:	019b      	lsls	r3, r3, #6
 8003acc:	b21b      	sxth	r3, r3
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	b21b      	sxth	r3, r3
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad8:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	839a      	strh	r2, [r3, #28]
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
				| ((uint16_t) sbus->sbus_msg_bytes[22] << 3)) & 0x07FF;
 8003ae4:	095b      	lsrs	r3, r3, #5
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	b21a      	sxth	r2, r3
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	b21b      	sxth	r3, r3
 8003af4:	4313      	orrs	r3, r2
 8003af6:	b21b      	sxth	r3, r3
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003afe:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	83da      	strh	r2, [r3, #30]
	//for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
	//	sbus->PWM_US_RC_CH[i] = MAP(sbus->PWM_US_RC_CH[i], SBUS_IN_MIN_PWM,
	//			SBUS_IN_MAX_PWM, SBUS_OUT_MIN_PWM, SBUS_OUT_MAX_PWM);
	//}

	if (sbus->sbus_msg_bytes[23] & (1 << 2)) {
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <RC_READ_SBUS+0x30e>
		sbus->frame_lost = 1;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2020 	strb.w	r2, [r3, #32]
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 3)) {
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <RC_READ_SBUS+0x324>
		sbus->failsafe = 1;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		sbus->arm = 0;
		sbus->disarm = 0;
	}
#endif

	return 1;
 8003b30:	2301      	movs	r3, #1
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b40:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <HAL_Init+0x40>)
 8003b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_Init+0x40>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <HAL_Init+0x40>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_Init+0x40>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a07      	ldr	r2, [pc, #28]	; (8003b7c <HAL_Init+0x40>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b64:	2003      	movs	r0, #3
 8003b66:	f000 fb6c 	bl	8004242 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f7fe fbee 	bl	800234c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b70:	f7fd fdaa 	bl	80016c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	40023c00 	.word	0x40023c00

08003b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_IncTick+0x20>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_IncTick+0x24>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4413      	add	r3, r2
 8003b90:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <HAL_IncTick+0x24>)
 8003b92:	6013      	str	r3, [r2, #0]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000070 	.word	0x20000070
 8003ba4:	20005330 	.word	0x20005330

08003ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return uwTick;
 8003bac:	4b03      	ldr	r3, [pc, #12]	; (8003bbc <HAL_GetTick+0x14>)
 8003bae:	681b      	ldr	r3, [r3, #0]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	20005330 	.word	0x20005330

08003bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b084      	sub	sp, #16
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc8:	f7ff ffee 	bl	8003ba8 <HAL_GetTick>
 8003bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d005      	beq.n	8003be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bda:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_Delay+0x40>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003be6:	bf00      	nop
 8003be8:	f7ff ffde 	bl	8003ba8 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d8f7      	bhi.n	8003be8 <HAL_Delay+0x28>
  {
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	20000070 	.word	0x20000070

08003c04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e033      	b.n	8003c82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7fd fd78 	bl	8001718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d118      	bne.n	8003c74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c4a:	f023 0302 	bic.w	r3, r3, #2
 8003c4e:	f043 0202 	orr.w	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f94a 	bl	8003ef0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f023 0303 	bic.w	r3, r3, #3
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
 8003c72:	e001      	b.n	8003c78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_ADC_ConfigChannel+0x1c>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e113      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x244>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d925      	bls.n	8003d04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68d9      	ldr	r1, [r3, #12]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	3b1e      	subs	r3, #30
 8003cce:	2207      	movs	r2, #7
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	400a      	ands	r2, r1
 8003cdc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68d9      	ldr	r1, [r3, #12]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	4403      	add	r3, r0
 8003cf6:	3b1e      	subs	r3, #30
 8003cf8:	409a      	lsls	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	e022      	b.n	8003d4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6919      	ldr	r1, [r3, #16]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	4613      	mov	r3, r2
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	4413      	add	r3, r2
 8003d18:	2207      	movs	r2, #7
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	400a      	ands	r2, r1
 8003d26:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6919      	ldr	r1, [r3, #16]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	4618      	mov	r0, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4403      	add	r3, r0
 8003d40:	409a      	lsls	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d824      	bhi.n	8003d9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	3b05      	subs	r3, #5
 8003d64:	221f      	movs	r2, #31
 8003d66:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6a:	43da      	mvns	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	400a      	ands	r2, r1
 8003d72:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4618      	mov	r0, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3b05      	subs	r3, #5
 8003d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
 8003d9a:	e04c      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d824      	bhi.n	8003dee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	3b23      	subs	r3, #35	; 0x23
 8003db6:	221f      	movs	r2, #31
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	43da      	mvns	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	400a      	ands	r2, r1
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	3b23      	subs	r3, #35	; 0x23
 8003de0:	fa00 f203 	lsl.w	r2, r0, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
 8003dec:	e023      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3b41      	subs	r3, #65	; 0x41
 8003e00:	221f      	movs	r2, #31
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43da      	mvns	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	3b41      	subs	r3, #65	; 0x41
 8003e2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <HAL_ADC_ConfigChannel+0x250>)
 8003e38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a28      	ldr	r2, [pc, #160]	; (8003ee0 <HAL_ADC_ConfigChannel+0x254>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10f      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x1d8>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b12      	cmp	r3, #18
 8003e4a:	d10b      	bne.n	8003e64 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1d      	ldr	r2, [pc, #116]	; (8003ee0 <HAL_ADC_ConfigChannel+0x254>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d12b      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x23a>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <HAL_ADC_ConfigChannel+0x258>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d003      	beq.n	8003e80 <HAL_ADC_ConfigChannel+0x1f4>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b11      	cmp	r3, #17
 8003e7e:	d122      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a11      	ldr	r2, [pc, #68]	; (8003ee4 <HAL_ADC_ConfigChannel+0x258>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d111      	bne.n	8003ec6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_ADC_ConfigChannel+0x25c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <HAL_ADC_ConfigChannel+0x260>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	0c9a      	lsrs	r2, r3, #18
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003eb8:	e002      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f9      	bne.n	8003eba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	40012300 	.word	0x40012300
 8003ee0:	40012000 	.word	0x40012000
 8003ee4:	10000012 	.word	0x10000012
 8003ee8:	20000010 	.word	0x20000010
 8003eec:	431bde83 	.word	0x431bde83

08003ef0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ef8:	4b79      	ldr	r3, [pc, #484]	; (80040e0 <ADC_Init+0x1f0>)
 8003efa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	431a      	orrs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	021a      	lsls	r2, r3, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003f48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6859      	ldr	r1, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6899      	ldr	r1, [r3, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	4a58      	ldr	r2, [pc, #352]	; (80040e4 <ADC_Init+0x1f4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d022      	beq.n	8003fce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6899      	ldr	r1, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6899      	ldr	r1, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	609a      	str	r2, [r3, #8]
 8003fcc:	e00f      	b.n	8003fee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003fdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	689a      	ldr	r2, [r3, #8]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003fec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 0202 	bic.w	r2, r2, #2
 8003ffc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6899      	ldr	r1, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	7e1b      	ldrb	r3, [r3, #24]
 8004008:	005a      	lsls	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01b      	beq.n	8004054 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800402a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800403a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	3b01      	subs	r3, #1
 8004048:	035a      	lsls	r2, r3, #13
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	e007      	b.n	8004064 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004062:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	3b01      	subs	r3, #1
 8004080:	051a      	lsls	r2, r3, #20
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6899      	ldr	r1, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040a6:	025a      	lsls	r2, r3, #9
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689a      	ldr	r2, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6899      	ldr	r1, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	029a      	lsls	r2, r3, #10
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
}
 80040d4:	bf00      	nop
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40012300 	.word	0x40012300
 80040e4:	0f000001 	.word	0x0f000001

080040e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <__NVIC_SetPriorityGrouping+0x44>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004104:	4013      	ands	r3, r2
 8004106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800411a:	4a04      	ldr	r2, [pc, #16]	; (800412c <__NVIC_SetPriorityGrouping+0x44>)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	60d3      	str	r3, [r2, #12]
}
 8004120:	bf00      	nop
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <__NVIC_GetPriorityGrouping+0x18>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	f003 0307 	and.w	r3, r3, #7
}
 800413e:	4618      	mov	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	e000ed00 	.word	0xe000ed00

0800414c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415a:	2b00      	cmp	r3, #0
 800415c:	db0b      	blt.n	8004176 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	f003 021f 	and.w	r2, r3, #31
 8004164:	4907      	ldr	r1, [pc, #28]	; (8004184 <__NVIC_EnableIRQ+0x38>)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	095b      	lsrs	r3, r3, #5
 800416c:	2001      	movs	r0, #1
 800416e:	fa00 f202 	lsl.w	r2, r0, r2
 8004172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	e000e100 	.word	0xe000e100

08004188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	6039      	str	r1, [r7, #0]
 8004192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004198:	2b00      	cmp	r3, #0
 800419a:	db0a      	blt.n	80041b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	490c      	ldr	r1, [pc, #48]	; (80041d4 <__NVIC_SetPriority+0x4c>)
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	0112      	lsls	r2, r2, #4
 80041a8:	b2d2      	uxtb	r2, r2
 80041aa:	440b      	add	r3, r1
 80041ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041b0:	e00a      	b.n	80041c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	4908      	ldr	r1, [pc, #32]	; (80041d8 <__NVIC_SetPriority+0x50>)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	3b04      	subs	r3, #4
 80041c0:	0112      	lsls	r2, r2, #4
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	440b      	add	r3, r1
 80041c6:	761a      	strb	r2, [r3, #24]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000e100 	.word	0xe000e100
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041dc:	b480      	push	{r7}
 80041de:	b089      	sub	sp, #36	; 0x24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f1c3 0307 	rsb	r3, r3, #7
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	bf28      	it	cs
 80041fa:	2304      	movcs	r3, #4
 80041fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3304      	adds	r3, #4
 8004202:	2b06      	cmp	r3, #6
 8004204:	d902      	bls.n	800420c <NVIC_EncodePriority+0x30>
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3b03      	subs	r3, #3
 800420a:	e000      	b.n	800420e <NVIC_EncodePriority+0x32>
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	f04f 32ff 	mov.w	r2, #4294967295
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	43da      	mvns	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	401a      	ands	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004224:	f04f 31ff 	mov.w	r1, #4294967295
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	43d9      	mvns	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004234:	4313      	orrs	r3, r2
         );
}
 8004236:	4618      	mov	r0, r3
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7ff ff4c 	bl	80040e8 <__NVIC_SetPriorityGrouping>
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800426a:	f7ff ff61 	bl	8004130 <__NVIC_GetPriorityGrouping>
 800426e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	6978      	ldr	r0, [r7, #20]
 8004276:	f7ff ffb1 	bl	80041dc <NVIC_EncodePriority>
 800427a:	4602      	mov	r2, r0
 800427c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff80 	bl	8004188 <__NVIC_SetPriority>
}
 8004288:	bf00      	nop
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800429a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ff54 	bl	800414c <__NVIC_EnableIRQ>
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e014      	b.n	80042e8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	791b      	ldrb	r3, [r3, #4]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fd fa9e 	bl	8001810 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004306:	d118      	bne.n	800433a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2204      	movs	r2, #4
 800430c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f043 0201 	orr.w	r2, r3, #1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004322:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004332:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f825 	bl	8004384 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004348:	d118      	bne.n	800437c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2204      	movs	r2, #4
 800434e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f043 0202 	orr.w	r2, r3, #2
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004364:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004374:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f85b 	bl	8004432 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	2300      	movs	r3, #0
 80043aa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	795b      	ldrb	r3, [r3, #5]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_DAC_ConfigChannel+0x20>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e036      	b.n	8004426 <HAL_DAC_ConfigChannel+0x8e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2202      	movs	r2, #2
 80043c2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80043cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	4013      	ands	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6819      	ldr	r1, [r3, #0]
 8004406:	22c0      	movs	r2, #192	; 0xc0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43da      	mvns	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	400a      	ands	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2201      	movs	r2, #1
 800441c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	371c      	adds	r7, #28
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0cf      	b.n	80045fa <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a69      	ldr	r2, [pc, #420]	; (8004604 <HAL_DFSDM_ChannelInit+0x1bc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00e      	beq.n	8004482 <HAL_DFSDM_ChannelInit+0x3a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a67      	ldr	r2, [pc, #412]	; (8004608 <HAL_DFSDM_ChannelInit+0x1c0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d009      	beq.n	8004482 <HAL_DFSDM_ChannelInit+0x3a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a66      	ldr	r2, [pc, #408]	; (800460c <HAL_DFSDM_ChannelInit+0x1c4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d004      	beq.n	8004482 <HAL_DFSDM_ChannelInit+0x3a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a64      	ldr	r2, [pc, #400]	; (8004610 <HAL_DFSDM_ChannelInit+0x1c8>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d106      	bne.n	8004490 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8004482:	4b64      	ldr	r3, [pc, #400]	; (8004614 <HAL_DFSDM_ChannelInit+0x1cc>)
 8004484:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8004486:	4b64      	ldr	r3, [pc, #400]	; (8004618 <HAL_DFSDM_ChannelInit+0x1d0>)
 8004488:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 800448a:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <HAL_DFSDM_ChannelInit+0x1bc>)
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e005      	b.n	800449c <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8004490:	4b62      	ldr	r3, [pc, #392]	; (800461c <HAL_DFSDM_ChannelInit+0x1d4>)
 8004492:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8004494:	4b62      	ldr	r3, [pc, #392]	; (8004620 <HAL_DFSDM_ChannelInit+0x1d8>)
 8004496:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8004498:	4b62      	ldr	r3, [pc, #392]	; (8004624 <HAL_DFSDM_ChannelInit+0x1dc>)
 800449a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f8c1 	bl	8004628 <DFSDM_GetChannelFromInstance>
 80044a6:	4603      	mov	r3, r0
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4413      	add	r3, r2
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0a0      	b.n	80045fa <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fd f9f5 	bl	80018a8 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d125      	bne.n	800451c <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	791b      	ldrb	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d108      	bne.n	8004510 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	3b01      	subs	r3, #1
 8004508:	041b      	lsls	r3, r3, #16
 800450a:	431a      	orrs	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800452a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6819      	ldr	r1, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800453a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004540:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 020f 	bic.w	r2, r2, #15
 8004558:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004580:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6899      	ldr	r1, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004590:	3b01      	subs	r3, #1
 8004592:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f002 0207 	and.w	r2, r2, #7
 80045ac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045d8:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f81e 	bl	8004628 <DFSDM_GetChannelFromInstance>
 80045ec:	4603      	mov	r3, r0
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40016000 	.word	0x40016000
 8004608:	40016020 	.word	0x40016020
 800460c:	40016040 	.word	0x40016040
 8004610:	40016060 	.word	0x40016060
 8004614:	20000158 	.word	0x20000158
 8004618:	2000015c 	.word	0x2000015c
 800461c:	2000016c 	.word	0x2000016c
 8004620:	20000170 	.word	0x20000170
 8004624:	40016400 	.word	0x40016400

08004628 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a24      	ldr	r2, [pc, #144]	; (80046c4 <DFSDM_GetChannelFromInstance+0x9c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <DFSDM_GetChannelFromInstance+0x18>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <DFSDM_GetChannelFromInstance+0xa0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d102      	bne.n	8004646 <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e037      	b.n	80046b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a20      	ldr	r2, [pc, #128]	; (80046cc <DFSDM_GetChannelFromInstance+0xa4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <DFSDM_GetChannelFromInstance+0x2e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <DFSDM_GetChannelFromInstance+0xa8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d102      	bne.n	800465c <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8004656:	2301      	movs	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	e02c      	b.n	80046b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <DFSDM_GetChannelFromInstance+0xac>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d003      	beq.n	800466c <DFSDM_GetChannelFromInstance+0x44>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <DFSDM_GetChannelFromInstance+0xb0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d102      	bne.n	8004672 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 800466c:	2302      	movs	r3, #2
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e021      	b.n	80046b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <DFSDM_GetChannelFromInstance+0xb4>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d003      	beq.n	8004682 <DFSDM_GetChannelFromInstance+0x5a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <DFSDM_GetChannelFromInstance+0xb8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d102      	bne.n	8004688 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8004682:	2303      	movs	r3, #3
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e016      	b.n	80046b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <DFSDM_GetChannelFromInstance+0xbc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d102      	bne.n	8004696 <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8004690:	2304      	movs	r3, #4
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e00f      	b.n	80046b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a13      	ldr	r2, [pc, #76]	; (80046e8 <DFSDM_GetChannelFromInstance+0xc0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d102      	bne.n	80046a4 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 800469e:	2305      	movs	r3, #5
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e008      	b.n	80046b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a11      	ldr	r2, [pc, #68]	; (80046ec <DFSDM_GetChannelFromInstance+0xc4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d102      	bne.n	80046b2 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 80046ac:	2306      	movs	r3, #6
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e001      	b.n	80046b6 <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 80046b2:	2307      	movs	r3, #7
 80046b4:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 80046b6:	68fb      	ldr	r3, [r7, #12]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	40016000 	.word	0x40016000
 80046c8:	40016400 	.word	0x40016400
 80046cc:	40016020 	.word	0x40016020
 80046d0:	40016420 	.word	0x40016420
 80046d4:	40016040 	.word	0x40016040
 80046d8:	40016440 	.word	0x40016440
 80046dc:	40016060 	.word	0x40016060
 80046e0:	40016460 	.word	0x40016460
 80046e4:	40016480 	.word	0x40016480
 80046e8:	400164a0 	.word	0x400164a0
 80046ec:	400164c0 	.word	0x400164c0

080046f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046fc:	f7ff fa54 	bl	8003ba8 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e099      	b.n	8004840 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472c:	e00f      	b.n	800474e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472e:	f7ff fa3b 	bl	8003ba8 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b05      	cmp	r3, #5
 800473a:	d908      	bls.n	800474e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e078      	b.n	8004840 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e8      	bne.n	800472e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	4b38      	ldr	r3, [pc, #224]	; (8004848 <HAL_DMA_Init+0x158>)
 8004768:	4013      	ands	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800477a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d107      	bne.n	80047b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	4313      	orrs	r3, r2
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0307 	bic.w	r3, r3, #7
 80047ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d117      	bne.n	8004812 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00e      	beq.n	8004812 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fa91 	bl	8004d1c <DMA_CheckFifoParam>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800480e:	2301      	movs	r3, #1
 8004810:	e016      	b.n	8004840 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fa48 	bl	8004cb0 <DMA_CalcBaseAndBitshift>
 8004820:	4603      	mov	r3, r0
 8004822:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004828:	223f      	movs	r2, #63	; 0x3f
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	e010803f 	.word	0xe010803f

0800484c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004862:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_DMA_Start_IT+0x26>
 800486e:	2302      	movs	r3, #2
 8004870:	e040      	b.n	80048f4 <HAL_DMA_Start_IT+0xa8>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	d12f      	bne.n	80048e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 f9da 	bl	8004c54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a4:	223f      	movs	r2, #63	; 0x3f
 80048a6:	409a      	lsls	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0216 	orr.w	r2, r2, #22
 80048ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0208 	orr.w	r2, r2, #8
 80048d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e005      	b.n	80048f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048ee:	2302      	movs	r3, #2
 80048f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d004      	beq.n	800491a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2280      	movs	r2, #128	; 0x80
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e00c      	b.n	8004934 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2205      	movs	r2, #5
 800491e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800494c:	4b92      	ldr	r3, [pc, #584]	; (8004b98 <HAL_DMA_IRQHandler+0x258>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a92      	ldr	r2, [pc, #584]	; (8004b9c <HAL_DMA_IRQHandler+0x25c>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0a9b      	lsrs	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496a:	2208      	movs	r2, #8
 800496c:	409a      	lsls	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01a      	beq.n	80049ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0204 	bic.w	r2, r2, #4
 8004992:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	2208      	movs	r2, #8
 800499a:	409a      	lsls	r2, r3
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b0:	2201      	movs	r2, #1
 80049b2:	409a      	lsls	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	2201      	movs	r2, #1
 80049d0:	409a      	lsls	r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f043 0202 	orr.w	r2, r3, #2
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	2204      	movs	r2, #4
 80049e8:	409a      	lsls	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d012      	beq.n	8004a18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	2204      	movs	r2, #4
 8004a06:	409a      	lsls	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d043      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d03c      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d018      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d108      	bne.n	8004a70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d024      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
 8004a6e:	e01f      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
 8004a80:	e016      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0208 	bic.w	r2, r2, #8
 8004a9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 808e 	beq.w	8004bde <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8086 	beq.w	8004bde <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d136      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0216 	bic.w	r2, r2, #22
 8004af8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <HAL_DMA_IRQHandler+0x1da>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0208 	bic.w	r2, r2, #8
 8004b28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	223f      	movs	r2, #63	; 0x3f
 8004b30:	409a      	lsls	r2, r3
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d07d      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
        }
        return;
 8004b56:	e078      	b.n	8004c4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01c      	beq.n	8004ba0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d108      	bne.n	8004b86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d030      	beq.n	8004bde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
 8004b84:	e02b      	b.n	8004bde <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d027      	beq.n	8004bde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	4798      	blx	r3
 8004b96:	e022      	b.n	8004bde <HAL_DMA_IRQHandler+0x29e>
 8004b98:	20000010 	.word	0x20000010
 8004b9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10f      	bne.n	8004bce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0210 	bic.w	r2, r2, #16
 8004bbc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d032      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d022      	beq.n	8004c38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0201 	bic.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d307      	bcc.n	8004c26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f2      	bne.n	8004c0a <HAL_DMA_IRQHandler+0x2ca>
 8004c24:	e000      	b.n	8004c28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004c26:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
 8004c48:	e000      	b.n	8004c4c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c4a:	bf00      	nop
    }
  }
}
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop

08004c54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d108      	bne.n	8004c94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c92:	e007      	b.n	8004ca4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	3b10      	subs	r3, #16
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <DMA_CalcBaseAndBitshift+0x64>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cca:	4a13      	ldr	r2, [pc, #76]	; (8004d18 <DMA_CalcBaseAndBitshift+0x68>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d909      	bls.n	8004cf2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	659a      	str	r2, [r3, #88]	; 0x58
 8004cf0:	e007      	b.n	8004d02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cfa:	f023 0303 	bic.w	r3, r3, #3
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	aaaaaaab 	.word	0xaaaaaaab
 8004d18:	08015298 	.word	0x08015298

08004d1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11f      	bne.n	8004d76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d855      	bhi.n	8004de8 <DMA_CheckFifoParam+0xcc>
 8004d3c:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <DMA_CheckFifoParam+0x28>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d67 	.word	0x08004d67
 8004d4c:	08004d55 	.word	0x08004d55
 8004d50:	08004de9 	.word	0x08004de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d045      	beq.n	8004dec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d64:	e042      	b.n	8004dec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d6e:	d13f      	bne.n	8004df0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d74:	e03c      	b.n	8004df0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d7e:	d121      	bne.n	8004dc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d836      	bhi.n	8004df4 <DMA_CheckFifoParam+0xd8>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <DMA_CheckFifoParam+0x70>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004da3 	.word	0x08004da3
 8004d94:	08004d9d 	.word	0x08004d9d
 8004d98:	08004db5 	.word	0x08004db5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e02f      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d024      	beq.n	8004df8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db2:	e021      	b.n	8004df8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dbc:	d11e      	bne.n	8004dfc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dc2:	e01b      	b.n	8004dfc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d902      	bls.n	8004dd0 <DMA_CheckFifoParam+0xb4>
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d003      	beq.n	8004dd6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004dce:	e018      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	e015      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00e      	beq.n	8004e00 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
      break;
 8004de6:	e00b      	b.n	8004e00 <DMA_CheckFifoParam+0xe4>
      break;
 8004de8:	bf00      	nop
 8004dea:	e00a      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      break;
 8004dec:	bf00      	nop
 8004dee:	e008      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      break;
 8004df0:	bf00      	nop
 8004df2:	e006      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      break;
 8004df4:	bf00      	nop
 8004df6:	e004      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      break;
 8004df8:	bf00      	nop
 8004dfa:	e002      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      break;   
 8004dfc:	bf00      	nop
 8004dfe:	e000      	b.n	8004e02 <DMA_CheckFifoParam+0xe6>
      break;
 8004e00:	bf00      	nop
    }
  } 
  
  return status; 
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e081      	b.n	8004f26 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc fe48 	bl	8001acc <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	; 0x24
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e60:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e70:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d107      	bne.n	8004e8a <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	e006      	b.n	8004e98 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d104      	bne.n	8004eaa <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6812      	ldr	r2, [r2, #0]
 8004eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ecc:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	ea42 0103 	orr.w	r1, r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69d9      	ldr	r1, [r3, #28]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1a      	ldr	r2, [r3, #32]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f042 0201 	orr.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d138      	bne.n	8004fb6 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e032      	b.n	8004fb8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2224      	movs	r2, #36	; 0x24
 8004f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f80:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6819      	ldr	r1, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e000      	b.n	8004fb8 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
  }
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b089      	sub	sp, #36	; 0x24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
 8004fde:	e165      	b.n	80052ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	f040 8154 	bne.w	80052a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d00b      	beq.n	800501e <HAL_GPIO_Init+0x5a>
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d007      	beq.n	800501e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005012:	2b11      	cmp	r3, #17
 8005014:	d003      	beq.n	800501e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b12      	cmp	r3, #18
 800501c:	d130      	bne.n	8005080 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	2203      	movs	r2, #3
 800502a:	fa02 f303 	lsl.w	r3, r2, r3
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005054:	2201      	movs	r2, #1
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 0201 	and.w	r2, r3, #1
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	fa02 f303 	lsl.w	r3, r2, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	2203      	movs	r2, #3
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d003      	beq.n	80050c0 <HAL_GPIO_Init+0xfc>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b12      	cmp	r3, #18
 80050be:	d123      	bne.n	8005108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	08da      	lsrs	r2, r3, #3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3208      	adds	r2, #8
 80050c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	220f      	movs	r2, #15
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4013      	ands	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	fa02 f303 	lsl.w	r3, r2, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	08da      	lsrs	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3208      	adds	r2, #8
 8005102:	69b9      	ldr	r1, [r7, #24]
 8005104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	2203      	movs	r2, #3
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 0203 	and.w	r2, r3, #3
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4313      	orrs	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80ae 	beq.w	80052a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	4b5c      	ldr	r3, [pc, #368]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 8005150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005152:	4a5b      	ldr	r2, [pc, #364]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 8005154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005158:	6453      	str	r3, [r2, #68]	; 0x44
 800515a:	4b59      	ldr	r3, [pc, #356]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 800515c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005166:	4a57      	ldr	r2, [pc, #348]	; (80052c4 <HAL_GPIO_Init+0x300>)
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	089b      	lsrs	r3, r3, #2
 800516c:	3302      	adds	r3, #2
 800516e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	220f      	movs	r2, #15
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	4013      	ands	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a4e      	ldr	r2, [pc, #312]	; (80052c8 <HAL_GPIO_Init+0x304>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d025      	beq.n	80051de <HAL_GPIO_Init+0x21a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4d      	ldr	r2, [pc, #308]	; (80052cc <HAL_GPIO_Init+0x308>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01f      	beq.n	80051da <HAL_GPIO_Init+0x216>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4c      	ldr	r2, [pc, #304]	; (80052d0 <HAL_GPIO_Init+0x30c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d019      	beq.n	80051d6 <HAL_GPIO_Init+0x212>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <HAL_GPIO_Init+0x310>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <HAL_GPIO_Init+0x20e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4a      	ldr	r2, [pc, #296]	; (80052d8 <HAL_GPIO_Init+0x314>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00d      	beq.n	80051ce <HAL_GPIO_Init+0x20a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a49      	ldr	r2, [pc, #292]	; (80052dc <HAL_GPIO_Init+0x318>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <HAL_GPIO_Init+0x206>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a48      	ldr	r2, [pc, #288]	; (80052e0 <HAL_GPIO_Init+0x31c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_GPIO_Init+0x202>
 80051c2:	2306      	movs	r3, #6
 80051c4:	e00c      	b.n	80051e0 <HAL_GPIO_Init+0x21c>
 80051c6:	2307      	movs	r3, #7
 80051c8:	e00a      	b.n	80051e0 <HAL_GPIO_Init+0x21c>
 80051ca:	2305      	movs	r3, #5
 80051cc:	e008      	b.n	80051e0 <HAL_GPIO_Init+0x21c>
 80051ce:	2304      	movs	r3, #4
 80051d0:	e006      	b.n	80051e0 <HAL_GPIO_Init+0x21c>
 80051d2:	2303      	movs	r3, #3
 80051d4:	e004      	b.n	80051e0 <HAL_GPIO_Init+0x21c>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e002      	b.n	80051e0 <HAL_GPIO_Init+0x21c>
 80051da:	2301      	movs	r3, #1
 80051dc:	e000      	b.n	80051e0 <HAL_GPIO_Init+0x21c>
 80051de:	2300      	movs	r3, #0
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	f002 0203 	and.w	r2, r2, #3
 80051e6:	0092      	lsls	r2, r2, #2
 80051e8:	4093      	lsls	r3, r2
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051f0:	4934      	ldr	r1, [pc, #208]	; (80052c4 <HAL_GPIO_Init+0x300>)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	089b      	lsrs	r3, r3, #2
 80051f6:	3302      	adds	r3, #2
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051fe:	4b39      	ldr	r3, [pc, #228]	; (80052e4 <HAL_GPIO_Init+0x320>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	43db      	mvns	r3, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4013      	ands	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005222:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <HAL_GPIO_Init+0x320>)
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005228:	4b2e      	ldr	r3, [pc, #184]	; (80052e4 <HAL_GPIO_Init+0x320>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800524c:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <HAL_GPIO_Init+0x320>)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005252:	4b24      	ldr	r3, [pc, #144]	; (80052e4 <HAL_GPIO_Init+0x320>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	43db      	mvns	r3, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4013      	ands	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005276:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_GPIO_Init+0x320>)
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800527c:	4b19      	ldr	r3, [pc, #100]	; (80052e4 <HAL_GPIO_Init+0x320>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	43db      	mvns	r3, r3
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	4013      	ands	r3, r2
 800528a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80052a0:	4a10      	ldr	r2, [pc, #64]	; (80052e4 <HAL_GPIO_Init+0x320>)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	3301      	adds	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	f67f ae96 	bls.w	8004fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052b4:	bf00      	nop
 80052b6:	3724      	adds	r7, #36	; 0x24
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40023800 	.word	0x40023800
 80052c4:	40013800 	.word	0x40013800
 80052c8:	40020000 	.word	0x40020000
 80052cc:	40020400 	.word	0x40020400
 80052d0:	40020800 	.word	0x40020800
 80052d4:	40020c00 	.word	0x40020c00
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40021400 	.word	0x40021400
 80052e0:	40021800 	.word	0x40021800
 80052e4:	40013c00 	.word	0x40013c00

080052e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	807b      	strh	r3, [r7, #2]
 80052f4:	4613      	mov	r3, r2
 80052f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052f8:	787b      	ldrb	r3, [r7, #1]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052fe:	887a      	ldrh	r2, [r7, #2]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005304:	e003      	b.n	800530e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005306:	887b      	ldrh	r3, [r7, #2]
 8005308:	041a      	lsls	r2, r3, #16
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	619a      	str	r2, [r3, #24]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800531a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531c:	b08f      	sub	sp, #60	; 0x3c
 800531e:	af0a      	add	r7, sp, #40	; 0x28
 8005320:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e054      	b.n	80053d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f00c fd84 	bl	8011e54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2203      	movs	r2, #3
 8005350:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d102      	bne.n	8005366 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f006 fd86 	bl	800be7c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	687e      	ldr	r6, [r7, #4]
 8005378:	466d      	mov	r5, sp
 800537a:	f106 0410 	add.w	r4, r6, #16
 800537e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005386:	e894 0003 	ldmia.w	r4, {r0, r1}
 800538a:	e885 0003 	stmia.w	r5, {r0, r1}
 800538e:	1d33      	adds	r3, r6, #4
 8005390:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005392:	6838      	ldr	r0, [r7, #0]
 8005394:	f006 fd00 	bl	800bd98 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2101      	movs	r1, #1
 800539e:	4618      	mov	r0, r3
 80053a0:	f006 fd7d 	bl	800be9e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	603b      	str	r3, [r7, #0]
 80053aa:	687e      	ldr	r6, [r7, #4]
 80053ac:	466d      	mov	r5, sp
 80053ae:	f106 0410 	add.w	r4, r6, #16
 80053b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053be:	e885 0003 	stmia.w	r5, {r0, r1}
 80053c2:	1d33      	adds	r3, r6, #4
 80053c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053c6:	6838      	ldr	r0, [r7, #0]
 80053c8:	f006 fe90 	bl	800c0ec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80053de:	b590      	push	{r4, r7, lr}
 80053e0:	b089      	sub	sp, #36	; 0x24
 80053e2:	af04      	add	r7, sp, #16
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	461a      	mov	r2, r3
 80053ec:	4603      	mov	r3, r0
 80053ee:	70fb      	strb	r3, [r7, #3]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70bb      	strb	r3, [r7, #2]
 80053f4:	4613      	mov	r3, r2
 80053f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_HCD_HC_Init+0x28>
 8005402:	2302      	movs	r3, #2
 8005404:	e07f      	b.n	8005506 <HAL_HCD_HC_Init+0x128>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	440b      	add	r3, r1
 800541c:	333d      	adds	r3, #61	; 0x3d
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	440b      	add	r3, r1
 8005430:	3338      	adds	r3, #56	; 0x38
 8005432:	787a      	ldrb	r2, [r7, #1]
 8005434:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8005436:	78fa      	ldrb	r2, [r7, #3]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	440b      	add	r3, r1
 8005444:	3340      	adds	r3, #64	; 0x40
 8005446:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005448:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	440b      	add	r3, r1
 8005458:	3339      	adds	r3, #57	; 0x39
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	440b      	add	r3, r1
 800546c:	333f      	adds	r3, #63	; 0x3f
 800546e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8005472:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	78bb      	ldrb	r3, [r7, #2]
 8005478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800547c:	b2d8      	uxtb	r0, r3
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	440b      	add	r3, r1
 800548a:	333a      	adds	r3, #58	; 0x3a
 800548c:	4602      	mov	r2, r0
 800548e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8005490:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005494:	2b00      	cmp	r3, #0
 8005496:	da0a      	bge.n	80054ae <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	4413      	add	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	440b      	add	r3, r1
 80054a6:	333b      	adds	r3, #59	; 0x3b
 80054a8:	2201      	movs	r2, #1
 80054aa:	701a      	strb	r2, [r3, #0]
 80054ac:	e009      	b.n	80054c2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	440b      	add	r3, r1
 80054bc:	333b      	adds	r3, #59	; 0x3b
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	440b      	add	r3, r1
 80054d0:	333c      	adds	r3, #60	; 0x3c
 80054d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80054d6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	787c      	ldrb	r4, [r7, #1]
 80054de:	78ba      	ldrb	r2, [r7, #2]
 80054e0:	78f9      	ldrb	r1, [r7, #3]
 80054e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054e4:	9302      	str	r3, [sp, #8]
 80054e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80054ea:	9301      	str	r3, [sp, #4]
 80054ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	4623      	mov	r3, r4
 80054f4:	f006 ff76 	bl	800c3e4 <USB_HC_Init>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8005504:	7bfb      	ldrb	r3, [r7, #15]
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	bd90      	pop	{r4, r7, pc}

0800550e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	460b      	mov	r3, r1
 8005518:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_HCD_HC_Halt+0x1e>
 8005528:	2302      	movs	r3, #2
 800552a:	e00f      	b.n	800554c <HAL_HCD_HC_Halt+0x3e>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	4611      	mov	r1, r2
 800553c:	4618      	mov	r0, r3
 800553e:	f007 f9b2 	bl	800c8a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800554a:	7bfb      	ldrb	r3, [r7, #15]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	4608      	mov	r0, r1
 800555e:	4611      	mov	r1, r2
 8005560:	461a      	mov	r2, r3
 8005562:	4603      	mov	r3, r0
 8005564:	70fb      	strb	r3, [r7, #3]
 8005566:	460b      	mov	r3, r1
 8005568:	70bb      	strb	r3, [r7, #2]
 800556a:	4613      	mov	r3, r2
 800556c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800556e:	78fa      	ldrb	r2, [r7, #3]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	440b      	add	r3, r1
 800557c:	333b      	adds	r3, #59	; 0x3b
 800557e:	78ba      	ldrb	r2, [r7, #2]
 8005580:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8005582:	78fa      	ldrb	r2, [r7, #3]
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	440b      	add	r3, r1
 8005590:	333f      	adds	r3, #63	; 0x3f
 8005592:	787a      	ldrb	r2, [r7, #1]
 8005594:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8005596:	7c3b      	ldrb	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d114      	bne.n	80055c6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800559c:	78fa      	ldrb	r2, [r7, #3]
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	440b      	add	r3, r1
 80055aa:	3342      	adds	r3, #66	; 0x42
 80055ac:	2203      	movs	r2, #3
 80055ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80055b0:	78fa      	ldrb	r2, [r7, #3]
 80055b2:	6879      	ldr	r1, [r7, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	440b      	add	r3, r1
 80055be:	333d      	adds	r3, #61	; 0x3d
 80055c0:	7f3a      	ldrb	r2, [r7, #28]
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	e009      	b.n	80055da <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80055c6:	78fa      	ldrb	r2, [r7, #3]
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	4613      	mov	r3, r2
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	440b      	add	r3, r1
 80055d4:	3342      	adds	r3, #66	; 0x42
 80055d6:	2202      	movs	r2, #2
 80055d8:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80055da:	787b      	ldrb	r3, [r7, #1]
 80055dc:	2b03      	cmp	r3, #3
 80055de:	f200 80d6 	bhi.w	800578e <HAL_HCD_HC_SubmitRequest+0x23a>
 80055e2:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80055e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e8:	080055f9 	.word	0x080055f9
 80055ec:	08005779 	.word	0x08005779
 80055f0:	08005665 	.word	0x08005665
 80055f4:	080056ef 	.word	0x080056ef
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80055f8:	7c3b      	ldrb	r3, [r7, #16]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	f040 80c9 	bne.w	8005792 <HAL_HCD_HC_SubmitRequest+0x23e>
 8005600:	78bb      	ldrb	r3, [r7, #2]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f040 80c5 	bne.w	8005792 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8005608:	8b3b      	ldrh	r3, [r7, #24]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800560e:	78fa      	ldrb	r2, [r7, #3]
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	440b      	add	r3, r1
 800561c:	3351      	adds	r3, #81	; 0x51
 800561e:	2201      	movs	r2, #1
 8005620:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	440b      	add	r3, r1
 8005630:	3351      	adds	r3, #81	; 0x51
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10a      	bne.n	800564e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	00db      	lsls	r3, r3, #3
 8005644:	440b      	add	r3, r1
 8005646:	3342      	adds	r3, #66	; 0x42
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800564c:	e0a1      	b.n	8005792 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	440b      	add	r3, r1
 800565c:	3342      	adds	r3, #66	; 0x42
 800565e:	2202      	movs	r2, #2
 8005660:	701a      	strb	r2, [r3, #0]
      break;
 8005662:	e096      	b.n	8005792 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8005664:	78bb      	ldrb	r3, [r7, #2]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d120      	bne.n	80056ac <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4413      	add	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	440b      	add	r3, r1
 8005678:	3351      	adds	r3, #81	; 0x51
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005680:	78fa      	ldrb	r2, [r7, #3]
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	440b      	add	r3, r1
 800568e:	3342      	adds	r3, #66	; 0x42
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8005694:	e07e      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	00db      	lsls	r3, r3, #3
 80056a2:	440b      	add	r3, r1
 80056a4:	3342      	adds	r3, #66	; 0x42
 80056a6:	2202      	movs	r2, #2
 80056a8:	701a      	strb	r2, [r3, #0]
      break;
 80056aa:	e073      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	440b      	add	r3, r1
 80056ba:	3350      	adds	r3, #80	; 0x50
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10a      	bne.n	80056d8 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80056c2:	78fa      	ldrb	r2, [r7, #3]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	440b      	add	r3, r1
 80056d0:	3342      	adds	r3, #66	; 0x42
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
      break;
 80056d6:	e05d      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80056d8:	78fa      	ldrb	r2, [r7, #3]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	00db      	lsls	r3, r3, #3
 80056e4:	440b      	add	r3, r1
 80056e6:	3342      	adds	r3, #66	; 0x42
 80056e8:	2202      	movs	r2, #2
 80056ea:	701a      	strb	r2, [r3, #0]
      break;
 80056ec:	e052      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80056ee:	78bb      	ldrb	r3, [r7, #2]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d120      	bne.n	8005736 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80056f4:	78fa      	ldrb	r2, [r7, #3]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	440b      	add	r3, r1
 8005702:	3351      	adds	r3, #81	; 0x51
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800570a:	78fa      	ldrb	r2, [r7, #3]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	3342      	adds	r3, #66	; 0x42
 800571a:	2200      	movs	r2, #0
 800571c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800571e:	e039      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005720:	78fa      	ldrb	r2, [r7, #3]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	3342      	adds	r3, #66	; 0x42
 8005730:	2202      	movs	r2, #2
 8005732:	701a      	strb	r2, [r3, #0]
      break;
 8005734:	e02e      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8005736:	78fa      	ldrb	r2, [r7, #3]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	3350      	adds	r3, #80	; 0x50
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	3342      	adds	r3, #66	; 0x42
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
      break;
 8005760:	e018      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005762:	78fa      	ldrb	r2, [r7, #3]
 8005764:	6879      	ldr	r1, [r7, #4]
 8005766:	4613      	mov	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	440b      	add	r3, r1
 8005770:	3342      	adds	r3, #66	; 0x42
 8005772:	2202      	movs	r2, #2
 8005774:	701a      	strb	r2, [r3, #0]
      break;
 8005776:	e00d      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005778:	78fa      	ldrb	r2, [r7, #3]
 800577a:	6879      	ldr	r1, [r7, #4]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	3342      	adds	r3, #66	; 0x42
 8005788:	2200      	movs	r2, #0
 800578a:	701a      	strb	r2, [r3, #0]
      break;
 800578c:	e002      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800578e:	bf00      	nop
 8005790:	e000      	b.n	8005794 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005792:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	440b      	add	r3, r1
 80057a2:	3344      	adds	r3, #68	; 0x44
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80057a8:	78fa      	ldrb	r2, [r7, #3]
 80057aa:	8b39      	ldrh	r1, [r7, #24]
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4403      	add	r3, r0
 80057b8:	3348      	adds	r3, #72	; 0x48
 80057ba:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	440b      	add	r3, r1
 80057ca:	335c      	adds	r3, #92	; 0x5c
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	440b      	add	r3, r1
 80057de:	334c      	adds	r3, #76	; 0x4c
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80057e4:	78fa      	ldrb	r2, [r7, #3]
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	4613      	mov	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	440b      	add	r3, r1
 80057f2:	3339      	adds	r3, #57	; 0x39
 80057f4:	78fa      	ldrb	r2, [r7, #3]
 80057f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	440b      	add	r3, r1
 8005806:	335d      	adds	r3, #93	; 0x5d
 8005808:	2200      	movs	r2, #0
 800580a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	78fa      	ldrb	r2, [r7, #3]
 8005812:	4613      	mov	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	3338      	adds	r3, #56	; 0x38
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	18d1      	adds	r1, r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	f006 fee6 	bl	800c5f8 <USB_HC_StartXfer>
 800582c:	4603      	mov	r3, r0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop

08005838 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f006 fc09 	bl	800c066 <USB_GetMode>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	f040 80ef 	bne.w	8005a3a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f006 fbed 	bl	800c040 <USB_ReadInterrupts>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80e5 	beq.w	8005a38 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f006 fbe4 	bl	800c040 <USB_ReadInterrupts>
 8005878:	4603      	mov	r3, r0
 800587a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800587e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005882:	d104      	bne.n	800588e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800588c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f006 fbd4 	bl	800c040 <USB_ReadInterrupts>
 8005898:	4603      	mov	r3, r0
 800589a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a2:	d104      	bne.n	80058ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f006 fbc4 	bl	800c040 <USB_ReadInterrupts>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058c2:	d104      	bne.n	80058ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80058cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f006 fbb4 	bl	800c040 <USB_ReadInterrupts>
 80058d8:	4603      	mov	r3, r0
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d103      	bne.n	80058ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2202      	movs	r2, #2
 80058e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f006 fba6 	bl	800c040 <USB_ReadInterrupts>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058fe:	d115      	bne.n	800592c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005908:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d108      	bne.n	800592c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f00c fb18 	bl	8011f50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2101      	movs	r1, #1
 8005926:	4618      	mov	r0, r3
 8005928:	f006 fc96 	bl	800c258 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f006 fb85 	bl	800c040 <USB_ReadInterrupts>
 8005936:	4603      	mov	r3, r0
 8005938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005940:	d102      	bne.n	8005948 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f001 f966 	bl	8006c14 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f006 fb77 	bl	800c040 <USB_ReadInterrupts>
 8005952:	4603      	mov	r3, r0
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b08      	cmp	r3, #8
 800595a:	d106      	bne.n	800596a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f00c fadb 	bl	8011f18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2208      	movs	r2, #8
 8005968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f006 fb66 	bl	800c040 <USB_ReadInterrupts>
 8005974:	4603      	mov	r3, r0
 8005976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800597e:	d138      	bne.n	80059f2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f006 ff7d 	bl	800c884 <USB_HC_ReadInterrupt>
 800598a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	e025      	b.n	80059de <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	fa22 f303 	lsr.w	r3, r2, r3
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d018      	beq.n	80059d8 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059bc:	d106      	bne.n	80059cc <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8cf 	bl	8005b68 <HCD_HC_IN_IRQHandler>
 80059ca:	e005      	b.n	80059d8 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fcfd 	bl	80063d2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3301      	adds	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d3d4      	bcc.n	8005992 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80059f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f006 fb22 	bl	800c040 <USB_ReadInterrupts>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d101      	bne.n	8005a0a <HAL_HCD_IRQHandler+0x1d2>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <HAL_HCD_IRQHandler+0x1d4>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d014      	beq.n	8005a3a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0210 	bic.w	r2, r2, #16
 8005a1e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 f84b 	bl	8006abc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0210 	orr.w	r2, r2, #16
 8005a34:	619a      	str	r2, [r3, #24]
 8005a36:	e000      	b.n	8005a3a <HAL_HCD_IRQHandler+0x202>
      return;
 8005a38:	bf00      	nop
    }
  }
}
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_HCD_Start+0x16>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e013      	b.n	8005a7e <HAL_HCD_Start+0x3e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f006 f9f9 	bl	800be5a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f006 fc56 	bl	800c320 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d101      	bne.n	8005a9c <HAL_HCD_Stop+0x16>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	e00d      	b.n	8005ab8 <HAL_HCD_Stop+0x32>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f007 f837 	bl	800cb1c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f006 fbfd 	bl	800c2cc <USB_ResetPort>
 8005ad2:	4603      	mov	r3, r0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8005ae8:	78fa      	ldrb	r2, [r7, #3]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	440b      	add	r3, r1
 8005af6:	335c      	adds	r3, #92	; 0x5c
 8005af8:	781b      	ldrb	r3, [r3, #0]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	440b      	add	r3, r1
 8005b20:	334c      	adds	r3, #76	; 0x4c
 8005b22:	681b      	ldr	r3, [r3, #0]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f006 fc3f 	bl	800c3c0 <USB_GetCurrentFrame>
 8005b42:	4603      	mov	r3, r0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f006 fc1a 	bl	800c392 <USB_GetHostSpeed>
 8005b5e:	4603      	mov	r3, r0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005b7e:	78fb      	ldrb	r3, [r7, #3]
 8005b80:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d119      	bne.n	8005bcc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	2304      	movs	r3, #4
 8005ba8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	0151      	lsls	r1, r2, #5
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	440a      	add	r2, r1
 8005bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bc4:	f043 0302 	orr.w	r3, r3, #2
 8005bc8:	60d3      	str	r3, [r2, #12]
 8005bca:	e0ce      	b.n	8005d6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be2:	d12c      	bne.n	8005c3e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005bf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	440b      	add	r3, r1
 8005c06:	335d      	adds	r3, #93	; 0x5d
 8005c08:	2207      	movs	r2, #7
 8005c0a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	0151      	lsls	r1, r2, #5
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	440a      	add	r2, r1
 8005c22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c26:	f043 0302 	orr.w	r3, r3, #2
 8005c2a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f006 fe35 	bl	800c8a6 <USB_HC_Halt>
 8005c3c:	e095      	b.n	8005d6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d109      	bne.n	8005c68 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c60:	461a      	mov	r2, r3
 8005c62:	2320      	movs	r3, #32
 8005c64:	6093      	str	r3, [r2, #8]
 8005c66:	e080      	b.n	8005d6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d134      	bne.n	8005ce8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c98:	f043 0302 	orr.w	r3, r3, #2
 8005c9c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	440b      	add	r3, r1
 8005cac:	335d      	adds	r3, #93	; 0x5d
 8005cae:	2205      	movs	r2, #5
 8005cb0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	2308      	movs	r3, #8
 8005cd4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	b2d2      	uxtb	r2, r2
 8005cde:	4611      	mov	r1, r2
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f006 fde0 	bl	800c8a6 <USB_HC_Halt>
 8005ce6:	e040      	b.n	8005d6a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfe:	d134      	bne.n	8005d6a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1a:	f043 0302 	orr.w	r3, r3, #2
 8005d1e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f006 fdbb 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2310      	movs	r3, #16
 8005d40:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4613      	mov	r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4413      	add	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	440b      	add	r3, r1
 8005d50:	335d      	adds	r3, #93	; 0x5d
 8005d52:	2208      	movs	r2, #8
 8005d54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d62:	461a      	mov	r2, r3
 8005d64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d68:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d80:	d122      	bne.n	8005dc8 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	0151      	lsls	r1, r2, #5
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	440a      	add	r2, r1
 8005d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d9c:	f043 0302 	orr.w	r3, r3, #2
 8005da0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	4611      	mov	r1, r2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f006 fd7a 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc4:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005dc6:	e300      	b.n	80063ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	f040 80fd 	bne.w	8005fda <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005de8:	6879      	ldr	r1, [r7, #4]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	440b      	add	r3, r1
 8005df6:	3348      	adds	r3, #72	; 0x48
 8005df8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	0159      	lsls	r1, r3, #5
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	440b      	add	r3, r1
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005e0c:	1ad1      	subs	r1, r2, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	00db      	lsls	r3, r3, #3
 8005e1a:	4403      	add	r3, r0
 8005e1c:	334c      	adds	r3, #76	; 0x4c
 8005e1e:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005e20:	6879      	ldr	r1, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	440b      	add	r3, r1
 8005e2e:	335d      	adds	r3, #93	; 0x5d
 8005e30:	2201      	movs	r2, #1
 8005e32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	440b      	add	r3, r1
 8005e42:	3358      	adds	r3, #88	; 0x58
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e54:	461a      	mov	r2, r3
 8005e56:	2301      	movs	r3, #1
 8005e58:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	440b      	add	r3, r1
 8005e68:	333f      	adds	r3, #63	; 0x3f
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	440b      	add	r3, r1
 8005e7e:	333f      	adds	r3, #63	; 0x3f
 8005e80:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005e82:	2b02      	cmp	r3, #2
 8005e84:	d121      	bne.n	8005eca <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	0151      	lsls	r1, r2, #5
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	440a      	add	r2, r1
 8005e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea0:	f043 0302 	orr.w	r3, r3, #2
 8005ea4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f006 fcf8 	bl	800c8a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	6093      	str	r3, [r2, #8]
 8005ec8:	e070      	b.n	8005fac <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005eca:	6879      	ldr	r1, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	440b      	add	r3, r1
 8005ed8:	333f      	adds	r3, #63	; 0x3f
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d12a      	bne.n	8005f36 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005efa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005efe:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	335c      	adds	r3, #92	; 0x5c
 8005f10:	2201      	movs	r2, #1
 8005f12:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	b2d8      	uxtb	r0, r3
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	440b      	add	r3, r1
 8005f26:	335c      	adds	r3, #92	; 0x5c
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4601      	mov	r1, r0
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f00c f81c 	bl	8011f6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f34:	e03a      	b.n	8005fac <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	440b      	add	r3, r1
 8005f44:	333f      	adds	r3, #63	; 0x3f
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d12f      	bne.n	8005fac <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	440b      	add	r3, r1
 8005f5a:	335c      	adds	r3, #92	; 0x5c
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	440b      	add	r3, r1
 8005f6e:	3350      	adds	r3, #80	; 0x50
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	f083 0301 	eor.w	r3, r3, #1
 8005f76:	b2d8      	uxtb	r0, r3
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	00db      	lsls	r3, r3, #3
 8005f84:	440b      	add	r3, r1
 8005f86:	3350      	adds	r3, #80	; 0x50
 8005f88:	4602      	mov	r2, r0
 8005f8a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	b2d8      	uxtb	r0, r3
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4613      	mov	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	00db      	lsls	r3, r3, #3
 8005f9c:	440b      	add	r3, r1
 8005f9e:	335c      	adds	r3, #92	; 0x5c
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4601      	mov	r1, r0
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f00b ffe0 	bl	8011f6c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	440b      	add	r3, r1
 8005fba:	3350      	adds	r3, #80	; 0x50
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	f083 0301 	eor.w	r3, r3, #1
 8005fc2:	b2d8      	uxtb	r0, r3
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	440b      	add	r3, r1
 8005fd2:	3350      	adds	r3, #80	; 0x50
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	701a      	strb	r2, [r3, #0]
}
 8005fd8:	e1f7      	b.n	80063ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	015a      	lsls	r2, r3, #5
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	f040 811a 	bne.w	8006226 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	0151      	lsls	r1, r2, #5
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	440a      	add	r2, r1
 8006008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800600c:	f023 0302 	bic.w	r3, r3, #2
 8006010:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	440b      	add	r3, r1
 8006020:	335d      	adds	r3, #93	; 0x5d
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d10a      	bne.n	800603e <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	440b      	add	r3, r1
 8006036:	335c      	adds	r3, #92	; 0x5c
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	e0d9      	b.n	80061f2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	440b      	add	r3, r1
 800604c:	335d      	adds	r3, #93	; 0x5d
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b05      	cmp	r3, #5
 8006052:	d10a      	bne.n	800606a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006054:	6879      	ldr	r1, [r7, #4]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4613      	mov	r3, r2
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	4413      	add	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	440b      	add	r3, r1
 8006062:	335c      	adds	r3, #92	; 0x5c
 8006064:	2205      	movs	r2, #5
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e0c3      	b.n	80061f2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	440b      	add	r3, r1
 8006078:	335d      	adds	r3, #93	; 0x5d
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b06      	cmp	r3, #6
 800607e:	d00a      	beq.n	8006096 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	440b      	add	r3, r1
 800608e:	335d      	adds	r3, #93	; 0x5d
 8006090:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006092:	2b08      	cmp	r3, #8
 8006094:	d156      	bne.n	8006144 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	440b      	add	r3, r1
 80060a4:	3358      	adds	r3, #88	; 0x58
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	1c59      	adds	r1, r3, #1
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4403      	add	r3, r0
 80060b8:	3358      	adds	r3, #88	; 0x58
 80060ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	440b      	add	r3, r1
 80060ca:	3358      	adds	r3, #88	; 0x58
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d914      	bls.n	80060fc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	440b      	add	r3, r1
 80060e0:	3358      	adds	r3, #88	; 0x58
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80060e6:	6879      	ldr	r1, [r7, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	00db      	lsls	r3, r3, #3
 80060f2:	440b      	add	r3, r1
 80060f4:	335c      	adds	r3, #92	; 0x5c
 80060f6:	2204      	movs	r2, #4
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	e009      	b.n	8006110 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	440b      	add	r3, r1
 800610a:	335c      	adds	r3, #92	; 0x5c
 800610c:	2202      	movs	r2, #2
 800610e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	015a      	lsls	r2, r3, #5
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	4413      	add	r3, r2
 8006118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006126:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800612e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613c:	461a      	mov	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e056      	b.n	80061f2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	440b      	add	r3, r1
 8006152:	335d      	adds	r3, #93	; 0x5d
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b03      	cmp	r3, #3
 8006158:	d123      	bne.n	80061a2 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4613      	mov	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	440b      	add	r3, r1
 8006168:	335c      	adds	r3, #92	; 0x5c
 800616a:	2202      	movs	r2, #2
 800616c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006184:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800618c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619a:	461a      	mov	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	e027      	b.n	80061f2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	440b      	add	r3, r1
 80061b0:	335d      	adds	r3, #93	; 0x5d
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b07      	cmp	r3, #7
 80061b6:	d11c      	bne.n	80061f2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80061b8:	6879      	ldr	r1, [r7, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	440b      	add	r3, r1
 80061c6:	3358      	adds	r3, #88	; 0x58
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	1c59      	adds	r1, r3, #1
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	4403      	add	r3, r0
 80061da:	3358      	adds	r3, #88	; 0x58
 80061dc:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80061de:	6879      	ldr	r1, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	440b      	add	r3, r1
 80061ec:	335c      	adds	r3, #92	; 0x5c
 80061ee:	2204      	movs	r2, #4
 80061f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061fe:	461a      	mov	r2, r3
 8006200:	2302      	movs	r3, #2
 8006202:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	b2d8      	uxtb	r0, r3
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4613      	mov	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	440b      	add	r3, r1
 8006216:	335c      	adds	r3, #92	; 0x5c
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	461a      	mov	r2, r3
 800621c:	4601      	mov	r1, r0
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f00b fea4 	bl	8011f6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006224:	e0d1      	b.n	80063ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006238:	2b80      	cmp	r3, #128	; 0x80
 800623a:	d13e      	bne.n	80062ba <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	4413      	add	r3, r2
 8006244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	0151      	lsls	r1, r2, #5
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	440a      	add	r2, r1
 8006252:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006256:	f043 0302 	orr.w	r3, r3, #2
 800625a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	440b      	add	r3, r1
 800626a:	3358      	adds	r3, #88	; 0x58
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	1c59      	adds	r1, r3, #1
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4403      	add	r3, r0
 800627e:	3358      	adds	r3, #88	; 0x58
 8006280:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	440b      	add	r3, r1
 8006290:	335d      	adds	r3, #93	; 0x5d
 8006292:	2206      	movs	r2, #6
 8006294:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	b2d2      	uxtb	r2, r2
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f006 fb00 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062b2:	461a      	mov	r2, r3
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	6093      	str	r3, [r2, #8]
}
 80062b8:	e087      	b.n	80063ca <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d17c      	bne.n	80063ca <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	440b      	add	r3, r1
 80062de:	333f      	adds	r3, #63	; 0x3f
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d122      	bne.n	800632c <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	440b      	add	r3, r1
 80062f4:	3358      	adds	r3, #88	; 0x58
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4413      	add	r3, r2
 8006302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f006 fabe 	bl	800c8a6 <USB_HC_Halt>
 800632a:	e045      	b.n	80063b8 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	440b      	add	r3, r1
 800633a:	333f      	adds	r3, #63	; 0x3f
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006342:	6879      	ldr	r1, [r7, #4]
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	4613      	mov	r3, r2
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	00db      	lsls	r3, r3, #3
 800634e:	440b      	add	r3, r1
 8006350:	333f      	adds	r3, #63	; 0x3f
 8006352:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006354:	2b02      	cmp	r3, #2
 8006356:	d12f      	bne.n	80063b8 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	440b      	add	r3, r1
 8006366:	3358      	adds	r3, #88	; 0x58
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d121      	bne.n	80063b8 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	440b      	add	r3, r1
 8006382:	335d      	adds	r3, #93	; 0x5d
 8006384:	2203      	movs	r2, #3
 8006386:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	4413      	add	r3, r2
 8006390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	0151      	lsls	r1, r2, #5
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	440a      	add	r2, r1
 800639e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	4611      	mov	r1, r2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f006 fa77 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063c4:	461a      	mov	r2, r3
 80063c6:	2310      	movs	r3, #16
 80063c8:	6093      	str	r3, [r2, #8]
}
 80063ca:	bf00      	nop
 80063cc:	3718      	adds	r7, #24
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}

080063d2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80063d2:	b580      	push	{r7, lr}
 80063d4:	b086      	sub	sp, #24
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d119      	bne.n	8006436 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	2304      	movs	r3, #4
 8006412:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	440a      	add	r2, r1
 800642a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800642e:	f043 0302 	orr.w	r3, r3, #2
 8006432:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8006434:	e33e      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4413      	add	r3, r2
 800643e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0320 	and.w	r3, r3, #32
 8006448:	2b20      	cmp	r3, #32
 800644a:	d141      	bne.n	80064d0 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	4413      	add	r3, r2
 8006454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006458:	461a      	mov	r2, r3
 800645a:	2320      	movs	r3, #32
 800645c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	440b      	add	r3, r1
 800646c:	333d      	adds	r3, #61	; 0x3d
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b01      	cmp	r3, #1
 8006472:	f040 831f 	bne.w	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8006476:	6879      	ldr	r1, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	440b      	add	r3, r1
 8006484:	333d      	adds	r3, #61	; 0x3d
 8006486:	2200      	movs	r2, #0
 8006488:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	440b      	add	r3, r1
 8006498:	335c      	adds	r3, #92	; 0x5c
 800649a:	2202      	movs	r2, #2
 800649c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	0151      	lsls	r1, r2, #5
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	440a      	add	r2, r1
 80064b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b8:	f043 0302 	orr.w	r3, r3, #2
 80064bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f006 f9ec 	bl	800c8a6 <USB_HC_Halt>
}
 80064ce:	e2f1      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b40      	cmp	r3, #64	; 0x40
 80064e4:	d13f      	bne.n	8006566 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	440b      	add	r3, r1
 80064f4:	335d      	adds	r3, #93	; 0x5d
 80064f6:	2204      	movs	r2, #4
 80064f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80064fa:	6879      	ldr	r1, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4613      	mov	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	440b      	add	r3, r1
 8006508:	333d      	adds	r3, #61	; 0x3d
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	440b      	add	r3, r1
 800651c:	3358      	adds	r3, #88	; 0x58
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	4413      	add	r3, r2
 800652a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	440a      	add	r2, r1
 8006538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653c:	f043 0302 	orr.w	r3, r3, #2
 8006540:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	b2d2      	uxtb	r2, r2
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f006 f9aa 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	4413      	add	r3, r2
 800655a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655e:	461a      	mov	r2, r3
 8006560:	2340      	movs	r3, #64	; 0x40
 8006562:	6093      	str	r3, [r2, #8]
}
 8006564:	e2a6      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d122      	bne.n	80065c4 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4413      	add	r3, r2
 8006586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	440a      	add	r2, r1
 8006594:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	b2d2      	uxtb	r2, r2
 80065a6:	4611      	mov	r1, r2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f006 f97c 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ba:	461a      	mov	r2, r3
 80065bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065c0:	6093      	str	r3, [r2, #8]
}
 80065c2:	e277      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d135      	bne.n	8006646 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	440b      	add	r3, r1
 80065e8:	3358      	adds	r3, #88	; 0x58
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	440a      	add	r2, r1
 8006604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006608:	f043 0302 	orr.w	r3, r3, #2
 800660c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	4611      	mov	r1, r2
 8006618:	4618      	mov	r0, r3
 800661a:	f006 f944 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	4413      	add	r3, r2
 8006626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662a:	461a      	mov	r2, r3
 800662c:	2301      	movs	r3, #1
 800662e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	00db      	lsls	r3, r3, #3
 800663c:	440b      	add	r3, r1
 800663e:	335d      	adds	r3, #93	; 0x5d
 8006640:	2201      	movs	r2, #1
 8006642:	701a      	strb	r2, [r3, #0]
}
 8006644:	e236      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f003 0308 	and.w	r3, r3, #8
 8006658:	2b08      	cmp	r3, #8
 800665a:	d12b      	bne.n	80066b4 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006668:	461a      	mov	r2, r3
 800666a:	2308      	movs	r3, #8
 800666c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	0151      	lsls	r1, r2, #5
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	440a      	add	r2, r1
 8006684:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006688:	f043 0302 	orr.w	r3, r3, #2
 800668c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f006 f904 	bl	800c8a6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800669e:	6879      	ldr	r1, [r7, #4]
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	440b      	add	r3, r1
 80066ac:	335d      	adds	r3, #93	; 0x5d
 80066ae:	2205      	movs	r2, #5
 80066b0:	701a      	strb	r2, [r3, #0]
}
 80066b2:	e1ff      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d155      	bne.n	8006776 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80066ca:	6879      	ldr	r1, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4613      	mov	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	00db      	lsls	r3, r3, #3
 80066d6:	440b      	add	r3, r1
 80066d8:	3358      	adds	r3, #88	; 0x58
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	00db      	lsls	r3, r3, #3
 80066ea:	440b      	add	r3, r1
 80066ec:	335d      	adds	r3, #93	; 0x5d
 80066ee:	2203      	movs	r2, #3
 80066f0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	440b      	add	r3, r1
 8006700:	333d      	adds	r3, #61	; 0x3d
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d114      	bne.n	8006732 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	440b      	add	r3, r1
 8006716:	333c      	adds	r3, #60	; 0x3c
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	440b      	add	r3, r1
 800672c:	333d      	adds	r3, #61	; 0x3d
 800672e:	2201      	movs	r2, #1
 8006730:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4413      	add	r3, r2
 800673a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	0151      	lsls	r1, r2, #5
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	440a      	add	r2, r1
 8006748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800674c:	f043 0302 	orr.w	r3, r3, #2
 8006750:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	b2d2      	uxtb	r2, r2
 800675a:	4611      	mov	r1, r2
 800675c:	4618      	mov	r0, r3
 800675e:	f006 f8a2 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4413      	add	r3, r2
 800676a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676e:	461a      	mov	r2, r3
 8006770:	2310      	movs	r3, #16
 8006772:	6093      	str	r3, [r2, #8]
}
 8006774:	e19e      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006788:	2b80      	cmp	r3, #128	; 0x80
 800678a:	d12b      	bne.n	80067e4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4413      	add	r3, r2
 8006794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a6:	f043 0302 	orr.w	r3, r3, #2
 80067aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f006 f875 	bl	800c8a6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80067bc:	6879      	ldr	r1, [r7, #4]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	440b      	add	r3, r1
 80067ca:	335d      	adds	r3, #93	; 0x5d
 80067cc:	2206      	movs	r2, #6
 80067ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067dc:	461a      	mov	r2, r3
 80067de:	2380      	movs	r3, #128	; 0x80
 80067e0:	6093      	str	r3, [r2, #8]
}
 80067e2:	e167      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fa:	d135      	bne.n	8006868 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	015a      	lsls	r2, r3, #5
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	4413      	add	r3, r2
 8006804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	0151      	lsls	r1, r2, #5
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	440a      	add	r2, r1
 8006812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006816:	f043 0302 	orr.w	r3, r3, #2
 800681a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	4611      	mov	r1, r2
 8006826:	4618      	mov	r0, r3
 8006828:	f006 f83d 	bl	800c8a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4413      	add	r3, r2
 8006834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006838:	461a      	mov	r2, r3
 800683a:	2310      	movs	r3, #16
 800683c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	4413      	add	r3, r2
 8006846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684a:	461a      	mov	r2, r3
 800684c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006850:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	440b      	add	r3, r1
 8006860:	335d      	adds	r3, #93	; 0x5d
 8006862:	2208      	movs	r2, #8
 8006864:	701a      	strb	r2, [r3, #0]
}
 8006866:	e125      	b.n	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	f040 811a 	bne.w	8006ab4 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	0151      	lsls	r1, r2, #5
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	440a      	add	r2, r1
 8006896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800689a:	f023 0302 	bic.w	r3, r3, #2
 800689e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	440b      	add	r3, r1
 80068ae:	335d      	adds	r3, #93	; 0x5d
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d137      	bne.n	8006926 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	440b      	add	r3, r1
 80068c4:	335c      	adds	r3, #92	; 0x5c
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4613      	mov	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	4413      	add	r3, r2
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	440b      	add	r3, r1
 80068d8:	333f      	adds	r3, #63	; 0x3f
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d00b      	beq.n	80068f8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4613      	mov	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	440b      	add	r3, r1
 80068ee:	333f      	adds	r3, #63	; 0x3f
 80068f0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80068f2:	2b03      	cmp	r3, #3
 80068f4:	f040 80c5 	bne.w	8006a82 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80068f8:	6879      	ldr	r1, [r7, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	440b      	add	r3, r1
 8006906:	3351      	adds	r3, #81	; 0x51
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	f083 0301 	eor.w	r3, r3, #1
 800690e:	b2d8      	uxtb	r0, r3
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	440b      	add	r3, r1
 800691e:	3351      	adds	r3, #81	; 0x51
 8006920:	4602      	mov	r2, r0
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	e0ad      	b.n	8006a82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	440b      	add	r3, r1
 8006934:	335d      	adds	r3, #93	; 0x5d
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b03      	cmp	r3, #3
 800693a:	d10a      	bne.n	8006952 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800693c:	6879      	ldr	r1, [r7, #4]
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	440b      	add	r3, r1
 800694a:	335c      	adds	r3, #92	; 0x5c
 800694c:	2202      	movs	r2, #2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	e097      	b.n	8006a82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4613      	mov	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4413      	add	r3, r2
 800695c:	00db      	lsls	r3, r3, #3
 800695e:	440b      	add	r3, r1
 8006960:	335d      	adds	r3, #93	; 0x5d
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	2b04      	cmp	r3, #4
 8006966:	d10a      	bne.n	800697e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	440b      	add	r3, r1
 8006976:	335c      	adds	r3, #92	; 0x5c
 8006978:	2202      	movs	r2, #2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	e081      	b.n	8006a82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800697e:	6879      	ldr	r1, [r7, #4]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4613      	mov	r3, r2
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	440b      	add	r3, r1
 800698c:	335d      	adds	r3, #93	; 0x5d
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b05      	cmp	r3, #5
 8006992:	d10a      	bne.n	80069aa <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	440b      	add	r3, r1
 80069a2:	335c      	adds	r3, #92	; 0x5c
 80069a4:	2205      	movs	r2, #5
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e06b      	b.n	8006a82 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	440b      	add	r3, r1
 80069b8:	335d      	adds	r3, #93	; 0x5d
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b06      	cmp	r3, #6
 80069be:	d00a      	beq.n	80069d6 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	440b      	add	r3, r1
 80069ce:	335d      	adds	r3, #93	; 0x5d
 80069d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d155      	bne.n	8006a82 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	440b      	add	r3, r1
 80069e4:	3358      	adds	r3, #88	; 0x58
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	1c59      	adds	r1, r3, #1
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4613      	mov	r3, r2
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	00db      	lsls	r3, r3, #3
 80069f6:	4403      	add	r3, r0
 80069f8:	3358      	adds	r3, #88	; 0x58
 80069fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	440b      	add	r3, r1
 8006a0a:	3358      	adds	r3, #88	; 0x58
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d914      	bls.n	8006a3c <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	440b      	add	r3, r1
 8006a20:	3358      	adds	r3, #88	; 0x58
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	440b      	add	r3, r1
 8006a34:	335c      	adds	r3, #92	; 0x5c
 8006a36:	2204      	movs	r2, #4
 8006a38:	701a      	strb	r2, [r3, #0]
 8006a3a:	e009      	b.n	8006a50 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	440b      	add	r3, r1
 8006a4a:	335c      	adds	r3, #92	; 0x5c
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a66:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a6e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a8e:	461a      	mov	r2, r3
 8006a90:	2302      	movs	r3, #2
 8006a92:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	b2d8      	uxtb	r0, r3
 8006a98:	6879      	ldr	r1, [r7, #4]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	440b      	add	r3, r1
 8006aa6:	335c      	adds	r3, #92	; 0x5c
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4601      	mov	r1, r0
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f00b fa5c 	bl	8011f6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8006ab4:	bf00      	nop
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	0c5b      	lsrs	r3, r3, #17
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	091b      	lsrs	r3, r3, #4
 8006aec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006af0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d003      	beq.n	8006b00 <HCD_RXQLVL_IRQHandler+0x44>
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	f000 8082 	beq.w	8006c02 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006afe:	e083      	b.n	8006c08 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d07f      	beq.n	8006c06 <HCD_RXQLVL_IRQHandler+0x14a>
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	440b      	add	r3, r1
 8006b14:	3344      	adds	r3, #68	; 0x44
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d074      	beq.n	8006c06 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	440b      	add	r3, r1
 8006b2e:	3344      	adds	r3, #68	; 0x44
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	b292      	uxth	r2, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	f005 fa59 	bl	800bfee <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	4613      	mov	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4413      	add	r3, r2
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	440b      	add	r3, r1
 8006b4a:	3344      	adds	r3, #68	; 0x44
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	18d1      	adds	r1, r2, r3
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	4613      	mov	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4413      	add	r3, r2
 8006b5c:	00db      	lsls	r3, r3, #3
 8006b5e:	4403      	add	r3, r0
 8006b60:	3344      	adds	r3, #68	; 0x44
 8006b62:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006b64:	6879      	ldr	r1, [r7, #4]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	440b      	add	r3, r1
 8006b72:	334c      	adds	r3, #76	; 0x4c
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	18d1      	adds	r1, r2, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	69ba      	ldr	r2, [r7, #24]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4403      	add	r3, r0
 8006b88:	334c      	adds	r3, #76	; 0x4c
 8006b8a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <HCD_RXQLVL_IRQHandler+0x154>)
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d031      	beq.n	8006c06 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bb8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bc0:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8006bd4:	6879      	ldr	r1, [r7, #4]
 8006bd6:	69ba      	ldr	r2, [r7, #24]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4413      	add	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	440b      	add	r3, r1
 8006be2:	3350      	adds	r3, #80	; 0x50
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f083 0301 	eor.w	r3, r3, #1
 8006bea:	b2d8      	uxtb	r0, r3
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3350      	adds	r3, #80	; 0x50
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	701a      	strb	r2, [r3, #0]
      break;
 8006c00:	e001      	b.n	8006c06 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006c02:	bf00      	nop
 8006c04:	e000      	b.n	8006c08 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006c06:	bf00      	nop
  }
}
 8006c08:	bf00      	nop
 8006c0a:	3728      	adds	r7, #40	; 0x28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	1ff80000 	.word	0x1ff80000

08006c14 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c40:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d10b      	bne.n	8006c64 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d102      	bne.n	8006c5c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f00b f96c 	bl	8011f34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f043 0302 	orr.w	r3, r3, #2
 8006c62:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 0308 	and.w	r3, r3, #8
 8006c6a:	2b08      	cmp	r3, #8
 8006c6c:	d132      	bne.n	8006cd4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f043 0308 	orr.w	r3, r3, #8
 8006c74:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d126      	bne.n	8006cce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d113      	bne.n	8006cb0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006c8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c92:	d106      	bne.n	8006ca2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f005 fadc 	bl	800c258 <USB_InitFSLSPClkSel>
 8006ca0:	e011      	b.n	8006cc6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f005 fad5 	bl	800c258 <USB_InitFSLSPClkSel>
 8006cae:	e00a      	b.n	8006cc6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d106      	bne.n	8006cc6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006cc4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f00b f962 	bl	8011f90 <HAL_HCD_PortEnabled_Callback>
 8006ccc:	e002      	b.n	8006cd4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f00b f96c 	bl	8011fac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d103      	bne.n	8006ce6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f043 0320 	orr.w	r3, r3, #32
 8006ce4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cec:	461a      	mov	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	6013      	str	r3, [r2, #0]
}
 8006cf2:	bf00      	nop
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e11f      	b.n	8006f4e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fa ff1a 	bl	8001b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0201 	bic.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006d60:	f001 f80e 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 8006d64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	4a7b      	ldr	r2, [pc, #492]	; (8006f58 <HAL_I2C_Init+0x25c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d807      	bhi.n	8006d80 <HAL_I2C_Init+0x84>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a7a      	ldr	r2, [pc, #488]	; (8006f5c <HAL_I2C_Init+0x260>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	bf94      	ite	ls
 8006d78:	2301      	movls	r3, #1
 8006d7a:	2300      	movhi	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	e006      	b.n	8006d8e <HAL_I2C_Init+0x92>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4a77      	ldr	r2, [pc, #476]	; (8006f60 <HAL_I2C_Init+0x264>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	bf94      	ite	ls
 8006d88:	2301      	movls	r3, #1
 8006d8a:	2300      	movhi	r3, #0
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e0db      	b.n	8006f4e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a72      	ldr	r2, [pc, #456]	; (8006f64 <HAL_I2C_Init+0x268>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	0c9b      	lsrs	r3, r3, #18
 8006da0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	4a64      	ldr	r2, [pc, #400]	; (8006f58 <HAL_I2C_Init+0x25c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d802      	bhi.n	8006dd0 <HAL_I2C_Init+0xd4>
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	e009      	b.n	8006de4 <HAL_I2C_Init+0xe8>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	4a63      	ldr	r2, [pc, #396]	; (8006f68 <HAL_I2C_Init+0x26c>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	099b      	lsrs	r3, r3, #6
 8006de2:	3301      	adds	r3, #1
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6812      	ldr	r2, [r2, #0]
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006df6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	4956      	ldr	r1, [pc, #344]	; (8006f58 <HAL_I2C_Init+0x25c>)
 8006e00:	428b      	cmp	r3, r1
 8006e02:	d80d      	bhi.n	8006e20 <HAL_I2C_Init+0x124>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1e59      	subs	r1, r3, #1
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e12:	3301      	adds	r3, #1
 8006e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	bf38      	it	cc
 8006e1c:	2304      	movcc	r3, #4
 8006e1e:	e04f      	b.n	8006ec0 <HAL_I2C_Init+0x1c4>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d111      	bne.n	8006e4c <HAL_I2C_Init+0x150>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	1e58      	subs	r0, r3, #1
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6859      	ldr	r1, [r3, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	440b      	add	r3, r1
 8006e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bf0c      	ite	eq
 8006e44:	2301      	moveq	r3, #1
 8006e46:	2300      	movne	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	e012      	b.n	8006e72 <HAL_I2C_Init+0x176>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	1e58      	subs	r0, r3, #1
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6859      	ldr	r1, [r3, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	440b      	add	r3, r1
 8006e5a:	0099      	lsls	r1, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e62:	3301      	adds	r3, #1
 8006e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bf0c      	ite	eq
 8006e6c:	2301      	moveq	r3, #1
 8006e6e:	2300      	movne	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <HAL_I2C_Init+0x17e>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e022      	b.n	8006ec0 <HAL_I2C_Init+0x1c4>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d10e      	bne.n	8006ea0 <HAL_I2C_Init+0x1a4>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1e58      	subs	r0, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6859      	ldr	r1, [r3, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	440b      	add	r3, r1
 8006e90:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e94:	3301      	adds	r3, #1
 8006e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e9e:	e00f      	b.n	8006ec0 <HAL_I2C_Init+0x1c4>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	1e58      	subs	r0, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6859      	ldr	r1, [r3, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	0099      	lsls	r1, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ec0:	6879      	ldr	r1, [r7, #4]
 8006ec2:	6809      	ldr	r1, [r1, #0]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	69da      	ldr	r2, [r3, #28]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006eee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6911      	ldr	r1, [r2, #16]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	68d2      	ldr	r2, [r2, #12]
 8006efa:	4311      	orrs	r1, r2
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	695a      	ldr	r2, [r3, #20]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	000186a0 	.word	0x000186a0
 8006f5c:	001e847f 	.word	0x001e847f
 8006f60:	003d08ff 	.word	0x003d08ff
 8006f64:	431bde83 	.word	0x431bde83
 8006f68:	10624dd3 	.word	0x10624dd3

08006f6c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b088      	sub	sp, #32
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e154      	b.n	8007228 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a98      	ldr	r2, [pc, #608]	; (80071f8 <HAL_I2S_Init+0x28c>)
 8006f96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f7fa fe27 	bl	8001bec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006fb4:	f023 030f 	bic.w	r3, r3, #15
 8006fb8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d06f      	beq.n	80070aa <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d102      	bne.n	8006fd8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006fd2:	2310      	movs	r3, #16
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	e001      	b.n	8006fdc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006fd8:	2320      	movs	r3, #32
 8006fda:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d802      	bhi.n	8006fea <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a83      	ldr	r2, [pc, #524]	; (80071fc <HAL_I2S_Init+0x290>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d004      	beq.n	8006ffe <HAL_I2S_Init+0x92>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a81      	ldr	r2, [pc, #516]	; (8007200 <HAL_I2S_Init+0x294>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d104      	bne.n	8007008 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8006ffe:	2001      	movs	r0, #1
 8007000:	f001 f9a4 	bl	800834c <HAL_RCCEx_GetPeriphCLKFreq>
 8007004:	60f8      	str	r0, [r7, #12]
 8007006:	e003      	b.n	8007010 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8007008:	2002      	movs	r0, #2
 800700a:	f001 f99f 	bl	800834c <HAL_RCCEx_GetPeriphCLKFreq>
 800700e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007018:	d125      	bne.n	8007066 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d010      	beq.n	8007044 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	fbb2 f2f3 	udiv	r2, r2, r3
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	461a      	mov	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	fbb2 f3f3 	udiv	r3, r2, r3
 800703e:	3305      	adds	r3, #5
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	e01f      	b.n	8007084 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	fbb2 f2f3 	udiv	r2, r2, r3
 800704e:	4613      	mov	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	3305      	adds	r3, #5
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	e00e      	b.n	8007084 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	fbb2 f2f3 	udiv	r2, r2, r3
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	461a      	mov	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	3305      	adds	r3, #5
 8007082:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4a5f      	ldr	r2, [pc, #380]	; (8007204 <HAL_I2S_Init+0x298>)
 8007088:	fba2 2303 	umull	r2, r3, r2, r3
 800708c:	08db      	lsrs	r3, r3, #3
 800708e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f003 0301 	and.w	r3, r3, #1
 8007096:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	61bb      	str	r3, [r7, #24]
 80070a8:	e003      	b.n	80070b2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80070aa:	2302      	movs	r3, #2
 80070ac:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d902      	bls.n	80070be <HAL_I2S_Init+0x152>
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	2bff      	cmp	r3, #255	; 0xff
 80070bc:	d907      	bls.n	80070ce <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	f043 0210 	orr.w	r2, r3, #16
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e0ac      	b.n	8007228 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	691a      	ldr	r2, [r3, #16]
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	ea42 0103 	orr.w	r1, r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69fa      	ldr	r2, [r7, #28]
 80070de:	430a      	orrs	r2, r1
 80070e0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80070ec:	f023 030f 	bic.w	r3, r3, #15
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6851      	ldr	r1, [r2, #4]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6892      	ldr	r2, [r2, #8]
 80070f8:	4311      	orrs	r1, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68d2      	ldr	r2, [r2, #12]
 80070fe:	4311      	orrs	r1, r2
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6992      	ldr	r2, [r2, #24]
 8007104:	430a      	orrs	r2, r1
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007110:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	2b30      	cmp	r3, #48	; 0x30
 8007118:	d003      	beq.n	8007122 <HAL_I2S_Init+0x1b6>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2bb0      	cmp	r3, #176	; 0xb0
 8007120:	d107      	bne.n	8007132 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69da      	ldr	r2, [r3, #28]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007130:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d16e      	bne.n	8007218 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a32      	ldr	r2, [pc, #200]	; (8007208 <HAL_I2S_Init+0x29c>)
 800713e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a2d      	ldr	r2, [pc, #180]	; (80071fc <HAL_I2S_Init+0x290>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d101      	bne.n	800714e <HAL_I2S_Init+0x1e2>
 800714a:	4b30      	ldr	r3, [pc, #192]	; (800720c <HAL_I2S_Init+0x2a0>)
 800714c:	e001      	b.n	8007152 <HAL_I2S_Init+0x1e6>
 800714e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6812      	ldr	r2, [r2, #0]
 8007158:	4928      	ldr	r1, [pc, #160]	; (80071fc <HAL_I2S_Init+0x290>)
 800715a:	428a      	cmp	r2, r1
 800715c:	d101      	bne.n	8007162 <HAL_I2S_Init+0x1f6>
 800715e:	4a2b      	ldr	r2, [pc, #172]	; (800720c <HAL_I2S_Init+0x2a0>)
 8007160:	e001      	b.n	8007166 <HAL_I2S_Init+0x1fa>
 8007162:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8007166:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800716a:	f023 030f 	bic.w	r3, r3, #15
 800716e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a21      	ldr	r2, [pc, #132]	; (80071fc <HAL_I2S_Init+0x290>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d101      	bne.n	800717e <HAL_I2S_Init+0x212>
 800717a:	4b24      	ldr	r3, [pc, #144]	; (800720c <HAL_I2S_Init+0x2a0>)
 800717c:	e001      	b.n	8007182 <HAL_I2S_Init+0x216>
 800717e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007182:	2202      	movs	r2, #2
 8007184:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1c      	ldr	r2, [pc, #112]	; (80071fc <HAL_I2S_Init+0x290>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d101      	bne.n	8007194 <HAL_I2S_Init+0x228>
 8007190:	4b1e      	ldr	r3, [pc, #120]	; (800720c <HAL_I2S_Init+0x2a0>)
 8007192:	e001      	b.n	8007198 <HAL_I2S_Init+0x22c>
 8007194:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a4:	d003      	beq.n	80071ae <HAL_I2S_Init+0x242>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d103      	bne.n	80071b6 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80071ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	e001      	b.n	80071ba <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80071b6:	2300      	movs	r3, #0
 80071b8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	b299      	uxth	r1, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80071d0:	4303      	orrs	r3, r0
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	430b      	orrs	r3, r1
 80071d6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80071d8:	4313      	orrs	r3, r2
 80071da:	b29a      	uxth	r2, r3
 80071dc:	897b      	ldrh	r3, [r7, #10]
 80071de:	4313      	orrs	r3, r2
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80071e6:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a03      	ldr	r2, [pc, #12]	; (80071fc <HAL_I2S_Init+0x290>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d10e      	bne.n	8007210 <HAL_I2S_Init+0x2a4>
 80071f2:	4b06      	ldr	r3, [pc, #24]	; (800720c <HAL_I2S_Init+0x2a0>)
 80071f4:	e00e      	b.n	8007214 <HAL_I2S_Init+0x2a8>
 80071f6:	bf00      	nop
 80071f8:	080072eb 	.word	0x080072eb
 80071fc:	40003800 	.word	0x40003800
 8007200:	40003c00 	.word	0x40003c00
 8007204:	cccccccd 	.word	0xcccccccd
 8007208:	08007401 	.word	0x08007401
 800720c:	40003400 	.word	0x40003400
 8007210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007214:	897a      	ldrh	r2, [r7, #10]
 8007216:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3720      	adds	r7, #32
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723c:	881a      	ldrh	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	1c9a      	adds	r2, r3, #2
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10e      	bne.n	8007284 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007274:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fb ff1c 	bl	80030bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8007284:	bf00      	nop
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	b292      	uxth	r2, r2
 80072a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	1c9a      	adds	r2, r3, #2
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072b0:	b29b      	uxth	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10e      	bne.n	80072e2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80072d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7fb ff0f 	bl	8003100 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80072e2:	bf00      	nop
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b04      	cmp	r3, #4
 8007304:	d13a      	bne.n	800737c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b01      	cmp	r3, #1
 800730e:	d109      	bne.n	8007324 <I2S_IRQHandler+0x3a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d102      	bne.n	8007324 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff ffb4 	bl	800728c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732a:	2b40      	cmp	r3, #64	; 0x40
 800732c:	d126      	bne.n	800737c <I2S_IRQHandler+0x92>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b20      	cmp	r3, #32
 800733a:	d11f      	bne.n	800737c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800734a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800734c:	2300      	movs	r3, #0
 800734e:	613b      	str	r3, [r7, #16]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	f043 0202 	orr.w	r2, r3, #2
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7fb feaa 	bl	80030d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b03      	cmp	r3, #3
 8007386:	d136      	bne.n	80073f6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	2b02      	cmp	r3, #2
 8007390:	d109      	bne.n	80073a6 <I2S_IRQHandler+0xbc>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800739c:	2b80      	cmp	r3, #128	; 0x80
 800739e:	d102      	bne.n	80073a6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f7ff ff45 	bl	8007230 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b08      	cmp	r3, #8
 80073ae:	d122      	bne.n	80073f6 <I2S_IRQHandler+0x10c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f003 0320 	and.w	r3, r3, #32
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d11b      	bne.n	80073f6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073cc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80073ce:	2300      	movs	r3, #0
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e8:	f043 0204 	orr.w	r2, r3, #4
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7fb fe6d 	bl	80030d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80073f6:	bf00      	nop
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4aa2      	ldr	r2, [pc, #648]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d101      	bne.n	800741e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800741a:	4ba2      	ldr	r3, [pc, #648]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800741c:	e001      	b.n	8007422 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800741e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a9b      	ldr	r2, [pc, #620]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d101      	bne.n	800743c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8007438:	4b9a      	ldr	r3, [pc, #616]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800743a:	e001      	b.n	8007440 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800743c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800744c:	d004      	beq.n	8007458 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	f040 8099 	bne.w	800758a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b02      	cmp	r3, #2
 8007460:	d107      	bne.n	8007472 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f925 	bl	80076bc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b01      	cmp	r3, #1
 800747a:	d107      	bne.n	800748c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f9c8 	bl	800781c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007492:	2b40      	cmp	r3, #64	; 0x40
 8007494:	d13a      	bne.n	800750c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d035      	beq.n	800750c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a7e      	ldr	r2, [pc, #504]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d101      	bne.n	80074ae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80074aa:	4b7e      	ldr	r3, [pc, #504]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80074ac:	e001      	b.n	80074b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80074ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4979      	ldr	r1, [pc, #484]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80074ba:	428b      	cmp	r3, r1
 80074bc:	d101      	bne.n	80074c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80074be:	4b79      	ldr	r3, [pc, #484]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80074c0:	e001      	b.n	80074c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80074c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80074c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80074ca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685a      	ldr	r2, [r3, #4]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80074da:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fe:	f043 0202 	orr.w	r2, r3, #2
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fb fde2 	bl	80030d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b08      	cmp	r3, #8
 8007514:	f040 80be 	bne.w	8007694 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 80b8 	beq.w	8007694 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007532:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a59      	ldr	r2, [pc, #356]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d101      	bne.n	8007542 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800753e:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007540:	e001      	b.n	8007546 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8007542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4954      	ldr	r1, [pc, #336]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800754e:	428b      	cmp	r3, r1
 8007550:	d101      	bne.n	8007556 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8007552:	4b54      	ldr	r3, [pc, #336]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007554:	e001      	b.n	800755a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8007556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800755a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800755e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007560:	2300      	movs	r3, #0
 8007562:	60bb      	str	r3, [r7, #8]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	60bb      	str	r3, [r7, #8]
 800756c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800757a:	f043 0204 	orr.w	r2, r3, #4
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fb fda4 	bl	80030d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007588:	e084      	b.n	8007694 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	f003 0302 	and.w	r3, r3, #2
 8007590:	2b02      	cmp	r3, #2
 8007592:	d107      	bne.n	80075a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f8be 	bl	8007720 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d107      	bne.n	80075be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f8fd 	bl	80077b8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c4:	2b40      	cmp	r3, #64	; 0x40
 80075c6:	d12f      	bne.n	8007628 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d02a      	beq.n	8007628 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80075e0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a2e      	ldr	r2, [pc, #184]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d101      	bne.n	80075f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80075ec:	4b2d      	ldr	r3, [pc, #180]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80075ee:	e001      	b.n	80075f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80075f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4929      	ldr	r1, [pc, #164]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80075fc:	428b      	cmp	r3, r1
 80075fe:	d101      	bne.n	8007604 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8007600:	4b28      	ldr	r3, [pc, #160]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007602:	e001      	b.n	8007608 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8007604:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007608:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800760c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761a:	f043 0202 	orr.w	r2, r3, #2
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fb fd54 	bl	80030d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b08      	cmp	r3, #8
 8007630:	d131      	bne.n	8007696 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b00      	cmp	r3, #0
 800763a:	d02c      	beq.n	8007696 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a17      	ldr	r2, [pc, #92]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d101      	bne.n	800764a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8007646:	4b17      	ldr	r3, [pc, #92]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8007648:	e001      	b.n	800764e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800764a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800764e:	685a      	ldr	r2, [r3, #4]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4912      	ldr	r1, [pc, #72]	; (80076a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8007656:	428b      	cmp	r3, r1
 8007658:	d101      	bne.n	800765e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800765a:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800765c:	e001      	b.n	8007662 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800765e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007662:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007666:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007676:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	f043 0204 	orr.w	r2, r3, #4
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f7fb fd1f 	bl	80030d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007692:	e000      	b.n	8007696 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007694:	bf00      	nop
}
 8007696:	bf00      	nop
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40003800 	.word	0x40003800
 80076a4:	40003400 	.word	0x40003400

080076a8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	1c99      	adds	r1, r3, #2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6251      	str	r1, [r2, #36]	; 0x24
 80076ce:	881a      	ldrh	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076da:	b29b      	uxth	r3, r3
 80076dc:	3b01      	subs	r3, #1
 80076de:	b29a      	uxth	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d113      	bne.n	8007716 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076fc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007702:	b29b      	uxth	r3, r3
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff ffc9 	bl	80076a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	1c99      	adds	r1, r3, #2
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6251      	str	r1, [r2, #36]	; 0x24
 8007732:	8819      	ldrh	r1, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1d      	ldr	r2, [pc, #116]	; (80077b0 <I2SEx_TxISR_I2SExt+0x90>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d101      	bne.n	8007742 <I2SEx_TxISR_I2SExt+0x22>
 800773e:	4b1d      	ldr	r3, [pc, #116]	; (80077b4 <I2SEx_TxISR_I2SExt+0x94>)
 8007740:	e001      	b.n	8007746 <I2SEx_TxISR_I2SExt+0x26>
 8007742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007746:	460a      	mov	r2, r1
 8007748:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b29a      	uxth	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775c:	b29b      	uxth	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d121      	bne.n	80077a6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a12      	ldr	r2, [pc, #72]	; (80077b0 <I2SEx_TxISR_I2SExt+0x90>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d101      	bne.n	8007770 <I2SEx_TxISR_I2SExt+0x50>
 800776c:	4b11      	ldr	r3, [pc, #68]	; (80077b4 <I2SEx_TxISR_I2SExt+0x94>)
 800776e:	e001      	b.n	8007774 <I2SEx_TxISR_I2SExt+0x54>
 8007770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	490d      	ldr	r1, [pc, #52]	; (80077b0 <I2SEx_TxISR_I2SExt+0x90>)
 800777c:	428b      	cmp	r3, r1
 800777e:	d101      	bne.n	8007784 <I2SEx_TxISR_I2SExt+0x64>
 8007780:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <I2SEx_TxISR_I2SExt+0x94>)
 8007782:	e001      	b.n	8007788 <I2SEx_TxISR_I2SExt+0x68>
 8007784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007788:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800778c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007792:	b29b      	uxth	r3, r3
 8007794:	2b00      	cmp	r3, #0
 8007796:	d106      	bne.n	80077a6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff ff81 	bl	80076a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80077a6:	bf00      	nop
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	40003800 	.word	0x40003800
 80077b4:	40003400 	.word	0x40003400

080077b8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68d8      	ldr	r0, [r3, #12]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	1c99      	adds	r1, r3, #2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	62d1      	str	r1, [r2, #44]	; 0x2c
 80077d0:	b282      	uxth	r2, r0
 80077d2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80077d8:	b29b      	uxth	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	b29a      	uxth	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d113      	bne.n	8007814 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077fa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d106      	bne.n	8007814 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ff4a 	bl	80076a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007814:	bf00      	nop
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a20      	ldr	r2, [pc, #128]	; (80078ac <I2SEx_RxISR_I2SExt+0x90>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d101      	bne.n	8007832 <I2SEx_RxISR_I2SExt+0x16>
 800782e:	4b20      	ldr	r3, [pc, #128]	; (80078b0 <I2SEx_RxISR_I2SExt+0x94>)
 8007830:	e001      	b.n	8007836 <I2SEx_RxISR_I2SExt+0x1a>
 8007832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007836:	68d8      	ldr	r0, [r3, #12]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	1c99      	adds	r1, r3, #2
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007842:	b282      	uxth	r2, r0
 8007844:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800784a:	b29b      	uxth	r3, r3
 800784c:	3b01      	subs	r3, #1
 800784e:	b29a      	uxth	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d121      	bne.n	80078a2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a12      	ldr	r2, [pc, #72]	; (80078ac <I2SEx_RxISR_I2SExt+0x90>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d101      	bne.n	800786c <I2SEx_RxISR_I2SExt+0x50>
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <I2SEx_RxISR_I2SExt+0x94>)
 800786a:	e001      	b.n	8007870 <I2SEx_RxISR_I2SExt+0x54>
 800786c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	490d      	ldr	r1, [pc, #52]	; (80078ac <I2SEx_RxISR_I2SExt+0x90>)
 8007878:	428b      	cmp	r3, r1
 800787a:	d101      	bne.n	8007880 <I2SEx_RxISR_I2SExt+0x64>
 800787c:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <I2SEx_RxISR_I2SExt+0x94>)
 800787e:	e001      	b.n	8007884 <I2SEx_RxISR_I2SExt+0x68>
 8007880:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007884:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007888:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7ff ff03 	bl	80076a8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40003800 	.word	0x40003800
 80078b0:	40003400 	.word	0x40003400

080078b4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80078bc:	f7fc f974 	bl	8003ba8 <HAL_GetTick>
 80078c0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e069      	b.n	80079a0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7fa fa3d 	bl	8001d60 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80078e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f85e 	bl	80079ac <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	3b01      	subs	r3, #1
 8007900:	021a      	lsls	r2, r3, #8
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	2120      	movs	r1, #32
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f856 	bl	80079c8 <QSPI_WaitFlagStateUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d137      	bne.n	8007996 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007930:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	6852      	ldr	r2, [r2, #4]
 8007938:	0611      	lsls	r1, r2, #24
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	68d2      	ldr	r2, [r2, #12]
 800793e:	4311      	orrs	r1, r2
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	69d2      	ldr	r2, [r2, #28]
 8007944:	4311      	orrs	r1, r2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6a12      	ldr	r2, [r2, #32]
 800794a:	4311      	orrs	r1, r2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	430b      	orrs	r3, r1
 8007952:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <HAL_QSPI_Init+0xf4>)
 800795c:	4013      	ands	r3, r2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6912      	ldr	r2, [r2, #16]
 8007962:	0411      	lsls	r1, r2, #16
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6952      	ldr	r2, [r2, #20]
 8007968:	4311      	orrs	r1, r2
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	6992      	ldr	r2, [r2, #24]
 800796e:	4311      	orrs	r1, r2
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6812      	ldr	r2, [r2, #0]
 8007974:	430b      	orrs	r3, r1
 8007976:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 0201 	orr.w	r2, r2, #1
 8007986:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800799e:	7afb      	ldrb	r3, [r7, #11]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	ffe0f8fe 	.word	0xffe0f8fe

080079ac <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	683a      	ldr	r2, [r7, #0]
 80079ba:	649a      	str	r2, [r3, #72]	; 0x48
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	4613      	mov	r3, r2
 80079d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80079d8:	e01a      	b.n	8007a10 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e0:	d016      	beq.n	8007a10 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079e2:	f7fc f8e1 	bl	8003ba8 <HAL_GetTick>
 80079e6:	4602      	mov	r2, r0
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d302      	bcc.n	80079f8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10b      	bne.n	8007a10 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2204      	movs	r2, #4
 80079fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a04:	f043 0201 	orr.w	r2, r3, #1
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e00e      	b.n	8007a2e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bf14      	ite	ne
 8007a1e:	2301      	movne	r3, #1
 8007a20:	2300      	moveq	r3, #0
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	461a      	mov	r2, r3
 8007a26:	79fb      	ldrb	r3, [r7, #7]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d1d6      	bne.n	80079da <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d101      	bne.n	8007a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e0cc      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a4c:	4b68      	ldr	r3, [pc, #416]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 030f 	and.w	r3, r3, #15
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d90c      	bls.n	8007a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a5a:	4b65      	ldr	r3, [pc, #404]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	b2d2      	uxtb	r2, r2
 8007a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a62:	4b63      	ldr	r3, [pc, #396]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d001      	beq.n	8007a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0b8      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0302 	and.w	r3, r3, #2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d020      	beq.n	8007ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a8c:	4b59      	ldr	r3, [pc, #356]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	4a58      	ldr	r2, [pc, #352]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0308 	and.w	r3, r3, #8
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007aa4:	4b53      	ldr	r3, [pc, #332]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	4a52      	ldr	r2, [pc, #328]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ab0:	4b50      	ldr	r3, [pc, #320]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	494d      	ldr	r1, [pc, #308]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d044      	beq.n	8007b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d107      	bne.n	8007ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad6:	4b47      	ldr	r3, [pc, #284]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d119      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e07f      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d003      	beq.n	8007af6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d107      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007af6:	4b3f      	ldr	r3, [pc, #252]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d109      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e06f      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b06:	4b3b      	ldr	r3, [pc, #236]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f003 0302 	and.w	r3, r3, #2
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d101      	bne.n	8007b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e067      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b16:	4b37      	ldr	r3, [pc, #220]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f023 0203 	bic.w	r2, r3, #3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	4934      	ldr	r1, [pc, #208]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b28:	f7fc f83e 	bl	8003ba8 <HAL_GetTick>
 8007b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b2e:	e00a      	b.n	8007b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b30:	f7fc f83a 	bl	8003ba8 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e04f      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b46:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 020c 	and.w	r2, r3, #12
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d1eb      	bne.n	8007b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b58:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d20c      	bcs.n	8007b80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b66:	4b22      	ldr	r3, [pc, #136]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	4b20      	ldr	r3, [pc, #128]	; (8007bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d001      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e032      	b.n	8007be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b8c:	4b19      	ldr	r3, [pc, #100]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4916      	ldr	r1, [pc, #88]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0308 	and.w	r3, r3, #8
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d009      	beq.n	8007bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	490e      	ldr	r1, [pc, #56]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bbe:	f000 f821 	bl	8007c04 <HAL_RCC_GetSysClockFreq>
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	091b      	lsrs	r3, r3, #4
 8007bca:	f003 030f 	and.w	r3, r3, #15
 8007bce:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8007bd0:	5cd3      	ldrb	r3, [r2, r3]
 8007bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8007bd6:	4a09      	ldr	r2, [pc, #36]	; (8007bfc <HAL_RCC_ClockConfig+0x1c4>)
 8007bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bda:	4b09      	ldr	r3, [pc, #36]	; (8007c00 <HAL_RCC_ClockConfig+0x1c8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fa fbb4 	bl	800234c <HAL_InitTick>

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	40023c00 	.word	0x40023c00
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	08012774 	.word	0x08012774
 8007bfc:	20000010 	.word	0x20000010
 8007c00:	2000006c 	.word	0x2000006c

08007c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	2300      	movs	r3, #0
 8007c14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c1a:	4b50      	ldr	r3, [pc, #320]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f003 030c 	and.w	r3, r3, #12
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d007      	beq.n	8007c36 <HAL_RCC_GetSysClockFreq+0x32>
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d008      	beq.n	8007c3c <HAL_RCC_GetSysClockFreq+0x38>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f040 808d 	bne.w	8007d4a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c30:	4b4b      	ldr	r3, [pc, #300]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007c32:	60bb      	str	r3, [r7, #8]
       break;
 8007c34:	e08c      	b.n	8007d50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c36:	4b4b      	ldr	r3, [pc, #300]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c38:	60bb      	str	r3, [r7, #8]
      break;
 8007c3a:	e089      	b.n	8007d50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c3c:	4b47      	ldr	r3, [pc, #284]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c46:	4b45      	ldr	r3, [pc, #276]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d023      	beq.n	8007c9a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c52:	4b42      	ldr	r3, [pc, #264]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	099b      	lsrs	r3, r3, #6
 8007c58:	f04f 0400 	mov.w	r4, #0
 8007c5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	ea03 0501 	and.w	r5, r3, r1
 8007c68:	ea04 0602 	and.w	r6, r4, r2
 8007c6c:	4a3d      	ldr	r2, [pc, #244]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c6e:	fb02 f106 	mul.w	r1, r2, r6
 8007c72:	2200      	movs	r2, #0
 8007c74:	fb02 f205 	mul.w	r2, r2, r5
 8007c78:	440a      	add	r2, r1
 8007c7a:	493a      	ldr	r1, [pc, #232]	; (8007d64 <HAL_RCC_GetSysClockFreq+0x160>)
 8007c7c:	fba5 0101 	umull	r0, r1, r5, r1
 8007c80:	1853      	adds	r3, r2, r1
 8007c82:	4619      	mov	r1, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f04f 0400 	mov.w	r4, #0
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	f7f8 fac7 	bl	8000220 <__aeabi_uldivmod>
 8007c92:	4603      	mov	r3, r0
 8007c94:	460c      	mov	r4, r1
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e049      	b.n	8007d2e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c9a:	4b30      	ldr	r3, [pc, #192]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	099b      	lsrs	r3, r3, #6
 8007ca0:	f04f 0400 	mov.w	r4, #0
 8007ca4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ca8:	f04f 0200 	mov.w	r2, #0
 8007cac:	ea03 0501 	and.w	r5, r3, r1
 8007cb0:	ea04 0602 	and.w	r6, r4, r2
 8007cb4:	4629      	mov	r1, r5
 8007cb6:	4632      	mov	r2, r6
 8007cb8:	f04f 0300 	mov.w	r3, #0
 8007cbc:	f04f 0400 	mov.w	r4, #0
 8007cc0:	0154      	lsls	r4, r2, #5
 8007cc2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007cc6:	014b      	lsls	r3, r1, #5
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4622      	mov	r2, r4
 8007ccc:	1b49      	subs	r1, r1, r5
 8007cce:	eb62 0206 	sbc.w	r2, r2, r6
 8007cd2:	f04f 0300 	mov.w	r3, #0
 8007cd6:	f04f 0400 	mov.w	r4, #0
 8007cda:	0194      	lsls	r4, r2, #6
 8007cdc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007ce0:	018b      	lsls	r3, r1, #6
 8007ce2:	1a5b      	subs	r3, r3, r1
 8007ce4:	eb64 0402 	sbc.w	r4, r4, r2
 8007ce8:	f04f 0100 	mov.w	r1, #0
 8007cec:	f04f 0200 	mov.w	r2, #0
 8007cf0:	00e2      	lsls	r2, r4, #3
 8007cf2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007cf6:	00d9      	lsls	r1, r3, #3
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	195b      	adds	r3, r3, r5
 8007cfe:	eb44 0406 	adc.w	r4, r4, r6
 8007d02:	f04f 0100 	mov.w	r1, #0
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	02a2      	lsls	r2, r4, #10
 8007d0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007d10:	0299      	lsls	r1, r3, #10
 8007d12:	460b      	mov	r3, r1
 8007d14:	4614      	mov	r4, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	4621      	mov	r1, r4
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f04f 0400 	mov.w	r4, #0
 8007d20:	461a      	mov	r2, r3
 8007d22:	4623      	mov	r3, r4
 8007d24:	f7f8 fa7c 	bl	8000220 <__aeabi_uldivmod>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d2e:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <HAL_RCC_GetSysClockFreq+0x158>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	0c1b      	lsrs	r3, r3, #16
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	3301      	adds	r3, #1
 8007d3a:	005b      	lsls	r3, r3, #1
 8007d3c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d46:	60bb      	str	r3, [r7, #8]
      break;
 8007d48:	e002      	b.n	8007d50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d4a:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007d4c:	60bb      	str	r3, [r7, #8]
      break;
 8007d4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d50:	68bb      	ldr	r3, [r7, #8]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40023800 	.word	0x40023800
 8007d60:	00f42400 	.word	0x00f42400
 8007d64:	017d7840 	.word	0x017d7840

08007d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000010 	.word	0x20000010

08007d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007d84:	f7ff fff0 	bl	8007d68 <HAL_RCC_GetHCLKFreq>
 8007d88:	4601      	mov	r1, r0
 8007d8a:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	0a9b      	lsrs	r3, r3, #10
 8007d90:	f003 0307 	and.w	r3, r3, #7
 8007d94:	4a03      	ldr	r2, [pc, #12]	; (8007da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d96:	5cd3      	ldrb	r3, [r2, r3]
 8007d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	40023800 	.word	0x40023800
 8007da4:	08012784 	.word	0x08012784

08007da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007dac:	f7ff ffdc 	bl	8007d68 <HAL_RCC_GetHCLKFreq>
 8007db0:	4601      	mov	r1, r0
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0b5b      	lsrs	r3, r3, #13
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	4a03      	ldr	r2, [pc, #12]	; (8007dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007dbe:	5cd3      	ldrb	r3, [r2, r3]
 8007dc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	40023800 	.word	0x40023800
 8007dcc:	08012784 	.word	0x08012784

08007dd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	220f      	movs	r2, #15
 8007dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007de0:	4b12      	ldr	r3, [pc, #72]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f003 0203 	and.w	r2, r3, #3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007dec:	4b0f      	ldr	r3, [pc, #60]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007df8:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007e04:	4b09      	ldr	r3, [pc, #36]	; (8007e2c <HAL_RCC_GetClockConfig+0x5c>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	08db      	lsrs	r3, r3, #3
 8007e0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e12:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <HAL_RCC_GetClockConfig+0x60>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 020f 	and.w	r2, r3, #15
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	601a      	str	r2, [r3, #0]
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	40023c00 	.word	0x40023c00

08007e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d010      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007e58:	4b7a      	ldr	r3, [pc, #488]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	4977      	ldr	r1, [pc, #476]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8007e76:	2301      	movs	r3, #1
 8007e78:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d010      	beq.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007e86:	4b6f      	ldr	r3, [pc, #444]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	496b      	ldr	r1, [pc, #428]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d101      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d022      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8007eb4:	4b63      	ldr	r3, [pc, #396]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ec2:	4960      	ldr	r1, [pc, #384]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d101      	bne.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ede:	d10c      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007ee0:	4b58      	ldr	r3, [pc, #352]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ee6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	4954      	ldr	r1, [pc, #336]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d022      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8007f06:	4b4f      	ldr	r3, [pc, #316]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f14:	494b      	ldr	r1, [pc, #300]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007f24:	2301      	movs	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f30:	d10c      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007f32:	4b44      	ldr	r3, [pc, #272]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	021b      	lsls	r3, r3, #8
 8007f44:	493f      	ldr	r1, [pc, #252]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0308 	and.w	r3, r3, #8
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 808a 	beq.w	800806e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	4b39      	ldr	r3, [pc, #228]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	4a38      	ldr	r2, [pc, #224]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f68:	6413      	str	r3, [r2, #64]	; 0x40
 8007f6a:	4b36      	ldr	r3, [pc, #216]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f72:	60fb      	str	r3, [r7, #12]
 8007f74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007f76:	4b34      	ldr	r3, [pc, #208]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a33      	ldr	r2, [pc, #204]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007f82:	f7fb fe11 	bl	8003ba8 <HAL_GetTick>
 8007f86:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f88:	e008      	b.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f8a:	f7fb fe0d 	bl	8003ba8 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d901      	bls.n	8007f9c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e1d1      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f9c:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0f0      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fa8:	4b26      	ldr	r3, [pc, #152]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb0:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d02f      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d028      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fc6:	4b1f      	ldr	r3, [pc, #124]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fce:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fd0:	4b1e      	ldr	r3, [pc, #120]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007fdc:	4a19      	ldr	r2, [pc, #100]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fe2:	4b18      	ldr	r3, [pc, #96]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d114      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007fee:	f7fb fddb 	bl	8003ba8 <HAL_GetTick>
 8007ff2:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff4:	e00a      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ff6:	f7fb fdd7 	bl	8003ba8 <HAL_GetTick>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	f241 3288 	movw	r2, #5000	; 0x1388
 8008004:	4293      	cmp	r3, r2
 8008006:	d901      	bls.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e199      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800800e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d0ee      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008024:	d114      	bne.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8008026:	4b07      	ldr	r3, [pc, #28]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800803a:	4902      	ldr	r1, [pc, #8]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800803c:	4313      	orrs	r3, r2
 800803e:	608b      	str	r3, [r1, #8]
 8008040:	e00c      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x228>
 8008042:	bf00      	nop
 8008044:	40023800 	.word	0x40023800
 8008048:	40007000 	.word	0x40007000
 800804c:	42470e40 	.word	0x42470e40
 8008050:	4b89      	ldr	r3, [pc, #548]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	4a88      	ldr	r2, [pc, #544]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008056:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800805a:	6093      	str	r3, [r2, #8]
 800805c:	4b86      	ldr	r3, [pc, #536]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800805e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008068:	4983      	ldr	r1, [pc, #524]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800806a:	4313      	orrs	r3, r2
 800806c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8008080:	4b7e      	ldr	r3, [pc, #504]	; (800827c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8008082:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00a      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8008090:	4b79      	ldr	r3, [pc, #484]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	4976      	ldr	r1, [pc, #472]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d011      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80080b2:	4b71      	ldr	r3, [pc, #452]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80080b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c0:	496d      	ldr	r1, [pc, #436]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080d0:	d101      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 80080d2:	2301      	movs	r3, #1
 80080d4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80080e2:	4b65      	ldr	r3, [pc, #404]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80080e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	4961      	ldr	r1, [pc, #388]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d004      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	f040 80c6 	bne.w	8008294 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008108:	4b5d      	ldr	r3, [pc, #372]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800810e:	f7fb fd4b 	bl	8003ba8 <HAL_GetTick>
 8008112:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008114:	e008      	b.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008116:	f7fb fd47 	bl	8003ba8 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e10b      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008128:	4b53      	ldr	r3, [pc, #332]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1f0      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8008134:	4a53      	ldr	r2, [pc, #332]	; (8008284 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b00      	cmp	r3, #0
 8008146:	d003      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d023      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d019      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800816c:	2b00      	cmp	r3, #0
 800816e:	d004      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008178:	d00e      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8008182:	2b00      	cmp	r3, #0
 8008184:	d019      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	d115      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x386>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008196:	d110      	bne.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	019b      	lsls	r3, r3, #6
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	061b      	lsls	r3, r3, #24
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	071b      	lsls	r3, r3, #28
 80081b2:	4931      	ldr	r1, [pc, #196]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x39a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d026      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d122      	bne.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80081e2:	4b25      	ldr	r3, [pc, #148]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80081e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081e8:	0e1b      	lsrs	r3, r3, #24
 80081ea:	f003 030f 	and.w	r3, r3, #15
 80081ee:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	019b      	lsls	r3, r3, #6
 80081fa:	431a      	orrs	r2, r3
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	061b      	lsls	r3, r3, #24
 8008200:	431a      	orrs	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	071b      	lsls	r3, r3, #28
 8008208:	491b      	ldr	r1, [pc, #108]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800820a:	4313      	orrs	r3, r2
 800820c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8008210:	4b19      	ldr	r3, [pc, #100]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008216:	f023 021f 	bic.w	r2, r3, #31
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	699b      	ldr	r3, [r3, #24]
 800821e:	3b01      	subs	r3, #1
 8008220:	4915      	ldr	r1, [pc, #84]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008222:	4313      	orrs	r3, r2
 8008224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008230:	2b00      	cmp	r3, #0
 8008232:	d010      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685a      	ldr	r2, [r3, #4]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	019b      	lsls	r3, r3, #6
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	061b      	lsls	r3, r3, #24
 8008246:	431a      	orrs	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	071b      	lsls	r3, r3, #28
 800824e:	490a      	ldr	r1, [pc, #40]	; (8008278 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8008250:	4313      	orrs	r3, r2
 8008252:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008256:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8008258:	2201      	movs	r2, #1
 800825a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800825c:	f7fb fca4 	bl	8003ba8 <HAL_GetTick>
 8008260:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008262:	e011      	b.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008264:	f7fb fca0 	bl	8003ba8 <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b02      	cmp	r3, #2
 8008270:	d90a      	bls.n	8008288 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e064      	b.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8008276:	bf00      	nop
 8008278:	40023800 	.word	0x40023800
 800827c:	424711e0 	.word	0x424711e0
 8008280:	42470068 	.word	0x42470068
 8008284:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008288:	4b2f      	ldr	r3, [pc, #188]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0e7      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00a      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082a0:	4b29      	ldr	r3, [pc, #164]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80082a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ae:	4926      	ldr	r1, [pc, #152]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80082b0:	4313      	orrs	r3, r2
 80082b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00a      	beq.n	80082d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80082c2:	4b21      	ldr	r3, [pc, #132]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80082c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	491d      	ldr	r1, [pc, #116]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00a      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80082e4:	4b18      	ldr	r3, [pc, #96]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80082e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f2:	4915      	ldr	r1, [pc, #84]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8008306:	4b10      	ldr	r3, [pc, #64]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	490c      	ldr	r1, [pc, #48]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00a      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008328:	4b07      	ldr	r3, [pc, #28]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800832a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008336:	4904      	ldr	r1, [pc, #16]	; (8008348 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8008338:	4313      	orrs	r3, r2
 800833a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3720      	adds	r7, #32
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40023800 	.word	0x40023800

0800834c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b01      	cmp	r3, #1
 8008368:	d003      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 800836a:	2b02      	cmp	r3, #2
 800836c:	f000 8098 	beq.w	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8008370:	e12d      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8008372:	4b9a      	ldr	r3, [pc, #616]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008374:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008378:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800837c:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008384:	d00c      	beq.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8008386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800838a:	d802      	bhi.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00a      	beq.n	80083a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 8008390:	e082      	b.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8008392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008396:	d047      	beq.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8008398:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800839c:	d06f      	beq.n	800847e <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800839e:	e07b      	b.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80083a0:	4b8f      	ldr	r3, [pc, #572]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083a2:	617b      	str	r3, [r7, #20]
          break;
 80083a4:	e07b      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80083a6:	4b8d      	ldr	r3, [pc, #564]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80083a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083b4:	d109      	bne.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80083b6:	4b89      	ldr	r3, [pc, #548]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80083b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083c0:	4a87      	ldr	r2, [pc, #540]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80083c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	e019      	b.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80083ca:	4b84      	ldr	r3, [pc, #528]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083d6:	d109      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80083d8:	4b80      	ldr	r3, [pc, #512]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80083da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083e2:	4a80      	ldr	r2, [pc, #512]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80083e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e8:	613b      	str	r3, [r7, #16]
 80083ea:	e008      	b.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80083ec:	4b7b      	ldr	r3, [pc, #492]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80083ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083f6:	4a7c      	ldr	r2, [pc, #496]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80083f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80083fe:	4b77      	ldr	r3, [pc, #476]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008404:	099b      	lsrs	r3, r3, #6
 8008406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008412:	4b72      	ldr	r3, [pc, #456]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008418:	0f1b      	lsrs	r3, r3, #28
 800841a:	f003 0307 	and.w	r3, r3, #7
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	fbb2 f3f3 	udiv	r3, r2, r3
 8008424:	617b      	str	r3, [r7, #20]
          break;
 8008426:	e03a      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008428:	4b6c      	ldr	r3, [pc, #432]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008434:	d108      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008436:	4b69      	ldr	r3, [pc, #420]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800843e:	4a69      	ldr	r2, [pc, #420]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008440:	fbb2 f3f3 	udiv	r3, r2, r3
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	e007      	b.n	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008448:	4b64      	ldr	r3, [pc, #400]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008450:	4a65      	ldr	r2, [pc, #404]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008452:	fbb2 f3f3 	udiv	r3, r2, r3
 8008456:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008458:	4b60      	ldr	r3, [pc, #384]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	099b      	lsrs	r3, r3, #6
 800845e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	fb02 f303 	mul.w	r3, r2, r3
 8008468:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800846a:	4b5c      	ldr	r3, [pc, #368]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	0f1b      	lsrs	r3, r3, #28
 8008470:	f003 0307 	and.w	r3, r3, #7
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	fbb2 f3f3 	udiv	r3, r2, r3
 800847a:	617b      	str	r3, [r7, #20]
          break;
 800847c:	e00f      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800847e:	4b57      	ldr	r3, [pc, #348]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008486:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800848a:	d102      	bne.n	8008492 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 800848c:	4b55      	ldr	r3, [pc, #340]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800848e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008490:	e005      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 8008492:	4b55      	ldr	r3, [pc, #340]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008494:	617b      	str	r3, [r7, #20]
          break;
 8008496:	e002      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	617b      	str	r3, [r7, #20]
          break;
 800849c:	bf00      	nop
        }
      }
      break;
 800849e:	e096      	b.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80084a0:	4b4e      	ldr	r3, [pc, #312]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80084aa:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b2:	d00c      	beq.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80084b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084b8:	d802      	bhi.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00a      	beq.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80084be:	e082      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80084c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084c4:	d047      	beq.n	8008556 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80084c6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80084ca:	d06f      	beq.n	80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80084cc:	e07b      	b.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80084ce:	4b44      	ldr	r3, [pc, #272]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084d0:	617b      	str	r3, [r7, #20]
          break;
 80084d2:	e07b      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80084d4:	4b41      	ldr	r3, [pc, #260]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084e2:	d109      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80084e4:	4b3d      	ldr	r3, [pc, #244]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084ee:	4a3c      	ldr	r2, [pc, #240]	; (80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80084f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f4:	613b      	str	r3, [r7, #16]
 80084f6:	e019      	b.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80084f8:	4b38      	ldr	r3, [pc, #224]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008500:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008504:	d109      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008506:	4b35      	ldr	r3, [pc, #212]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008510:	4a34      	ldr	r2, [pc, #208]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008512:	fbb2 f3f3 	udiv	r3, r2, r3
 8008516:	613b      	str	r3, [r7, #16]
 8008518:	e008      	b.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800851a:	4b30      	ldr	r3, [pc, #192]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800851c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008524:	4a30      	ldr	r2, [pc, #192]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008526:	fbb2 f3f3 	udiv	r3, r2, r3
 800852a:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800852c:	4b2b      	ldr	r3, [pc, #172]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800852e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008532:	099b      	lsrs	r3, r3, #6
 8008534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008540:	4b26      	ldr	r3, [pc, #152]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008546:	0f1b      	lsrs	r3, r3, #28
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	68ba      	ldr	r2, [r7, #8]
 800854e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008552:	617b      	str	r3, [r7, #20]
          break;
 8008554:	e03a      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008556:	4b21      	ldr	r3, [pc, #132]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800855e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008562:	d108      	bne.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008564:	4b1d      	ldr	r3, [pc, #116]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800856c:	4a1d      	ldr	r2, [pc, #116]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800856e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	e007      	b.n	8008586 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008576:	4b19      	ldr	r3, [pc, #100]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800857e:	4a1a      	ldr	r2, [pc, #104]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008580:	fbb2 f3f3 	udiv	r3, r2, r3
 8008584:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008586:	4b15      	ldr	r3, [pc, #84]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	099b      	lsrs	r3, r3, #6
 800858c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	fb02 f303 	mul.w	r3, r2, r3
 8008596:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008598:	4b10      	ldr	r3, [pc, #64]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	0f1b      	lsrs	r3, r3, #28
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a8:	617b      	str	r3, [r7, #20]
          break;
 80085aa:	e00f      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80085ac:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085b8:	d102      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 80085ba:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80085bc:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80085be:	e005      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 80085c0:	4b09      	ldr	r3, [pc, #36]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80085c2:	617b      	str	r3, [r7, #20]
          break;
 80085c4:	e002      	b.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
          break;
 80085ca:	bf00      	nop
        }
      }
      break;
 80085cc:	bf00      	nop
    }
  }
  return frequency;
 80085ce:	697b      	ldr	r3, [r7, #20]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	371c      	adds	r7, #28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	40023800 	.word	0x40023800
 80085e0:	00bb8000 	.word	0x00bb8000
 80085e4:	017d7840 	.word	0x017d7840
 80085e8:	00f42400 	.word	0x00f42400

080085ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d075      	beq.n	80086f0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008604:	4ba2      	ldr	r3, [pc, #648]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 030c 	and.w	r3, r3, #12
 800860c:	2b04      	cmp	r3, #4
 800860e:	d00c      	beq.n	800862a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008610:	4b9f      	ldr	r3, [pc, #636]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008618:	2b08      	cmp	r3, #8
 800861a:	d112      	bne.n	8008642 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800861c:	4b9c      	ldr	r3, [pc, #624]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008628:	d10b      	bne.n	8008642 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800862a:	4b99      	ldr	r3, [pc, #612]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d05b      	beq.n	80086ee <HAL_RCC_OscConfig+0x102>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d157      	bne.n	80086ee <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e20b      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800864a:	d106      	bne.n	800865a <HAL_RCC_OscConfig+0x6e>
 800864c:	4b90      	ldr	r3, [pc, #576]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a8f      	ldr	r2, [pc, #572]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	e01d      	b.n	8008696 <HAL_RCC_OscConfig+0xaa>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008662:	d10c      	bne.n	800867e <HAL_RCC_OscConfig+0x92>
 8008664:	4b8a      	ldr	r3, [pc, #552]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a89      	ldr	r2, [pc, #548]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 800866a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	4b87      	ldr	r3, [pc, #540]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a86      	ldr	r2, [pc, #536]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800867a:	6013      	str	r3, [r2, #0]
 800867c:	e00b      	b.n	8008696 <HAL_RCC_OscConfig+0xaa>
 800867e:	4b84      	ldr	r3, [pc, #528]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a83      	ldr	r2, [pc, #524]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008688:	6013      	str	r3, [r2, #0]
 800868a:	4b81      	ldr	r3, [pc, #516]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a80      	ldr	r2, [pc, #512]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008690:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008694:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d013      	beq.n	80086c6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869e:	f7fb fa83 	bl	8003ba8 <HAL_GetTick>
 80086a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086a4:	e008      	b.n	80086b8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086a6:	f7fb fa7f 	bl	8003ba8 <HAL_GetTick>
 80086aa:	4602      	mov	r2, r0
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	1ad3      	subs	r3, r2, r3
 80086b0:	2b64      	cmp	r3, #100	; 0x64
 80086b2:	d901      	bls.n	80086b8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e1d0      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086b8:	4b75      	ldr	r3, [pc, #468]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d0f0      	beq.n	80086a6 <HAL_RCC_OscConfig+0xba>
 80086c4:	e014      	b.n	80086f0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c6:	f7fb fa6f 	bl	8003ba8 <HAL_GetTick>
 80086ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086cc:	e008      	b.n	80086e0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086ce:	f7fb fa6b 	bl	8003ba8 <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	2b64      	cmp	r3, #100	; 0x64
 80086da:	d901      	bls.n	80086e0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e1bc      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086e0:	4b6b      	ldr	r3, [pc, #428]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1f0      	bne.n	80086ce <HAL_RCC_OscConfig+0xe2>
 80086ec:	e000      	b.n	80086f0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d063      	beq.n	80087c4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80086fc:	4b64      	ldr	r3, [pc, #400]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 030c 	and.w	r3, r3, #12
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008708:	4b61      	ldr	r3, [pc, #388]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008710:	2b08      	cmp	r3, #8
 8008712:	d11c      	bne.n	800874e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008714:	4b5e      	ldr	r3, [pc, #376]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d116      	bne.n	800874e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008720:	4b5b      	ldr	r3, [pc, #364]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <HAL_RCC_OscConfig+0x14c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d001      	beq.n	8008738 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e190      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008738:	4b55      	ldr	r3, [pc, #340]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	691b      	ldr	r3, [r3, #16]
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4952      	ldr	r1, [pc, #328]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008748:	4313      	orrs	r3, r2
 800874a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800874c:	e03a      	b.n	80087c4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d020      	beq.n	8008798 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008756:	4b4f      	ldr	r3, [pc, #316]	; (8008894 <HAL_RCC_OscConfig+0x2a8>)
 8008758:	2201      	movs	r2, #1
 800875a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800875c:	f7fb fa24 	bl	8003ba8 <HAL_GetTick>
 8008760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008762:	e008      	b.n	8008776 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008764:	f7fb fa20 	bl	8003ba8 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	2b02      	cmp	r3, #2
 8008770:	d901      	bls.n	8008776 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e171      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008776:	4b46      	ldr	r3, [pc, #280]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0302 	and.w	r3, r3, #2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d0f0      	beq.n	8008764 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008782:	4b43      	ldr	r3, [pc, #268]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	493f      	ldr	r1, [pc, #252]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008792:	4313      	orrs	r3, r2
 8008794:	600b      	str	r3, [r1, #0]
 8008796:	e015      	b.n	80087c4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008798:	4b3e      	ldr	r3, [pc, #248]	; (8008894 <HAL_RCC_OscConfig+0x2a8>)
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800879e:	f7fb fa03 	bl	8003ba8 <HAL_GetTick>
 80087a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087a4:	e008      	b.n	80087b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087a6:	f7fb f9ff 	bl	8003ba8 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d901      	bls.n	80087b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e150      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087b8:	4b35      	ldr	r3, [pc, #212]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0302 	and.w	r3, r3, #2
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1f0      	bne.n	80087a6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 0308 	and.w	r3, r3, #8
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d030      	beq.n	8008832 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	695b      	ldr	r3, [r3, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d016      	beq.n	8008806 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087d8:	4b2f      	ldr	r3, [pc, #188]	; (8008898 <HAL_RCC_OscConfig+0x2ac>)
 80087da:	2201      	movs	r2, #1
 80087dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087de:	f7fb f9e3 	bl	8003ba8 <HAL_GetTick>
 80087e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087e4:	e008      	b.n	80087f8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087e6:	f7fb f9df 	bl	8003ba8 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e130      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087f8:	4b25      	ldr	r3, [pc, #148]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 80087fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087fc:	f003 0302 	and.w	r3, r3, #2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0f0      	beq.n	80087e6 <HAL_RCC_OscConfig+0x1fa>
 8008804:	e015      	b.n	8008832 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008806:	4b24      	ldr	r3, [pc, #144]	; (8008898 <HAL_RCC_OscConfig+0x2ac>)
 8008808:	2200      	movs	r2, #0
 800880a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800880c:	f7fb f9cc 	bl	8003ba8 <HAL_GetTick>
 8008810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008812:	e008      	b.n	8008826 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008814:	f7fb f9c8 	bl	8003ba8 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	2b02      	cmp	r3, #2
 8008820:	d901      	bls.n	8008826 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e119      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008826:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882a:	f003 0302 	and.w	r3, r3, #2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1f0      	bne.n	8008814 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0304 	and.w	r3, r3, #4
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 809f 	beq.w	800897e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008840:	2300      	movs	r3, #0
 8008842:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008844:	4b12      	ldr	r3, [pc, #72]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10f      	bne.n	8008870 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008858:	4a0d      	ldr	r2, [pc, #52]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 800885a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800885e:	6413      	str	r3, [r2, #64]	; 0x40
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <HAL_RCC_OscConfig+0x2a4>)
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800886c:	2301      	movs	r3, #1
 800886e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008870:	4b0a      	ldr	r3, [pc, #40]	; (800889c <HAL_RCC_OscConfig+0x2b0>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008878:	2b00      	cmp	r3, #0
 800887a:	d120      	bne.n	80088be <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800887c:	4b07      	ldr	r3, [pc, #28]	; (800889c <HAL_RCC_OscConfig+0x2b0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a06      	ldr	r2, [pc, #24]	; (800889c <HAL_RCC_OscConfig+0x2b0>)
 8008882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008886:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008888:	f7fb f98e 	bl	8003ba8 <HAL_GetTick>
 800888c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800888e:	e010      	b.n	80088b2 <HAL_RCC_OscConfig+0x2c6>
 8008890:	40023800 	.word	0x40023800
 8008894:	42470000 	.word	0x42470000
 8008898:	42470e80 	.word	0x42470e80
 800889c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088a0:	f7fb f982 	bl	8003ba8 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e0d3      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b2:	4b6c      	ldr	r3, [pc, #432]	; (8008a64 <HAL_RCC_OscConfig+0x478>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0f0      	beq.n	80088a0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d106      	bne.n	80088d4 <HAL_RCC_OscConfig+0x2e8>
 80088c6:	4b68      	ldr	r3, [pc, #416]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80088c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ca:	4a67      	ldr	r2, [pc, #412]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80088cc:	f043 0301 	orr.w	r3, r3, #1
 80088d0:	6713      	str	r3, [r2, #112]	; 0x70
 80088d2:	e01c      	b.n	800890e <HAL_RCC_OscConfig+0x322>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b05      	cmp	r3, #5
 80088da:	d10c      	bne.n	80088f6 <HAL_RCC_OscConfig+0x30a>
 80088dc:	4b62      	ldr	r3, [pc, #392]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80088de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e0:	4a61      	ldr	r2, [pc, #388]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80088e2:	f043 0304 	orr.w	r3, r3, #4
 80088e6:	6713      	str	r3, [r2, #112]	; 0x70
 80088e8:	4b5f      	ldr	r3, [pc, #380]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80088ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ec:	4a5e      	ldr	r2, [pc, #376]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80088ee:	f043 0301 	orr.w	r3, r3, #1
 80088f2:	6713      	str	r3, [r2, #112]	; 0x70
 80088f4:	e00b      	b.n	800890e <HAL_RCC_OscConfig+0x322>
 80088f6:	4b5c      	ldr	r3, [pc, #368]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	4a5b      	ldr	r2, [pc, #364]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	6713      	str	r3, [r2, #112]	; 0x70
 8008902:	4b59      	ldr	r3, [pc, #356]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008906:	4a58      	ldr	r2, [pc, #352]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008908:	f023 0304 	bic.w	r3, r3, #4
 800890c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d015      	beq.n	8008942 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008916:	f7fb f947 	bl	8003ba8 <HAL_GetTick>
 800891a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800891c:	e00a      	b.n	8008934 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800891e:	f7fb f943 	bl	8003ba8 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	f241 3288 	movw	r2, #5000	; 0x1388
 800892c:	4293      	cmp	r3, r2
 800892e:	d901      	bls.n	8008934 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e092      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008934:	4b4c      	ldr	r3, [pc, #304]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d0ee      	beq.n	800891e <HAL_RCC_OscConfig+0x332>
 8008940:	e014      	b.n	800896c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008942:	f7fb f931 	bl	8003ba8 <HAL_GetTick>
 8008946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008948:	e00a      	b.n	8008960 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800894a:	f7fb f92d 	bl	8003ba8 <HAL_GetTick>
 800894e:	4602      	mov	r2, r0
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	f241 3288 	movw	r2, #5000	; 0x1388
 8008958:	4293      	cmp	r3, r2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e07c      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008960:	4b41      	ldr	r3, [pc, #260]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1ee      	bne.n	800894a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d105      	bne.n	800897e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008972:	4b3d      	ldr	r3, [pc, #244]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	4a3c      	ldr	r2, [pc, #240]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800897c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d068      	beq.n	8008a58 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008986:	4b38      	ldr	r3, [pc, #224]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 030c 	and.w	r3, r3, #12
 800898e:	2b08      	cmp	r3, #8
 8008990:	d060      	beq.n	8008a54 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d145      	bne.n	8008a26 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800899a:	4b34      	ldr	r3, [pc, #208]	; (8008a6c <HAL_RCC_OscConfig+0x480>)
 800899c:	2200      	movs	r2, #0
 800899e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089a0:	f7fb f902 	bl	8003ba8 <HAL_GetTick>
 80089a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089a6:	e008      	b.n	80089ba <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089a8:	f7fb f8fe 	bl	8003ba8 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d901      	bls.n	80089ba <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80089b6:	2303      	movs	r3, #3
 80089b8:	e04f      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ba:	4b2b      	ldr	r3, [pc, #172]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1f0      	bne.n	80089a8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	69da      	ldr	r2, [r3, #28]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	431a      	orrs	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d4:	019b      	lsls	r3, r3, #6
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089dc:	085b      	lsrs	r3, r3, #1
 80089de:	3b01      	subs	r3, #1
 80089e0:	041b      	lsls	r3, r3, #16
 80089e2:	431a      	orrs	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	061b      	lsls	r3, r3, #24
 80089ea:	431a      	orrs	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f0:	071b      	lsls	r3, r3, #28
 80089f2:	491d      	ldr	r1, [pc, #116]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <HAL_RCC_OscConfig+0x480>)
 80089fa:	2201      	movs	r2, #1
 80089fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089fe:	f7fb f8d3 	bl	8003ba8 <HAL_GetTick>
 8008a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a04:	e008      	b.n	8008a18 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a06:	f7fb f8cf 	bl	8003ba8 <HAL_GetTick>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	1ad3      	subs	r3, r2, r3
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d901      	bls.n	8008a18 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e020      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a18:	4b13      	ldr	r3, [pc, #76]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d0f0      	beq.n	8008a06 <HAL_RCC_OscConfig+0x41a>
 8008a24:	e018      	b.n	8008a58 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a26:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <HAL_RCC_OscConfig+0x480>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2c:	f7fb f8bc 	bl	8003ba8 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a34:	f7fb f8b8 	bl	8003ba8 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e009      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a46:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <HAL_RCC_OscConfig+0x47c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1f0      	bne.n	8008a34 <HAL_RCC_OscConfig+0x448>
 8008a52:	e001      	b.n	8008a58 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e000      	b.n	8008a5a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3718      	adds	r7, #24
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	40007000 	.word	0x40007000
 8008a68:	40023800 	.word	0x40023800
 8008a6c:	42470060 	.word	0x42470060

08008a70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d101      	bne.n	8008a82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e022      	b.n	8008ac8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d105      	bne.n	8008a9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7f9 fa2d 	bl	8001ef4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2203      	movs	r2, #3
 8008a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f814 	bl	8008ad0 <HAL_SD_InitCard>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e00a      	b.n	8008ac8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ad0:	b5b0      	push	{r4, r5, r7, lr}
 8008ad2:	b08e      	sub	sp, #56	; 0x38
 8008ad4:	af04      	add	r7, sp, #16
 8008ad6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008aec:	2376      	movs	r3, #118	; 0x76
 8008aee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681d      	ldr	r5, [r3, #0]
 8008af4:	466c      	mov	r4, sp
 8008af6:	f107 0314 	add.w	r3, r7, #20
 8008afa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008afe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b08:	4628      	mov	r0, r5
 8008b0a:	f002 fcbd 	bl	800b488 <SDIO_Init>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e031      	b.n	8008b84 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008b20:	4b1a      	ldr	r3, [pc, #104]	; (8008b8c <HAL_SD_InitCard+0xbc>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f002 fce4 	bl	800b4f8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008b30:	4b16      	ldr	r3, [pc, #88]	; (8008b8c <HAL_SD_InitCard+0xbc>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fb18 	bl	800916c <SD_PowerON>
 8008b3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00b      	beq.n	8008b5c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e013      	b.n	8008b84 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa37 	bl	8008fd0 <SD_InitCard>
 8008b62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00b      	beq.n	8008b82 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	431a      	orrs	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3728      	adds	r7, #40	; 0x28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b8c:	422580a0 	.word	0x422580a0

08008b90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b9e:	0f9b      	lsrs	r3, r3, #30
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008baa:	0e9b      	lsrs	r3, r3, #26
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bbc:	0e1b      	lsrs	r3, r3, #24
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 0303 	and.w	r3, r3, #3
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bce:	0c1b      	lsrs	r3, r3, #16
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bda:	0a1b      	lsrs	r3, r3, #8
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be6:	b2da      	uxtb	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bf0:	0d1b      	lsrs	r3, r3, #20
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bfc:	0c1b      	lsrs	r3, r3, #16
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	f003 030f 	and.w	r3, r3, #15
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c0e:	0bdb      	lsrs	r3, r3, #15
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 0301 	and.w	r3, r3, #1
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c20:	0b9b      	lsrs	r3, r3, #14
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c32:	0b5b      	lsrs	r3, r3, #13
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c44:	0b1b      	lsrs	r3, r3, #12
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2200      	movs	r2, #0
 8008c56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d163      	bne.n	8008d28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c64:	009a      	lsls	r2, r3, #2
 8008c66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c70:	0f92      	lsrs	r2, r2, #30
 8008c72:	431a      	orrs	r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7c:	0edb      	lsrs	r3, r3, #27
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	f003 0307 	and.w	r3, r3, #7
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c8e:	0e1b      	lsrs	r3, r3, #24
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 0307 	and.w	r3, r3, #7
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca0:	0d5b      	lsrs	r3, r3, #21
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	f003 0307 	and.w	r3, r3, #7
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb2:	0c9b      	lsrs	r3, r3, #18
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc4:	0bdb      	lsrs	r3, r3, #15
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	7e1b      	ldrb	r3, [r3, #24]
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	2201      	movs	r2, #1
 8008cea:	fa02 f303 	lsl.w	r3, r2, r3
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008cf2:	fb02 f203 	mul.w	r2, r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	7a1b      	ldrb	r3, [r3, #8]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	f003 030f 	and.w	r3, r3, #15
 8008d04:	2201      	movs	r2, #1
 8008d06:	409a      	lsls	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008d14:	0a52      	lsrs	r2, r2, #9
 8008d16:	fb02 f203 	mul.w	r2, r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d24:	661a      	str	r2, [r3, #96]	; 0x60
 8008d26:	e031      	b.n	8008d8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d11d      	bne.n	8008d6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d34:	041b      	lsls	r3, r3, #16
 8008d36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d3e:	0c1b      	lsrs	r3, r3, #16
 8008d40:	431a      	orrs	r2, r3
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	029a      	lsls	r2, r3, #10
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	661a      	str	r2, [r3, #96]	; 0x60
 8008d6a:	e00f      	b.n	8008d8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a58      	ldr	r2, [pc, #352]	; (8008ed4 <HAL_SD_GetCardCSD+0x344>)
 8008d72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e09d      	b.n	8008ec8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d90:	0b9b      	lsrs	r3, r3, #14
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	b2da      	uxtb	r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da2:	09db      	lsrs	r3, r3, #7
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc4:	0fdb      	lsrs	r3, r3, #31
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd0:	0f5b      	lsrs	r3, r3, #29
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de2:	0e9b      	lsrs	r3, r3, #26
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df4:	0d9b      	lsrs	r3, r3, #22
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	f003 030f 	and.w	r3, r3, #15
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e06:	0d5b      	lsrs	r3, r3, #21
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e22:	0c1b      	lsrs	r3, r3, #16
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	b2da      	uxtb	r2, r3
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e36:	0bdb      	lsrs	r3, r3, #15
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4a:	0b9b      	lsrs	r3, r3, #14
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5e:	0b5b      	lsrs	r3, r3, #13
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e72:	0b1b      	lsrs	r3, r3, #12
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e86:	0a9b      	lsrs	r3, r3, #10
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 0303 	and.w	r3, r3, #3
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9a:	0a1b      	lsrs	r3, r3, #8
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	004005ff 	.word	0x004005ff

08008ed8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008ed8:	b5b0      	push	{r4, r5, r7, lr}
 8008eda:	b08e      	sub	sp, #56	; 0x38
 8008edc:	af04      	add	r7, sp, #16
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2203      	movs	r2, #3
 8008ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d02e      	beq.n	8008f50 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef8:	d106      	bne.n	8008f08 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38
 8008f06:	e029      	b.n	8008f5c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f0e:	d10a      	bne.n	8008f26 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f9b9 	bl	8009288 <SD_WideBus_Enable>
 8008f16:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	639a      	str	r2, [r3, #56]	; 0x38
 8008f24:	e01a      	b.n	8008f5c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f000 f9f6 	bl	800931e <SD_WideBus_Disable>
 8008f32:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	639a      	str	r2, [r3, #56]	; 0x38
 8008f40:	e00c      	b.n	8008f5c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008f4e:	e005      	b.n	8008f5c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d009      	beq.n	8008f78 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a18      	ldr	r2, [pc, #96]	; (8008fcc <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e024      	b.n	8008fc2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681d      	ldr	r5, [r3, #0]
 8008f9e:	466c      	mov	r4, sp
 8008fa0:	f107 0318 	add.w	r3, r7, #24
 8008fa4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008fa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008fac:	f107 030c 	add.w	r3, r7, #12
 8008fb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f002 fa68 	bl	800b488 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3728      	adds	r7, #40	; 0x28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	004005ff 	.word	0x004005ff

08008fd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fd0:	b5b0      	push	{r4, r5, r7, lr}
 8008fd2:	b094      	sub	sp, #80	; 0x50
 8008fd4:	af04      	add	r7, sp, #16
 8008fd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f002 fa98 	bl	800b516 <SDIO_GetPowerState>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d102      	bne.n	8008ff2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ff0:	e0b7      	b.n	8009162 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d02f      	beq.n	800905a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f002 fc17 	bl	800b832 <SDMMC_CmdSendCID>
 8009004:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <SD_InitCard+0x40>
    {
      return errorstate;
 800900c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900e:	e0a8      	b.n	8009162 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2100      	movs	r1, #0
 8009016:	4618      	mov	r0, r3
 8009018:	f002 fac2 	bl	800b5a0 <SDIO_GetResponse>
 800901c:	4602      	mov	r2, r0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2104      	movs	r1, #4
 8009028:	4618      	mov	r0, r3
 800902a:	f002 fab9 	bl	800b5a0 <SDIO_GetResponse>
 800902e:	4602      	mov	r2, r0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2108      	movs	r1, #8
 800903a:	4618      	mov	r0, r3
 800903c:	f002 fab0 	bl	800b5a0 <SDIO_GetResponse>
 8009040:	4602      	mov	r2, r0
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	210c      	movs	r1, #12
 800904c:	4618      	mov	r0, r3
 800904e:	f002 faa7 	bl	800b5a0 <SDIO_GetResponse>
 8009052:	4602      	mov	r2, r0
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	2b03      	cmp	r3, #3
 8009060:	d00d      	beq.n	800907e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f107 020e 	add.w	r2, r7, #14
 800906a:	4611      	mov	r1, r2
 800906c:	4618      	mov	r0, r3
 800906e:	f002 fc1d 	bl	800b8ac <SDMMC_CmdSetRelAdd>
 8009072:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <SD_InitCard+0xae>
    {
      return errorstate;
 800907a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907c:	e071      	b.n	8009162 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009082:	2b03      	cmp	r3, #3
 8009084:	d036      	beq.n	80090f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009086:	89fb      	ldrh	r3, [r7, #14]
 8009088:	461a      	mov	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009096:	041b      	lsls	r3, r3, #16
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f002 fbe7 	bl	800b86e <SDMMC_CmdSendCSD>
 80090a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80090a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090aa:	e05a      	b.n	8009162 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f002 fa74 	bl	800b5a0 <SDIO_GetResponse>
 80090b8:	4602      	mov	r2, r0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2104      	movs	r1, #4
 80090c4:	4618      	mov	r0, r3
 80090c6:	f002 fa6b 	bl	800b5a0 <SDIO_GetResponse>
 80090ca:	4602      	mov	r2, r0
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2108      	movs	r1, #8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f002 fa62 	bl	800b5a0 <SDIO_GetResponse>
 80090dc:	4602      	mov	r2, r0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	210c      	movs	r1, #12
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 fa59 	bl	800b5a0 <SDIO_GetResponse>
 80090ee:	4602      	mov	r2, r0
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2104      	movs	r1, #4
 80090fa:	4618      	mov	r0, r3
 80090fc:	f002 fa50 	bl	800b5a0 <SDIO_GetResponse>
 8009100:	4603      	mov	r3, r0
 8009102:	0d1a      	lsrs	r2, r3, #20
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009108:	f107 0310 	add.w	r3, r7, #16
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff fd3e 	bl	8008b90 <HAL_SD_GetCardCSD>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800911a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800911e:	e020      	b.n	8009162 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6819      	ldr	r1, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009128:	041b      	lsls	r3, r3, #16
 800912a:	f04f 0400 	mov.w	r4, #0
 800912e:	461a      	mov	r2, r3
 8009130:	4623      	mov	r3, r4
 8009132:	4608      	mov	r0, r1
 8009134:	f002 fa95 	bl	800b662 <SDMMC_CmdSelDesel>
 8009138:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800913a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <SD_InitCard+0x174>
  {
    return errorstate;
 8009140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009142:	e00e      	b.n	8009162 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681d      	ldr	r5, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	466c      	mov	r4, sp
 800914c:	f103 0210 	add.w	r2, r3, #16
 8009150:	ca07      	ldmia	r2, {r0, r1, r2}
 8009152:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009156:	3304      	adds	r3, #4
 8009158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800915a:	4628      	mov	r0, r5
 800915c:	f002 f994 	bl	800b488 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3740      	adds	r7, #64	; 0x40
 8009166:	46bd      	mov	sp, r7
 8009168:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800916c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	2300      	movs	r3, #0
 800917e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f002 fa8f 	bl	800b6a8 <SDMMC_CmdGoIdleState>
 800918a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	e072      	b.n	800927c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f002 faa2 	bl	800b6e4 <SDMMC_CmdOperCond>
 80091a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00d      	beq.n	80091c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f002 fa78 	bl	800b6a8 <SDMMC_CmdGoIdleState>
 80091b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	e05b      	b.n	800927c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d137      	bne.n	8009242 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f002 faa2 	bl	800b722 <SDMMC_CmdAppCommand>
 80091de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d02d      	beq.n	8009242 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091ea:	e047      	b.n	800927c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2100      	movs	r1, #0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f002 fa95 	bl	800b722 <SDMMC_CmdAppCommand>
 80091f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <SD_PowerON+0x98>
    {
      return errorstate;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	e03b      	b.n	800927c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	491e      	ldr	r1, [pc, #120]	; (8009284 <SD_PowerON+0x118>)
 800920a:	4618      	mov	r0, r3
 800920c:	f002 faab 	bl	800b766 <SDMMC_CmdAppOperCommand>
 8009210:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009218:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800921c:	e02e      	b.n	800927c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f002 f9bb 	bl	800b5a0 <SDIO_GetResponse>
 800922a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	0fdb      	lsrs	r3, r3, #31
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <SD_PowerON+0xcc>
 8009234:	2301      	movs	r3, #1
 8009236:	e000      	b.n	800923a <SD_PowerON+0xce>
 8009238:	2300      	movs	r3, #0
 800923a:	613b      	str	r3, [r7, #16]

    count++;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	3301      	adds	r3, #1
 8009240:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009248:	4293      	cmp	r3, r2
 800924a:	d802      	bhi.n	8009252 <SD_PowerON+0xe6>
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0cc      	beq.n	80091ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009258:	4293      	cmp	r3, r2
 800925a:	d902      	bls.n	8009262 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800925c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009260:	e00c      	b.n	800927c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	645a      	str	r2, [r3, #68]	; 0x44
 8009272:	e002      	b.n	800927a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	c1100000 	.word	0xc1100000

08009288 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	2300      	movs	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f002 f97e 	bl	800b5a0 <SDIO_GetResponse>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092ae:	d102      	bne.n	80092b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092b4:	e02f      	b.n	8009316 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092b6:	f107 030c 	add.w	r3, r7, #12
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f879 	bl	80093b4 <SD_FindSCR>
 80092c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	e023      	b.n	8009316 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d01c      	beq.n	8009312 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f002 fa1c 	bl	800b722 <SDMMC_CmdAppCommand>
 80092ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	e00f      	b.n	8009316 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2102      	movs	r1, #2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f002 fa55 	bl	800b7ac <SDMMC_CmdBusWidth>
 8009302:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	e003      	b.n	8009316 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800930e:	2300      	movs	r3, #0
 8009310:	e001      	b.n	8009316 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009312:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009316:	4618      	mov	r0, r3
 8009318:	3718      	adds	r7, #24
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}

0800931e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b086      	sub	sp, #24
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009326:	2300      	movs	r3, #0
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	2300      	movs	r3, #0
 800932c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2100      	movs	r1, #0
 8009334:	4618      	mov	r0, r3
 8009336:	f002 f933 	bl	800b5a0 <SDIO_GetResponse>
 800933a:	4603      	mov	r3, r0
 800933c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009344:	d102      	bne.n	800934c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009346:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800934a:	e02f      	b.n	80093ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800934c:	f107 030c 	add.w	r3, r7, #12
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f82e 	bl	80093b4 <SD_FindSCR>
 8009358:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	e023      	b.n	80093ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01c      	beq.n	80093a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f002 f9d1 	bl	800b722 <SDMMC_CmdAppCommand>
 8009380:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	e00f      	b.n	80093ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f002 fa0a 	bl	800b7ac <SDMMC_CmdBusWidth>
 8009398:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	e003      	b.n	80093ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	e001      	b.n	80093ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093b4:	b590      	push	{r4, r7, lr}
 80093b6:	b08f      	sub	sp, #60	; 0x3c
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093be:	f7fa fbf3 	bl	8003ba8 <HAL_GetTick>
 80093c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80093c8:	2300      	movs	r3, #0
 80093ca:	60bb      	str	r3, [r7, #8]
 80093cc:	2300      	movs	r3, #0
 80093ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2108      	movs	r1, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 f91f 	bl	800b61e <SDMMC_CmdBlockLength>
 80093e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	e0a9      	b.n	8009540 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f4:	041b      	lsls	r3, r3, #16
 80093f6:	4619      	mov	r1, r3
 80093f8:	4610      	mov	r0, r2
 80093fa:	f002 f992 	bl	800b722 <SDMMC_CmdAppCommand>
 80093fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	2b00      	cmp	r3, #0
 8009404:	d001      	beq.n	800940a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	e09a      	b.n	8009540 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800940a:	f04f 33ff 	mov.w	r3, #4294967295
 800940e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009410:	2308      	movs	r3, #8
 8009412:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009414:	2330      	movs	r3, #48	; 0x30
 8009416:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009418:	2302      	movs	r3, #2
 800941a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800941c:	2300      	movs	r3, #0
 800941e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009420:	2301      	movs	r3, #1
 8009422:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f107 0210 	add.w	r2, r7, #16
 800942c:	4611      	mov	r1, r2
 800942e:	4618      	mov	r0, r3
 8009430:	f002 f8c9 	bl	800b5c6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f002 f9d9 	bl	800b7f0 <SDMMC_CmdSendSCR>
 800943e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d022      	beq.n	800948c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009448:	e07a      	b.n	8009540 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00e      	beq.n	8009476 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6819      	ldr	r1, [r3, #0]
 800945c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	f107 0208 	add.w	r2, r7, #8
 8009464:	18d4      	adds	r4, r2, r3
 8009466:	4608      	mov	r0, r1
 8009468:	f002 f839 	bl	800b4de <SDIO_ReadFIFO>
 800946c:	4603      	mov	r3, r0
 800946e:	6023      	str	r3, [r4, #0]
      index++;
 8009470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009472:	3301      	adds	r3, #1
 8009474:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009476:	f7fa fb97 	bl	8003ba8 <HAL_GetTick>
 800947a:	4602      	mov	r2, r0
 800947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947e:	1ad3      	subs	r3, r2, r3
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009484:	d102      	bne.n	800948c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009486:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800948a:	e059      	b.n	8009540 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009492:	f240 432a 	movw	r3, #1066	; 0x42a
 8009496:	4013      	ands	r3, r2
 8009498:	2b00      	cmp	r3, #0
 800949a:	d0d6      	beq.n	800944a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f003 0308 	and.w	r3, r3, #8
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d005      	beq.n	80094b6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2208      	movs	r2, #8
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094b2:	2308      	movs	r3, #8
 80094b4:	e044      	b.n	8009540 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2202      	movs	r2, #2
 80094ca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094cc:	2302      	movs	r3, #2
 80094ce:	e037      	b.n	8009540 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d6:	f003 0320 	and.w	r3, r3, #32
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2220      	movs	r2, #32
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80094e6:	2320      	movs	r3, #32
 80094e8:	e02a      	b.n	8009540 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f240 523a 	movw	r2, #1338	; 0x53a
 80094f2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	061a      	lsls	r2, r3, #24
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	021b      	lsls	r3, r3, #8
 80094fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009500:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	0a1b      	lsrs	r3, r3, #8
 8009506:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800950a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	0e1b      	lsrs	r3, r3, #24
 8009510:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	601a      	str	r2, [r3, #0]
    scr++;
 8009516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009518:	3304      	adds	r3, #4
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	061a      	lsls	r2, r3, #24
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009528:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	0a1b      	lsrs	r3, r3, #8
 800952e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009532:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	0e1b      	lsrs	r3, r3, #24
 8009538:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800953a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	373c      	adds	r7, #60	; 0x3c
 8009544:	46bd      	mov	sp, r7
 8009546:	bd90      	pop	{r4, r7, pc}

08009548 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e034      	b.n	80095c8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f7f8 fee0 	bl	8002338 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	3308      	adds	r3, #8
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f001 fe7c 	bl	800b280 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	461a      	mov	r2, r3
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	f001 fee4 	bl	800b360 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6858      	ldr	r0, [r3, #4]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	f001 ff2f 	bl	800b408 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	6892      	ldr	r2, [r2, #8]
 80095b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	6892      	ldr	r2, [r2, #8]
 80095be:	f041 0101 	orr.w	r1, r1, #1
 80095c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d101      	bne.n	80095e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	e01d      	b.n	800961e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d106      	bne.n	80095fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7f8 fce4 	bl	8001fc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2202      	movs	r2, #2
 8009600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	3304      	adds	r3, #4
 800960c:	4619      	mov	r1, r3
 800960e:	4610      	mov	r0, r2
 8009610:	f000 fb4e 	bl	8009cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009626:	b480      	push	{r7}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f042 0201 	orr.w	r2, r2, #1
 800963c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2b06      	cmp	r3, #6
 800964e:	d007      	beq.n	8009660 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b082      	sub	sp, #8
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e01d      	b.n	80096bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	d106      	bne.n	800969a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 f815 	bl	80096c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2202      	movs	r2, #2
 800969e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	3304      	adds	r3, #4
 80096aa:	4619      	mov	r1, r3
 80096ac:	4610      	mov	r0, r2
 80096ae:	f000 faff 	bl	8009cb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2201      	movs	r2, #1
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	4618      	mov	r0, r3
 80096ec:	f000 fdca 	bl	800a284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a15      	ldr	r2, [pc, #84]	; (800974c <HAL_TIM_PWM_Start+0x74>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d004      	beq.n	8009704 <HAL_TIM_PWM_Start+0x2c>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a14      	ldr	r2, [pc, #80]	; (8009750 <HAL_TIM_PWM_Start+0x78>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d101      	bne.n	8009708 <HAL_TIM_PWM_Start+0x30>
 8009704:	2301      	movs	r3, #1
 8009706:	e000      	b.n	800970a <HAL_TIM_PWM_Start+0x32>
 8009708:	2300      	movs	r3, #0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d007      	beq.n	800971e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800971c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b06      	cmp	r3, #6
 800972e:	d007      	beq.n	8009740 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0201 	orr.w	r2, r2, #1
 800973e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	40010000 	.word	0x40010000
 8009750:	40010400 	.word	0x40010400

08009754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b02      	cmp	r3, #2
 8009768:	d122      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0302 	and.w	r3, r3, #2
 8009774:	2b02      	cmp	r3, #2
 8009776:	d11b      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0202 	mvn.w	r2, #2
 8009780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa6b 	bl	8009c72 <HAL_TIM_IC_CaptureCallback>
 800979c:	e005      	b.n	80097aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fa5d 	bl	8009c5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fa6e 	bl	8009c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0304 	and.w	r3, r3, #4
 80097ba:	2b04      	cmp	r3, #4
 80097bc:	d122      	bne.n	8009804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b04      	cmp	r3, #4
 80097ca:	d11b      	bne.n	8009804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0204 	mvn.w	r2, #4
 80097d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2202      	movs	r2, #2
 80097da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fa41 	bl	8009c72 <HAL_TIM_IC_CaptureCallback>
 80097f0:	e005      	b.n	80097fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fa33 	bl	8009c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fa44 	bl	8009c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f003 0308 	and.w	r3, r3, #8
 800980e:	2b08      	cmp	r3, #8
 8009810:	d122      	bne.n	8009858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f003 0308 	and.w	r3, r3, #8
 800981c:	2b08      	cmp	r3, #8
 800981e:	d11b      	bne.n	8009858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f06f 0208 	mvn.w	r2, #8
 8009828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2204      	movs	r2, #4
 800982e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	f003 0303 	and.w	r3, r3, #3
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 fa17 	bl	8009c72 <HAL_TIM_IC_CaptureCallback>
 8009844:	e005      	b.n	8009852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa09 	bl	8009c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fa1a 	bl	8009c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	f003 0310 	and.w	r3, r3, #16
 8009862:	2b10      	cmp	r3, #16
 8009864:	d122      	bne.n	80098ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f003 0310 	and.w	r3, r3, #16
 8009870:	2b10      	cmp	r3, #16
 8009872:	d11b      	bne.n	80098ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f06f 0210 	mvn.w	r2, #16
 800987c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2208      	movs	r2, #8
 8009882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 f9ed 	bl	8009c72 <HAL_TIM_IC_CaptureCallback>
 8009898:	e005      	b.n	80098a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f9df 	bl	8009c5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f9f0 	bl	8009c86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d10e      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f003 0301 	and.w	r3, r3, #1
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d107      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f06f 0201 	mvn.w	r2, #1
 80098d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7f7 fede 	bl	8001694 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e2:	2b80      	cmp	r3, #128	; 0x80
 80098e4:	d10e      	bne.n	8009904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f0:	2b80      	cmp	r3, #128	; 0x80
 80098f2:	d107      	bne.n	8009904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fd6c 	bl	800a3dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	d10e      	bne.n	8009930 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991c:	2b40      	cmp	r3, #64	; 0x40
 800991e:	d107      	bne.n	8009930 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f9b5 	bl	8009c9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b20      	cmp	r3, #32
 800993c:	d10e      	bne.n	800995c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f003 0320 	and.w	r3, r3, #32
 8009948:	2b20      	cmp	r3, #32
 800994a:	d107      	bne.n	800995c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f06f 0220 	mvn.w	r2, #32
 8009954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fd36 	bl	800a3c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009976:	2b01      	cmp	r3, #1
 8009978:	d101      	bne.n	800997e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800997a:	2302      	movs	r3, #2
 800997c:	e0b4      	b.n	8009ae8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2202      	movs	r2, #2
 800998a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b0c      	cmp	r3, #12
 8009992:	f200 809f 	bhi.w	8009ad4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009996:	a201      	add	r2, pc, #4	; (adr r2, 800999c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	080099d1 	.word	0x080099d1
 80099a0:	08009ad5 	.word	0x08009ad5
 80099a4:	08009ad5 	.word	0x08009ad5
 80099a8:	08009ad5 	.word	0x08009ad5
 80099ac:	08009a11 	.word	0x08009a11
 80099b0:	08009ad5 	.word	0x08009ad5
 80099b4:	08009ad5 	.word	0x08009ad5
 80099b8:	08009ad5 	.word	0x08009ad5
 80099bc:	08009a53 	.word	0x08009a53
 80099c0:	08009ad5 	.word	0x08009ad5
 80099c4:	08009ad5 	.word	0x08009ad5
 80099c8:	08009ad5 	.word	0x08009ad5
 80099cc:	08009a93 	.word	0x08009a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68b9      	ldr	r1, [r7, #8]
 80099d6:	4618      	mov	r0, r3
 80099d8:	f000 fa0a 	bl	8009df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699a      	ldr	r2, [r3, #24]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 0208 	orr.w	r2, r2, #8
 80099ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	699a      	ldr	r2, [r3, #24]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 0204 	bic.w	r2, r2, #4
 80099fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6999      	ldr	r1, [r3, #24]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	430a      	orrs	r2, r1
 8009a0c:	619a      	str	r2, [r3, #24]
      break;
 8009a0e:	e062      	b.n	8009ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68b9      	ldr	r1, [r7, #8]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 fa5a 	bl	8009ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	699a      	ldr	r2, [r3, #24]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699a      	ldr	r2, [r3, #24]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6999      	ldr	r1, [r3, #24]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	021a      	lsls	r2, r3, #8
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	430a      	orrs	r2, r1
 8009a4e:	619a      	str	r2, [r3, #24]
      break;
 8009a50:	e041      	b.n	8009ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68b9      	ldr	r1, [r7, #8]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f000 faaf 	bl	8009fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	69da      	ldr	r2, [r3, #28]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0208 	orr.w	r2, r2, #8
 8009a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	69da      	ldr	r2, [r3, #28]
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f022 0204 	bic.w	r2, r2, #4
 8009a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	69d9      	ldr	r1, [r3, #28]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	691a      	ldr	r2, [r3, #16]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	430a      	orrs	r2, r1
 8009a8e:	61da      	str	r2, [r3, #28]
      break;
 8009a90:	e021      	b.n	8009ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68b9      	ldr	r1, [r7, #8]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f000 fb03 	bl	800a0a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69da      	ldr	r2, [r3, #28]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	69da      	ldr	r2, [r3, #28]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	69d9      	ldr	r1, [r3, #28]
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	021a      	lsls	r2, r3, #8
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	61da      	str	r2, [r3, #28]
      break;
 8009ad2:	e000      	b.n	8009ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009ad4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d101      	bne.n	8009b08 <HAL_TIM_ConfigClockSource+0x18>
 8009b04:	2302      	movs	r3, #2
 8009b06:	e0a6      	b.n	8009c56 <HAL_TIM_ConfigClockSource+0x166>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
 8009b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009b26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b2e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b40      	cmp	r3, #64	; 0x40
 8009b3e:	d067      	beq.n	8009c10 <HAL_TIM_ConfigClockSource+0x120>
 8009b40:	2b40      	cmp	r3, #64	; 0x40
 8009b42:	d80b      	bhi.n	8009b5c <HAL_TIM_ConfigClockSource+0x6c>
 8009b44:	2b10      	cmp	r3, #16
 8009b46:	d073      	beq.n	8009c30 <HAL_TIM_ConfigClockSource+0x140>
 8009b48:	2b10      	cmp	r3, #16
 8009b4a:	d802      	bhi.n	8009b52 <HAL_TIM_ConfigClockSource+0x62>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d06f      	beq.n	8009c30 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009b50:	e078      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009b52:	2b20      	cmp	r3, #32
 8009b54:	d06c      	beq.n	8009c30 <HAL_TIM_ConfigClockSource+0x140>
 8009b56:	2b30      	cmp	r3, #48	; 0x30
 8009b58:	d06a      	beq.n	8009c30 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009b5a:	e073      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009b5c:	2b70      	cmp	r3, #112	; 0x70
 8009b5e:	d00d      	beq.n	8009b7c <HAL_TIM_ConfigClockSource+0x8c>
 8009b60:	2b70      	cmp	r3, #112	; 0x70
 8009b62:	d804      	bhi.n	8009b6e <HAL_TIM_ConfigClockSource+0x7e>
 8009b64:	2b50      	cmp	r3, #80	; 0x50
 8009b66:	d033      	beq.n	8009bd0 <HAL_TIM_ConfigClockSource+0xe0>
 8009b68:	2b60      	cmp	r3, #96	; 0x60
 8009b6a:	d041      	beq.n	8009bf0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009b6c:	e06a      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b72:	d066      	beq.n	8009c42 <HAL_TIM_ConfigClockSource+0x152>
 8009b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b78:	d017      	beq.n	8009baa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009b7a:	e063      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	6899      	ldr	r1, [r3, #8]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	f000 fb5a 	bl	800a244 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b9e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	609a      	str	r2, [r3, #8]
      break;
 8009ba8:	e04c      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6818      	ldr	r0, [r3, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	6899      	ldr	r1, [r3, #8]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	f000 fb43 	bl	800a244 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689a      	ldr	r2, [r3, #8]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bcc:	609a      	str	r2, [r3, #8]
      break;
 8009bce:	e039      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	6859      	ldr	r1, [r3, #4]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f000 fab7 	bl	800a150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2150      	movs	r1, #80	; 0x50
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fb10 	bl	800a20e <TIM_ITRx_SetConfig>
      break;
 8009bee:	e029      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	6859      	ldr	r1, [r3, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	f000 fad6 	bl	800a1ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2160      	movs	r1, #96	; 0x60
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fb00 	bl	800a20e <TIM_ITRx_SetConfig>
      break;
 8009c0e:	e019      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	6859      	ldr	r1, [r3, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f000 fa97 	bl	800a150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2140      	movs	r1, #64	; 0x40
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f000 faf0 	bl	800a20e <TIM_ITRx_SetConfig>
      break;
 8009c2e:	e009      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f000 fae7 	bl	800a20e <TIM_ITRx_SetConfig>
      break;
 8009c40:	e000      	b.n	8009c44 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009c42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3710      	adds	r7, #16
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c66:	bf00      	nop
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b083      	sub	sp, #12
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c7a:	bf00      	nop
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c86:	b480      	push	{r7}
 8009c88:	b083      	sub	sp, #12
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c8e:	bf00      	nop
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ca2:	bf00      	nop
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr
	...

08009cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a40      	ldr	r2, [pc, #256]	; (8009dc4 <TIM_Base_SetConfig+0x114>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d013      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cce:	d00f      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a3d      	ldr	r2, [pc, #244]	; (8009dc8 <TIM_Base_SetConfig+0x118>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00b      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a3c      	ldr	r2, [pc, #240]	; (8009dcc <TIM_Base_SetConfig+0x11c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d007      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a3b      	ldr	r2, [pc, #236]	; (8009dd0 <TIM_Base_SetConfig+0x120>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d003      	beq.n	8009cf0 <TIM_Base_SetConfig+0x40>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a3a      	ldr	r2, [pc, #232]	; (8009dd4 <TIM_Base_SetConfig+0x124>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d108      	bne.n	8009d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a2f      	ldr	r2, [pc, #188]	; (8009dc4 <TIM_Base_SetConfig+0x114>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d02b      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d10:	d027      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a2c      	ldr	r2, [pc, #176]	; (8009dc8 <TIM_Base_SetConfig+0x118>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d023      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a2b      	ldr	r2, [pc, #172]	; (8009dcc <TIM_Base_SetConfig+0x11c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d01f      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a2a      	ldr	r2, [pc, #168]	; (8009dd0 <TIM_Base_SetConfig+0x120>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d01b      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a29      	ldr	r2, [pc, #164]	; (8009dd4 <TIM_Base_SetConfig+0x124>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d017      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	4a28      	ldr	r2, [pc, #160]	; (8009dd8 <TIM_Base_SetConfig+0x128>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d013      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	4a27      	ldr	r2, [pc, #156]	; (8009ddc <TIM_Base_SetConfig+0x12c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d00f      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4a26      	ldr	r2, [pc, #152]	; (8009de0 <TIM_Base_SetConfig+0x130>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d00b      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4a25      	ldr	r2, [pc, #148]	; (8009de4 <TIM_Base_SetConfig+0x134>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d007      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4a24      	ldr	r2, [pc, #144]	; (8009de8 <TIM_Base_SetConfig+0x138>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d003      	beq.n	8009d62 <TIM_Base_SetConfig+0xb2>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4a23      	ldr	r2, [pc, #140]	; (8009dec <TIM_Base_SetConfig+0x13c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d108      	bne.n	8009d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	689a      	ldr	r2, [r3, #8]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	4a0a      	ldr	r2, [pc, #40]	; (8009dc4 <TIM_Base_SetConfig+0x114>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d003      	beq.n	8009da8 <TIM_Base_SetConfig+0xf8>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	4a0c      	ldr	r2, [pc, #48]	; (8009dd4 <TIM_Base_SetConfig+0x124>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d103      	bne.n	8009db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	691a      	ldr	r2, [r3, #16]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	615a      	str	r2, [r3, #20]
}
 8009db6:	bf00      	nop
 8009db8:	3714      	adds	r7, #20
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
 8009dc2:	bf00      	nop
 8009dc4:	40010000 	.word	0x40010000
 8009dc8:	40000400 	.word	0x40000400
 8009dcc:	40000800 	.word	0x40000800
 8009dd0:	40000c00 	.word	0x40000c00
 8009dd4:	40010400 	.word	0x40010400
 8009dd8:	40014000 	.word	0x40014000
 8009ddc:	40014400 	.word	0x40014400
 8009de0:	40014800 	.word	0x40014800
 8009de4:	40001800 	.word	0x40001800
 8009de8:	40001c00 	.word	0x40001c00
 8009dec:	40002000 	.word	0x40002000

08009df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b087      	sub	sp, #28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	f023 0201 	bic.w	r2, r3, #1
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f023 0302 	bic.w	r3, r3, #2
 8009e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	697a      	ldr	r2, [r7, #20]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	4a20      	ldr	r2, [pc, #128]	; (8009ec8 <TIM_OC1_SetConfig+0xd8>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d003      	beq.n	8009e54 <TIM_OC1_SetConfig+0x64>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <TIM_OC1_SetConfig+0xdc>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d10c      	bne.n	8009e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f023 0308 	bic.w	r3, r3, #8
 8009e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	f023 0304 	bic.w	r3, r3, #4
 8009e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a15      	ldr	r2, [pc, #84]	; (8009ec8 <TIM_OC1_SetConfig+0xd8>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d003      	beq.n	8009e7e <TIM_OC1_SetConfig+0x8e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a14      	ldr	r2, [pc, #80]	; (8009ecc <TIM_OC1_SetConfig+0xdc>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d111      	bne.n	8009ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	693a      	ldr	r2, [r7, #16]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	621a      	str	r2, [r3, #32]
}
 8009ebc:	bf00      	nop
 8009ebe:	371c      	adds	r7, #28
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec6:	4770      	bx	lr
 8009ec8:	40010000 	.word	0x40010000
 8009ecc:	40010400 	.word	0x40010400

08009ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b087      	sub	sp, #28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	f023 0210 	bic.w	r2, r3, #16
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	699b      	ldr	r3, [r3, #24]
 8009ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f023 0320 	bic.w	r3, r3, #32
 8009f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	011b      	lsls	r3, r3, #4
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	4a22      	ldr	r2, [pc, #136]	; (8009fb4 <TIM_OC2_SetConfig+0xe4>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d003      	beq.n	8009f38 <TIM_OC2_SetConfig+0x68>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a21      	ldr	r2, [pc, #132]	; (8009fb8 <TIM_OC2_SetConfig+0xe8>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d10d      	bne.n	8009f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	011b      	lsls	r3, r3, #4
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a17      	ldr	r2, [pc, #92]	; (8009fb4 <TIM_OC2_SetConfig+0xe4>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d003      	beq.n	8009f64 <TIM_OC2_SetConfig+0x94>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	4a16      	ldr	r2, [pc, #88]	; (8009fb8 <TIM_OC2_SetConfig+0xe8>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d113      	bne.n	8009f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	695b      	ldr	r3, [r3, #20]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	693a      	ldr	r2, [r7, #16]
 8009f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	697a      	ldr	r2, [r7, #20]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	40010000 	.word	0x40010000
 8009fb8:	40010400 	.word	0x40010400

08009fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b087      	sub	sp, #28
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6a1b      	ldr	r3, [r3, #32]
 8009fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f023 0303 	bic.w	r3, r3, #3
 8009ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	689b      	ldr	r3, [r3, #8]
 800a00a:	021b      	lsls	r3, r3, #8
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	4313      	orrs	r3, r2
 800a010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a21      	ldr	r2, [pc, #132]	; (800a09c <TIM_OC3_SetConfig+0xe0>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d003      	beq.n	800a022 <TIM_OC3_SetConfig+0x66>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	4a20      	ldr	r2, [pc, #128]	; (800a0a0 <TIM_OC3_SetConfig+0xe4>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d10d      	bne.n	800a03e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	021b      	lsls	r3, r3, #8
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	4313      	orrs	r3, r2
 800a034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a03c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a16      	ldr	r2, [pc, #88]	; (800a09c <TIM_OC3_SetConfig+0xe0>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d003      	beq.n	800a04e <TIM_OC3_SetConfig+0x92>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a15      	ldr	r2, [pc, #84]	; (800a0a0 <TIM_OC3_SetConfig+0xe4>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d113      	bne.n	800a076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a05c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	011b      	lsls	r3, r3, #4
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	4313      	orrs	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	4313      	orrs	r3, r2
 800a074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	685a      	ldr	r2, [r3, #4]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	621a      	str	r2, [r3, #32]
}
 800a090:	bf00      	nop
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	40010000 	.word	0x40010000
 800a0a0:	40010400 	.word	0x40010400

0800a0a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	021b      	lsls	r3, r3, #8
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	031b      	lsls	r3, r3, #12
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a12      	ldr	r2, [pc, #72]	; (800a148 <TIM_OC4_SetConfig+0xa4>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d003      	beq.n	800a10c <TIM_OC4_SetConfig+0x68>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a11      	ldr	r2, [pc, #68]	; (800a14c <TIM_OC4_SetConfig+0xa8>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d109      	bne.n	800a120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	019b      	lsls	r3, r3, #6
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	621a      	str	r2, [r3, #32]
}
 800a13a:	bf00      	nop
 800a13c:	371c      	adds	r7, #28
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr
 800a146:	bf00      	nop
 800a148:	40010000 	.word	0x40010000
 800a14c:	40010400 	.word	0x40010400

0800a150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a150:	b480      	push	{r7}
 800a152:	b087      	sub	sp, #28
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	f023 0201 	bic.w	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a17a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	011b      	lsls	r3, r3, #4
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	4313      	orrs	r3, r2
 800a184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f023 030a 	bic.w	r3, r3, #10
 800a18c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	4313      	orrs	r3, r2
 800a194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	697a      	ldr	r2, [r7, #20]
 800a1a0:	621a      	str	r2, [r3, #32]
}
 800a1a2:	bf00      	nop
 800a1a4:	371c      	adds	r7, #28
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b087      	sub	sp, #28
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	60f8      	str	r0, [r7, #12]
 800a1b6:	60b9      	str	r1, [r7, #8]
 800a1b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	f023 0210 	bic.w	r2, r3, #16
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	6a1b      	ldr	r3, [r3, #32]
 800a1d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	031b      	lsls	r3, r3, #12
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	011b      	lsls	r3, r3, #4
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	697a      	ldr	r2, [r7, #20]
 800a1fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	621a      	str	r2, [r3, #32]
}
 800a202:	bf00      	nop
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	f043 0307 	orr.w	r3, r3, #7
 800a230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	609a      	str	r2, [r3, #8]
}
 800a238:	bf00      	nop
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a244:	b480      	push	{r7}
 800a246:	b087      	sub	sp, #28
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a25e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	021a      	lsls	r2, r3, #8
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	431a      	orrs	r2, r3
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	4313      	orrs	r3, r2
 800a270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	609a      	str	r2, [r3, #8]
}
 800a278:	bf00      	nop
 800a27a:	371c      	adds	r7, #28
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a284:	b480      	push	{r7}
 800a286:	b087      	sub	sp, #28
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	f003 031f 	and.w	r3, r3, #31
 800a296:	2201      	movs	r2, #1
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6a1a      	ldr	r2, [r3, #32]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	43db      	mvns	r3, r3
 800a2a6:	401a      	ands	r2, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6a1a      	ldr	r2, [r3, #32]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	f003 031f 	and.w	r3, r3, #31
 800a2b6:	6879      	ldr	r1, [r7, #4]
 800a2b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2bc:	431a      	orrs	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	621a      	str	r2, [r3, #32]
}
 800a2c2:	bf00      	nop
 800a2c4:	371c      	adds	r7, #28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
	...

0800a2d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d101      	bne.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	e05a      	b.n	800a39e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2202      	movs	r2, #2
 800a2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a30e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68fa      	ldr	r2, [r7, #12]
 800a316:	4313      	orrs	r3, r2
 800a318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a21      	ldr	r2, [pc, #132]	; (800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d022      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a334:	d01d      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a1d      	ldr	r2, [pc, #116]	; (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d018      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a1b      	ldr	r2, [pc, #108]	; (800a3b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d013      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a1a      	ldr	r2, [pc, #104]	; (800a3b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d00e      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a18      	ldr	r2, [pc, #96]	; (800a3bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d009      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a17      	ldr	r2, [pc, #92]	; (800a3c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d004      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a15      	ldr	r2, [pc, #84]	; (800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d10c      	bne.n	800a38c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	4313      	orrs	r3, r2
 800a382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	40010000 	.word	0x40010000
 800a3b0:	40000400 	.word	0x40000400
 800a3b4:	40000800 	.word	0x40000800
 800a3b8:	40000c00 	.word	0x40000c00
 800a3bc:	40010400 	.word	0x40010400
 800a3c0:	40014000 	.word	0x40014000
 800a3c4:	40001800 	.word	0x40001800

0800a3c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e03f      	b.n	800a482 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d106      	bne.n	800a41c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7f7 fe30 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2224      	movs	r2, #36	; 0x24
 800a420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 fb8b 	bl	800ab50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	691a      	ldr	r2, [r3, #16]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	695a      	ldr	r2, [r3, #20]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68da      	ldr	r2, [r3, #12]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2200      	movs	r2, #0
 800a46e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2220      	movs	r2, #32
 800a474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2220      	movs	r2, #32
 800a47c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b20      	cmp	r3, #32
 800a4a4:	d166      	bne.n	800a574 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <HAL_UART_Receive_DMA+0x26>
 800a4ac:	88fb      	ldrh	r3, [r7, #6]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d101      	bne.n	800a4b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	e05f      	b.n	800a576 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <HAL_UART_Receive_DMA+0x38>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e058      	b.n	800a576 <HAL_UART_Receive_DMA+0xea>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	88fa      	ldrh	r2, [r7, #6]
 800a4d6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2222      	movs	r2, #34	; 0x22
 800a4e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ea:	4a25      	ldr	r2, [pc, #148]	; (800a580 <HAL_UART_Receive_DMA+0xf4>)
 800a4ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f2:	4a24      	ldr	r2, [pc, #144]	; (800a584 <HAL_UART_Receive_DMA+0xf8>)
 800a4f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fa:	4a23      	ldr	r2, [pc, #140]	; (800a588 <HAL_UART_Receive_DMA+0xfc>)
 800a4fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a502:	2200      	movs	r2, #0
 800a504:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a506:	f107 0308 	add.w	r3, r7, #8
 800a50a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	3304      	adds	r3, #4
 800a516:	4619      	mov	r1, r3
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	88fb      	ldrh	r3, [r7, #6]
 800a51e:	f7fa f995 	bl	800484c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a522:	2300      	movs	r3, #0
 800a524:	613b      	str	r3, [r7, #16]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	613b      	str	r3, [r7, #16]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	613b      	str	r3, [r7, #16]
 800a536:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	68da      	ldr	r2, [r3, #12]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a54e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	695a      	ldr	r2, [r3, #20]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f042 0201 	orr.w	r2, r2, #1
 800a55e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	695a      	ldr	r2, [r3, #20]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a56e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	e000      	b.n	800a576 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a574:	2302      	movs	r3, #2
  }
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	0800a7c9 	.word	0x0800a7c9
 800a584:	0800a831 	.word	0x0800a831
 800a588:	0800a84d 	.word	0x0800a84d

0800a58c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b088      	sub	sp, #32
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f003 030f 	and.w	r3, r3, #15
 800a5ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10d      	bne.n	800a5de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	f003 0320 	and.w	r3, r3, #32
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d008      	beq.n	800a5de <HAL_UART_IRQHandler+0x52>
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	f003 0320 	and.w	r3, r3, #32
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fa38 	bl	800aa4c <UART_Receive_IT>
      return;
 800a5dc:	e0d1      	b.n	800a782 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 80b0 	beq.w	800a746 <HAL_UART_IRQHandler+0x1ba>
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d105      	bne.n	800a5fc <HAL_UART_IRQHandler+0x70>
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 80a5 	beq.w	800a746 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <HAL_UART_IRQHandler+0x90>
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d005      	beq.n	800a61c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a614:	f043 0201 	orr.w	r2, r3, #1
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <HAL_UART_IRQHandler+0xb0>
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a634:	f043 0202 	orr.w	r2, r3, #2
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	f003 0302 	and.w	r3, r3, #2
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00a      	beq.n	800a65c <HAL_UART_IRQHandler+0xd0>
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d005      	beq.n	800a65c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a654:	f043 0204 	orr.w	r2, r3, #4
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00f      	beq.n	800a686 <HAL_UART_IRQHandler+0xfa>
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	f003 0320 	and.w	r3, r3, #32
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d104      	bne.n	800a67a <HAL_UART_IRQHandler+0xee>
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a67e:	f043 0208 	orr.w	r2, r3, #8
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d078      	beq.n	800a780 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	f003 0320 	and.w	r3, r3, #32
 800a694:	2b00      	cmp	r3, #0
 800a696:	d007      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x11c>
 800a698:	69bb      	ldr	r3, [r7, #24]
 800a69a:	f003 0320 	and.w	r3, r3, #32
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f9d2 	bl	800aa4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695b      	ldr	r3, [r3, #20]
 800a6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6b2:	2b40      	cmp	r3, #64	; 0x40
 800a6b4:	bf0c      	ite	eq
 800a6b6:	2301      	moveq	r3, #1
 800a6b8:	2300      	movne	r3, #0
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6c2:	f003 0308 	and.w	r3, r3, #8
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d102      	bne.n	800a6d0 <HAL_UART_IRQHandler+0x144>
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d031      	beq.n	800a734 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f91b 	bl	800a90c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e0:	2b40      	cmp	r3, #64	; 0x40
 800a6e2:	d123      	bne.n	800a72c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	695a      	ldr	r2, [r3, #20]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d013      	beq.n	800a724 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a700:	4a21      	ldr	r2, [pc, #132]	; (800a788 <HAL_UART_IRQHandler+0x1fc>)
 800a702:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fa f8f7 	bl	80048fc <HAL_DMA_Abort_IT>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d016      	beq.n	800a742 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a71e:	4610      	mov	r0, r2
 800a720:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a722:	e00e      	b.n	800a742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 f845 	bl	800a7b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a72a:	e00a      	b.n	800a742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f000 f841 	bl	800a7b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a732:	e006      	b.n	800a742 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f83d 	bl	800a7b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2200      	movs	r2, #0
 800a73e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a740:	e01e      	b.n	800a780 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a742:	bf00      	nop
    return;
 800a744:	e01c      	b.n	800a780 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d008      	beq.n	800a762 <HAL_UART_IRQHandler+0x1d6>
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f908 	bl	800a970 <UART_Transmit_IT>
    return;
 800a760:	e00f      	b.n	800a782 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00a      	beq.n	800a782 <HAL_UART_IRQHandler+0x1f6>
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f950 	bl	800aa1c <UART_EndTransmit_IT>
    return;
 800a77c:	bf00      	nop
 800a77e:	e000      	b.n	800a782 <HAL_UART_IRQHandler+0x1f6>
    return;
 800a780:	bf00      	nop
  }
}
 800a782:	3720      	adds	r7, #32
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	0800a949 	.word	0x0800a949

0800a78c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d11e      	bne.n	800a822 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68da      	ldr	r2, [r3, #12]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a7f8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	695a      	ldr	r2, [r3, #20]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 0201 	bic.w	r2, r2, #1
 800a808:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	695a      	ldr	r2, [r3, #20]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a818:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2220      	movs	r2, #32
 800a81e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f7f6 fd9a 	bl	800135c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a828:	bf00      	nop
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f7ff ffae 	bl	800a7a0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a844:	bf00      	nop
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a854:	2300      	movs	r3, #0
 800a856:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	695b      	ldr	r3, [r3, #20]
 800a864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a868:	2b80      	cmp	r3, #128	; 0x80
 800a86a:	bf0c      	ite	eq
 800a86c:	2301      	moveq	r3, #1
 800a86e:	2300      	movne	r3, #0
 800a870:	b2db      	uxtb	r3, r3
 800a872:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a874:	68bb      	ldr	r3, [r7, #8]
 800a876:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b21      	cmp	r3, #33	; 0x21
 800a87e:	d108      	bne.n	800a892 <UART_DMAError+0x46>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2200      	movs	r2, #0
 800a88a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a88c:	68b8      	ldr	r0, [r7, #8]
 800a88e:	f000 f827 	bl	800a8e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b40      	cmp	r3, #64	; 0x40
 800a89e:	bf0c      	ite	eq
 800a8a0:	2301      	moveq	r3, #1
 800a8a2:	2300      	movne	r3, #0
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b22      	cmp	r3, #34	; 0x22
 800a8b2:	d108      	bne.n	800a8c6 <UART_DMAError+0x7a>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d005      	beq.n	800a8c6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a8c0:	68b8      	ldr	r0, [r7, #8]
 800a8c2:	f000 f823 	bl	800a90c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ca:	f043 0210 	orr.w	r2, r3, #16
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8d2:	68b8      	ldr	r0, [r7, #8]
 800a8d4:	f7ff ff6e 	bl	800a7b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8d8:	bf00      	nop
 800a8da:	3710      	adds	r7, #16
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68da      	ldr	r2, [r3, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a8f6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2220      	movs	r2, #32
 800a8fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	68da      	ldr	r2, [r3, #12]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a922:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	695a      	ldr	r2, [r3, #20]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 0201 	bic.w	r2, r2, #1
 800a932:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2220      	movs	r2, #32
 800a938:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a954:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2200      	movs	r2, #0
 800a960:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a962:	68f8      	ldr	r0, [r7, #12]
 800a964:	f7ff ff26 	bl	800a7b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a968:	bf00      	nop
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	2b21      	cmp	r3, #33	; 0x21
 800a982:	d144      	bne.n	800aa0e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a98c:	d11a      	bne.n	800a9c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	881b      	ldrh	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d105      	bne.n	800a9b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	1c9a      	adds	r2, r3, #2
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	621a      	str	r2, [r3, #32]
 800a9b6:	e00e      	b.n	800a9d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	621a      	str	r2, [r3, #32]
 800a9c2:	e008      	b.n	800a9d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a1b      	ldr	r3, [r3, #32]
 800a9c8:	1c59      	adds	r1, r3, #1
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	6211      	str	r1, [r2, #32]
 800a9ce:	781a      	ldrb	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	3b01      	subs	r3, #1
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d10f      	bne.n	800aa0a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68da      	ldr	r2, [r3, #12]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	e000      	b.n	800aa10 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800aa0e:	2302      	movs	r3, #2
  }
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68da      	ldr	r2, [r3, #12]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2220      	movs	r2, #32
 800aa38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff fea5 	bl	800a78c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	2b22      	cmp	r3, #34	; 0x22
 800aa5e:	d171      	bne.n	800ab44 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa68:	d123      	bne.n	800aab2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa6e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10e      	bne.n	800aa96 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8e:	1c9a      	adds	r2, r3, #2
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	629a      	str	r2, [r3, #40]	; 0x28
 800aa94:	e029      	b.n	800aaea <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	629a      	str	r2, [r3, #40]	; 0x28
 800aab0:	e01b      	b.n	800aaea <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d10a      	bne.n	800aad0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	6858      	ldr	r0, [r3, #4]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac4:	1c59      	adds	r1, r3, #1
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	6291      	str	r1, [r2, #40]	; 0x28
 800aaca:	b2c2      	uxtb	r2, r0
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	e00c      	b.n	800aaea <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	b2da      	uxtb	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aadc:	1c58      	adds	r0, r3, #1
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	6288      	str	r0, [r1, #40]	; 0x28
 800aae2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aae6:	b2d2      	uxtb	r2, r2
 800aae8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d120      	bne.n	800ab40 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68da      	ldr	r2, [r3, #12]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f022 0220 	bic.w	r2, r2, #32
 800ab0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68da      	ldr	r2, [r3, #12]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	695a      	ldr	r2, [r3, #20]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f022 0201 	bic.w	r2, r2, #1
 800ab2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2220      	movs	r2, #32
 800ab32:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f6 fc10 	bl	800135c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	e002      	b.n	800ab46 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	e000      	b.n	800ab46 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ab44:	2302      	movs	r3, #2
  }
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	b085      	sub	sp, #20
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68da      	ldr	r2, [r3, #12]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	430a      	orrs	r2, r1
 800ab6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	689a      	ldr	r2, [r3, #8]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	431a      	orrs	r2, r3
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	431a      	orrs	r2, r3
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	69db      	ldr	r3, [r3, #28]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68db      	ldr	r3, [r3, #12]
 800ab8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ab92:	f023 030c 	bic.w	r3, r3, #12
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	6812      	ldr	r2, [r2, #0]
 800ab9a:	68f9      	ldr	r1, [r7, #12]
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	699a      	ldr	r2, [r3, #24]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	430a      	orrs	r2, r1
 800abb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abbe:	f040 8199 	bne.w	800aef4 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4ac6      	ldr	r2, [pc, #792]	; (800aee0 <UART_SetConfig+0x390>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00f      	beq.n	800abec <UART_SetConfig+0x9c>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4ac4      	ldr	r2, [pc, #784]	; (800aee4 <UART_SetConfig+0x394>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d00a      	beq.n	800abec <UART_SetConfig+0x9c>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4ac3      	ldr	r2, [pc, #780]	; (800aee8 <UART_SetConfig+0x398>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d005      	beq.n	800abec <UART_SetConfig+0x9c>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4ac1      	ldr	r2, [pc, #772]	; (800aeec <UART_SetConfig+0x39c>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	f040 80bd 	bne.w	800ad66 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800abec:	f7fd f8dc 	bl	8007da8 <HAL_RCC_GetPCLK2Freq>
 800abf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	461d      	mov	r5, r3
 800abf6:	f04f 0600 	mov.w	r6, #0
 800abfa:	46a8      	mov	r8, r5
 800abfc:	46b1      	mov	r9, r6
 800abfe:	eb18 0308 	adds.w	r3, r8, r8
 800ac02:	eb49 0409 	adc.w	r4, r9, r9
 800ac06:	4698      	mov	r8, r3
 800ac08:	46a1      	mov	r9, r4
 800ac0a:	eb18 0805 	adds.w	r8, r8, r5
 800ac0e:	eb49 0906 	adc.w	r9, r9, r6
 800ac12:	f04f 0100 	mov.w	r1, #0
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ac1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ac22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ac26:	4688      	mov	r8, r1
 800ac28:	4691      	mov	r9, r2
 800ac2a:	eb18 0005 	adds.w	r0, r8, r5
 800ac2e:	eb49 0106 	adc.w	r1, r9, r6
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	461d      	mov	r5, r3
 800ac38:	f04f 0600 	mov.w	r6, #0
 800ac3c:	196b      	adds	r3, r5, r5
 800ac3e:	eb46 0406 	adc.w	r4, r6, r6
 800ac42:	461a      	mov	r2, r3
 800ac44:	4623      	mov	r3, r4
 800ac46:	f7f5 faeb 	bl	8000220 <__aeabi_uldivmod>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	461a      	mov	r2, r3
 800ac50:	4ba7      	ldr	r3, [pc, #668]	; (800aef0 <UART_SetConfig+0x3a0>)
 800ac52:	fba3 2302 	umull	r2, r3, r3, r2
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	461d      	mov	r5, r3
 800ac60:	f04f 0600 	mov.w	r6, #0
 800ac64:	46a9      	mov	r9, r5
 800ac66:	46b2      	mov	sl, r6
 800ac68:	eb19 0309 	adds.w	r3, r9, r9
 800ac6c:	eb4a 040a 	adc.w	r4, sl, sl
 800ac70:	4699      	mov	r9, r3
 800ac72:	46a2      	mov	sl, r4
 800ac74:	eb19 0905 	adds.w	r9, r9, r5
 800ac78:	eb4a 0a06 	adc.w	sl, sl, r6
 800ac7c:	f04f 0100 	mov.w	r1, #0
 800ac80:	f04f 0200 	mov.w	r2, #0
 800ac84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac88:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac8c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac90:	4689      	mov	r9, r1
 800ac92:	4692      	mov	sl, r2
 800ac94:	eb19 0005 	adds.w	r0, r9, r5
 800ac98:	eb4a 0106 	adc.w	r1, sl, r6
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	461d      	mov	r5, r3
 800aca2:	f04f 0600 	mov.w	r6, #0
 800aca6:	196b      	adds	r3, r5, r5
 800aca8:	eb46 0406 	adc.w	r4, r6, r6
 800acac:	461a      	mov	r2, r3
 800acae:	4623      	mov	r3, r4
 800acb0:	f7f5 fab6 	bl	8000220 <__aeabi_uldivmod>
 800acb4:	4603      	mov	r3, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	461a      	mov	r2, r3
 800acba:	4b8d      	ldr	r3, [pc, #564]	; (800aef0 <UART_SetConfig+0x3a0>)
 800acbc:	fba3 1302 	umull	r1, r3, r3, r2
 800acc0:	095b      	lsrs	r3, r3, #5
 800acc2:	2164      	movs	r1, #100	; 0x64
 800acc4:	fb01 f303 	mul.w	r3, r1, r3
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	3332      	adds	r3, #50	; 0x32
 800acce:	4a88      	ldr	r2, [pc, #544]	; (800aef0 <UART_SetConfig+0x3a0>)
 800acd0:	fba2 2303 	umull	r2, r3, r2, r3
 800acd4:	095b      	lsrs	r3, r3, #5
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800acdc:	4498      	add	r8, r3
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	461d      	mov	r5, r3
 800ace2:	f04f 0600 	mov.w	r6, #0
 800ace6:	46a9      	mov	r9, r5
 800ace8:	46b2      	mov	sl, r6
 800acea:	eb19 0309 	adds.w	r3, r9, r9
 800acee:	eb4a 040a 	adc.w	r4, sl, sl
 800acf2:	4699      	mov	r9, r3
 800acf4:	46a2      	mov	sl, r4
 800acf6:	eb19 0905 	adds.w	r9, r9, r5
 800acfa:	eb4a 0a06 	adc.w	sl, sl, r6
 800acfe:	f04f 0100 	mov.w	r1, #0
 800ad02:	f04f 0200 	mov.w	r2, #0
 800ad06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ad0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ad0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ad12:	4689      	mov	r9, r1
 800ad14:	4692      	mov	sl, r2
 800ad16:	eb19 0005 	adds.w	r0, r9, r5
 800ad1a:	eb4a 0106 	adc.w	r1, sl, r6
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	461d      	mov	r5, r3
 800ad24:	f04f 0600 	mov.w	r6, #0
 800ad28:	196b      	adds	r3, r5, r5
 800ad2a:	eb46 0406 	adc.w	r4, r6, r6
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4623      	mov	r3, r4
 800ad32:	f7f5 fa75 	bl	8000220 <__aeabi_uldivmod>
 800ad36:	4603      	mov	r3, r0
 800ad38:	460c      	mov	r4, r1
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4b6c      	ldr	r3, [pc, #432]	; (800aef0 <UART_SetConfig+0x3a0>)
 800ad3e:	fba3 1302 	umull	r1, r3, r3, r2
 800ad42:	095b      	lsrs	r3, r3, #5
 800ad44:	2164      	movs	r1, #100	; 0x64
 800ad46:	fb01 f303 	mul.w	r3, r1, r3
 800ad4a:	1ad3      	subs	r3, r2, r3
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	3332      	adds	r3, #50	; 0x32
 800ad50:	4a67      	ldr	r2, [pc, #412]	; (800aef0 <UART_SetConfig+0x3a0>)
 800ad52:	fba2 2303 	umull	r2, r3, r2, r3
 800ad56:	095b      	lsrs	r3, r3, #5
 800ad58:	f003 0207 	and.w	r2, r3, #7
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4442      	add	r2, r8
 800ad62:	609a      	str	r2, [r3, #8]
 800ad64:	e27d      	b.n	800b262 <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad66:	f7fd f80b 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 800ad6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	461d      	mov	r5, r3
 800ad70:	f04f 0600 	mov.w	r6, #0
 800ad74:	46a8      	mov	r8, r5
 800ad76:	46b1      	mov	r9, r6
 800ad78:	eb18 0308 	adds.w	r3, r8, r8
 800ad7c:	eb49 0409 	adc.w	r4, r9, r9
 800ad80:	4698      	mov	r8, r3
 800ad82:	46a1      	mov	r9, r4
 800ad84:	eb18 0805 	adds.w	r8, r8, r5
 800ad88:	eb49 0906 	adc.w	r9, r9, r6
 800ad8c:	f04f 0100 	mov.w	r1, #0
 800ad90:	f04f 0200 	mov.w	r2, #0
 800ad94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ad98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ad9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ada0:	4688      	mov	r8, r1
 800ada2:	4691      	mov	r9, r2
 800ada4:	eb18 0005 	adds.w	r0, r8, r5
 800ada8:	eb49 0106 	adc.w	r1, r9, r6
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	461d      	mov	r5, r3
 800adb2:	f04f 0600 	mov.w	r6, #0
 800adb6:	196b      	adds	r3, r5, r5
 800adb8:	eb46 0406 	adc.w	r4, r6, r6
 800adbc:	461a      	mov	r2, r3
 800adbe:	4623      	mov	r3, r4
 800adc0:	f7f5 fa2e 	bl	8000220 <__aeabi_uldivmod>
 800adc4:	4603      	mov	r3, r0
 800adc6:	460c      	mov	r4, r1
 800adc8:	461a      	mov	r2, r3
 800adca:	4b49      	ldr	r3, [pc, #292]	; (800aef0 <UART_SetConfig+0x3a0>)
 800adcc:	fba3 2302 	umull	r2, r3, r3, r2
 800add0:	095b      	lsrs	r3, r3, #5
 800add2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	461d      	mov	r5, r3
 800adda:	f04f 0600 	mov.w	r6, #0
 800adde:	46a9      	mov	r9, r5
 800ade0:	46b2      	mov	sl, r6
 800ade2:	eb19 0309 	adds.w	r3, r9, r9
 800ade6:	eb4a 040a 	adc.w	r4, sl, sl
 800adea:	4699      	mov	r9, r3
 800adec:	46a2      	mov	sl, r4
 800adee:	eb19 0905 	adds.w	r9, r9, r5
 800adf2:	eb4a 0a06 	adc.w	sl, sl, r6
 800adf6:	f04f 0100 	mov.w	r1, #0
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae0a:	4689      	mov	r9, r1
 800ae0c:	4692      	mov	sl, r2
 800ae0e:	eb19 0005 	adds.w	r0, r9, r5
 800ae12:	eb4a 0106 	adc.w	r1, sl, r6
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	461d      	mov	r5, r3
 800ae1c:	f04f 0600 	mov.w	r6, #0
 800ae20:	196b      	adds	r3, r5, r5
 800ae22:	eb46 0406 	adc.w	r4, r6, r6
 800ae26:	461a      	mov	r2, r3
 800ae28:	4623      	mov	r3, r4
 800ae2a:	f7f5 f9f9 	bl	8000220 <__aeabi_uldivmod>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	460c      	mov	r4, r1
 800ae32:	461a      	mov	r2, r3
 800ae34:	4b2e      	ldr	r3, [pc, #184]	; (800aef0 <UART_SetConfig+0x3a0>)
 800ae36:	fba3 1302 	umull	r1, r3, r3, r2
 800ae3a:	095b      	lsrs	r3, r3, #5
 800ae3c:	2164      	movs	r1, #100	; 0x64
 800ae3e:	fb01 f303 	mul.w	r3, r1, r3
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	00db      	lsls	r3, r3, #3
 800ae46:	3332      	adds	r3, #50	; 0x32
 800ae48:	4a29      	ldr	r2, [pc, #164]	; (800aef0 <UART_SetConfig+0x3a0>)
 800ae4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4e:	095b      	lsrs	r3, r3, #5
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ae56:	4498      	add	r8, r3
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	461d      	mov	r5, r3
 800ae5c:	f04f 0600 	mov.w	r6, #0
 800ae60:	46a9      	mov	r9, r5
 800ae62:	46b2      	mov	sl, r6
 800ae64:	eb19 0309 	adds.w	r3, r9, r9
 800ae68:	eb4a 040a 	adc.w	r4, sl, sl
 800ae6c:	4699      	mov	r9, r3
 800ae6e:	46a2      	mov	sl, r4
 800ae70:	eb19 0905 	adds.w	r9, r9, r5
 800ae74:	eb4a 0a06 	adc.w	sl, sl, r6
 800ae78:	f04f 0100 	mov.w	r1, #0
 800ae7c:	f04f 0200 	mov.w	r2, #0
 800ae80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae8c:	4689      	mov	r9, r1
 800ae8e:	4692      	mov	sl, r2
 800ae90:	eb19 0005 	adds.w	r0, r9, r5
 800ae94:	eb4a 0106 	adc.w	r1, sl, r6
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	461d      	mov	r5, r3
 800ae9e:	f04f 0600 	mov.w	r6, #0
 800aea2:	196b      	adds	r3, r5, r5
 800aea4:	eb46 0406 	adc.w	r4, r6, r6
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4623      	mov	r3, r4
 800aeac:	f7f5 f9b8 	bl	8000220 <__aeabi_uldivmod>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	4b0e      	ldr	r3, [pc, #56]	; (800aef0 <UART_SetConfig+0x3a0>)
 800aeb8:	fba3 1302 	umull	r1, r3, r3, r2
 800aebc:	095b      	lsrs	r3, r3, #5
 800aebe:	2164      	movs	r1, #100	; 0x64
 800aec0:	fb01 f303 	mul.w	r3, r1, r3
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	3332      	adds	r3, #50	; 0x32
 800aeca:	4a09      	ldr	r2, [pc, #36]	; (800aef0 <UART_SetConfig+0x3a0>)
 800aecc:	fba2 2303 	umull	r2, r3, r2, r3
 800aed0:	095b      	lsrs	r3, r3, #5
 800aed2:	f003 0207 	and.w	r2, r3, #7
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4442      	add	r2, r8
 800aedc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800aede:	e1c0      	b.n	800b262 <UART_SetConfig+0x712>
 800aee0:	40011000 	.word	0x40011000
 800aee4:	40011400 	.word	0x40011400
 800aee8:	40011800 	.word	0x40011800
 800aeec:	40011c00 	.word	0x40011c00
 800aef0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4adc      	ldr	r2, [pc, #880]	; (800b26c <UART_SetConfig+0x71c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d00f      	beq.n	800af1e <UART_SetConfig+0x3ce>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4adb      	ldr	r2, [pc, #876]	; (800b270 <UART_SetConfig+0x720>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d00a      	beq.n	800af1e <UART_SetConfig+0x3ce>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4ad9      	ldr	r2, [pc, #868]	; (800b274 <UART_SetConfig+0x724>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d005      	beq.n	800af1e <UART_SetConfig+0x3ce>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4ad8      	ldr	r2, [pc, #864]	; (800b278 <UART_SetConfig+0x728>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	f040 80d1 	bne.w	800b0c0 <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800af1e:	f7fc ff43 	bl	8007da8 <HAL_RCC_GetPCLK2Freq>
 800af22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	469a      	mov	sl, r3
 800af28:	f04f 0b00 	mov.w	fp, #0
 800af2c:	46d0      	mov	r8, sl
 800af2e:	46d9      	mov	r9, fp
 800af30:	eb18 0308 	adds.w	r3, r8, r8
 800af34:	eb49 0409 	adc.w	r4, r9, r9
 800af38:	4698      	mov	r8, r3
 800af3a:	46a1      	mov	r9, r4
 800af3c:	eb18 080a 	adds.w	r8, r8, sl
 800af40:	eb49 090b 	adc.w	r9, r9, fp
 800af44:	f04f 0100 	mov.w	r1, #0
 800af48:	f04f 0200 	mov.w	r2, #0
 800af4c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800af50:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800af54:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800af58:	4688      	mov	r8, r1
 800af5a:	4691      	mov	r9, r2
 800af5c:	eb1a 0508 	adds.w	r5, sl, r8
 800af60:	eb4b 0609 	adc.w	r6, fp, r9
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	4619      	mov	r1, r3
 800af6a:	f04f 0200 	mov.w	r2, #0
 800af6e:	f04f 0300 	mov.w	r3, #0
 800af72:	f04f 0400 	mov.w	r4, #0
 800af76:	0094      	lsls	r4, r2, #2
 800af78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800af7c:	008b      	lsls	r3, r1, #2
 800af7e:	461a      	mov	r2, r3
 800af80:	4623      	mov	r3, r4
 800af82:	4628      	mov	r0, r5
 800af84:	4631      	mov	r1, r6
 800af86:	f7f5 f94b 	bl	8000220 <__aeabi_uldivmod>
 800af8a:	4603      	mov	r3, r0
 800af8c:	460c      	mov	r4, r1
 800af8e:	461a      	mov	r2, r3
 800af90:	4bba      	ldr	r3, [pc, #744]	; (800b27c <UART_SetConfig+0x72c>)
 800af92:	fba3 2302 	umull	r2, r3, r3, r2
 800af96:	095b      	lsrs	r3, r3, #5
 800af98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	469b      	mov	fp, r3
 800afa0:	f04f 0c00 	mov.w	ip, #0
 800afa4:	46d9      	mov	r9, fp
 800afa6:	46e2      	mov	sl, ip
 800afa8:	eb19 0309 	adds.w	r3, r9, r9
 800afac:	eb4a 040a 	adc.w	r4, sl, sl
 800afb0:	4699      	mov	r9, r3
 800afb2:	46a2      	mov	sl, r4
 800afb4:	eb19 090b 	adds.w	r9, r9, fp
 800afb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800afbc:	f04f 0100 	mov.w	r1, #0
 800afc0:	f04f 0200 	mov.w	r2, #0
 800afc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800afcc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800afd0:	4689      	mov	r9, r1
 800afd2:	4692      	mov	sl, r2
 800afd4:	eb1b 0509 	adds.w	r5, fp, r9
 800afd8:	eb4c 060a 	adc.w	r6, ip, sl
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	4619      	mov	r1, r3
 800afe2:	f04f 0200 	mov.w	r2, #0
 800afe6:	f04f 0300 	mov.w	r3, #0
 800afea:	f04f 0400 	mov.w	r4, #0
 800afee:	0094      	lsls	r4, r2, #2
 800aff0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aff4:	008b      	lsls	r3, r1, #2
 800aff6:	461a      	mov	r2, r3
 800aff8:	4623      	mov	r3, r4
 800affa:	4628      	mov	r0, r5
 800affc:	4631      	mov	r1, r6
 800affe:	f7f5 f90f 	bl	8000220 <__aeabi_uldivmod>
 800b002:	4603      	mov	r3, r0
 800b004:	460c      	mov	r4, r1
 800b006:	461a      	mov	r2, r3
 800b008:	4b9c      	ldr	r3, [pc, #624]	; (800b27c <UART_SetConfig+0x72c>)
 800b00a:	fba3 1302 	umull	r1, r3, r3, r2
 800b00e:	095b      	lsrs	r3, r3, #5
 800b010:	2164      	movs	r1, #100	; 0x64
 800b012:	fb01 f303 	mul.w	r3, r1, r3
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	3332      	adds	r3, #50	; 0x32
 800b01c:	4a97      	ldr	r2, [pc, #604]	; (800b27c <UART_SetConfig+0x72c>)
 800b01e:	fba2 2303 	umull	r2, r3, r2, r3
 800b022:	095b      	lsrs	r3, r3, #5
 800b024:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b028:	4498      	add	r8, r3
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	469b      	mov	fp, r3
 800b02e:	f04f 0c00 	mov.w	ip, #0
 800b032:	46d9      	mov	r9, fp
 800b034:	46e2      	mov	sl, ip
 800b036:	eb19 0309 	adds.w	r3, r9, r9
 800b03a:	eb4a 040a 	adc.w	r4, sl, sl
 800b03e:	4699      	mov	r9, r3
 800b040:	46a2      	mov	sl, r4
 800b042:	eb19 090b 	adds.w	r9, r9, fp
 800b046:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b04a:	f04f 0100 	mov.w	r1, #0
 800b04e:	f04f 0200 	mov.w	r2, #0
 800b052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b05a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b05e:	4689      	mov	r9, r1
 800b060:	4692      	mov	sl, r2
 800b062:	eb1b 0509 	adds.w	r5, fp, r9
 800b066:	eb4c 060a 	adc.w	r6, ip, sl
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	4619      	mov	r1, r3
 800b070:	f04f 0200 	mov.w	r2, #0
 800b074:	f04f 0300 	mov.w	r3, #0
 800b078:	f04f 0400 	mov.w	r4, #0
 800b07c:	0094      	lsls	r4, r2, #2
 800b07e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b082:	008b      	lsls	r3, r1, #2
 800b084:	461a      	mov	r2, r3
 800b086:	4623      	mov	r3, r4
 800b088:	4628      	mov	r0, r5
 800b08a:	4631      	mov	r1, r6
 800b08c:	f7f5 f8c8 	bl	8000220 <__aeabi_uldivmod>
 800b090:	4603      	mov	r3, r0
 800b092:	460c      	mov	r4, r1
 800b094:	461a      	mov	r2, r3
 800b096:	4b79      	ldr	r3, [pc, #484]	; (800b27c <UART_SetConfig+0x72c>)
 800b098:	fba3 1302 	umull	r1, r3, r3, r2
 800b09c:	095b      	lsrs	r3, r3, #5
 800b09e:	2164      	movs	r1, #100	; 0x64
 800b0a0:	fb01 f303 	mul.w	r3, r1, r3
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	011b      	lsls	r3, r3, #4
 800b0a8:	3332      	adds	r3, #50	; 0x32
 800b0aa:	4a74      	ldr	r2, [pc, #464]	; (800b27c <UART_SetConfig+0x72c>)
 800b0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b0b0:	095b      	lsrs	r3, r3, #5
 800b0b2:	f003 020f 	and.w	r2, r3, #15
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4442      	add	r2, r8
 800b0bc:	609a      	str	r2, [r3, #8]
 800b0be:	e0d0      	b.n	800b262 <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b0c0:	f7fc fe5e 	bl	8007d80 <HAL_RCC_GetPCLK1Freq>
 800b0c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	469a      	mov	sl, r3
 800b0ca:	f04f 0b00 	mov.w	fp, #0
 800b0ce:	46d0      	mov	r8, sl
 800b0d0:	46d9      	mov	r9, fp
 800b0d2:	eb18 0308 	adds.w	r3, r8, r8
 800b0d6:	eb49 0409 	adc.w	r4, r9, r9
 800b0da:	4698      	mov	r8, r3
 800b0dc:	46a1      	mov	r9, r4
 800b0de:	eb18 080a 	adds.w	r8, r8, sl
 800b0e2:	eb49 090b 	adc.w	r9, r9, fp
 800b0e6:	f04f 0100 	mov.w	r1, #0
 800b0ea:	f04f 0200 	mov.w	r2, #0
 800b0ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b0f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b0f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b0fa:	4688      	mov	r8, r1
 800b0fc:	4691      	mov	r9, r2
 800b0fe:	eb1a 0508 	adds.w	r5, sl, r8
 800b102:	eb4b 0609 	adc.w	r6, fp, r9
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	4619      	mov	r1, r3
 800b10c:	f04f 0200 	mov.w	r2, #0
 800b110:	f04f 0300 	mov.w	r3, #0
 800b114:	f04f 0400 	mov.w	r4, #0
 800b118:	0094      	lsls	r4, r2, #2
 800b11a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b11e:	008b      	lsls	r3, r1, #2
 800b120:	461a      	mov	r2, r3
 800b122:	4623      	mov	r3, r4
 800b124:	4628      	mov	r0, r5
 800b126:	4631      	mov	r1, r6
 800b128:	f7f5 f87a 	bl	8000220 <__aeabi_uldivmod>
 800b12c:	4603      	mov	r3, r0
 800b12e:	460c      	mov	r4, r1
 800b130:	461a      	mov	r2, r3
 800b132:	4b52      	ldr	r3, [pc, #328]	; (800b27c <UART_SetConfig+0x72c>)
 800b134:	fba3 2302 	umull	r2, r3, r3, r2
 800b138:	095b      	lsrs	r3, r3, #5
 800b13a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	469b      	mov	fp, r3
 800b142:	f04f 0c00 	mov.w	ip, #0
 800b146:	46d9      	mov	r9, fp
 800b148:	46e2      	mov	sl, ip
 800b14a:	eb19 0309 	adds.w	r3, r9, r9
 800b14e:	eb4a 040a 	adc.w	r4, sl, sl
 800b152:	4699      	mov	r9, r3
 800b154:	46a2      	mov	sl, r4
 800b156:	eb19 090b 	adds.w	r9, r9, fp
 800b15a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b15e:	f04f 0100 	mov.w	r1, #0
 800b162:	f04f 0200 	mov.w	r2, #0
 800b166:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b16a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b16e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b172:	4689      	mov	r9, r1
 800b174:	4692      	mov	sl, r2
 800b176:	eb1b 0509 	adds.w	r5, fp, r9
 800b17a:	eb4c 060a 	adc.w	r6, ip, sl
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	4619      	mov	r1, r3
 800b184:	f04f 0200 	mov.w	r2, #0
 800b188:	f04f 0300 	mov.w	r3, #0
 800b18c:	f04f 0400 	mov.w	r4, #0
 800b190:	0094      	lsls	r4, r2, #2
 800b192:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b196:	008b      	lsls	r3, r1, #2
 800b198:	461a      	mov	r2, r3
 800b19a:	4623      	mov	r3, r4
 800b19c:	4628      	mov	r0, r5
 800b19e:	4631      	mov	r1, r6
 800b1a0:	f7f5 f83e 	bl	8000220 <__aeabi_uldivmod>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	460c      	mov	r4, r1
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b34      	ldr	r3, [pc, #208]	; (800b27c <UART_SetConfig+0x72c>)
 800b1ac:	fba3 1302 	umull	r1, r3, r3, r2
 800b1b0:	095b      	lsrs	r3, r3, #5
 800b1b2:	2164      	movs	r1, #100	; 0x64
 800b1b4:	fb01 f303 	mul.w	r3, r1, r3
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	011b      	lsls	r3, r3, #4
 800b1bc:	3332      	adds	r3, #50	; 0x32
 800b1be:	4a2f      	ldr	r2, [pc, #188]	; (800b27c <UART_SetConfig+0x72c>)
 800b1c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c4:	095b      	lsrs	r3, r3, #5
 800b1c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b1ca:	4498      	add	r8, r3
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	469b      	mov	fp, r3
 800b1d0:	f04f 0c00 	mov.w	ip, #0
 800b1d4:	46d9      	mov	r9, fp
 800b1d6:	46e2      	mov	sl, ip
 800b1d8:	eb19 0309 	adds.w	r3, r9, r9
 800b1dc:	eb4a 040a 	adc.w	r4, sl, sl
 800b1e0:	4699      	mov	r9, r3
 800b1e2:	46a2      	mov	sl, r4
 800b1e4:	eb19 090b 	adds.w	r9, r9, fp
 800b1e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b1ec:	f04f 0100 	mov.w	r1, #0
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b1f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b1fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b200:	4689      	mov	r9, r1
 800b202:	4692      	mov	sl, r2
 800b204:	eb1b 0509 	adds.w	r5, fp, r9
 800b208:	eb4c 060a 	adc.w	r6, ip, sl
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	4619      	mov	r1, r3
 800b212:	f04f 0200 	mov.w	r2, #0
 800b216:	f04f 0300 	mov.w	r3, #0
 800b21a:	f04f 0400 	mov.w	r4, #0
 800b21e:	0094      	lsls	r4, r2, #2
 800b220:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b224:	008b      	lsls	r3, r1, #2
 800b226:	461a      	mov	r2, r3
 800b228:	4623      	mov	r3, r4
 800b22a:	4628      	mov	r0, r5
 800b22c:	4631      	mov	r1, r6
 800b22e:	f7f4 fff7 	bl	8000220 <__aeabi_uldivmod>
 800b232:	4603      	mov	r3, r0
 800b234:	460c      	mov	r4, r1
 800b236:	461a      	mov	r2, r3
 800b238:	4b10      	ldr	r3, [pc, #64]	; (800b27c <UART_SetConfig+0x72c>)
 800b23a:	fba3 1302 	umull	r1, r3, r3, r2
 800b23e:	095b      	lsrs	r3, r3, #5
 800b240:	2164      	movs	r1, #100	; 0x64
 800b242:	fb01 f303 	mul.w	r3, r1, r3
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	011b      	lsls	r3, r3, #4
 800b24a:	3332      	adds	r3, #50	; 0x32
 800b24c:	4a0b      	ldr	r2, [pc, #44]	; (800b27c <UART_SetConfig+0x72c>)
 800b24e:	fba2 2303 	umull	r2, r3, r2, r3
 800b252:	095b      	lsrs	r3, r3, #5
 800b254:	f003 020f 	and.w	r2, r3, #15
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4442      	add	r2, r8
 800b25e:	609a      	str	r2, [r3, #8]
}
 800b260:	e7ff      	b.n	800b262 <UART_SetConfig+0x712>
 800b262:	bf00      	nop
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26c:	40011000 	.word	0x40011000
 800b270:	40011400 	.word	0x40011400
 800b274:	40011800 	.word	0x40011800
 800b278:	40011c00 	.word	0x40011c00
 800b27c:	51eb851f 	.word	0x51eb851f

0800b280 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b298:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	4b2f      	ldr	r3, [pc, #188]	; (800b35c <FSMC_NORSRAM_Init+0xdc>)
 800b29e:	4013      	ands	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b2aa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800b2b0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800b2b6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800b2bc:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800b2c2:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800b2c8:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800b2ce:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800b2d4:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800b2da:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800b2e0:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800b2e6:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800b2ec:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800b2f2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2b08      	cmp	r3, #8
 800b300:	d103      	bne.n	800b30a <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b308:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68f9      	ldr	r1, [r7, #12]
 800b312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b31e:	d10a      	bne.n	800b336 <FSMC_NORSRAM_Init+0xb6>
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d006      	beq.n	800b336 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b330:	431a      	orrs	r2, r3
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d006      	beq.n	800b34c <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b346:	431a      	orrs	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3714      	adds	r7, #20
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
 800b35a:	bf00      	nop
 800b35c:	ffc00480 	.word	0xffc00480

0800b360 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b360:	b480      	push	{r7}
 800b362:	b087      	sub	sp, #28
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800b36c:	2300      	movs	r3, #0
 800b36e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b37a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b382:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b38e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800b396:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800b39e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b3a8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	3b02      	subs	r3, #2
 800b3b0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800b3b2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	1c5a      	adds	r2, r3, #1
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6979      	ldr	r1, [r7, #20]
 800b3c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3d8:	d10e      	bne.n	800b3f8 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3e2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	051b      	lsls	r3, r3, #20
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	697a      	ldr	r2, [r7, #20]
 800b3f6:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	371c      	adds	r7, #28
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
	...

0800b408 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
 800b414:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b420:	d122      	bne.n	800b468 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b42a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800b42c:	697a      	ldr	r2, [r7, #20]
 800b42e:	4b15      	ldr	r3, [pc, #84]	; (800b484 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800b430:	4013      	ands	r3, r2
 800b432:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b43e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800b446:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800b44e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800b454:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800b456:	697a      	ldr	r2, [r7, #20]
 800b458:	4313      	orrs	r3, r2
 800b45a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	6979      	ldr	r1, [r7, #20]
 800b462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b466:	e005      	b.n	800b474 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	371c      	adds	r7, #28
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	cff00000 	.word	0xcff00000

0800b488 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800b488:	b084      	sub	sp, #16
 800b48a:	b480      	push	{r7}
 800b48c:	b085      	sub	sp, #20
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
 800b492:	f107 001c 	add.w	r0, r7, #28
 800b496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b49e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b4a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b4a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b4aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b4ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b4b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800b4c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	431a      	orrs	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	b004      	add	sp, #16
 800b4dc:	4770      	bx	lr

0800b4de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800b4de:	b480      	push	{r7}
 800b4e0:	b083      	sub	sp, #12
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2203      	movs	r2, #3
 800b504:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b506:	2002      	movs	r0, #2
 800b508:	f7f8 fb5a 	bl	8003bc0 <HAL_Delay>
  
  return HAL_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800b516:	b480      	push	{r7}
 800b518:	b083      	sub	sp, #12
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f003 0303 	and.w	r3, r3, #3
}
 800b526:	4618      	mov	r0, r3
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr

0800b532 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800b532:	b480      	push	{r7}
 800b534:	b085      	sub	sp, #20
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b550:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b556:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b55c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b55e:	68fa      	ldr	r2, [r7, #12]
 800b560:	4313      	orrs	r3, r2
 800b562:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b56c:	f023 030f 	bic.w	r3, r3, #15
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	431a      	orrs	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800b586:	b480      	push	{r7}
 800b588:	b083      	sub	sp, #12
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	b2db      	uxtb	r3, r3
}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	3314      	adds	r3, #20
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
}  
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	681a      	ldr	r2, [r3, #0]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	685a      	ldr	r2, [r3, #4]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5ec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b5f2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b5f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b610:	2300      	movs	r3, #0

}
 800b612:	4618      	mov	r0, r3
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800b61e:	b580      	push	{r7, lr}
 800b620:	b088      	sub	sp, #32
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
 800b626:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b62c:	2310      	movs	r3, #16
 800b62e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b630:	2340      	movs	r3, #64	; 0x40
 800b632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b634:	2300      	movs	r3, #0
 800b636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b63c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b63e:	f107 0308 	add.w	r3, r7, #8
 800b642:	4619      	mov	r1, r3
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ff74 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800b64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b64e:	2110      	movs	r1, #16
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 f975 	bl	800b940 <SDMMC_GetCmdResp1>
 800b656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b658:	69fb      	ldr	r3, [r7, #28]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3720      	adds	r7, #32
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b08a      	sub	sp, #40	; 0x28
 800b666:	af00      	add	r7, sp, #0
 800b668:	60f8      	str	r0, [r7, #12]
 800b66a:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b672:	2307      	movs	r3, #7
 800b674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b676:	2340      	movs	r3, #64	; 0x40
 800b678:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b67a:	2300      	movs	r3, #0
 800b67c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b682:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b684:	f107 0310 	add.w	r3, r7, #16
 800b688:	4619      	mov	r1, r3
 800b68a:	68f8      	ldr	r0, [r7, #12]
 800b68c:	f7ff ff51 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800b690:	f241 3288 	movw	r2, #5000	; 0x1388
 800b694:	2107      	movs	r1, #7
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f952 	bl	800b940 <SDMMC_GetCmdResp1>
 800b69c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3728      	adds	r7, #40	; 0x28
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b088      	sub	sp, #32
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b6c6:	f107 0308 	add.w	r3, r7, #8
 800b6ca:	4619      	mov	r1, r3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff ff30 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 f90c 	bl	800b8f0 <SDMMC_GetCmdError>
 800b6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6da:	69fb      	ldr	r3, [r7, #28]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3720      	adds	r7, #32
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b088      	sub	sp, #32
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b6ec:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b6f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b6f2:	2308      	movs	r3, #8
 800b6f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b6f6:	2340      	movs	r3, #64	; 0x40
 800b6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b6fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b704:	f107 0308 	add.w	r3, r7, #8
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f7ff ff11 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 faf5 	bl	800bd00 <SDMMC_GetCmdResp7>
 800b716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b718:	69fb      	ldr	r3, [r7, #28]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3720      	adds	r7, #32
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b088      	sub	sp, #32
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b730:	2337      	movs	r3, #55	; 0x37
 800b732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b734:	2340      	movs	r3, #64	; 0x40
 800b736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b738:	2300      	movs	r3, #0
 800b73a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b73c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b740:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b742:	f107 0308 	add.w	r3, r7, #8
 800b746:	4619      	mov	r1, r3
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f7ff fef2 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800b74e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b752:	2137      	movs	r1, #55	; 0x37
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f8f3 	bl	800b940 <SDMMC_GetCmdResp1>
 800b75a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b75c:	69fb      	ldr	r3, [r7, #28]
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3720      	adds	r7, #32
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}

0800b766 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b088      	sub	sp, #32
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b776:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b77a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b77c:	2329      	movs	r3, #41	; 0x29
 800b77e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b780:	2340      	movs	r3, #64	; 0x40
 800b782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b784:	2300      	movs	r3, #0
 800b786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b78c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b78e:	f107 0308 	add.w	r3, r7, #8
 800b792:	4619      	mov	r1, r3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fecc 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fa02 	bl	800bba4 <SDMMC_GetCmdResp3>
 800b7a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7a2:	69fb      	ldr	r3, [r7, #28]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3720      	adds	r7, #32
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b7ba:	2306      	movs	r3, #6
 800b7bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b7be:	2340      	movs	r3, #64	; 0x40
 800b7c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b7c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b7cc:	f107 0308 	add.w	r3, r7, #8
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f7ff fead 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800b7d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7dc:	2106      	movs	r1, #6
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f8ae 	bl	800b940 <SDMMC_GetCmdResp1>
 800b7e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7e6:	69fb      	ldr	r3, [r7, #28]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3720      	adds	r7, #32
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b7fc:	2333      	movs	r3, #51	; 0x33
 800b7fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b800:	2340      	movs	r3, #64	; 0x40
 800b802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b804:	2300      	movs	r3, #0
 800b806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b80c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b80e:	f107 0308 	add.w	r3, r7, #8
 800b812:	4619      	mov	r1, r3
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f7ff fe8c 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b81a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b81e:	2133      	movs	r1, #51	; 0x33
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f000 f88d 	bl	800b940 <SDMMC_GetCmdResp1>
 800b826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b828:	69fb      	ldr	r3, [r7, #28]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3720      	adds	r7, #32
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}

0800b832 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b832:	b580      	push	{r7, lr}
 800b834:	b088      	sub	sp, #32
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b83e:	2302      	movs	r3, #2
 800b840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b842:	23c0      	movs	r3, #192	; 0xc0
 800b844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b846:	2300      	movs	r3, #0
 800b848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b84a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b84e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b850:	f107 0308 	add.w	r3, r7, #8
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff fe6b 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f95b 	bl	800bb18 <SDMMC_GetCmdResp2>
 800b862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b864:	69fb      	ldr	r3, [r7, #28]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3720      	adds	r7, #32
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}

0800b86e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b86e:	b580      	push	{r7, lr}
 800b870:	b088      	sub	sp, #32
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b87c:	2309      	movs	r3, #9
 800b87e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b880:	23c0      	movs	r3, #192	; 0xc0
 800b882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b884:	2300      	movs	r3, #0
 800b886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b88c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b88e:	f107 0308 	add.w	r3, r7, #8
 800b892:	4619      	mov	r1, r3
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f7ff fe4c 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f93c 	bl	800bb18 <SDMMC_GetCmdResp2>
 800b8a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8a2:	69fb      	ldr	r3, [r7, #28]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3720      	adds	r7, #32
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b088      	sub	sp, #32
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b8be:	2340      	movs	r3, #64	; 0x40
 800b8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b8cc:	f107 0308 	add.w	r3, r7, #8
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7ff fe2d 	bl	800b532 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8d8:	683a      	ldr	r2, [r7, #0]
 800b8da:	2103      	movs	r1, #3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f99b 	bl	800bc18 <SDMMC_GetCmdResp6>
 800b8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8e4:	69fb      	ldr	r3, [r7, #28]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3720      	adds	r7, #32
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b8f0:	b490      	push	{r4, r7}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b8f8:	4b0f      	ldr	r3, [pc, #60]	; (800b938 <SDMMC_GetCmdError+0x48>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a0f      	ldr	r2, [pc, #60]	; (800b93c <SDMMC_GetCmdError+0x4c>)
 800b8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b902:	0a5b      	lsrs	r3, r3, #9
 800b904:	f241 3288 	movw	r2, #5000	; 0x1388
 800b908:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b90c:	4623      	mov	r3, r4
 800b90e:	1e5c      	subs	r4, r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	d102      	bne.n	800b91a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b918:	e009      	b.n	800b92e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b922:	2b00      	cmp	r3, #0
 800b924:	d0f2      	beq.n	800b90c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	22c5      	movs	r2, #197	; 0xc5
 800b92a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bc90      	pop	{r4, r7}
 800b936:	4770      	bx	lr
 800b938:	20000010 	.word	0x20000010
 800b93c:	10624dd3 	.word	0x10624dd3

0800b940 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b940:	b590      	push	{r4, r7, lr}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	460b      	mov	r3, r1
 800b94a:	607a      	str	r2, [r7, #4]
 800b94c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b94e:	4b6f      	ldr	r3, [pc, #444]	; (800bb0c <SDMMC_GetCmdResp1+0x1cc>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a6f      	ldr	r2, [pc, #444]	; (800bb10 <SDMMC_GetCmdResp1+0x1d0>)
 800b954:	fba2 2303 	umull	r2, r3, r2, r3
 800b958:	0a5b      	lsrs	r3, r3, #9
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b960:	4623      	mov	r3, r4
 800b962:	1e5c      	subs	r4, r3, #1
 800b964:	2b00      	cmp	r3, #0
 800b966:	d102      	bne.n	800b96e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b96c:	e0c9      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b972:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0f0      	beq.n	800b960 <SDMMC_GetCmdResp1+0x20>
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1eb      	bne.n	800b960 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d004      	beq.n	800b99e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2204      	movs	r2, #4
 800b998:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b99a:	2304      	movs	r3, #4
 800b99c:	e0b1      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a2:	f003 0301 	and.w	r3, r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d004      	beq.n	800b9b4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e0a6      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	22c5      	movs	r2, #197	; 0xc5
 800b9b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	f7ff fde3 	bl	800b586 <SDIO_GetCommandResponse>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	7afb      	ldrb	r3, [r7, #11]
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d001      	beq.n	800b9ce <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e099      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b9ce:	2100      	movs	r1, #0
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7ff fde5 	bl	800b5a0 <SDIO_GetResponse>
 800b9d6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b9d8:	693a      	ldr	r2, [r7, #16]
 800b9da:	4b4e      	ldr	r3, [pc, #312]	; (800bb14 <SDMMC_GetCmdResp1+0x1d4>)
 800b9dc:	4013      	ands	r3, r2
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e08d      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	da02      	bge.n	800b9f2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b9ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9f0:	e087      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d001      	beq.n	800ba00 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b9fc:	2340      	movs	r3, #64	; 0x40
 800b9fe:	e080      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba0a:	2380      	movs	r3, #128	; 0x80
 800ba0c:	e079      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ba1c:	e071      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba2c:	e069      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba3c:	e061      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba4c:	e059      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ba5c:	e051      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba6c:	e049      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d002      	beq.n	800ba7e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba7c:	e041      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d002      	beq.n	800ba8e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ba88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba8c:	e039      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d002      	beq.n	800ba9e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ba9c:	e031      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800baa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800baac:	e029      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bab8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800babc:	e021      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bac8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bacc:	e019      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bad8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800badc:	e011      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d002      	beq.n	800baee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800baec:	e009      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f003 0308 	and.w	r3, r3, #8
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800baf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bafc:	e001      	b.n	800bb02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bafe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	371c      	adds	r7, #28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd90      	pop	{r4, r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20000010 	.word	0x20000010
 800bb10:	10624dd3 	.word	0x10624dd3
 800bb14:	fdffe008 	.word	0xfdffe008

0800bb18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800bb18:	b490      	push	{r4, r7}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bb20:	4b1e      	ldr	r3, [pc, #120]	; (800bb9c <SDMMC_GetCmdResp2+0x84>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a1e      	ldr	r2, [pc, #120]	; (800bba0 <SDMMC_GetCmdResp2+0x88>)
 800bb26:	fba2 2303 	umull	r2, r3, r2, r3
 800bb2a:	0a5b      	lsrs	r3, r3, #9
 800bb2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bb34:	4623      	mov	r3, r4
 800bb36:	1e5c      	subs	r4, r3, #1
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d102      	bne.n	800bb42 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bb3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb40:	e026      	b.n	800bb90 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d0f0      	beq.n	800bb34 <SDMMC_GetCmdResp2+0x1c>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1eb      	bne.n	800bb34 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d004      	beq.n	800bb72 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2204      	movs	r2, #4
 800bb6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb6e:	2304      	movs	r3, #4
 800bb70:	e00e      	b.n	800bb90 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d004      	beq.n	800bb88 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2201      	movs	r2, #1
 800bb82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e003      	b.n	800bb90 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	22c5      	movs	r2, #197	; 0xc5
 800bb8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bc90      	pop	{r4, r7}
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	20000010 	.word	0x20000010
 800bba0:	10624dd3 	.word	0x10624dd3

0800bba4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800bba4:	b490      	push	{r4, r7}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbac:	4b18      	ldr	r3, [pc, #96]	; (800bc10 <SDMMC_GetCmdResp3+0x6c>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4a18      	ldr	r2, [pc, #96]	; (800bc14 <SDMMC_GetCmdResp3+0x70>)
 800bbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbb6:	0a5b      	lsrs	r3, r3, #9
 800bbb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbbc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bbc0:	4623      	mov	r3, r4
 800bbc2:	1e5c      	subs	r4, r3, #1
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d102      	bne.n	800bbce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbcc:	e01b      	b.n	800bc06 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbd2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d0f0      	beq.n	800bbc0 <SDMMC_GetCmdResp3+0x1c>
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d1eb      	bne.n	800bbc0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbec:	f003 0304 	and.w	r3, r3, #4
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2204      	movs	r2, #4
 800bbf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bbfa:	2304      	movs	r3, #4
 800bbfc:	e003      	b.n	800bc06 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	22c5      	movs	r2, #197	; 0xc5
 800bc02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bc90      	pop	{r4, r7}
 800bc0e:	4770      	bx	lr
 800bc10:	20000010 	.word	0x20000010
 800bc14:	10624dd3 	.word	0x10624dd3

0800bc18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	460b      	mov	r3, r1
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc26:	4b34      	ldr	r3, [pc, #208]	; (800bcf8 <SDMMC_GetCmdResp6+0xe0>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	4a34      	ldr	r2, [pc, #208]	; (800bcfc <SDMMC_GetCmdResp6+0xe4>)
 800bc2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc30:	0a5b      	lsrs	r3, r3, #9
 800bc32:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc36:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bc3a:	4623      	mov	r3, r4
 800bc3c:	1e5c      	subs	r4, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc46:	e052      	b.n	800bcee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc4c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d0f0      	beq.n	800bc3a <SDMMC_GetCmdResp6+0x22>
 800bc58:	697b      	ldr	r3, [r7, #20]
 800bc5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1eb      	bne.n	800bc3a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc66:	f003 0304 	and.w	r3, r3, #4
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d004      	beq.n	800bc78 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2204      	movs	r2, #4
 800bc72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc74:	2304      	movs	r3, #4
 800bc76:	e03a      	b.n	800bcee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d004      	beq.n	800bc8e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2201      	movs	r2, #1
 800bc88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	e02f      	b.n	800bcee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7ff fc79 	bl	800b586 <SDIO_GetCommandResponse>
 800bc94:	4603      	mov	r3, r0
 800bc96:	461a      	mov	r2, r3
 800bc98:	7afb      	ldrb	r3, [r7, #11]
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d001      	beq.n	800bca2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e025      	b.n	800bcee <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	22c5      	movs	r2, #197	; 0xc5
 800bca6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800bca8:	2100      	movs	r1, #0
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f7ff fc78 	bl	800b5a0 <SDIO_GetResponse>
 800bcb0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d106      	bne.n	800bcca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	0c1b      	lsrs	r3, r3, #16
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e011      	b.n	800bcee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d002      	beq.n	800bcda <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bcd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bcd8:	e009      	b.n	800bcee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bce8:	e001      	b.n	800bcee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	371c      	adds	r7, #28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd90      	pop	{r4, r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	20000010 	.word	0x20000010
 800bcfc:	10624dd3 	.word	0x10624dd3

0800bd00 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800bd00:	b490      	push	{r4, r7}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd08:	4b21      	ldr	r3, [pc, #132]	; (800bd90 <SDMMC_GetCmdResp7+0x90>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a21      	ldr	r2, [pc, #132]	; (800bd94 <SDMMC_GetCmdResp7+0x94>)
 800bd0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd12:	0a5b      	lsrs	r3, r3, #9
 800bd14:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bd1c:	4623      	mov	r3, r4
 800bd1e:	1e5c      	subs	r4, r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d102      	bne.n	800bd2a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd28:	e02c      	b.n	800bd84 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd2e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0f0      	beq.n	800bd1c <SDMMC_GetCmdResp7+0x1c>
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d1eb      	bne.n	800bd1c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d004      	beq.n	800bd5a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2204      	movs	r2, #4
 800bd54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd56:	2304      	movs	r3, #4
 800bd58:	e014      	b.n	800bd84 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5e:	f003 0301 	and.w	r3, r3, #1
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e009      	b.n	800bd84 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2240      	movs	r2, #64	; 0x40
 800bd80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800bd82:	2300      	movs	r3, #0
  
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bc90      	pop	{r4, r7}
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	20000010 	.word	0x20000010
 800bd94:	10624dd3 	.word	0x10624dd3

0800bd98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd98:	b084      	sub	sp, #16
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b084      	sub	sp, #16
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	f107 001c 	add.w	r0, r7, #28
 800bda6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	d122      	bne.n	800bdf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bdc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdc8:	687a      	ldr	r2, [r7, #4]
 800bdca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bdd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d105      	bne.n	800bdea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f94a 	bl	800c084 <USB_CoreReset>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	73fb      	strb	r3, [r7, #15]
 800bdf4:	e01a      	b.n	800be2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f93e 	bl	800c084 <USB_CoreReset>
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800be0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d106      	bne.n	800be20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	639a      	str	r2, [r3, #56]	; 0x38
 800be1e:	e005      	b.n	800be2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d10b      	bne.n	800be4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	f043 0206 	orr.w	r2, r3, #6
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	f043 0220 	orr.w	r2, r3, #32
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be56:	b004      	add	sp, #16
 800be58:	4770      	bx	lr

0800be5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	f043 0201 	orr.w	r2, r3, #1
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be6e:	2300      	movs	r3, #0
}
 800be70:	4618      	mov	r0, r3
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f023 0201 	bic.w	r2, r3, #1
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b082      	sub	sp, #8
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	460b      	mov	r3, r1
 800bea8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800beb6:	78fb      	ldrb	r3, [r7, #3]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d106      	bne.n	800beca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	60da      	str	r2, [r3, #12]
 800bec8:	e00b      	b.n	800bee2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800beca:	78fb      	ldrb	r3, [r7, #3]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d106      	bne.n	800bede <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68db      	ldr	r3, [r3, #12]
 800bed4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	60da      	str	r2, [r3, #12]
 800bedc:	e001      	b.n	800bee2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800bede:	2301      	movs	r3, #1
 800bee0:	e003      	b.n	800beea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800bee2:	2032      	movs	r0, #50	; 0x32
 800bee4:	f7f7 fe6c 	bl	8003bc0 <HAL_Delay>

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
	...

0800bef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b085      	sub	sp, #20
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800befe:	2300      	movs	r3, #0
 800bf00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	019b      	lsls	r3, r3, #6
 800bf06:	f043 0220 	orr.w	r2, r3, #32
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	3301      	adds	r3, #1
 800bf12:	60fb      	str	r3, [r7, #12]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4a09      	ldr	r2, [pc, #36]	; (800bf3c <USB_FlushTxFifo+0x48>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d901      	bls.n	800bf20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e006      	b.n	800bf2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	f003 0320 	and.w	r3, r3, #32
 800bf28:	2b20      	cmp	r3, #32
 800bf2a:	d0f0      	beq.n	800bf0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	00030d40 	.word	0x00030d40

0800bf40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b085      	sub	sp, #20
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2210      	movs	r2, #16
 800bf50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3301      	adds	r3, #1
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	4a09      	ldr	r2, [pc, #36]	; (800bf80 <USB_FlushRxFifo+0x40>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d901      	bls.n	800bf64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e006      	b.n	800bf72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	691b      	ldr	r3, [r3, #16]
 800bf68:	f003 0310 	and.w	r3, r3, #16
 800bf6c:	2b10      	cmp	r3, #16
 800bf6e:	d0f0      	beq.n	800bf52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3714      	adds	r7, #20
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr
 800bf7e:	bf00      	nop
 800bf80:	00030d40 	.word	0x00030d40

0800bf84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b089      	sub	sp, #36	; 0x24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	60b9      	str	r1, [r7, #8]
 800bf8e:	4611      	mov	r1, r2
 800bf90:	461a      	mov	r2, r3
 800bf92:	460b      	mov	r3, r1
 800bf94:	71fb      	strb	r3, [r7, #7]
 800bf96:	4613      	mov	r3, r2
 800bf98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bfa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d11a      	bne.n	800bfe0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bfaa:	88bb      	ldrh	r3, [r7, #4]
 800bfac:	3303      	adds	r3, #3
 800bfae:	089b      	lsrs	r3, r3, #2
 800bfb0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	61bb      	str	r3, [r7, #24]
 800bfb6:	e00f      	b.n	800bfd8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bfb8:	79fb      	ldrb	r3, [r7, #7]
 800bfba:	031a      	lsls	r2, r3, #12
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	3304      	adds	r3, #4
 800bfd0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	61bb      	str	r3, [r7, #24]
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d3eb      	bcc.n	800bfb8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3724      	adds	r7, #36	; 0x24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr

0800bfee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bfee:	b480      	push	{r7}
 800bff0:	b089      	sub	sp, #36	; 0x24
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	60f8      	str	r0, [r7, #12]
 800bff6:	60b9      	str	r1, [r7, #8]
 800bff8:	4613      	mov	r3, r2
 800bffa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c004:	88fb      	ldrh	r3, [r7, #6]
 800c006:	3303      	adds	r3, #3
 800c008:	089b      	lsrs	r3, r3, #2
 800c00a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c00c:	2300      	movs	r3, #0
 800c00e:	61bb      	str	r3, [r7, #24]
 800c010:	e00b      	b.n	800c02a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	601a      	str	r2, [r3, #0]
    pDest++;
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	3304      	adds	r3, #4
 800c022:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	3301      	adds	r3, #1
 800c028:	61bb      	str	r3, [r7, #24]
 800c02a:	69ba      	ldr	r2, [r7, #24]
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d3ef      	bcc.n	800c012 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c032:	69fb      	ldr	r3, [r7, #28]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3724      	adds	r7, #36	; 0x24
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	4013      	ands	r3, r2
 800c056:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c058:	68fb      	ldr	r3, [r7, #12]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	f003 0301 	and.w	r3, r3, #1
}
 800c076:	4618      	mov	r0, r3
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr
	...

0800c084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c084:	b480      	push	{r7}
 800c086:	b085      	sub	sp, #20
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c08c:	2300      	movs	r3, #0
 800c08e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	3301      	adds	r3, #1
 800c094:	60fb      	str	r3, [r7, #12]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	4a13      	ldr	r2, [pc, #76]	; (800c0e8 <USB_CoreReset+0x64>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d901      	bls.n	800c0a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e01b      	b.n	800c0da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	daf2      	bge.n	800c090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	691b      	ldr	r3, [r3, #16]
 800c0b2:	f043 0201 	orr.w	r2, r3, #1
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	60fb      	str	r3, [r7, #12]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4a09      	ldr	r2, [pc, #36]	; (800c0e8 <USB_CoreReset+0x64>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d901      	bls.n	800c0cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e006      	b.n	800c0da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d0f0      	beq.n	800c0ba <USB_CoreReset+0x36>

  return HAL_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3714      	adds	r7, #20
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr
 800c0e6:	bf00      	nop
 800c0e8:	00030d40 	.word	0x00030d40

0800c0ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	f107 001c 	add.w	r0, r7, #28
 800c0fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c108:	461a      	mov	r2, r3
 800c10a:	2300      	movs	r3, #0
 800c10c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c112:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c11e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c12a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d018      	beq.n	800c164 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c134:	2b01      	cmp	r3, #1
 800c136:	d10a      	bne.n	800c14e <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c146:	f043 0304 	orr.w	r3, r3, #4
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	e014      	b.n	800c178 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68ba      	ldr	r2, [r7, #8]
 800c158:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c15c:	f023 0304 	bic.w	r3, r3, #4
 800c160:	6013      	str	r3, [r2, #0]
 800c162:	e009      	b.n	800c178 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c172:	f023 0304 	bic.w	r3, r3, #4
 800c176:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c178:	2110      	movs	r1, #16
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f7ff feba 	bl	800bef4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff fedd 	bl	800bf40 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c186:	2300      	movs	r3, #0
 800c188:	60fb      	str	r3, [r7, #12]
 800c18a:	e015      	b.n	800c1b8 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	015a      	lsls	r2, r3, #5
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	4413      	add	r3, r2
 800c194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c198:	461a      	mov	r2, r3
 800c19a:	f04f 33ff 	mov.w	r3, #4294967295
 800c19e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	6a3b      	ldr	r3, [r7, #32]
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d3e5      	bcc.n	800c18c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800c1c0:	2101      	movs	r1, #1
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f8ac 	bl	800c320 <USB_DriveVbus>

  HAL_Delay(200U);
 800c1c8:	20c8      	movs	r0, #200	; 0xc8
 800c1ca:	f7f7 fcf9 	bl	8003bc0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1da:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d00b      	beq.n	800c200 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a14      	ldr	r2, [pc, #80]	; (800c244 <USB_HostInit+0x158>)
 800c1f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a13      	ldr	r2, [pc, #76]	; (800c248 <USB_HostInit+0x15c>)
 800c1fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c1fe:	e009      	b.n	800c214 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2280      	movs	r2, #128	; 0x80
 800c204:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a10      	ldr	r2, [pc, #64]	; (800c24c <USB_HostInit+0x160>)
 800c20a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a10      	ldr	r2, [pc, #64]	; (800c250 <USB_HostInit+0x164>)
 800c210:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	2b00      	cmp	r3, #0
 800c218:	d105      	bne.n	800c226 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	699b      	ldr	r3, [r3, #24]
 800c21e:	f043 0210 	orr.w	r2, r3, #16
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	699a      	ldr	r2, [r3, #24]
 800c22a:	4b0a      	ldr	r3, [pc, #40]	; (800c254 <USB_HostInit+0x168>)
 800c22c:	4313      	orrs	r3, r2
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c232:	2300      	movs	r3, #0
}
 800c234:	4618      	mov	r0, r3
 800c236:	3710      	adds	r7, #16
 800c238:	46bd      	mov	sp, r7
 800c23a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c23e:	b004      	add	sp, #16
 800c240:	4770      	bx	lr
 800c242:	bf00      	nop
 800c244:	01000200 	.word	0x01000200
 800c248:	00e00300 	.word	0x00e00300
 800c24c:	00600080 	.word	0x00600080
 800c250:	004000e0 	.word	0x004000e0
 800c254:	a3200008 	.word	0xa3200008

0800c258 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c276:	f023 0303 	bic.w	r3, r3, #3
 800c27a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	68f9      	ldr	r1, [r7, #12]
 800c28c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c290:	4313      	orrs	r3, r2
 800c292:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c294:	78fb      	ldrb	r3, [r7, #3]
 800c296:	2b01      	cmp	r3, #1
 800c298:	d107      	bne.n	800c2aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c2a6:	6053      	str	r3, [r2, #4]
 800c2a8:	e009      	b.n	800c2be <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c2aa:	78fb      	ldrb	r3, [r7, #3]
 800c2ac:	2b02      	cmp	r3, #2
 800c2ae:	d106      	bne.n	800c2be <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f241 7370 	movw	r3, #6000	; 0x1770
 800c2bc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c2ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c2f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2fa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c2fc:	2064      	movs	r0, #100	; 0x64
 800c2fe:	f7f7 fc5f 	bl	8003bc0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c30a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c30e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c310:	200a      	movs	r0, #10
 800c312:	f7f7 fc55 	bl	8003bc0 <HAL_Delay>

  return HAL_OK;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3710      	adds	r7, #16
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	460b      	mov	r3, r1
 800c32a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c344:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d109      	bne.n	800c364 <USB_DriveVbus+0x44>
 800c350:	78fb      	ldrb	r3, [r7, #3]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d106      	bne.n	800c364 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c35e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c362:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c36a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c36e:	d109      	bne.n	800c384 <USB_DriveVbus+0x64>
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d106      	bne.n	800c384 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	68fa      	ldr	r2, [r7, #12]
 800c37a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c37e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c382:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c392:	b480      	push	{r7}
 800c394:	b085      	sub	sp, #20
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	0c5b      	lsrs	r3, r3, #17
 800c3b0:	f003 0303 	and.w	r3, r3, #3
}
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	3714      	adds	r7, #20
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3d2:	689b      	ldr	r3, [r3, #8]
 800c3d4:	b29b      	uxth	r3, r3
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
	...

0800c3e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b087      	sub	sp, #28
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	4608      	mov	r0, r1
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	70fb      	strb	r3, [r7, #3]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	70bb      	strb	r3, [r7, #2]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c3fe:	2300      	movs	r3, #0
 800c400:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c406:	78fb      	ldrb	r3, [r7, #3]
 800c408:	015a      	lsls	r2, r3, #5
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c412:	461a      	mov	r2, r3
 800c414:	f04f 33ff 	mov.w	r3, #4294967295
 800c418:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c41a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c41e:	2b03      	cmp	r3, #3
 800c420:	d87e      	bhi.n	800c520 <USB_HC_Init+0x13c>
 800c422:	a201      	add	r2, pc, #4	; (adr r2, 800c428 <USB_HC_Init+0x44>)
 800c424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c428:	0800c439 	.word	0x0800c439
 800c42c:	0800c4e3 	.word	0x0800c4e3
 800c430:	0800c439 	.word	0x0800c439
 800c434:	0800c4a5 	.word	0x0800c4a5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c438:	78fb      	ldrb	r3, [r7, #3]
 800c43a:	015a      	lsls	r2, r3, #5
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	4413      	add	r3, r2
 800c440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c444:	461a      	mov	r2, r3
 800c446:	f240 439d 	movw	r3, #1181	; 0x49d
 800c44a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c44c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c450:	2b00      	cmp	r3, #0
 800c452:	da10      	bge.n	800c476 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c454:	78fb      	ldrb	r3, [r7, #3]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	78fa      	ldrb	r2, [r7, #3]
 800c464:	0151      	lsls	r1, r2, #5
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	440a      	add	r2, r1
 800c46a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c46e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c472:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800c474:	e057      	b.n	800c526 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c47a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d051      	beq.n	800c526 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c482:	78fb      	ldrb	r3, [r7, #3]
 800c484:	015a      	lsls	r2, r3, #5
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	4413      	add	r3, r2
 800c48a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	78fa      	ldrb	r2, [r7, #3]
 800c492:	0151      	lsls	r1, r2, #5
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	440a      	add	r2, r1
 800c498:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c49c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c4a0:	60d3      	str	r3, [r2, #12]
      break;
 800c4a2:	e040      	b.n	800c526 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	015a      	lsls	r2, r3, #5
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	f240 639d 	movw	r3, #1693	; 0x69d
 800c4b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c4b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	da34      	bge.n	800c52a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c4c0:	78fb      	ldrb	r3, [r7, #3]
 800c4c2:	015a      	lsls	r2, r3, #5
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	78fa      	ldrb	r2, [r7, #3]
 800c4d0:	0151      	lsls	r1, r2, #5
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	440a      	add	r2, r1
 800c4d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4de:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c4e0:	e023      	b.n	800c52a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c4e2:	78fb      	ldrb	r3, [r7, #3]
 800c4e4:	015a      	lsls	r2, r3, #5
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	f240 2325 	movw	r3, #549	; 0x225
 800c4f4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c4f6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	da17      	bge.n	800c52e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c4fe:	78fb      	ldrb	r3, [r7, #3]
 800c500:	015a      	lsls	r2, r3, #5
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	4413      	add	r3, r2
 800c506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	78fa      	ldrb	r2, [r7, #3]
 800c50e:	0151      	lsls	r1, r2, #5
 800c510:	68ba      	ldr	r2, [r7, #8]
 800c512:	440a      	add	r2, r1
 800c514:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c518:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c51c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c51e:	e006      	b.n	800c52e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	75fb      	strb	r3, [r7, #23]
      break;
 800c524:	e004      	b.n	800c530 <USB_HC_Init+0x14c>
      break;
 800c526:	bf00      	nop
 800c528:	e002      	b.n	800c530 <USB_HC_Init+0x14c>
      break;
 800c52a:	bf00      	nop
 800c52c:	e000      	b.n	800c530 <USB_HC_Init+0x14c>
      break;
 800c52e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c536:	699a      	ldr	r2, [r3, #24]
 800c538:	78fb      	ldrb	r3, [r7, #3]
 800c53a:	f003 030f 	and.w	r3, r3, #15
 800c53e:	2101      	movs	r1, #1
 800c540:	fa01 f303 	lsl.w	r3, r1, r3
 800c544:	68b9      	ldr	r1, [r7, #8]
 800c546:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c54a:	4313      	orrs	r3, r2
 800c54c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	699b      	ldr	r3, [r3, #24]
 800c552:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c55a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	da03      	bge.n	800c56a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	e001      	b.n	800c56e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800c56a:	2300      	movs	r3, #0
 800c56c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800c56e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c572:	2b02      	cmp	r3, #2
 800c574:	d103      	bne.n	800c57e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	e001      	b.n	800c582 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c57e:	2300      	movs	r3, #0
 800c580:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c582:	787b      	ldrb	r3, [r7, #1]
 800c584:	059b      	lsls	r3, r3, #22
 800c586:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c58a:	78bb      	ldrb	r3, [r7, #2]
 800c58c:	02db      	lsls	r3, r3, #11
 800c58e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c592:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c594:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c598:	049b      	lsls	r3, r3, #18
 800c59a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c59e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c5a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c5a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c5a6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c5ac:	78fb      	ldrb	r3, [r7, #3]
 800c5ae:	0159      	lsls	r1, r3, #5
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	440b      	add	r3, r1
 800c5b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5b8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c5be:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800c5c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	d10f      	bne.n	800c5e8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800c5c8:	78fb      	ldrb	r3, [r7, #3]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	78fa      	ldrb	r2, [r7, #3]
 800c5d8:	0151      	lsls	r1, r2, #5
 800c5da:	68ba      	ldr	r2, [r7, #8]
 800c5dc:	440a      	add	r2, r1
 800c5de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5e6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	371c      	adds	r7, #28
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop

0800c5f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b08c      	sub	sp, #48	; 0x30
 800c5fc:	af02      	add	r7, sp, #8
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	4613      	mov	r3, r2
 800c604:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	785b      	ldrb	r3, [r3, #1]
 800c60e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c610:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c614:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c61a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d028      	beq.n	800c674 <USB_HC_StartXfer+0x7c>
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	791b      	ldrb	r3, [r3, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d124      	bne.n	800c674 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800c62a:	79fb      	ldrb	r3, [r7, #7]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10b      	bne.n	800c648 <USB_HC_StartXfer+0x50>
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	795b      	ldrb	r3, [r3, #5]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d107      	bne.n	800c648 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	785b      	ldrb	r3, [r3, #1]
 800c63c:	4619      	mov	r1, r3
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f000 fa30 	bl	800caa4 <USB_DoPing>
      return HAL_OK;
 800c644:	2300      	movs	r3, #0
 800c646:	e114      	b.n	800c872 <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800c648:	79fb      	ldrb	r3, [r7, #7]
 800c64a:	2b01      	cmp	r3, #1
 800c64c:	d112      	bne.n	800c674 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	015a      	lsls	r2, r3, #5
 800c652:	6a3b      	ldr	r3, [r7, #32]
 800c654:	4413      	add	r3, r2
 800c656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	69fa      	ldr	r2, [r7, #28]
 800c65e:	0151      	lsls	r1, r2, #5
 800c660:	6a3a      	ldr	r2, [r7, #32]
 800c662:	440a      	add	r2, r1
 800c664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c668:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800c66c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2200      	movs	r2, #0
 800c672:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	691b      	ldr	r3, [r3, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d018      	beq.n	800c6ae <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	8912      	ldrh	r2, [r2, #8]
 800c684:	4413      	add	r3, r2
 800c686:	3b01      	subs	r3, #1
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	8912      	ldrh	r2, [r2, #8]
 800c68c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c690:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c692:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c694:	8b7b      	ldrh	r3, [r7, #26]
 800c696:	429a      	cmp	r2, r3
 800c698:	d90b      	bls.n	800c6b2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800c69a:	8b7b      	ldrh	r3, [r7, #26]
 800c69c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c69e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	8912      	ldrh	r2, [r2, #8]
 800c6a4:	fb02 f203 	mul.w	r2, r2, r3
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	611a      	str	r2, [r3, #16]
 800c6ac:	e001      	b.n	800c6b2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	78db      	ldrb	r3, [r3, #3]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d006      	beq.n	800c6c8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800c6ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	8912      	ldrh	r2, [r2, #8]
 800c6c0:	fb02 f203 	mul.w	r2, r2, r3
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c6d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6d2:	04d9      	lsls	r1, r3, #19
 800c6d4:	4b69      	ldr	r3, [pc, #420]	; (800c87c <USB_HC_StartXfer+0x284>)
 800c6d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	7a9b      	ldrb	r3, [r3, #10]
 800c6de:	075b      	lsls	r3, r3, #29
 800c6e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6e4:	69f9      	ldr	r1, [r7, #28]
 800c6e6:	0148      	lsls	r0, r1, #5
 800c6e8:	6a39      	ldr	r1, [r7, #32]
 800c6ea:	4401      	add	r1, r0
 800c6ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c6f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800c6f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c6f4:	79fb      	ldrb	r3, [r7, #7]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d009      	beq.n	800c70e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	68d9      	ldr	r1, [r3, #12]
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	6a3b      	ldr	r3, [r7, #32]
 800c704:	4413      	add	r3, r2
 800c706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c70a:	460a      	mov	r2, r1
 800c70c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c70e:	6a3b      	ldr	r3, [r7, #32]
 800c710:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	bf0c      	ite	eq
 800c71e:	2301      	moveq	r3, #1
 800c720:	2300      	movne	r3, #0
 800c722:	b2db      	uxtb	r3, r3
 800c724:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	015a      	lsls	r2, r3, #5
 800c72a:	6a3b      	ldr	r3, [r7, #32]
 800c72c:	4413      	add	r3, r2
 800c72e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	69fa      	ldr	r2, [r7, #28]
 800c736:	0151      	lsls	r1, r2, #5
 800c738:	6a3a      	ldr	r2, [r7, #32]
 800c73a:	440a      	add	r2, r1
 800c73c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c740:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c744:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	015a      	lsls	r2, r3, #5
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	4413      	add	r3, r2
 800c74e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	7e7b      	ldrb	r3, [r7, #25]
 800c756:	075b      	lsls	r3, r3, #29
 800c758:	69f9      	ldr	r1, [r7, #28]
 800c75a:	0148      	lsls	r0, r1, #5
 800c75c:	6a39      	ldr	r1, [r7, #32]
 800c75e:	4401      	add	r1, r0
 800c760:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c764:	4313      	orrs	r3, r2
 800c766:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	015a      	lsls	r2, r3, #5
 800c76c:	6a3b      	ldr	r3, [r7, #32]
 800c76e:	4413      	add	r3, r2
 800c770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a42      	ldr	r2, [pc, #264]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c778:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c77a:	4b41      	ldr	r3, [pc, #260]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c782:	4a3f      	ldr	r2, [pc, #252]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c784:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	78db      	ldrb	r3, [r3, #3]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d006      	beq.n	800c79c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c78e:	4b3c      	ldr	r3, [pc, #240]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c796:	4a3a      	ldr	r2, [pc, #232]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c798:	6013      	str	r3, [r2, #0]
 800c79a:	e005      	b.n	800c7a8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c79c:	4b38      	ldr	r3, [pc, #224]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7a4:	4a36      	ldr	r2, [pc, #216]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c7a6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c7a8:	4b35      	ldr	r3, [pc, #212]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7b0:	4a33      	ldr	r2, [pc, #204]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c7b2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	015a      	lsls	r2, r3, #5
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	4b2f      	ldr	r3, [pc, #188]	; (800c880 <USB_HC_StartXfer+0x288>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c7c8:	79fb      	ldrb	r3, [r7, #7]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d001      	beq.n	800c7d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	e04f      	b.n	800c872 <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	78db      	ldrb	r3, [r3, #3]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d14a      	bne.n	800c870 <USB_HC_StartXfer+0x278>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d046      	beq.n	800c870 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	79db      	ldrb	r3, [r3, #7]
 800c7e6:	2b03      	cmp	r3, #3
 800c7e8:	d830      	bhi.n	800c84c <USB_HC_StartXfer+0x254>
 800c7ea:	a201      	add	r2, pc, #4	; (adr r2, 800c7f0 <USB_HC_StartXfer+0x1f8>)
 800c7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f0:	0800c801 	.word	0x0800c801
 800c7f4:	0800c825 	.word	0x0800c825
 800c7f8:	0800c801 	.word	0x0800c801
 800c7fc:	0800c825 	.word	0x0800c825
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	691b      	ldr	r3, [r3, #16]
 800c804:	3303      	adds	r3, #3
 800c806:	089b      	lsrs	r3, r3, #2
 800c808:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c80a:	8afa      	ldrh	r2, [r7, #22]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c810:	b29b      	uxth	r3, r3
 800c812:	429a      	cmp	r2, r3
 800c814:	d91c      	bls.n	800c850 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	699b      	ldr	r3, [r3, #24]
 800c81a:	f043 0220 	orr.w	r2, r3, #32
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	619a      	str	r2, [r3, #24]
        }
        break;
 800c822:	e015      	b.n	800c850 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	3303      	adds	r3, #3
 800c82a:	089b      	lsrs	r3, r3, #2
 800c82c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c82e:	8afa      	ldrh	r2, [r7, #22]
 800c830:	6a3b      	ldr	r3, [r7, #32]
 800c832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	b29b      	uxth	r3, r3
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d90a      	bls.n	800c854 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	619a      	str	r2, [r3, #24]
        }
        break;
 800c84a:	e003      	b.n	800c854 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c84c:	bf00      	nop
 800c84e:	e002      	b.n	800c856 <USB_HC_StartXfer+0x25e>
        break;
 800c850:	bf00      	nop
 800c852:	e000      	b.n	800c856 <USB_HC_StartXfer+0x25e>
        break;
 800c854:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	68d9      	ldr	r1, [r3, #12]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	785a      	ldrb	r2, [r3, #1]
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	b298      	uxth	r0, r3
 800c864:	2300      	movs	r3, #0
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	4603      	mov	r3, r0
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f7ff fb8a 	bl	800bf84 <USB_WritePacket>
  }

  return HAL_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3728      	adds	r7, #40	; 0x28
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	1ff80000 	.word	0x1ff80000
 800c880:	20000190 	.word	0x20000190

0800c884 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c896:	695b      	ldr	r3, [r3, #20]
 800c898:	b29b      	uxth	r3, r3
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b087      	sub	sp, #28
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c8b6:	78fb      	ldrb	r3, [r7, #3]
 800c8b8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	015a      	lsls	r2, r3, #5
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	4413      	add	r3, r2
 800c8c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	0c9b      	lsrs	r3, r3, #18
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <USB_HC_Halt+0x3a>
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d16c      	bne.n	800c9ba <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	015a      	lsls	r2, r3, #5
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68fa      	ldr	r2, [r7, #12]
 800c8f0:	0151      	lsls	r1, r2, #5
 800c8f2:	693a      	ldr	r2, [r7, #16]
 800c8f4:	440a      	add	r2, r1
 800c8f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8fe:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c904:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d143      	bne.n	800c994 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	015a      	lsls	r2, r3, #5
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	4413      	add	r3, r2
 800c914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	0151      	lsls	r1, r2, #5
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	440a      	add	r2, r1
 800c922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c926:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c92a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	015a      	lsls	r2, r3, #5
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	4413      	add	r3, r2
 800c934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68fa      	ldr	r2, [r7, #12]
 800c93c:	0151      	lsls	r1, r2, #5
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	440a      	add	r2, r1
 800c942:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c94a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	015a      	lsls	r2, r3, #5
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	4413      	add	r3, r2
 800c954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68fa      	ldr	r2, [r7, #12]
 800c95c:	0151      	lsls	r1, r2, #5
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	440a      	add	r2, r1
 800c962:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c966:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c96a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	3301      	adds	r3, #1
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c978:	d81d      	bhi.n	800c9b6 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	015a      	lsls	r2, r3, #5
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	4413      	add	r3, r2
 800c982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c98c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c990:	d0ec      	beq.n	800c96c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c992:	e080      	b.n	800ca96 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	0151      	lsls	r1, r2, #5
 800c9a6:	693a      	ldr	r2, [r7, #16]
 800c9a8:	440a      	add	r2, r1
 800c9aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c9b2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c9b4:	e06f      	b.n	800ca96 <USB_HC_Halt+0x1f0>
          break;
 800c9b6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c9b8:	e06d      	b.n	800ca96 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	015a      	lsls	r2, r3, #5
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	0151      	lsls	r1, r2, #5
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	440a      	add	r2, r1
 800c9d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c9d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9d8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d143      	bne.n	800ca72 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	015a      	lsls	r2, r3, #5
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	0151      	lsls	r1, r2, #5
 800c9fc:	693a      	ldr	r2, [r7, #16]
 800c9fe:	440a      	add	r2, r1
 800ca00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ca08:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	015a      	lsls	r2, r3, #5
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	4413      	add	r3, r2
 800ca12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	0151      	lsls	r1, r2, #5
 800ca1c:	693a      	ldr	r2, [r7, #16]
 800ca1e:	440a      	add	r2, r1
 800ca20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca28:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	015a      	lsls	r2, r3, #5
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	4413      	add	r3, r2
 800ca32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	0151      	lsls	r1, r2, #5
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	440a      	add	r2, r1
 800ca40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca48:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	617b      	str	r3, [r7, #20]
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca56:	d81d      	bhi.n	800ca94 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	015a      	lsls	r2, r3, #5
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	4413      	add	r3, r2
 800ca60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca6e:	d0ec      	beq.n	800ca4a <USB_HC_Halt+0x1a4>
 800ca70:	e011      	b.n	800ca96 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	015a      	lsls	r2, r3, #5
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	4413      	add	r3, r2
 800ca7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	0151      	lsls	r1, r2, #5
 800ca84:	693a      	ldr	r2, [r7, #16]
 800ca86:	440a      	add	r2, r1
 800ca88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca90:	6013      	str	r3, [r2, #0]
 800ca92:	e000      	b.n	800ca96 <USB_HC_Halt+0x1f0>
          break;
 800ca94:	bf00      	nop
    }
  }

  return HAL_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	371c      	adds	r7, #28
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b087      	sub	sp, #28
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	460b      	mov	r3, r1
 800caae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cab8:	2301      	movs	r3, #1
 800caba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	04da      	lsls	r2, r3, #19
 800cac0:	4b15      	ldr	r3, [pc, #84]	; (800cb18 <USB_DoPing+0x74>)
 800cac2:	4013      	ands	r3, r2
 800cac4:	693a      	ldr	r2, [r7, #16]
 800cac6:	0151      	lsls	r1, r2, #5
 800cac8:	697a      	ldr	r2, [r7, #20]
 800caca:	440a      	add	r2, r1
 800cacc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cad4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	015a      	lsls	r2, r3, #5
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	4413      	add	r3, r2
 800cade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800caec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800caf4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	015a      	lsls	r2, r3, #5
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	4413      	add	r3, r2
 800cafe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb02:	461a      	mov	r2, r3
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	371c      	adds	r7, #28
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	1ff80000 	.word	0x1ff80000

0800cb1c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff f9a5 	bl	800be7c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800cb32:	2110      	movs	r1, #16
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f7ff f9dd 	bl	800bef4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f7ff fa00 	bl	800bf40 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cb40:	2300      	movs	r3, #0
 800cb42:	613b      	str	r3, [r7, #16]
 800cb44:	e01f      	b.n	800cb86 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	015a      	lsls	r2, r3, #5
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb5c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb64:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb6c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	015a      	lsls	r2, r3, #5
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	4413      	add	r3, r2
 800cb76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	3301      	adds	r3, #1
 800cb84:	613b      	str	r3, [r7, #16]
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	2b0f      	cmp	r3, #15
 800cb8a:	d9dc      	bls.n	800cb46 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	613b      	str	r3, [r7, #16]
 800cb90:	e034      	b.n	800cbfc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	015a      	lsls	r2, r3, #5
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	4413      	add	r3, r2
 800cb9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cba8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800cbaa:	68bb      	ldr	r3, [r7, #8]
 800cbac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cbb0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cbb8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	015a      	lsls	r2, r3, #5
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	617b      	str	r3, [r7, #20]
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbd8:	d80c      	bhi.n	800cbf4 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cbec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cbf0:	d0ec      	beq.n	800cbcc <USB_StopHost+0xb0>
 800cbf2:	e000      	b.n	800cbf6 <USB_StopHost+0xda>
        break;
 800cbf4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	613b      	str	r3, [r7, #16]
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	2b0f      	cmp	r3, #15
 800cc00:	d9c7      	bls.n	800cb92 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cc08:	461a      	mov	r2, r3
 800cc0a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f04f 32ff 	mov.w	r2, #4294967295
 800cc16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff f91e 	bl	800be5a <USB_EnableGlobalInt>

  return HAL_OK;
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cc28:	b590      	push	{r4, r7, lr}
 800cc2a:	b089      	sub	sp, #36	; 0x24
 800cc2c:	af04      	add	r7, sp, #16
 800cc2e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800cc30:	2301      	movs	r3, #1
 800cc32:	2202      	movs	r2, #2
 800cc34:	2102      	movs	r1, #2
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fcb4 	bl	800d5a4 <USBH_FindInterface>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	2bff      	cmp	r3, #255	; 0xff
 800cc44:	d002      	beq.n	800cc4c <USBH_CDC_InterfaceInit+0x24>
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d901      	bls.n	800cc50 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	e13d      	b.n	800cecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800cc50:	7bfb      	ldrb	r3, [r7, #15]
 800cc52:	4619      	mov	r1, r3
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fc89 	bl	800d56c <USBH_SelectInterface>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cc5e:	7bbb      	ldrb	r3, [r7, #14]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d001      	beq.n	800cc68 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800cc64:	2302      	movs	r3, #2
 800cc66:	e131      	b.n	800cecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800cc6e:	2050      	movs	r0, #80	; 0x50
 800cc70:	f005 fbc8 	bl	8012404 <malloc>
 800cc74:	4603      	mov	r3, r0
 800cc76:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d101      	bne.n	800cc8c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cc88:	2302      	movs	r3, #2
 800cc8a:	e11f      	b.n	800cecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800cc8c:	2250      	movs	r2, #80	; 0x50
 800cc8e:	2100      	movs	r1, #0
 800cc90:	68b8      	ldr	r0, [r7, #8]
 800cc92:	f005 fbd2 	bl	801243a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	211a      	movs	r1, #26
 800cc9c:	fb01 f303 	mul.w	r3, r1, r3
 800cca0:	4413      	add	r3, r2
 800cca2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	b25b      	sxtb	r3, r3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	da15      	bge.n	800ccda <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	211a      	movs	r1, #26
 800ccb4:	fb01 f303 	mul.w	r3, r1, r3
 800ccb8:	4413      	add	r3, r2
 800ccba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ccbe:	781a      	ldrb	r2, [r3, #0]
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	211a      	movs	r1, #26
 800ccca:	fb01 f303 	mul.w	r3, r1, r3
 800ccce:	4413      	add	r3, r2
 800ccd0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ccd4:	881a      	ldrh	r2, [r3, #0]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	785b      	ldrb	r3, [r3, #1]
 800ccde:	4619      	mov	r1, r3
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f002 f890 	bl	800ee06 <USBH_AllocPipe>
 800cce6:	4603      	mov	r3, r0
 800cce8:	461a      	mov	r2, r3
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	7819      	ldrb	r1, [r3, #0]
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	7858      	ldrb	r0, [r3, #1]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cd02:	68ba      	ldr	r2, [r7, #8]
 800cd04:	8952      	ldrh	r2, [r2, #10]
 800cd06:	9202      	str	r2, [sp, #8]
 800cd08:	2203      	movs	r2, #3
 800cd0a:	9201      	str	r2, [sp, #4]
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	4623      	mov	r3, r4
 800cd10:	4602      	mov	r2, r0
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f002 f848 	bl	800eda8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f005 fabf 	bl	80122a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800cd26:	2300      	movs	r3, #0
 800cd28:	2200      	movs	r2, #0
 800cd2a:	210a      	movs	r1, #10
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 fc39 	bl	800d5a4 <USBH_FindInterface>
 800cd32:	4603      	mov	r3, r0
 800cd34:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cd36:	7bfb      	ldrb	r3, [r7, #15]
 800cd38:	2bff      	cmp	r3, #255	; 0xff
 800cd3a:	d002      	beq.n	800cd42 <USBH_CDC_InterfaceInit+0x11a>
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d901      	bls.n	800cd46 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cd42:	2302      	movs	r3, #2
 800cd44:	e0c2      	b.n	800cecc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	687a      	ldr	r2, [r7, #4]
 800cd4a:	211a      	movs	r1, #26
 800cd4c:	fb01 f303 	mul.w	r3, r1, r3
 800cd50:	4413      	add	r3, r2
 800cd52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	b25b      	sxtb	r3, r3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	da16      	bge.n	800cd8c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cd5e:	7bfb      	ldrb	r3, [r7, #15]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	211a      	movs	r1, #26
 800cd64:	fb01 f303 	mul.w	r3, r1, r3
 800cd68:	4413      	add	r3, r2
 800cd6a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cd6e:	781a      	ldrb	r2, [r3, #0]
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cd74:	7bfb      	ldrb	r3, [r7, #15]
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	211a      	movs	r1, #26
 800cd7a:	fb01 f303 	mul.w	r3, r1, r3
 800cd7e:	4413      	add	r3, r2
 800cd80:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cd84:	881a      	ldrh	r2, [r3, #0]
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	835a      	strh	r2, [r3, #26]
 800cd8a:	e015      	b.n	800cdb8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cd8c:	7bfb      	ldrb	r3, [r7, #15]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	211a      	movs	r1, #26
 800cd92:	fb01 f303 	mul.w	r3, r1, r3
 800cd96:	4413      	add	r3, r2
 800cd98:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800cd9c:	781a      	ldrb	r2, [r3, #0]
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	211a      	movs	r1, #26
 800cda8:	fb01 f303 	mul.w	r3, r1, r3
 800cdac:	4413      	add	r3, r2
 800cdae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800cdb2:	881a      	ldrh	r2, [r3, #0]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	211a      	movs	r1, #26
 800cdbe:	fb01 f303 	mul.w	r3, r1, r3
 800cdc2:	4413      	add	r3, r2
 800cdc4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	b25b      	sxtb	r3, r3
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	da16      	bge.n	800cdfe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cdd0:	7bfb      	ldrb	r3, [r7, #15]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	211a      	movs	r1, #26
 800cdd6:	fb01 f303 	mul.w	r3, r1, r3
 800cdda:	4413      	add	r3, r2
 800cddc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800cde0:	781a      	ldrb	r2, [r3, #0]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	211a      	movs	r1, #26
 800cdec:	fb01 f303 	mul.w	r3, r1, r3
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800cdf6:	881a      	ldrh	r2, [r3, #0]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	835a      	strh	r2, [r3, #26]
 800cdfc:	e015      	b.n	800ce2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	211a      	movs	r1, #26
 800ce04:	fb01 f303 	mul.w	r3, r1, r3
 800ce08:	4413      	add	r3, r2
 800ce0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ce0e:	781a      	ldrb	r2, [r3, #0]
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	211a      	movs	r1, #26
 800ce1a:	fb01 f303 	mul.w	r3, r1, r3
 800ce1e:	4413      	add	r3, r2
 800ce20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ce24:	881a      	ldrh	r2, [r3, #0]
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	7b9b      	ldrb	r3, [r3, #14]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 ffe8 	bl	800ee06 <USBH_AllocPipe>
 800ce36:	4603      	mov	r3, r0
 800ce38:	461a      	mov	r2, r3
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	7bdb      	ldrb	r3, [r3, #15]
 800ce42:	4619      	mov	r1, r3
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f001 ffde 	bl	800ee06 <USBH_AllocPipe>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	7b59      	ldrb	r1, [r3, #13]
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	7b98      	ldrb	r0, [r3, #14]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	8b12      	ldrh	r2, [r2, #24]
 800ce6a:	9202      	str	r2, [sp, #8]
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	9201      	str	r2, [sp, #4]
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	4623      	mov	r3, r4
 800ce74:	4602      	mov	r2, r0
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f001 ff96 	bl	800eda8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	7b19      	ldrb	r1, [r3, #12]
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	7bd8      	ldrb	r0, [r3, #15]
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	8b52      	ldrh	r2, [r2, #26]
 800ce94:	9202      	str	r2, [sp, #8]
 800ce96:	2202      	movs	r2, #2
 800ce98:	9201      	str	r2, [sp, #4]
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	4623      	mov	r3, r4
 800ce9e:	4602      	mov	r2, r0
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f001 ff81 	bl	800eda8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	7b5b      	ldrb	r3, [r3, #13]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f005 f9f4 	bl	80122a4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	7b1b      	ldrb	r3, [r3, #12]
 800cec0:	2200      	movs	r2, #0
 800cec2:	4619      	mov	r1, r3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f005 f9ed 	bl	80122a4 <USBH_LL_SetToggle>

  return USBH_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3714      	adds	r7, #20
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd90      	pop	{r4, r7, pc}

0800ced4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cee2:	69db      	ldr	r3, [r3, #28]
 800cee4:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00e      	beq.n	800cf0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f001 ff76 	bl	800ede6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	4619      	mov	r1, r3
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f001 ffa1 	bl	800ee48 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	7b1b      	ldrb	r3, [r3, #12]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00e      	beq.n	800cf32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	7b1b      	ldrb	r3, [r3, #12]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f001 ff63 	bl	800ede6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	7b1b      	ldrb	r3, [r3, #12]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f001 ff8e 	bl	800ee48 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	7b5b      	ldrb	r3, [r3, #13]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00e      	beq.n	800cf58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	7b5b      	ldrb	r3, [r3, #13]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f001 ff50 	bl	800ede6 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	7b5b      	ldrb	r3, [r3, #13]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f001 ff7b 	bl	800ee48 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf5e:	69db      	ldr	r3, [r3, #28]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00b      	beq.n	800cf7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf6a:	69db      	ldr	r3, [r3, #28]
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f005 fa51 	bl	8012414 <free>
    phost->pActiveClass->pData = 0U;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf78:	2200      	movs	r2, #0
 800cf7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cf86:	b580      	push	{r7, lr}
 800cf88:	b084      	sub	sp, #16
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cf94:	69db      	ldr	r3, [r3, #28]
 800cf96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	3340      	adds	r3, #64	; 0x40
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f8b1 	bl	800d106 <GetLineCoding>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cfa8:	7afb      	ldrb	r3, [r7, #11]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d105      	bne.n	800cfba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfb4:	2102      	movs	r1, #2
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cfba:	7afb      	ldrb	r3, [r7, #11]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	3710      	adds	r7, #16
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfda:	69db      	ldr	r3, [r3, #28]
 800cfdc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cfe4:	2b04      	cmp	r3, #4
 800cfe6:	d877      	bhi.n	800d0d8 <USBH_CDC_Process+0x114>
 800cfe8:	a201      	add	r2, pc, #4	; (adr r2, 800cff0 <USBH_CDC_Process+0x2c>)
 800cfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfee:	bf00      	nop
 800cff0:	0800d005 	.word	0x0800d005
 800cff4:	0800d00b 	.word	0x0800d00b
 800cff8:	0800d03b 	.word	0x0800d03b
 800cffc:	0800d0af 	.word	0x0800d0af
 800d000:	0800d0bd 	.word	0x0800d0bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d004:	2300      	movs	r3, #0
 800d006:	73fb      	strb	r3, [r7, #15]
      break;
 800d008:	e06d      	b.n	800d0e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d00e:	4619      	mov	r1, r3
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 f897 	bl	800d144 <SetLineCoding>
 800d016:	4603      	mov	r3, r0
 800d018:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d01a:	7bbb      	ldrb	r3, [r7, #14]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d104      	bne.n	800d02a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2202      	movs	r2, #2
 800d024:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d028:	e058      	b.n	800d0dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d02a:	7bbb      	ldrb	r3, [r7, #14]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d055      	beq.n	800d0dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2204      	movs	r2, #4
 800d034:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d038:	e050      	b.n	800d0dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	3340      	adds	r3, #64	; 0x40
 800d03e:	4619      	mov	r1, r3
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 f860 	bl	800d106 <GetLineCoding>
 800d046:	4603      	mov	r3, r0
 800d048:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d04a:	7bbb      	ldrb	r3, [r7, #14]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d126      	bne.n	800d09e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2200      	movs	r2, #0
 800d054:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d062:	791b      	ldrb	r3, [r3, #4]
 800d064:	429a      	cmp	r2, r3
 800d066:	d13b      	bne.n	800d0e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d072:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d074:	429a      	cmp	r2, r3
 800d076:	d133      	bne.n	800d0e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d082:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d084:	429a      	cmp	r2, r3
 800d086:	d12b      	bne.n	800d0e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d090:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d092:	429a      	cmp	r2, r3
 800d094:	d124      	bne.n	800d0e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f984 	bl	800d3a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d09c:	e020      	b.n	800d0e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d09e:	7bbb      	ldrb	r3, [r7, #14]
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d01d      	beq.n	800d0e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	2204      	movs	r2, #4
 800d0a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800d0ac:	e018      	b.n	800d0e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 f867 	bl	800d182 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f8f8 	bl	800d2aa <CDC_ProcessReception>
      break;
 800d0ba:	e014      	b.n	800d0e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d0bc:	2100      	movs	r1, #0
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f001 f94f 	bl	800e362 <USBH_ClrFeature>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d0c8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10a      	bne.n	800d0e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800d0d6:	e005      	b.n	800d0e4 <USBH_CDC_Process+0x120>

    default:
      break;
 800d0d8:	bf00      	nop
 800d0da:	e004      	b.n	800d0e6 <USBH_CDC_Process+0x122>
      break;
 800d0dc:	bf00      	nop
 800d0de:	e002      	b.n	800d0e6 <USBH_CDC_Process+0x122>
      break;
 800d0e0:	bf00      	nop
 800d0e2:	e000      	b.n	800d0e6 <USBH_CDC_Process+0x122>
      break;
 800d0e4:	bf00      	nop

  }

  return status;
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	370c      	adds	r7, #12
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b082      	sub	sp, #8
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	22a1      	movs	r2, #161	; 0xa1
 800d114:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2221      	movs	r2, #33	; 0x21
 800d11a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2207      	movs	r2, #7
 800d12c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2207      	movs	r2, #7
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f001 faf4 	bl	800e722 <USBH_CtlReq>
 800d13a:	4603      	mov	r3, r0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2221      	movs	r2, #33	; 0x21
 800d152:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2220      	movs	r2, #32
 800d158:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2207      	movs	r2, #7
 800d16a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	2207      	movs	r2, #7
 800d170:	4619      	mov	r1, r3
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f001 fad5 	bl	800e722 <USBH_CtlReq>
 800d178:	4603      	mov	r3, r0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b086      	sub	sp, #24
 800d186:	af02      	add	r7, sp, #8
 800d188:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d190:	69db      	ldr	r3, [r3, #28]
 800d192:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d194:	2300      	movs	r3, #0
 800d196:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d002      	beq.n	800d1a8 <CDC_ProcessTransmission+0x26>
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d025      	beq.n	800d1f2 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800d1a6:	e07c      	b.n	800d2a2 <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	8b12      	ldrh	r2, [r2, #24]
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d90c      	bls.n	800d1ce <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	69d9      	ldr	r1, [r3, #28]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	8b1a      	ldrh	r2, [r3, #24]
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	7b58      	ldrb	r0, [r3, #13]
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	9300      	str	r3, [sp, #0]
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f001 fdab 	bl	800ed22 <USBH_BulkSendData>
 800d1cc:	e00c      	b.n	800d1e8 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	7b58      	ldrb	r0, [r3, #13]
 800d1dc:	2301      	movs	r3, #1
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f001 fd9d 	bl	800ed22 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800d1f0:	e057      	b.n	800d2a2 <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	7b5b      	ldrb	r3, [r3, #13]
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f005 f829 	bl	8012250 <USBH_LL_GetURBState>
 800d1fe:	4603      	mov	r3, r0
 800d200:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d202:	7afb      	ldrb	r3, [r7, #11]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d136      	bne.n	800d276 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	8b12      	ldrh	r2, [r2, #24]
 800d210:	4293      	cmp	r3, r2
 800d212:	d90e      	bls.n	800d232 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d218:	68fa      	ldr	r2, [r7, #12]
 800d21a:	8b12      	ldrh	r2, [r2, #24]
 800d21c:	1a9a      	subs	r2, r3, r2
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	69db      	ldr	r3, [r3, #28]
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	8b12      	ldrh	r2, [r2, #24]
 800d22a:	441a      	add	r2, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	61da      	str	r2, [r3, #28]
 800d230:	e002      	b.n	800d238 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2200      	movs	r2, #0
 800d236:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d004      	beq.n	800d24a <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800d248:	e006      	b.n	800d258 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d252:	6878      	ldr	r0, [r7, #4]
 800d254:	f000 f892 	bl	800d37c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2204      	movs	r2, #4
 800d25c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d26c:	2300      	movs	r3, #0
 800d26e:	2200      	movs	r2, #0
 800d270:	f001 fff8 	bl	800f264 <osMessageQueuePut>
      break;
 800d274:	e014      	b.n	800d2a0 <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800d276:	7afb      	ldrb	r3, [r7, #11]
 800d278:	2b02      	cmp	r3, #2
 800d27a:	d111      	bne.n	800d2a0 <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2201      	movs	r2, #1
 800d280:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2204      	movs	r2, #4
 800d288:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d298:	2300      	movs	r3, #0
 800d29a:	2200      	movs	r2, #0
 800d29c:	f001 ffe2 	bl	800f264 <osMessageQueuePut>
      break;
 800d2a0:	bf00      	nop
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b086      	sub	sp, #24
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800d2c6:	2b03      	cmp	r3, #3
 800d2c8:	d002      	beq.n	800d2d0 <CDC_ProcessReception+0x26>
 800d2ca:	2b04      	cmp	r3, #4
 800d2cc:	d00e      	beq.n	800d2ec <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d2ce:	e051      	b.n	800d374 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	6a19      	ldr	r1, [r3, #32]
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	8b5a      	ldrh	r2, [r3, #26]
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	7b1b      	ldrb	r3, [r3, #12]
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f001 fd45 	bl	800ed6c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	2204      	movs	r2, #4
 800d2e6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800d2ea:	e043      	b.n	800d374 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	7b1b      	ldrb	r3, [r3, #12]
 800d2f0:	4619      	mov	r1, r3
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f004 ffac 	bl	8012250 <USBH_LL_GetURBState>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d2fc:	7cfb      	ldrb	r3, [r7, #19]
 800d2fe:	2b01      	cmp	r3, #1
 800d300:	d137      	bne.n	800d372 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	7b1b      	ldrb	r3, [r3, #12]
 800d306:	4619      	mov	r1, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f004 ff0f 	bl	801212c <USBH_LL_GetLastXferSize>
 800d30e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	429a      	cmp	r2, r3
 800d318:	d016      	beq.n	800d348 <CDC_ProcessReception+0x9e>
 800d31a:	697b      	ldr	r3, [r7, #20]
 800d31c:	8b5b      	ldrh	r3, [r3, #26]
 800d31e:	461a      	mov	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	4293      	cmp	r3, r2
 800d324:	d910      	bls.n	800d348 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	1ad2      	subs	r2, r2, r3
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	6a1a      	ldr	r2, [r3, #32]
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	441a      	add	r2, r3
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	2203      	movs	r2, #3
 800d342:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800d346:	e006      	b.n	800d356 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	2200      	movs	r2, #0
 800d34c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	f000 f81d 	bl	800d390 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2204      	movs	r2, #4
 800d35a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d36a:	2300      	movs	r3, #0
 800d36c:	2200      	movs	r2, #0
 800d36e:	f001 ff79 	bl	800f264 <osMessageQueuePut>
      break;
 800d372:	bf00      	nop
  }
}
 800d374:	bf00      	nop
 800d376:	3718      	adds	r7, #24
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d384:	bf00      	nop
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d398:	bf00      	nop
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d3cc:	2302      	movs	r3, #2
 800d3ce:	e044      	b.n	800d45a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	79fa      	ldrb	r2, [r7, #7]
 800d3d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f000 f841 	bl	800d470 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d003      	beq.n	800d41c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800d41c:	2200      	movs	r2, #0
 800d41e:	2104      	movs	r1, #4
 800d420:	2010      	movs	r0, #16
 800d422:	f001 fe99 	bl	800f158 <osMessageQueueNew>
 800d426:	4602      	mov	r2, r0
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800d42e:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <USBH_Init+0xac>)
 800d430:	4a0d      	ldr	r2, [pc, #52]	; (800d468 <USBH_Init+0xb0>)
 800d432:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800d434:	4b0b      	ldr	r3, [pc, #44]	; (800d464 <USBH_Init+0xac>)
 800d436:	2280      	movs	r2, #128	; 0x80
 800d438:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800d43a:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <USBH_Init+0xac>)
 800d43c:	2218      	movs	r2, #24
 800d43e:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800d440:	4a08      	ldr	r2, [pc, #32]	; (800d464 <USBH_Init+0xac>)
 800d442:	68f9      	ldr	r1, [r7, #12]
 800d444:	4809      	ldr	r0, [pc, #36]	; (800d46c <USBH_Init+0xb4>)
 800d446:	f001 fdb3 	bl	800efb0 <osThreadNew>
 800d44a:	4602      	mov	r2, r0
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f004 fdb8 	bl	8011fc8 <USBH_LL_Init>

  return USBH_OK;
 800d458:	2300      	movs	r3, #0
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}
 800d462:	bf00      	nop
 800d464:	20005334 	.word	0x20005334
 800d468:	08012678 	.word	0x08012678
 800d46c:	0800e0d9 	.word	0x0800e0d9

0800d470 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d47c:	2300      	movs	r3, #0
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	e009      	b.n	800d496 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	33e0      	adds	r3, #224	; 0xe0
 800d488:	009b      	lsls	r3, r3, #2
 800d48a:	4413      	add	r3, r2
 800d48c:	2200      	movs	r2, #0
 800d48e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	3301      	adds	r3, #1
 800d494:	60fb      	str	r3, [r7, #12]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2b0e      	cmp	r3, #14
 800d49a:	d9f2      	bls.n	800d482 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d49c:	2300      	movs	r3, #0
 800d49e:	60fb      	str	r3, [r7, #12]
 800d4a0:	e009      	b.n	800d4b6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3301      	adds	r3, #1
 800d4b4:	60fb      	str	r3, [r7, #12]
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4bc:	d3f1      	bcc.n	800d4a2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2240      	movs	r2, #64	; 0x40
 800d4e2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2200      	movs	r2, #0
 800d506:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d50a:	2300      	movs	r3, #0
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3714      	adds	r7, #20
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
 800d520:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d016      	beq.n	800d55a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10e      	bne.n	800d554 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d53c:	1c59      	adds	r1, r3, #1
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	33de      	adds	r3, #222	; 0xde
 800d548:	6839      	ldr	r1, [r7, #0]
 800d54a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	73fb      	strb	r3, [r7, #15]
 800d552:	e004      	b.n	800d55e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d554:	2302      	movs	r3, #2
 800d556:	73fb      	strb	r3, [r7, #15]
 800d558:	e001      	b.n	800d55e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d55a:	2302      	movs	r3, #2
 800d55c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr

0800d56c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b085      	sub	sp, #20
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d582:	78fa      	ldrb	r2, [r7, #3]
 800d584:	429a      	cmp	r2, r3
 800d586:	d204      	bcs.n	800d592 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	78fa      	ldrb	r2, [r7, #3]
 800d58c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d590:	e001      	b.n	800d596 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d592:	2302      	movs	r3, #2
 800d594:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d596:	7bfb      	ldrb	r3, [r7, #15]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3714      	adds	r7, #20
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b087      	sub	sp, #28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	4608      	mov	r0, r1
 800d5ae:	4611      	mov	r1, r2
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	70fb      	strb	r3, [r7, #3]
 800d5b6:	460b      	mov	r3, r1
 800d5b8:	70bb      	strb	r3, [r7, #2]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d5cc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d5ce:	e025      	b.n	800d61c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d5d0:	7dfb      	ldrb	r3, [r7, #23]
 800d5d2:	221a      	movs	r2, #26
 800d5d4:	fb02 f303 	mul.w	r3, r2, r3
 800d5d8:	3308      	adds	r3, #8
 800d5da:	68fa      	ldr	r2, [r7, #12]
 800d5dc:	4413      	add	r3, r2
 800d5de:	3302      	adds	r3, #2
 800d5e0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	795b      	ldrb	r3, [r3, #5]
 800d5e6:	78fa      	ldrb	r2, [r7, #3]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d002      	beq.n	800d5f2 <USBH_FindInterface+0x4e>
 800d5ec:	78fb      	ldrb	r3, [r7, #3]
 800d5ee:	2bff      	cmp	r3, #255	; 0xff
 800d5f0:	d111      	bne.n	800d616 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d5f6:	78ba      	ldrb	r2, [r7, #2]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d002      	beq.n	800d602 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d5fc:	78bb      	ldrb	r3, [r7, #2]
 800d5fe:	2bff      	cmp	r3, #255	; 0xff
 800d600:	d109      	bne.n	800d616 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d606:	787a      	ldrb	r2, [r7, #1]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d002      	beq.n	800d612 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d60c:	787b      	ldrb	r3, [r7, #1]
 800d60e:	2bff      	cmp	r3, #255	; 0xff
 800d610:	d101      	bne.n	800d616 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	e006      	b.n	800d624 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d616:	7dfb      	ldrb	r3, [r7, #23]
 800d618:	3301      	adds	r3, #1
 800d61a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d61c:	7dfb      	ldrb	r3, [r7, #23]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d9d6      	bls.n	800d5d0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d622:	23ff      	movs	r3, #255	; 0xff
}
 800d624:	4618      	mov	r0, r3
 800d626:	371c      	adds	r7, #28
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f004 fd01 	bl	8012040 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d63e:	2101      	movs	r1, #1
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f004 fe18 	bl	8012276 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b088      	sub	sp, #32
 800d654:	af04      	add	r7, sp, #16
 800d656:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d658:	2302      	movs	r3, #2
 800d65a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d65c:	2300      	movs	r3, #0
 800d65e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d666:	b2db      	uxtb	r3, r3
 800d668:	2b01      	cmp	r3, #1
 800d66a:	d102      	bne.n	800d672 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2203      	movs	r2, #3
 800d670:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	b2db      	uxtb	r3, r3
 800d678:	2b0b      	cmp	r3, #11
 800d67a:	f200 823c 	bhi.w	800daf6 <USBH_Process+0x4a6>
 800d67e:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <USBH_Process+0x34>)
 800d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d684:	0800d6b5 	.word	0x0800d6b5
 800d688:	0800d703 	.word	0x0800d703
 800d68c:	0800d787 	.word	0x0800d787
 800d690:	0800da75 	.word	0x0800da75
 800d694:	0800daf7 	.word	0x0800daf7
 800d698:	0800d847 	.word	0x0800d847
 800d69c:	0800d9ff 	.word	0x0800d9ff
 800d6a0:	0800d899 	.word	0x0800d899
 800d6a4:	0800d8d5 	.word	0x0800d8d5
 800d6a8:	0800d90f 	.word	0x0800d90f
 800d6ac:	0800d957 	.word	0x0800d957
 800d6b0:	0800da5d 	.word	0x0800da5d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f000 821c 	beq.w	800dafa <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d6c8:	20c8      	movs	r0, #200	; 0xc8
 800d6ca:	f004 fe1e 	bl	801230a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f004 fd11 	bl	80120f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f001 fdb2 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d700:	e1fb      	b.n	800dafa <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d107      	bne.n	800d71c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2200      	movs	r2, #0
 800d710:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2202      	movs	r2, #2
 800d718:	701a      	strb	r2, [r3, #0]
 800d71a:	e025      	b.n	800d768 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d726:	d914      	bls.n	800d752 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d72e:	3301      	adds	r3, #1
 800d730:	b2da      	uxtb	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d903      	bls.n	800d74a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	220d      	movs	r2, #13
 800d746:	701a      	strb	r2, [r3, #0]
 800d748:	e00e      	b.n	800d768 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2200      	movs	r2, #0
 800d74e:	701a      	strb	r2, [r3, #0]
 800d750:	e00a      	b.n	800d768 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d758:	f103 020a 	add.w	r2, r3, #10
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d762:	200a      	movs	r0, #10
 800d764:	f004 fdd1 	bl	801230a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d77c:	2300      	movs	r3, #0
 800d77e:	2200      	movs	r2, #0
 800d780:	f001 fd70 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      break;
 800d784:	e1c0      	b.n	800db08 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d005      	beq.n	800d79c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d796:	2104      	movs	r1, #4
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d79c:	2064      	movs	r0, #100	; 0x64
 800d79e:	f004 fdb4 	bl	801230a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f004 fc82 	bl	80120ac <USBH_LL_GetSpeed>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2205      	movs	r2, #5
 800d7b6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f001 fb23 	bl	800ee06 <USBH_AllocPipe>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d7c8:	2180      	movs	r1, #128	; 0x80
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f001 fb1b 	bl	800ee06 <USBH_AllocPipe>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7919      	ldrb	r1, [r3, #4]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d7ec:	b292      	uxth	r2, r2
 800d7ee:	9202      	str	r2, [sp, #8]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	9201      	str	r2, [sp, #4]
 800d7f4:	9300      	str	r3, [sp, #0]
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2280      	movs	r2, #128	; 0x80
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f001 fad4 	bl	800eda8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	7959      	ldrb	r1, [r3, #5]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d814:	b292      	uxth	r2, r2
 800d816:	9202      	str	r2, [sp, #8]
 800d818:	2200      	movs	r2, #0
 800d81a:	9201      	str	r2, [sp, #4]
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	4603      	mov	r3, r0
 800d820:	2200      	movs	r2, #0
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f001 fac0 	bl	800eda8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d83c:	2300      	movs	r3, #0
 800d83e:	2200      	movs	r2, #0
 800d840:	f001 fd10 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      break;
 800d844:	e160      	b.n	800db08 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f964 	bl	800db14 <USBH_HandleEnum>
 800d84c:	4603      	mov	r3, r0
 800d84e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b00      	cmp	r3, #0
 800d856:	f040 8152 	bne.w	800dafe <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d103      	bne.n	800d874 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2208      	movs	r2, #8
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	e002      	b.n	800d87a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2207      	movs	r2, #7
 800d878:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2205      	movs	r2, #5
 800d87e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d88e:	2300      	movs	r3, #0
 800d890:	2200      	movs	r2, #0
 800d892:	f001 fce7 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d896:	e132      	b.n	800dafe <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f000 812f 	beq.w	800db02 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d8aa:	2101      	movs	r1, #1
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2208      	movs	r2, #8
 800d8b4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2205      	movs	r2, #5
 800d8ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f001 fcc9 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800d8d2:	e116      	b.n	800db02 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	4619      	mov	r1, r3
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fcf8 	bl	800e2d4 <USBH_SetCfg>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d102      	bne.n	800d8f0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2209      	movs	r2, #9
 800d8ee:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d904:	2300      	movs	r3, #0
 800d906:	2200      	movs	r2, #0
 800d908:	f001 fcac 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      break;
 800d90c:	e0fc      	b.n	800db08 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d914:	f003 0320 	and.w	r3, r3, #32
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d00a      	beq.n	800d932 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d91c:	2101      	movs	r1, #1
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fcfb 	bl	800e31a <USBH_SetFeature>
 800d924:	4603      	mov	r3, r0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d106      	bne.n	800d938 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	220a      	movs	r2, #10
 800d92e:	701a      	strb	r2, [r3, #0]
 800d930:	e002      	b.n	800d938 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	220a      	movs	r2, #10
 800d936:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d94c:	2300      	movs	r3, #0
 800d94e:	2200      	movs	r2, #0
 800d950:	f001 fc88 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      break;
 800d954:	e0d8      	b.n	800db08 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d03f      	beq.n	800d9e0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d968:	2300      	movs	r3, #0
 800d96a:	73fb      	strb	r3, [r7, #15]
 800d96c:	e016      	b.n	800d99c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d96e:	7bfa      	ldrb	r2, [r7, #15]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	32de      	adds	r2, #222	; 0xde
 800d974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d978:	791a      	ldrb	r2, [r3, #4]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d980:	429a      	cmp	r2, r3
 800d982:	d108      	bne.n	800d996 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d984:	7bfa      	ldrb	r2, [r7, #15]
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	32de      	adds	r2, #222	; 0xde
 800d98a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d994:	e005      	b.n	800d9a2 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d996:	7bfb      	ldrb	r3, [r7, #15]
 800d998:	3301      	adds	r3, #1
 800d99a:	73fb      	strb	r3, [r7, #15]
 800d99c:	7bfb      	ldrb	r3, [r7, #15]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d0e5      	beq.n	800d96e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d016      	beq.n	800d9da <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	4798      	blx	r3
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d109      	bne.n	800d9d2 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2206      	movs	r2, #6
 800d9c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d9ca:	2103      	movs	r1, #3
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	4798      	blx	r3
 800d9d0:	e006      	b.n	800d9e0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	220d      	movs	r2, #13
 800d9d6:	701a      	strb	r2, [r3, #0]
 800d9d8:	e002      	b.n	800d9e0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	220d      	movs	r2, #13
 800d9de:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2205      	movs	r2, #5
 800d9e4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f001 fc34 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      break;
 800d9fc:	e084      	b.n	800db08 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da04:	2b00      	cmp	r3, #0
 800da06:	d017      	beq.n	800da38 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	6878      	ldr	r0, [r7, #4]
 800da12:	4798      	blx	r3
 800da14:	4603      	mov	r3, r0
 800da16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800da18:	7bbb      	ldrb	r3, [r7, #14]
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d103      	bne.n	800da28 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	220b      	movs	r2, #11
 800da24:	701a      	strb	r2, [r3, #0]
 800da26:	e00a      	b.n	800da3e <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800da28:	7bbb      	ldrb	r3, [r7, #14]
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	2b02      	cmp	r3, #2
 800da2e:	d106      	bne.n	800da3e <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	220d      	movs	r2, #13
 800da34:	701a      	strb	r2, [r3, #0]
 800da36:	e002      	b.n	800da3e <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	220d      	movs	r2, #13
 800da3c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2205      	movs	r2, #5
 800da42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da52:	2300      	movs	r3, #0
 800da54:	2200      	movs	r2, #0
 800da56:	f001 fc05 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      break;
 800da5a:	e055      	b.n	800db08 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da62:	2b00      	cmp	r3, #0
 800da64:	d04f      	beq.n	800db06 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da6c:	695b      	ldr	r3, [r3, #20]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	4798      	blx	r3
      }
      break;
 800da72:	e048      	b.n	800db06 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2200      	movs	r2, #0
 800da78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f7ff fcf7 	bl	800d470 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d009      	beq.n	800daa0 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2200      	movs	r2, #0
 800da9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d005      	beq.n	800dab6 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dab0:	2105      	movs	r1, #5
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d107      	bne.n	800dad2 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f7ff fdb0 	bl	800d630 <USBH_Start>
 800dad0:	e002      	b.n	800dad8 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f004 fab4 	bl	8012040 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2201      	movs	r2, #1
 800dadc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800daec:	2300      	movs	r3, #0
 800daee:	2200      	movs	r2, #0
 800daf0:	f001 fbb8 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      break;
 800daf4:	e008      	b.n	800db08 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800daf6:	bf00      	nop
 800daf8:	e006      	b.n	800db08 <USBH_Process+0x4b8>
      break;
 800dafa:	bf00      	nop
 800dafc:	e004      	b.n	800db08 <USBH_Process+0x4b8>
      break;
 800dafe:	bf00      	nop
 800db00:	e002      	b.n	800db08 <USBH_Process+0x4b8>
    break;
 800db02:	bf00      	nop
 800db04:	e000      	b.n	800db08 <USBH_Process+0x4b8>
      break;
 800db06:	bf00      	nop
  }
  return USBH_OK;
 800db08:	2300      	movs	r3, #0
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop

0800db14 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b088      	sub	sp, #32
 800db18:	af04      	add	r7, sp, #16
 800db1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800db1c:	2301      	movs	r3, #1
 800db1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800db20:	2301      	movs	r3, #1
 800db22:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	785b      	ldrb	r3, [r3, #1]
 800db28:	2b07      	cmp	r3, #7
 800db2a:	f200 8208 	bhi.w	800df3e <USBH_HandleEnum+0x42a>
 800db2e:	a201      	add	r2, pc, #4	; (adr r2, 800db34 <USBH_HandleEnum+0x20>)
 800db30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db34:	0800db55 	.word	0x0800db55
 800db38:	0800dc13 	.word	0x0800dc13
 800db3c:	0800dc7d 	.word	0x0800dc7d
 800db40:	0800dd0b 	.word	0x0800dd0b
 800db44:	0800dd75 	.word	0x0800dd75
 800db48:	0800dde5 	.word	0x0800dde5
 800db4c:	0800de81 	.word	0x0800de81
 800db50:	0800deff 	.word	0x0800deff
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800db54:	2108      	movs	r1, #8
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 faec 	bl	800e134 <USBH_Get_DevDesc>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800db60:	7bbb      	ldrb	r3, [r7, #14]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d130      	bne.n	800dbc8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2201      	movs	r2, #1
 800db74:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	7919      	ldrb	r1, [r3, #4]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800db8a:	b292      	uxth	r2, r2
 800db8c:	9202      	str	r2, [sp, #8]
 800db8e:	2200      	movs	r2, #0
 800db90:	9201      	str	r2, [sp, #4]
 800db92:	9300      	str	r3, [sp, #0]
 800db94:	4603      	mov	r3, r0
 800db96:	2280      	movs	r2, #128	; 0x80
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f001 f905 	bl	800eda8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	7959      	ldrb	r1, [r3, #5]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dbb2:	b292      	uxth	r2, r2
 800dbb4:	9202      	str	r2, [sp, #8]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	9201      	str	r2, [sp, #4]
 800dbba:	9300      	str	r3, [sp, #0]
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f001 f8f1 	bl	800eda8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dbc6:	e1bc      	b.n	800df42 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
 800dbca:	2b03      	cmp	r3, #3
 800dbcc:	f040 81b9 	bne.w	800df42 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d903      	bls.n	800dbf2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	220d      	movs	r2, #13
 800dbee:	701a      	strb	r2, [r3, #0]
      break;
 800dbf0:	e1a7      	b.n	800df42 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	795b      	ldrb	r3, [r3, #5]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f001 f925 	bl	800ee48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	791b      	ldrb	r3, [r3, #4]
 800dc02:	4619      	mov	r1, r3
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f001 f91f 	bl	800ee48 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	701a      	strb	r2, [r3, #0]
      break;
 800dc10:	e197      	b.n	800df42 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800dc12:	2112      	movs	r1, #18
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fa8d 	bl	800e134 <USBH_Get_DevDesc>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dc1e:	7bbb      	ldrb	r3, [r7, #14]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d103      	bne.n	800dc2c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2202      	movs	r2, #2
 800dc28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dc2a:	e18c      	b.n	800df46 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	f040 8189 	bne.w	800df46 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	b2da      	uxtb	r2, r3
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dc4a:	2b03      	cmp	r3, #3
 800dc4c:	d903      	bls.n	800dc56 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	220d      	movs	r2, #13
 800dc52:	701a      	strb	r2, [r3, #0]
      break;
 800dc54:	e177      	b.n	800df46 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	795b      	ldrb	r3, [r3, #5]
 800dc5a:	4619      	mov	r1, r3
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f001 f8f3 	bl	800ee48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	791b      	ldrb	r3, [r3, #4]
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f001 f8ed 	bl	800ee48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2200      	movs	r2, #0
 800dc72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	701a      	strb	r2, [r3, #0]
      break;
 800dc7a:	e164      	b.n	800df46 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800dc7c:	2101      	movs	r1, #1
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f000 fb04 	bl	800e28c <USBH_SetAddress>
 800dc84:	4603      	mov	r3, r0
 800dc86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dc88:	7bbb      	ldrb	r3, [r7, #14]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d132      	bne.n	800dcf4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800dc8e:	2002      	movs	r0, #2
 800dc90:	f004 fb3b 	bl	801230a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2201      	movs	r2, #1
 800dc98:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2203      	movs	r2, #3
 800dca0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	7919      	ldrb	r1, [r3, #4]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dcb6:	b292      	uxth	r2, r2
 800dcb8:	9202      	str	r2, [sp, #8]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	9201      	str	r2, [sp, #4]
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2280      	movs	r2, #128	; 0x80
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f001 f86f 	bl	800eda8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	7959      	ldrb	r1, [r3, #5]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dcde:	b292      	uxth	r2, r2
 800dce0:	9202      	str	r2, [sp, #8]
 800dce2:	2200      	movs	r2, #0
 800dce4:	9201      	str	r2, [sp, #4]
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	4603      	mov	r3, r0
 800dcea:	2200      	movs	r2, #0
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f001 f85b 	bl	800eda8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dcf2:	e12a      	b.n	800df4a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dcf4:	7bbb      	ldrb	r3, [r7, #14]
 800dcf6:	2b03      	cmp	r3, #3
 800dcf8:	f040 8127 	bne.w	800df4a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	220d      	movs	r2, #13
 800dd00:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	2200      	movs	r2, #0
 800dd06:	705a      	strb	r2, [r3, #1]
      break;
 800dd08:	e11f      	b.n	800df4a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800dd0a:	2109      	movs	r1, #9
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fa39 	bl	800e184 <USBH_Get_CfgDesc>
 800dd12:	4603      	mov	r3, r0
 800dd14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dd16:	7bbb      	ldrb	r3, [r7, #14]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d103      	bne.n	800dd24 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2204      	movs	r2, #4
 800dd20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dd22:	e114      	b.n	800df4e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
 800dd26:	2b03      	cmp	r3, #3
 800dd28:	f040 8111 	bne.w	800df4e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dd32:	3301      	adds	r3, #1
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dd42:	2b03      	cmp	r3, #3
 800dd44:	d903      	bls.n	800dd4e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	220d      	movs	r2, #13
 800dd4a:	701a      	strb	r2, [r3, #0]
      break;
 800dd4c:	e0ff      	b.n	800df4e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	795b      	ldrb	r3, [r3, #5]
 800dd52:	4619      	mov	r1, r3
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f001 f877 	bl	800ee48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	791b      	ldrb	r3, [r3, #4]
 800dd5e:	4619      	mov	r1, r3
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f001 f871 	bl	800ee48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	701a      	strb	r2, [r3, #0]
      break;
 800dd72:	e0ec      	b.n	800df4e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 fa01 	bl	800e184 <USBH_Get_CfgDesc>
 800dd82:	4603      	mov	r3, r0
 800dd84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dd86:	7bbb      	ldrb	r3, [r7, #14]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d103      	bne.n	800dd94 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2205      	movs	r2, #5
 800dd90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dd92:	e0de      	b.n	800df52 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd94:	7bbb      	ldrb	r3, [r7, #14]
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	f040 80db 	bne.w	800df52 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800dda2:	3301      	adds	r3, #1
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	d903      	bls.n	800ddbe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	220d      	movs	r2, #13
 800ddba:	701a      	strb	r2, [r3, #0]
      break;
 800ddbc:	e0c9      	b.n	800df52 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	795b      	ldrb	r3, [r3, #5]
 800ddc2:	4619      	mov	r1, r3
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f001 f83f 	bl	800ee48 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	791b      	ldrb	r3, [r3, #4]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f001 f839 	bl	800ee48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	701a      	strb	r2, [r3, #0]
      break;
 800dde2:	e0b6      	b.n	800df52 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d036      	beq.n	800de5c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ddfa:	23ff      	movs	r3, #255	; 0xff
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f9e5 	bl	800e1cc <USBH_Get_StringDesc>
 800de02:	4603      	mov	r3, r0
 800de04:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800de06:	7bbb      	ldrb	r3, [r7, #14]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d111      	bne.n	800de30 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2206      	movs	r2, #6
 800de10:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2205      	movs	r2, #5
 800de16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de26:	2300      	movs	r3, #0
 800de28:	2200      	movs	r2, #0
 800de2a:	f001 fa1b 	bl	800f264 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800de2e:	e092      	b.n	800df56 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800de30:	7bbb      	ldrb	r3, [r7, #14]
 800de32:	2b03      	cmp	r3, #3
 800de34:	f040 808f 	bne.w	800df56 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2206      	movs	r2, #6
 800de3c:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2205      	movs	r2, #5
 800de42:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de52:	2300      	movs	r3, #0
 800de54:	2200      	movs	r2, #0
 800de56:	f001 fa05 	bl	800f264 <osMessageQueuePut>
      break;
 800de5a:	e07c      	b.n	800df56 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2206      	movs	r2, #6
 800de60:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2205      	movs	r2, #5
 800de66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de76:	2300      	movs	r3, #0
 800de78:	2200      	movs	r2, #0
 800de7a:	f001 f9f3 	bl	800f264 <osMessageQueuePut>
      break;
 800de7e:	e06a      	b.n	800df56 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800de86:	2b00      	cmp	r3, #0
 800de88:	d027      	beq.n	800deda <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800de96:	23ff      	movs	r3, #255	; 0xff
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 f997 	bl	800e1cc <USBH_Get_StringDesc>
 800de9e:	4603      	mov	r3, r0
 800dea0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dea2:	7bbb      	ldrb	r3, [r7, #14]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d103      	bne.n	800deb0 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2207      	movs	r2, #7
 800deac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800deae:	e054      	b.n	800df5a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800deb0:	7bbb      	ldrb	r3, [r7, #14]
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d151      	bne.n	800df5a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2207      	movs	r2, #7
 800deba:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2205      	movs	r2, #5
 800dec0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ded0:	2300      	movs	r3, #0
 800ded2:	2200      	movs	r2, #0
 800ded4:	f001 f9c6 	bl	800f264 <osMessageQueuePut>
      break;
 800ded8:	e03f      	b.n	800df5a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2207      	movs	r2, #7
 800dede:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2205      	movs	r2, #5
 800dee4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800def4:	2300      	movs	r3, #0
 800def6:	2200      	movs	r2, #0
 800def8:	f001 f9b4 	bl	800f264 <osMessageQueuePut>
      break;
 800defc:	e02d      	b.n	800df5a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800df04:	2b00      	cmp	r3, #0
 800df06:	d017      	beq.n	800df38 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800df14:	23ff      	movs	r3, #255	; 0xff
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 f958 	bl	800e1cc <USBH_Get_StringDesc>
 800df1c:	4603      	mov	r3, r0
 800df1e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800df20:	7bbb      	ldrb	r3, [r7, #14]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d102      	bne.n	800df2c <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800df26:	2300      	movs	r3, #0
 800df28:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800df2a:	e018      	b.n	800df5e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800df2c:	7bbb      	ldrb	r3, [r7, #14]
 800df2e:	2b03      	cmp	r3, #3
 800df30:	d115      	bne.n	800df5e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	73fb      	strb	r3, [r7, #15]
      break;
 800df36:	e012      	b.n	800df5e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800df38:	2300      	movs	r3, #0
 800df3a:	73fb      	strb	r3, [r7, #15]
      break;
 800df3c:	e00f      	b.n	800df5e <USBH_HandleEnum+0x44a>

    default:
      break;
 800df3e:	bf00      	nop
 800df40:	e00e      	b.n	800df60 <USBH_HandleEnum+0x44c>
      break;
 800df42:	bf00      	nop
 800df44:	e00c      	b.n	800df60 <USBH_HandleEnum+0x44c>
      break;
 800df46:	bf00      	nop
 800df48:	e00a      	b.n	800df60 <USBH_HandleEnum+0x44c>
      break;
 800df4a:	bf00      	nop
 800df4c:	e008      	b.n	800df60 <USBH_HandleEnum+0x44c>
      break;
 800df4e:	bf00      	nop
 800df50:	e006      	b.n	800df60 <USBH_HandleEnum+0x44c>
      break;
 800df52:	bf00      	nop
 800df54:	e004      	b.n	800df60 <USBH_HandleEnum+0x44c>
      break;
 800df56:	bf00      	nop
 800df58:	e002      	b.n	800df60 <USBH_HandleEnum+0x44c>
      break;
 800df5a:	bf00      	nop
 800df5c:	e000      	b.n	800df60 <USBH_HandleEnum+0x44c>
      break;
 800df5e:	bf00      	nop
  }
  return Status;
 800df60:	7bfb      	ldrb	r3, [r7, #15]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop

0800df6c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800df7e:	bf00      	nop
 800df80:	370c      	adds	r7, #12
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	b082      	sub	sp, #8
 800df8e:	af00      	add	r7, sp, #0
 800df90:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800df98:	1c5a      	adds	r2, r3, #1
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 f804 	bl	800dfae <USBH_HandleSof>
}
 800dfa6:	bf00      	nop
 800dfa8:	3708      	adds	r7, #8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b082      	sub	sp, #8
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	781b      	ldrb	r3, [r3, #0]
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b0b      	cmp	r3, #11
 800dfbe:	d10a      	bne.n	800dfd6 <USBH_HandleSof+0x28>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d005      	beq.n	800dfd6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dfd0:	699b      	ldr	r3, [r3, #24]
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	4798      	blx	r3
  }
}
 800dfd6:	bf00      	nop
 800dfd8:	3708      	adds	r7, #8
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b082      	sub	sp, #8
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2201      	movs	r2, #1
 800dfea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2201      	movs	r2, #1
 800dff2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e002:	2300      	movs	r3, #0
 800e004:	2200      	movs	r2, #0
 800e006:	f001 f92d 	bl	800f264 <osMessageQueuePut>
#endif
#endif

  return;
 800e00a:	bf00      	nop
}
 800e00c:	3708      	adds	r7, #8
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800e012:	b480      	push	{r7}
 800e014:	b083      	sub	sp, #12
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800e022:	bf00      	nop
}
 800e024:	370c      	adds	r7, #12
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2201      	movs	r2, #1
 800e03a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2200      	movs	r2, #0
 800e04a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2201      	movs	r2, #1
 800e052:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e062:	2300      	movs	r3, #0
 800e064:	2200      	movs	r2, #0
 800e066:	f001 f8fd 	bl	800f264 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f003 ffee 	bl	8012076 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	791b      	ldrb	r3, [r3, #4]
 800e09e:	4619      	mov	r1, r3
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fed1 	bl	800ee48 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	795b      	ldrb	r3, [r3, #5]
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 fecb 	bl	800ee48 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f001 f8cb 	bl	800f264 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	f001 f92b 	bl	800f34c <osMessageQueueGet>
 800e0f6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1f0      	bne.n	800e0e0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7ff faa6 	bl	800d650 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800e104:	e7ec      	b.n	800e0e0 <USBH_Process_OS+0x8>

0800e106 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b082      	sub	sp, #8
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2201      	movs	r2, #1
 800e112:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e122:	2300      	movs	r3, #0
 800e124:	2200      	movs	r2, #0
 800e126:	f001 f89d 	bl	800f264 <osMessageQueuePut>
#endif

  return USBH_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af02      	add	r7, sp, #8
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	460b      	mov	r3, r1
 800e13e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e146:	78fb      	ldrb	r3, [r7, #3]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	4613      	mov	r3, r2
 800e14e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e152:	2100      	movs	r1, #0
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f864 	bl	800e222 <USBH_GetDescriptor>
 800e15a:	4603      	mov	r3, r0
 800e15c:	73fb      	strb	r3, [r7, #15]
 800e15e:	7bfb      	ldrb	r3, [r7, #15]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10a      	bne.n	800e17a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	f203 3026 	addw	r0, r3, #806	; 0x326
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e170:	78fa      	ldrb	r2, [r7, #3]
 800e172:	b292      	uxth	r2, r2
 800e174:	4619      	mov	r1, r3
 800e176:	f000 f918 	bl	800e3aa <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800e17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3710      	adds	r7, #16
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800e184:	b580      	push	{r7, lr}
 800e186:	b086      	sub	sp, #24
 800e188:	af02      	add	r7, sp, #8
 800e18a:	6078      	str	r0, [r7, #4]
 800e18c:	460b      	mov	r3, r1
 800e18e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	331c      	adds	r3, #28
 800e194:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800e196:	887b      	ldrh	r3, [r7, #2]
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 f83d 	bl	800e222 <USBH_GetDescriptor>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	72fb      	strb	r3, [r7, #11]
 800e1ac:	7afb      	ldrb	r3, [r7, #11]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d107      	bne.n	800e1c2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e1b8:	887a      	ldrh	r2, [r7, #2]
 800e1ba:	68f9      	ldr	r1, [r7, #12]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f000 f964 	bl	800e48a <USBH_ParseCfgDesc>
  }

  return status;
 800e1c2:	7afb      	ldrb	r3, [r7, #11]
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b088      	sub	sp, #32
 800e1d0:	af02      	add	r7, sp, #8
 800e1d2:	60f8      	str	r0, [r7, #12]
 800e1d4:	607a      	str	r2, [r7, #4]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	460b      	mov	r3, r1
 800e1da:	72fb      	strb	r3, [r7, #11]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800e1e0:	7afb      	ldrb	r3, [r7, #11]
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e1e8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800e1f0:	893b      	ldrh	r3, [r7, #8]
 800e1f2:	9300      	str	r3, [sp, #0]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	2100      	movs	r1, #0
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f000 f812 	bl	800e222 <USBH_GetDescriptor>
 800e1fe:	4603      	mov	r3, r0
 800e200:	75fb      	strb	r3, [r7, #23]
 800e202:	7dfb      	ldrb	r3, [r7, #23]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d107      	bne.n	800e218 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800e20e:	893a      	ldrh	r2, [r7, #8]
 800e210:	6879      	ldr	r1, [r7, #4]
 800e212:	4618      	mov	r0, r3
 800e214:	f000 fa37 	bl	800e686 <USBH_ParseStringDesc>
  }

  return status;
 800e218:	7dfb      	ldrb	r3, [r7, #23]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3718      	adds	r7, #24
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800e222:	b580      	push	{r7, lr}
 800e224:	b084      	sub	sp, #16
 800e226:	af00      	add	r7, sp, #0
 800e228:	60f8      	str	r0, [r7, #12]
 800e22a:	607b      	str	r3, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	72fb      	strb	r3, [r7, #11]
 800e230:	4613      	mov	r3, r2
 800e232:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	789b      	ldrb	r3, [r3, #2]
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d11c      	bne.n	800e276 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e23c:	7afb      	ldrb	r3, [r7, #11]
 800e23e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e242:	b2da      	uxtb	r2, r3
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2206      	movs	r2, #6
 800e24c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	893a      	ldrh	r2, [r7, #8]
 800e252:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e254:	893b      	ldrh	r3, [r7, #8]
 800e256:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e25a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e25e:	d104      	bne.n	800e26a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f240 4209 	movw	r2, #1033	; 0x409
 800e266:	829a      	strh	r2, [r3, #20]
 800e268:	e002      	b.n	800e270 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	2200      	movs	r2, #0
 800e26e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	8b3a      	ldrh	r2, [r7, #24]
 800e274:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e276:	8b3b      	ldrh	r3, [r7, #24]
 800e278:	461a      	mov	r2, r3
 800e27a:	6879      	ldr	r1, [r7, #4]
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f000 fa50 	bl	800e722 <USBH_CtlReq>
 800e282:	4603      	mov	r3, r0
}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	460b      	mov	r3, r1
 800e296:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	789b      	ldrb	r3, [r3, #2]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d10f      	bne.n	800e2c0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2205      	movs	r2, #5
 800e2aa:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e2ac:	78fb      	ldrb	r3, [r7, #3]
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2200      	movs	r2, #0
 800e2be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	2100      	movs	r1, #0
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 fa2c 	bl	800e722 <USBH_CtlReq>
 800e2ca:	4603      	mov	r3, r0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}

0800e2d4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	460b      	mov	r3, r1
 800e2de:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	789b      	ldrb	r3, [r3, #2]
 800e2e4:	2b01      	cmp	r3, #1
 800e2e6:	d10e      	bne.n	800e306 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2209      	movs	r2, #9
 800e2f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	887a      	ldrh	r2, [r7, #2]
 800e2f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e306:	2200      	movs	r2, #0
 800e308:	2100      	movs	r1, #0
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fa09 	bl	800e722 <USBH_CtlReq>
 800e310:	4603      	mov	r3, r0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
 800e322:	460b      	mov	r3, r1
 800e324:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	789b      	ldrb	r3, [r3, #2]
 800e32a:	2b01      	cmp	r3, #1
 800e32c:	d10f      	bne.n	800e34e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2203      	movs	r2, #3
 800e338:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e33a:	78fb      	ldrb	r3, [r7, #3]
 800e33c:	b29a      	uxth	r2, r3
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800e34e:	2200      	movs	r2, #0
 800e350:	2100      	movs	r1, #0
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 f9e5 	bl	800e722 <USBH_CtlReq>
 800e358:	4603      	mov	r3, r0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b082      	sub	sp, #8
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
 800e36a:	460b      	mov	r3, r1
 800e36c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	789b      	ldrb	r3, [r3, #2]
 800e372:	2b01      	cmp	r3, #1
 800e374:	d10f      	bne.n	800e396 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2202      	movs	r2, #2
 800e37a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2201      	movs	r2, #1
 800e380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e388:	78fb      	ldrb	r3, [r7, #3]
 800e38a:	b29a      	uxth	r2, r3
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800e396:	2200      	movs	r2, #0
 800e398:	2100      	movs	r1, #0
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f9c1 	bl	800e722 <USBH_CtlReq>
 800e3a0:	4603      	mov	r3, r0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800e3aa:	b480      	push	{r7}
 800e3ac:	b085      	sub	sp, #20
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	60f8      	str	r0, [r7, #12]
 800e3b2:	60b9      	str	r1, [r7, #8]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	781a      	ldrb	r2, [r3, #0]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	785a      	ldrb	r2, [r3, #1]
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	3302      	adds	r3, #2
 800e3cc:	781b      	ldrb	r3, [r3, #0]
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	3303      	adds	r3, #3
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	021b      	lsls	r3, r3, #8
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	791a      	ldrb	r2, [r3, #4]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	795a      	ldrb	r2, [r3, #5]
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	799a      	ldrb	r2, [r3, #6]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	79da      	ldrb	r2, [r3, #7]
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800e404:	88fb      	ldrh	r3, [r7, #6]
 800e406:	2b08      	cmp	r3, #8
 800e408:	d939      	bls.n	800e47e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	3308      	adds	r3, #8
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	b29a      	uxth	r2, r3
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	3309      	adds	r3, #9
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	021b      	lsls	r3, r3, #8
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	4313      	orrs	r3, r2
 800e420:	b29a      	uxth	r2, r3
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	330a      	adds	r3, #10
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	b29a      	uxth	r2, r3
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	330b      	adds	r3, #11
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	b29b      	uxth	r3, r3
 800e436:	021b      	lsls	r3, r3, #8
 800e438:	b29b      	uxth	r3, r3
 800e43a:	4313      	orrs	r3, r2
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	330c      	adds	r3, #12
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	b29a      	uxth	r2, r3
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	330d      	adds	r3, #13
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	b29b      	uxth	r3, r3
 800e452:	021b      	lsls	r3, r3, #8
 800e454:	b29b      	uxth	r3, r3
 800e456:	4313      	orrs	r3, r2
 800e458:	b29a      	uxth	r2, r3
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	7b9a      	ldrb	r2, [r3, #14]
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	7bda      	ldrb	r2, [r3, #15]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	7c1a      	ldrb	r2, [r3, #16]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	7c5a      	ldrb	r2, [r3, #17]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	745a      	strb	r2, [r3, #17]
  }
}
 800e47e:	bf00      	nop
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b08a      	sub	sp, #40	; 0x28
 800e48e:	af00      	add	r7, sp, #0
 800e490:	60f8      	str	r0, [r7, #12]
 800e492:	60b9      	str	r1, [r7, #8]
 800e494:	4613      	mov	r3, r2
 800e496:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e49c:	2300      	movs	r3, #0
 800e49e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	781a      	ldrb	r2, [r3, #0]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	785a      	ldrb	r2, [r3, #1]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	3302      	adds	r3, #2
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	3303      	adds	r3, #3
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	021b      	lsls	r3, r3, #8
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	b29a      	uxth	r2, r3
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	791a      	ldrb	r2, [r3, #4]
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	795a      	ldrb	r2, [r3, #5]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	799a      	ldrb	r2, [r3, #6]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	79da      	ldrb	r2, [r3, #7]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	7a1a      	ldrb	r2, [r3, #8]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e500:	88fb      	ldrh	r3, [r7, #6]
 800e502:	2b09      	cmp	r3, #9
 800e504:	d95f      	bls.n	800e5c6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e506:	2309      	movs	r3, #9
 800e508:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e50e:	e051      	b.n	800e5b4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e510:	f107 0316 	add.w	r3, r7, #22
 800e514:	4619      	mov	r1, r3
 800e516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e518:	f000 f8e8 	bl	800e6ec <USBH_GetNextDesc>
 800e51c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e520:	785b      	ldrb	r3, [r3, #1]
 800e522:	2b04      	cmp	r3, #4
 800e524:	d146      	bne.n	800e5b4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e52a:	221a      	movs	r2, #26
 800e52c:	fb02 f303 	mul.w	r3, r2, r3
 800e530:	3308      	adds	r3, #8
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	4413      	add	r3, r2
 800e536:	3302      	adds	r3, #2
 800e538:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e53a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e53c:	69f8      	ldr	r0, [r7, #28]
 800e53e:	f000 f846 	bl	800e5ce <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e542:	2300      	movs	r3, #0
 800e544:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e548:	2300      	movs	r3, #0
 800e54a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e54c:	e022      	b.n	800e594 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e54e:	f107 0316 	add.w	r3, r7, #22
 800e552:	4619      	mov	r1, r3
 800e554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e556:	f000 f8c9 	bl	800e6ec <USBH_GetNextDesc>
 800e55a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	785b      	ldrb	r3, [r3, #1]
 800e560:	2b05      	cmp	r3, #5
 800e562:	d117      	bne.n	800e594 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e568:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e56c:	3201      	adds	r2, #1
 800e56e:	00d2      	lsls	r2, r2, #3
 800e570:	211a      	movs	r1, #26
 800e572:	fb01 f303 	mul.w	r3, r1, r3
 800e576:	4413      	add	r3, r2
 800e578:	3308      	adds	r3, #8
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	4413      	add	r3, r2
 800e57e:	3304      	adds	r3, #4
 800e580:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800e582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e584:	69b8      	ldr	r0, [r7, #24]
 800e586:	f000 f851 	bl	800e62c <USBH_ParseEPDesc>
            ep_ix++;
 800e58a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e58e:	3301      	adds	r3, #1
 800e590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	791b      	ldrb	r3, [r3, #4]
 800e598:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e59c:	429a      	cmp	r2, r3
 800e59e:	d204      	bcs.n	800e5aa <USBH_ParseCfgDesc+0x120>
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	885a      	ldrh	r2, [r3, #2]
 800e5a4:	8afb      	ldrh	r3, [r7, #22]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d8d1      	bhi.n	800e54e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e5aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e5b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d804      	bhi.n	800e5c6 <USBH_ParseCfgDesc+0x13c>
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	885a      	ldrh	r2, [r3, #2]
 800e5c0:	8afb      	ldrh	r3, [r7, #22]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d8a4      	bhi.n	800e510 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e5c6:	bf00      	nop
 800e5c8:	3728      	adds	r7, #40	; 0x28
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}

0800e5ce <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e5ce:	b480      	push	{r7}
 800e5d0:	b083      	sub	sp, #12
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	781a      	ldrb	r2, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	785a      	ldrb	r2, [r3, #1]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	789a      	ldrb	r2, [r3, #2]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	78da      	ldrb	r2, [r3, #3]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	791a      	ldrb	r2, [r3, #4]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	795a      	ldrb	r2, [r3, #5]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	799a      	ldrb	r2, [r3, #6]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	79da      	ldrb	r2, [r3, #7]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	7a1a      	ldrb	r2, [r3, #8]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	721a      	strb	r2, [r3, #8]
}
 800e620:	bf00      	nop
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	781a      	ldrb	r2, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	785a      	ldrb	r2, [r3, #1]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	789a      	ldrb	r2, [r3, #2]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	78da      	ldrb	r2, [r3, #3]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	3304      	adds	r3, #4
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	b29a      	uxth	r2, r3
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	3305      	adds	r3, #5
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	b29b      	uxth	r3, r3
 800e666:	021b      	lsls	r3, r3, #8
 800e668:	b29b      	uxth	r3, r3
 800e66a:	4313      	orrs	r3, r2
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	799a      	ldrb	r2, [r3, #6]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	719a      	strb	r2, [r3, #6]
}
 800e67a:	bf00      	nop
 800e67c:	370c      	adds	r7, #12
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr

0800e686 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e686:	b480      	push	{r7}
 800e688:	b087      	sub	sp, #28
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	60f8      	str	r0, [r7, #12]
 800e68e:	60b9      	str	r1, [r7, #8]
 800e690:	4613      	mov	r3, r2
 800e692:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	3301      	adds	r3, #1
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b03      	cmp	r3, #3
 800e69c:	d120      	bne.n	800e6e0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	1e9a      	subs	r2, r3, #2
 800e6a4:	88fb      	ldrh	r3, [r7, #6]
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	bf28      	it	cs
 800e6aa:	4613      	movcs	r3, r2
 800e6ac:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3302      	adds	r3, #2
 800e6b2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	82fb      	strh	r3, [r7, #22]
 800e6b8:	e00b      	b.n	800e6d2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e6ba:	8afb      	ldrh	r3, [r7, #22]
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	4413      	add	r3, r2
 800e6c0:	781a      	ldrb	r2, [r3, #0]
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e6cc:	8afb      	ldrh	r3, [r7, #22]
 800e6ce:	3302      	adds	r3, #2
 800e6d0:	82fb      	strh	r3, [r7, #22]
 800e6d2:	8afa      	ldrh	r2, [r7, #22]
 800e6d4:	8abb      	ldrh	r3, [r7, #20]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d3ef      	bcc.n	800e6ba <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	701a      	strb	r2, [r3, #0]
  }
}
 800e6e0:	bf00      	nop
 800e6e2:	371c      	adds	r7, #28
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b085      	sub	sp, #20
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	881a      	ldrh	r2, [r3, #0]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	4413      	add	r3, r2
 800e702:	b29a      	uxth	r2, r3
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4413      	add	r3, r2
 800e712:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e714:	68fb      	ldr	r3, [r7, #12]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b086      	sub	sp, #24
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	60b9      	str	r1, [r7, #8]
 800e72c:	4613      	mov	r3, r2
 800e72e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e730:	2301      	movs	r3, #1
 800e732:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	789b      	ldrb	r3, [r3, #2]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d002      	beq.n	800e742 <USBH_CtlReq+0x20>
 800e73c:	2b02      	cmp	r3, #2
 800e73e:	d01d      	beq.n	800e77c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e740:	e043      	b.n	800e7ca <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	88fa      	ldrh	r2, [r7, #6]
 800e74c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2201      	movs	r2, #1
 800e752:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2202      	movs	r2, #2
 800e758:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e75a:	2301      	movs	r3, #1
 800e75c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2203      	movs	r2, #3
 800e762:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e772:	2300      	movs	r3, #0
 800e774:	2200      	movs	r2, #0
 800e776:	f000 fd75 	bl	800f264 <osMessageQueuePut>
      break;
 800e77a:	e026      	b.n	800e7ca <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800e77c:	68f8      	ldr	r0, [r7, #12]
 800e77e:	f000 f829 	bl	800e7d4 <USBH_HandleControl>
 800e782:	4603      	mov	r3, r0
 800e784:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e786:	7dfb      	ldrb	r3, [r7, #23]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d002      	beq.n	800e792 <USBH_CtlReq+0x70>
 800e78c:	7dfb      	ldrb	r3, [r7, #23]
 800e78e:	2b03      	cmp	r3, #3
 800e790:	d106      	bne.n	800e7a0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	2201      	movs	r2, #1
 800e796:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2200      	movs	r2, #0
 800e79c:	761a      	strb	r2, [r3, #24]
 800e79e:	e005      	b.n	800e7ac <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e7a0:	7dfb      	ldrb	r3, [r7, #23]
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d102      	bne.n	800e7ac <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2203      	movs	r2, #3
 800e7b0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f000 fd4e 	bl	800f264 <osMessageQueuePut>
      break;
 800e7c8:	bf00      	nop
  }
  return status;
 800e7ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b086      	sub	sp, #24
 800e7d8:	af02      	add	r7, sp, #8
 800e7da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7e1b      	ldrb	r3, [r3, #24]
 800e7e8:	3b01      	subs	r3, #1
 800e7ea:	2b0a      	cmp	r3, #10
 800e7ec:	f200 822b 	bhi.w	800ec46 <USBH_HandleControl+0x472>
 800e7f0:	a201      	add	r2, pc, #4	; (adr r2, 800e7f8 <USBH_HandleControl+0x24>)
 800e7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f6:	bf00      	nop
 800e7f8:	0800e825 	.word	0x0800e825
 800e7fc:	0800e83f 	.word	0x0800e83f
 800e800:	0800e8e1 	.word	0x0800e8e1
 800e804:	0800e907 	.word	0x0800e907
 800e808:	0800e993 	.word	0x0800e993
 800e80c:	0800e9bf 	.word	0x0800e9bf
 800e810:	0800ea81 	.word	0x0800ea81
 800e814:	0800eaa3 	.word	0x0800eaa3
 800e818:	0800eb35 	.word	0x0800eb35
 800e81c:	0800eb5d 	.word	0x0800eb5d
 800e820:	0800ebef 	.word	0x0800ebef
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f103 0110 	add.w	r1, r3, #16
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	795b      	ldrb	r3, [r3, #5]
 800e82e:	461a      	mov	r2, r3
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 fa19 	bl	800ec68 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2202      	movs	r2, #2
 800e83a:	761a      	strb	r2, [r3, #24]
      break;
 800e83c:	e20e      	b.n	800ec5c <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	795b      	ldrb	r3, [r3, #5]
 800e842:	4619      	mov	r1, r3
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f003 fd03 	bl	8012250 <USBH_LL_GetURBState>
 800e84a:	4603      	mov	r3, r0
 800e84c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e84e:	7bbb      	ldrb	r3, [r7, #14]
 800e850:	2b01      	cmp	r3, #1
 800e852:	d12c      	bne.n	800e8ae <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	7c1b      	ldrb	r3, [r3, #16]
 800e858:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e85c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	8adb      	ldrh	r3, [r3, #22]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00a      	beq.n	800e87c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e866:	7b7b      	ldrb	r3, [r7, #13]
 800e868:	2b80      	cmp	r3, #128	; 0x80
 800e86a:	d103      	bne.n	800e874 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2203      	movs	r2, #3
 800e870:	761a      	strb	r2, [r3, #24]
 800e872:	e00d      	b.n	800e890 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2205      	movs	r2, #5
 800e878:	761a      	strb	r2, [r3, #24]
 800e87a:	e009      	b.n	800e890 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e87c:	7b7b      	ldrb	r3, [r7, #13]
 800e87e:	2b80      	cmp	r3, #128	; 0x80
 800e880:	d103      	bne.n	800e88a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2209      	movs	r2, #9
 800e886:	761a      	strb	r2, [r3, #24]
 800e888:	e002      	b.n	800e890 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2207      	movs	r2, #7
 800e88e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2203      	movs	r2, #3
 800e894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f000 fcdc 	bl	800f264 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e8ac:	e1cd      	b.n	800ec4a <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e8ae:	7bbb      	ldrb	r3, [r7, #14]
 800e8b0:	2b04      	cmp	r3, #4
 800e8b2:	d003      	beq.n	800e8bc <USBH_HandleControl+0xe8>
 800e8b4:	7bbb      	ldrb	r3, [r7, #14]
 800e8b6:	2b02      	cmp	r3, #2
 800e8b8:	f040 81c7 	bne.w	800ec4a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	220b      	movs	r2, #11
 800e8c0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2203      	movs	r2, #3
 800e8c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f000 fcc3 	bl	800f264 <osMessageQueuePut>
      break;
 800e8de:	e1b4      	b.n	800ec4a <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6899      	ldr	r1, [r3, #8]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	899a      	ldrh	r2, [r3, #12]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	791b      	ldrb	r3, [r3, #4]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f9f4 	bl	800ece6 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2204      	movs	r2, #4
 800e902:	761a      	strb	r2, [r3, #24]
      break;
 800e904:	e1aa      	b.n	800ec5c <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	791b      	ldrb	r3, [r3, #4]
 800e90a:	4619      	mov	r1, r3
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f003 fc9f 	bl	8012250 <USBH_LL_GetURBState>
 800e912:	4603      	mov	r3, r0
 800e914:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e916:	7bbb      	ldrb	r3, [r7, #14]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d110      	bne.n	800e93e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2209      	movs	r2, #9
 800e920:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2203      	movs	r2, #3
 800e926:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e936:	2300      	movs	r3, #0
 800e938:	2200      	movs	r2, #0
 800e93a:	f000 fc93 	bl	800f264 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e93e:	7bbb      	ldrb	r3, [r7, #14]
 800e940:	2b05      	cmp	r3, #5
 800e942:	d110      	bne.n	800e966 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e944:	2303      	movs	r3, #3
 800e946:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2203      	movs	r2, #3
 800e94c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e95c:	2300      	movs	r3, #0
 800e95e:	2200      	movs	r2, #0
 800e960:	f000 fc80 	bl	800f264 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e964:	e173      	b.n	800ec4e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e966:	7bbb      	ldrb	r3, [r7, #14]
 800e968:	2b04      	cmp	r3, #4
 800e96a:	f040 8170 	bne.w	800ec4e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	220b      	movs	r2, #11
 800e972:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2203      	movs	r2, #3
 800e978:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e988:	2300      	movs	r3, #0
 800e98a:	2200      	movs	r2, #0
 800e98c:	f000 fc6a 	bl	800f264 <osMessageQueuePut>
      break;
 800e990:	e15d      	b.n	800ec4e <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6899      	ldr	r1, [r3, #8]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	899a      	ldrh	r2, [r3, #12]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7958      	ldrb	r0, [r3, #5]
 800e99e:	2301      	movs	r3, #1
 800e9a0:	9300      	str	r3, [sp, #0]
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 f979 	bl	800ec9c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2206      	movs	r2, #6
 800e9ba:	761a      	strb	r2, [r3, #24]
      break;
 800e9bc:	e14e      	b.n	800ec5c <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	795b      	ldrb	r3, [r3, #5]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f003 fc43 	bl	8012250 <USBH_LL_GetURBState>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e9ce:	7bbb      	ldrb	r3, [r7, #14]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d111      	bne.n	800e9f8 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2207      	movs	r2, #7
 800e9d8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2203      	movs	r2, #3
 800e9de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f000 fc37 	bl	800f264 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e9f6:	e12c      	b.n	800ec52 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800e9f8:	7bbb      	ldrb	r3, [r7, #14]
 800e9fa:	2b05      	cmp	r3, #5
 800e9fc:	d113      	bne.n	800ea26 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	220c      	movs	r2, #12
 800ea02:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ea04:	2303      	movs	r3, #3
 800ea06:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2203      	movs	r2, #3
 800ea0c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f000 fc20 	bl	800f264 <osMessageQueuePut>
      break;
 800ea24:	e115      	b.n	800ec52 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ea26:	7bbb      	ldrb	r3, [r7, #14]
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d111      	bne.n	800ea50 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2205      	movs	r2, #5
 800ea30:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2203      	movs	r2, #3
 800ea36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ea46:	2300      	movs	r3, #0
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f000 fc0b 	bl	800f264 <osMessageQueuePut>
      break;
 800ea4e:	e100      	b.n	800ec52 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800ea50:	7bbb      	ldrb	r3, [r7, #14]
 800ea52:	2b04      	cmp	r3, #4
 800ea54:	f040 80fd 	bne.w	800ec52 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	220b      	movs	r2, #11
 800ea5c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ea5e:	2302      	movs	r3, #2
 800ea60:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2203      	movs	r2, #3
 800ea66:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ea76:	2300      	movs	r3, #0
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f000 fbf3 	bl	800f264 <osMessageQueuePut>
      break;
 800ea7e:	e0e8      	b.n	800ec52 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	791b      	ldrb	r3, [r3, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	2100      	movs	r1, #0
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 f92c 	bl	800ece6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ea94:	b29a      	uxth	r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2208      	movs	r2, #8
 800ea9e:	761a      	strb	r2, [r3, #24]

      break;
 800eaa0:	e0dc      	b.n	800ec5c <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	791b      	ldrb	r3, [r3, #4]
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f003 fbd1 	bl	8012250 <USBH_LL_GetURBState>
 800eaae:	4603      	mov	r3, r0
 800eab0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800eab2:	7bbb      	ldrb	r3, [r7, #14]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d113      	bne.n	800eae0 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	220d      	movs	r2, #13
 800eabc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2203      	movs	r2, #3
 800eac6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ead6:	2300      	movs	r3, #0
 800ead8:	2200      	movs	r2, #0
 800eada:	f000 fbc3 	bl	800f264 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800eade:	e0ba      	b.n	800ec56 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800eae0:	7bbb      	ldrb	r3, [r7, #14]
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d111      	bne.n	800eb0a <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	220b      	movs	r2, #11
 800eaea:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2203      	movs	r2, #3
 800eaf0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eb00:	2300      	movs	r3, #0
 800eb02:	2200      	movs	r2, #0
 800eb04:	f000 fbae 	bl	800f264 <osMessageQueuePut>
      break;
 800eb08:	e0a5      	b.n	800ec56 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800eb0a:	7bbb      	ldrb	r3, [r7, #14]
 800eb0c:	2b05      	cmp	r3, #5
 800eb0e:	f040 80a2 	bne.w	800ec56 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800eb12:	2303      	movs	r3, #3
 800eb14:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2203      	movs	r2, #3
 800eb1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	f000 fb99 	bl	800f264 <osMessageQueuePut>
      break;
 800eb32:	e090      	b.n	800ec56 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	795a      	ldrb	r2, [r3, #5]
 800eb38:	2301      	movs	r3, #1
 800eb3a:	9300      	str	r3, [sp, #0]
 800eb3c:	4613      	mov	r3, r2
 800eb3e:	2200      	movs	r2, #0
 800eb40:	2100      	movs	r1, #0
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 f8aa 	bl	800ec9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	220a      	movs	r2, #10
 800eb58:	761a      	strb	r2, [r3, #24]
      break;
 800eb5a:	e07f      	b.n	800ec5c <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	795b      	ldrb	r3, [r3, #5]
 800eb60:	4619      	mov	r1, r3
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f003 fb74 	bl	8012250 <USBH_LL_GetURBState>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800eb6c:	7bbb      	ldrb	r3, [r7, #14]
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d113      	bne.n	800eb9a <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800eb72:	2300      	movs	r3, #0
 800eb74:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	220d      	movs	r2, #13
 800eb7a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2203      	movs	r2, #3
 800eb80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eb90:	2300      	movs	r3, #0
 800eb92:	2200      	movs	r2, #0
 800eb94:	f000 fb66 	bl	800f264 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800eb98:	e05f      	b.n	800ec5a <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800eb9a:	7bbb      	ldrb	r3, [r7, #14]
 800eb9c:	2b02      	cmp	r3, #2
 800eb9e:	d111      	bne.n	800ebc4 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2209      	movs	r2, #9
 800eba4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2203      	movs	r2, #3
 800ebaa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ebba:	2300      	movs	r3, #0
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f000 fb51 	bl	800f264 <osMessageQueuePut>
      break;
 800ebc2:	e04a      	b.n	800ec5a <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800ebc4:	7bbb      	ldrb	r3, [r7, #14]
 800ebc6:	2b04      	cmp	r3, #4
 800ebc8:	d147      	bne.n	800ec5a <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	220b      	movs	r2, #11
 800ebce:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2203      	movs	r2, #3
 800ebd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	f000 fb3c 	bl	800f264 <osMessageQueuePut>
      break;
 800ebec:	e035      	b.n	800ec5a <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	7e5b      	ldrb	r3, [r3, #25]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	765a      	strb	r2, [r3, #25]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	7e5b      	ldrb	r3, [r3, #25]
 800ebfe:	2b02      	cmp	r3, #2
 800ec00:	d806      	bhi.n	800ec10 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2201      	movs	r2, #1
 800ec06:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ec0e:	e025      	b.n	800ec5c <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ec16:	2106      	movs	r1, #6
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	795b      	ldrb	r3, [r3, #5]
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 f90d 	bl	800ee48 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	791b      	ldrb	r3, [r3, #4]
 800ec32:	4619      	mov	r1, r3
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 f907 	bl	800ee48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ec40:	2302      	movs	r3, #2
 800ec42:	73fb      	strb	r3, [r7, #15]
      break;
 800ec44:	e00a      	b.n	800ec5c <USBH_HandleControl+0x488>

    default:
      break;
 800ec46:	bf00      	nop
 800ec48:	e008      	b.n	800ec5c <USBH_HandleControl+0x488>
      break;
 800ec4a:	bf00      	nop
 800ec4c:	e006      	b.n	800ec5c <USBH_HandleControl+0x488>
      break;
 800ec4e:	bf00      	nop
 800ec50:	e004      	b.n	800ec5c <USBH_HandleControl+0x488>
      break;
 800ec52:	bf00      	nop
 800ec54:	e002      	b.n	800ec5c <USBH_HandleControl+0x488>
      break;
 800ec56:	bf00      	nop
 800ec58:	e000      	b.n	800ec5c <USBH_HandleControl+0x488>
      break;
 800ec5a:	bf00      	nop
  }

  return status;
 800ec5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop

0800ec68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b088      	sub	sp, #32
 800ec6c:	af04      	add	r7, sp, #16
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	4613      	mov	r3, r2
 800ec74:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ec76:	79f9      	ldrb	r1, [r7, #7]
 800ec78:	2300      	movs	r3, #0
 800ec7a:	9303      	str	r3, [sp, #12]
 800ec7c:	2308      	movs	r3, #8
 800ec7e:	9302      	str	r3, [sp, #8]
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	9301      	str	r3, [sp, #4]
 800ec84:	2300      	movs	r3, #0
 800ec86:	9300      	str	r3, [sp, #0]
 800ec88:	2300      	movs	r3, #0
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	68f8      	ldr	r0, [r7, #12]
 800ec8e:	f003 faae 	bl	80121ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800ec92:	2300      	movs	r3, #0
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b088      	sub	sp, #32
 800eca0:	af04      	add	r7, sp, #16
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	4611      	mov	r1, r2
 800eca8:	461a      	mov	r2, r3
 800ecaa:	460b      	mov	r3, r1
 800ecac:	80fb      	strh	r3, [r7, #6]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d001      	beq.n	800ecc0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ecc0:	7979      	ldrb	r1, [r7, #5]
 800ecc2:	7e3b      	ldrb	r3, [r7, #24]
 800ecc4:	9303      	str	r3, [sp, #12]
 800ecc6:	88fb      	ldrh	r3, [r7, #6]
 800ecc8:	9302      	str	r3, [sp, #8]
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	9301      	str	r3, [sp, #4]
 800ecce:	2301      	movs	r3, #1
 800ecd0:	9300      	str	r3, [sp, #0]
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f003 fa89 	bl	80121ee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ecdc:	2300      	movs	r3, #0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b088      	sub	sp, #32
 800ecea:	af04      	add	r7, sp, #16
 800ecec:	60f8      	str	r0, [r7, #12]
 800ecee:	60b9      	str	r1, [r7, #8]
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	460b      	mov	r3, r1
 800ecf6:	80fb      	strh	r3, [r7, #6]
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ecfc:	7979      	ldrb	r1, [r7, #5]
 800ecfe:	2300      	movs	r3, #0
 800ed00:	9303      	str	r3, [sp, #12]
 800ed02:	88fb      	ldrh	r3, [r7, #6]
 800ed04:	9302      	str	r3, [sp, #8]
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	9300      	str	r3, [sp, #0]
 800ed0e:	2300      	movs	r3, #0
 800ed10:	2201      	movs	r2, #1
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f003 fa6b 	bl	80121ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ed18:	2300      	movs	r3, #0

}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ed22:	b580      	push	{r7, lr}
 800ed24:	b088      	sub	sp, #32
 800ed26:	af04      	add	r7, sp, #16
 800ed28:	60f8      	str	r0, [r7, #12]
 800ed2a:	60b9      	str	r1, [r7, #8]
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	461a      	mov	r2, r3
 800ed30:	460b      	mov	r3, r1
 800ed32:	80fb      	strh	r3, [r7, #6]
 800ed34:	4613      	mov	r3, r2
 800ed36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ed42:	2300      	movs	r3, #0
 800ed44:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ed46:	7979      	ldrb	r1, [r7, #5]
 800ed48:	7e3b      	ldrb	r3, [r7, #24]
 800ed4a:	9303      	str	r3, [sp, #12]
 800ed4c:	88fb      	ldrh	r3, [r7, #6]
 800ed4e:	9302      	str	r3, [sp, #8]
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	9301      	str	r3, [sp, #4]
 800ed54:	2301      	movs	r3, #1
 800ed56:	9300      	str	r3, [sp, #0]
 800ed58:	2302      	movs	r3, #2
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	68f8      	ldr	r0, [r7, #12]
 800ed5e:	f003 fa46 	bl	80121ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3710      	adds	r7, #16
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b088      	sub	sp, #32
 800ed70:	af04      	add	r7, sp, #16
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	4611      	mov	r1, r2
 800ed78:	461a      	mov	r2, r3
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	80fb      	strh	r3, [r7, #6]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800ed82:	7979      	ldrb	r1, [r7, #5]
 800ed84:	2300      	movs	r3, #0
 800ed86:	9303      	str	r3, [sp, #12]
 800ed88:	88fb      	ldrh	r3, [r7, #6]
 800ed8a:	9302      	str	r3, [sp, #8]
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	9301      	str	r3, [sp, #4]
 800ed90:	2301      	movs	r3, #1
 800ed92:	9300      	str	r3, [sp, #0]
 800ed94:	2302      	movs	r3, #2
 800ed96:	2201      	movs	r2, #1
 800ed98:	68f8      	ldr	r0, [r7, #12]
 800ed9a:	f003 fa28 	bl	80121ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3710      	adds	r7, #16
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b086      	sub	sp, #24
 800edac:	af04      	add	r7, sp, #16
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	4608      	mov	r0, r1
 800edb2:	4611      	mov	r1, r2
 800edb4:	461a      	mov	r2, r3
 800edb6:	4603      	mov	r3, r0
 800edb8:	70fb      	strb	r3, [r7, #3]
 800edba:	460b      	mov	r3, r1
 800edbc:	70bb      	strb	r3, [r7, #2]
 800edbe:	4613      	mov	r3, r2
 800edc0:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800edc2:	7878      	ldrb	r0, [r7, #1]
 800edc4:	78ba      	ldrb	r2, [r7, #2]
 800edc6:	78f9      	ldrb	r1, [r7, #3]
 800edc8:	8b3b      	ldrh	r3, [r7, #24]
 800edca:	9302      	str	r3, [sp, #8]
 800edcc:	7d3b      	ldrb	r3, [r7, #20]
 800edce:	9301      	str	r3, [sp, #4]
 800edd0:	7c3b      	ldrb	r3, [r7, #16]
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	4603      	mov	r3, r0
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f003 f9bb 	bl	8012152 <USBH_LL_OpenPipe>

  return USBH_OK;
 800eddc:	2300      	movs	r3, #0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3708      	adds	r7, #8
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b082      	sub	sp, #8
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	460b      	mov	r3, r1
 800edf0:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800edf2:	78fb      	ldrb	r3, [r7, #3]
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f003 f9da 	bl	80121b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800edfc:	2300      	movs	r3, #0
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b084      	sub	sp, #16
 800ee0a:	af00      	add	r7, sp, #0
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	460b      	mov	r3, r1
 800ee10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 f836 	bl	800ee84 <USBH_GetFreePipe>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ee1c:	89fb      	ldrh	r3, [r7, #14]
 800ee1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d00a      	beq.n	800ee3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800ee26:	78fa      	ldrb	r2, [r7, #3]
 800ee28:	89fb      	ldrh	r3, [r7, #14]
 800ee2a:	f003 030f 	and.w	r3, r3, #15
 800ee2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee32:	6879      	ldr	r1, [r7, #4]
 800ee34:	33e0      	adds	r3, #224	; 0xe0
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	440b      	add	r3, r1
 800ee3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ee3c:	89fb      	ldrh	r3, [r7, #14]
 800ee3e:	b2db      	uxtb	r3, r3
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b083      	sub	sp, #12
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	460b      	mov	r3, r1
 800ee52:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ee54:	78fb      	ldrb	r3, [r7, #3]
 800ee56:	2b0a      	cmp	r3, #10
 800ee58:	d80d      	bhi.n	800ee76 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ee5a:	78fb      	ldrb	r3, [r7, #3]
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	33e0      	adds	r3, #224	; 0xe0
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	4413      	add	r3, r2
 800ee64:	685a      	ldr	r2, [r3, #4]
 800ee66:	78fb      	ldrb	r3, [r7, #3]
 800ee68:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ee6c:	6879      	ldr	r1, [r7, #4]
 800ee6e:	33e0      	adds	r3, #224	; 0xe0
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	440b      	add	r3, r1
 800ee74:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ee76:	2300      	movs	r3, #0
}
 800ee78:	4618      	mov	r0, r3
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b085      	sub	sp, #20
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ee90:	2300      	movs	r3, #0
 800ee92:	73fb      	strb	r3, [r7, #15]
 800ee94:	e00f      	b.n	800eeb6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ee96:	7bfb      	ldrb	r3, [r7, #15]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	33e0      	adds	r3, #224	; 0xe0
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4413      	add	r3, r2
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d102      	bne.n	800eeb0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800eeaa:	7bfb      	ldrb	r3, [r7, #15]
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	e007      	b.n	800eec0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800eeb0:	7bfb      	ldrb	r3, [r7, #15]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	73fb      	strb	r3, [r7, #15]
 800eeb6:	7bfb      	ldrb	r3, [r7, #15]
 800eeb8:	2b0a      	cmp	r3, #10
 800eeba:	d9ec      	bls.n	800ee96 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800eebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800eecc:	b480      	push	{r7}
 800eece:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800eed0:	bf00      	nop
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr
	...

0800eedc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eee2:	f3ef 8305 	mrs	r3, IPSR
 800eee6:	60bb      	str	r3, [r7, #8]
  return(result);
 800eee8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d10f      	bne.n	800ef0e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeee:	f3ef 8310 	mrs	r3, PRIMASK
 800eef2:	607b      	str	r3, [r7, #4]
  return(result);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d105      	bne.n	800ef06 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eefa:	f3ef 8311 	mrs	r3, BASEPRI
 800eefe:	603b      	str	r3, [r7, #0]
  return(result);
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d007      	beq.n	800ef16 <osKernelInitialize+0x3a>
 800ef06:	4b0e      	ldr	r3, [pc, #56]	; (800ef40 <osKernelInitialize+0x64>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b02      	cmp	r3, #2
 800ef0c:	d103      	bne.n	800ef16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ef0e:	f06f 0305 	mvn.w	r3, #5
 800ef12:	60fb      	str	r3, [r7, #12]
 800ef14:	e00c      	b.n	800ef30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ef16:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <osKernelInitialize+0x64>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d105      	bne.n	800ef2a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ef1e:	4b08      	ldr	r3, [pc, #32]	; (800ef40 <osKernelInitialize+0x64>)
 800ef20:	2201      	movs	r2, #1
 800ef22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	60fb      	str	r3, [r7, #12]
 800ef28:	e002      	b.n	800ef30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ef2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ef30:	68fb      	ldr	r3, [r7, #12]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3714      	adds	r7, #20
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr
 800ef3e:	bf00      	nop
 800ef40:	20000194 	.word	0x20000194

0800ef44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef4a:	f3ef 8305 	mrs	r3, IPSR
 800ef4e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d10f      	bne.n	800ef76 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef56:	f3ef 8310 	mrs	r3, PRIMASK
 800ef5a:	607b      	str	r3, [r7, #4]
  return(result);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d105      	bne.n	800ef6e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef62:	f3ef 8311 	mrs	r3, BASEPRI
 800ef66:	603b      	str	r3, [r7, #0]
  return(result);
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d007      	beq.n	800ef7e <osKernelStart+0x3a>
 800ef6e:	4b0f      	ldr	r3, [pc, #60]	; (800efac <osKernelStart+0x68>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d103      	bne.n	800ef7e <osKernelStart+0x3a>
    stat = osErrorISR;
 800ef76:	f06f 0305 	mvn.w	r3, #5
 800ef7a:	60fb      	str	r3, [r7, #12]
 800ef7c:	e010      	b.n	800efa0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ef7e:	4b0b      	ldr	r3, [pc, #44]	; (800efac <osKernelStart+0x68>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d109      	bne.n	800ef9a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ef86:	f7ff ffa1 	bl	800eecc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ef8a:	4b08      	ldr	r3, [pc, #32]	; (800efac <osKernelStart+0x68>)
 800ef8c:	2202      	movs	r2, #2
 800ef8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ef90:	f001 fa9a 	bl	80104c8 <vTaskStartScheduler>
      stat = osOK;
 800ef94:	2300      	movs	r3, #0
 800ef96:	60fb      	str	r3, [r7, #12]
 800ef98:	e002      	b.n	800efa0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ef9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800efa0:	68fb      	ldr	r3, [r7, #12]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	20000194 	.word	0x20000194

0800efb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b090      	sub	sp, #64	; 0x40
 800efb4:	af04      	add	r7, sp, #16
 800efb6:	60f8      	str	r0, [r7, #12]
 800efb8:	60b9      	str	r1, [r7, #8]
 800efba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800efbc:	2300      	movs	r3, #0
 800efbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efc0:	f3ef 8305 	mrs	r3, IPSR
 800efc4:	61fb      	str	r3, [r7, #28]
  return(result);
 800efc6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f040 808f 	bne.w	800f0ec <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efce:	f3ef 8310 	mrs	r3, PRIMASK
 800efd2:	61bb      	str	r3, [r7, #24]
  return(result);
 800efd4:	69bb      	ldr	r3, [r7, #24]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d105      	bne.n	800efe6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800efda:	f3ef 8311 	mrs	r3, BASEPRI
 800efde:	617b      	str	r3, [r7, #20]
  return(result);
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d003      	beq.n	800efee <osThreadNew+0x3e>
 800efe6:	4b44      	ldr	r3, [pc, #272]	; (800f0f8 <osThreadNew+0x148>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	2b02      	cmp	r3, #2
 800efec:	d07e      	beq.n	800f0ec <osThreadNew+0x13c>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d07b      	beq.n	800f0ec <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800eff4:	2380      	movs	r3, #128	; 0x80
 800eff6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800eff8:	2318      	movs	r3, #24
 800effa:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800effc:	2300      	movs	r3, #0
 800effe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f000:	f04f 33ff 	mov.w	r3, #4294967295
 800f004:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d045      	beq.n	800f098 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d002      	beq.n	800f01a <osThreadNew+0x6a>
        name = attr->name;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d002      	beq.n	800f028 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	699b      	ldr	r3, [r3, #24]
 800f026:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d008      	beq.n	800f040 <osThreadNew+0x90>
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	2b38      	cmp	r3, #56	; 0x38
 800f032:	d805      	bhi.n	800f040 <osThreadNew+0x90>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	f003 0301 	and.w	r3, r3, #1
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d001      	beq.n	800f044 <osThreadNew+0x94>
        return (NULL);
 800f040:	2300      	movs	r3, #0
 800f042:	e054      	b.n	800f0ee <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	695b      	ldr	r3, [r3, #20]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d003      	beq.n	800f054 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	089b      	lsrs	r3, r3, #2
 800f052:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d00e      	beq.n	800f07a <osThreadNew+0xca>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	68db      	ldr	r3, [r3, #12]
 800f060:	2b5b      	cmp	r3, #91	; 0x5b
 800f062:	d90a      	bls.n	800f07a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d006      	beq.n	800f07a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	695b      	ldr	r3, [r3, #20]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d002      	beq.n	800f07a <osThreadNew+0xca>
        mem = 1;
 800f074:	2301      	movs	r3, #1
 800f076:	623b      	str	r3, [r7, #32]
 800f078:	e010      	b.n	800f09c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d10c      	bne.n	800f09c <osThreadNew+0xec>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	68db      	ldr	r3, [r3, #12]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d108      	bne.n	800f09c <osThreadNew+0xec>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	691b      	ldr	r3, [r3, #16]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d104      	bne.n	800f09c <osThreadNew+0xec>
          mem = 0;
 800f092:	2300      	movs	r3, #0
 800f094:	623b      	str	r3, [r7, #32]
 800f096:	e001      	b.n	800f09c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f098:	2300      	movs	r3, #0
 800f09a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f09c:	6a3b      	ldr	r3, [r7, #32]
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d110      	bne.n	800f0c4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f0aa:	9202      	str	r2, [sp, #8]
 800f0ac:	9301      	str	r3, [sp, #4]
 800f0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b0:	9300      	str	r3, [sp, #0]
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0b8:	68f8      	ldr	r0, [r7, #12]
 800f0ba:	f001 f833 	bl	8010124 <xTaskCreateStatic>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	613b      	str	r3, [r7, #16]
 800f0c2:	e013      	b.n	800f0ec <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f0c4:	6a3b      	ldr	r3, [r7, #32]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d110      	bne.n	800f0ec <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	f107 0310 	add.w	r3, r7, #16
 800f0d2:	9301      	str	r3, [sp, #4]
 800f0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d6:	9300      	str	r3, [sp, #0]
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f0dc:	68f8      	ldr	r0, [r7, #12]
 800f0de:	f001 f87b 	bl	80101d8 <xTaskCreate>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d001      	beq.n	800f0ec <osThreadNew+0x13c>
          hTask = NULL;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f0ec:	693b      	ldr	r3, [r7, #16]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3730      	adds	r7, #48	; 0x30
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	20000194 	.word	0x20000194

0800f0fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f104:	f3ef 8305 	mrs	r3, IPSR
 800f108:	613b      	str	r3, [r7, #16]
  return(result);
 800f10a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d10f      	bne.n	800f130 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f110:	f3ef 8310 	mrs	r3, PRIMASK
 800f114:	60fb      	str	r3, [r7, #12]
  return(result);
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d105      	bne.n	800f128 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f11c:	f3ef 8311 	mrs	r3, BASEPRI
 800f120:	60bb      	str	r3, [r7, #8]
  return(result);
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d007      	beq.n	800f138 <osDelay+0x3c>
 800f128:	4b0a      	ldr	r3, [pc, #40]	; (800f154 <osDelay+0x58>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d103      	bne.n	800f138 <osDelay+0x3c>
    stat = osErrorISR;
 800f130:	f06f 0305 	mvn.w	r3, #5
 800f134:	617b      	str	r3, [r7, #20]
 800f136:	e007      	b.n	800f148 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f138:	2300      	movs	r3, #0
 800f13a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <osDelay+0x4c>
      vTaskDelay(ticks);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f001 f98c 	bl	8010460 <vTaskDelay>
    }
  }

  return (stat);
 800f148:	697b      	ldr	r3, [r7, #20]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3718      	adds	r7, #24
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	20000194 	.word	0x20000194

0800f158 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f158:	b580      	push	{r7, lr}
 800f15a:	b08c      	sub	sp, #48	; 0x30
 800f15c:	af02      	add	r7, sp, #8
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f164:	2300      	movs	r3, #0
 800f166:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f168:	f3ef 8305 	mrs	r3, IPSR
 800f16c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f16e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f170:	2b00      	cmp	r3, #0
 800f172:	d170      	bne.n	800f256 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f174:	f3ef 8310 	mrs	r3, PRIMASK
 800f178:	617b      	str	r3, [r7, #20]
  return(result);
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d105      	bne.n	800f18c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f180:	f3ef 8311 	mrs	r3, BASEPRI
 800f184:	613b      	str	r3, [r7, #16]
  return(result);
 800f186:	693b      	ldr	r3, [r7, #16]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d003      	beq.n	800f194 <osMessageQueueNew+0x3c>
 800f18c:	4b34      	ldr	r3, [pc, #208]	; (800f260 <osMessageQueueNew+0x108>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2b02      	cmp	r3, #2
 800f192:	d060      	beq.n	800f256 <osMessageQueueNew+0xfe>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d05d      	beq.n	800f256 <osMessageQueueNew+0xfe>
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d05a      	beq.n	800f256 <osMessageQueueNew+0xfe>
    mem = -1;
 800f1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d029      	beq.n	800f200 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	689b      	ldr	r3, [r3, #8]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d012      	beq.n	800f1da <osMessageQueueNew+0x82>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	2b4f      	cmp	r3, #79	; 0x4f
 800f1ba:	d90e      	bls.n	800f1da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d00a      	beq.n	800f1da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	695a      	ldr	r2, [r3, #20]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	68b9      	ldr	r1, [r7, #8]
 800f1cc:	fb01 f303 	mul.w	r3, r1, r3
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d302      	bcc.n	800f1da <osMessageQueueNew+0x82>
        mem = 1;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	623b      	str	r3, [r7, #32]
 800f1d8:	e014      	b.n	800f204 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	689b      	ldr	r3, [r3, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d110      	bne.n	800f204 <osMessageQueueNew+0xac>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d10c      	bne.n	800f204 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d108      	bne.n	800f204 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	695b      	ldr	r3, [r3, #20]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d104      	bne.n	800f204 <osMessageQueueNew+0xac>
          mem = 0;
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	623b      	str	r3, [r7, #32]
 800f1fe:	e001      	b.n	800f204 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f200:	2300      	movs	r3, #0
 800f202:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f204:	6a3b      	ldr	r3, [r7, #32]
 800f206:	2b01      	cmp	r3, #1
 800f208:	d10c      	bne.n	800f224 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	691a      	ldr	r2, [r3, #16]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6899      	ldr	r1, [r3, #8]
 800f212:	2300      	movs	r3, #0
 800f214:	9300      	str	r3, [sp, #0]
 800f216:	460b      	mov	r3, r1
 800f218:	68b9      	ldr	r1, [r7, #8]
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f000 fa58 	bl	800f6d0 <xQueueGenericCreateStatic>
 800f220:	6278      	str	r0, [r7, #36]	; 0x24
 800f222:	e008      	b.n	800f236 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800f224:	6a3b      	ldr	r3, [r7, #32]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d105      	bne.n	800f236 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f22a:	2200      	movs	r2, #0
 800f22c:	68b9      	ldr	r1, [r7, #8]
 800f22e:	68f8      	ldr	r0, [r7, #12]
 800f230:	f000 fac1 	bl	800f7b6 <xQueueGenericCreate>
 800f234:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d00c      	beq.n	800f256 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d003      	beq.n	800f24a <osMessageQueueNew+0xf2>
        name = attr->name;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	61fb      	str	r3, [r7, #28]
 800f248:	e001      	b.n	800f24e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800f24a:	2300      	movs	r3, #0
 800f24c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f24e:	69f9      	ldr	r1, [r7, #28]
 800f250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f252:	f000 ff0b 	bl	801006c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3728      	adds	r7, #40	; 0x28
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}
 800f260:	20000194 	.word	0x20000194

0800f264 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f264:	b580      	push	{r7, lr}
 800f266:	b08a      	sub	sp, #40	; 0x28
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	603b      	str	r3, [r7, #0]
 800f270:	4613      	mov	r3, r2
 800f272:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f278:	2300      	movs	r3, #0
 800f27a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f27c:	f3ef 8305 	mrs	r3, IPSR
 800f280:	61fb      	str	r3, [r7, #28]
  return(result);
 800f282:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10f      	bne.n	800f2a8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f288:	f3ef 8310 	mrs	r3, PRIMASK
 800f28c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d105      	bne.n	800f2a0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f294:	f3ef 8311 	mrs	r3, BASEPRI
 800f298:	617b      	str	r3, [r7, #20]
  return(result);
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d02c      	beq.n	800f2fa <osMessageQueuePut+0x96>
 800f2a0:	4b28      	ldr	r3, [pc, #160]	; (800f344 <osMessageQueuePut+0xe0>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2b02      	cmp	r3, #2
 800f2a6:	d128      	bne.n	800f2fa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2a8:	6a3b      	ldr	r3, [r7, #32]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d005      	beq.n	800f2ba <osMessageQueuePut+0x56>
 800f2ae:	68bb      	ldr	r3, [r7, #8]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d002      	beq.n	800f2ba <osMessageQueuePut+0x56>
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d003      	beq.n	800f2c2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f2ba:	f06f 0303 	mvn.w	r3, #3
 800f2be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2c0:	e039      	b.n	800f336 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f2c6:	f107 0210 	add.w	r2, r7, #16
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	68b9      	ldr	r1, [r7, #8]
 800f2ce:	6a38      	ldr	r0, [r7, #32]
 800f2d0:	f000 fbce 	bl	800fa70 <xQueueGenericSendFromISR>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d003      	beq.n	800f2e2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f2da:	f06f 0302 	mvn.w	r3, #2
 800f2de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2e0:	e029      	b.n	800f336 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d026      	beq.n	800f336 <osMessageQueuePut+0xd2>
 800f2e8:	4b17      	ldr	r3, [pc, #92]	; (800f348 <osMessageQueuePut+0xe4>)
 800f2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2ee:	601a      	str	r2, [r3, #0]
 800f2f0:	f3bf 8f4f 	dsb	sy
 800f2f4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2f8:	e01d      	b.n	800f336 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f2fa:	6a3b      	ldr	r3, [r7, #32]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d002      	beq.n	800f306 <osMessageQueuePut+0xa2>
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d103      	bne.n	800f30e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f306:	f06f 0303 	mvn.w	r3, #3
 800f30a:	627b      	str	r3, [r7, #36]	; 0x24
 800f30c:	e014      	b.n	800f338 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f30e:	2300      	movs	r3, #0
 800f310:	683a      	ldr	r2, [r7, #0]
 800f312:	68b9      	ldr	r1, [r7, #8]
 800f314:	6a38      	ldr	r0, [r7, #32]
 800f316:	f000 fab1 	bl	800f87c <xQueueGenericSend>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b01      	cmp	r3, #1
 800f31e:	d00b      	beq.n	800f338 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d003      	beq.n	800f32e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f326:	f06f 0301 	mvn.w	r3, #1
 800f32a:	627b      	str	r3, [r7, #36]	; 0x24
 800f32c:	e004      	b.n	800f338 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f32e:	f06f 0302 	mvn.w	r3, #2
 800f332:	627b      	str	r3, [r7, #36]	; 0x24
 800f334:	e000      	b.n	800f338 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f336:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3728      	adds	r7, #40	; 0x28
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	20000194 	.word	0x20000194
 800f348:	e000ed04 	.word	0xe000ed04

0800f34c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b08a      	sub	sp, #40	; 0x28
 800f350:	af00      	add	r7, sp, #0
 800f352:	60f8      	str	r0, [r7, #12]
 800f354:	60b9      	str	r1, [r7, #8]
 800f356:	607a      	str	r2, [r7, #4]
 800f358:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f35e:	2300      	movs	r3, #0
 800f360:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f362:	f3ef 8305 	mrs	r3, IPSR
 800f366:	61fb      	str	r3, [r7, #28]
  return(result);
 800f368:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d10f      	bne.n	800f38e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f36e:	f3ef 8310 	mrs	r3, PRIMASK
 800f372:	61bb      	str	r3, [r7, #24]
  return(result);
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d105      	bne.n	800f386 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f37a:	f3ef 8311 	mrs	r3, BASEPRI
 800f37e:	617b      	str	r3, [r7, #20]
  return(result);
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d02c      	beq.n	800f3e0 <osMessageQueueGet+0x94>
 800f386:	4b28      	ldr	r3, [pc, #160]	; (800f428 <osMessageQueueGet+0xdc>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2b02      	cmp	r3, #2
 800f38c:	d128      	bne.n	800f3e0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f38e:	6a3b      	ldr	r3, [r7, #32]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d005      	beq.n	800f3a0 <osMessageQueueGet+0x54>
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d002      	beq.n	800f3a0 <osMessageQueueGet+0x54>
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d003      	beq.n	800f3a8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f3a0:	f06f 0303 	mvn.w	r3, #3
 800f3a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f3a6:	e038      	b.n	800f41a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f3ac:	f107 0310 	add.w	r3, r7, #16
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	68b9      	ldr	r1, [r7, #8]
 800f3b4:	6a38      	ldr	r0, [r7, #32]
 800f3b6:	f000 fccb 	bl	800fd50 <xQueueReceiveFromISR>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d003      	beq.n	800f3c8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f3c0:	f06f 0302 	mvn.w	r3, #2
 800f3c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f3c6:	e028      	b.n	800f41a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d025      	beq.n	800f41a <osMessageQueueGet+0xce>
 800f3ce:	4b17      	ldr	r3, [pc, #92]	; (800f42c <osMessageQueueGet+0xe0>)
 800f3d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3d4:	601a      	str	r2, [r3, #0]
 800f3d6:	f3bf 8f4f 	dsb	sy
 800f3da:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f3de:	e01c      	b.n	800f41a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f3e0:	6a3b      	ldr	r3, [r7, #32]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d002      	beq.n	800f3ec <osMessageQueueGet+0xa0>
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d103      	bne.n	800f3f4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f3ec:	f06f 0303 	mvn.w	r3, #3
 800f3f0:	627b      	str	r3, [r7, #36]	; 0x24
 800f3f2:	e013      	b.n	800f41c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	68b9      	ldr	r1, [r7, #8]
 800f3f8:	6a38      	ldr	r0, [r7, #32]
 800f3fa:	f000 fbcd 	bl	800fb98 <xQueueReceive>
 800f3fe:	4603      	mov	r3, r0
 800f400:	2b01      	cmp	r3, #1
 800f402:	d00b      	beq.n	800f41c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d003      	beq.n	800f412 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f40a:	f06f 0301 	mvn.w	r3, #1
 800f40e:	627b      	str	r3, [r7, #36]	; 0x24
 800f410:	e004      	b.n	800f41c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f412:	f06f 0302 	mvn.w	r3, #2
 800f416:	627b      	str	r3, [r7, #36]	; 0x24
 800f418:	e000      	b.n	800f41c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f41a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f41e:	4618      	mov	r0, r3
 800f420:	3728      	adds	r7, #40	; 0x28
 800f422:	46bd      	mov	sp, r7
 800f424:	bd80      	pop	{r7, pc}
 800f426:	bf00      	nop
 800f428:	20000194 	.word	0x20000194
 800f42c:	e000ed04 	.word	0xe000ed04

0800f430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f430:	b480      	push	{r7}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4a07      	ldr	r2, [pc, #28]	; (800f45c <vApplicationGetIdleTaskMemory+0x2c>)
 800f440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	4a06      	ldr	r2, [pc, #24]	; (800f460 <vApplicationGetIdleTaskMemory+0x30>)
 800f446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2280      	movs	r2, #128	; 0x80
 800f44c:	601a      	str	r2, [r3, #0]
}
 800f44e:	bf00      	nop
 800f450:	3714      	adds	r7, #20
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	20000198 	.word	0x20000198
 800f460:	200001f4 	.word	0x200001f4

0800f464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f464:	b480      	push	{r7}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	4a07      	ldr	r2, [pc, #28]	; (800f490 <vApplicationGetTimerTaskMemory+0x2c>)
 800f474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	4a06      	ldr	r2, [pc, #24]	; (800f494 <vApplicationGetTimerTaskMemory+0x30>)
 800f47a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f482:	601a      	str	r2, [r3, #0]
}
 800f484:	bf00      	nop
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr
 800f490:	200003f4 	.word	0x200003f4
 800f494:	20000450 	.word	0x20000450

0800f498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f103 0208 	add.w	r2, r3, #8
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f103 0208 	add.w	r2, r3, #8
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f103 0208 	add.w	r2, r3, #8
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f4e6:	bf00      	nop
 800f4e8:	370c      	adds	r7, #12
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b085      	sub	sp, #20
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
 800f4fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	685b      	ldr	r3, [r3, #4]
 800f500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	689a      	ldr	r2, [r3, #8]
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	683a      	ldr	r2, [r7, #0]
 800f516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	683a      	ldr	r2, [r7, #0]
 800f51c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	1c5a      	adds	r2, r3, #1
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	601a      	str	r2, [r3, #0]
}
 800f52e:	bf00      	nop
 800f530:	3714      	adds	r7, #20
 800f532:	46bd      	mov	sp, r7
 800f534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f538:	4770      	bx	lr

0800f53a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f53a:	b480      	push	{r7}
 800f53c:	b085      	sub	sp, #20
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f550:	d103      	bne.n	800f55a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	691b      	ldr	r3, [r3, #16]
 800f556:	60fb      	str	r3, [r7, #12]
 800f558:	e00c      	b.n	800f574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	3308      	adds	r3, #8
 800f55e:	60fb      	str	r3, [r7, #12]
 800f560:	e002      	b.n	800f568 <vListInsert+0x2e>
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	60fb      	str	r3, [r7, #12]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	429a      	cmp	r2, r3
 800f572:	d2f6      	bcs.n	800f562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	685a      	ldr	r2, [r3, #4]
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	683a      	ldr	r2, [r7, #0]
 800f582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	68fa      	ldr	r2, [r7, #12]
 800f588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	683a      	ldr	r2, [r7, #0]
 800f58e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	1c5a      	adds	r2, r3, #1
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	601a      	str	r2, [r3, #0]
}
 800f5a0:	bf00      	nop
 800f5a2:	3714      	adds	r7, #20
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	691b      	ldr	r3, [r3, #16]
 800f5b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	6892      	ldr	r2, [r2, #8]
 800f5c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	687a      	ldr	r2, [r7, #4]
 800f5ca:	6852      	ldr	r2, [r2, #4]
 800f5cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d103      	bne.n	800f5e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	689a      	ldr	r2, [r3, #8]
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	1e5a      	subs	r2, r3, #1
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3714      	adds	r7, #20
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fe:	4770      	bx	lr

0800f600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d109      	bne.n	800f628 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f618:	f383 8811 	msr	BASEPRI, r3
 800f61c:	f3bf 8f6f 	isb	sy
 800f620:	f3bf 8f4f 	dsb	sy
 800f624:	60bb      	str	r3, [r7, #8]
 800f626:	e7fe      	b.n	800f626 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800f628:	f002 f8d0 	bl	80117cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f634:	68f9      	ldr	r1, [r7, #12]
 800f636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f638:	fb01 f303 	mul.w	r3, r1, r3
 800f63c:	441a      	add	r2, r3
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2200      	movs	r2, #0
 800f646:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681a      	ldr	r2, [r3, #0]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681a      	ldr	r2, [r3, #0]
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f658:	3b01      	subs	r3, #1
 800f65a:	68f9      	ldr	r1, [r7, #12]
 800f65c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f65e:	fb01 f303 	mul.w	r3, r1, r3
 800f662:	441a      	add	r2, r3
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	22ff      	movs	r2, #255	; 0xff
 800f66c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	22ff      	movs	r2, #255	; 0xff
 800f674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d114      	bne.n	800f6a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d01a      	beq.n	800f6bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	3310      	adds	r3, #16
 800f68a:	4618      	mov	r0, r3
 800f68c:	f001 f99c 	bl	80109c8 <xTaskRemoveFromEventList>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d012      	beq.n	800f6bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f696:	4b0d      	ldr	r3, [pc, #52]	; (800f6cc <xQueueGenericReset+0xcc>)
 800f698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f69c:	601a      	str	r2, [r3, #0]
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	e009      	b.n	800f6bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	3310      	adds	r3, #16
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7ff fef3 	bl	800f498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	3324      	adds	r3, #36	; 0x24
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7ff feee 	bl	800f498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f6bc:	f002 f8b4 	bl	8011828 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f6c0:	2301      	movs	r3, #1
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	e000ed04 	.word	0xe000ed04

0800f6d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b08e      	sub	sp, #56	; 0x38
 800f6d4:	af02      	add	r7, sp, #8
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	607a      	str	r2, [r7, #4]
 800f6dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d109      	bne.n	800f6f8 <xQueueGenericCreateStatic+0x28>
 800f6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e8:	f383 8811 	msr	BASEPRI, r3
 800f6ec:	f3bf 8f6f 	isb	sy
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800f6f6:	e7fe      	b.n	800f6f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d109      	bne.n	800f712 <xQueueGenericCreateStatic+0x42>
 800f6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f702:	f383 8811 	msr	BASEPRI, r3
 800f706:	f3bf 8f6f 	isb	sy
 800f70a:	f3bf 8f4f 	dsb	sy
 800f70e:	627b      	str	r3, [r7, #36]	; 0x24
 800f710:	e7fe      	b.n	800f710 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d002      	beq.n	800f71e <xQueueGenericCreateStatic+0x4e>
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <xQueueGenericCreateStatic+0x52>
 800f71e:	2301      	movs	r3, #1
 800f720:	e000      	b.n	800f724 <xQueueGenericCreateStatic+0x54>
 800f722:	2300      	movs	r3, #0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d109      	bne.n	800f73c <xQueueGenericCreateStatic+0x6c>
 800f728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	623b      	str	r3, [r7, #32]
 800f73a:	e7fe      	b.n	800f73a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d102      	bne.n	800f748 <xQueueGenericCreateStatic+0x78>
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d101      	bne.n	800f74c <xQueueGenericCreateStatic+0x7c>
 800f748:	2301      	movs	r3, #1
 800f74a:	e000      	b.n	800f74e <xQueueGenericCreateStatic+0x7e>
 800f74c:	2300      	movs	r3, #0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d109      	bne.n	800f766 <xQueueGenericCreateStatic+0x96>
 800f752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f756:	f383 8811 	msr	BASEPRI, r3
 800f75a:	f3bf 8f6f 	isb	sy
 800f75e:	f3bf 8f4f 	dsb	sy
 800f762:	61fb      	str	r3, [r7, #28]
 800f764:	e7fe      	b.n	800f764 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f766:	2350      	movs	r3, #80	; 0x50
 800f768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2b50      	cmp	r3, #80	; 0x50
 800f76e:	d009      	beq.n	800f784 <xQueueGenericCreateStatic+0xb4>
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	61bb      	str	r3, [r7, #24]
 800f782:	e7fe      	b.n	800f782 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f784:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f786:	683b      	ldr	r3, [r7, #0]
 800f788:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d00d      	beq.n	800f7ac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f792:	2201      	movs	r2, #1
 800f794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f798:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79e:	9300      	str	r3, [sp, #0]
 800f7a0:	4613      	mov	r3, r2
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	68b9      	ldr	r1, [r7, #8]
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f000 f844 	bl	800f834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3730      	adds	r7, #48	; 0x30
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b08a      	sub	sp, #40	; 0x28
 800f7ba:	af02      	add	r7, sp, #8
 800f7bc:	60f8      	str	r0, [r7, #12]
 800f7be:	60b9      	str	r1, [r7, #8]
 800f7c0:	4613      	mov	r3, r2
 800f7c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d109      	bne.n	800f7de <xQueueGenericCreate+0x28>
 800f7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ce:	f383 8811 	msr	BASEPRI, r3
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	f3bf 8f4f 	dsb	sy
 800f7da:	613b      	str	r3, [r7, #16]
 800f7dc:	e7fe      	b.n	800f7dc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d102      	bne.n	800f7ea <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	61fb      	str	r3, [r7, #28]
 800f7e8:	e004      	b.n	800f7f4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	68ba      	ldr	r2, [r7, #8]
 800f7ee:	fb02 f303 	mul.w	r3, r2, r3
 800f7f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	3350      	adds	r3, #80	; 0x50
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f002 f901 	bl	8011a00 <pvPortMalloc>
 800f7fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f800:	69bb      	ldr	r3, [r7, #24]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d011      	beq.n	800f82a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	3350      	adds	r3, #80	; 0x50
 800f80e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f818:	79fa      	ldrb	r2, [r7, #7]
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	4613      	mov	r3, r2
 800f820:	697a      	ldr	r2, [r7, #20]
 800f822:	68b9      	ldr	r1, [r7, #8]
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f000 f805 	bl	800f834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f82a:	69bb      	ldr	r3, [r7, #24]
	}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3720      	adds	r7, #32
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d103      	bne.n	800f850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	69ba      	ldr	r2, [r7, #24]
 800f84c:	601a      	str	r2, [r3, #0]
 800f84e:	e002      	b.n	800f856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f850:	69bb      	ldr	r3, [r7, #24]
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	68fa      	ldr	r2, [r7, #12]
 800f85a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f862:	2101      	movs	r1, #1
 800f864:	69b8      	ldr	r0, [r7, #24]
 800f866:	f7ff fecb 	bl	800f600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f86a:	69bb      	ldr	r3, [r7, #24]
 800f86c:	78fa      	ldrb	r2, [r7, #3]
 800f86e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f872:	bf00      	nop
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
	...

0800f87c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b08e      	sub	sp, #56	; 0x38
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	607a      	str	r2, [r7, #4]
 800f888:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f88a:	2300      	movs	r3, #0
 800f88c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f894:	2b00      	cmp	r3, #0
 800f896:	d109      	bne.n	800f8ac <xQueueGenericSend+0x30>
 800f898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f89c:	f383 8811 	msr	BASEPRI, r3
 800f8a0:	f3bf 8f6f 	isb	sy
 800f8a4:	f3bf 8f4f 	dsb	sy
 800f8a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8aa:	e7fe      	b.n	800f8aa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d103      	bne.n	800f8ba <xQueueGenericSend+0x3e>
 800f8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d101      	bne.n	800f8be <xQueueGenericSend+0x42>
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	e000      	b.n	800f8c0 <xQueueGenericSend+0x44>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d109      	bne.n	800f8d8 <xQueueGenericSend+0x5c>
 800f8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c8:	f383 8811 	msr	BASEPRI, r3
 800f8cc:	f3bf 8f6f 	isb	sy
 800f8d0:	f3bf 8f4f 	dsb	sy
 800f8d4:	627b      	str	r3, [r7, #36]	; 0x24
 800f8d6:	e7fe      	b.n	800f8d6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	2b02      	cmp	r3, #2
 800f8dc:	d103      	bne.n	800f8e6 <xQueueGenericSend+0x6a>
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8e2:	2b01      	cmp	r3, #1
 800f8e4:	d101      	bne.n	800f8ea <xQueueGenericSend+0x6e>
 800f8e6:	2301      	movs	r3, #1
 800f8e8:	e000      	b.n	800f8ec <xQueueGenericSend+0x70>
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d109      	bne.n	800f904 <xQueueGenericSend+0x88>
 800f8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f4:	f383 8811 	msr	BASEPRI, r3
 800f8f8:	f3bf 8f6f 	isb	sy
 800f8fc:	f3bf 8f4f 	dsb	sy
 800f900:	623b      	str	r3, [r7, #32]
 800f902:	e7fe      	b.n	800f902 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f904:	f001 fa16 	bl	8010d34 <xTaskGetSchedulerState>
 800f908:	4603      	mov	r3, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d102      	bne.n	800f914 <xQueueGenericSend+0x98>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d101      	bne.n	800f918 <xQueueGenericSend+0x9c>
 800f914:	2301      	movs	r3, #1
 800f916:	e000      	b.n	800f91a <xQueueGenericSend+0x9e>
 800f918:	2300      	movs	r3, #0
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d109      	bne.n	800f932 <xQueueGenericSend+0xb6>
 800f91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f922:	f383 8811 	msr	BASEPRI, r3
 800f926:	f3bf 8f6f 	isb	sy
 800f92a:	f3bf 8f4f 	dsb	sy
 800f92e:	61fb      	str	r3, [r7, #28]
 800f930:	e7fe      	b.n	800f930 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f932:	f001 ff4b 	bl	80117cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f93e:	429a      	cmp	r2, r3
 800f940:	d302      	bcc.n	800f948 <xQueueGenericSend+0xcc>
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	2b02      	cmp	r3, #2
 800f946:	d129      	bne.n	800f99c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f948:	683a      	ldr	r2, [r7, #0]
 800f94a:	68b9      	ldr	r1, [r7, #8]
 800f94c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f94e:	f000 fa7c 	bl	800fe4a <prvCopyDataToQueue>
 800f952:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d010      	beq.n	800f97e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95e:	3324      	adds	r3, #36	; 0x24
 800f960:	4618      	mov	r0, r3
 800f962:	f001 f831 	bl	80109c8 <xTaskRemoveFromEventList>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d013      	beq.n	800f994 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f96c:	4b3f      	ldr	r3, [pc, #252]	; (800fa6c <xQueueGenericSend+0x1f0>)
 800f96e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f972:	601a      	str	r2, [r3, #0]
 800f974:	f3bf 8f4f 	dsb	sy
 800f978:	f3bf 8f6f 	isb	sy
 800f97c:	e00a      	b.n	800f994 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f980:	2b00      	cmp	r3, #0
 800f982:	d007      	beq.n	800f994 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f984:	4b39      	ldr	r3, [pc, #228]	; (800fa6c <xQueueGenericSend+0x1f0>)
 800f986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f98a:	601a      	str	r2, [r3, #0]
 800f98c:	f3bf 8f4f 	dsb	sy
 800f990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f994:	f001 ff48 	bl	8011828 <vPortExitCritical>
				return pdPASS;
 800f998:	2301      	movs	r3, #1
 800f99a:	e063      	b.n	800fa64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d103      	bne.n	800f9aa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f9a2:	f001 ff41 	bl	8011828 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	e05c      	b.n	800fa64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d106      	bne.n	800f9be <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f9b0:	f107 0314 	add.w	r3, r7, #20
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f001 f869 	bl	8010a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f9be:	f001 ff33 	bl	8011828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f9c2:	f000 fde5 	bl	8010590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f9c6:	f001 ff01 	bl	80117cc <vPortEnterCritical>
 800f9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9d0:	b25b      	sxtb	r3, r3
 800f9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9d6:	d103      	bne.n	800f9e0 <xQueueGenericSend+0x164>
 800f9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9da:	2200      	movs	r2, #0
 800f9dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9e6:	b25b      	sxtb	r3, r3
 800f9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ec:	d103      	bne.n	800f9f6 <xQueueGenericSend+0x17a>
 800f9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f9f6:	f001 ff17 	bl	8011828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f9fa:	1d3a      	adds	r2, r7, #4
 800f9fc:	f107 0314 	add.w	r3, r7, #20
 800fa00:	4611      	mov	r1, r2
 800fa02:	4618      	mov	r0, r3
 800fa04:	f001 f858 	bl	8010ab8 <xTaskCheckForTimeOut>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d124      	bne.n	800fa58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fa0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa10:	f000 fb13 	bl	801003a <prvIsQueueFull>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d018      	beq.n	800fa4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa1c:	3310      	adds	r3, #16
 800fa1e:	687a      	ldr	r2, [r7, #4]
 800fa20:	4611      	mov	r1, r2
 800fa22:	4618      	mov	r0, r3
 800fa24:	f000 ff82 	bl	801092c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fa28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa2a:	f000 fa9e 	bl	800ff6a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fa2e:	f000 fdbd 	bl	80105ac <xTaskResumeAll>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f47f af7c 	bne.w	800f932 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800fa3a:	4b0c      	ldr	r3, [pc, #48]	; (800fa6c <xQueueGenericSend+0x1f0>)
 800fa3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa40:	601a      	str	r2, [r3, #0]
 800fa42:	f3bf 8f4f 	dsb	sy
 800fa46:	f3bf 8f6f 	isb	sy
 800fa4a:	e772      	b.n	800f932 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fa4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa4e:	f000 fa8c 	bl	800ff6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fa52:	f000 fdab 	bl	80105ac <xTaskResumeAll>
 800fa56:	e76c      	b.n	800f932 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fa58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fa5a:	f000 fa86 	bl	800ff6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fa5e:	f000 fda5 	bl	80105ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fa62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	3738      	adds	r7, #56	; 0x38
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	bd80      	pop	{r7, pc}
 800fa6c:	e000ed04 	.word	0xe000ed04

0800fa70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b08e      	sub	sp, #56	; 0x38
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	607a      	str	r2, [r7, #4]
 800fa7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d109      	bne.n	800fa9c <xQueueGenericSendFromISR+0x2c>
 800fa88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa8c:	f383 8811 	msr	BASEPRI, r3
 800fa90:	f3bf 8f6f 	isb	sy
 800fa94:	f3bf 8f4f 	dsb	sy
 800fa98:	627b      	str	r3, [r7, #36]	; 0x24
 800fa9a:	e7fe      	b.n	800fa9a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d103      	bne.n	800faaa <xQueueGenericSendFromISR+0x3a>
 800faa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d101      	bne.n	800faae <xQueueGenericSendFromISR+0x3e>
 800faaa:	2301      	movs	r3, #1
 800faac:	e000      	b.n	800fab0 <xQueueGenericSendFromISR+0x40>
 800faae:	2300      	movs	r3, #0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d109      	bne.n	800fac8 <xQueueGenericSendFromISR+0x58>
 800fab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab8:	f383 8811 	msr	BASEPRI, r3
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f3bf 8f4f 	dsb	sy
 800fac4:	623b      	str	r3, [r7, #32]
 800fac6:	e7fe      	b.n	800fac6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	2b02      	cmp	r3, #2
 800facc:	d103      	bne.n	800fad6 <xQueueGenericSendFromISR+0x66>
 800face:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d101      	bne.n	800fada <xQueueGenericSendFromISR+0x6a>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e000      	b.n	800fadc <xQueueGenericSendFromISR+0x6c>
 800fada:	2300      	movs	r3, #0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d109      	bne.n	800faf4 <xQueueGenericSendFromISR+0x84>
 800fae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fae4:	f383 8811 	msr	BASEPRI, r3
 800fae8:	f3bf 8f6f 	isb	sy
 800faec:	f3bf 8f4f 	dsb	sy
 800faf0:	61fb      	str	r3, [r7, #28]
 800faf2:	e7fe      	b.n	800faf2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800faf4:	f001 ff46 	bl	8011984 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800faf8:	f3ef 8211 	mrs	r2, BASEPRI
 800fafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb00:	f383 8811 	msr	BASEPRI, r3
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	61ba      	str	r2, [r7, #24]
 800fb0e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fb10:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fb12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d302      	bcc.n	800fb26 <xQueueGenericSendFromISR+0xb6>
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	d12c      	bne.n	800fb80 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb30:	683a      	ldr	r2, [r7, #0]
 800fb32:	68b9      	ldr	r1, [r7, #8]
 800fb34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fb36:	f000 f988 	bl	800fe4a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fb3a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb42:	d112      	bne.n	800fb6a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d016      	beq.n	800fb7a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb4e:	3324      	adds	r3, #36	; 0x24
 800fb50:	4618      	mov	r0, r3
 800fb52:	f000 ff39 	bl	80109c8 <xTaskRemoveFromEventList>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00e      	beq.n	800fb7a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00b      	beq.n	800fb7a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2201      	movs	r2, #1
 800fb66:	601a      	str	r2, [r3, #0]
 800fb68:	e007      	b.n	800fb7a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fb6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb6e:	3301      	adds	r3, #1
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	b25a      	sxtb	r2, r3
 800fb74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800fb7e:	e001      	b.n	800fb84 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fb80:	2300      	movs	r3, #0
 800fb82:	637b      	str	r3, [r7, #52]	; 0x34
 800fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb86:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3738      	adds	r7, #56	; 0x38
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b08c      	sub	sp, #48	; 0x30
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fba4:	2300      	movs	r3, #0
 800fba6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d109      	bne.n	800fbc6 <xQueueReceive+0x2e>
	__asm volatile
 800fbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb6:	f383 8811 	msr	BASEPRI, r3
 800fbba:	f3bf 8f6f 	isb	sy
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	623b      	str	r3, [r7, #32]
 800fbc4:	e7fe      	b.n	800fbc4 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d103      	bne.n	800fbd4 <xQueueReceive+0x3c>
 800fbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d101      	bne.n	800fbd8 <xQueueReceive+0x40>
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	e000      	b.n	800fbda <xQueueReceive+0x42>
 800fbd8:	2300      	movs	r3, #0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d109      	bne.n	800fbf2 <xQueueReceive+0x5a>
 800fbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe2:	f383 8811 	msr	BASEPRI, r3
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	61fb      	str	r3, [r7, #28]
 800fbf0:	e7fe      	b.n	800fbf0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fbf2:	f001 f89f 	bl	8010d34 <xTaskGetSchedulerState>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d102      	bne.n	800fc02 <xQueueReceive+0x6a>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <xQueueReceive+0x6e>
 800fc02:	2301      	movs	r3, #1
 800fc04:	e000      	b.n	800fc08 <xQueueReceive+0x70>
 800fc06:	2300      	movs	r3, #0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d109      	bne.n	800fc20 <xQueueReceive+0x88>
 800fc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	61bb      	str	r3, [r7, #24]
 800fc1e:	e7fe      	b.n	800fc1e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc20:	f001 fdd4 	bl	80117cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc28:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d01f      	beq.n	800fc70 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc34:	f000 f973 	bl	800ff1e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc3a:	1e5a      	subs	r2, r3, #1
 800fc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc42:	691b      	ldr	r3, [r3, #16]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00f      	beq.n	800fc68 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4a:	3310      	adds	r3, #16
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f000 febb 	bl	80109c8 <xTaskRemoveFromEventList>
 800fc52:	4603      	mov	r3, r0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d007      	beq.n	800fc68 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fc58:	4b3c      	ldr	r3, [pc, #240]	; (800fd4c <xQueueReceive+0x1b4>)
 800fc5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc5e:	601a      	str	r2, [r3, #0]
 800fc60:	f3bf 8f4f 	dsb	sy
 800fc64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fc68:	f001 fdde 	bl	8011828 <vPortExitCritical>
				return pdPASS;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e069      	b.n	800fd44 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d103      	bne.n	800fc7e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc76:	f001 fdd7 	bl	8011828 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	e062      	b.n	800fd44 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d106      	bne.n	800fc92 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc84:	f107 0310 	add.w	r3, r7, #16
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f000 feff 	bl	8010a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc8e:	2301      	movs	r3, #1
 800fc90:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc92:	f001 fdc9 	bl	8011828 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc96:	f000 fc7b 	bl	8010590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc9a:	f001 fd97 	bl	80117cc <vPortEnterCritical>
 800fc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fca4:	b25b      	sxtb	r3, r3
 800fca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcaa:	d103      	bne.n	800fcb4 <xQueueReceive+0x11c>
 800fcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fcba:	b25b      	sxtb	r3, r3
 800fcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc0:	d103      	bne.n	800fcca <xQueueReceive+0x132>
 800fcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcca:	f001 fdad 	bl	8011828 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fcce:	1d3a      	adds	r2, r7, #4
 800fcd0:	f107 0310 	add.w	r3, r7, #16
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f000 feee 	bl	8010ab8 <xTaskCheckForTimeOut>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d123      	bne.n	800fd2a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fce4:	f000 f993 	bl	801000e <prvIsQueueEmpty>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d017      	beq.n	800fd1e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf0:	3324      	adds	r3, #36	; 0x24
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f000 fe18 	bl	801092c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fcfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcfe:	f000 f934 	bl	800ff6a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd02:	f000 fc53 	bl	80105ac <xTaskResumeAll>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d189      	bne.n	800fc20 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800fd0c:	4b0f      	ldr	r3, [pc, #60]	; (800fd4c <xQueueReceive+0x1b4>)
 800fd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd12:	601a      	str	r2, [r3, #0]
 800fd14:	f3bf 8f4f 	dsb	sy
 800fd18:	f3bf 8f6f 	isb	sy
 800fd1c:	e780      	b.n	800fc20 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd20:	f000 f923 	bl	800ff6a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd24:	f000 fc42 	bl	80105ac <xTaskResumeAll>
 800fd28:	e77a      	b.n	800fc20 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fd2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd2c:	f000 f91d 	bl	800ff6a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd30:	f000 fc3c 	bl	80105ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd36:	f000 f96a 	bl	801000e <prvIsQueueEmpty>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	f43f af6f 	beq.w	800fc20 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fd42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3730      	adds	r7, #48	; 0x30
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	e000ed04 	.word	0xe000ed04

0800fd50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08e      	sub	sp, #56	; 0x38
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d109      	bne.n	800fd7a <xQueueReceiveFromISR+0x2a>
 800fd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6a:	f383 8811 	msr	BASEPRI, r3
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	f3bf 8f4f 	dsb	sy
 800fd76:	623b      	str	r3, [r7, #32]
 800fd78:	e7fe      	b.n	800fd78 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd7a:	68bb      	ldr	r3, [r7, #8]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d103      	bne.n	800fd88 <xQueueReceiveFromISR+0x38>
 800fd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d101      	bne.n	800fd8c <xQueueReceiveFromISR+0x3c>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e000      	b.n	800fd8e <xQueueReceiveFromISR+0x3e>
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d109      	bne.n	800fda6 <xQueueReceiveFromISR+0x56>
 800fd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd96:	f383 8811 	msr	BASEPRI, r3
 800fd9a:	f3bf 8f6f 	isb	sy
 800fd9e:	f3bf 8f4f 	dsb	sy
 800fda2:	61fb      	str	r3, [r7, #28]
 800fda4:	e7fe      	b.n	800fda4 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fda6:	f001 fded 	bl	8011984 <vPortValidateInterruptPriority>
	__asm volatile
 800fdaa:	f3ef 8211 	mrs	r2, BASEPRI
 800fdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb2:	f383 8811 	msr	BASEPRI, r3
 800fdb6:	f3bf 8f6f 	isb	sy
 800fdba:	f3bf 8f4f 	dsb	sy
 800fdbe:	61ba      	str	r2, [r7, #24]
 800fdc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fdc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d02f      	beq.n	800fe32 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fdd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fddc:	68b9      	ldr	r1, [r7, #8]
 800fdde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fde0:	f000 f89d 	bl	800ff1e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde6:	1e5a      	subs	r2, r3, #1
 800fde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fdec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fdf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf4:	d112      	bne.n	800fe1c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	691b      	ldr	r3, [r3, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d016      	beq.n	800fe2c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe00:	3310      	adds	r3, #16
 800fe02:	4618      	mov	r0, r3
 800fe04:	f000 fde0 	bl	80109c8 <xTaskRemoveFromEventList>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d00e      	beq.n	800fe2c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d00b      	beq.n	800fe2c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2201      	movs	r2, #1
 800fe18:	601a      	str	r2, [r3, #0]
 800fe1a:	e007      	b.n	800fe2c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fe1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe20:	3301      	adds	r3, #1
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	b25a      	sxtb	r2, r3
 800fe26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	637b      	str	r3, [r7, #52]	; 0x34
 800fe30:	e001      	b.n	800fe36 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800fe32:	2300      	movs	r3, #0
 800fe34:	637b      	str	r3, [r7, #52]	; 0x34
 800fe36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3738      	adds	r7, #56	; 0x38
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b086      	sub	sp, #24
 800fe4e:	af00      	add	r7, sp, #0
 800fe50:	60f8      	str	r0, [r7, #12]
 800fe52:	60b9      	str	r1, [r7, #8]
 800fe54:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fe56:	2300      	movs	r3, #0
 800fe58:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe5e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10d      	bne.n	800fe84 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d14d      	bne.n	800ff0c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	689b      	ldr	r3, [r3, #8]
 800fe74:	4618      	mov	r0, r3
 800fe76:	f000 ff7b 	bl	8010d70 <xTaskPriorityDisinherit>
 800fe7a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	609a      	str	r2, [r3, #8]
 800fe82:	e043      	b.n	800ff0c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d119      	bne.n	800febe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	6858      	ldr	r0, [r3, #4]
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe92:	461a      	mov	r2, r3
 800fe94:	68b9      	ldr	r1, [r7, #8]
 800fe96:	f002 fac5 	bl	8012424 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	685a      	ldr	r2, [r3, #4]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fea2:	441a      	add	r2, r3
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	685a      	ldr	r2, [r3, #4]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	689b      	ldr	r3, [r3, #8]
 800feb0:	429a      	cmp	r2, r3
 800feb2:	d32b      	bcc.n	800ff0c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	605a      	str	r2, [r3, #4]
 800febc:	e026      	b.n	800ff0c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	68d8      	ldr	r0, [r3, #12]
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec6:	461a      	mov	r2, r3
 800fec8:	68b9      	ldr	r1, [r7, #8]
 800feca:	f002 faab 	bl	8012424 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	68da      	ldr	r2, [r3, #12]
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fed6:	425b      	negs	r3, r3
 800fed8:	441a      	add	r2, r3
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	68da      	ldr	r2, [r3, #12]
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d207      	bcs.n	800fefa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	689a      	ldr	r2, [r3, #8]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fef2:	425b      	negs	r3, r3
 800fef4:	441a      	add	r2, r3
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d105      	bne.n	800ff0c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d002      	beq.n	800ff0c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ff06:	693b      	ldr	r3, [r7, #16]
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	1c5a      	adds	r2, r3, #1
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ff14:	697b      	ldr	r3, [r7, #20]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3718      	adds	r7, #24
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}

0800ff1e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ff1e:	b580      	push	{r7, lr}
 800ff20:	b082      	sub	sp, #8
 800ff22:	af00      	add	r7, sp, #0
 800ff24:	6078      	str	r0, [r7, #4]
 800ff26:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d018      	beq.n	800ff62 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	68da      	ldr	r2, [r3, #12]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff38:	441a      	add	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	68da      	ldr	r2, [r3, #12]
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	689b      	ldr	r3, [r3, #8]
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d303      	bcc.n	800ff52 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	68d9      	ldr	r1, [r3, #12]
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	6838      	ldr	r0, [r7, #0]
 800ff5e:	f002 fa61 	bl	8012424 <memcpy>
	}
}
 800ff62:	bf00      	nop
 800ff64:	3708      	adds	r7, #8
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b084      	sub	sp, #16
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ff72:	f001 fc2b 	bl	80117cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff7c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ff7e:	e011      	b.n	800ffa4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d012      	beq.n	800ffae <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	3324      	adds	r3, #36	; 0x24
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	f000 fd1b 	bl	80109c8 <xTaskRemoveFromEventList>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ff98:	f000 fdee 	bl	8010b78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ffa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	dce9      	bgt.n	800ff80 <prvUnlockQueue+0x16>
 800ffac:	e000      	b.n	800ffb0 <prvUnlockQueue+0x46>
					break;
 800ffae:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	22ff      	movs	r2, #255	; 0xff
 800ffb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ffb8:	f001 fc36 	bl	8011828 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ffbc:	f001 fc06 	bl	80117cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ffc6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ffc8:	e011      	b.n	800ffee <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	691b      	ldr	r3, [r3, #16]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d012      	beq.n	800fff8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3310      	adds	r3, #16
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f000 fcf6 	bl	80109c8 <xTaskRemoveFromEventList>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ffe2:	f000 fdc9 	bl	8010b78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ffe6:	7bbb      	ldrb	r3, [r7, #14]
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ffee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	dce9      	bgt.n	800ffca <prvUnlockQueue+0x60>
 800fff6:	e000      	b.n	800fffa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fff8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	22ff      	movs	r2, #255	; 0xff
 800fffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010002:	f001 fc11 	bl	8011828 <vPortExitCritical>
}
 8010006:	bf00      	nop
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}

0801000e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b084      	sub	sp, #16
 8010012:	af00      	add	r7, sp, #0
 8010014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010016:	f001 fbd9 	bl	80117cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001e:	2b00      	cmp	r3, #0
 8010020:	d102      	bne.n	8010028 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010022:	2301      	movs	r3, #1
 8010024:	60fb      	str	r3, [r7, #12]
 8010026:	e001      	b.n	801002c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010028:	2300      	movs	r3, #0
 801002a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801002c:	f001 fbfc 	bl	8011828 <vPortExitCritical>

	return xReturn;
 8010030:	68fb      	ldr	r3, [r7, #12]
}
 8010032:	4618      	mov	r0, r3
 8010034:	3710      	adds	r7, #16
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b084      	sub	sp, #16
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010042:	f001 fbc3 	bl	80117cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801004e:	429a      	cmp	r2, r3
 8010050:	d102      	bne.n	8010058 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010052:	2301      	movs	r3, #1
 8010054:	60fb      	str	r3, [r7, #12]
 8010056:	e001      	b.n	801005c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010058:	2300      	movs	r3, #0
 801005a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801005c:	f001 fbe4 	bl	8011828 <vPortExitCritical>

	return xReturn;
 8010060:	68fb      	ldr	r3, [r7, #12]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3710      	adds	r7, #16
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
	...

0801006c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010076:	2300      	movs	r3, #0
 8010078:	60fb      	str	r3, [r7, #12]
 801007a:	e014      	b.n	80100a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801007c:	4a0e      	ldr	r2, [pc, #56]	; (80100b8 <vQueueAddToRegistry+0x4c>)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d10b      	bne.n	80100a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010088:	490b      	ldr	r1, [pc, #44]	; (80100b8 <vQueueAddToRegistry+0x4c>)
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	683a      	ldr	r2, [r7, #0]
 801008e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010092:	4a09      	ldr	r2, [pc, #36]	; (80100b8 <vQueueAddToRegistry+0x4c>)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	4413      	add	r3, r2
 801009a:	687a      	ldr	r2, [r7, #4]
 801009c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801009e:	e005      	b.n	80100ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	3301      	adds	r3, #1
 80100a4:	60fb      	str	r3, [r7, #12]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2b07      	cmp	r3, #7
 80100aa:	d9e7      	bls.n	801007c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80100ac:	bf00      	nop
 80100ae:	3714      	adds	r7, #20
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr
 80100b8:	20005358 	.word	0x20005358

080100bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b086      	sub	sp, #24
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	60f8      	str	r0, [r7, #12]
 80100c4:	60b9      	str	r1, [r7, #8]
 80100c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80100cc:	f001 fb7e 	bl	80117cc <vPortEnterCritical>
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100d6:	b25b      	sxtb	r3, r3
 80100d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100dc:	d103      	bne.n	80100e6 <vQueueWaitForMessageRestricted+0x2a>
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	2200      	movs	r2, #0
 80100e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80100ec:	b25b      	sxtb	r3, r3
 80100ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100f2:	d103      	bne.n	80100fc <vQueueWaitForMessageRestricted+0x40>
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	2200      	movs	r2, #0
 80100f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100fc:	f001 fb94 	bl	8011828 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010104:	2b00      	cmp	r3, #0
 8010106:	d106      	bne.n	8010116 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	3324      	adds	r3, #36	; 0x24
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	68b9      	ldr	r1, [r7, #8]
 8010110:	4618      	mov	r0, r3
 8010112:	f000 fc2f 	bl	8010974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010116:	6978      	ldr	r0, [r7, #20]
 8010118:	f7ff ff27 	bl	800ff6a <prvUnlockQueue>
	}
 801011c:	bf00      	nop
 801011e:	3718      	adds	r7, #24
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}

08010124 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010124:	b580      	push	{r7, lr}
 8010126:	b08e      	sub	sp, #56	; 0x38
 8010128:	af04      	add	r7, sp, #16
 801012a:	60f8      	str	r0, [r7, #12]
 801012c:	60b9      	str	r1, [r7, #8]
 801012e:	607a      	str	r2, [r7, #4]
 8010130:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010134:	2b00      	cmp	r3, #0
 8010136:	d109      	bne.n	801014c <xTaskCreateStatic+0x28>
	__asm volatile
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	f383 8811 	msr	BASEPRI, r3
 8010140:	f3bf 8f6f 	isb	sy
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	623b      	str	r3, [r7, #32]
 801014a:	e7fe      	b.n	801014a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 801014c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014e:	2b00      	cmp	r3, #0
 8010150:	d109      	bne.n	8010166 <xTaskCreateStatic+0x42>
 8010152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010156:	f383 8811 	msr	BASEPRI, r3
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	f3bf 8f4f 	dsb	sy
 8010162:	61fb      	str	r3, [r7, #28]
 8010164:	e7fe      	b.n	8010164 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010166:	235c      	movs	r3, #92	; 0x5c
 8010168:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	2b5c      	cmp	r3, #92	; 0x5c
 801016e:	d009      	beq.n	8010184 <xTaskCreateStatic+0x60>
 8010170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010174:	f383 8811 	msr	BASEPRI, r3
 8010178:	f3bf 8f6f 	isb	sy
 801017c:	f3bf 8f4f 	dsb	sy
 8010180:	61bb      	str	r3, [r7, #24]
 8010182:	e7fe      	b.n	8010182 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010184:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010188:	2b00      	cmp	r3, #0
 801018a:	d01e      	beq.n	80101ca <xTaskCreateStatic+0xa6>
 801018c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018e:	2b00      	cmp	r3, #0
 8010190:	d01b      	beq.n	80101ca <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010194:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801019a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801019c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019e:	2202      	movs	r2, #2
 80101a0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80101a4:	2300      	movs	r3, #0
 80101a6:	9303      	str	r3, [sp, #12]
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	9302      	str	r3, [sp, #8]
 80101ac:	f107 0314 	add.w	r3, r7, #20
 80101b0:	9301      	str	r3, [sp, #4]
 80101b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b4:	9300      	str	r3, [sp, #0]
 80101b6:	683b      	ldr	r3, [r7, #0]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	68b9      	ldr	r1, [r7, #8]
 80101bc:	68f8      	ldr	r0, [r7, #12]
 80101be:	f000 f850 	bl	8010262 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80101c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101c4:	f000 f8dc 	bl	8010380 <prvAddNewTaskToReadyList>
 80101c8:	e001      	b.n	80101ce <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80101ca:	2300      	movs	r3, #0
 80101cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80101ce:	697b      	ldr	r3, [r7, #20]
	}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3728      	adds	r7, #40	; 0x28
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b08c      	sub	sp, #48	; 0x30
 80101dc:	af04      	add	r7, sp, #16
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	603b      	str	r3, [r7, #0]
 80101e4:	4613      	mov	r3, r2
 80101e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80101e8:	88fb      	ldrh	r3, [r7, #6]
 80101ea:	009b      	lsls	r3, r3, #2
 80101ec:	4618      	mov	r0, r3
 80101ee:	f001 fc07 	bl	8011a00 <pvPortMalloc>
 80101f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d00e      	beq.n	8010218 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80101fa:	205c      	movs	r0, #92	; 0x5c
 80101fc:	f001 fc00 	bl	8011a00 <pvPortMalloc>
 8010200:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d003      	beq.n	8010210 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010208:	69fb      	ldr	r3, [r7, #28]
 801020a:	697a      	ldr	r2, [r7, #20]
 801020c:	631a      	str	r2, [r3, #48]	; 0x30
 801020e:	e005      	b.n	801021c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010210:	6978      	ldr	r0, [r7, #20]
 8010212:	f001 fcb7 	bl	8011b84 <vPortFree>
 8010216:	e001      	b.n	801021c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010218:	2300      	movs	r3, #0
 801021a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d017      	beq.n	8010252 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	2200      	movs	r2, #0
 8010226:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801022a:	88fa      	ldrh	r2, [r7, #6]
 801022c:	2300      	movs	r3, #0
 801022e:	9303      	str	r3, [sp, #12]
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	9302      	str	r3, [sp, #8]
 8010234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010236:	9301      	str	r3, [sp, #4]
 8010238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	68b9      	ldr	r1, [r7, #8]
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f000 f80e 	bl	8010262 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010246:	69f8      	ldr	r0, [r7, #28]
 8010248:	f000 f89a 	bl	8010380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801024c:	2301      	movs	r3, #1
 801024e:	61bb      	str	r3, [r7, #24]
 8010250:	e002      	b.n	8010258 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010252:	f04f 33ff 	mov.w	r3, #4294967295
 8010256:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010258:	69bb      	ldr	r3, [r7, #24]
	}
 801025a:	4618      	mov	r0, r3
 801025c:	3720      	adds	r7, #32
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}

08010262 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010262:	b580      	push	{r7, lr}
 8010264:	b088      	sub	sp, #32
 8010266:	af00      	add	r7, sp, #0
 8010268:	60f8      	str	r0, [r7, #12]
 801026a:	60b9      	str	r1, [r7, #8]
 801026c:	607a      	str	r2, [r7, #4]
 801026e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010272:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	009b      	lsls	r3, r3, #2
 8010278:	461a      	mov	r2, r3
 801027a:	21a5      	movs	r1, #165	; 0xa5
 801027c:	f002 f8dd 	bl	801243a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801028a:	3b01      	subs	r3, #1
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	f023 0307 	bic.w	r3, r3, #7
 8010298:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801029a:	69bb      	ldr	r3, [r7, #24]
 801029c:	f003 0307 	and.w	r3, r3, #7
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d009      	beq.n	80102b8 <prvInitialiseNewTask+0x56>
 80102a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a8:	f383 8811 	msr	BASEPRI, r3
 80102ac:	f3bf 8f6f 	isb	sy
 80102b0:	f3bf 8f4f 	dsb	sy
 80102b4:	617b      	str	r3, [r7, #20]
 80102b6:	e7fe      	b.n	80102b6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d01f      	beq.n	80102fe <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102be:	2300      	movs	r3, #0
 80102c0:	61fb      	str	r3, [r7, #28]
 80102c2:	e012      	b.n	80102ea <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	4413      	add	r3, r2
 80102ca:	7819      	ldrb	r1, [r3, #0]
 80102cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	4413      	add	r3, r2
 80102d2:	3334      	adds	r3, #52	; 0x34
 80102d4:	460a      	mov	r2, r1
 80102d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	4413      	add	r3, r2
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d006      	beq.n	80102f2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	3301      	adds	r3, #1
 80102e8:	61fb      	str	r3, [r7, #28]
 80102ea:	69fb      	ldr	r3, [r7, #28]
 80102ec:	2b0f      	cmp	r3, #15
 80102ee:	d9e9      	bls.n	80102c4 <prvInitialiseNewTask+0x62>
 80102f0:	e000      	b.n	80102f4 <prvInitialiseNewTask+0x92>
			{
				break;
 80102f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80102f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80102fc:	e003      	b.n	8010306 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80102fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010300:	2200      	movs	r2, #0
 8010302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010308:	2b37      	cmp	r3, #55	; 0x37
 801030a:	d901      	bls.n	8010310 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801030c:	2337      	movs	r3, #55	; 0x37
 801030e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801031a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801031c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031e:	2200      	movs	r2, #0
 8010320:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	3304      	adds	r3, #4
 8010326:	4618      	mov	r0, r3
 8010328:	f7ff f8d6 	bl	800f4d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032e:	3318      	adds	r3, #24
 8010330:	4618      	mov	r0, r3
 8010332:	f7ff f8d1 	bl	800f4d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801033a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801033c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801034a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801034c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034e:	2200      	movs	r2, #0
 8010350:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010354:	2200      	movs	r2, #0
 8010356:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801035a:	683a      	ldr	r2, [r7, #0]
 801035c:	68f9      	ldr	r1, [r7, #12]
 801035e:	69b8      	ldr	r0, [r7, #24]
 8010360:	f001 f90c 	bl	801157c <pxPortInitialiseStack>
 8010364:	4602      	mov	r2, r0
 8010366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010368:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801036a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801036c:	2b00      	cmp	r3, #0
 801036e:	d002      	beq.n	8010376 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010376:	bf00      	nop
 8010378:	3720      	adds	r7, #32
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
	...

08010380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010388:	f001 fa20 	bl	80117cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801038c:	4b2d      	ldr	r3, [pc, #180]	; (8010444 <prvAddNewTaskToReadyList+0xc4>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	3301      	adds	r3, #1
 8010392:	4a2c      	ldr	r2, [pc, #176]	; (8010444 <prvAddNewTaskToReadyList+0xc4>)
 8010394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010396:	4b2c      	ldr	r3, [pc, #176]	; (8010448 <prvAddNewTaskToReadyList+0xc8>)
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d109      	bne.n	80103b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801039e:	4a2a      	ldr	r2, [pc, #168]	; (8010448 <prvAddNewTaskToReadyList+0xc8>)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80103a4:	4b27      	ldr	r3, [pc, #156]	; (8010444 <prvAddNewTaskToReadyList+0xc4>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d110      	bne.n	80103ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80103ac:	f000 fc08 	bl	8010bc0 <prvInitialiseTaskLists>
 80103b0:	e00d      	b.n	80103ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80103b2:	4b26      	ldr	r3, [pc, #152]	; (801044c <prvAddNewTaskToReadyList+0xcc>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d109      	bne.n	80103ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80103ba:	4b23      	ldr	r3, [pc, #140]	; (8010448 <prvAddNewTaskToReadyList+0xc8>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d802      	bhi.n	80103ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80103c8:	4a1f      	ldr	r2, [pc, #124]	; (8010448 <prvAddNewTaskToReadyList+0xc8>)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80103ce:	4b20      	ldr	r3, [pc, #128]	; (8010450 <prvAddNewTaskToReadyList+0xd0>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	3301      	adds	r3, #1
 80103d4:	4a1e      	ldr	r2, [pc, #120]	; (8010450 <prvAddNewTaskToReadyList+0xd0>)
 80103d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80103d8:	4b1d      	ldr	r3, [pc, #116]	; (8010450 <prvAddNewTaskToReadyList+0xd0>)
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103e4:	4b1b      	ldr	r3, [pc, #108]	; (8010454 <prvAddNewTaskToReadyList+0xd4>)
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d903      	bls.n	80103f4 <prvAddNewTaskToReadyList+0x74>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103f0:	4a18      	ldr	r2, [pc, #96]	; (8010454 <prvAddNewTaskToReadyList+0xd4>)
 80103f2:	6013      	str	r3, [r2, #0]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103f8:	4613      	mov	r3, r2
 80103fa:	009b      	lsls	r3, r3, #2
 80103fc:	4413      	add	r3, r2
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	4a15      	ldr	r2, [pc, #84]	; (8010458 <prvAddNewTaskToReadyList+0xd8>)
 8010402:	441a      	add	r2, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	3304      	adds	r3, #4
 8010408:	4619      	mov	r1, r3
 801040a:	4610      	mov	r0, r2
 801040c:	f7ff f871 	bl	800f4f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010410:	f001 fa0a 	bl	8011828 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010414:	4b0d      	ldr	r3, [pc, #52]	; (801044c <prvAddNewTaskToReadyList+0xcc>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00e      	beq.n	801043a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801041c:	4b0a      	ldr	r3, [pc, #40]	; (8010448 <prvAddNewTaskToReadyList+0xc8>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010426:	429a      	cmp	r2, r3
 8010428:	d207      	bcs.n	801043a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801042a:	4b0c      	ldr	r3, [pc, #48]	; (801045c <prvAddNewTaskToReadyList+0xdc>)
 801042c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010430:	601a      	str	r2, [r3, #0]
 8010432:	f3bf 8f4f 	dsb	sy
 8010436:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801043a:	bf00      	nop
 801043c:	3708      	adds	r7, #8
 801043e:	46bd      	mov	sp, r7
 8010440:	bd80      	pop	{r7, pc}
 8010442:	bf00      	nop
 8010444:	20000d24 	.word	0x20000d24
 8010448:	20000850 	.word	0x20000850
 801044c:	20000d30 	.word	0x20000d30
 8010450:	20000d40 	.word	0x20000d40
 8010454:	20000d2c 	.word	0x20000d2c
 8010458:	20000854 	.word	0x20000854
 801045c:	e000ed04 	.word	0xe000ed04

08010460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010468:	2300      	movs	r3, #0
 801046a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d016      	beq.n	80104a0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010472:	4b13      	ldr	r3, [pc, #76]	; (80104c0 <vTaskDelay+0x60>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d009      	beq.n	801048e <vTaskDelay+0x2e>
 801047a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047e:	f383 8811 	msr	BASEPRI, r3
 8010482:	f3bf 8f6f 	isb	sy
 8010486:	f3bf 8f4f 	dsb	sy
 801048a:	60bb      	str	r3, [r7, #8]
 801048c:	e7fe      	b.n	801048c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 801048e:	f000 f87f 	bl	8010590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010492:	2100      	movs	r1, #0
 8010494:	6878      	ldr	r0, [r7, #4]
 8010496:	f000 fcd7 	bl	8010e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801049a:	f000 f887 	bl	80105ac <xTaskResumeAll>
 801049e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d107      	bne.n	80104b6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80104a6:	4b07      	ldr	r3, [pc, #28]	; (80104c4 <vTaskDelay+0x64>)
 80104a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80104ac:	601a      	str	r2, [r3, #0]
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104b6:	bf00      	nop
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
 80104be:	bf00      	nop
 80104c0:	20000d4c 	.word	0x20000d4c
 80104c4:	e000ed04 	.word	0xe000ed04

080104c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b08a      	sub	sp, #40	; 0x28
 80104cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80104ce:	2300      	movs	r3, #0
 80104d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80104d2:	2300      	movs	r3, #0
 80104d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80104d6:	463a      	mov	r2, r7
 80104d8:	1d39      	adds	r1, r7, #4
 80104da:	f107 0308 	add.w	r3, r7, #8
 80104de:	4618      	mov	r0, r3
 80104e0:	f7fe ffa6 	bl	800f430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80104e4:	6839      	ldr	r1, [r7, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	68ba      	ldr	r2, [r7, #8]
 80104ea:	9202      	str	r2, [sp, #8]
 80104ec:	9301      	str	r3, [sp, #4]
 80104ee:	2300      	movs	r3, #0
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	2300      	movs	r3, #0
 80104f4:	460a      	mov	r2, r1
 80104f6:	4920      	ldr	r1, [pc, #128]	; (8010578 <vTaskStartScheduler+0xb0>)
 80104f8:	4820      	ldr	r0, [pc, #128]	; (801057c <vTaskStartScheduler+0xb4>)
 80104fa:	f7ff fe13 	bl	8010124 <xTaskCreateStatic>
 80104fe:	4602      	mov	r2, r0
 8010500:	4b1f      	ldr	r3, [pc, #124]	; (8010580 <vTaskStartScheduler+0xb8>)
 8010502:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010504:	4b1e      	ldr	r3, [pc, #120]	; (8010580 <vTaskStartScheduler+0xb8>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d002      	beq.n	8010512 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801050c:	2301      	movs	r3, #1
 801050e:	617b      	str	r3, [r7, #20]
 8010510:	e001      	b.n	8010516 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010512:	2300      	movs	r3, #0
 8010514:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	2b01      	cmp	r3, #1
 801051a:	d102      	bne.n	8010522 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801051c:	f000 fce8 	bl	8010ef0 <xTimerCreateTimerTask>
 8010520:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d115      	bne.n	8010554 <vTaskStartScheduler+0x8c>
 8010528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801052c:	f383 8811 	msr	BASEPRI, r3
 8010530:	f3bf 8f6f 	isb	sy
 8010534:	f3bf 8f4f 	dsb	sy
 8010538:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801053a:	4b12      	ldr	r3, [pc, #72]	; (8010584 <vTaskStartScheduler+0xbc>)
 801053c:	f04f 32ff 	mov.w	r2, #4294967295
 8010540:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010542:	4b11      	ldr	r3, [pc, #68]	; (8010588 <vTaskStartScheduler+0xc0>)
 8010544:	2201      	movs	r2, #1
 8010546:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010548:	4b10      	ldr	r3, [pc, #64]	; (801058c <vTaskStartScheduler+0xc4>)
 801054a:	2200      	movs	r2, #0
 801054c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801054e:	f001 f89f 	bl	8011690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010552:	e00d      	b.n	8010570 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801055a:	d109      	bne.n	8010570 <vTaskStartScheduler+0xa8>
 801055c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010560:	f383 8811 	msr	BASEPRI, r3
 8010564:	f3bf 8f6f 	isb	sy
 8010568:	f3bf 8f4f 	dsb	sy
 801056c:	60fb      	str	r3, [r7, #12]
 801056e:	e7fe      	b.n	801056e <vTaskStartScheduler+0xa6>
}
 8010570:	bf00      	nop
 8010572:	3718      	adds	r7, #24
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	08012684 	.word	0x08012684
 801057c:	08010b91 	.word	0x08010b91
 8010580:	20000d48 	.word	0x20000d48
 8010584:	20000d44 	.word	0x20000d44
 8010588:	20000d30 	.word	0x20000d30
 801058c:	20000d28 	.word	0x20000d28

08010590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010590:	b480      	push	{r7}
 8010592:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010594:	4b04      	ldr	r3, [pc, #16]	; (80105a8 <vTaskSuspendAll+0x18>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	3301      	adds	r3, #1
 801059a:	4a03      	ldr	r2, [pc, #12]	; (80105a8 <vTaskSuspendAll+0x18>)
 801059c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801059e:	bf00      	nop
 80105a0:	46bd      	mov	sp, r7
 80105a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a6:	4770      	bx	lr
 80105a8:	20000d4c 	.word	0x20000d4c

080105ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80105b2:	2300      	movs	r3, #0
 80105b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80105b6:	2300      	movs	r3, #0
 80105b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80105ba:	4b41      	ldr	r3, [pc, #260]	; (80106c0 <xTaskResumeAll+0x114>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d109      	bne.n	80105d6 <xTaskResumeAll+0x2a>
 80105c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c6:	f383 8811 	msr	BASEPRI, r3
 80105ca:	f3bf 8f6f 	isb	sy
 80105ce:	f3bf 8f4f 	dsb	sy
 80105d2:	603b      	str	r3, [r7, #0]
 80105d4:	e7fe      	b.n	80105d4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80105d6:	f001 f8f9 	bl	80117cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80105da:	4b39      	ldr	r3, [pc, #228]	; (80106c0 <xTaskResumeAll+0x114>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	3b01      	subs	r3, #1
 80105e0:	4a37      	ldr	r2, [pc, #220]	; (80106c0 <xTaskResumeAll+0x114>)
 80105e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80105e4:	4b36      	ldr	r3, [pc, #216]	; (80106c0 <xTaskResumeAll+0x114>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d162      	bne.n	80106b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80105ec:	4b35      	ldr	r3, [pc, #212]	; (80106c4 <xTaskResumeAll+0x118>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d05e      	beq.n	80106b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105f4:	e02f      	b.n	8010656 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80105f6:	4b34      	ldr	r3, [pc, #208]	; (80106c8 <xTaskResumeAll+0x11c>)
 80105f8:	68db      	ldr	r3, [r3, #12]
 80105fa:	68db      	ldr	r3, [r3, #12]
 80105fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	3318      	adds	r3, #24
 8010602:	4618      	mov	r0, r3
 8010604:	f7fe ffd2 	bl	800f5ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	3304      	adds	r3, #4
 801060c:	4618      	mov	r0, r3
 801060e:	f7fe ffcd 	bl	800f5ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010616:	4b2d      	ldr	r3, [pc, #180]	; (80106cc <xTaskResumeAll+0x120>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	429a      	cmp	r2, r3
 801061c:	d903      	bls.n	8010626 <xTaskResumeAll+0x7a>
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010622:	4a2a      	ldr	r2, [pc, #168]	; (80106cc <xTaskResumeAll+0x120>)
 8010624:	6013      	str	r3, [r2, #0]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801062a:	4613      	mov	r3, r2
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	4413      	add	r3, r2
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	4a27      	ldr	r2, [pc, #156]	; (80106d0 <xTaskResumeAll+0x124>)
 8010634:	441a      	add	r2, r3
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	3304      	adds	r3, #4
 801063a:	4619      	mov	r1, r3
 801063c:	4610      	mov	r0, r2
 801063e:	f7fe ff58 	bl	800f4f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010646:	4b23      	ldr	r3, [pc, #140]	; (80106d4 <xTaskResumeAll+0x128>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801064c:	429a      	cmp	r2, r3
 801064e:	d302      	bcc.n	8010656 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010650:	4b21      	ldr	r3, [pc, #132]	; (80106d8 <xTaskResumeAll+0x12c>)
 8010652:	2201      	movs	r2, #1
 8010654:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010656:	4b1c      	ldr	r3, [pc, #112]	; (80106c8 <xTaskResumeAll+0x11c>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d1cb      	bne.n	80105f6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d001      	beq.n	8010668 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010664:	f000 fb46 	bl	8010cf4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010668:	4b1c      	ldr	r3, [pc, #112]	; (80106dc <xTaskResumeAll+0x130>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d010      	beq.n	8010696 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010674:	f000 f846 	bl	8010704 <xTaskIncrementTick>
 8010678:	4603      	mov	r3, r0
 801067a:	2b00      	cmp	r3, #0
 801067c:	d002      	beq.n	8010684 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 801067e:	4b16      	ldr	r3, [pc, #88]	; (80106d8 <xTaskResumeAll+0x12c>)
 8010680:	2201      	movs	r2, #1
 8010682:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	3b01      	subs	r3, #1
 8010688:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1f1      	bne.n	8010674 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010690:	4b12      	ldr	r3, [pc, #72]	; (80106dc <xTaskResumeAll+0x130>)
 8010692:	2200      	movs	r2, #0
 8010694:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010696:	4b10      	ldr	r3, [pc, #64]	; (80106d8 <xTaskResumeAll+0x12c>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d009      	beq.n	80106b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801069e:	2301      	movs	r3, #1
 80106a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80106a2:	4b0f      	ldr	r3, [pc, #60]	; (80106e0 <xTaskResumeAll+0x134>)
 80106a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106a8:	601a      	str	r2, [r3, #0]
 80106aa:	f3bf 8f4f 	dsb	sy
 80106ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80106b2:	f001 f8b9 	bl	8011828 <vPortExitCritical>

	return xAlreadyYielded;
 80106b6:	68bb      	ldr	r3, [r7, #8]
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	3710      	adds	r7, #16
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}
 80106c0:	20000d4c 	.word	0x20000d4c
 80106c4:	20000d24 	.word	0x20000d24
 80106c8:	20000ce4 	.word	0x20000ce4
 80106cc:	20000d2c 	.word	0x20000d2c
 80106d0:	20000854 	.word	0x20000854
 80106d4:	20000850 	.word	0x20000850
 80106d8:	20000d38 	.word	0x20000d38
 80106dc:	20000d34 	.word	0x20000d34
 80106e0:	e000ed04 	.word	0xe000ed04

080106e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80106ea:	4b05      	ldr	r3, [pc, #20]	; (8010700 <xTaskGetTickCount+0x1c>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80106f0:	687b      	ldr	r3, [r7, #4]
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	370c      	adds	r7, #12
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	20000d28 	.word	0x20000d28

08010704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b086      	sub	sp, #24
 8010708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801070a:	2300      	movs	r3, #0
 801070c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801070e:	4b4e      	ldr	r3, [pc, #312]	; (8010848 <xTaskIncrementTick+0x144>)
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	2b00      	cmp	r3, #0
 8010714:	f040 8088 	bne.w	8010828 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010718:	4b4c      	ldr	r3, [pc, #304]	; (801084c <xTaskIncrementTick+0x148>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	3301      	adds	r3, #1
 801071e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010720:	4a4a      	ldr	r2, [pc, #296]	; (801084c <xTaskIncrementTick+0x148>)
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d11f      	bne.n	801076c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 801072c:	4b48      	ldr	r3, [pc, #288]	; (8010850 <xTaskIncrementTick+0x14c>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d009      	beq.n	801074a <xTaskIncrementTick+0x46>
 8010736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801073a:	f383 8811 	msr	BASEPRI, r3
 801073e:	f3bf 8f6f 	isb	sy
 8010742:	f3bf 8f4f 	dsb	sy
 8010746:	603b      	str	r3, [r7, #0]
 8010748:	e7fe      	b.n	8010748 <xTaskIncrementTick+0x44>
 801074a:	4b41      	ldr	r3, [pc, #260]	; (8010850 <xTaskIncrementTick+0x14c>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	60fb      	str	r3, [r7, #12]
 8010750:	4b40      	ldr	r3, [pc, #256]	; (8010854 <xTaskIncrementTick+0x150>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	4a3e      	ldr	r2, [pc, #248]	; (8010850 <xTaskIncrementTick+0x14c>)
 8010756:	6013      	str	r3, [r2, #0]
 8010758:	4a3e      	ldr	r2, [pc, #248]	; (8010854 <xTaskIncrementTick+0x150>)
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	6013      	str	r3, [r2, #0]
 801075e:	4b3e      	ldr	r3, [pc, #248]	; (8010858 <xTaskIncrementTick+0x154>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	3301      	adds	r3, #1
 8010764:	4a3c      	ldr	r2, [pc, #240]	; (8010858 <xTaskIncrementTick+0x154>)
 8010766:	6013      	str	r3, [r2, #0]
 8010768:	f000 fac4 	bl	8010cf4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801076c:	4b3b      	ldr	r3, [pc, #236]	; (801085c <xTaskIncrementTick+0x158>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	693a      	ldr	r2, [r7, #16]
 8010772:	429a      	cmp	r2, r3
 8010774:	d349      	bcc.n	801080a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010776:	4b36      	ldr	r3, [pc, #216]	; (8010850 <xTaskIncrementTick+0x14c>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d104      	bne.n	801078a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010780:	4b36      	ldr	r3, [pc, #216]	; (801085c <xTaskIncrementTick+0x158>)
 8010782:	f04f 32ff 	mov.w	r2, #4294967295
 8010786:	601a      	str	r2, [r3, #0]
					break;
 8010788:	e03f      	b.n	801080a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801078a:	4b31      	ldr	r3, [pc, #196]	; (8010850 <xTaskIncrementTick+0x14c>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801079a:	693a      	ldr	r2, [r7, #16]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d203      	bcs.n	80107aa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80107a2:	4a2e      	ldr	r2, [pc, #184]	; (801085c <xTaskIncrementTick+0x158>)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80107a8:	e02f      	b.n	801080a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	3304      	adds	r3, #4
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fe fefc 	bl	800f5ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d004      	beq.n	80107c6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	3318      	adds	r3, #24
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fe fef3 	bl	800f5ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80107c6:	68bb      	ldr	r3, [r7, #8]
 80107c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ca:	4b25      	ldr	r3, [pc, #148]	; (8010860 <xTaskIncrementTick+0x15c>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d903      	bls.n	80107da <xTaskIncrementTick+0xd6>
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d6:	4a22      	ldr	r2, [pc, #136]	; (8010860 <xTaskIncrementTick+0x15c>)
 80107d8:	6013      	str	r3, [r2, #0]
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107de:	4613      	mov	r3, r2
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	4413      	add	r3, r2
 80107e4:	009b      	lsls	r3, r3, #2
 80107e6:	4a1f      	ldr	r2, [pc, #124]	; (8010864 <xTaskIncrementTick+0x160>)
 80107e8:	441a      	add	r2, r3
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	3304      	adds	r3, #4
 80107ee:	4619      	mov	r1, r3
 80107f0:	4610      	mov	r0, r2
 80107f2:	f7fe fe7e 	bl	800f4f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107fa:	4b1b      	ldr	r3, [pc, #108]	; (8010868 <xTaskIncrementTick+0x164>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	429a      	cmp	r2, r3
 8010802:	d3b8      	bcc.n	8010776 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010804:	2301      	movs	r3, #1
 8010806:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010808:	e7b5      	b.n	8010776 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801080a:	4b17      	ldr	r3, [pc, #92]	; (8010868 <xTaskIncrementTick+0x164>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010810:	4914      	ldr	r1, [pc, #80]	; (8010864 <xTaskIncrementTick+0x160>)
 8010812:	4613      	mov	r3, r2
 8010814:	009b      	lsls	r3, r3, #2
 8010816:	4413      	add	r3, r2
 8010818:	009b      	lsls	r3, r3, #2
 801081a:	440b      	add	r3, r1
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	2b01      	cmp	r3, #1
 8010820:	d907      	bls.n	8010832 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010822:	2301      	movs	r3, #1
 8010824:	617b      	str	r3, [r7, #20]
 8010826:	e004      	b.n	8010832 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010828:	4b10      	ldr	r3, [pc, #64]	; (801086c <xTaskIncrementTick+0x168>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	3301      	adds	r3, #1
 801082e:	4a0f      	ldr	r2, [pc, #60]	; (801086c <xTaskIncrementTick+0x168>)
 8010830:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010832:	4b0f      	ldr	r3, [pc, #60]	; (8010870 <xTaskIncrementTick+0x16c>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d001      	beq.n	801083e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 801083a:	2301      	movs	r3, #1
 801083c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801083e:	697b      	ldr	r3, [r7, #20]
}
 8010840:	4618      	mov	r0, r3
 8010842:	3718      	adds	r7, #24
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	20000d4c 	.word	0x20000d4c
 801084c:	20000d28 	.word	0x20000d28
 8010850:	20000cdc 	.word	0x20000cdc
 8010854:	20000ce0 	.word	0x20000ce0
 8010858:	20000d3c 	.word	0x20000d3c
 801085c:	20000d44 	.word	0x20000d44
 8010860:	20000d2c 	.word	0x20000d2c
 8010864:	20000854 	.word	0x20000854
 8010868:	20000850 	.word	0x20000850
 801086c:	20000d34 	.word	0x20000d34
 8010870:	20000d38 	.word	0x20000d38

08010874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010874:	b480      	push	{r7}
 8010876:	b085      	sub	sp, #20
 8010878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801087a:	4b27      	ldr	r3, [pc, #156]	; (8010918 <vTaskSwitchContext+0xa4>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	2b00      	cmp	r3, #0
 8010880:	d003      	beq.n	801088a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010882:	4b26      	ldr	r3, [pc, #152]	; (801091c <vTaskSwitchContext+0xa8>)
 8010884:	2201      	movs	r2, #1
 8010886:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010888:	e040      	b.n	801090c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801088a:	4b24      	ldr	r3, [pc, #144]	; (801091c <vTaskSwitchContext+0xa8>)
 801088c:	2200      	movs	r2, #0
 801088e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010890:	4b23      	ldr	r3, [pc, #140]	; (8010920 <vTaskSwitchContext+0xac>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	60fb      	str	r3, [r7, #12]
 8010896:	e00f      	b.n	80108b8 <vTaskSwitchContext+0x44>
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d109      	bne.n	80108b2 <vTaskSwitchContext+0x3e>
 801089e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108a2:	f383 8811 	msr	BASEPRI, r3
 80108a6:	f3bf 8f6f 	isb	sy
 80108aa:	f3bf 8f4f 	dsb	sy
 80108ae:	607b      	str	r3, [r7, #4]
 80108b0:	e7fe      	b.n	80108b0 <vTaskSwitchContext+0x3c>
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	3b01      	subs	r3, #1
 80108b6:	60fb      	str	r3, [r7, #12]
 80108b8:	491a      	ldr	r1, [pc, #104]	; (8010924 <vTaskSwitchContext+0xb0>)
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	4613      	mov	r3, r2
 80108be:	009b      	lsls	r3, r3, #2
 80108c0:	4413      	add	r3, r2
 80108c2:	009b      	lsls	r3, r3, #2
 80108c4:	440b      	add	r3, r1
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d0e5      	beq.n	8010898 <vTaskSwitchContext+0x24>
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	4613      	mov	r3, r2
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	4413      	add	r3, r2
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	4a13      	ldr	r2, [pc, #76]	; (8010924 <vTaskSwitchContext+0xb0>)
 80108d8:	4413      	add	r3, r2
 80108da:	60bb      	str	r3, [r7, #8]
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	685a      	ldr	r2, [r3, #4]
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	605a      	str	r2, [r3, #4]
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	685a      	ldr	r2, [r3, #4]
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	3308      	adds	r3, #8
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d104      	bne.n	80108fc <vTaskSwitchContext+0x88>
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	685b      	ldr	r3, [r3, #4]
 80108f6:	685a      	ldr	r2, [r3, #4]
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	605a      	str	r2, [r3, #4]
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	685b      	ldr	r3, [r3, #4]
 8010900:	68db      	ldr	r3, [r3, #12]
 8010902:	4a09      	ldr	r2, [pc, #36]	; (8010928 <vTaskSwitchContext+0xb4>)
 8010904:	6013      	str	r3, [r2, #0]
 8010906:	4a06      	ldr	r2, [pc, #24]	; (8010920 <vTaskSwitchContext+0xac>)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	6013      	str	r3, [r2, #0]
}
 801090c:	bf00      	nop
 801090e:	3714      	adds	r7, #20
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr
 8010918:	20000d4c 	.word	0x20000d4c
 801091c:	20000d38 	.word	0x20000d38
 8010920:	20000d2c 	.word	0x20000d2c
 8010924:	20000854 	.word	0x20000854
 8010928:	20000850 	.word	0x20000850

0801092c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d109      	bne.n	8010950 <vTaskPlaceOnEventList+0x24>
 801093c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010940:	f383 8811 	msr	BASEPRI, r3
 8010944:	f3bf 8f6f 	isb	sy
 8010948:	f3bf 8f4f 	dsb	sy
 801094c:	60fb      	str	r3, [r7, #12]
 801094e:	e7fe      	b.n	801094e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010950:	4b07      	ldr	r3, [pc, #28]	; (8010970 <vTaskPlaceOnEventList+0x44>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	3318      	adds	r3, #24
 8010956:	4619      	mov	r1, r3
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f7fe fdee 	bl	800f53a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801095e:	2101      	movs	r1, #1
 8010960:	6838      	ldr	r0, [r7, #0]
 8010962:	f000 fa71 	bl	8010e48 <prvAddCurrentTaskToDelayedList>
}
 8010966:	bf00      	nop
 8010968:	3710      	adds	r7, #16
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	20000850 	.word	0x20000850

08010974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010974:	b580      	push	{r7, lr}
 8010976:	b086      	sub	sp, #24
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d109      	bne.n	801099a <vTaskPlaceOnEventListRestricted+0x26>
 8010986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098a:	f383 8811 	msr	BASEPRI, r3
 801098e:	f3bf 8f6f 	isb	sy
 8010992:	f3bf 8f4f 	dsb	sy
 8010996:	617b      	str	r3, [r7, #20]
 8010998:	e7fe      	b.n	8010998 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801099a:	4b0a      	ldr	r3, [pc, #40]	; (80109c4 <vTaskPlaceOnEventListRestricted+0x50>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3318      	adds	r3, #24
 80109a0:	4619      	mov	r1, r3
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f7fe fda5 	bl	800f4f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d002      	beq.n	80109b4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80109ae:	f04f 33ff 	mov.w	r3, #4294967295
 80109b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80109b4:	6879      	ldr	r1, [r7, #4]
 80109b6:	68b8      	ldr	r0, [r7, #8]
 80109b8:	f000 fa46 	bl	8010e48 <prvAddCurrentTaskToDelayedList>
	}
 80109bc:	bf00      	nop
 80109be:	3718      	adds	r7, #24
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	20000850 	.word	0x20000850

080109c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	68db      	ldr	r3, [r3, #12]
 80109d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d109      	bne.n	80109f2 <xTaskRemoveFromEventList+0x2a>
 80109de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109e2:	f383 8811 	msr	BASEPRI, r3
 80109e6:	f3bf 8f6f 	isb	sy
 80109ea:	f3bf 8f4f 	dsb	sy
 80109ee:	60fb      	str	r3, [r7, #12]
 80109f0:	e7fe      	b.n	80109f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	3318      	adds	r3, #24
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fe fdd8 	bl	800f5ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80109fc:	4b1d      	ldr	r3, [pc, #116]	; (8010a74 <xTaskRemoveFromEventList+0xac>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d11d      	bne.n	8010a40 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	3304      	adds	r3, #4
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fe fdcf 	bl	800f5ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a12:	4b19      	ldr	r3, [pc, #100]	; (8010a78 <xTaskRemoveFromEventList+0xb0>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d903      	bls.n	8010a22 <xTaskRemoveFromEventList+0x5a>
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a1e:	4a16      	ldr	r2, [pc, #88]	; (8010a78 <xTaskRemoveFromEventList+0xb0>)
 8010a20:	6013      	str	r3, [r2, #0]
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a26:	4613      	mov	r3, r2
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4a13      	ldr	r2, [pc, #76]	; (8010a7c <xTaskRemoveFromEventList+0xb4>)
 8010a30:	441a      	add	r2, r3
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	3304      	adds	r3, #4
 8010a36:	4619      	mov	r1, r3
 8010a38:	4610      	mov	r0, r2
 8010a3a:	f7fe fd5a 	bl	800f4f2 <vListInsertEnd>
 8010a3e:	e005      	b.n	8010a4c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	3318      	adds	r3, #24
 8010a44:	4619      	mov	r1, r3
 8010a46:	480e      	ldr	r0, [pc, #56]	; (8010a80 <xTaskRemoveFromEventList+0xb8>)
 8010a48:	f7fe fd53 	bl	800f4f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a50:	4b0c      	ldr	r3, [pc, #48]	; (8010a84 <xTaskRemoveFromEventList+0xbc>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d905      	bls.n	8010a66 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010a5e:	4b0a      	ldr	r3, [pc, #40]	; (8010a88 <xTaskRemoveFromEventList+0xc0>)
 8010a60:	2201      	movs	r2, #1
 8010a62:	601a      	str	r2, [r3, #0]
 8010a64:	e001      	b.n	8010a6a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010a66:	2300      	movs	r3, #0
 8010a68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010a6a:	697b      	ldr	r3, [r7, #20]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3718      	adds	r7, #24
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}
 8010a74:	20000d4c 	.word	0x20000d4c
 8010a78:	20000d2c 	.word	0x20000d2c
 8010a7c:	20000854 	.word	0x20000854
 8010a80:	20000ce4 	.word	0x20000ce4
 8010a84:	20000850 	.word	0x20000850
 8010a88:	20000d38 	.word	0x20000d38

08010a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010a94:	4b06      	ldr	r3, [pc, #24]	; (8010ab0 <vTaskInternalSetTimeOutState+0x24>)
 8010a96:	681a      	ldr	r2, [r3, #0]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010a9c:	4b05      	ldr	r3, [pc, #20]	; (8010ab4 <vTaskInternalSetTimeOutState+0x28>)
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	605a      	str	r2, [r3, #4]
}
 8010aa4:	bf00      	nop
 8010aa6:	370c      	adds	r7, #12
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aae:	4770      	bx	lr
 8010ab0:	20000d3c 	.word	0x20000d3c
 8010ab4:	20000d28 	.word	0x20000d28

08010ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b088      	sub	sp, #32
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d109      	bne.n	8010adc <xTaskCheckForTimeOut+0x24>
 8010ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010acc:	f383 8811 	msr	BASEPRI, r3
 8010ad0:	f3bf 8f6f 	isb	sy
 8010ad4:	f3bf 8f4f 	dsb	sy
 8010ad8:	613b      	str	r3, [r7, #16]
 8010ada:	e7fe      	b.n	8010ada <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d109      	bne.n	8010af6 <xTaskCheckForTimeOut+0x3e>
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	f383 8811 	msr	BASEPRI, r3
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	60fb      	str	r3, [r7, #12]
 8010af4:	e7fe      	b.n	8010af4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010af6:	f000 fe69 	bl	80117cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010afa:	4b1d      	ldr	r3, [pc, #116]	; (8010b70 <xTaskCheckForTimeOut+0xb8>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	69ba      	ldr	r2, [r7, #24]
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b12:	d102      	bne.n	8010b1a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010b14:	2300      	movs	r3, #0
 8010b16:	61fb      	str	r3, [r7, #28]
 8010b18:	e023      	b.n	8010b62 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	4b15      	ldr	r3, [pc, #84]	; (8010b74 <xTaskCheckForTimeOut+0xbc>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d007      	beq.n	8010b36 <xTaskCheckForTimeOut+0x7e>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	69ba      	ldr	r2, [r7, #24]
 8010b2c:	429a      	cmp	r2, r3
 8010b2e:	d302      	bcc.n	8010b36 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010b30:	2301      	movs	r3, #1
 8010b32:	61fb      	str	r3, [r7, #28]
 8010b34:	e015      	b.n	8010b62 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	697a      	ldr	r2, [r7, #20]
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d20b      	bcs.n	8010b58 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	681a      	ldr	r2, [r3, #0]
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	1ad2      	subs	r2, r2, r3
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f7ff ff9d 	bl	8010a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010b52:	2300      	movs	r3, #0
 8010b54:	61fb      	str	r3, [r7, #28]
 8010b56:	e004      	b.n	8010b62 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010b62:	f000 fe61 	bl	8011828 <vPortExitCritical>

	return xReturn;
 8010b66:	69fb      	ldr	r3, [r7, #28]
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3720      	adds	r7, #32
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bd80      	pop	{r7, pc}
 8010b70:	20000d28 	.word	0x20000d28
 8010b74:	20000d3c 	.word	0x20000d3c

08010b78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010b78:	b480      	push	{r7}
 8010b7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010b7c:	4b03      	ldr	r3, [pc, #12]	; (8010b8c <vTaskMissedYield+0x14>)
 8010b7e:	2201      	movs	r2, #1
 8010b80:	601a      	str	r2, [r3, #0]
}
 8010b82:	bf00      	nop
 8010b84:	46bd      	mov	sp, r7
 8010b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8a:	4770      	bx	lr
 8010b8c:	20000d38 	.word	0x20000d38

08010b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b082      	sub	sp, #8
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010b98:	f000 f852 	bl	8010c40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010b9c:	4b06      	ldr	r3, [pc, #24]	; (8010bb8 <prvIdleTask+0x28>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d9f9      	bls.n	8010b98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010ba4:	4b05      	ldr	r3, [pc, #20]	; (8010bbc <prvIdleTask+0x2c>)
 8010ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010baa:	601a      	str	r2, [r3, #0]
 8010bac:	f3bf 8f4f 	dsb	sy
 8010bb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010bb4:	e7f0      	b.n	8010b98 <prvIdleTask+0x8>
 8010bb6:	bf00      	nop
 8010bb8:	20000854 	.word	0x20000854
 8010bbc:	e000ed04 	.word	0xe000ed04

08010bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	607b      	str	r3, [r7, #4]
 8010bca:	e00c      	b.n	8010be6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	4613      	mov	r3, r2
 8010bd0:	009b      	lsls	r3, r3, #2
 8010bd2:	4413      	add	r3, r2
 8010bd4:	009b      	lsls	r3, r3, #2
 8010bd6:	4a12      	ldr	r2, [pc, #72]	; (8010c20 <prvInitialiseTaskLists+0x60>)
 8010bd8:	4413      	add	r3, r2
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fe fc5c 	bl	800f498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	3301      	adds	r3, #1
 8010be4:	607b      	str	r3, [r7, #4]
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2b37      	cmp	r3, #55	; 0x37
 8010bea:	d9ef      	bls.n	8010bcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010bec:	480d      	ldr	r0, [pc, #52]	; (8010c24 <prvInitialiseTaskLists+0x64>)
 8010bee:	f7fe fc53 	bl	800f498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010bf2:	480d      	ldr	r0, [pc, #52]	; (8010c28 <prvInitialiseTaskLists+0x68>)
 8010bf4:	f7fe fc50 	bl	800f498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010bf8:	480c      	ldr	r0, [pc, #48]	; (8010c2c <prvInitialiseTaskLists+0x6c>)
 8010bfa:	f7fe fc4d 	bl	800f498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010bfe:	480c      	ldr	r0, [pc, #48]	; (8010c30 <prvInitialiseTaskLists+0x70>)
 8010c00:	f7fe fc4a 	bl	800f498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010c04:	480b      	ldr	r0, [pc, #44]	; (8010c34 <prvInitialiseTaskLists+0x74>)
 8010c06:	f7fe fc47 	bl	800f498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010c0a:	4b0b      	ldr	r3, [pc, #44]	; (8010c38 <prvInitialiseTaskLists+0x78>)
 8010c0c:	4a05      	ldr	r2, [pc, #20]	; (8010c24 <prvInitialiseTaskLists+0x64>)
 8010c0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010c10:	4b0a      	ldr	r3, [pc, #40]	; (8010c3c <prvInitialiseTaskLists+0x7c>)
 8010c12:	4a05      	ldr	r2, [pc, #20]	; (8010c28 <prvInitialiseTaskLists+0x68>)
 8010c14:	601a      	str	r2, [r3, #0]
}
 8010c16:	bf00      	nop
 8010c18:	3708      	adds	r7, #8
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}
 8010c1e:	bf00      	nop
 8010c20:	20000854 	.word	0x20000854
 8010c24:	20000cb4 	.word	0x20000cb4
 8010c28:	20000cc8 	.word	0x20000cc8
 8010c2c:	20000ce4 	.word	0x20000ce4
 8010c30:	20000cf8 	.word	0x20000cf8
 8010c34:	20000d10 	.word	0x20000d10
 8010c38:	20000cdc 	.word	0x20000cdc
 8010c3c:	20000ce0 	.word	0x20000ce0

08010c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c46:	e019      	b.n	8010c7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010c48:	f000 fdc0 	bl	80117cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c4c:	4b0f      	ldr	r3, [pc, #60]	; (8010c8c <prvCheckTasksWaitingTermination+0x4c>)
 8010c4e:	68db      	ldr	r3, [r3, #12]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	3304      	adds	r3, #4
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f7fe fca7 	bl	800f5ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010c5e:	4b0c      	ldr	r3, [pc, #48]	; (8010c90 <prvCheckTasksWaitingTermination+0x50>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	3b01      	subs	r3, #1
 8010c64:	4a0a      	ldr	r2, [pc, #40]	; (8010c90 <prvCheckTasksWaitingTermination+0x50>)
 8010c66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010c68:	4b0a      	ldr	r3, [pc, #40]	; (8010c94 <prvCheckTasksWaitingTermination+0x54>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	4a09      	ldr	r2, [pc, #36]	; (8010c94 <prvCheckTasksWaitingTermination+0x54>)
 8010c70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010c72:	f000 fdd9 	bl	8011828 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010c76:	6878      	ldr	r0, [r7, #4]
 8010c78:	f000 f80e 	bl	8010c98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010c7c:	4b05      	ldr	r3, [pc, #20]	; (8010c94 <prvCheckTasksWaitingTermination+0x54>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d1e1      	bne.n	8010c48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010c84:	bf00      	nop
 8010c86:	3708      	adds	r7, #8
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}
 8010c8c:	20000cf8 	.word	0x20000cf8
 8010c90:	20000d24 	.word	0x20000d24
 8010c94:	20000d0c 	.word	0x20000d0c

08010c98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d108      	bne.n	8010cbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f000 ff68 	bl	8011b84 <vPortFree>
				vPortFree( pxTCB );
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 ff65 	bl	8011b84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010cba:	e017      	b.n	8010cec <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	d103      	bne.n	8010cce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f000 ff5c 	bl	8011b84 <vPortFree>
	}
 8010ccc:	e00e      	b.n	8010cec <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010cd4:	2b02      	cmp	r3, #2
 8010cd6:	d009      	beq.n	8010cec <prvDeleteTCB+0x54>
 8010cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cdc:	f383 8811 	msr	BASEPRI, r3
 8010ce0:	f3bf 8f6f 	isb	sy
 8010ce4:	f3bf 8f4f 	dsb	sy
 8010ce8:	60fb      	str	r3, [r7, #12]
 8010cea:	e7fe      	b.n	8010cea <prvDeleteTCB+0x52>
	}
 8010cec:	bf00      	nop
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010cfa:	4b0c      	ldr	r3, [pc, #48]	; (8010d2c <prvResetNextTaskUnblockTime+0x38>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d104      	bne.n	8010d0e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010d04:	4b0a      	ldr	r3, [pc, #40]	; (8010d30 <prvResetNextTaskUnblockTime+0x3c>)
 8010d06:	f04f 32ff 	mov.w	r2, #4294967295
 8010d0a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010d0c:	e008      	b.n	8010d20 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d0e:	4b07      	ldr	r3, [pc, #28]	; (8010d2c <prvResetNextTaskUnblockTime+0x38>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	68db      	ldr	r3, [r3, #12]
 8010d16:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	685b      	ldr	r3, [r3, #4]
 8010d1c:	4a04      	ldr	r2, [pc, #16]	; (8010d30 <prvResetNextTaskUnblockTime+0x3c>)
 8010d1e:	6013      	str	r3, [r2, #0]
}
 8010d20:	bf00      	nop
 8010d22:	370c      	adds	r7, #12
 8010d24:	46bd      	mov	sp, r7
 8010d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d2a:	4770      	bx	lr
 8010d2c:	20000cdc 	.word	0x20000cdc
 8010d30:	20000d44 	.word	0x20000d44

08010d34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010d3a:	4b0b      	ldr	r3, [pc, #44]	; (8010d68 <xTaskGetSchedulerState+0x34>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d102      	bne.n	8010d48 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010d42:	2301      	movs	r3, #1
 8010d44:	607b      	str	r3, [r7, #4]
 8010d46:	e008      	b.n	8010d5a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d48:	4b08      	ldr	r3, [pc, #32]	; (8010d6c <xTaskGetSchedulerState+0x38>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d102      	bne.n	8010d56 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010d50:	2302      	movs	r3, #2
 8010d52:	607b      	str	r3, [r7, #4]
 8010d54:	e001      	b.n	8010d5a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010d56:	2300      	movs	r3, #0
 8010d58:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010d5a:	687b      	ldr	r3, [r7, #4]
	}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	370c      	adds	r7, #12
 8010d60:	46bd      	mov	sp, r7
 8010d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d66:	4770      	bx	lr
 8010d68:	20000d30 	.word	0x20000d30
 8010d6c:	20000d4c 	.word	0x20000d4c

08010d70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b086      	sub	sp, #24
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d054      	beq.n	8010e30 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010d86:	4b2d      	ldr	r3, [pc, #180]	; (8010e3c <xTaskPriorityDisinherit+0xcc>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	693a      	ldr	r2, [r7, #16]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d009      	beq.n	8010da4 <xTaskPriorityDisinherit+0x34>
 8010d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d94:	f383 8811 	msr	BASEPRI, r3
 8010d98:	f3bf 8f6f 	isb	sy
 8010d9c:	f3bf 8f4f 	dsb	sy
 8010da0:	60fb      	str	r3, [r7, #12]
 8010da2:	e7fe      	b.n	8010da2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d109      	bne.n	8010dc0 <xTaskPriorityDisinherit+0x50>
 8010dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db0:	f383 8811 	msr	BASEPRI, r3
 8010db4:	f3bf 8f6f 	isb	sy
 8010db8:	f3bf 8f4f 	dsb	sy
 8010dbc:	60bb      	str	r3, [r7, #8]
 8010dbe:	e7fe      	b.n	8010dbe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8010dc0:	693b      	ldr	r3, [r7, #16]
 8010dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dc4:	1e5a      	subs	r2, r3, #1
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d02c      	beq.n	8010e30 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d128      	bne.n	8010e30 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	3304      	adds	r3, #4
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fe fbe2 	bl	800f5ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e00:	4b0f      	ldr	r3, [pc, #60]	; (8010e40 <xTaskPriorityDisinherit+0xd0>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d903      	bls.n	8010e10 <xTaskPriorityDisinherit+0xa0>
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e0c:	4a0c      	ldr	r2, [pc, #48]	; (8010e40 <xTaskPriorityDisinherit+0xd0>)
 8010e0e:	6013      	str	r3, [r2, #0]
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e14:	4613      	mov	r3, r2
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	4413      	add	r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	4a09      	ldr	r2, [pc, #36]	; (8010e44 <xTaskPriorityDisinherit+0xd4>)
 8010e1e:	441a      	add	r2, r3
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	3304      	adds	r3, #4
 8010e24:	4619      	mov	r1, r3
 8010e26:	4610      	mov	r0, r2
 8010e28:	f7fe fb63 	bl	800f4f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010e30:	697b      	ldr	r3, [r7, #20]
	}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3718      	adds	r7, #24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	20000850 	.word	0x20000850
 8010e40:	20000d2c 	.word	0x20000d2c
 8010e44:	20000854 	.word	0x20000854

08010e48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010e52:	4b21      	ldr	r3, [pc, #132]	; (8010ed8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e58:	4b20      	ldr	r3, [pc, #128]	; (8010edc <prvAddCurrentTaskToDelayedList+0x94>)
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	3304      	adds	r3, #4
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe fba4 	bl	800f5ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e6a:	d10a      	bne.n	8010e82 <prvAddCurrentTaskToDelayedList+0x3a>
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d007      	beq.n	8010e82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e72:	4b1a      	ldr	r3, [pc, #104]	; (8010edc <prvAddCurrentTaskToDelayedList+0x94>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	3304      	adds	r3, #4
 8010e78:	4619      	mov	r1, r3
 8010e7a:	4819      	ldr	r0, [pc, #100]	; (8010ee0 <prvAddCurrentTaskToDelayedList+0x98>)
 8010e7c:	f7fe fb39 	bl	800f4f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010e80:	e026      	b.n	8010ed0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010e82:	68fa      	ldr	r2, [r7, #12]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	4413      	add	r3, r2
 8010e88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010e8a:	4b14      	ldr	r3, [pc, #80]	; (8010edc <prvAddCurrentTaskToDelayedList+0x94>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	68ba      	ldr	r2, [r7, #8]
 8010e90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010e92:	68ba      	ldr	r2, [r7, #8]
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d209      	bcs.n	8010eae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010e9a:	4b12      	ldr	r3, [pc, #72]	; (8010ee4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	4b0f      	ldr	r3, [pc, #60]	; (8010edc <prvAddCurrentTaskToDelayedList+0x94>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	3304      	adds	r3, #4
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	4610      	mov	r0, r2
 8010ea8:	f7fe fb47 	bl	800f53a <vListInsert>
}
 8010eac:	e010      	b.n	8010ed0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010eae:	4b0e      	ldr	r3, [pc, #56]	; (8010ee8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	4b0a      	ldr	r3, [pc, #40]	; (8010edc <prvAddCurrentTaskToDelayedList+0x94>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	3304      	adds	r3, #4
 8010eb8:	4619      	mov	r1, r3
 8010eba:	4610      	mov	r0, r2
 8010ebc:	f7fe fb3d 	bl	800f53a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010ec0:	4b0a      	ldr	r3, [pc, #40]	; (8010eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	68ba      	ldr	r2, [r7, #8]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d202      	bcs.n	8010ed0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010eca:	4a08      	ldr	r2, [pc, #32]	; (8010eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8010ecc:	68bb      	ldr	r3, [r7, #8]
 8010ece:	6013      	str	r3, [r2, #0]
}
 8010ed0:	bf00      	nop
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}
 8010ed8:	20000d28 	.word	0x20000d28
 8010edc:	20000850 	.word	0x20000850
 8010ee0:	20000d10 	.word	0x20000d10
 8010ee4:	20000ce0 	.word	0x20000ce0
 8010ee8:	20000cdc 	.word	0x20000cdc
 8010eec:	20000d44 	.word	0x20000d44

08010ef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b08a      	sub	sp, #40	; 0x28
 8010ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010efa:	f000 faff 	bl	80114fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010efe:	4b1c      	ldr	r3, [pc, #112]	; (8010f70 <xTimerCreateTimerTask+0x80>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d021      	beq.n	8010f4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010f06:	2300      	movs	r3, #0
 8010f08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010f0e:	1d3a      	adds	r2, r7, #4
 8010f10:	f107 0108 	add.w	r1, r7, #8
 8010f14:	f107 030c 	add.w	r3, r7, #12
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7fe faa3 	bl	800f464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010f1e:	6879      	ldr	r1, [r7, #4]
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	9202      	str	r2, [sp, #8]
 8010f26:	9301      	str	r3, [sp, #4]
 8010f28:	2302      	movs	r3, #2
 8010f2a:	9300      	str	r3, [sp, #0]
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	460a      	mov	r2, r1
 8010f30:	4910      	ldr	r1, [pc, #64]	; (8010f74 <xTimerCreateTimerTask+0x84>)
 8010f32:	4811      	ldr	r0, [pc, #68]	; (8010f78 <xTimerCreateTimerTask+0x88>)
 8010f34:	f7ff f8f6 	bl	8010124 <xTaskCreateStatic>
 8010f38:	4602      	mov	r2, r0
 8010f3a:	4b10      	ldr	r3, [pc, #64]	; (8010f7c <xTimerCreateTimerTask+0x8c>)
 8010f3c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010f3e:	4b0f      	ldr	r3, [pc, #60]	; (8010f7c <xTimerCreateTimerTask+0x8c>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d001      	beq.n	8010f4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010f46:	2301      	movs	r3, #1
 8010f48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d109      	bne.n	8010f64 <xTimerCreateTimerTask+0x74>
 8010f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f54:	f383 8811 	msr	BASEPRI, r3
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	613b      	str	r3, [r7, #16]
 8010f62:	e7fe      	b.n	8010f62 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8010f64:	697b      	ldr	r3, [r7, #20]
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3718      	adds	r7, #24
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	20000d80 	.word	0x20000d80
 8010f74:	0801268c 	.word	0x0801268c
 8010f78:	080110b1 	.word	0x080110b1
 8010f7c:	20000d84 	.word	0x20000d84

08010f80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b08a      	sub	sp, #40	; 0x28
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	607a      	str	r2, [r7, #4]
 8010f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d109      	bne.n	8010fac <xTimerGenericCommand+0x2c>
 8010f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f9c:	f383 8811 	msr	BASEPRI, r3
 8010fa0:	f3bf 8f6f 	isb	sy
 8010fa4:	f3bf 8f4f 	dsb	sy
 8010fa8:	623b      	str	r3, [r7, #32]
 8010faa:	e7fe      	b.n	8010faa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010fac:	4b19      	ldr	r3, [pc, #100]	; (8011014 <xTimerGenericCommand+0x94>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d02a      	beq.n	801100a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	2b05      	cmp	r3, #5
 8010fc4:	dc18      	bgt.n	8010ff8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010fc6:	f7ff feb5 	bl	8010d34 <xTaskGetSchedulerState>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	2b02      	cmp	r3, #2
 8010fce:	d109      	bne.n	8010fe4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010fd0:	4b10      	ldr	r3, [pc, #64]	; (8011014 <xTimerGenericCommand+0x94>)
 8010fd2:	6818      	ldr	r0, [r3, #0]
 8010fd4:	f107 0110 	add.w	r1, r7, #16
 8010fd8:	2300      	movs	r3, #0
 8010fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fdc:	f7fe fc4e 	bl	800f87c <xQueueGenericSend>
 8010fe0:	6278      	str	r0, [r7, #36]	; 0x24
 8010fe2:	e012      	b.n	801100a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010fe4:	4b0b      	ldr	r3, [pc, #44]	; (8011014 <xTimerGenericCommand+0x94>)
 8010fe6:	6818      	ldr	r0, [r3, #0]
 8010fe8:	f107 0110 	add.w	r1, r7, #16
 8010fec:	2300      	movs	r3, #0
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f7fe fc44 	bl	800f87c <xQueueGenericSend>
 8010ff4:	6278      	str	r0, [r7, #36]	; 0x24
 8010ff6:	e008      	b.n	801100a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010ff8:	4b06      	ldr	r3, [pc, #24]	; (8011014 <xTimerGenericCommand+0x94>)
 8010ffa:	6818      	ldr	r0, [r3, #0]
 8010ffc:	f107 0110 	add.w	r1, r7, #16
 8011000:	2300      	movs	r3, #0
 8011002:	683a      	ldr	r2, [r7, #0]
 8011004:	f7fe fd34 	bl	800fa70 <xQueueGenericSendFromISR>
 8011008:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801100c:	4618      	mov	r0, r3
 801100e:	3728      	adds	r7, #40	; 0x28
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	20000d80 	.word	0x20000d80

08011018 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b088      	sub	sp, #32
 801101c:	af02      	add	r7, sp, #8
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011022:	4b22      	ldr	r3, [pc, #136]	; (80110ac <prvProcessExpiredTimer+0x94>)
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	3304      	adds	r3, #4
 8011030:	4618      	mov	r0, r3
 8011032:	f7fe fabb 	bl	800f5ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801103c:	f003 0304 	and.w	r3, r3, #4
 8011040:	2b00      	cmp	r3, #0
 8011042:	d021      	beq.n	8011088 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	699a      	ldr	r2, [r3, #24]
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	18d1      	adds	r1, r2, r3
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	683a      	ldr	r2, [r7, #0]
 8011050:	6978      	ldr	r0, [r7, #20]
 8011052:	f000 f8d1 	bl	80111f8 <prvInsertTimerInActiveList>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d01e      	beq.n	801109a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801105c:	2300      	movs	r3, #0
 801105e:	9300      	str	r3, [sp, #0]
 8011060:	2300      	movs	r3, #0
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	2100      	movs	r1, #0
 8011066:	6978      	ldr	r0, [r7, #20]
 8011068:	f7ff ff8a 	bl	8010f80 <xTimerGenericCommand>
 801106c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d112      	bne.n	801109a <prvProcessExpiredTimer+0x82>
 8011074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011078:	f383 8811 	msr	BASEPRI, r3
 801107c:	f3bf 8f6f 	isb	sy
 8011080:	f3bf 8f4f 	dsb	sy
 8011084:	60fb      	str	r3, [r7, #12]
 8011086:	e7fe      	b.n	8011086 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801108e:	f023 0301 	bic.w	r3, r3, #1
 8011092:	b2da      	uxtb	r2, r3
 8011094:	697b      	ldr	r3, [r7, #20]
 8011096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	6a1b      	ldr	r3, [r3, #32]
 801109e:	6978      	ldr	r0, [r7, #20]
 80110a0:	4798      	blx	r3
}
 80110a2:	bf00      	nop
 80110a4:	3718      	adds	r7, #24
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	20000d78 	.word	0x20000d78

080110b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b084      	sub	sp, #16
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80110b8:	f107 0308 	add.w	r3, r7, #8
 80110bc:	4618      	mov	r0, r3
 80110be:	f000 f857 	bl	8011170 <prvGetNextExpireTime>
 80110c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	4619      	mov	r1, r3
 80110c8:	68f8      	ldr	r0, [r7, #12]
 80110ca:	f000 f803 	bl	80110d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80110ce:	f000 f8d5 	bl	801127c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80110d2:	e7f1      	b.n	80110b8 <prvTimerTask+0x8>

080110d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80110d4:	b580      	push	{r7, lr}
 80110d6:	b084      	sub	sp, #16
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
 80110dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80110de:	f7ff fa57 	bl	8010590 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80110e2:	f107 0308 	add.w	r3, r7, #8
 80110e6:	4618      	mov	r0, r3
 80110e8:	f000 f866 	bl	80111b8 <prvSampleTimeNow>
 80110ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d130      	bne.n	8011156 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d10a      	bne.n	8011110 <prvProcessTimerOrBlockTask+0x3c>
 80110fa:	687a      	ldr	r2, [r7, #4]
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	429a      	cmp	r2, r3
 8011100:	d806      	bhi.n	8011110 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011102:	f7ff fa53 	bl	80105ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011106:	68f9      	ldr	r1, [r7, #12]
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f7ff ff85 	bl	8011018 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801110e:	e024      	b.n	801115a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d008      	beq.n	8011128 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011116:	4b13      	ldr	r3, [pc, #76]	; (8011164 <prvProcessTimerOrBlockTask+0x90>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d101      	bne.n	8011124 <prvProcessTimerOrBlockTask+0x50>
 8011120:	2301      	movs	r3, #1
 8011122:	e000      	b.n	8011126 <prvProcessTimerOrBlockTask+0x52>
 8011124:	2300      	movs	r3, #0
 8011126:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011128:	4b0f      	ldr	r3, [pc, #60]	; (8011168 <prvProcessTimerOrBlockTask+0x94>)
 801112a:	6818      	ldr	r0, [r3, #0]
 801112c:	687a      	ldr	r2, [r7, #4]
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	4619      	mov	r1, r3
 8011136:	f7fe ffc1 	bl	80100bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801113a:	f7ff fa37 	bl	80105ac <xTaskResumeAll>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	d10a      	bne.n	801115a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011144:	4b09      	ldr	r3, [pc, #36]	; (801116c <prvProcessTimerOrBlockTask+0x98>)
 8011146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801114a:	601a      	str	r2, [r3, #0]
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	f3bf 8f6f 	isb	sy
}
 8011154:	e001      	b.n	801115a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011156:	f7ff fa29 	bl	80105ac <xTaskResumeAll>
}
 801115a:	bf00      	nop
 801115c:	3710      	adds	r7, #16
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
 8011162:	bf00      	nop
 8011164:	20000d7c 	.word	0x20000d7c
 8011168:	20000d80 	.word	0x20000d80
 801116c:	e000ed04 	.word	0xe000ed04

08011170 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011178:	4b0e      	ldr	r3, [pc, #56]	; (80111b4 <prvGetNextExpireTime+0x44>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d101      	bne.n	8011186 <prvGetNextExpireTime+0x16>
 8011182:	2201      	movs	r2, #1
 8011184:	e000      	b.n	8011188 <prvGetNextExpireTime+0x18>
 8011186:	2200      	movs	r2, #0
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d105      	bne.n	80111a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011194:	4b07      	ldr	r3, [pc, #28]	; (80111b4 <prvGetNextExpireTime+0x44>)
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	60fb      	str	r3, [r7, #12]
 801119e:	e001      	b.n	80111a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80111a0:	2300      	movs	r3, #0
 80111a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80111a4:	68fb      	ldr	r3, [r7, #12]
}
 80111a6:	4618      	mov	r0, r3
 80111a8:	3714      	adds	r7, #20
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr
 80111b2:	bf00      	nop
 80111b4:	20000d78 	.word	0x20000d78

080111b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b084      	sub	sp, #16
 80111bc:	af00      	add	r7, sp, #0
 80111be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80111c0:	f7ff fa90 	bl	80106e4 <xTaskGetTickCount>
 80111c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80111c6:	4b0b      	ldr	r3, [pc, #44]	; (80111f4 <prvSampleTimeNow+0x3c>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	68fa      	ldr	r2, [r7, #12]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d205      	bcs.n	80111dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80111d0:	f000 f930 	bl	8011434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2201      	movs	r2, #1
 80111d8:	601a      	str	r2, [r3, #0]
 80111da:	e002      	b.n	80111e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80111e2:	4a04      	ldr	r2, [pc, #16]	; (80111f4 <prvSampleTimeNow+0x3c>)
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80111e8:	68fb      	ldr	r3, [r7, #12]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3710      	adds	r7, #16
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	20000d88 	.word	0x20000d88

080111f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b086      	sub	sp, #24
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	60f8      	str	r0, [r7, #12]
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
 8011204:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011206:	2300      	movs	r3, #0
 8011208:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	68ba      	ldr	r2, [r7, #8]
 801120e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	68fa      	ldr	r2, [r7, #12]
 8011214:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011216:	68ba      	ldr	r2, [r7, #8]
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	429a      	cmp	r2, r3
 801121c:	d812      	bhi.n	8011244 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	1ad2      	subs	r2, r2, r3
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	699b      	ldr	r3, [r3, #24]
 8011228:	429a      	cmp	r2, r3
 801122a:	d302      	bcc.n	8011232 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801122c:	2301      	movs	r3, #1
 801122e:	617b      	str	r3, [r7, #20]
 8011230:	e01b      	b.n	801126a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011232:	4b10      	ldr	r3, [pc, #64]	; (8011274 <prvInsertTimerInActiveList+0x7c>)
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	3304      	adds	r3, #4
 801123a:	4619      	mov	r1, r3
 801123c:	4610      	mov	r0, r2
 801123e:	f7fe f97c 	bl	800f53a <vListInsert>
 8011242:	e012      	b.n	801126a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011244:	687a      	ldr	r2, [r7, #4]
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	429a      	cmp	r2, r3
 801124a:	d206      	bcs.n	801125a <prvInsertTimerInActiveList+0x62>
 801124c:	68ba      	ldr	r2, [r7, #8]
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	429a      	cmp	r2, r3
 8011252:	d302      	bcc.n	801125a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011254:	2301      	movs	r3, #1
 8011256:	617b      	str	r3, [r7, #20]
 8011258:	e007      	b.n	801126a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801125a:	4b07      	ldr	r3, [pc, #28]	; (8011278 <prvInsertTimerInActiveList+0x80>)
 801125c:	681a      	ldr	r2, [r3, #0]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	3304      	adds	r3, #4
 8011262:	4619      	mov	r1, r3
 8011264:	4610      	mov	r0, r2
 8011266:	f7fe f968 	bl	800f53a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801126a:	697b      	ldr	r3, [r7, #20]
}
 801126c:	4618      	mov	r0, r3
 801126e:	3718      	adds	r7, #24
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	20000d7c 	.word	0x20000d7c
 8011278:	20000d78 	.word	0x20000d78

0801127c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b08e      	sub	sp, #56	; 0x38
 8011280:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011282:	e0c6      	b.n	8011412 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2b00      	cmp	r3, #0
 8011288:	da17      	bge.n	80112ba <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801128a:	1d3b      	adds	r3, r7, #4
 801128c:	3304      	adds	r3, #4
 801128e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011292:	2b00      	cmp	r3, #0
 8011294:	d109      	bne.n	80112aa <prvProcessReceivedCommands+0x2e>
 8011296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129a:	f383 8811 	msr	BASEPRI, r3
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f3bf 8f4f 	dsb	sy
 80112a6:	61fb      	str	r3, [r7, #28]
 80112a8:	e7fe      	b.n	80112a8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80112aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112b0:	6850      	ldr	r0, [r2, #4]
 80112b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112b4:	6892      	ldr	r2, [r2, #8]
 80112b6:	4611      	mov	r1, r2
 80112b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	f2c0 80a7 	blt.w	8011410 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80112c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c8:	695b      	ldr	r3, [r3, #20]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d004      	beq.n	80112d8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80112ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d0:	3304      	adds	r3, #4
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7fe f96a 	bl	800f5ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80112d8:	463b      	mov	r3, r7
 80112da:	4618      	mov	r0, r3
 80112dc:	f7ff ff6c 	bl	80111b8 <prvSampleTimeNow>
 80112e0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2b09      	cmp	r3, #9
 80112e6:	f200 8094 	bhi.w	8011412 <prvProcessReceivedCommands+0x196>
 80112ea:	a201      	add	r2, pc, #4	; (adr r2, 80112f0 <prvProcessReceivedCommands+0x74>)
 80112ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f0:	08011319 	.word	0x08011319
 80112f4:	08011319 	.word	0x08011319
 80112f8:	08011319 	.word	0x08011319
 80112fc:	0801138b 	.word	0x0801138b
 8011300:	0801139f 	.word	0x0801139f
 8011304:	080113e7 	.word	0x080113e7
 8011308:	08011319 	.word	0x08011319
 801130c:	08011319 	.word	0x08011319
 8011310:	0801138b 	.word	0x0801138b
 8011314:	0801139f 	.word	0x0801139f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801131e:	f043 0301 	orr.w	r3, r3, #1
 8011322:	b2da      	uxtb	r2, r3
 8011324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011326:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801132a:	68ba      	ldr	r2, [r7, #8]
 801132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801132e:	699b      	ldr	r3, [r3, #24]
 8011330:	18d1      	adds	r1, r2, r3
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011338:	f7ff ff5e 	bl	80111f8 <prvInsertTimerInActiveList>
 801133c:	4603      	mov	r3, r0
 801133e:	2b00      	cmp	r3, #0
 8011340:	d067      	beq.n	8011412 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011344:	6a1b      	ldr	r3, [r3, #32]
 8011346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011348:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801134a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011350:	f003 0304 	and.w	r3, r3, #4
 8011354:	2b00      	cmp	r3, #0
 8011356:	d05c      	beq.n	8011412 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011358:	68ba      	ldr	r2, [r7, #8]
 801135a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135c:	699b      	ldr	r3, [r3, #24]
 801135e:	441a      	add	r2, r3
 8011360:	2300      	movs	r3, #0
 8011362:	9300      	str	r3, [sp, #0]
 8011364:	2300      	movs	r3, #0
 8011366:	2100      	movs	r1, #0
 8011368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801136a:	f7ff fe09 	bl	8010f80 <xTimerGenericCommand>
 801136e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011370:	6a3b      	ldr	r3, [r7, #32]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d14d      	bne.n	8011412 <prvProcessReceivedCommands+0x196>
 8011376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801137a:	f383 8811 	msr	BASEPRI, r3
 801137e:	f3bf 8f6f 	isb	sy
 8011382:	f3bf 8f4f 	dsb	sy
 8011386:	61bb      	str	r3, [r7, #24]
 8011388:	e7fe      	b.n	8011388 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011390:	f023 0301 	bic.w	r3, r3, #1
 8011394:	b2da      	uxtb	r2, r3
 8011396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011398:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801139c:	e039      	b.n	8011412 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801139e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113a4:	f043 0301 	orr.w	r3, r3, #1
 80113a8:	b2da      	uxtb	r2, r3
 80113aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80113b0:	68ba      	ldr	r2, [r7, #8]
 80113b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80113b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b8:	699b      	ldr	r3, [r3, #24]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d109      	bne.n	80113d2 <prvProcessReceivedCommands+0x156>
 80113be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c2:	f383 8811 	msr	BASEPRI, r3
 80113c6:	f3bf 8f6f 	isb	sy
 80113ca:	f3bf 8f4f 	dsb	sy
 80113ce:	617b      	str	r3, [r7, #20]
 80113d0:	e7fe      	b.n	80113d0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80113d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d4:	699a      	ldr	r2, [r3, #24]
 80113d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d8:	18d1      	adds	r1, r2, r3
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113e0:	f7ff ff0a 	bl	80111f8 <prvInsertTimerInActiveList>
					break;
 80113e4:	e015      	b.n	8011412 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80113ec:	f003 0302 	and.w	r3, r3, #2
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d103      	bne.n	80113fc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80113f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113f6:	f000 fbc5 	bl	8011b84 <vPortFree>
 80113fa:	e00a      	b.n	8011412 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80113fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011402:	f023 0301 	bic.w	r3, r3, #1
 8011406:	b2da      	uxtb	r2, r3
 8011408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801140e:	e000      	b.n	8011412 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8011410:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011412:	4b07      	ldr	r3, [pc, #28]	; (8011430 <prvProcessReceivedCommands+0x1b4>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	1d39      	adds	r1, r7, #4
 8011418:	2200      	movs	r2, #0
 801141a:	4618      	mov	r0, r3
 801141c:	f7fe fbbc 	bl	800fb98 <xQueueReceive>
 8011420:	4603      	mov	r3, r0
 8011422:	2b00      	cmp	r3, #0
 8011424:	f47f af2e 	bne.w	8011284 <prvProcessReceivedCommands+0x8>
	}
}
 8011428:	bf00      	nop
 801142a:	3730      	adds	r7, #48	; 0x30
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}
 8011430:	20000d80 	.word	0x20000d80

08011434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b088      	sub	sp, #32
 8011438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801143a:	e047      	b.n	80114cc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801143c:	4b2d      	ldr	r3, [pc, #180]	; (80114f4 <prvSwitchTimerLists+0xc0>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011446:	4b2b      	ldr	r3, [pc, #172]	; (80114f4 <prvSwitchTimerLists+0xc0>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	68db      	ldr	r3, [r3, #12]
 801144c:	68db      	ldr	r3, [r3, #12]
 801144e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	3304      	adds	r3, #4
 8011454:	4618      	mov	r0, r3
 8011456:	f7fe f8a9 	bl	800f5ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	6a1b      	ldr	r3, [r3, #32]
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011468:	f003 0304 	and.w	r3, r3, #4
 801146c:	2b00      	cmp	r3, #0
 801146e:	d02d      	beq.n	80114cc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	693a      	ldr	r2, [r7, #16]
 8011476:	4413      	add	r3, r2
 8011478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801147a:	68ba      	ldr	r2, [r7, #8]
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	429a      	cmp	r2, r3
 8011480:	d90e      	bls.n	80114a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	68ba      	ldr	r2, [r7, #8]
 8011486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	68fa      	ldr	r2, [r7, #12]
 801148c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801148e:	4b19      	ldr	r3, [pc, #100]	; (80114f4 <prvSwitchTimerLists+0xc0>)
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	3304      	adds	r3, #4
 8011496:	4619      	mov	r1, r3
 8011498:	4610      	mov	r0, r2
 801149a:	f7fe f84e 	bl	800f53a <vListInsert>
 801149e:	e015      	b.n	80114cc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80114a0:	2300      	movs	r3, #0
 80114a2:	9300      	str	r3, [sp, #0]
 80114a4:	2300      	movs	r3, #0
 80114a6:	693a      	ldr	r2, [r7, #16]
 80114a8:	2100      	movs	r1, #0
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	f7ff fd68 	bl	8010f80 <xTimerGenericCommand>
 80114b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d109      	bne.n	80114cc <prvSwitchTimerLists+0x98>
 80114b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114bc:	f383 8811 	msr	BASEPRI, r3
 80114c0:	f3bf 8f6f 	isb	sy
 80114c4:	f3bf 8f4f 	dsb	sy
 80114c8:	603b      	str	r3, [r7, #0]
 80114ca:	e7fe      	b.n	80114ca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80114cc:	4b09      	ldr	r3, [pc, #36]	; (80114f4 <prvSwitchTimerLists+0xc0>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d1b2      	bne.n	801143c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80114d6:	4b07      	ldr	r3, [pc, #28]	; (80114f4 <prvSwitchTimerLists+0xc0>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80114dc:	4b06      	ldr	r3, [pc, #24]	; (80114f8 <prvSwitchTimerLists+0xc4>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4a04      	ldr	r2, [pc, #16]	; (80114f4 <prvSwitchTimerLists+0xc0>)
 80114e2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80114e4:	4a04      	ldr	r2, [pc, #16]	; (80114f8 <prvSwitchTimerLists+0xc4>)
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	6013      	str	r3, [r2, #0]
}
 80114ea:	bf00      	nop
 80114ec:	3718      	adds	r7, #24
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	20000d78 	.word	0x20000d78
 80114f8:	20000d7c 	.word	0x20000d7c

080114fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b082      	sub	sp, #8
 8011500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8011502:	f000 f963 	bl	80117cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8011506:	4b15      	ldr	r3, [pc, #84]	; (801155c <prvCheckForValidListAndQueue+0x60>)
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d120      	bne.n	8011550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801150e:	4814      	ldr	r0, [pc, #80]	; (8011560 <prvCheckForValidListAndQueue+0x64>)
 8011510:	f7fd ffc2 	bl	800f498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8011514:	4813      	ldr	r0, [pc, #76]	; (8011564 <prvCheckForValidListAndQueue+0x68>)
 8011516:	f7fd ffbf 	bl	800f498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801151a:	4b13      	ldr	r3, [pc, #76]	; (8011568 <prvCheckForValidListAndQueue+0x6c>)
 801151c:	4a10      	ldr	r2, [pc, #64]	; (8011560 <prvCheckForValidListAndQueue+0x64>)
 801151e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8011520:	4b12      	ldr	r3, [pc, #72]	; (801156c <prvCheckForValidListAndQueue+0x70>)
 8011522:	4a10      	ldr	r2, [pc, #64]	; (8011564 <prvCheckForValidListAndQueue+0x68>)
 8011524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8011526:	2300      	movs	r3, #0
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	4b11      	ldr	r3, [pc, #68]	; (8011570 <prvCheckForValidListAndQueue+0x74>)
 801152c:	4a11      	ldr	r2, [pc, #68]	; (8011574 <prvCheckForValidListAndQueue+0x78>)
 801152e:	2110      	movs	r1, #16
 8011530:	200a      	movs	r0, #10
 8011532:	f7fe f8cd 	bl	800f6d0 <xQueueGenericCreateStatic>
 8011536:	4602      	mov	r2, r0
 8011538:	4b08      	ldr	r3, [pc, #32]	; (801155c <prvCheckForValidListAndQueue+0x60>)
 801153a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801153c:	4b07      	ldr	r3, [pc, #28]	; (801155c <prvCheckForValidListAndQueue+0x60>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d005      	beq.n	8011550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011544:	4b05      	ldr	r3, [pc, #20]	; (801155c <prvCheckForValidListAndQueue+0x60>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	490b      	ldr	r1, [pc, #44]	; (8011578 <prvCheckForValidListAndQueue+0x7c>)
 801154a:	4618      	mov	r0, r3
 801154c:	f7fe fd8e 	bl	801006c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011550:	f000 f96a 	bl	8011828 <vPortExitCritical>
}
 8011554:	bf00      	nop
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	20000d80 	.word	0x20000d80
 8011560:	20000d50 	.word	0x20000d50
 8011564:	20000d64 	.word	0x20000d64
 8011568:	20000d78 	.word	0x20000d78
 801156c:	20000d7c 	.word	0x20000d7c
 8011570:	20000e2c 	.word	0x20000e2c
 8011574:	20000d8c 	.word	0x20000d8c
 8011578:	08012694 	.word	0x08012694

0801157c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801157c:	b480      	push	{r7}
 801157e:	b085      	sub	sp, #20
 8011580:	af00      	add	r7, sp, #0
 8011582:	60f8      	str	r0, [r7, #12]
 8011584:	60b9      	str	r1, [r7, #8]
 8011586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	3b04      	subs	r3, #4
 801158c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	3b04      	subs	r3, #4
 801159a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	f023 0201 	bic.w	r2, r3, #1
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	3b04      	subs	r3, #4
 80115aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80115ac:	4a0c      	ldr	r2, [pc, #48]	; (80115e0 <pxPortInitialiseStack+0x64>)
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	3b14      	subs	r3, #20
 80115b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80115b8:	687a      	ldr	r2, [r7, #4]
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	3b04      	subs	r3, #4
 80115c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	f06f 0202 	mvn.w	r2, #2
 80115ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	3b20      	subs	r3, #32
 80115d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80115d2:	68fb      	ldr	r3, [r7, #12]
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3714      	adds	r7, #20
 80115d8:	46bd      	mov	sp, r7
 80115da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115de:	4770      	bx	lr
 80115e0:	080115e5 	.word	0x080115e5

080115e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80115e4:	b480      	push	{r7}
 80115e6:	b085      	sub	sp, #20
 80115e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80115ea:	2300      	movs	r3, #0
 80115ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80115ee:	4b11      	ldr	r3, [pc, #68]	; (8011634 <prvTaskExitError+0x50>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115f6:	d009      	beq.n	801160c <prvTaskExitError+0x28>
 80115f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fc:	f383 8811 	msr	BASEPRI, r3
 8011600:	f3bf 8f6f 	isb	sy
 8011604:	f3bf 8f4f 	dsb	sy
 8011608:	60fb      	str	r3, [r7, #12]
 801160a:	e7fe      	b.n	801160a <prvTaskExitError+0x26>
 801160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011610:	f383 8811 	msr	BASEPRI, r3
 8011614:	f3bf 8f6f 	isb	sy
 8011618:	f3bf 8f4f 	dsb	sy
 801161c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801161e:	bf00      	nop
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d0fc      	beq.n	8011620 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011626:	bf00      	nop
 8011628:	3714      	adds	r7, #20
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	20000094 	.word	0x20000094
	...

08011640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011640:	4b07      	ldr	r3, [pc, #28]	; (8011660 <pxCurrentTCBConst2>)
 8011642:	6819      	ldr	r1, [r3, #0]
 8011644:	6808      	ldr	r0, [r1, #0]
 8011646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801164a:	f380 8809 	msr	PSP, r0
 801164e:	f3bf 8f6f 	isb	sy
 8011652:	f04f 0000 	mov.w	r0, #0
 8011656:	f380 8811 	msr	BASEPRI, r0
 801165a:	4770      	bx	lr
 801165c:	f3af 8000 	nop.w

08011660 <pxCurrentTCBConst2>:
 8011660:	20000850 	.word	0x20000850
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011664:	bf00      	nop
 8011666:	bf00      	nop

08011668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011668:	4808      	ldr	r0, [pc, #32]	; (801168c <prvPortStartFirstTask+0x24>)
 801166a:	6800      	ldr	r0, [r0, #0]
 801166c:	6800      	ldr	r0, [r0, #0]
 801166e:	f380 8808 	msr	MSP, r0
 8011672:	f04f 0000 	mov.w	r0, #0
 8011676:	f380 8814 	msr	CONTROL, r0
 801167a:	b662      	cpsie	i
 801167c:	b661      	cpsie	f
 801167e:	f3bf 8f4f 	dsb	sy
 8011682:	f3bf 8f6f 	isb	sy
 8011686:	df00      	svc	0
 8011688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801168a:	bf00      	nop
 801168c:	e000ed08 	.word	0xe000ed08

08011690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b086      	sub	sp, #24
 8011694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011696:	4b44      	ldr	r3, [pc, #272]	; (80117a8 <xPortStartScheduler+0x118>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	4a44      	ldr	r2, [pc, #272]	; (80117ac <xPortStartScheduler+0x11c>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d109      	bne.n	80116b4 <xPortStartScheduler+0x24>
 80116a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a4:	f383 8811 	msr	BASEPRI, r3
 80116a8:	f3bf 8f6f 	isb	sy
 80116ac:	f3bf 8f4f 	dsb	sy
 80116b0:	613b      	str	r3, [r7, #16]
 80116b2:	e7fe      	b.n	80116b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80116b4:	4b3c      	ldr	r3, [pc, #240]	; (80117a8 <xPortStartScheduler+0x118>)
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	4a3d      	ldr	r2, [pc, #244]	; (80117b0 <xPortStartScheduler+0x120>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d109      	bne.n	80116d2 <xPortStartScheduler+0x42>
 80116be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c2:	f383 8811 	msr	BASEPRI, r3
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	f3bf 8f4f 	dsb	sy
 80116ce:	60fb      	str	r3, [r7, #12]
 80116d0:	e7fe      	b.n	80116d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80116d2:	4b38      	ldr	r3, [pc, #224]	; (80117b4 <xPortStartScheduler+0x124>)
 80116d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	22ff      	movs	r2, #255	; 0xff
 80116e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80116ec:	78fb      	ldrb	r3, [r7, #3]
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80116f4:	b2da      	uxtb	r2, r3
 80116f6:	4b30      	ldr	r3, [pc, #192]	; (80117b8 <xPortStartScheduler+0x128>)
 80116f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80116fa:	4b30      	ldr	r3, [pc, #192]	; (80117bc <xPortStartScheduler+0x12c>)
 80116fc:	2207      	movs	r2, #7
 80116fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011700:	e009      	b.n	8011716 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011702:	4b2e      	ldr	r3, [pc, #184]	; (80117bc <xPortStartScheduler+0x12c>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	3b01      	subs	r3, #1
 8011708:	4a2c      	ldr	r2, [pc, #176]	; (80117bc <xPortStartScheduler+0x12c>)
 801170a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801170c:	78fb      	ldrb	r3, [r7, #3]
 801170e:	b2db      	uxtb	r3, r3
 8011710:	005b      	lsls	r3, r3, #1
 8011712:	b2db      	uxtb	r3, r3
 8011714:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011716:	78fb      	ldrb	r3, [r7, #3]
 8011718:	b2db      	uxtb	r3, r3
 801171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801171e:	2b80      	cmp	r3, #128	; 0x80
 8011720:	d0ef      	beq.n	8011702 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011722:	4b26      	ldr	r3, [pc, #152]	; (80117bc <xPortStartScheduler+0x12c>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	f1c3 0307 	rsb	r3, r3, #7
 801172a:	2b04      	cmp	r3, #4
 801172c:	d009      	beq.n	8011742 <xPortStartScheduler+0xb2>
 801172e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011732:	f383 8811 	msr	BASEPRI, r3
 8011736:	f3bf 8f6f 	isb	sy
 801173a:	f3bf 8f4f 	dsb	sy
 801173e:	60bb      	str	r3, [r7, #8]
 8011740:	e7fe      	b.n	8011740 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011742:	4b1e      	ldr	r3, [pc, #120]	; (80117bc <xPortStartScheduler+0x12c>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	021b      	lsls	r3, r3, #8
 8011748:	4a1c      	ldr	r2, [pc, #112]	; (80117bc <xPortStartScheduler+0x12c>)
 801174a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801174c:	4b1b      	ldr	r3, [pc, #108]	; (80117bc <xPortStartScheduler+0x12c>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011754:	4a19      	ldr	r2, [pc, #100]	; (80117bc <xPortStartScheduler+0x12c>)
 8011756:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	b2da      	uxtb	r2, r3
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011760:	4b17      	ldr	r3, [pc, #92]	; (80117c0 <xPortStartScheduler+0x130>)
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	4a16      	ldr	r2, [pc, #88]	; (80117c0 <xPortStartScheduler+0x130>)
 8011766:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801176a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801176c:	4b14      	ldr	r3, [pc, #80]	; (80117c0 <xPortStartScheduler+0x130>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4a13      	ldr	r2, [pc, #76]	; (80117c0 <xPortStartScheduler+0x130>)
 8011772:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011776:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011778:	f000 f8d6 	bl	8011928 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801177c:	4b11      	ldr	r3, [pc, #68]	; (80117c4 <xPortStartScheduler+0x134>)
 801177e:	2200      	movs	r2, #0
 8011780:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011782:	f000 f8f5 	bl	8011970 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011786:	4b10      	ldr	r3, [pc, #64]	; (80117c8 <xPortStartScheduler+0x138>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	4a0f      	ldr	r2, [pc, #60]	; (80117c8 <xPortStartScheduler+0x138>)
 801178c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011790:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011792:	f7ff ff69 	bl	8011668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011796:	f7ff f86d 	bl	8010874 <vTaskSwitchContext>
	prvTaskExitError();
 801179a:	f7ff ff23 	bl	80115e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801179e:	2300      	movs	r3, #0
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	3718      	adds	r7, #24
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	e000ed00 	.word	0xe000ed00
 80117ac:	410fc271 	.word	0x410fc271
 80117b0:	410fc270 	.word	0x410fc270
 80117b4:	e000e400 	.word	0xe000e400
 80117b8:	20000e7c 	.word	0x20000e7c
 80117bc:	20000e80 	.word	0x20000e80
 80117c0:	e000ed20 	.word	0xe000ed20
 80117c4:	20000094 	.word	0x20000094
 80117c8:	e000ef34 	.word	0xe000ef34

080117cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80117cc:	b480      	push	{r7}
 80117ce:	b083      	sub	sp, #12
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d6:	f383 8811 	msr	BASEPRI, r3
 80117da:	f3bf 8f6f 	isb	sy
 80117de:	f3bf 8f4f 	dsb	sy
 80117e2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80117e4:	4b0e      	ldr	r3, [pc, #56]	; (8011820 <vPortEnterCritical+0x54>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	3301      	adds	r3, #1
 80117ea:	4a0d      	ldr	r2, [pc, #52]	; (8011820 <vPortEnterCritical+0x54>)
 80117ec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80117ee:	4b0c      	ldr	r3, [pc, #48]	; (8011820 <vPortEnterCritical+0x54>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d10e      	bne.n	8011814 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80117f6:	4b0b      	ldr	r3, [pc, #44]	; (8011824 <vPortEnterCritical+0x58>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	b2db      	uxtb	r3, r3
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d009      	beq.n	8011814 <vPortEnterCritical+0x48>
 8011800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011804:	f383 8811 	msr	BASEPRI, r3
 8011808:	f3bf 8f6f 	isb	sy
 801180c:	f3bf 8f4f 	dsb	sy
 8011810:	603b      	str	r3, [r7, #0]
 8011812:	e7fe      	b.n	8011812 <vPortEnterCritical+0x46>
	}
}
 8011814:	bf00      	nop
 8011816:	370c      	adds	r7, #12
 8011818:	46bd      	mov	sp, r7
 801181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181e:	4770      	bx	lr
 8011820:	20000094 	.word	0x20000094
 8011824:	e000ed04 	.word	0xe000ed04

08011828 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011828:	b480      	push	{r7}
 801182a:	b083      	sub	sp, #12
 801182c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801182e:	4b11      	ldr	r3, [pc, #68]	; (8011874 <vPortExitCritical+0x4c>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d109      	bne.n	801184a <vPortExitCritical+0x22>
 8011836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183a:	f383 8811 	msr	BASEPRI, r3
 801183e:	f3bf 8f6f 	isb	sy
 8011842:	f3bf 8f4f 	dsb	sy
 8011846:	607b      	str	r3, [r7, #4]
 8011848:	e7fe      	b.n	8011848 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801184a:	4b0a      	ldr	r3, [pc, #40]	; (8011874 <vPortExitCritical+0x4c>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	3b01      	subs	r3, #1
 8011850:	4a08      	ldr	r2, [pc, #32]	; (8011874 <vPortExitCritical+0x4c>)
 8011852:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011854:	4b07      	ldr	r3, [pc, #28]	; (8011874 <vPortExitCritical+0x4c>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d104      	bne.n	8011866 <vPortExitCritical+0x3e>
 801185c:	2300      	movs	r3, #0
 801185e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011866:	bf00      	nop
 8011868:	370c      	adds	r7, #12
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr
 8011872:	bf00      	nop
 8011874:	20000094 	.word	0x20000094
	...

08011880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011880:	f3ef 8009 	mrs	r0, PSP
 8011884:	f3bf 8f6f 	isb	sy
 8011888:	4b15      	ldr	r3, [pc, #84]	; (80118e0 <pxCurrentTCBConst>)
 801188a:	681a      	ldr	r2, [r3, #0]
 801188c:	f01e 0f10 	tst.w	lr, #16
 8011890:	bf08      	it	eq
 8011892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801189a:	6010      	str	r0, [r2, #0]
 801189c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80118a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80118a4:	f380 8811 	msr	BASEPRI, r0
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	f3bf 8f6f 	isb	sy
 80118b0:	f7fe ffe0 	bl	8010874 <vTaskSwitchContext>
 80118b4:	f04f 0000 	mov.w	r0, #0
 80118b8:	f380 8811 	msr	BASEPRI, r0
 80118bc:	bc09      	pop	{r0, r3}
 80118be:	6819      	ldr	r1, [r3, #0]
 80118c0:	6808      	ldr	r0, [r1, #0]
 80118c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118c6:	f01e 0f10 	tst.w	lr, #16
 80118ca:	bf08      	it	eq
 80118cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80118d0:	f380 8809 	msr	PSP, r0
 80118d4:	f3bf 8f6f 	isb	sy
 80118d8:	4770      	bx	lr
 80118da:	bf00      	nop
 80118dc:	f3af 8000 	nop.w

080118e0 <pxCurrentTCBConst>:
 80118e0:	20000850 	.word	0x20000850
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80118e4:	bf00      	nop
 80118e6:	bf00      	nop

080118e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
	__asm volatile
 80118ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f2:	f383 8811 	msr	BASEPRI, r3
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011900:	f7fe ff00 	bl	8010704 <xTaskIncrementTick>
 8011904:	4603      	mov	r3, r0
 8011906:	2b00      	cmp	r3, #0
 8011908:	d003      	beq.n	8011912 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801190a:	4b06      	ldr	r3, [pc, #24]	; (8011924 <SysTick_Handler+0x3c>)
 801190c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011910:	601a      	str	r2, [r3, #0]
 8011912:	2300      	movs	r3, #0
 8011914:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011916:	683b      	ldr	r3, [r7, #0]
 8011918:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801191c:	bf00      	nop
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	e000ed04 	.word	0xe000ed04

08011928 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011928:	b480      	push	{r7}
 801192a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801192c:	4b0b      	ldr	r3, [pc, #44]	; (801195c <vPortSetupTimerInterrupt+0x34>)
 801192e:	2200      	movs	r2, #0
 8011930:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011932:	4b0b      	ldr	r3, [pc, #44]	; (8011960 <vPortSetupTimerInterrupt+0x38>)
 8011934:	2200      	movs	r2, #0
 8011936:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011938:	4b0a      	ldr	r3, [pc, #40]	; (8011964 <vPortSetupTimerInterrupt+0x3c>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	4a0a      	ldr	r2, [pc, #40]	; (8011968 <vPortSetupTimerInterrupt+0x40>)
 801193e:	fba2 2303 	umull	r2, r3, r2, r3
 8011942:	099b      	lsrs	r3, r3, #6
 8011944:	4a09      	ldr	r2, [pc, #36]	; (801196c <vPortSetupTimerInterrupt+0x44>)
 8011946:	3b01      	subs	r3, #1
 8011948:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801194a:	4b04      	ldr	r3, [pc, #16]	; (801195c <vPortSetupTimerInterrupt+0x34>)
 801194c:	2207      	movs	r2, #7
 801194e:	601a      	str	r2, [r3, #0]
}
 8011950:	bf00      	nop
 8011952:	46bd      	mov	sp, r7
 8011954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011958:	4770      	bx	lr
 801195a:	bf00      	nop
 801195c:	e000e010 	.word	0xe000e010
 8011960:	e000e018 	.word	0xe000e018
 8011964:	20000010 	.word	0x20000010
 8011968:	10624dd3 	.word	0x10624dd3
 801196c:	e000e014 	.word	0xe000e014

08011970 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011970:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011980 <vPortEnableVFP+0x10>
 8011974:	6801      	ldr	r1, [r0, #0]
 8011976:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801197a:	6001      	str	r1, [r0, #0]
 801197c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801197e:	bf00      	nop
 8011980:	e000ed88 	.word	0xe000ed88

08011984 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011984:	b480      	push	{r7}
 8011986:	b085      	sub	sp, #20
 8011988:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801198a:	f3ef 8305 	mrs	r3, IPSR
 801198e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	2b0f      	cmp	r3, #15
 8011994:	d913      	bls.n	80119be <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011996:	4a16      	ldr	r2, [pc, #88]	; (80119f0 <vPortValidateInterruptPriority+0x6c>)
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	4413      	add	r3, r2
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80119a0:	4b14      	ldr	r3, [pc, #80]	; (80119f4 <vPortValidateInterruptPriority+0x70>)
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	7afa      	ldrb	r2, [r7, #11]
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d209      	bcs.n	80119be <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80119aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ae:	f383 8811 	msr	BASEPRI, r3
 80119b2:	f3bf 8f6f 	isb	sy
 80119b6:	f3bf 8f4f 	dsb	sy
 80119ba:	607b      	str	r3, [r7, #4]
 80119bc:	e7fe      	b.n	80119bc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80119be:	4b0e      	ldr	r3, [pc, #56]	; (80119f8 <vPortValidateInterruptPriority+0x74>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80119c6:	4b0d      	ldr	r3, [pc, #52]	; (80119fc <vPortValidateInterruptPriority+0x78>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d909      	bls.n	80119e2 <vPortValidateInterruptPriority+0x5e>
 80119ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	f3bf 8f6f 	isb	sy
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	e7fe      	b.n	80119e0 <vPortValidateInterruptPriority+0x5c>
	}
 80119e2:	bf00      	nop
 80119e4:	3714      	adds	r7, #20
 80119e6:	46bd      	mov	sp, r7
 80119e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ec:	4770      	bx	lr
 80119ee:	bf00      	nop
 80119f0:	e000e3f0 	.word	0xe000e3f0
 80119f4:	20000e7c 	.word	0x20000e7c
 80119f8:	e000ed0c 	.word	0xe000ed0c
 80119fc:	20000e80 	.word	0x20000e80

08011a00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b08a      	sub	sp, #40	; 0x28
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011a0c:	f7fe fdc0 	bl	8010590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011a10:	4b57      	ldr	r3, [pc, #348]	; (8011b70 <pvPortMalloc+0x170>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d101      	bne.n	8011a1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011a18:	f000 f90c 	bl	8011c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011a1c:	4b55      	ldr	r3, [pc, #340]	; (8011b74 <pvPortMalloc+0x174>)
 8011a1e:	681a      	ldr	r2, [r3, #0]
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4013      	ands	r3, r2
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	f040 808c 	bne.w	8011b42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d01c      	beq.n	8011a6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011a30:	2208      	movs	r2, #8
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	4413      	add	r3, r2
 8011a36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f003 0307 	and.w	r3, r3, #7
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d013      	beq.n	8011a6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f023 0307 	bic.w	r3, r3, #7
 8011a48:	3308      	adds	r3, #8
 8011a4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f003 0307 	and.w	r3, r3, #7
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d009      	beq.n	8011a6a <pvPortMalloc+0x6a>
 8011a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a5a:	f383 8811 	msr	BASEPRI, r3
 8011a5e:	f3bf 8f6f 	isb	sy
 8011a62:	f3bf 8f4f 	dsb	sy
 8011a66:	617b      	str	r3, [r7, #20]
 8011a68:	e7fe      	b.n	8011a68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d068      	beq.n	8011b42 <pvPortMalloc+0x142>
 8011a70:	4b41      	ldr	r3, [pc, #260]	; (8011b78 <pvPortMalloc+0x178>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d863      	bhi.n	8011b42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011a7a:	4b40      	ldr	r3, [pc, #256]	; (8011b7c <pvPortMalloc+0x17c>)
 8011a7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011a7e:	4b3f      	ldr	r3, [pc, #252]	; (8011b7c <pvPortMalloc+0x17c>)
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a84:	e004      	b.n	8011a90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a92:	685b      	ldr	r3, [r3, #4]
 8011a94:	687a      	ldr	r2, [r7, #4]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d903      	bls.n	8011aa2 <pvPortMalloc+0xa2>
 8011a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d1f1      	bne.n	8011a86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011aa2:	4b33      	ldr	r3, [pc, #204]	; (8011b70 <pvPortMalloc+0x170>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	d04a      	beq.n	8011b42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011aac:	6a3b      	ldr	r3, [r7, #32]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	2208      	movs	r2, #8
 8011ab2:	4413      	add	r3, r2
 8011ab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab8:	681a      	ldr	r2, [r3, #0]
 8011aba:	6a3b      	ldr	r3, [r7, #32]
 8011abc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac0:	685a      	ldr	r2, [r3, #4]
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	1ad2      	subs	r2, r2, r3
 8011ac6:	2308      	movs	r3, #8
 8011ac8:	005b      	lsls	r3, r3, #1
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d91e      	bls.n	8011b0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	4413      	add	r3, r2
 8011ad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	f003 0307 	and.w	r3, r3, #7
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d009      	beq.n	8011af4 <pvPortMalloc+0xf4>
 8011ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae4:	f383 8811 	msr	BASEPRI, r3
 8011ae8:	f3bf 8f6f 	isb	sy
 8011aec:	f3bf 8f4f 	dsb	sy
 8011af0:	613b      	str	r3, [r7, #16]
 8011af2:	e7fe      	b.n	8011af2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	685a      	ldr	r2, [r3, #4]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	1ad2      	subs	r2, r2, r3
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011b06:	69b8      	ldr	r0, [r7, #24]
 8011b08:	f000 f8f6 	bl	8011cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011b0c:	4b1a      	ldr	r3, [pc, #104]	; (8011b78 <pvPortMalloc+0x178>)
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b12:	685b      	ldr	r3, [r3, #4]
 8011b14:	1ad3      	subs	r3, r2, r3
 8011b16:	4a18      	ldr	r2, [pc, #96]	; (8011b78 <pvPortMalloc+0x178>)
 8011b18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011b1a:	4b17      	ldr	r3, [pc, #92]	; (8011b78 <pvPortMalloc+0x178>)
 8011b1c:	681a      	ldr	r2, [r3, #0]
 8011b1e:	4b18      	ldr	r3, [pc, #96]	; (8011b80 <pvPortMalloc+0x180>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d203      	bcs.n	8011b2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011b26:	4b14      	ldr	r3, [pc, #80]	; (8011b78 <pvPortMalloc+0x178>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	4a15      	ldr	r2, [pc, #84]	; (8011b80 <pvPortMalloc+0x180>)
 8011b2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b30:	685a      	ldr	r2, [r3, #4]
 8011b32:	4b10      	ldr	r3, [pc, #64]	; (8011b74 <pvPortMalloc+0x174>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	431a      	orrs	r2, r3
 8011b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3e:	2200      	movs	r2, #0
 8011b40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011b42:	f7fe fd33 	bl	80105ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	f003 0307 	and.w	r3, r3, #7
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d009      	beq.n	8011b64 <pvPortMalloc+0x164>
 8011b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b54:	f383 8811 	msr	BASEPRI, r3
 8011b58:	f3bf 8f6f 	isb	sy
 8011b5c:	f3bf 8f4f 	dsb	sy
 8011b60:	60fb      	str	r3, [r7, #12]
 8011b62:	e7fe      	b.n	8011b62 <pvPortMalloc+0x162>
	return pvReturn;
 8011b64:	69fb      	ldr	r3, [r7, #28]
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3728      	adds	r7, #40	; 0x28
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	20004a8c 	.word	0x20004a8c
 8011b74:	20004a98 	.word	0x20004a98
 8011b78:	20004a90 	.word	0x20004a90
 8011b7c:	20004a84 	.word	0x20004a84
 8011b80:	20004a94 	.word	0x20004a94

08011b84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b086      	sub	sp, #24
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d046      	beq.n	8011c24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011b96:	2308      	movs	r3, #8
 8011b98:	425b      	negs	r3, r3
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ba4:	693b      	ldr	r3, [r7, #16]
 8011ba6:	685a      	ldr	r2, [r3, #4]
 8011ba8:	4b20      	ldr	r3, [pc, #128]	; (8011c2c <vPortFree+0xa8>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4013      	ands	r3, r2
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d109      	bne.n	8011bc6 <vPortFree+0x42>
 8011bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bb6:	f383 8811 	msr	BASEPRI, r3
 8011bba:	f3bf 8f6f 	isb	sy
 8011bbe:	f3bf 8f4f 	dsb	sy
 8011bc2:	60fb      	str	r3, [r7, #12]
 8011bc4:	e7fe      	b.n	8011bc4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011bc6:	693b      	ldr	r3, [r7, #16]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d009      	beq.n	8011be2 <vPortFree+0x5e>
 8011bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd2:	f383 8811 	msr	BASEPRI, r3
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	f3bf 8f4f 	dsb	sy
 8011bde:	60bb      	str	r3, [r7, #8]
 8011be0:	e7fe      	b.n	8011be0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011be2:	693b      	ldr	r3, [r7, #16]
 8011be4:	685a      	ldr	r2, [r3, #4]
 8011be6:	4b11      	ldr	r3, [pc, #68]	; (8011c2c <vPortFree+0xa8>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	4013      	ands	r3, r2
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d019      	beq.n	8011c24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d115      	bne.n	8011c24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011bf8:	693b      	ldr	r3, [r7, #16]
 8011bfa:	685a      	ldr	r2, [r3, #4]
 8011bfc:	4b0b      	ldr	r3, [pc, #44]	; (8011c2c <vPortFree+0xa8>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	43db      	mvns	r3, r3
 8011c02:	401a      	ands	r2, r3
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011c08:	f7fe fcc2 	bl	8010590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	685a      	ldr	r2, [r3, #4]
 8011c10:	4b07      	ldr	r3, [pc, #28]	; (8011c30 <vPortFree+0xac>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	4413      	add	r3, r2
 8011c16:	4a06      	ldr	r2, [pc, #24]	; (8011c30 <vPortFree+0xac>)
 8011c18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011c1a:	6938      	ldr	r0, [r7, #16]
 8011c1c:	f000 f86c 	bl	8011cf8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011c20:	f7fe fcc4 	bl	80105ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011c24:	bf00      	nop
 8011c26:	3718      	adds	r7, #24
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	20004a98 	.word	0x20004a98
 8011c30:	20004a90 	.word	0x20004a90

08011c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011c34:	b480      	push	{r7}
 8011c36:	b085      	sub	sp, #20
 8011c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011c40:	4b27      	ldr	r3, [pc, #156]	; (8011ce0 <prvHeapInit+0xac>)
 8011c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	f003 0307 	and.w	r3, r3, #7
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d00c      	beq.n	8011c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	3307      	adds	r3, #7
 8011c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	f023 0307 	bic.w	r3, r3, #7
 8011c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011c5c:	68ba      	ldr	r2, [r7, #8]
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	1ad3      	subs	r3, r2, r3
 8011c62:	4a1f      	ldr	r2, [pc, #124]	; (8011ce0 <prvHeapInit+0xac>)
 8011c64:	4413      	add	r3, r2
 8011c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011c6c:	4a1d      	ldr	r2, [pc, #116]	; (8011ce4 <prvHeapInit+0xb0>)
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011c72:	4b1c      	ldr	r3, [pc, #112]	; (8011ce4 <prvHeapInit+0xb0>)
 8011c74:	2200      	movs	r2, #0
 8011c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	68ba      	ldr	r2, [r7, #8]
 8011c7c:	4413      	add	r3, r2
 8011c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011c80:	2208      	movs	r2, #8
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	1a9b      	subs	r3, r3, r2
 8011c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f023 0307 	bic.w	r3, r3, #7
 8011c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	4a15      	ldr	r2, [pc, #84]	; (8011ce8 <prvHeapInit+0xb4>)
 8011c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011c96:	4b14      	ldr	r3, [pc, #80]	; (8011ce8 <prvHeapInit+0xb4>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011c9e:	4b12      	ldr	r3, [pc, #72]	; (8011ce8 <prvHeapInit+0xb4>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	68fa      	ldr	r2, [r7, #12]
 8011cae:	1ad2      	subs	r2, r2, r3
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011cb4:	4b0c      	ldr	r3, [pc, #48]	; (8011ce8 <prvHeapInit+0xb4>)
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	4a0a      	ldr	r2, [pc, #40]	; (8011cec <prvHeapInit+0xb8>)
 8011cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	685b      	ldr	r3, [r3, #4]
 8011cc8:	4a09      	ldr	r2, [pc, #36]	; (8011cf0 <prvHeapInit+0xbc>)
 8011cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ccc:	4b09      	ldr	r3, [pc, #36]	; (8011cf4 <prvHeapInit+0xc0>)
 8011cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011cd2:	601a      	str	r2, [r3, #0]
}
 8011cd4:	bf00      	nop
 8011cd6:	3714      	adds	r7, #20
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr
 8011ce0:	20000e84 	.word	0x20000e84
 8011ce4:	20004a84 	.word	0x20004a84
 8011ce8:	20004a8c 	.word	0x20004a8c
 8011cec:	20004a94 	.word	0x20004a94
 8011cf0:	20004a90 	.word	0x20004a90
 8011cf4:	20004a98 	.word	0x20004a98

08011cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011d00:	4b28      	ldr	r3, [pc, #160]	; (8011da4 <prvInsertBlockIntoFreeList+0xac>)
 8011d02:	60fb      	str	r3, [r7, #12]
 8011d04:	e002      	b.n	8011d0c <prvInsertBlockIntoFreeList+0x14>
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	60fb      	str	r3, [r7, #12]
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	687a      	ldr	r2, [r7, #4]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d8f7      	bhi.n	8011d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	68ba      	ldr	r2, [r7, #8]
 8011d20:	4413      	add	r3, r2
 8011d22:	687a      	ldr	r2, [r7, #4]
 8011d24:	429a      	cmp	r2, r3
 8011d26:	d108      	bne.n	8011d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	685a      	ldr	r2, [r3, #4]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	685b      	ldr	r3, [r3, #4]
 8011d30:	441a      	add	r2, r3
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	685b      	ldr	r3, [r3, #4]
 8011d42:	68ba      	ldr	r2, [r7, #8]
 8011d44:	441a      	add	r2, r3
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d118      	bne.n	8011d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	4b15      	ldr	r3, [pc, #84]	; (8011da8 <prvInsertBlockIntoFreeList+0xb0>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d00d      	beq.n	8011d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	685a      	ldr	r2, [r3, #4]
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	441a      	add	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	e008      	b.n	8011d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011d76:	4b0c      	ldr	r3, [pc, #48]	; (8011da8 <prvInsertBlockIntoFreeList+0xb0>)
 8011d78:	681a      	ldr	r2, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	601a      	str	r2, [r3, #0]
 8011d7e:	e003      	b.n	8011d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	681a      	ldr	r2, [r3, #0]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011d88:	68fa      	ldr	r2, [r7, #12]
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	429a      	cmp	r2, r3
 8011d8e:	d002      	beq.n	8011d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	687a      	ldr	r2, [r7, #4]
 8011d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d96:	bf00      	nop
 8011d98:	3714      	adds	r7, #20
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop
 8011da4:	20004a84 	.word	0x20004a84
 8011da8:	20004a8c 	.word	0x20004a8c

08011dac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011db0:	2201      	movs	r2, #1
 8011db2:	490e      	ldr	r1, [pc, #56]	; (8011dec <MX_USB_HOST_Init+0x40>)
 8011db4:	480e      	ldr	r0, [pc, #56]	; (8011df0 <MX_USB_HOST_Init+0x44>)
 8011db6:	f7fb faff 	bl	800d3b8 <USBH_Init>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d001      	beq.n	8011dc4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011dc0:	f7ef fc7a 	bl	80016b8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011dc4:	490b      	ldr	r1, [pc, #44]	; (8011df4 <MX_USB_HOST_Init+0x48>)
 8011dc6:	480a      	ldr	r0, [pc, #40]	; (8011df0 <MX_USB_HOST_Init+0x44>)
 8011dc8:	f7fb fba6 	bl	800d518 <USBH_RegisterClass>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d001      	beq.n	8011dd6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011dd2:	f7ef fc71 	bl	80016b8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011dd6:	4806      	ldr	r0, [pc, #24]	; (8011df0 <MX_USB_HOST_Init+0x44>)
 8011dd8:	f7fb fc2a 	bl	800d630 <USBH_Start>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d001      	beq.n	8011de6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011de2:	f7ef fc69 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011de6:	bf00      	nop
 8011de8:	bd80      	pop	{r7, pc}
 8011dea:	bf00      	nop
 8011dec:	08011df9 	.word	0x08011df9
 8011df0:	20005398 	.word	0x20005398
 8011df4:	20000074 	.word	0x20000074

08011df8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b083      	sub	sp, #12
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	460b      	mov	r3, r1
 8011e02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011e04:	78fb      	ldrb	r3, [r7, #3]
 8011e06:	3b01      	subs	r3, #1
 8011e08:	2b04      	cmp	r3, #4
 8011e0a:	d819      	bhi.n	8011e40 <USBH_UserProcess+0x48>
 8011e0c:	a201      	add	r2, pc, #4	; (adr r2, 8011e14 <USBH_UserProcess+0x1c>)
 8011e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e12:	bf00      	nop
 8011e14:	08011e41 	.word	0x08011e41
 8011e18:	08011e31 	.word	0x08011e31
 8011e1c:	08011e41 	.word	0x08011e41
 8011e20:	08011e39 	.word	0x08011e39
 8011e24:	08011e29 	.word	0x08011e29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011e28:	4b09      	ldr	r3, [pc, #36]	; (8011e50 <USBH_UserProcess+0x58>)
 8011e2a:	2203      	movs	r2, #3
 8011e2c:	701a      	strb	r2, [r3, #0]
  break;
 8011e2e:	e008      	b.n	8011e42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011e30:	4b07      	ldr	r3, [pc, #28]	; (8011e50 <USBH_UserProcess+0x58>)
 8011e32:	2202      	movs	r2, #2
 8011e34:	701a      	strb	r2, [r3, #0]
  break;
 8011e36:	e004      	b.n	8011e42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011e38:	4b05      	ldr	r3, [pc, #20]	; (8011e50 <USBH_UserProcess+0x58>)
 8011e3a:	2201      	movs	r2, #1
 8011e3c:	701a      	strb	r2, [r3, #0]
  break;
 8011e3e:	e000      	b.n	8011e42 <USBH_UserProcess+0x4a>

  default:
  break;
 8011e40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011e42:	bf00      	nop
 8011e44:	370c      	adds	r7, #12
 8011e46:	46bd      	mov	sp, r7
 8011e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4c:	4770      	bx	lr
 8011e4e:	bf00      	nop
 8011e50:	20004a9c 	.word	0x20004a9c

08011e54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b08a      	sub	sp, #40	; 0x28
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e5c:	f107 0314 	add.w	r3, r7, #20
 8011e60:	2200      	movs	r2, #0
 8011e62:	601a      	str	r2, [r3, #0]
 8011e64:	605a      	str	r2, [r3, #4]
 8011e66:	609a      	str	r2, [r3, #8]
 8011e68:	60da      	str	r2, [r3, #12]
 8011e6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e74:	d147      	bne.n	8011f06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011e76:	2300      	movs	r3, #0
 8011e78:	613b      	str	r3, [r7, #16]
 8011e7a:	4b25      	ldr	r3, [pc, #148]	; (8011f10 <HAL_HCD_MspInit+0xbc>)
 8011e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e7e:	4a24      	ldr	r2, [pc, #144]	; (8011f10 <HAL_HCD_MspInit+0xbc>)
 8011e80:	f043 0301 	orr.w	r3, r3, #1
 8011e84:	6313      	str	r3, [r2, #48]	; 0x30
 8011e86:	4b22      	ldr	r3, [pc, #136]	; (8011f10 <HAL_HCD_MspInit+0xbc>)
 8011e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e8a:	f003 0301 	and.w	r3, r3, #1
 8011e8e:	613b      	str	r3, [r7, #16]
 8011e90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8011e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011e98:	2300      	movs	r3, #0
 8011e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011ea0:	f107 0314 	add.w	r3, r7, #20
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	481b      	ldr	r0, [pc, #108]	; (8011f14 <HAL_HCD_MspInit+0xc0>)
 8011ea8:	f7f3 f88c 	bl	8004fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8011eac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8011eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011eb2:	2302      	movs	r3, #2
 8011eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011eba:	2303      	movs	r3, #3
 8011ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011ebe:	230a      	movs	r3, #10
 8011ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ec2:	f107 0314 	add.w	r3, r7, #20
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	4812      	ldr	r0, [pc, #72]	; (8011f14 <HAL_HCD_MspInit+0xc0>)
 8011eca:	f7f3 f87b 	bl	8004fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011ece:	4b10      	ldr	r3, [pc, #64]	; (8011f10 <HAL_HCD_MspInit+0xbc>)
 8011ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ed2:	4a0f      	ldr	r2, [pc, #60]	; (8011f10 <HAL_HCD_MspInit+0xbc>)
 8011ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ed8:	6353      	str	r3, [r2, #52]	; 0x34
 8011eda:	2300      	movs	r3, #0
 8011edc:	60fb      	str	r3, [r7, #12]
 8011ede:	4b0c      	ldr	r3, [pc, #48]	; (8011f10 <HAL_HCD_MspInit+0xbc>)
 8011ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ee2:	4a0b      	ldr	r2, [pc, #44]	; (8011f10 <HAL_HCD_MspInit+0xbc>)
 8011ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8011eea:	4b09      	ldr	r3, [pc, #36]	; (8011f10 <HAL_HCD_MspInit+0xbc>)
 8011eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ef2:	60fb      	str	r3, [r7, #12]
 8011ef4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	2100      	movs	r1, #0
 8011efa:	2043      	movs	r0, #67	; 0x43
 8011efc:	f7f2 f9ac 	bl	8004258 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011f00:	2043      	movs	r0, #67	; 0x43
 8011f02:	f7f2 f9c5 	bl	8004290 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011f06:	bf00      	nop
 8011f08:	3728      	adds	r7, #40	; 0x28
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	40023800 	.word	0x40023800
 8011f14:	40020000 	.word	0x40020000

08011f18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b082      	sub	sp, #8
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fc f82f 	bl	800df8a <USBH_LL_IncTimer>
}
 8011f2c:	bf00      	nop
 8011f2e:	3708      	adds	r7, #8
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}

08011f34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b082      	sub	sp, #8
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7fc f873 	bl	800e02e <USBH_LL_Connect>
}
 8011f48:	bf00      	nop
 8011f4a:	3708      	adds	r7, #8
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}

08011f50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b082      	sub	sp, #8
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7fc f888 	bl	800e074 <USBH_LL_Disconnect>
}
 8011f64:	bf00      	nop
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	460b      	mov	r3, r1
 8011f76:	70fb      	strb	r3, [r7, #3]
 8011f78:	4613      	mov	r3, r2
 8011f7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7fc f8bf 	bl	800e106 <USBH_LL_NotifyURBChange>
#endif
}
 8011f88:	bf00      	nop
 8011f8a:	3708      	adds	r7, #8
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7fc f81d 	bl	800dfde <USBH_LL_PortEnabled>
}
 8011fa4:	bf00      	nop
 8011fa6:	3708      	adds	r7, #8
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	bd80      	pop	{r7, pc}

08011fac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b082      	sub	sp, #8
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fc f829 	bl	800e012 <USBH_LL_PortDisabled>
}
 8011fc0:	bf00      	nop
 8011fc2:	3708      	adds	r7, #8
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d12a      	bne.n	8012030 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011fda:	4a18      	ldr	r2, [pc, #96]	; (801203c <USBH_LL_Init+0x74>)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	4a15      	ldr	r2, [pc, #84]	; (801203c <USBH_LL_Init+0x74>)
 8011fe6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011fea:	4b14      	ldr	r3, [pc, #80]	; (801203c <USBH_LL_Init+0x74>)
 8011fec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011ff0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8011ff2:	4b12      	ldr	r3, [pc, #72]	; (801203c <USBH_LL_Init+0x74>)
 8011ff4:	220c      	movs	r2, #12
 8011ff6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011ff8:	4b10      	ldr	r3, [pc, #64]	; (801203c <USBH_LL_Init+0x74>)
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011ffe:	4b0f      	ldr	r3, [pc, #60]	; (801203c <USBH_LL_Init+0x74>)
 8012000:	2200      	movs	r2, #0
 8012002:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012004:	4b0d      	ldr	r3, [pc, #52]	; (801203c <USBH_LL_Init+0x74>)
 8012006:	2202      	movs	r2, #2
 8012008:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801200a:	4b0c      	ldr	r3, [pc, #48]	; (801203c <USBH_LL_Init+0x74>)
 801200c:	2200      	movs	r2, #0
 801200e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012010:	480a      	ldr	r0, [pc, #40]	; (801203c <USBH_LL_Init+0x74>)
 8012012:	f7f3 f982 	bl	800531a <HAL_HCD_Init>
 8012016:	4603      	mov	r3, r0
 8012018:	2b00      	cmp	r3, #0
 801201a:	d001      	beq.n	8012020 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801201c:	f7ef fb4c 	bl	80016b8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012020:	4806      	ldr	r0, [pc, #24]	; (801203c <USBH_LL_Init+0x74>)
 8012022:	f7f3 fd85 	bl	8005b30 <HAL_HCD_GetCurrentFrame>
 8012026:	4603      	mov	r3, r0
 8012028:	4619      	mov	r1, r3
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f7fb ff9e 	bl	800df6c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012030:	2300      	movs	r3, #0
}
 8012032:	4618      	mov	r0, r3
 8012034:	3708      	adds	r7, #8
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	2000577c 	.word	0x2000577c

08012040 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012048:	2300      	movs	r3, #0
 801204a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801204c:	2300      	movs	r3, #0
 801204e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012056:	4618      	mov	r0, r3
 8012058:	f7f3 fcf2 	bl	8005a40 <HAL_HCD_Start>
 801205c:	4603      	mov	r3, r0
 801205e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012060:	7bfb      	ldrb	r3, [r7, #15]
 8012062:	4618      	mov	r0, r3
 8012064:	f000 f95c 	bl	8012320 <USBH_Get_USB_Status>
 8012068:	4603      	mov	r3, r0
 801206a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801206c:	7bbb      	ldrb	r3, [r7, #14]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}

08012076 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012076:	b580      	push	{r7, lr}
 8012078:	b084      	sub	sp, #16
 801207a:	af00      	add	r7, sp, #0
 801207c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801207e:	2300      	movs	r3, #0
 8012080:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012082:	2300      	movs	r3, #0
 8012084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801208c:	4618      	mov	r0, r3
 801208e:	f7f3 fcfa 	bl	8005a86 <HAL_HCD_Stop>
 8012092:	4603      	mov	r3, r0
 8012094:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012096:	7bfb      	ldrb	r3, [r7, #15]
 8012098:	4618      	mov	r0, r3
 801209a:	f000 f941 	bl	8012320 <USBH_Get_USB_Status>
 801209e:	4603      	mov	r3, r0
 80120a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3710      	adds	r7, #16
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b084      	sub	sp, #16
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80120b4:	2301      	movs	r3, #1
 80120b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80120be:	4618      	mov	r0, r3
 80120c0:	f7f3 fd44 	bl	8005b4c <HAL_HCD_GetCurrentSpeed>
 80120c4:	4603      	mov	r3, r0
 80120c6:	2b01      	cmp	r3, #1
 80120c8:	d007      	beq.n	80120da <USBH_LL_GetSpeed+0x2e>
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d302      	bcc.n	80120d4 <USBH_LL_GetSpeed+0x28>
 80120ce:	2b02      	cmp	r3, #2
 80120d0:	d006      	beq.n	80120e0 <USBH_LL_GetSpeed+0x34>
 80120d2:	e008      	b.n	80120e6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80120d4:	2300      	movs	r3, #0
 80120d6:	73fb      	strb	r3, [r7, #15]
    break;
 80120d8:	e008      	b.n	80120ec <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80120da:	2301      	movs	r3, #1
 80120dc:	73fb      	strb	r3, [r7, #15]
    break;
 80120de:	e005      	b.n	80120ec <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80120e0:	2302      	movs	r3, #2
 80120e2:	73fb      	strb	r3, [r7, #15]
    break;
 80120e4:	e002      	b.n	80120ec <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80120e6:	2301      	movs	r3, #1
 80120e8:	73fb      	strb	r3, [r7, #15]
    break;
 80120ea:	bf00      	nop
  }
  return  speed;
 80120ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3710      	adds	r7, #16
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}

080120f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80120f6:	b580      	push	{r7, lr}
 80120f8:	b084      	sub	sp, #16
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120fe:	2300      	movs	r3, #0
 8012100:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012102:	2300      	movs	r3, #0
 8012104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801210c:	4618      	mov	r0, r3
 801210e:	f7f3 fcd7 	bl	8005ac0 <HAL_HCD_ResetPort>
 8012112:	4603      	mov	r3, r0
 8012114:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012116:	7bfb      	ldrb	r3, [r7, #15]
 8012118:	4618      	mov	r0, r3
 801211a:	f000 f901 	bl	8012320 <USBH_Get_USB_Status>
 801211e:	4603      	mov	r3, r0
 8012120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012122:	7bbb      	ldrb	r3, [r7, #14]
}
 8012124:	4618      	mov	r0, r3
 8012126:	3710      	adds	r7, #16
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}

0801212c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
 8012134:	460b      	mov	r3, r1
 8012136:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801213e:	78fa      	ldrb	r2, [r7, #3]
 8012140:	4611      	mov	r1, r2
 8012142:	4618      	mov	r0, r3
 8012144:	f7f3 fcdf 	bl	8005b06 <HAL_HCD_HC_GetXferCount>
 8012148:	4603      	mov	r3, r0
}
 801214a:	4618      	mov	r0, r3
 801214c:	3708      	adds	r7, #8
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012152:	b590      	push	{r4, r7, lr}
 8012154:	b089      	sub	sp, #36	; 0x24
 8012156:	af04      	add	r7, sp, #16
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	4608      	mov	r0, r1
 801215c:	4611      	mov	r1, r2
 801215e:	461a      	mov	r2, r3
 8012160:	4603      	mov	r3, r0
 8012162:	70fb      	strb	r3, [r7, #3]
 8012164:	460b      	mov	r3, r1
 8012166:	70bb      	strb	r3, [r7, #2]
 8012168:	4613      	mov	r3, r2
 801216a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801216c:	2300      	movs	r3, #0
 801216e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012170:	2300      	movs	r3, #0
 8012172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801217a:	787c      	ldrb	r4, [r7, #1]
 801217c:	78ba      	ldrb	r2, [r7, #2]
 801217e:	78f9      	ldrb	r1, [r7, #3]
 8012180:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012182:	9302      	str	r3, [sp, #8]
 8012184:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012188:	9301      	str	r3, [sp, #4]
 801218a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801218e:	9300      	str	r3, [sp, #0]
 8012190:	4623      	mov	r3, r4
 8012192:	f7f3 f924 	bl	80053de <HAL_HCD_HC_Init>
 8012196:	4603      	mov	r3, r0
 8012198:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801219a:	7bfb      	ldrb	r3, [r7, #15]
 801219c:	4618      	mov	r0, r3
 801219e:	f000 f8bf 	bl	8012320 <USBH_Get_USB_Status>
 80121a2:	4603      	mov	r3, r0
 80121a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3714      	adds	r7, #20
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd90      	pop	{r4, r7, pc}

080121b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	460b      	mov	r3, r1
 80121ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121bc:	2300      	movs	r3, #0
 80121be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80121c0:	2300      	movs	r3, #0
 80121c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80121ca:	78fa      	ldrb	r2, [r7, #3]
 80121cc:	4611      	mov	r1, r2
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7f3 f99d 	bl	800550e <HAL_HCD_HC_Halt>
 80121d4:	4603      	mov	r3, r0
 80121d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80121d8:	7bfb      	ldrb	r3, [r7, #15]
 80121da:	4618      	mov	r0, r3
 80121dc:	f000 f8a0 	bl	8012320 <USBH_Get_USB_Status>
 80121e0:	4603      	mov	r3, r0
 80121e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3710      	adds	r7, #16
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80121ee:	b590      	push	{r4, r7, lr}
 80121f0:	b089      	sub	sp, #36	; 0x24
 80121f2:	af04      	add	r7, sp, #16
 80121f4:	6078      	str	r0, [r7, #4]
 80121f6:	4608      	mov	r0, r1
 80121f8:	4611      	mov	r1, r2
 80121fa:	461a      	mov	r2, r3
 80121fc:	4603      	mov	r3, r0
 80121fe:	70fb      	strb	r3, [r7, #3]
 8012200:	460b      	mov	r3, r1
 8012202:	70bb      	strb	r3, [r7, #2]
 8012204:	4613      	mov	r3, r2
 8012206:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012208:	2300      	movs	r3, #0
 801220a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801220c:	2300      	movs	r3, #0
 801220e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012216:	787c      	ldrb	r4, [r7, #1]
 8012218:	78ba      	ldrb	r2, [r7, #2]
 801221a:	78f9      	ldrb	r1, [r7, #3]
 801221c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012220:	9303      	str	r3, [sp, #12]
 8012222:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012224:	9302      	str	r3, [sp, #8]
 8012226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012228:	9301      	str	r3, [sp, #4]
 801222a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801222e:	9300      	str	r3, [sp, #0]
 8012230:	4623      	mov	r3, r4
 8012232:	f7f3 f98f 	bl	8005554 <HAL_HCD_HC_SubmitRequest>
 8012236:	4603      	mov	r3, r0
 8012238:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801223a:	7bfb      	ldrb	r3, [r7, #15]
 801223c:	4618      	mov	r0, r3
 801223e:	f000 f86f 	bl	8012320 <USBH_Get_USB_Status>
 8012242:	4603      	mov	r3, r0
 8012244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012246:	7bbb      	ldrb	r3, [r7, #14]
}
 8012248:	4618      	mov	r0, r3
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	bd90      	pop	{r4, r7, pc}

08012250 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b082      	sub	sp, #8
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	460b      	mov	r3, r1
 801225a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012262:	78fa      	ldrb	r2, [r7, #3]
 8012264:	4611      	mov	r1, r2
 8012266:	4618      	mov	r0, r3
 8012268:	f7f3 fc38 	bl	8005adc <HAL_HCD_HC_GetURBState>
 801226c:	4603      	mov	r3, r0
}
 801226e:	4618      	mov	r0, r3
 8012270:	3708      	adds	r7, #8
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b082      	sub	sp, #8
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
 801227e:	460b      	mov	r3, r1
 8012280:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012288:	2b01      	cmp	r3, #1
 801228a:	d103      	bne.n	8012294 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801228c:	78fb      	ldrb	r3, [r7, #3]
 801228e:	4618      	mov	r0, r3
 8012290:	f000 f872 	bl	8012378 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012294:	20c8      	movs	r0, #200	; 0xc8
 8012296:	f7f1 fc93 	bl	8003bc0 <HAL_Delay>
  return USBH_OK;
 801229a:	2300      	movs	r3, #0
}
 801229c:	4618      	mov	r0, r3
 801229e:	3708      	adds	r7, #8
 80122a0:	46bd      	mov	sp, r7
 80122a2:	bd80      	pop	{r7, pc}

080122a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80122a4:	b480      	push	{r7}
 80122a6:	b085      	sub	sp, #20
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	460b      	mov	r3, r1
 80122ae:	70fb      	strb	r3, [r7, #3]
 80122b0:	4613      	mov	r3, r2
 80122b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80122ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80122bc:	78fa      	ldrb	r2, [r7, #3]
 80122be:	68f9      	ldr	r1, [r7, #12]
 80122c0:	4613      	mov	r3, r2
 80122c2:	009b      	lsls	r3, r3, #2
 80122c4:	4413      	add	r3, r2
 80122c6:	00db      	lsls	r3, r3, #3
 80122c8:	440b      	add	r3, r1
 80122ca:	333b      	adds	r3, #59	; 0x3b
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d00a      	beq.n	80122e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80122d2:	78fa      	ldrb	r2, [r7, #3]
 80122d4:	68f9      	ldr	r1, [r7, #12]
 80122d6:	4613      	mov	r3, r2
 80122d8:	009b      	lsls	r3, r3, #2
 80122da:	4413      	add	r3, r2
 80122dc:	00db      	lsls	r3, r3, #3
 80122de:	440b      	add	r3, r1
 80122e0:	3350      	adds	r3, #80	; 0x50
 80122e2:	78ba      	ldrb	r2, [r7, #2]
 80122e4:	701a      	strb	r2, [r3, #0]
 80122e6:	e009      	b.n	80122fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80122e8:	78fa      	ldrb	r2, [r7, #3]
 80122ea:	68f9      	ldr	r1, [r7, #12]
 80122ec:	4613      	mov	r3, r2
 80122ee:	009b      	lsls	r3, r3, #2
 80122f0:	4413      	add	r3, r2
 80122f2:	00db      	lsls	r3, r3, #3
 80122f4:	440b      	add	r3, r1
 80122f6:	3351      	adds	r3, #81	; 0x51
 80122f8:	78ba      	ldrb	r2, [r7, #2]
 80122fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3714      	adds	r7, #20
 8012302:	46bd      	mov	sp, r7
 8012304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012308:	4770      	bx	lr

0801230a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b082      	sub	sp, #8
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f7f1 fc54 	bl	8003bc0 <HAL_Delay>
}
 8012318:	bf00      	nop
 801231a:	3708      	adds	r7, #8
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	4603      	mov	r3, r0
 8012328:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801232a:	2300      	movs	r3, #0
 801232c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801232e:	79fb      	ldrb	r3, [r7, #7]
 8012330:	2b03      	cmp	r3, #3
 8012332:	d817      	bhi.n	8012364 <USBH_Get_USB_Status+0x44>
 8012334:	a201      	add	r2, pc, #4	; (adr r2, 801233c <USBH_Get_USB_Status+0x1c>)
 8012336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801233a:	bf00      	nop
 801233c:	0801234d 	.word	0x0801234d
 8012340:	08012353 	.word	0x08012353
 8012344:	08012359 	.word	0x08012359
 8012348:	0801235f 	.word	0x0801235f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801234c:	2300      	movs	r3, #0
 801234e:	73fb      	strb	r3, [r7, #15]
    break;
 8012350:	e00b      	b.n	801236a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012352:	2302      	movs	r3, #2
 8012354:	73fb      	strb	r3, [r7, #15]
    break;
 8012356:	e008      	b.n	801236a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012358:	2301      	movs	r3, #1
 801235a:	73fb      	strb	r3, [r7, #15]
    break;
 801235c:	e005      	b.n	801236a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801235e:	2302      	movs	r3, #2
 8012360:	73fb      	strb	r3, [r7, #15]
    break;
 8012362:	e002      	b.n	801236a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012364:	2302      	movs	r3, #2
 8012366:	73fb      	strb	r3, [r7, #15]
    break;
 8012368:	bf00      	nop
  }
  return usb_status;
 801236a:	7bfb      	ldrb	r3, [r7, #15]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3714      	adds	r7, #20
 8012370:	46bd      	mov	sp, r7
 8012372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012376:	4770      	bx	lr

08012378 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	4603      	mov	r3, r0
 8012380:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012382:	79fb      	ldrb	r3, [r7, #7]
 8012384:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012386:	79fb      	ldrb	r3, [r7, #7]
 8012388:	2b00      	cmp	r3, #0
 801238a:	d102      	bne.n	8012392 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801238c:	2301      	movs	r3, #1
 801238e:	73fb      	strb	r3, [r7, #15]
 8012390:	e001      	b.n	8012396 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8012392:	2300      	movs	r3, #0
 8012394:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8012396:	7bfb      	ldrb	r3, [r7, #15]
 8012398:	461a      	mov	r2, r3
 801239a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801239e:	4803      	ldr	r0, [pc, #12]	; (80123ac <MX_DriverVbusFS+0x34>)
 80123a0:	f7f2 ffa2 	bl	80052e8 <HAL_GPIO_WritePin>
}
 80123a4:	bf00      	nop
 80123a6:	3710      	adds	r7, #16
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	40021800 	.word	0x40021800

080123b0 <__errno>:
 80123b0:	4b01      	ldr	r3, [pc, #4]	; (80123b8 <__errno+0x8>)
 80123b2:	6818      	ldr	r0, [r3, #0]
 80123b4:	4770      	bx	lr
 80123b6:	bf00      	nop
 80123b8:	20000098 	.word	0x20000098

080123bc <__libc_init_array>:
 80123bc:	b570      	push	{r4, r5, r6, lr}
 80123be:	4e0d      	ldr	r6, [pc, #52]	; (80123f4 <__libc_init_array+0x38>)
 80123c0:	4c0d      	ldr	r4, [pc, #52]	; (80123f8 <__libc_init_array+0x3c>)
 80123c2:	1ba4      	subs	r4, r4, r6
 80123c4:	10a4      	asrs	r4, r4, #2
 80123c6:	2500      	movs	r5, #0
 80123c8:	42a5      	cmp	r5, r4
 80123ca:	d109      	bne.n	80123e0 <__libc_init_array+0x24>
 80123cc:	4e0b      	ldr	r6, [pc, #44]	; (80123fc <__libc_init_array+0x40>)
 80123ce:	4c0c      	ldr	r4, [pc, #48]	; (8012400 <__libc_init_array+0x44>)
 80123d0:	f000 f8f6 	bl	80125c0 <_init>
 80123d4:	1ba4      	subs	r4, r4, r6
 80123d6:	10a4      	asrs	r4, r4, #2
 80123d8:	2500      	movs	r5, #0
 80123da:	42a5      	cmp	r5, r4
 80123dc:	d105      	bne.n	80123ea <__libc_init_array+0x2e>
 80123de:	bd70      	pop	{r4, r5, r6, pc}
 80123e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80123e4:	4798      	blx	r3
 80123e6:	3501      	adds	r5, #1
 80123e8:	e7ee      	b.n	80123c8 <__libc_init_array+0xc>
 80123ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80123ee:	4798      	blx	r3
 80123f0:	3501      	adds	r5, #1
 80123f2:	e7f2      	b.n	80123da <__libc_init_array+0x1e>
 80123f4:	080152a8 	.word	0x080152a8
 80123f8:	080152a8 	.word	0x080152a8
 80123fc:	080152a8 	.word	0x080152a8
 8012400:	080152ac 	.word	0x080152ac

08012404 <malloc>:
 8012404:	4b02      	ldr	r3, [pc, #8]	; (8012410 <malloc+0xc>)
 8012406:	4601      	mov	r1, r0
 8012408:	6818      	ldr	r0, [r3, #0]
 801240a:	f000 b86d 	b.w	80124e8 <_malloc_r>
 801240e:	bf00      	nop
 8012410:	20000098 	.word	0x20000098

08012414 <free>:
 8012414:	4b02      	ldr	r3, [pc, #8]	; (8012420 <free+0xc>)
 8012416:	4601      	mov	r1, r0
 8012418:	6818      	ldr	r0, [r3, #0]
 801241a:	f000 b817 	b.w	801244c <_free_r>
 801241e:	bf00      	nop
 8012420:	20000098 	.word	0x20000098

08012424 <memcpy>:
 8012424:	b510      	push	{r4, lr}
 8012426:	1e43      	subs	r3, r0, #1
 8012428:	440a      	add	r2, r1
 801242a:	4291      	cmp	r1, r2
 801242c:	d100      	bne.n	8012430 <memcpy+0xc>
 801242e:	bd10      	pop	{r4, pc}
 8012430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012438:	e7f7      	b.n	801242a <memcpy+0x6>

0801243a <memset>:
 801243a:	4402      	add	r2, r0
 801243c:	4603      	mov	r3, r0
 801243e:	4293      	cmp	r3, r2
 8012440:	d100      	bne.n	8012444 <memset+0xa>
 8012442:	4770      	bx	lr
 8012444:	f803 1b01 	strb.w	r1, [r3], #1
 8012448:	e7f9      	b.n	801243e <memset+0x4>
	...

0801244c <_free_r>:
 801244c:	b538      	push	{r3, r4, r5, lr}
 801244e:	4605      	mov	r5, r0
 8012450:	2900      	cmp	r1, #0
 8012452:	d045      	beq.n	80124e0 <_free_r+0x94>
 8012454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012458:	1f0c      	subs	r4, r1, #4
 801245a:	2b00      	cmp	r3, #0
 801245c:	bfb8      	it	lt
 801245e:	18e4      	addlt	r4, r4, r3
 8012460:	f000 f8ac 	bl	80125bc <__malloc_lock>
 8012464:	4a1f      	ldr	r2, [pc, #124]	; (80124e4 <_free_r+0x98>)
 8012466:	6813      	ldr	r3, [r2, #0]
 8012468:	4610      	mov	r0, r2
 801246a:	b933      	cbnz	r3, 801247a <_free_r+0x2e>
 801246c:	6063      	str	r3, [r4, #4]
 801246e:	6014      	str	r4, [r2, #0]
 8012470:	4628      	mov	r0, r5
 8012472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012476:	f000 b8a2 	b.w	80125be <__malloc_unlock>
 801247a:	42a3      	cmp	r3, r4
 801247c:	d90c      	bls.n	8012498 <_free_r+0x4c>
 801247e:	6821      	ldr	r1, [r4, #0]
 8012480:	1862      	adds	r2, r4, r1
 8012482:	4293      	cmp	r3, r2
 8012484:	bf04      	itt	eq
 8012486:	681a      	ldreq	r2, [r3, #0]
 8012488:	685b      	ldreq	r3, [r3, #4]
 801248a:	6063      	str	r3, [r4, #4]
 801248c:	bf04      	itt	eq
 801248e:	1852      	addeq	r2, r2, r1
 8012490:	6022      	streq	r2, [r4, #0]
 8012492:	6004      	str	r4, [r0, #0]
 8012494:	e7ec      	b.n	8012470 <_free_r+0x24>
 8012496:	4613      	mov	r3, r2
 8012498:	685a      	ldr	r2, [r3, #4]
 801249a:	b10a      	cbz	r2, 80124a0 <_free_r+0x54>
 801249c:	42a2      	cmp	r2, r4
 801249e:	d9fa      	bls.n	8012496 <_free_r+0x4a>
 80124a0:	6819      	ldr	r1, [r3, #0]
 80124a2:	1858      	adds	r0, r3, r1
 80124a4:	42a0      	cmp	r0, r4
 80124a6:	d10b      	bne.n	80124c0 <_free_r+0x74>
 80124a8:	6820      	ldr	r0, [r4, #0]
 80124aa:	4401      	add	r1, r0
 80124ac:	1858      	adds	r0, r3, r1
 80124ae:	4282      	cmp	r2, r0
 80124b0:	6019      	str	r1, [r3, #0]
 80124b2:	d1dd      	bne.n	8012470 <_free_r+0x24>
 80124b4:	6810      	ldr	r0, [r2, #0]
 80124b6:	6852      	ldr	r2, [r2, #4]
 80124b8:	605a      	str	r2, [r3, #4]
 80124ba:	4401      	add	r1, r0
 80124bc:	6019      	str	r1, [r3, #0]
 80124be:	e7d7      	b.n	8012470 <_free_r+0x24>
 80124c0:	d902      	bls.n	80124c8 <_free_r+0x7c>
 80124c2:	230c      	movs	r3, #12
 80124c4:	602b      	str	r3, [r5, #0]
 80124c6:	e7d3      	b.n	8012470 <_free_r+0x24>
 80124c8:	6820      	ldr	r0, [r4, #0]
 80124ca:	1821      	adds	r1, r4, r0
 80124cc:	428a      	cmp	r2, r1
 80124ce:	bf04      	itt	eq
 80124d0:	6811      	ldreq	r1, [r2, #0]
 80124d2:	6852      	ldreq	r2, [r2, #4]
 80124d4:	6062      	str	r2, [r4, #4]
 80124d6:	bf04      	itt	eq
 80124d8:	1809      	addeq	r1, r1, r0
 80124da:	6021      	streq	r1, [r4, #0]
 80124dc:	605c      	str	r4, [r3, #4]
 80124de:	e7c7      	b.n	8012470 <_free_r+0x24>
 80124e0:	bd38      	pop	{r3, r4, r5, pc}
 80124e2:	bf00      	nop
 80124e4:	20004aa0 	.word	0x20004aa0

080124e8 <_malloc_r>:
 80124e8:	b570      	push	{r4, r5, r6, lr}
 80124ea:	1ccd      	adds	r5, r1, #3
 80124ec:	f025 0503 	bic.w	r5, r5, #3
 80124f0:	3508      	adds	r5, #8
 80124f2:	2d0c      	cmp	r5, #12
 80124f4:	bf38      	it	cc
 80124f6:	250c      	movcc	r5, #12
 80124f8:	2d00      	cmp	r5, #0
 80124fa:	4606      	mov	r6, r0
 80124fc:	db01      	blt.n	8012502 <_malloc_r+0x1a>
 80124fe:	42a9      	cmp	r1, r5
 8012500:	d903      	bls.n	801250a <_malloc_r+0x22>
 8012502:	230c      	movs	r3, #12
 8012504:	6033      	str	r3, [r6, #0]
 8012506:	2000      	movs	r0, #0
 8012508:	bd70      	pop	{r4, r5, r6, pc}
 801250a:	f000 f857 	bl	80125bc <__malloc_lock>
 801250e:	4a21      	ldr	r2, [pc, #132]	; (8012594 <_malloc_r+0xac>)
 8012510:	6814      	ldr	r4, [r2, #0]
 8012512:	4621      	mov	r1, r4
 8012514:	b991      	cbnz	r1, 801253c <_malloc_r+0x54>
 8012516:	4c20      	ldr	r4, [pc, #128]	; (8012598 <_malloc_r+0xb0>)
 8012518:	6823      	ldr	r3, [r4, #0]
 801251a:	b91b      	cbnz	r3, 8012524 <_malloc_r+0x3c>
 801251c:	4630      	mov	r0, r6
 801251e:	f000 f83d 	bl	801259c <_sbrk_r>
 8012522:	6020      	str	r0, [r4, #0]
 8012524:	4629      	mov	r1, r5
 8012526:	4630      	mov	r0, r6
 8012528:	f000 f838 	bl	801259c <_sbrk_r>
 801252c:	1c43      	adds	r3, r0, #1
 801252e:	d124      	bne.n	801257a <_malloc_r+0x92>
 8012530:	230c      	movs	r3, #12
 8012532:	6033      	str	r3, [r6, #0]
 8012534:	4630      	mov	r0, r6
 8012536:	f000 f842 	bl	80125be <__malloc_unlock>
 801253a:	e7e4      	b.n	8012506 <_malloc_r+0x1e>
 801253c:	680b      	ldr	r3, [r1, #0]
 801253e:	1b5b      	subs	r3, r3, r5
 8012540:	d418      	bmi.n	8012574 <_malloc_r+0x8c>
 8012542:	2b0b      	cmp	r3, #11
 8012544:	d90f      	bls.n	8012566 <_malloc_r+0x7e>
 8012546:	600b      	str	r3, [r1, #0]
 8012548:	50cd      	str	r5, [r1, r3]
 801254a:	18cc      	adds	r4, r1, r3
 801254c:	4630      	mov	r0, r6
 801254e:	f000 f836 	bl	80125be <__malloc_unlock>
 8012552:	f104 000b 	add.w	r0, r4, #11
 8012556:	1d23      	adds	r3, r4, #4
 8012558:	f020 0007 	bic.w	r0, r0, #7
 801255c:	1ac3      	subs	r3, r0, r3
 801255e:	d0d3      	beq.n	8012508 <_malloc_r+0x20>
 8012560:	425a      	negs	r2, r3
 8012562:	50e2      	str	r2, [r4, r3]
 8012564:	e7d0      	b.n	8012508 <_malloc_r+0x20>
 8012566:	428c      	cmp	r4, r1
 8012568:	684b      	ldr	r3, [r1, #4]
 801256a:	bf16      	itet	ne
 801256c:	6063      	strne	r3, [r4, #4]
 801256e:	6013      	streq	r3, [r2, #0]
 8012570:	460c      	movne	r4, r1
 8012572:	e7eb      	b.n	801254c <_malloc_r+0x64>
 8012574:	460c      	mov	r4, r1
 8012576:	6849      	ldr	r1, [r1, #4]
 8012578:	e7cc      	b.n	8012514 <_malloc_r+0x2c>
 801257a:	1cc4      	adds	r4, r0, #3
 801257c:	f024 0403 	bic.w	r4, r4, #3
 8012580:	42a0      	cmp	r0, r4
 8012582:	d005      	beq.n	8012590 <_malloc_r+0xa8>
 8012584:	1a21      	subs	r1, r4, r0
 8012586:	4630      	mov	r0, r6
 8012588:	f000 f808 	bl	801259c <_sbrk_r>
 801258c:	3001      	adds	r0, #1
 801258e:	d0cf      	beq.n	8012530 <_malloc_r+0x48>
 8012590:	6025      	str	r5, [r4, #0]
 8012592:	e7db      	b.n	801254c <_malloc_r+0x64>
 8012594:	20004aa0 	.word	0x20004aa0
 8012598:	20004aa4 	.word	0x20004aa4

0801259c <_sbrk_r>:
 801259c:	b538      	push	{r3, r4, r5, lr}
 801259e:	4c06      	ldr	r4, [pc, #24]	; (80125b8 <_sbrk_r+0x1c>)
 80125a0:	2300      	movs	r3, #0
 80125a2:	4605      	mov	r5, r0
 80125a4:	4608      	mov	r0, r1
 80125a6:	6023      	str	r3, [r4, #0]
 80125a8:	f7ef ff6e 	bl	8002488 <_sbrk>
 80125ac:	1c43      	adds	r3, r0, #1
 80125ae:	d102      	bne.n	80125b6 <_sbrk_r+0x1a>
 80125b0:	6823      	ldr	r3, [r4, #0]
 80125b2:	b103      	cbz	r3, 80125b6 <_sbrk_r+0x1a>
 80125b4:	602b      	str	r3, [r5, #0]
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	20005a40 	.word	0x20005a40

080125bc <__malloc_lock>:
 80125bc:	4770      	bx	lr

080125be <__malloc_unlock>:
 80125be:	4770      	bx	lr

080125c0 <_init>:
 80125c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125c2:	bf00      	nop
 80125c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125c6:	bc08      	pop	{r3}
 80125c8:	469e      	mov	lr, r3
 80125ca:	4770      	bx	lr

080125cc <_fini>:
 80125cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ce:	bf00      	nop
 80125d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125d2:	bc08      	pop	{r3}
 80125d4:	469e      	mov	lr, r3
 80125d6:	4770      	bx	lr
