
ESC_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015158  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dd8  08015338  08015338  00025338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018110  08018110  00030138  2**0
                  CONTENTS
  4 .ARM          00000008  08018110  08018110  00028110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018118  08018118  00030138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018118  08018118  00028118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801811c  0801811c  0002811c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08018120  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000056d4  20000138  08018258  00030138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000580c  08018258  0003580c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042a2c  00000000  00000000  00030168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000075af  00000000  00000000  00072b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000031f0  00000000  00000000  0007a148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002ee0  00000000  00000000  0007d338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c866  00000000  00000000  00080218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c9db  00000000  00000000  0008ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fec5d  00000000  00000000  000b9459  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b80b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dbfc  00000000  00000000  001b8134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000138 	.word	0x20000138
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015320 	.word	0x08015320

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000013c 	.word	0x2000013c
 800021c:	08015320 	.word	0x08015320

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <CheckFlags>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool CheckFlags()
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	return FlagBuffer[ARM_FG] && FlagBuffer[RX_CON_FG]
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <CheckFlags+0x3c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
		&& FlagBuffer[RX_FAILSAFE_FG] && FlagBuffer[BAT_LVL_FG];
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d00d      	beq.n	8000f84 <CheckFlags+0x28>
	return FlagBuffer[ARM_FG] && FlagBuffer[RX_CON_FG]
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <CheckFlags+0x3c>)
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d009      	beq.n	8000f84 <CheckFlags+0x28>
		&& FlagBuffer[RX_FAILSAFE_FG] && FlagBuffer[BAT_LVL_FG];
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <CheckFlags+0x3c>)
 8000f72:	789b      	ldrb	r3, [r3, #2]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <CheckFlags+0x28>
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <CheckFlags+0x3c>)
 8000f7a:	78db      	ldrb	r3, [r3, #3]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <CheckFlags+0x28>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <CheckFlags+0x2a>
 8000f84:	2300      	movs	r3, #0
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000178 	.word	0x20000178

08000f9c <MapRxToSwitch>:
	}
	return true;
}

int MapRxToSwitch(uint16_t swVal)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]
	if(swVal < RX_SWITCH_LOW_THRESH)
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fac:	d201      	bcs.n	8000fb2 <MapRxToSwitch+0x16>
		return MAP_SWITCH_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e007      	b.n	8000fc2 <MapRxToSwitch+0x26>
	else if(swVal > RX_SWITCH_HIGH_THRESH)
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d901      	bls.n	8000fc0 <MapRxToSwitch+0x24>
		return MAP_SWITCH_HIGH;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	e000      	b.n	8000fc2 <MapRxToSwitch+0x26>
	else
		return MAP_SWITCH_MID;
 8000fc0:	2301      	movs	r3, #1
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <MapRxToPercent>:

float MapRxToPercent(uint16_t rxVal)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	float val = rxVal;
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	ee07 3a90 	vmov	s15, r3
 8000fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe4:	edc7 7a03 	vstr	s15, [r7, #12]

	//if we are within deadzone
	if (val <= (RX_MID_POINT + RX_DEADZONE_THRESH)
 8000fe8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001044 <MapRxToPercent+0x74>
 8000ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff8:	d80b      	bhi.n	8001012 <MapRxToPercent+0x42>
			&& val >= (RX_MID_POINT - RX_DEADZONE_THRESH))
 8000ffa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001048 <MapRxToPercent+0x78>
 8001002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100a:	db02      	blt.n	8001012 <MapRxToPercent+0x42>
	{
		return 0;
 800100c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800104c <MapRxToPercent+0x7c>
 8001010:	e011      	b.n	8001036 <MapRxToPercent+0x66>
	}
	else
	{
		return ((((val - RX_MIN) * (MAP_MAX - MAP_MIN))
 8001012:	edd7 7a03 	vldr	s15, [r7, #12]
 8001016:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001050 <MapRxToPercent+0x80>
 800101a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800101e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001054 <MapRxToPercent+0x84>
 8001022:	ee27 7a87 	vmul.f32	s14, s15, s14
					/ (RX_MAX - RX_MIN)) + MAP_MIN);
 8001026:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001058 <MapRxToPercent+0x88>
 800102a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800105c <MapRxToPercent+0x8c>
 8001032:	ee77 7ac7 	vsub.f32	s15, s15, s14
	}
}
 8001036:	eeb0 0a67 	vmov.f32	s0, s15
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	44824000 	.word	0x44824000
 8001048:	446b8000 	.word	0x446b8000
 800104c:	00000000 	.word	0x00000000
 8001050:	432c0000 	.word	0x432c0000
 8001054:	43480000 	.word	0x43480000
 8001058:	44ccc000 	.word	0x44ccc000
 800105c:	42c80000 	.word	0x42c80000

08001060 <MapPercentToMotor>:

int MapPercentToMotor(float perVal)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af00      	add	r7, sp, #0
 8001066:	ed87 0a01 	vstr	s0, [r7, #4]
	int retVal = DUTY_CYCLE_DISARM;
 800106a:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 800106e:	617b      	str	r3, [r7, #20]
	//If any critical flag is unset, do not arm.
	if (CheckFlags())
 8001070:	f7ff ff74 	bl	8000f5c <CheckFlags>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d061      	beq.n	800113e <MapPercentToMotor+0xde>
	{
		float upperRange = DUTY_CYCLE_MAX - DUTY_CYCLE_THROTTLE_OFF;
 800107a:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800107e:	613b      	str	r3, [r7, #16]
		float lowerRange = DUTY_CYCLE_THROTTLE_OFF - DUTY_CYCLE_MIN;
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <MapPercentToMotor+0xf0>)
 8001082:	60fb      	str	r3, [r7, #12]


		//If throttle scalar flag is set, normalize to scaled range.
		if(FlagBuffer[THROTTLE_FG])
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <MapPercentToMotor+0xf4>)
 8001086:	791b      	ldrb	r3, [r3, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d01f      	beq.n	80010cc <MapPercentToMotor+0x6c>
		{
			upperRange = upperRange * THROTTLE_SCALAR;
 800108c:	6938      	ldr	r0, [r7, #16]
 800108e:	f7ff fa7b 	bl	8000588 <__aeabi_f2d>
 8001092:	a32d      	add	r3, pc, #180	; (adr r3, 8001148 <MapPercentToMotor+0xe8>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff face 	bl	8000638 <__aeabi_dmul>
 800109c:	4603      	mov	r3, r0
 800109e:	460c      	mov	r4, r1
 80010a0:	4618      	mov	r0, r3
 80010a2:	4621      	mov	r1, r4
 80010a4:	f7ff fd8a 	bl	8000bbc <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	613b      	str	r3, [r7, #16]
			lowerRange = lowerRange * THROTTLE_SCALAR;
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff fa6b 	bl	8000588 <__aeabi_f2d>
 80010b2:	a325      	add	r3, pc, #148	; (adr r3, 8001148 <MapPercentToMotor+0xe8>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fabe 	bl	8000638 <__aeabi_dmul>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4618      	mov	r0, r3
 80010c2:	4621      	mov	r1, r4
 80010c4:	f7ff fd7a 	bl	8000bbc <__aeabi_d2f>
 80010c8:	4603      	mov	r3, r0
 80010ca:	60fb      	str	r3, [r7, #12]
		}


		//If midpoint, turn off.
		if(perVal == MAP_MID)
 80010cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	d103      	bne.n	80010e2 <MapPercentToMotor+0x82>
		{
			retVal = DUTY_CYCLE_THROTTLE_OFF;
 80010da:	f44f 63ba 	mov.w	r3, #1488	; 0x5d0
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	e02d      	b.n	800113e <MapPercentToMotor+0xde>
		}
		//Reverse
		else if(perVal < MAP_MID)
 80010e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	d513      	bpl.n	8001118 <MapPercentToMotor+0xb8>
		{
			retVal = (DUTY_CYCLE_THROTTLE_OFF - (((perVal * -1)) * lowerRange)
 80010f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f8:	ee27 7a27 	vmul.f32	s14, s14, s15
					/ (MAP_MID - MAP_MIN));
 80010fc:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001158 <MapPercentToMotor+0xf8>
 8001100:	eec7 7a26 	vdiv.f32	s15, s14, s13
			retVal = (DUTY_CYCLE_THROTTLE_OFF - (((perVal * -1)) * lowerRange)
 8001104:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800115c <MapPercentToMotor+0xfc>
 8001108:	ee77 7a87 	vadd.f32	s15, s15, s14
 800110c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001110:	ee17 3a90 	vmov	r3, s15
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e012      	b.n	800113e <MapPercentToMotor+0xde>
		}
		//Forward
		else
		{
			retVal = ((((perVal - MAP_MID) * upperRange)
 8001118:	ed97 7a01 	vldr	s14, [r7, #4]
 800111c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001120:	ee27 7a27 	vmul.f32	s14, s14, s15
					/ (MAP_MAX - MAP_MID)) + DUTY_CYCLE_THROTTLE_OFF);
 8001124:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001158 <MapPercentToMotor+0xf8>
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800115c <MapPercentToMotor+0xfc>
 8001130:	ee77 7a87 	vadd.f32	s15, s15, s14
			retVal = ((((perVal - MAP_MID) * upperRange)
 8001134:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001138:	ee17 3a90 	vmov	r3, s15
 800113c:	617b      	str	r3, [r7, #20]
		}
	}
	return retVal;
 800113e:	697b      	ldr	r3, [r7, #20]
}
 8001140:	4618      	mov	r0, r3
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd90      	pop	{r4, r7, pc}
 8001148:	9999999a 	.word	0x9999999a
 800114c:	3fb99999 	.word	0x3fb99999
 8001150:	43f40000 	.word	0x43f40000
 8001154:	20000178 	.word	0x20000178
 8001158:	42c80000 	.word	0x42c80000
 800115c:	44ba0000 	.word	0x44ba0000

08001160 <CalcBatterySize>:

uint8_t CalcBatterySize(int volts)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	uint8_t batSize = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
	if (volts > 2 * BAT_LOW_CELL_V)
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff f9f9 	bl	8000564 <__aeabi_i2d>
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	4b30      	ldr	r3, [pc, #192]	; (8001238 <CalcBatterySize+0xd8>)
 8001178:	f7ff fcee 	bl	8000b58 <__aeabi_dcmpgt>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d044      	beq.n	800120c <CalcBatterySize+0xac>
	{
		if (volts < 2 * BAT_MAX_CELL_V)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff f9ee 	bl	8000564 <__aeabi_i2d>
 8001188:	a323      	add	r3, pc, #140	; (adr r3, 8001218 <CalcBatterySize+0xb8>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fcc5 	bl	8000b1c <__aeabi_dcmplt>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <CalcBatterySize+0x3e>
			batSize = 2;
 8001198:	2302      	movs	r3, #2
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e036      	b.n	800120c <CalcBatterySize+0xac>
		else if (volts < 3 * BAT_MAX_CELL_V)
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff f9e0 	bl	8000564 <__aeabi_i2d>
 80011a4:	a31e      	add	r3, pc, #120	; (adr r3, 8001220 <CalcBatterySize+0xc0>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff fcb7 	bl	8000b1c <__aeabi_dcmplt>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <CalcBatterySize+0x5a>
			batSize = 3;
 80011b4:	2303      	movs	r3, #3
 80011b6:	73fb      	strb	r3, [r7, #15]
 80011b8:	e028      	b.n	800120c <CalcBatterySize+0xac>
		else if (volts < 4 * BAT_MAX_CELL_V)
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff f9d2 	bl	8000564 <__aeabi_i2d>
 80011c0:	a319      	add	r3, pc, #100	; (adr r3, 8001228 <CalcBatterySize+0xc8>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fca9 	bl	8000b1c <__aeabi_dcmplt>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d002      	beq.n	80011d6 <CalcBatterySize+0x76>
			batSize = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e01a      	b.n	800120c <CalcBatterySize+0xac>
		else if (volts < 5 * BAT_MAX_CELL_V)
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff f9c4 	bl	8000564 <__aeabi_i2d>
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <CalcBatterySize+0xdc>)
 80011e2:	f7ff fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <CalcBatterySize+0x92>
			batSize = 5; //SHOULD NEVER USE A 5S BATTERY
 80011ec:	2305      	movs	r3, #5
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e00c      	b.n	800120c <CalcBatterySize+0xac>
		else if (volts < 6 * BAT_MAX_CELL_V)
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff f9b6 	bl	8000564 <__aeabi_i2d>
 80011f8:	a30d      	add	r3, pc, #52	; (adr r3, 8001230 <CalcBatterySize+0xd0>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff fc8d 	bl	8000b1c <__aeabi_dcmplt>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <CalcBatterySize+0xac>
			batSize = 6; //THE CURRENT ESC CAN'T HANDLE OVER 5S BATTERIES
 8001208:	2306      	movs	r3, #6
 800120a:	73fb      	strb	r3, [r7, #15]
		else {} //WE HAVE A PROBLEM

	}
	else {} //Battery voltage is below minimum allowable size for ESC to operate
	return batSize;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	66666666 	.word	0x66666666
 800121c:	40216666 	.word	0x40216666
 8001220:	99999999 	.word	0x99999999
 8001224:	402a1999 	.word	0x402a1999
 8001228:	66666666 	.word	0x66666666
 800122c:	40316666 	.word	0x40316666
 8001230:	99999999 	.word	0x99999999
 8001234:	403a1999 	.word	0x403a1999
 8001238:	401c0000 	.word	0x401c0000
 800123c:	4035c000 	.word	0x4035c000

08001240 <FindAnalogInputVoltage>:

float FindAnalogInputVoltage()
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
	To synchronize A/D conversion and timers, the ADCs could be triggered by any of TIM1,
	TIM2, TIM3, TIM4 or TIM5 timer. */
	//Digital Output = ((2^N) * Analog Input Voltage) / Reference Voltage
	//12 bit ADC, N=12.	//Query the Digital Output from ADC.	//Find the (approximate) Analog Input Voltage.

	uint16_t adcDigitalValue = Get_ADC_Voltage();//HAL_ADC_GetValue(&hadc1); //12 bits. Query ADC for Digital Output.	//Any masking required on the Digital Value?
 8001246:	f000 f847 	bl	80012d8 <Get_ADC_Voltage>
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
	if (adcDigitalValue == 0)
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d104      	bne.n	800125e <FindAnalogInputVoltage+0x1e>
	{	//divide by zero error prevention
		AnalogInputVoltage = 0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <FindAnalogInputVoltage+0x90>)
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e026      	b.n	80012ac <FindAnalogInputVoltage+0x6c>
	}
	else
	{
		AnalogInputVoltage = ((float)(adcDigitalValue * BOARD_SUPPLY_V) / ADC_MAX_VAL) * VOLTAGE_MULTIPLIER;
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff f97f 	bl	8000564 <__aeabi_i2d>
 8001266:	a316      	add	r3, pc, #88	; (adr r3, 80012c0 <FindAnalogInputVoltage+0x80>)
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f7ff f9e4 	bl	8000638 <__aeabi_dmul>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fca0 	bl	8000bbc <__aeabi_d2f>
 800127c:	ee06 0a90 	vmov	s13, r0
 8001280:	eddf 7a14 	vldr	s15, [pc, #80]	; 80012d4 <FindAnalogInputVoltage+0x94>
 8001284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001288:	ee17 0a10 	vmov	r0, s14
 800128c:	f7ff f97c 	bl	8000588 <__aeabi_f2d>
 8001290:	a30d      	add	r3, pc, #52	; (adr r3, 80012c8 <FindAnalogInputVoltage+0x88>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff f9cf 	bl	8000638 <__aeabi_dmul>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	4618      	mov	r0, r3
 80012a0:	4621      	mov	r1, r4
 80012a2:	f7ff fc8b 	bl	8000bbc <__aeabi_d2f>
 80012a6:	4602      	mov	r2, r0
 80012a8:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <FindAnalogInputVoltage+0x90>)
 80012aa:	601a      	str	r2, [r3, #0]
	}
	return AnalogInputVoltage;
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <FindAnalogInputVoltage+0x90>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	ee07 3a90 	vmov	s15, r3
	//vin = vout * (r1 + r2) / r2
	//
}
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	bf00      	nop
 80012c0:	66666666 	.word	0x66666666
 80012c4:	400a6666 	.word	0x400a6666
 80012c8:	cccccccd 	.word	0xcccccccd
 80012cc:	4016cccc 	.word	0x4016cccc
 80012d0:	20000180 	.word	0x20000180
 80012d4:	457ff000 	.word	0x457ff000

080012d8 <Get_ADC_Voltage>:

uint16_t Get_ADC_Voltage()
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	//Why? IDK. https://deepbluembedded.com/stm32-adc-read-example-dma-interrupt-polling/
	HAL_ADC_Start(&hadc1);
 80012de:	480a      	ldr	r0, [pc, #40]	; (8001308 <Get_ADC_Voltage+0x30>)
 80012e0:	f003 fe36 	bl	8004f50 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);//timeout arbitrary
 80012e4:	210a      	movs	r1, #10
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <Get_ADC_Voltage+0x30>)
 80012e8:	f003 fed8 	bl	800509c <HAL_ADC_PollForConversion>
	uint16_t val = HAL_ADC_GetValue(&hadc1);
 80012ec:	4806      	ldr	r0, [pc, #24]	; (8001308 <Get_ADC_Voltage+0x30>)
 80012ee:	f003 ff59 	bl	80051a4 <HAL_ADC_GetValue>
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
	TIM3->CCR1 = (val<<4);//!< TIM capture/compare register 1, Address offset: 0x34
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	011a      	lsls	r2, r3, #4
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <Get_ADC_Voltage+0x34>)
 80012fc:	635a      	str	r2, [r3, #52]	; 0x34
	return val;
 80012fe:	88fb      	ldrh	r3, [r7, #6]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20004d7c 	.word	0x20004d7c
 800130c:	40000400 	.word	0x40000400

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001314:	f003 fd74 	bl	8004e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001318:	f000 f8d0 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f000 fc9e 	bl	8001c5c <MX_GPIO_Init>
  MX_DMA_Init();
 8001320:	f000 fc7c 	bl	8001c1c <MX_DMA_Init>
  MX_ADC1_Init();
 8001324:	f000 f96a 	bl	80015fc <MX_ADC1_Init>
  MX_DAC_Init();
 8001328:	f000 f9ba 	bl	80016a0 <MX_DAC_Init>
  MX_DFSDM1_Init();
 800132c:	f000 f9e2 	bl	80016f4 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8001330:	f000 fa18 	bl	8001764 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8001334:	f000 fa80 	bl	8001838 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8001338:	f000 fe04 	bl	8001f44 <MX_FSMC_Init>
  MX_I2S2_Init();
 800133c:	f000 fae0 	bl	8001900 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8001340:	f000 fb0c 	bl	800195c <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8001344:	f000 fb36 	bl	80019b4 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8001348:	f000 fc14 	bl	8001b74 <MX_UART10_Init>
  MX_USART6_UART_Init();
 800134c:	f000 fc3c 	bl	8001bc8 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8001350:	f000 faa8 	bl	80018a4 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001354:	f000 fb5e 	bl	8001a14 <MX_TIM3_Init>
  MX_UART7_Init();
 8001358:	f000 fbde 	bl	8001b18 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 800135c:	f003 f899 	bl	8004492 <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001360:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001364:	f003 f960 	bl	8004628 <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8001368:	2100      	movs	r1, #0
 800136a:	2000      	movs	r0, #0
 800136c:	f002 fedc 	bl	8004128 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8001370:	4836      	ldr	r0, [pc, #216]	; (800144c <main+0x13c>)
 8001372:	f003 f93d 	bl	80045f0 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001376:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800137a:	f003 f919 	bl	80045b0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800137e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001382:	f003 f925 	bl	80045d0 <BSP_LCD_SetBackColor>
  //BSP_LCD_DisplayStringAtLine(1, "Hello");
  //BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project...", CENTER_MODE);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8001386:	2104      	movs	r1, #4
 8001388:	4831      	ldr	r0, [pc, #196]	; (8001450 <main+0x140>)
 800138a:	f009 fc5b 	bl	800ac44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 800138e:	2108      	movs	r1, #8
 8001390:	482f      	ldr	r0, [pc, #188]	; (8001450 <main+0x140>)
 8001392:	f009 fc57 	bl	800ac44 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001396:	f00f f857 	bl	8010448 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of RxInputMutex */
  RxInputMutexHandle = osMutexNew(&RxInputMutex_attributes);
 800139a:	482e      	ldr	r0, [pc, #184]	; (8001454 <main+0x144>)
 800139c:	f00f faa6 	bl	80108ec <osMutexNew>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <main+0x148>)
 80013a4:	601a      	str	r2, [r3, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of RadioReadTim */
  RadioReadTimHandle = osTimerNew(RadioReadTimCallBack, osTimerPeriodic, NULL, &RadioReadTim_attributes);
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <main+0x14c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	2101      	movs	r1, #1
 80013ac:	482c      	ldr	r0, [pc, #176]	; (8001460 <main+0x150>)
 80013ae:	f00f f9d9 	bl	8010764 <osTimerNew>
 80013b2:	4602      	mov	r2, r0
 80013b4:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <main+0x154>)
 80013b6:	601a      	str	r2, [r3, #0]

  /* creation of LCDDelayTim */
  LCDDelayTimHandle = osTimerNew(LCDDelayTimCallback, osTimerPeriodic, NULL, &LCDDelayTim_attributes);
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <main+0x158>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	2101      	movs	r1, #1
 80013be:	482b      	ldr	r0, [pc, #172]	; (800146c <main+0x15c>)
 80013c0:	f00f f9d0 	bl	8010764 <osTimerNew>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <main+0x160>)
 80013c8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerStart(RadioReadTimHandle, RADIO_READ_PERIOD);
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <main+0x154>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2132      	movs	r1, #50	; 0x32
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00f fa4b 	bl	801086c <osTimerStart>
  osTimerStart(LCDDelayTimHandle, LCD_WRITE_PERIOD);
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <main+0x160>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80013de:	4618      	mov	r0, r3
 80013e0:	f00f fa44 	bl	801086c <osTimerStart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Run_Motors */
  Run_MotorsHandle = osThreadNew(Start_Run_Motors, NULL, &Run_Motors_attributes);
 80013e4:	4a23      	ldr	r2, [pc, #140]	; (8001474 <main+0x164>)
 80013e6:	2100      	movs	r1, #0
 80013e8:	4823      	ldr	r0, [pc, #140]	; (8001478 <main+0x168>)
 80013ea:	f00f f897 	bl	801051c <osThreadNew>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <main+0x16c>)
 80013f2:	601a      	str	r2, [r3, #0]

  /* creation of Radio_Receiver */
  Radio_ReceiverHandle = osThreadNew(Receive_Radio_Signal, NULL, &Radio_Receiver_attributes);
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <main+0x170>)
 80013f6:	2100      	movs	r1, #0
 80013f8:	4822      	ldr	r0, [pc, #136]	; (8001484 <main+0x174>)
 80013fa:	f00f f88f 	bl	801051c <osThreadNew>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <main+0x178>)
 8001402:	601a      	str	r2, [r3, #0]

  /* creation of Rx_Mapping */
  Rx_MappingHandle = osThreadNew(Start_Rx_Mapping, NULL, &Rx_Mapping_attributes);
 8001404:	4a21      	ldr	r2, [pc, #132]	; (800148c <main+0x17c>)
 8001406:	2100      	movs	r1, #0
 8001408:	4821      	ldr	r0, [pc, #132]	; (8001490 <main+0x180>)
 800140a:	f00f f887 	bl	801051c <osThreadNew>
 800140e:	4602      	mov	r2, r0
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <main+0x184>)
 8001412:	601a      	str	r2, [r3, #0]

  /* creation of Battery_Monitor */
  Battery_MonitorHandle = osThreadNew(Start_Battery_Monitor, NULL, &Battery_Monitor_attributes);
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <main+0x188>)
 8001416:	2100      	movs	r1, #0
 8001418:	4820      	ldr	r0, [pc, #128]	; (800149c <main+0x18c>)
 800141a:	f00f f87f 	bl	801051c <osThreadNew>
 800141e:	4602      	mov	r2, r0
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <main+0x190>)
 8001422:	601a      	str	r2, [r3, #0]

  /* creation of Data_To_LCD */
  Data_To_LCDHandle = osThreadNew(Start_Data_To_LCD, NULL, &Data_To_LCD_attributes);
 8001424:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <main+0x194>)
 8001426:	2100      	movs	r1, #0
 8001428:	481f      	ldr	r0, [pc, #124]	; (80014a8 <main+0x198>)
 800142a:	f00f f877 	bl	801051c <osThreadNew>
 800142e:	4602      	mov	r2, r0
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <main+0x19c>)
 8001432:	601a      	str	r2, [r3, #0]

  /* creation of Map_To_Motors */
  Map_To_MotorsHandle = osThreadNew(Start_Map_To_Motors, NULL, &Map_To_Motors_attributes);
 8001434:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <main+0x1a0>)
 8001436:	2100      	movs	r1, #0
 8001438:	481e      	ldr	r0, [pc, #120]	; (80014b4 <main+0x1a4>)
 800143a:	f00f f86f 	bl	801051c <osThreadNew>
 800143e:	4602      	mov	r2, r0
 8001440:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <main+0x1a8>)
 8001442:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001444:	f00f f834 	bl	80104b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001448:	e7fe      	b.n	8001448 <main+0x138>
 800144a:	bf00      	nop
 800144c:	20000094 	.word	0x20000094
 8001450:	20004cf0 	.word	0x20004cf0
 8001454:	08015568 	.word	0x08015568
 8001458:	20005014 	.word	0x20005014
 800145c:	08015548 	.word	0x08015548
 8001460:	0800299d 	.word	0x0800299d
 8001464:	20004e24 	.word	0x20004e24
 8001468:	08015558 	.word	0x08015558
 800146c:	080029e5 	.word	0x080029e5
 8001470:	20004e88 	.word	0x20004e88
 8001474:	08015470 	.word	0x08015470
 8001478:	080020c1 	.word	0x080020c1
 800147c:	20004ebc 	.word	0x20004ebc
 8001480:	08015494 	.word	0x08015494
 8001484:	080020f9 	.word	0x080020f9
 8001488:	20004b58 	.word	0x20004b58
 800148c:	080154b8 	.word	0x080154b8
 8001490:	08002255 	.word	0x08002255
 8001494:	20004c30 	.word	0x20004c30
 8001498:	080154dc 	.word	0x080154dc
 800149c:	08002421 	.word	0x08002421
 80014a0:	20004c34 	.word	0x20004c34
 80014a4:	08015500 	.word	0x08015500
 80014a8:	080024a9 	.word	0x080024a9
 80014ac:	20004ec0 	.word	0x20004ec0
 80014b0:	08015524 	.word	0x08015524
 80014b4:	0800294d 	.word	0x0800294d
 80014b8:	20004ea0 	.word	0x20004ea0

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0aa      	sub	sp, #168	; 0xa8
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014c6:	2234      	movs	r2, #52	; 0x34
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f013 f92d 	bl	801472a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	2258      	movs	r2, #88	; 0x58
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f013 f91e 	bl	801472a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <SystemClock_Config+0x138>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a3f      	ldr	r2, [pc, #252]	; (80015f4 <SystemClock_Config+0x138>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <SystemClock_Config+0x138>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <SystemClock_Config+0x13c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a39      	ldr	r2, [pc, #228]	; (80015f8 <SystemClock_Config+0x13c>)
 8001514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <SystemClock_Config+0x13c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001526:	2303      	movs	r3, #3
 8001528:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800152a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800152e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001530:	2301      	movs	r3, #1
 8001532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001536:	2310      	movs	r3, #16
 8001538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 800154a:	230f      	movs	r3, #15
 800154c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001550:	2390      	movs	r3, #144	; 0x90
 8001552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001556:	2302      	movs	r3, #2
 8001558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800155c:	2305      	movs	r3, #5
 800155e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001568:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800156c:	4618      	mov	r0, r3
 800156e:	f008 faf3 	bl	8009b58 <HAL_RCC_OscConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001578:	f001 fa56 	bl	8002a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157c:	230f      	movs	r3, #15
 800157e:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001580:	2300      	movs	r3, #0
 8001582:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001590:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f007 fd04 	bl	8008fa4 <HAL_RCC_ClockConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80015a2:	f001 fa41 	bl	8002a28 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80015a6:	f240 1371 	movw	r3, #369	; 0x171
 80015aa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80015ac:	2332      	movs	r3, #50	; 0x32
 80015ae:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80015b0:	230c      	movs	r3, #12
 80015b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80015b8:	2302      	movs	r3, #2
 80015ba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80015bc:	2300      	movs	r3, #0
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80015c0:	2300      	movs	r3, #0
 80015c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80015c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80015ca:	2300      	movs	r3, #0
 80015cc:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80015ce:	2300      	movs	r3, #0
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	4618      	mov	r0, r3
 80015dc:	f007 fee0 	bl	80093a0 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80015e6:	f001 fa1f 	bl	8002a28 <Error_Handler>
  }
}
 80015ea:	bf00      	nop
 80015ec:	37a8      	adds	r7, #168	; 0xa8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001602:	463b      	mov	r3, r7
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <MX_ADC1_Init+0x98>)
 8001610:	4a21      	ldr	r2, [pc, #132]	; (8001698 <MX_ADC1_Init+0x9c>)
 8001612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <MX_ADC1_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <MX_ADC1_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_ADC1_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_ADC1_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_ADC1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_ADC1_Init+0x98>)
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_ADC1_Init+0x98>)
 800163c:	4a17      	ldr	r2, [pc, #92]	; (800169c <MX_ADC1_Init+0xa0>)
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_ADC1_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_ADC1_Init+0x98>)
 8001648:	2201      	movs	r2, #1
 800164a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_ADC1_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_ADC1_Init+0x98>)
 8001656:	2201      	movs	r2, #1
 8001658:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <MX_ADC1_Init+0x98>)
 800165c:	f003 fc34 	bl	8004ec8 <HAL_ADC_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001666:	f001 f9df 	bl	8002a28 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800166a:	230a      	movs	r3, #10
 800166c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800166e:	2301      	movs	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001676:	463b      	mov	r3, r7
 8001678:	4619      	mov	r1, r3
 800167a:	4806      	ldr	r0, [pc, #24]	; (8001694 <MX_ADC1_Init+0x98>)
 800167c:	f003 fda0 	bl	80051c0 <HAL_ADC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001686:	f001 f9cf 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20004d7c 	.word	0x20004d7c
 8001698:	40012000 	.word	0x40012000
 800169c:	0f000001 	.word	0x0f000001

080016a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80016a6:	463b      	mov	r3, r7
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <MX_DAC_Init+0x4c>)
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <MX_DAC_Init+0x50>)
 80016b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80016b4:	480d      	ldr	r0, [pc, #52]	; (80016ec <MX_DAC_Init+0x4c>)
 80016b6:	f004 f893 	bl	80057e0 <HAL_DAC_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80016c0:	f001 f9b2 	bl	8002a28 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_DAC_Init+0x4c>)
 80016d4:	f004 f8fa 	bl	80058cc <HAL_DAC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016de:	f001 f9a3 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20004e28 	.word	0x20004e28
 80016f0:	40007400 	.word	0x40007400

080016f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_DFSDM1_Init+0x68>)
 80016fa:	4a19      	ldr	r2, [pc, #100]	; (8001760 <MX_DFSDM1_Init+0x6c>)
 80016fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001700:	2201      	movs	r2, #1
 8001702:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_DFSDM1_Init+0x68>)
 800170c:	2202      	movs	r2, #2
 800170e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001716:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800171c:	4b0f      	ldr	r3, [pc, #60]	; (800175c <MX_DFSDM1_Init+0x68>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001724:	2202      	movs	r2, #2
 8001726:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_DFSDM1_Init+0x68>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001736:	2201      	movs	r2, #1
 8001738:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_DFSDM1_Init+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001742:	2200      	movs	r2, #0
 8001744:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_DFSDM1_Init+0x68>)
 8001748:	f004 f918 	bl	800597c <HAL_DFSDM_ChannelInit>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001752:	f001 f969 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20004b20 	.word	0x20004b20
 8001760:	40016020 	.word	0x40016020

08001764 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 800176a:	4a30      	ldr	r2, [pc, #192]	; (800182c <MX_DFSDM2_Init+0xc8>)
 800176c:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 800176e:	4b2e      	ldr	r3, [pc, #184]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 8001770:	2201      	movs	r2, #1
 8001772:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 800177c:	2202      	movs	r2, #2
 800177e:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001780:	4b29      	ldr	r3, [pc, #164]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 8001782:	2200      	movs	r2, #0
 8001784:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001786:	4b28      	ldr	r3, [pc, #160]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 8001788:	2200      	movs	r2, #0
 800178a:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800178c:	4b26      	ldr	r3, [pc, #152]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 8001794:	2202      	movs	r2, #2
 8001796:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800179e:	4b22      	ldr	r3, [pc, #136]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80017a4:	4b20      	ldr	r3, [pc, #128]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80017b6:	481c      	ldr	r0, [pc, #112]	; (8001828 <MX_DFSDM2_Init+0xc4>)
 80017b8:	f004 f8e0 	bl	800597c <HAL_DFSDM_ChannelInit>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80017c2:	f001 f931 	bl	8002a28 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017c8:	4a1a      	ldr	r2, [pc, #104]	; (8001834 <MX_DFSDM2_Init+0xd0>)
 80017ca:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017da:	2202      	movs	r2, #2
 80017dc:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80017de:	4b14      	ldr	r3, [pc, #80]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 8001804:	2201      	movs	r2, #1
 8001806:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 800180a:	2200      	movs	r2, #0
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 8001810:	2200      	movs	r2, #0
 8001812:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8001814:	4806      	ldr	r0, [pc, #24]	; (8001830 <MX_DFSDM2_Init+0xcc>)
 8001816:	f004 f8b1 	bl	800597c <HAL_DFSDM_ChannelInit>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8001820:	f001 f902 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20004d30 	.word	0x20004d30
 800182c:	40016420 	.word	0x40016420
 8001830:	20004bf4 	.word	0x20004bf4
 8001834:	400164e0 	.word	0x400164e0

08001838 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <MX_FMPI2C1_Init+0x64>)
 8001840:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 8001844:	4a16      	ldr	r2, [pc, #88]	; (80018a0 <MX_FMPI2C1_Init+0x68>)
 8001846:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 8001850:	2201      	movs	r2, #1
 8001852:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8001860:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8001866:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 800186c:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8001872:	4809      	ldr	r0, [pc, #36]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 8001874:	f004 fd66 	bl	8006344 <HAL_FMPI2C_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 800187e:	f001 f8d3 	bl	8002a28 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4804      	ldr	r0, [pc, #16]	; (8001898 <MX_FMPI2C1_Init+0x60>)
 8001886:	f004 fdec 	bl	8006462 <HAL_FMPI2CEx_ConfigAnalogFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8001890:	f001 f8ca 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20004e3c 	.word	0x20004e3c
 800189c:	40006000 	.word	0x40006000
 80018a0:	00303d5b 	.word	0x00303d5b

080018a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018aa:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <MX_I2C2_Init+0x54>)
 80018ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018b0:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_I2C2_Init+0x58>)
 80018b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_I2C2_Init+0x50>)
 80018e2:	f006 fcc1 	bl	8008268 <HAL_I2C_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018ec:	f001 f89c 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20004ba0 	.word	0x20004ba0
 80018f8:	40005800 	.word	0x40005800
 80018fc:	000186a0 	.word	0x000186a0

08001900 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_I2S2_Init+0x54>)
 8001906:	4a14      	ldr	r2, [pc, #80]	; (8001958 <MX_I2S2_Init+0x58>)
 8001908:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2S2_Init+0x54>)
 800190c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001910:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_I2S2_Init+0x54>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_I2S2_Init+0x54>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <MX_I2S2_Init+0x54>)
 8001920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001924:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_I2S2_Init+0x54>)
 8001928:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800192c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_I2S2_Init+0x54>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001934:	4b07      	ldr	r3, [pc, #28]	; (8001954 <MX_I2S2_Init+0x54>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_I2S2_Init+0x54>)
 800193c:	2201      	movs	r2, #1
 800193e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001940:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_I2S2_Init+0x54>)
 8001942:	f006 fdc9 	bl	80084d8 <HAL_I2S_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800194c:	f001 f86c 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001950:	bf00      	nop
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20005018 	.word	0x20005018
 8001958:	40003800 	.word	0x40003800

0800195c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001962:	4a13      	ldr	r2, [pc, #76]	; (80019b0 <MX_QUADSPI_Init+0x54>)
 8001964:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001968:	22ff      	movs	r2, #255	; 0xff
 800196a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_QUADSPI_Init+0x50>)
 800196e:	2201      	movs	r2, #1
 8001970:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_QUADSPI_Init+0x50>)
 800197a:	2201      	movs	r2, #1
 800197c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <MX_QUADSPI_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_QUADSPI_Init+0x50>)
 8001998:	f007 fa42 	bl	8008e20 <HAL_QSPI_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80019a2:	f001 f841 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20005060 	.word	0x20005060
 80019b0:	a0001000 	.word	0xa0001000

080019b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019ba:	4a15      	ldr	r2, [pc, #84]	; (8001a10 <MX_SDIO_SD_Init+0x5c>)
 80019bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019c4:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019d0:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80019e2:	480a      	ldr	r0, [pc, #40]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019e4:	f008 fafa 	bl	8009fdc <HAL_SD_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80019ee:	f001 f81b 	bl	8002a28 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80019f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <MX_SDIO_SD_Init+0x58>)
 80019f8:	f008 fd24 	bl	800a444 <HAL_SD_ConfigWideBusOperation>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8001a02:	f001 f811 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20004f14 	.word	0x20004f14
 8001a10:	40012c00 	.word	0x40012c00

08001a14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08e      	sub	sp, #56	; 0x38
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a28:	f107 0320 	add.w	r3, r7, #32
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
 8001a40:	615a      	str	r2, [r3, #20]
 8001a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a44:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a46:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <MX_TIM3_Init+0x100>)
 8001a48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 8001a4a:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a4c:	220f      	movs	r2, #15
 8001a4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001a5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a66:	2280      	movs	r2, #128	; 0x80
 8001a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a6a:	4829      	ldr	r0, [pc, #164]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a6c:	f009 f866 	bl	800ab3c <HAL_TIM_Base_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001a76:	f000 ffd7 	bl	8002a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4822      	ldr	r0, [pc, #136]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a88:	f009 fae8 	bl	800b05c <HAL_TIM_ConfigClockSource>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001a92:	f000 ffc9 	bl	8002a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a96:	481e      	ldr	r0, [pc, #120]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001a98:	f009 f89f 	bl	800abda <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aa2:	f000 ffc1 	bl	8002a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aae:	f107 0320 	add.w	r3, r7, #32
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4816      	ldr	r0, [pc, #88]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001ab6:	f009 fec1 	bl	800b83c <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ac0:	f000 ffb2 	bl	8002a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac4:	2360      	movs	r3, #96	; 0x60
 8001ac6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2204      	movs	r2, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	480c      	ldr	r0, [pc, #48]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001ade:	f009 f9f7 	bl	800aed0 <HAL_TIM_PWM_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ae8:	f000 ff9e 	bl	8002a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2208      	movs	r2, #8
 8001af0:	4619      	mov	r1, r3
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001af4:	f009 f9ec 	bl	800aed0 <HAL_TIM_PWM_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001afe:	f000 ff93 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b02:	4803      	ldr	r0, [pc, #12]	; (8001b10 <MX_TIM3_Init+0xfc>)
 8001b04:	f001 fc38 	bl	8003378 <HAL_TIM_MspPostInit>

}
 8001b08:	bf00      	nop
 8001b0a:	3738      	adds	r7, #56	; 0x38
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20004cf0 	.word	0x20004cf0
 8001b14:	40000400 	.word	0x40000400

08001b18 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <MX_UART7_Init+0x54>)
 8001b20:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 100000;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <MX_UART7_Init+0x58>)
 8001b26:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_9B;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_2;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b36:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_EVEN;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b42:	220c      	movs	r2, #12
 8001b44:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b46:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_UART7_Init+0x50>)
 8001b54:	f009 ff02 	bl	800b95c <HAL_UART_Init>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_UART7_Init+0x4a>
  {
    Error_Handler();
 8001b5e:	f000 ff63 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20004b5c 	.word	0x20004b5c
 8001b6c:	40007800 	.word	0x40007800
 8001b70:	000186a0 	.word	0x000186a0

08001b74 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <MX_UART10_Init+0x50>)
 8001b7c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b84:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_UART10_Init+0x4c>)
 8001bac:	f009 fed6 	bl	800b95c <HAL_UART_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8001bb6:	f000 ff37 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20004c4c 	.word	0x20004c4c
 8001bc4:	40011c00 	.word	0x40011c00

08001bc8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_USART6_UART_Init+0x50>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART6_UART_Init+0x4c>)
 8001c00:	f009 feac 	bl	800b95c <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001c0a:	f000 ff0d 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20004f98 	.word	0x20004f98
 8001c18:	40011400 	.word	0x40011400

08001c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <MX_DMA_Init+0x3c>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <MX_DMA_Init+0x3c>)
 8001c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <MX_DMA_Init+0x3c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2100      	movs	r1, #0
 8001c42:	200e      	movs	r0, #14
 8001c44:	f003 fda2 	bl	800578c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001c48:	200e      	movs	r0, #14
 8001c4a:	f003 fdbb 	bl	80057c4 <HAL_NVIC_EnableIRQ>

}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800

08001c5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	623b      	str	r3, [r7, #32]
 8001c76:	4bab      	ldr	r3, [pc, #684]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4aaa      	ldr	r2, [pc, #680]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4ba8      	ldr	r3, [pc, #672]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	4ba4      	ldr	r3, [pc, #656]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4aa3      	ldr	r2, [pc, #652]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4ba1      	ldr	r3, [pc, #644]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	4b9d      	ldr	r3, [pc, #628]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a9c      	ldr	r2, [pc, #624]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b9a      	ldr	r3, [pc, #616]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	4b96      	ldr	r3, [pc, #600]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a95      	ldr	r2, [pc, #596]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b93      	ldr	r3, [pc, #588]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b8f      	ldr	r3, [pc, #572]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a8e      	ldr	r2, [pc, #568]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b8c      	ldr	r3, [pc, #560]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b88      	ldr	r3, [pc, #544]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a87      	ldr	r2, [pc, #540]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b81      	ldr	r3, [pc, #516]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a80      	ldr	r2, [pc, #512]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b7e      	ldr	r3, [pc, #504]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b7a      	ldr	r3, [pc, #488]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a79      	ldr	r2, [pc, #484]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b77      	ldr	r3, [pc, #476]	; (8001f24 <MX_GPIO_Init+0x2c8>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2138      	movs	r1, #56	; 0x38
 8001d56:	4874      	ldr	r0, [pc, #464]	; (8001f28 <MX_GPIO_Init+0x2cc>)
 8001d58:	f004 fd60 	bl	800681c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2120      	movs	r1, #32
 8001d60:	4872      	ldr	r0, [pc, #456]	; (8001f2c <MX_GPIO_Init+0x2d0>)
 8001d62:	f004 fd5b 	bl	800681c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8001d6c:	4870      	ldr	r0, [pc, #448]	; (8001f30 <MX_GPIO_Init+0x2d4>)
 8001d6e:	f004 fd55 	bl	800681c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13, GPIO_PIN_RESET);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001d78:	486e      	ldr	r0, [pc, #440]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001d7a:	f004 fd4f 	bl	800681c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d84:	486c      	ldr	r0, [pc, #432]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001d86:	f004 fd49 	bl	800681c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8001d8a:	2338      	movs	r3, #56	; 0x38
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4861      	ldr	r0, [pc, #388]	; (8001f28 <MX_GPIO_Init+0x2cc>)
 8001da2:	f004 fba9 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001da6:	2340      	movs	r3, #64	; 0x40
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001db6:	2303      	movs	r3, #3
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4859      	ldr	r0, [pc, #356]	; (8001f28 <MX_GPIO_Init+0x2cc>)
 8001dc2:	f004 fb99 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de0:	4619      	mov	r1, r3
 8001de2:	4856      	ldr	r0, [pc, #344]	; (8001f3c <MX_GPIO_Init+0x2e0>)
 8001de4:	f004 fb88 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001de8:	2302      	movs	r3, #2
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dec:	4b54      	ldr	r3, [pc, #336]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df8:	4619      	mov	r1, r3
 8001dfa:	484c      	ldr	r0, [pc, #304]	; (8001f2c <MX_GPIO_Init+0x2d0>)
 8001dfc:	f004 fb7c 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e04:	4b4e      	ldr	r3, [pc, #312]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e10:	4619      	mov	r1, r3
 8001e12:	4849      	ldr	r0, [pc, #292]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001e14:	f004 fb70 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8001e18:	2320      	movs	r3, #32
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2300      	movs	r3, #0
 8001e26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	483f      	ldr	r0, [pc, #252]	; (8001f2c <MX_GPIO_Init+0x2d0>)
 8001e30:	f004 fb62 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8001e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e46:	4619      	mov	r1, r3
 8001e48:	483c      	ldr	r0, [pc, #240]	; (8001f3c <MX_GPIO_Init+0x2e0>)
 8001e4a:	f004 fb55 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8001e4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001e60:	2307      	movs	r3, #7
 8001e62:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4831      	ldr	r0, [pc, #196]	; (8001f30 <MX_GPIO_Init+0x2d4>)
 8001e6c:	f004 fb44 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin PB8 */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin|GPIO_PIN_8;
 8001e70:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e86:	4619      	mov	r1, r3
 8001e88:	4829      	ldr	r0, [pc, #164]	; (8001f30 <MX_GPIO_Init+0x2d4>)
 8001e8a:	f004 fb35 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8001e8e:	f248 0380 	movw	r3, #32896	; 0x8080
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4824      	ldr	r0, [pc, #144]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001ea4:	f004 fb28 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin PG13 */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|GPIO_PIN_13;
 8001ea8:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481c      	ldr	r0, [pc, #112]	; (8001f34 <MX_GPIO_Init+0x2d8>)
 8001ec2:	f004 fb19 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	4619      	mov	r1, r3
 8001ede:	4816      	ldr	r0, [pc, #88]	; (8001f38 <MX_GPIO_Init+0x2dc>)
 8001ee0:	f004 fb0a 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D12_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin;
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ef4:	2306      	movs	r3, #6
 8001ef6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D12_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	480c      	ldr	r0, [pc, #48]	; (8001f30 <MX_GPIO_Init+0x2d4>)
 8001f00:	f004 fafa 	bl	80064f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001f04:	2340      	movs	r3, #64	; 0x40
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <MX_GPIO_Init+0x2e4>)
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	4806      	ldr	r0, [pc, #24]	; (8001f30 <MX_GPIO_Init+0x2d4>)
 8001f18:	f004 faee 	bl	80064f8 <HAL_GPIO_Init>

}
 8001f1c:	bf00      	nop
 8001f1e:	3738      	adds	r7, #56	; 0x38
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020400 	.word	0x40020400
 8001f34:	40021800 	.word	0x40021800
 8001f38:	40020000 	.word	0x40020000
 8001f3c:	40021400 	.word	0x40021400
 8001f40:	10110000 	.word	0x10110000

08001f44 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
 8001f58:	615a      	str	r2, [r3, #20]
 8001f5a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	; (800209c <MX_FSMC_Init+0x158>)
 8001f5e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001f62:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <MX_FSMC_Init+0x158>)
 8001f66:	4a4e      	ldr	r2, [pc, #312]	; (80020a0 <MX_FSMC_Init+0x15c>)
 8001f68:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <MX_FSMC_Init+0x158>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001f70:	4b4a      	ldr	r3, [pc, #296]	; (800209c <MX_FSMC_Init+0x158>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001f76:	4b49      	ldr	r3, [pc, #292]	; (800209c <MX_FSMC_Init+0x158>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001f7c:	4b47      	ldr	r3, [pc, #284]	; (800209c <MX_FSMC_Init+0x158>)
 8001f7e:	2210      	movs	r2, #16
 8001f80:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001f82:	4b46      	ldr	r3, [pc, #280]	; (800209c <MX_FSMC_Init+0x158>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001f88:	4b44      	ldr	r3, [pc, #272]	; (800209c <MX_FSMC_Init+0x158>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001f8e:	4b43      	ldr	r3, [pc, #268]	; (800209c <MX_FSMC_Init+0x158>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001f94:	4b41      	ldr	r3, [pc, #260]	; (800209c <MX_FSMC_Init+0x158>)
 8001f96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	; (800209c <MX_FSMC_Init+0x158>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <MX_FSMC_Init+0x158>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001fa8:	4b3c      	ldr	r3, [pc, #240]	; (800209c <MX_FSMC_Init+0x158>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001fae:	4b3b      	ldr	r3, [pc, #236]	; (800209c <MX_FSMC_Init+0x158>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001fb4:	4b39      	ldr	r3, [pc, #228]	; (800209c <MX_FSMC_Init+0x158>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <MX_FSMC_Init+0x158>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <MX_FSMC_Init+0x158>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001fc6:	230f      	movs	r3, #15
 8001fc8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001fca:	230f      	movs	r3, #15
 8001fcc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001fce:	23ff      	movs	r3, #255	; 0xff
 8001fd0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001fd2:	230f      	movs	r3, #15
 8001fd4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001fd6:	2310      	movs	r3, #16
 8001fd8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001fda:	2311      	movs	r3, #17
 8001fdc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	482c      	ldr	r0, [pc, #176]	; (800209c <MX_FSMC_Init+0x158>)
 8001fea:	f008 fd63 	bl	800aab4 <HAL_SRAM_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001ff4:	f000 fd18 	bl	8002a28 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <MX_FSMC_Init+0x160>)
 8001ffa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001ffe:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002000:	4b28      	ldr	r3, [pc, #160]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002002:	4a27      	ldr	r2, [pc, #156]	; (80020a0 <MX_FSMC_Init+0x15c>)
 8002004:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8002006:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002008:	2204      	movs	r2, #4
 800200a:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800200c:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <MX_FSMC_Init+0x160>)
 800200e:	2200      	movs	r2, #0
 8002010:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <MX_FSMC_Init+0x160>)
 800201a:	2210      	movs	r2, #16
 800201c:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002020:	2200      	movs	r2, #0
 8002022:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002024:	4b1f      	ldr	r3, [pc, #124]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002026:	2200      	movs	r2, #0
 8002028:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800202a:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <MX_FSMC_Init+0x160>)
 800202c:	2200      	movs	r2, #0
 800202e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002032:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_FSMC_Init+0x160>)
 800203a:	2200      	movs	r2, #0
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002040:	2200      	movs	r2, #0
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002046:	2200      	movs	r2, #0
 8002048:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_FSMC_Init+0x160>)
 800204c:	2200      	movs	r2, #0
 800204e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002052:	2200      	movs	r2, #0
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_FSMC_Init+0x160>)
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002062:	230f      	movs	r3, #15
 8002064:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002066:	230f      	movs	r3, #15
 8002068:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800206a:	23ff      	movs	r3, #255	; 0xff
 800206c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800206e:	230f      	movs	r3, #15
 8002070:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002072:	2310      	movs	r3, #16
 8002074:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002076:	2311      	movs	r3, #17
 8002078:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_FSMC_Init+0x160>)
 8002086:	f008 fd15 	bl	800aab4 <HAL_SRAM_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 8002090:	f000 fcca 	bl	8002a28 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002094:	bf00      	nop
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20004ca0 	.word	0x20004ca0
 80020a0:	a0000104 	.word	0xa0000104
 80020a4:	20004ec4 	.word	0x20004ec4

080020a8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	__NOP(); //checks if we receive all data
 80020b0:	bf00      	nop
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <Start_Run_Motors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_Run_Motors */
void Start_Run_Motors(void *argument)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80020c8:	f011 ffe8 	bl	801409c <MX_USB_HOST_Init>
	  //BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
	  //BSP_LCD_DisplayStringAtLine(1, buffer);
	  //itoa(motor1Val,buffer,10);
	  //BSP_LCD_SetTextColor(LCD_COLOR_RED);
	  //BSP_LCD_DisplayStringAtLine(1, buffer);
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, MotorVals[RX_VERTICAL_CH]);
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <Start_Run_Motors+0x2c>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <Start_Run_Motors+0x30>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2, MotorVals[RX_HORIZONTAL_CH]);
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <Start_Run_Motors+0x2c>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <Start_Run_Motors+0x30>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
	  osThreadSuspend(Run_MotorsHandle);
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <Start_Run_Motors+0x34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f00e fabf 	bl	8010668 <osThreadSuspend>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, MotorVals[RX_VERTICAL_CH]);
 80020ea:	e7ef      	b.n	80020cc <Start_Run_Motors+0xc>
 80020ec:	20000010 	.word	0x20000010
 80020f0:	20004cf0 	.word	0x20004cf0
 80020f4:	20004ebc 	.word	0x20004ebc

080020f8 <Receive_Radio_Signal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Receive_Radio_Signal */
void Receive_Radio_Signal(void *argument)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b094      	sub	sp, #80	; 0x50
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Receive_Radio_Signal */
	/* Infinite loop */
	//char buffer[20];
	//itoa(motor1Val,buffer,10);
	SBUS sbus;
	sbus.arm = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sbus.disarm = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	FlagBuffer[RX_CON_FG] = 0;
 800210c:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <Receive_Radio_Signal+0x140>)
 800210e:	2200      	movs	r2, #0
 8002110:	705a      	strb	r2, [r3, #1]
	FlagBuffer[RX_FAILSAFE_FG] = 0;
 8002112:	4b49      	ldr	r3, [pc, #292]	; (8002238 <Receive_Radio_Signal+0x140>)
 8002114:	2200      	movs	r2, #0
 8002116:	709a      	strb	r2, [r3, #2]
	FlagBuffer[RX_ARM] = 0;
 8002118:	4b47      	ldr	r3, [pc, #284]	; (8002238 <Receive_Radio_Signal+0x140>)
 800211a:	2200      	movs	r2, #0
 800211c:	711a      	strb	r2, [r3, #4]
	FlagBuffer[THROTTLE_FG] = 1;
 800211e:	4b46      	ldr	r3, [pc, #280]	; (8002238 <Receive_Radio_Signal+0x140>)
 8002120:	2201      	movs	r2, #1
 8002122:	711a      	strb	r2, [r3, #4]

	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8002124:	2120      	movs	r1, #32
 8002126:	4845      	ldr	r0, [pc, #276]	; (800223c <Receive_Radio_Signal+0x144>)
 8002128:	f004 fb91 	bl	800684e <HAL_GPIO_TogglePin>
		//BSP_LCD_ClearStringLine(3);
		//BSP_LCD_DisplayStringAtLine(3, "RECEIVE RADIO");
		osStatus_t status = osMutexAcquire(RxInputMutexHandle,osWaitForever);
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <Receive_Radio_Signal+0x148>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f04f 31ff 	mov.w	r1, #4294967295
 8002134:	4618      	mov	r0, r3
 8002136:	f00e fc73 	bl	8010a20 <osMutexAcquire>
 800213a:	64b8      	str	r0, [r7, #72]	; 0x48
		if (RC_READ_SBUS(&huart7 ,&sbus))
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	4619      	mov	r1, r3
 8002142:	4840      	ldr	r0, [pc, #256]	; (8002244 <Receive_Radio_Signal+0x14c>)
 8002144:	f002 fcc4 	bl	8004ad0 <RC_READ_SBUS>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d060      	beq.n	8002210 <Receive_Radio_Signal+0x118>
		{
			//verifying that sbus is reading properly and we are connected(not failsafing)
			//If we enter, we are connected now.
			if(!FlagBuffer[RX_CON_FG]){
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <Receive_Radio_Signal+0x140>)
 8002150:	785b      	ldrb	r3, [r3, #1]
 8002152:	f083 0301 	eor.w	r3, r3, #1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d002      	beq.n	8002162 <Receive_Radio_Signal+0x6a>
				FlagBuffer[RX_CON_FG] = 1;
 800215c:	4b36      	ldr	r3, [pc, #216]	; (8002238 <Receive_Radio_Signal+0x140>)
 800215e:	2201      	movs	r2, #1
 8002160:	705a      	strb	r2, [r3, #1]
			}
			if(!sbus.failsafe){
 8002162:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <Receive_Radio_Signal+0x7a>
				FlagBuffer[RX_FAILSAFE_FG] = 1;
 800216a:	4b33      	ldr	r3, [pc, #204]	; (8002238 <Receive_Radio_Signal+0x140>)
 800216c:	2201      	movs	r2, #1
 800216e:	709a      	strb	r2, [r3, #2]
 8002170:	e002      	b.n	8002178 <Receive_Radio_Signal+0x80>
			}
			else{
				FlagBuffer[RX_FAILSAFE_FG] = 0;
 8002172:	4b31      	ldr	r3, [pc, #196]	; (8002238 <Receive_Radio_Signal+0x140>)
 8002174:	2200      	movs	r2, #0
 8002176:	709a      	strb	r2, [r3, #2]
			}


			for(int i = 0; i < CHAN_VALS_SIZE; i++ ) {
 8002178:	2300      	movs	r3, #0
 800217a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800217c:	e00d      	b.n	800219a <Receive_Radio_Signal+0xa2>
			//	if(i < 4)
				//	lastFewFrames[count][i] = sbus.PWM_US_RC_CH[i];
				ChannelVals[i] = sbus.PWM_US_RC_CH[i];
 800217e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002186:	4413      	add	r3, r2
 8002188:	f833 1c48 	ldrh.w	r1, [r3, #-72]
 800218c:	4a2e      	ldr	r2, [pc, #184]	; (8002248 <Receive_Radio_Signal+0x150>)
 800218e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < CHAN_VALS_SIZE; i++ ) {
 8002194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002196:	3301      	adds	r3, #1
 8002198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800219a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800219c:	2b07      	cmp	r3, #7
 800219e:	ddee      	ble.n	800217e <Receive_Radio_Signal+0x86>
			}

			if(MapRxToSwitch(ChannelVals[RX_ARM]) == MAP_SWITCH_HIGH)
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <Receive_Radio_Signal+0x150>)
 80021a2:	891b      	ldrh	r3, [r3, #8]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe fef9 	bl	8000f9c <MapRxToSwitch>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d103      	bne.n	80021b8 <Receive_Radio_Signal+0xc0>
				FlagBuffer[ARM_FG] = true;
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <Receive_Radio_Signal+0x140>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e002      	b.n	80021be <Receive_Radio_Signal+0xc6>
			else
				FlagBuffer[ARM_FG] = false;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	; (8002238 <Receive_Radio_Signal+0x140>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]

			if(MapRxToSwitch(ChannelVals[RX_THROTTLE_SW]) == MAP_SWITCH_HIGH)
 80021be:	4b22      	ldr	r3, [pc, #136]	; (8002248 <Receive_Radio_Signal+0x150>)
 80021c0:	895b      	ldrh	r3, [r3, #10]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe feea 	bl	8000f9c <MapRxToSwitch>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d103      	bne.n	80021d6 <Receive_Radio_Signal+0xde>
				FlagBuffer[THROTTLE_FG] = false;
 80021ce:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <Receive_Radio_Signal+0x140>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	711a      	strb	r2, [r3, #4]
 80021d4:	e002      	b.n	80021dc <Receive_Radio_Signal+0xe4>
			else
				FlagBuffer[THROTTLE_FG] = true;
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <Receive_Radio_Signal+0x140>)
 80021d8:	2201      	movs	r2, #1
 80021da:	711a      	strb	r2, [r3, #4]


			if(MapRxToSwitch(ChannelVals[RX_BAYBLADE]) == MAP_SWITCH_HIGH)
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <Receive_Radio_Signal+0x150>)
 80021de:	899b      	ldrh	r3, [r3, #12]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fedb 	bl	8000f9c <MapRxToSwitch>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d103      	bne.n	80021f4 <Receive_Radio_Signal+0xfc>
				FlagBuffer[BAYBLADE_FG] = true;
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <Receive_Radio_Signal+0x140>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	715a      	strb	r2, [r3, #5]
 80021f2:	e002      	b.n	80021fa <Receive_Radio_Signal+0x102>
			else
				FlagBuffer[BAYBLADE_FG] = false;
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <Receive_Radio_Signal+0x140>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	715a      	strb	r2, [r3, #5]

			count = (count + 1) % 2;
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <Receive_Radio_Signal+0x154>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	bfb8      	it	lt
 8002208:	425b      	neglt	r3, r3
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <Receive_Radio_Signal+0x154>)
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e006      	b.n	800221e <Receive_Radio_Signal+0x126>
	  	}
		//Too many frames without connection.
		else if(sbus.error) {
 8002210:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <Receive_Radio_Signal+0x126>
			FlagBuffer[RX_CON_FG] = 0;
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <Receive_Radio_Signal+0x140>)
 800221a:	2200      	movs	r2, #0
 800221c:	705a      	strb	r2, [r3, #1]
		}
		status = osMutexRelease(RxInputMutexHandle);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <Receive_Radio_Signal+0x148>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f00e fc5a 	bl	8010adc <osMutexRelease>
 8002228:	64b8      	str	r0, [r7, #72]	; 0x48
		osThreadSuspend(Radio_ReceiverHandle);
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <Receive_Radio_Signal+0x158>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f00e fa1a 	bl	8010668 <osThreadSuspend>
	{
 8002234:	e776      	b.n	8002124 <Receive_Radio_Signal+0x2c>
 8002236:	bf00      	nop
 8002238:	20000178 	.word	0x20000178
 800223c:	40020800 	.word	0x40020800
 8002240:	20005014 	.word	0x20005014
 8002244:	20004b5c 	.word	0x20004b5c
 8002248:	20000000 	.word	0x20000000
 800224c:	20000154 	.word	0x20000154
 8002250:	20004b58 	.word	0x20004b58

08002254 <Start_Rx_Mapping>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Rx_Mapping */
void Start_Rx_Mapping(void *argument)
{
 8002254:	b5b0      	push	{r4, r5, r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Rx_Mapping */
	/* Infinite loop */
	for(;;)
	{
		//BSP_LCD_DisplayStringAtLine(4, "RX MAPPING");
		if(CheckFlags())
 800225c:	f7fe fe7e 	bl	8000f5c <CheckFlags>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f000 80ad 	beq.w	80023c2 <Start_Rx_Mapping+0x16e>
		{
				//code
			float HorPercentVal = MapRxToPercent(ChannelVals[RX_HORIZONTAL_CH]); // get mapped horizontal chan val
 8002268:	4b66      	ldr	r3, [pc, #408]	; (8002404 <Start_Rx_Mapping+0x1b0>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe feaf 	bl	8000fd0 <MapRxToPercent>
 8002272:	ed87 0a03 	vstr	s0, [r7, #12]
			float VertPercentVal = MapRxToPercent(ChannelVals[RX_VERTICAL_CH]); // get mapped vert chan val
 8002276:	4b63      	ldr	r3, [pc, #396]	; (8002404 <Start_Rx_Mapping+0x1b0>)
 8002278:	885b      	ldrh	r3, [r3, #2]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fea8 	bl	8000fd0 <MapRxToPercent>
 8002280:	ed87 0a02 	vstr	s0, [r7, #8]
			float MotorSetLeft = 0;
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
			float MotorSetRight = 0; //initialize motor movement numbers
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]

			if (VertPercentVal != 0) {
 8002290:	edd7 7a02 	vldr	s15, [r7, #8]
 8002294:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800229c:	d066      	beq.n	800236c <Start_Rx_Mapping+0x118>
				MotorSetLeft = MotorSetRight = VertPercentVal;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	61bb      	str	r3, [r7, #24]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	61fb      	str	r3, [r7, #28]
				if(HorPercentVal != 0) {
 80022a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80022aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b2:	d05b      	beq.n	800236c <Start_Rx_Mapping+0x118>
					if(HorPercentVal < 0 ) { // meaning stick is in range [-100,-1] {
 80022b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c0:	d526      	bpl.n	8002310 <Start_Rx_Mapping+0xbc>
						MotorSetLeft = MotorSetLeft * exp(5*HorPercentVal/100);
 80022c2:	69f8      	ldr	r0, [r7, #28]
 80022c4:	f7fe f960 	bl	8000588 <__aeabi_f2d>
 80022c8:	4604      	mov	r4, r0
 80022ca:	460d      	mov	r5, r1
 80022cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80022d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002408 <Start_Rx_Mapping+0x1b4>
 80022dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80022e0:	ee16 0a90 	vmov	r0, s13
 80022e4:	f7fe f950 	bl	8000588 <__aeabi_f2d>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	ec43 2b10 	vmov	d0, r2, r3
 80022f0:	f012 fe22 	bl	8014f38 <exp>
 80022f4:	ec53 2b10 	vmov	r2, r3, d0
 80022f8:	4620      	mov	r0, r4
 80022fa:	4629      	mov	r1, r5
 80022fc:	f7fe f99c 	bl	8000638 <__aeabi_dmul>
 8002300:	4603      	mov	r3, r0
 8002302:	460c      	mov	r4, r1
 8002304:	4618      	mov	r0, r3
 8002306:	4621      	mov	r1, r4
 8002308:	f7fe fc58 	bl	8000bbc <__aeabi_d2f>
 800230c:	4603      	mov	r3, r0
 800230e:	61fb      	str	r3, [r7, #28]
						//MotorSetLeft = MotorSetLeft - MotorSetLeft*((-1)*HorPercentVal/100); // this reduces the Left Motors throttle by the percentage of the horizontal val
					}
					if(HorPercentVal > 0 ) { // meaning stick is in range [1,100] {
 8002310:	edd7 7a03 	vldr	s15, [r7, #12]
 8002314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	dd26      	ble.n	800236c <Start_Rx_Mapping+0x118>
						MotorSetRight = MotorSetRight * exp(-5*HorPercentVal/100);
 800231e:	69b8      	ldr	r0, [r7, #24]
 8002320:	f7fe f932 	bl	8000588 <__aeabi_f2d>
 8002324:	4604      	mov	r4, r0
 8002326:	460d      	mov	r5, r1
 8002328:	edd7 7a03 	vldr	s15, [r7, #12]
 800232c:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8002330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002334:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002408 <Start_Rx_Mapping+0x1b4>
 8002338:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800233c:	ee16 0a90 	vmov	r0, s13
 8002340:	f7fe f922 	bl	8000588 <__aeabi_f2d>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	ec43 2b10 	vmov	d0, r2, r3
 800234c:	f012 fdf4 	bl	8014f38 <exp>
 8002350:	ec53 2b10 	vmov	r2, r3, d0
 8002354:	4620      	mov	r0, r4
 8002356:	4629      	mov	r1, r5
 8002358:	f7fe f96e 	bl	8000638 <__aeabi_dmul>
 800235c:	4603      	mov	r3, r0
 800235e:	460c      	mov	r4, r1
 8002360:	4618      	mov	r0, r3
 8002362:	4621      	mov	r1, r4
 8002364:	f7fe fc2a 	bl	8000bbc <__aeabi_d2f>
 8002368:	4603      	mov	r3, r0
 800236a:	61bb      	str	r3, [r7, #24]
					}

				}

			}
			MappedVals[0] = MotorSetLeft;
 800236c:	4a27      	ldr	r2, [pc, #156]	; (800240c <Start_Rx_Mapping+0x1b8>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	6013      	str	r3, [r2, #0]
			MappedVals[1] = MotorSetRight;
 8002372:	4a26      	ldr	r2, [pc, #152]	; (800240c <Start_Rx_Mapping+0x1b8>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6053      	str	r3, [r2, #4]
			for(int i = 4; i < 8; i++)
 8002378:	2304      	movs	r3, #4
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e013      	b.n	80023a6 <Start_Rx_Mapping+0x152>
			{
				MappedVals[i] = MapRxToSwitch(ChannelVals[i]);
 800237e:	4a21      	ldr	r2, [pc, #132]	; (8002404 <Start_Rx_Mapping+0x1b0>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fe08 	bl	8000f9c <MapRxToSwitch>
 800238c:	ee07 0a90 	vmov	s15, r0
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <Start_Rx_Mapping+0x1b8>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	edc3 7a00 	vstr	s15, [r3]
			for(int i = 4; i < 8; i++)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2b07      	cmp	r3, #7
 80023aa:	dde8      	ble.n	800237e <Start_Rx_Mapping+0x12a>
			}

			if(FlagBuffer[BAYBLADE_FG]) {
 80023ac:	4b18      	ldr	r3, [pc, #96]	; (8002410 <Start_Rx_Mapping+0x1bc>)
 80023ae:	795b      	ldrb	r3, [r3, #5]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d021      	beq.n	80023f8 <Start_Rx_Mapping+0x1a4>
				MappedVals[0] = MAP_MIN;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <Start_Rx_Mapping+0x1b8>)
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <Start_Rx_Mapping+0x1c0>)
 80023b8:	601a      	str	r2, [r3, #0]
				MappedVals[1] = MAP_MAX;
 80023ba:	4b14      	ldr	r3, [pc, #80]	; (800240c <Start_Rx_Mapping+0x1b8>)
 80023bc:	4a16      	ldr	r2, [pc, #88]	; (8002418 <Start_Rx_Mapping+0x1c4>)
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	e01a      	b.n	80023f8 <Start_Rx_Mapping+0x1a4>
			}

		}
		else //Flags are not good, set values to safe values
		{
			for(int i = 0; i < 8; i++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	e014      	b.n	80023f2 <Start_Rx_Mapping+0x19e>
			{
				if(i < 4) //First 4 channels are sticks, all others are switches
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	dc07      	bgt.n	80023de <Start_Rx_Mapping+0x18a>
					MappedVals[i] = MAP_MID;
 80023ce:	4a0f      	ldr	r2, [pc, #60]	; (800240c <Start_Rx_Mapping+0x1b8>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e006      	b.n	80023ec <Start_Rx_Mapping+0x198>
				else
					MappedVals[i] = MAP_SWITCH_LOW;
 80023de:	4a0b      	ldr	r2, [pc, #44]	; (800240c <Start_Rx_Mapping+0x1b8>)
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
			for(int i = 0; i < 8; i++)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	3301      	adds	r3, #1
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b07      	cmp	r3, #7
 80023f6:	dde7      	ble.n	80023c8 <Start_Rx_Mapping+0x174>
			}
		}
		//TODO:CALL MAP_TO_MOTOR WHEN VALUES CHANGE
		osThreadSuspend(Rx_MappingHandle);
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <Start_Rx_Mapping+0x1c8>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00e f933 	bl	8010668 <osThreadSuspend>
		if(CheckFlags())
 8002402:	e72b      	b.n	800225c <Start_Rx_Mapping+0x8>
 8002404:	20000000 	.word	0x20000000
 8002408:	42c80000 	.word	0x42c80000
 800240c:	20000158 	.word	0x20000158
 8002410:	20000178 	.word	0x20000178
 8002414:	c2c80000 	.word	0xc2c80000
 8002418:	42c80000 	.word	0x42c80000
 800241c:	20004c30 	.word	0x20004c30

08002420 <Start_Battery_Monitor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Battery_Monitor */
void Start_Battery_Monitor(void *argument)
{
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Battery_Monitor */
	/* Infinite loop */
	float voltage = FindAnalogInputVoltage();
 8002428:	f7fe ff0a 	bl	8001240 <FindAnalogInputVoltage>
 800242c:	ed87 0a03 	vstr	s0, [r7, #12]
	uint8_t batSize = CalcBatterySize(voltage);
 8002430:	edd7 7a03 	vldr	s15, [r7, #12]
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 0a90 	vmov	r0, s15
 800243c:	f7fe fe90 	bl	8001160 <CalcBatterySize>
 8002440:	4603      	mov	r3, r0
 8002442:	72fb      	strb	r3, [r7, #11]
	for(;;)
	{
		//BSP_LCD_DisplayStringAtLine(5, "BATTERY");
		//__NOP();
		voltage = FindAnalogInputVoltage();
 8002444:	f7fe fefc 	bl	8001240 <FindAnalogInputVoltage>
 8002448:	ed87 0a03 	vstr	s0, [r7, #12]
		if(voltage < (batSize * BAT_MIN_CELL_V)) {
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f7fe f89b 	bl	8000588 <__aeabi_f2d>
 8002452:	4604      	mov	r4, r0
 8002454:	460d      	mov	r5, r1
 8002456:	7afb      	ldrb	r3, [r7, #11]
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f883 	bl	8000564 <__aeabi_i2d>
 800245e:	a310      	add	r3, pc, #64	; (adr r3, 80024a0 <Start_Battery_Monitor+0x80>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe f8e8 	bl	8000638 <__aeabi_dmul>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4620      	mov	r0, r4
 800246e:	4629      	mov	r1, r5
 8002470:	f7fe fb54 	bl	8000b1c <__aeabi_dcmplt>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <Start_Battery_Monitor+0x62>
			FlagBuffer[BAT_LVL_FG] = false;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <Start_Battery_Monitor+0x78>)
 800247c:	2200      	movs	r2, #0
 800247e:	70da      	strb	r2, [r3, #3]
 8002480:	e002      	b.n	8002488 <Start_Battery_Monitor+0x68>
		}
		else
		{
			FlagBuffer[BAT_LVL_FG] = true;
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <Start_Battery_Monitor+0x78>)
 8002484:	2201      	movs	r2, #1
 8002486:	70da      	strb	r2, [r3, #3]
		}
		osThreadSuspend(Battery_MonitorHandle);
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <Start_Battery_Monitor+0x7c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f00e f8eb 	bl	8010668 <osThreadSuspend>
		voltage = FindAnalogInputVoltage();
 8002492:	e7d7      	b.n	8002444 <Start_Battery_Monitor+0x24>
 8002494:	f3af 8000 	nop.w
 8002498:	20000178 	.word	0x20000178
 800249c:	20004c34 	.word	0x20004c34
 80024a0:	9999999a 	.word	0x9999999a
 80024a4:	40099999 	.word	0x40099999

080024a8 <Start_Data_To_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Data_To_LCD */
void Start_Data_To_LCD(void *argument)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af04      	add	r7, sp, #16
 80024ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Data_To_LCD */
  /* Infinite loop */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f002 f87d 	bl	80045b0 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAtLine(9, MotorBuffer1);
		BSP_LCD_DisplayStringAtLine(10, MotorBuffer2);

		BSP_LCD_DisplayStringAtLine(12, FlagBufferChar);*/

		if (LCDFirstPrint)
 80024b6:	4b50      	ldr	r3, [pc, #320]	; (80025f8 <Start_Data_To_LCD+0x150>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 80c8 	beq.w	8002650 <Start_Data_To_LCD+0x1a8>
		{
			//On first run, print everything.
			sprintf(ChanBuffer1, "ChanVals: 1:%04d", ChannelVals[0]);
 80024c0:	4b4e      	ldr	r3, [pc, #312]	; (80025fc <Start_Data_To_LCD+0x154>)
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	494e      	ldr	r1, [pc, #312]	; (8002600 <Start_Data_To_LCD+0x158>)
 80024c8:	484e      	ldr	r0, [pc, #312]	; (8002604 <Start_Data_To_LCD+0x15c>)
 80024ca:	f012 f9ef 	bl	80148ac <siprintf>
			sprintf(ChanBuffer2, "2:%04d 3:%04d", ChannelVals[1], ChannelVals[2]);
 80024ce:	4b4b      	ldr	r3, [pc, #300]	; (80025fc <Start_Data_To_LCD+0x154>)
 80024d0:	885b      	ldrh	r3, [r3, #2]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4b49      	ldr	r3, [pc, #292]	; (80025fc <Start_Data_To_LCD+0x154>)
 80024d6:	889b      	ldrh	r3, [r3, #4]
 80024d8:	494b      	ldr	r1, [pc, #300]	; (8002608 <Start_Data_To_LCD+0x160>)
 80024da:	484c      	ldr	r0, [pc, #304]	; (800260c <Start_Data_To_LCD+0x164>)
 80024dc:	f012 f9e6 	bl	80148ac <siprintf>
			sprintf(ChanBuffer3, "4:%04d 5:%04d", ChannelVals[3], ChannelVals[4]);
 80024e0:	4b46      	ldr	r3, [pc, #280]	; (80025fc <Start_Data_To_LCD+0x154>)
 80024e2:	88db      	ldrh	r3, [r3, #6]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b45      	ldr	r3, [pc, #276]	; (80025fc <Start_Data_To_LCD+0x154>)
 80024e8:	891b      	ldrh	r3, [r3, #8]
 80024ea:	4949      	ldr	r1, [pc, #292]	; (8002610 <Start_Data_To_LCD+0x168>)
 80024ec:	4849      	ldr	r0, [pc, #292]	; (8002614 <Start_Data_To_LCD+0x16c>)
 80024ee:	f012 f9dd 	bl	80148ac <siprintf>

			sprintf(MapBuffer1, "MappedVals: 1:%04d", (int)MappedVals[0]);
 80024f2:	4b49      	ldr	r3, [pc, #292]	; (8002618 <Start_Data_To_LCD+0x170>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024fc:	ee17 2a90 	vmov	r2, s15
 8002500:	4946      	ldr	r1, [pc, #280]	; (800261c <Start_Data_To_LCD+0x174>)
 8002502:	4847      	ldr	r0, [pc, #284]	; (8002620 <Start_Data_To_LCD+0x178>)
 8002504:	f012 f9d2 	bl	80148ac <siprintf>
			sprintf(MapBuffer2, "2:%04d 3:%04d", (int)MappedVals[1], (int)MappedVals[2]);
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <Start_Data_To_LCD+0x170>)
 800250a:	edd3 7a01 	vldr	s15, [r3, #4]
 800250e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <Start_Data_To_LCD+0x170>)
 8002514:	edd3 7a02 	vldr	s15, [r3, #8]
 8002518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251c:	ee17 3a90 	vmov	r3, s15
 8002520:	ee17 2a10 	vmov	r2, s14
 8002524:	4938      	ldr	r1, [pc, #224]	; (8002608 <Start_Data_To_LCD+0x160>)
 8002526:	483f      	ldr	r0, [pc, #252]	; (8002624 <Start_Data_To_LCD+0x17c>)
 8002528:	f012 f9c0 	bl	80148ac <siprintf>
			sprintf(MapBuffer3, "4:%04d 5:%04d", (int)MappedVals[3], (int)MappedVals[4]);
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <Start_Data_To_LCD+0x170>)
 800252e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002532:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002536:	4b38      	ldr	r3, [pc, #224]	; (8002618 <Start_Data_To_LCD+0x170>)
 8002538:	edd3 7a04 	vldr	s15, [r3, #16]
 800253c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002540:	ee17 3a90 	vmov	r3, s15
 8002544:	ee17 2a10 	vmov	r2, s14
 8002548:	4931      	ldr	r1, [pc, #196]	; (8002610 <Start_Data_To_LCD+0x168>)
 800254a:	4837      	ldr	r0, [pc, #220]	; (8002628 <Start_Data_To_LCD+0x180>)
 800254c:	f012 f9ae 	bl	80148ac <siprintf>

			sprintf(MotorBuffer1, "1:%04d 2:%04d", MotorVals[0], MotorVals[1]);
 8002550:	4b36      	ldr	r3, [pc, #216]	; (800262c <Start_Data_To_LCD+0x184>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <Start_Data_To_LCD+0x184>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4935      	ldr	r1, [pc, #212]	; (8002630 <Start_Data_To_LCD+0x188>)
 800255a:	4836      	ldr	r0, [pc, #216]	; (8002634 <Start_Data_To_LCD+0x18c>)
 800255c:	f012 f9a6 	bl	80148ac <siprintf>
			sprintf(MotorBuffer2, "3:%04d 4:%04d", MotorVals[2], MotorVals[3]);
 8002560:	4b32      	ldr	r3, [pc, #200]	; (800262c <Start_Data_To_LCD+0x184>)
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	4b31      	ldr	r3, [pc, #196]	; (800262c <Start_Data_To_LCD+0x184>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4933      	ldr	r1, [pc, #204]	; (8002638 <Start_Data_To_LCD+0x190>)
 800256a:	4834      	ldr	r0, [pc, #208]	; (800263c <Start_Data_To_LCD+0x194>)
 800256c:	f012 f99e 	bl	80148ac <siprintf>

			sprintf(FlagBufferChar, "FgBuf:[%1d,%1d,%1d,%1d,%1d]", FlagBuffer[0], FlagBuffer[1], FlagBuffer[2], FlagBuffer[3], FlagBuffer[4]);
 8002570:	4b33      	ldr	r3, [pc, #204]	; (8002640 <Start_Data_To_LCD+0x198>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	4b32      	ldr	r3, [pc, #200]	; (8002640 <Start_Data_To_LCD+0x198>)
 8002578:	785b      	ldrb	r3, [r3, #1]
 800257a:	461c      	mov	r4, r3
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <Start_Data_To_LCD+0x198>)
 800257e:	789b      	ldrb	r3, [r3, #2]
 8002580:	461a      	mov	r2, r3
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <Start_Data_To_LCD+0x198>)
 8002584:	78db      	ldrb	r3, [r3, #3]
 8002586:	4619      	mov	r1, r3
 8002588:	4b2d      	ldr	r3, [pc, #180]	; (8002640 <Start_Data_To_LCD+0x198>)
 800258a:	791b      	ldrb	r3, [r3, #4]
 800258c:	9302      	str	r3, [sp, #8]
 800258e:	9101      	str	r1, [sp, #4]
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	4623      	mov	r3, r4
 8002594:	4602      	mov	r2, r0
 8002596:	492b      	ldr	r1, [pc, #172]	; (8002644 <Start_Data_To_LCD+0x19c>)
 8002598:	482b      	ldr	r0, [pc, #172]	; (8002648 <Start_Data_To_LCD+0x1a0>)
 800259a:	f012 f987 	bl	80148ac <siprintf>

			BSP_LCD_DisplayStringAtLine(0, ChanBuffer1);
 800259e:	4919      	ldr	r1, [pc, #100]	; (8002604 <Start_Data_To_LCD+0x15c>)
 80025a0:	2000      	movs	r0, #0
 80025a2:	f002 f933 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAtLine(1, ChanBuffer2);
 80025a6:	4919      	ldr	r1, [pc, #100]	; (800260c <Start_Data_To_LCD+0x164>)
 80025a8:	2001      	movs	r0, #1
 80025aa:	f002 f92f 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAtLine(2, ChanBuffer3);
 80025ae:	4919      	ldr	r1, [pc, #100]	; (8002614 <Start_Data_To_LCD+0x16c>)
 80025b0:	2002      	movs	r0, #2
 80025b2:	f002 f92b 	bl	800480c <BSP_LCD_DisplayStringAtLine>

			BSP_LCD_DisplayStringAtLine(4, MapBuffer1);
 80025b6:	491a      	ldr	r1, [pc, #104]	; (8002620 <Start_Data_To_LCD+0x178>)
 80025b8:	2004      	movs	r0, #4
 80025ba:	f002 f927 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAtLine(5, MapBuffer2);
 80025be:	4919      	ldr	r1, [pc, #100]	; (8002624 <Start_Data_To_LCD+0x17c>)
 80025c0:	2005      	movs	r0, #5
 80025c2:	f002 f923 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAtLine(6, MapBuffer3);
 80025c6:	4918      	ldr	r1, [pc, #96]	; (8002628 <Start_Data_To_LCD+0x180>)
 80025c8:	2006      	movs	r0, #6
 80025ca:	f002 f91f 	bl	800480c <BSP_LCD_DisplayStringAtLine>

			BSP_LCD_DisplayStringAtLine(8, "MotorVals:");
 80025ce:	491f      	ldr	r1, [pc, #124]	; (800264c <Start_Data_To_LCD+0x1a4>)
 80025d0:	2008      	movs	r0, #8
 80025d2:	f002 f91b 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAtLine(9, MotorBuffer1);
 80025d6:	4917      	ldr	r1, [pc, #92]	; (8002634 <Start_Data_To_LCD+0x18c>)
 80025d8:	2009      	movs	r0, #9
 80025da:	f002 f917 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			BSP_LCD_DisplayStringAtLine(10, MotorBuffer2);
 80025de:	4917      	ldr	r1, [pc, #92]	; (800263c <Start_Data_To_LCD+0x194>)
 80025e0:	200a      	movs	r0, #10
 80025e2:	f002 f913 	bl	800480c <BSP_LCD_DisplayStringAtLine>

			BSP_LCD_DisplayStringAtLine(12, FlagBufferChar);
 80025e6:	4918      	ldr	r1, [pc, #96]	; (8002648 <Start_Data_To_LCD+0x1a0>)
 80025e8:	200c      	movs	r0, #12
 80025ea:	f002 f90f 	bl	800480c <BSP_LCD_DisplayStringAtLine>

			LCDFirstPrint = 0;
 80025ee:	4b02      	ldr	r3, [pc, #8]	; (80025f8 <Start_Data_To_LCD+0x150>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e172      	b.n	80028dc <Start_Data_To_LCD+0x434>
 80025f6:	bf00      	nop
 80025f8:	20000046 	.word	0x20000046
 80025fc:	20000000 	.word	0x20000000
 8002600:	080153b8 	.word	0x080153b8
 8002604:	20004fd8 	.word	0x20004fd8
 8002608:	080153cc 	.word	0x080153cc
 800260c:	20004c8c 	.word	0x20004c8c
 8002610:	080153dc 	.word	0x080153dc
 8002614:	20004c38 	.word	0x20004c38
 8002618:	20000158 	.word	0x20000158
 800261c:	080153ec 	.word	0x080153ec
 8002620:	20004ea4 	.word	0x20004ea4
 8002624:	20004b0c 	.word	0x20004b0c
 8002628:	20004d68 	.word	0x20004d68
 800262c:	20000010 	.word	0x20000010
 8002630:	08015400 	.word	0x08015400
 8002634:	20004e8c 	.word	0x20004e8c
 8002638:	08015410 	.word	0x08015410
 800263c:	20005000 	.word	0x20005000
 8002640:	20000178 	.word	0x20000178
 8002644:	08015420 	.word	0x08015420
 8002648:	20004fec 	.word	0x20004fec
 800264c:	0801543c 	.word	0x0801543c
		}
		else
		{
			//If any value has changed, reprint its line.
			if (PrevChannelVals[0] != ChannelVals[0])
 8002650:	4ba5      	ldr	r3, [pc, #660]	; (80028e8 <Start_Data_To_LCD+0x440>)
 8002652:	881a      	ldrh	r2, [r3, #0]
 8002654:	4ba5      	ldr	r3, [pc, #660]	; (80028ec <Start_Data_To_LCD+0x444>)
 8002656:	881b      	ldrh	r3, [r3, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d00a      	beq.n	8002672 <Start_Data_To_LCD+0x1ca>
			{
				sprintf(ChanBuffer1, "ChanVals: 1:%04d", ChannelVals[0]);
 800265c:	4ba3      	ldr	r3, [pc, #652]	; (80028ec <Start_Data_To_LCD+0x444>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	461a      	mov	r2, r3
 8002662:	49a3      	ldr	r1, [pc, #652]	; (80028f0 <Start_Data_To_LCD+0x448>)
 8002664:	48a3      	ldr	r0, [pc, #652]	; (80028f4 <Start_Data_To_LCD+0x44c>)
 8002666:	f012 f921 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(0, ChanBuffer1);
 800266a:	49a2      	ldr	r1, [pc, #648]	; (80028f4 <Start_Data_To_LCD+0x44c>)
 800266c:	2000      	movs	r0, #0
 800266e:	f002 f8cd 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}
			if ((PrevChannelVals[1] != ChannelVals[1]) || (PrevChannelVals[2] != ChannelVals[2]))
 8002672:	4b9d      	ldr	r3, [pc, #628]	; (80028e8 <Start_Data_To_LCD+0x440>)
 8002674:	885a      	ldrh	r2, [r3, #2]
 8002676:	4b9d      	ldr	r3, [pc, #628]	; (80028ec <Start_Data_To_LCD+0x444>)
 8002678:	885b      	ldrh	r3, [r3, #2]
 800267a:	429a      	cmp	r2, r3
 800267c:	d105      	bne.n	800268a <Start_Data_To_LCD+0x1e2>
 800267e:	4b9a      	ldr	r3, [pc, #616]	; (80028e8 <Start_Data_To_LCD+0x440>)
 8002680:	889a      	ldrh	r2, [r3, #4]
 8002682:	4b9a      	ldr	r3, [pc, #616]	; (80028ec <Start_Data_To_LCD+0x444>)
 8002684:	889b      	ldrh	r3, [r3, #4]
 8002686:	429a      	cmp	r2, r3
 8002688:	d00c      	beq.n	80026a4 <Start_Data_To_LCD+0x1fc>
			{
				sprintf(ChanBuffer2, "2:%04d 3:%04d", ChannelVals[1], ChannelVals[2]);
 800268a:	4b98      	ldr	r3, [pc, #608]	; (80028ec <Start_Data_To_LCD+0x444>)
 800268c:	885b      	ldrh	r3, [r3, #2]
 800268e:	461a      	mov	r2, r3
 8002690:	4b96      	ldr	r3, [pc, #600]	; (80028ec <Start_Data_To_LCD+0x444>)
 8002692:	889b      	ldrh	r3, [r3, #4]
 8002694:	4998      	ldr	r1, [pc, #608]	; (80028f8 <Start_Data_To_LCD+0x450>)
 8002696:	4899      	ldr	r0, [pc, #612]	; (80028fc <Start_Data_To_LCD+0x454>)
 8002698:	f012 f908 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(1, ChanBuffer2);
 800269c:	4997      	ldr	r1, [pc, #604]	; (80028fc <Start_Data_To_LCD+0x454>)
 800269e:	2001      	movs	r0, #1
 80026a0:	f002 f8b4 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}
			if ((PrevChannelVals[3] != ChannelVals[3]) || (PrevChannelVals[4] != ChannelVals[4]))
 80026a4:	4b90      	ldr	r3, [pc, #576]	; (80028e8 <Start_Data_To_LCD+0x440>)
 80026a6:	88da      	ldrh	r2, [r3, #6]
 80026a8:	4b90      	ldr	r3, [pc, #576]	; (80028ec <Start_Data_To_LCD+0x444>)
 80026aa:	88db      	ldrh	r3, [r3, #6]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d105      	bne.n	80026bc <Start_Data_To_LCD+0x214>
 80026b0:	4b8d      	ldr	r3, [pc, #564]	; (80028e8 <Start_Data_To_LCD+0x440>)
 80026b2:	891a      	ldrh	r2, [r3, #8]
 80026b4:	4b8d      	ldr	r3, [pc, #564]	; (80028ec <Start_Data_To_LCD+0x444>)
 80026b6:	891b      	ldrh	r3, [r3, #8]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d00c      	beq.n	80026d6 <Start_Data_To_LCD+0x22e>
			{
				sprintf(ChanBuffer3, "4:%04d 5:%04d", ChannelVals[3], ChannelVals[4]);
 80026bc:	4b8b      	ldr	r3, [pc, #556]	; (80028ec <Start_Data_To_LCD+0x444>)
 80026be:	88db      	ldrh	r3, [r3, #6]
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b8a      	ldr	r3, [pc, #552]	; (80028ec <Start_Data_To_LCD+0x444>)
 80026c4:	891b      	ldrh	r3, [r3, #8]
 80026c6:	498e      	ldr	r1, [pc, #568]	; (8002900 <Start_Data_To_LCD+0x458>)
 80026c8:	488e      	ldr	r0, [pc, #568]	; (8002904 <Start_Data_To_LCD+0x45c>)
 80026ca:	f012 f8ef 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(2, ChanBuffer3);
 80026ce:	498d      	ldr	r1, [pc, #564]	; (8002904 <Start_Data_To_LCD+0x45c>)
 80026d0:	2002      	movs	r0, #2
 80026d2:	f002 f89b 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}

			if ((int)PrevMappedVals[0] != (int)MappedVals[0])
 80026d6:	4b8c      	ldr	r3, [pc, #560]	; (8002908 <Start_Data_To_LCD+0x460>)
 80026d8:	edd3 7a00 	vldr	s15, [r3]
 80026dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e0:	ee17 2a90 	vmov	r2, s15
 80026e4:	4b89      	ldr	r3, [pc, #548]	; (800290c <Start_Data_To_LCD+0x464>)
 80026e6:	edd3 7a00 	vldr	s15, [r3]
 80026ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026ee:	ee17 3a90 	vmov	r3, s15
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d00e      	beq.n	8002714 <Start_Data_To_LCD+0x26c>
			{
				sprintf(MapBuffer1, "MappedVals: 1:%04d", (int)MappedVals[0]);
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <Start_Data_To_LCD+0x464>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002700:	ee17 2a90 	vmov	r2, s15
 8002704:	4982      	ldr	r1, [pc, #520]	; (8002910 <Start_Data_To_LCD+0x468>)
 8002706:	4883      	ldr	r0, [pc, #524]	; (8002914 <Start_Data_To_LCD+0x46c>)
 8002708:	f012 f8d0 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(4, MapBuffer1);
 800270c:	4981      	ldr	r1, [pc, #516]	; (8002914 <Start_Data_To_LCD+0x46c>)
 800270e:	2004      	movs	r0, #4
 8002710:	f002 f87c 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}
			if (((int)PrevMappedVals[1] != (int)MappedVals[1]) || ((int)PrevMappedVals[2] != (int)MappedVals[2]))
 8002714:	4b7c      	ldr	r3, [pc, #496]	; (8002908 <Start_Data_To_LCD+0x460>)
 8002716:	edd3 7a01 	vldr	s15, [r3, #4]
 800271a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271e:	ee17 2a90 	vmov	r2, s15
 8002722:	4b7a      	ldr	r3, [pc, #488]	; (800290c <Start_Data_To_LCD+0x464>)
 8002724:	edd3 7a01 	vldr	s15, [r3, #4]
 8002728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272c:	ee17 3a90 	vmov	r3, s15
 8002730:	429a      	cmp	r2, r3
 8002732:	d10f      	bne.n	8002754 <Start_Data_To_LCD+0x2ac>
 8002734:	4b74      	ldr	r3, [pc, #464]	; (8002908 <Start_Data_To_LCD+0x460>)
 8002736:	edd3 7a02 	vldr	s15, [r3, #8]
 800273a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800273e:	ee17 2a90 	vmov	r2, s15
 8002742:	4b72      	ldr	r3, [pc, #456]	; (800290c <Start_Data_To_LCD+0x464>)
 8002744:	edd3 7a02 	vldr	s15, [r3, #8]
 8002748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800274c:	ee17 3a90 	vmov	r3, s15
 8002750:	429a      	cmp	r2, r3
 8002752:	d015      	beq.n	8002780 <Start_Data_To_LCD+0x2d8>
			{
				sprintf(MapBuffer2, "2:%04d 3:%04d", (int)MappedVals[1], (int)MappedVals[2]);
 8002754:	4b6d      	ldr	r3, [pc, #436]	; (800290c <Start_Data_To_LCD+0x464>)
 8002756:	edd3 7a01 	vldr	s15, [r3, #4]
 800275a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800275e:	4b6b      	ldr	r3, [pc, #428]	; (800290c <Start_Data_To_LCD+0x464>)
 8002760:	edd3 7a02 	vldr	s15, [r3, #8]
 8002764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002768:	ee17 3a90 	vmov	r3, s15
 800276c:	ee17 2a10 	vmov	r2, s14
 8002770:	4961      	ldr	r1, [pc, #388]	; (80028f8 <Start_Data_To_LCD+0x450>)
 8002772:	4869      	ldr	r0, [pc, #420]	; (8002918 <Start_Data_To_LCD+0x470>)
 8002774:	f012 f89a 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(5, MapBuffer2);
 8002778:	4967      	ldr	r1, [pc, #412]	; (8002918 <Start_Data_To_LCD+0x470>)
 800277a:	2005      	movs	r0, #5
 800277c:	f002 f846 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}
			if (((int)PrevMappedVals[3] != (int)MappedVals[3]) || ((int)PrevMappedVals[4] != (int)MappedVals[4]))
 8002780:	4b61      	ldr	r3, [pc, #388]	; (8002908 <Start_Data_To_LCD+0x460>)
 8002782:	edd3 7a03 	vldr	s15, [r3, #12]
 8002786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800278a:	ee17 2a90 	vmov	r2, s15
 800278e:	4b5f      	ldr	r3, [pc, #380]	; (800290c <Start_Data_To_LCD+0x464>)
 8002790:	edd3 7a03 	vldr	s15, [r3, #12]
 8002794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002798:	ee17 3a90 	vmov	r3, s15
 800279c:	429a      	cmp	r2, r3
 800279e:	d10f      	bne.n	80027c0 <Start_Data_To_LCD+0x318>
 80027a0:	4b59      	ldr	r3, [pc, #356]	; (8002908 <Start_Data_To_LCD+0x460>)
 80027a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80027a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027aa:	ee17 2a90 	vmov	r2, s15
 80027ae:	4b57      	ldr	r3, [pc, #348]	; (800290c <Start_Data_To_LCD+0x464>)
 80027b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80027b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027b8:	ee17 3a90 	vmov	r3, s15
 80027bc:	429a      	cmp	r2, r3
 80027be:	d015      	beq.n	80027ec <Start_Data_To_LCD+0x344>
			{
				sprintf(MapBuffer3, "4:%04d 5:%04d", (int)MappedVals[3], (int)MappedVals[4]);
 80027c0:	4b52      	ldr	r3, [pc, #328]	; (800290c <Start_Data_To_LCD+0x464>)
 80027c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80027c6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80027ca:	4b50      	ldr	r3, [pc, #320]	; (800290c <Start_Data_To_LCD+0x464>)
 80027cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80027d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027d4:	ee17 3a90 	vmov	r3, s15
 80027d8:	ee17 2a10 	vmov	r2, s14
 80027dc:	4948      	ldr	r1, [pc, #288]	; (8002900 <Start_Data_To_LCD+0x458>)
 80027de:	484f      	ldr	r0, [pc, #316]	; (800291c <Start_Data_To_LCD+0x474>)
 80027e0:	f012 f864 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(6, MapBuffer3);
 80027e4:	494d      	ldr	r1, [pc, #308]	; (800291c <Start_Data_To_LCD+0x474>)
 80027e6:	2006      	movs	r0, #6
 80027e8:	f002 f810 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}

			if ((PrevMotorVals[0] != MotorVals[0]) || (PrevMappedVals[1] != MappedVals[1]))
 80027ec:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <Start_Data_To_LCD+0x478>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b4c      	ldr	r3, [pc, #304]	; (8002924 <Start_Data_To_LCD+0x47c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d10a      	bne.n	800280e <Start_Data_To_LCD+0x366>
 80027f8:	4b43      	ldr	r3, [pc, #268]	; (8002908 <Start_Data_To_LCD+0x460>)
 80027fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80027fe:	4b43      	ldr	r3, [pc, #268]	; (800290c <Start_Data_To_LCD+0x464>)
 8002800:	edd3 7a01 	vldr	s15, [r3, #4]
 8002804:	eeb4 7a67 	vcmp.f32	s14, s15
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	d00b      	beq.n	8002826 <Start_Data_To_LCD+0x37e>
			{
				sprintf(MotorBuffer1, "1:%04d 2:%04d", MotorVals[0], MotorVals[1]);
 800280e:	4b45      	ldr	r3, [pc, #276]	; (8002924 <Start_Data_To_LCD+0x47c>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4b44      	ldr	r3, [pc, #272]	; (8002924 <Start_Data_To_LCD+0x47c>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4944      	ldr	r1, [pc, #272]	; (8002928 <Start_Data_To_LCD+0x480>)
 8002818:	4844      	ldr	r0, [pc, #272]	; (800292c <Start_Data_To_LCD+0x484>)
 800281a:	f012 f847 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(9, MotorBuffer1);
 800281e:	4943      	ldr	r1, [pc, #268]	; (800292c <Start_Data_To_LCD+0x484>)
 8002820:	2009      	movs	r0, #9
 8002822:	f001 fff3 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}
			if ((PrevMappedVals[2] != MappedVals[2]) || (PrevMappedVals[3] != MappedVals[3]))
 8002826:	4b38      	ldr	r3, [pc, #224]	; (8002908 <Start_Data_To_LCD+0x460>)
 8002828:	ed93 7a02 	vldr	s14, [r3, #8]
 800282c:	4b37      	ldr	r3, [pc, #220]	; (800290c <Start_Data_To_LCD+0x464>)
 800282e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002832:	eeb4 7a67 	vcmp.f32	s14, s15
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	d10a      	bne.n	8002852 <Start_Data_To_LCD+0x3aa>
 800283c:	4b32      	ldr	r3, [pc, #200]	; (8002908 <Start_Data_To_LCD+0x460>)
 800283e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002842:	4b32      	ldr	r3, [pc, #200]	; (800290c <Start_Data_To_LCD+0x464>)
 8002844:	edd3 7a03 	vldr	s15, [r3, #12]
 8002848:	eeb4 7a67 	vcmp.f32	s14, s15
 800284c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002850:	d00b      	beq.n	800286a <Start_Data_To_LCD+0x3c2>
			{
				sprintf(MotorBuffer2, "3:%04d 4:%04d", MotorVals[2], MotorVals[3]);
 8002852:	4b34      	ldr	r3, [pc, #208]	; (8002924 <Start_Data_To_LCD+0x47c>)
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	4b33      	ldr	r3, [pc, #204]	; (8002924 <Start_Data_To_LCD+0x47c>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4935      	ldr	r1, [pc, #212]	; (8002930 <Start_Data_To_LCD+0x488>)
 800285c:	4835      	ldr	r0, [pc, #212]	; (8002934 <Start_Data_To_LCD+0x48c>)
 800285e:	f012 f825 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(10, MotorBuffer2);
 8002862:	4934      	ldr	r1, [pc, #208]	; (8002934 <Start_Data_To_LCD+0x48c>)
 8002864:	200a      	movs	r0, #10
 8002866:	f001 ffd1 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}

			if ((PrevFlagBuffer[0] != FlagBuffer[0]) || (PrevFlagBuffer[1] != FlagBuffer[1])
 800286a:	4b33      	ldr	r3, [pc, #204]	; (8002938 <Start_Data_To_LCD+0x490>)
 800286c:	781a      	ldrb	r2, [r3, #0]
 800286e:	4b33      	ldr	r3, [pc, #204]	; (800293c <Start_Data_To_LCD+0x494>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d117      	bne.n	80028a6 <Start_Data_To_LCD+0x3fe>
 8002876:	4b30      	ldr	r3, [pc, #192]	; (8002938 <Start_Data_To_LCD+0x490>)
 8002878:	785a      	ldrb	r2, [r3, #1]
 800287a:	4b30      	ldr	r3, [pc, #192]	; (800293c <Start_Data_To_LCD+0x494>)
 800287c:	785b      	ldrb	r3, [r3, #1]
 800287e:	429a      	cmp	r2, r3
 8002880:	d111      	bne.n	80028a6 <Start_Data_To_LCD+0x3fe>
				|| (PrevFlagBuffer[2] != FlagBuffer[2]) || (PrevFlagBuffer[3] != FlagBuffer[3])
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <Start_Data_To_LCD+0x490>)
 8002884:	789a      	ldrb	r2, [r3, #2]
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <Start_Data_To_LCD+0x494>)
 8002888:	789b      	ldrb	r3, [r3, #2]
 800288a:	429a      	cmp	r2, r3
 800288c:	d10b      	bne.n	80028a6 <Start_Data_To_LCD+0x3fe>
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <Start_Data_To_LCD+0x490>)
 8002890:	78da      	ldrb	r2, [r3, #3]
 8002892:	4b2a      	ldr	r3, [pc, #168]	; (800293c <Start_Data_To_LCD+0x494>)
 8002894:	78db      	ldrb	r3, [r3, #3]
 8002896:	429a      	cmp	r2, r3
 8002898:	d105      	bne.n	80028a6 <Start_Data_To_LCD+0x3fe>
				|| (PrevFlagBuffer[4] != FlagBuffer[4]))
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <Start_Data_To_LCD+0x490>)
 800289c:	791a      	ldrb	r2, [r3, #4]
 800289e:	4b27      	ldr	r3, [pc, #156]	; (800293c <Start_Data_To_LCD+0x494>)
 80028a0:	791b      	ldrb	r3, [r3, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d01a      	beq.n	80028dc <Start_Data_To_LCD+0x434>
			{
				sprintf(FlagBufferChar, "FgBuf:[%1d,%1d,%1d,%1d,%1d]", FlagBuffer[0], FlagBuffer[1], FlagBuffer[2], FlagBuffer[3], FlagBuffer[4]);
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <Start_Data_To_LCD+0x494>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	4b23      	ldr	r3, [pc, #140]	; (800293c <Start_Data_To_LCD+0x494>)
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	461c      	mov	r4, r3
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <Start_Data_To_LCD+0x494>)
 80028b4:	789b      	ldrb	r3, [r3, #2]
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <Start_Data_To_LCD+0x494>)
 80028ba:	78db      	ldrb	r3, [r3, #3]
 80028bc:	4619      	mov	r1, r3
 80028be:	4b1f      	ldr	r3, [pc, #124]	; (800293c <Start_Data_To_LCD+0x494>)
 80028c0:	791b      	ldrb	r3, [r3, #4]
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	9101      	str	r1, [sp, #4]
 80028c6:	9200      	str	r2, [sp, #0]
 80028c8:	4623      	mov	r3, r4
 80028ca:	4602      	mov	r2, r0
 80028cc:	491c      	ldr	r1, [pc, #112]	; (8002940 <Start_Data_To_LCD+0x498>)
 80028ce:	481d      	ldr	r0, [pc, #116]	; (8002944 <Start_Data_To_LCD+0x49c>)
 80028d0:	f011 ffec 	bl	80148ac <siprintf>
				BSP_LCD_DisplayStringAtLine(12, FlagBufferChar);
 80028d4:	491b      	ldr	r1, [pc, #108]	; (8002944 <Start_Data_To_LCD+0x49c>)
 80028d6:	200c      	movs	r0, #12
 80028d8:	f001 ff98 	bl	800480c <BSP_LCD_DisplayStringAtLine>
			}
		}

		osThreadSuspend(Data_To_LCDHandle);
 80028dc:	4b1a      	ldr	r3, [pc, #104]	; (8002948 <Start_Data_To_LCD+0x4a0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f00d fec1 	bl	8010668 <osThreadSuspend>
		if (LCDFirstPrint)
 80028e6:	e5e6      	b.n	80024b6 <Start_Data_To_LCD+0xe>
 80028e8:	20000020 	.word	0x20000020
 80028ec:	20000000 	.word	0x20000000
 80028f0:	080153b8 	.word	0x080153b8
 80028f4:	20004fd8 	.word	0x20004fd8
 80028f8:	080153cc 	.word	0x080153cc
 80028fc:	20004c8c 	.word	0x20004c8c
 8002900:	080153dc 	.word	0x080153dc
 8002904:	20004c38 	.word	0x20004c38
 8002908:	20000184 	.word	0x20000184
 800290c:	20000158 	.word	0x20000158
 8002910:	080153ec 	.word	0x080153ec
 8002914:	20004ea4 	.word	0x20004ea4
 8002918:	20004b0c 	.word	0x20004b0c
 800291c:	20004d68 	.word	0x20004d68
 8002920:	20000030 	.word	0x20000030
 8002924:	20000010 	.word	0x20000010
 8002928:	08015400 	.word	0x08015400
 800292c:	20004e8c 	.word	0x20004e8c
 8002930:	08015410 	.word	0x08015410
 8002934:	20005000 	.word	0x20005000
 8002938:	20000040 	.word	0x20000040
 800293c:	20000178 	.word	0x20000178
 8002940:	08015420 	.word	0x08015420
 8002944:	20004fec 	.word	0x20004fec
 8002948:	20004ec0 	.word	0x20004ec0

0800294c <Start_Map_To_Motors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Map_To_Motors */
void Start_Map_To_Motors(void *argument)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for(;;)
	{
		//convert from percentage from [-100,100] to [1000,2000]
		//BSP_LCD_DisplayStringAtLine(7, "MAP MOTORS");
		for(int i = 0; i < MOTOR_VALS_SIZE; i++)
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	e011      	b.n	800297e <Start_Map_To_Motors+0x32>
		{
			MotorVals[i] = MapPercentToMotor(MappedVals[i]);
 800295a:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <Start_Map_To_Motors+0x44>)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eeb0 0a67 	vmov.f32	s0, s15
 800296a:	f7fe fb79 	bl	8001060 <MapPercentToMotor>
 800296e:	4601      	mov	r1, r0
 8002970:	4a08      	ldr	r2, [pc, #32]	; (8002994 <Start_Map_To_Motors+0x48>)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < MOTOR_VALS_SIZE; i++)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3301      	adds	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b03      	cmp	r3, #3
 8002982:	ddea      	ble.n	800295a <Start_Map_To_Motors+0xe>
		}
		//BSP_LCD_DisplayStringAtLine(7, "MAP MOTORS");
		osThreadSuspend(Map_To_MotorsHandle);
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <Start_Map_To_Motors+0x4c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f00d fe6d 	bl	8010668 <osThreadSuspend>
		for(int i = 0; i < MOTOR_VALS_SIZE; i++)
 800298e:	e7e1      	b.n	8002954 <Start_Map_To_Motors+0x8>
 8002990:	20000158 	.word	0x20000158
 8002994:	20000010 	.word	0x20000010
 8002998:	20004ea0 	.word	0x20004ea0

0800299c <RadioReadTimCallBack>:
  /* USER CODE END Start_Map_To_Motors */
}

/* RadioReadTimCallBack function */
void RadioReadTimCallBack(void *argument)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RadioReadTimCallBack */
	osThreadResume(Radio_ReceiverHandle);
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <RadioReadTimCallBack+0x38>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f00d fe91 	bl	80106d0 <osThreadResume>
	osThreadResume(Rx_MappingHandle);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <RadioReadTimCallBack+0x3c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f00d fe8c 	bl	80106d0 <osThreadResume>
	osThreadResume(Map_To_MotorsHandle);
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <RadioReadTimCallBack+0x40>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f00d fe87 	bl	80106d0 <osThreadResume>
	osThreadResume(Run_MotorsHandle);
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <RadioReadTimCallBack+0x44>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f00d fe82 	bl	80106d0 <osThreadResume>
  /* USER CODE END RadioReadTimCallBack */
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20004b58 	.word	0x20004b58
 80029d8:	20004c30 	.word	0x20004c30
 80029dc:	20004ea0 	.word	0x20004ea0
 80029e0:	20004ebc 	.word	0x20004ebc

080029e4 <LCDDelayTimCallback>:

/* LCDDelayTimCallback function */
void LCDDelayTimCallback(void *argument)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDDelayTimCallback */
	//osThreadResume(Data_To_LCDHandle);
	osThreadResume(Battery_MonitorHandle);
 80029ec:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <LCDDelayTimCallback+0x1c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f00d fe6d 	bl	80106d0 <osThreadResume>
  /* USER CODE END LCDDelayTimCallback */
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20004c34 	.word	0x20004c34

08002a04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a04      	ldr	r2, [pc, #16]	; (8002a24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002a16:	f002 fa15 	bl	8004e44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40001000 	.word	0x40001000

08002a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
	...

08002a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a08      	ldr	r2, [pc, #32]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_MspInit+0x4c>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08c      	sub	sp, #48	; 0x30
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a31      	ldr	r2, [pc, #196]	; (8002b6c <HAL_ADC_MspInit+0xe4>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d15b      	bne.n	8002b62 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	4a28      	ldr	r2, [pc, #160]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a21      	ldr	r2, [pc, #132]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a1a      	ldr	r2, [pc, #104]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_ADC_MspInit+0xe8>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8002b1a:	2311      	movs	r3, #17
 8002b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b26:	f107 031c 	add.w	r3, r7, #28
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4811      	ldr	r0, [pc, #68]	; (8002b74 <HAL_ADC_MspInit+0xec>)
 8002b2e:	f003 fce3 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 8002b32:	2326      	movs	r3, #38	; 0x26
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b36:	2303      	movs	r3, #3
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3e:	f107 031c 	add.w	r3, r7, #28
 8002b42:	4619      	mov	r1, r3
 8002b44:	480c      	ldr	r0, [pc, #48]	; (8002b78 <HAL_ADC_MspInit+0xf0>)
 8002b46:	f003 fcd7 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 031c 	add.w	r3, r7, #28
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4807      	ldr	r0, [pc, #28]	; (8002b7c <HAL_ADC_MspInit+0xf4>)
 8002b5e:	f003 fccb 	bl	80064f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b62:	bf00      	nop
 8002b64:	3730      	adds	r7, #48	; 0x30
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40012000 	.word	0x40012000
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400

08002b80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	605a      	str	r2, [r3, #4]
 8002b92:	609a      	str	r2, [r3, #8]
 8002b94:	60da      	str	r2, [r3, #12]
 8002b96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_DAC_MspInit+0x8c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d12f      	bne.n	8002c02 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <HAL_DAC_MspInit+0x90>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <HAL_DAC_MspInit+0x90>)
 8002bac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <HAL_DAC_MspInit+0x90>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bba:	613b      	str	r3, [r7, #16]
 8002bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_DAC_MspInit+0x90>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <HAL_DAC_MspInit+0x90>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_DAC_MspInit+0x90>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 8002bda:	2310      	movs	r3, #16
 8002bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002bde:	2303      	movs	r3, #3
 8002be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	4809      	ldr	r0, [pc, #36]	; (8002c14 <HAL_DAC_MspInit+0x94>)
 8002bee:	f003 fc83 	bl	80064f8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2036      	movs	r0, #54	; 0x36
 8002bf8:	f002 fdc8 	bl	800578c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bfc:	2036      	movs	r0, #54	; 0x36
 8002bfe:	f002 fde1 	bl	80057c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40007400 	.word	0x40007400
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020000 	.word	0x40020000

08002c18 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00e      	beq.n	8002c58 <HAL_DFSDM_ChannelMspInit+0x40>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a76      	ldr	r2, [pc, #472]	; (8002e18 <HAL_DFSDM_ChannelMspInit+0x200>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d009      	beq.n	8002c58 <HAL_DFSDM_ChannelMspInit+0x40>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a74      	ldr	r2, [pc, #464]	; (8002e1c <HAL_DFSDM_ChannelMspInit+0x204>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d004      	beq.n	8002c58 <HAL_DFSDM_ChannelMspInit+0x40>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a73      	ldr	r2, [pc, #460]	; (8002e20 <HAL_DFSDM_ChannelMspInit+0x208>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d154      	bne.n	8002d02 <HAL_DFSDM_ChannelMspInit+0xea>
 8002c58:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d150      	bne.n	8002d02 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002c60:	2300      	movs	r3, #0
 8002c62:	623b      	str	r3, [r7, #32]
 8002c64:	4b70      	ldr	r3, [pc, #448]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c68:	4a6f      	ldr	r2, [pc, #444]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6453      	str	r3, [r2, #68]	; 0x44
 8002c70:	4b6d      	ldr	r3, [pc, #436]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c78:	623b      	str	r3, [r7, #32]
 8002c7a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
 8002c80:	4b69      	ldr	r3, [pc, #420]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	4a68      	ldr	r2, [pc, #416]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8c:	4b66      	ldr	r3, [pc, #408]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	4b62      	ldr	r3, [pc, #392]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	4a61      	ldr	r2, [pc, #388]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002ca2:	f043 0308 	orr.w	r3, r3, #8
 8002ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca8:	4b5f      	ldr	r3, [pc, #380]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002cc6:	2306      	movs	r3, #6
 8002cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4856      	ldr	r0, [pc, #344]	; (8002e2c <HAL_DFSDM_ChannelMspInit+0x214>)
 8002cd2:	f003 fc11 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8002cd6:	2340      	movs	r3, #64	; 0x40
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002ce6:	2306      	movs	r3, #6
 8002ce8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cee:	4619      	mov	r1, r3
 8002cf0:	484f      	ldr	r0, [pc, #316]	; (8002e30 <HAL_DFSDM_ChannelMspInit+0x218>)
 8002cf2:	f003 fc01 	bl	80064f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8002cf6:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a49      	ldr	r2, [pc, #292]	; (8002e24 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8002cfe:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8002d00:	e084      	b.n	8002e0c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a43      	ldr	r2, [pc, #268]	; (8002e14 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d07f      	beq.n	8002e0c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a41      	ldr	r2, [pc, #260]	; (8002e18 <HAL_DFSDM_ChannelMspInit+0x200>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d07a      	beq.n	8002e0c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a40      	ldr	r2, [pc, #256]	; (8002e1c <HAL_DFSDM_ChannelMspInit+0x204>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d075      	beq.n	8002e0c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a3e      	ldr	r2, [pc, #248]	; (8002e20 <HAL_DFSDM_ChannelMspInit+0x208>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d070      	beq.n	8002e0c <HAL_DFSDM_ChannelMspInit+0x1f4>
 8002d2a:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d16c      	bne.n	8002e0c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	4a3b      	ldr	r2, [pc, #236]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d40:	6453      	str	r3, [r2, #68]	; 0x44
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	4b35      	ldr	r3, [pc, #212]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a34      	ldr	r2, [pc, #208]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b32      	ldr	r3, [pc, #200]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	4b2e      	ldr	r3, [pc, #184]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	4a2d      	ldr	r2, [pc, #180]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d74:	f043 0308 	orr.w	r3, r3, #8
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	6313      	str	r3, [r2, #48]	; 0x30
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_DFSDM_ChannelMspInit+0x210>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	2300      	movs	r3, #0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dae:	2300      	movs	r3, #0
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8002db2:	2307      	movs	r3, #7
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8002db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dba:	4619      	mov	r1, r3
 8002dbc:	481b      	ldr	r0, [pc, #108]	; (8002e2c <HAL_DFSDM_ChannelMspInit+0x214>)
 8002dbe:	f003 fb9b 	bl	80064f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8002dc2:	2304      	movs	r3, #4
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4814      	ldr	r0, [pc, #80]	; (8002e30 <HAL_DFSDM_ChannelMspInit+0x218>)
 8002dde:	f003 fb8b 	bl	80064f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de6:	2302      	movs	r3, #2
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dee:	2300      	movs	r3, #0
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8002df2:	2306      	movs	r3, #6
 8002df4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8002df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	480e      	ldr	r0, [pc, #56]	; (8002e38 <HAL_DFSDM_ChannelMspInit+0x220>)
 8002dfe:	f003 fb7b 	bl	80064f8 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8002e0a:	6013      	str	r3, [r2, #0]
}
 8002e0c:	bf00      	nop
 8002e0e:	3738      	adds	r7, #56	; 0x38
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40016000 	.word	0x40016000
 8002e18:	40016020 	.word	0x40016020
 8002e1c:	40016040 	.word	0x40016040
 8002e20:	40016060 	.word	0x40016060
 8002e24:	200001a4 	.word	0x200001a4
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40020c00 	.word	0x40020c00
 8002e34:	200001a8 	.word	0x200001a8
 8002e38:	40020400 	.word	0x40020400

08002e3c <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <HAL_FMPI2C_MspInit+0x84>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d12b      	bne.n	8002eb6 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_FMPI2C_MspInit+0x88>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_FMPI2C_MspInit+0x88>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_FMPI2C_MspInit+0x88>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8002e7a:	23c0      	movs	r3, #192	; 0xc0
 8002e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e7e:	2312      	movs	r3, #18
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e86:	2303      	movs	r3, #3
 8002e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8e:	f107 0314 	add.w	r3, r7, #20
 8002e92:	4619      	mov	r1, r3
 8002e94:	480c      	ldr	r0, [pc, #48]	; (8002ec8 <HAL_FMPI2C_MspInit+0x8c>)
 8002e96:	f003 fb2f 	bl	80064f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_FMPI2C_MspInit+0x88>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <HAL_FMPI2C_MspInit+0x88>)
 8002ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eaa:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <HAL_FMPI2C_MspInit+0x88>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8002eb6:	bf00      	nop
 8002eb8:	3728      	adds	r7, #40	; 0x28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40006000 	.word	0x40006000
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40020800 	.word	0x40020800

08002ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	; (8002f50 <HAL_I2C_MspInit+0x84>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d12c      	bne.n	8002f48 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <HAL_I2C_MspInit+0x88>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a17      	ldr	r2, [pc, #92]	; (8002f54 <HAL_I2C_MspInit+0x88>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <HAL_I2C_MspInit+0x88>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002f0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f10:	2312      	movs	r3, #18
 8002f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f14:	2301      	movs	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	4619      	mov	r1, r3
 8002f26:	480c      	ldr	r0, [pc, #48]	; (8002f58 <HAL_I2C_MspInit+0x8c>)
 8002f28:	f003 fae6 	bl	80064f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_I2C_MspInit+0x88>)
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	4a07      	ldr	r2, [pc, #28]	; (8002f54 <HAL_I2C_MspInit+0x88>)
 8002f36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f3c:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <HAL_I2C_MspInit+0x88>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f48:	bf00      	nop
 8002f4a:	3728      	adds	r7, #40	; 0x28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40005800 	.word	0x40005800
 8002f54:	40023800 	.word	0x40023800
 8002f58:	40020400 	.word	0x40020400

08002f5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	; 0x30
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	60da      	str	r2, [r3, #12]
 8002f72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a4f      	ldr	r2, [pc, #316]	; (80030b8 <HAL_I2S_MspInit+0x15c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	f040 8097 	bne.w	80030ae <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f80:	2300      	movs	r3, #0
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	4b4d      	ldr	r3, [pc, #308]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	4a4c      	ldr	r2, [pc, #304]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002f90:	4b4a      	ldr	r3, [pc, #296]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	4b46      	ldr	r3, [pc, #280]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	4a45      	ldr	r2, [pc, #276]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fa6:	f043 0304 	orr.w	r3, r3, #4
 8002faa:	6313      	str	r3, [r2, #48]	; 0x30
 8002fac:	4b43      	ldr	r3, [pc, #268]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	4b3f      	ldr	r3, [pc, #252]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4a3e      	ldr	r2, [pc, #248]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fc2:	f043 0301 	orr.w	r3, r3, #1
 8002fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc8:	4b3c      	ldr	r3, [pc, #240]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	4b38      	ldr	r3, [pc, #224]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4a37      	ldr	r2, [pc, #220]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe4:	4b35      	ldr	r3, [pc, #212]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	4b31      	ldr	r3, [pc, #196]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff8:	4a30      	ldr	r2, [pc, #192]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8003000:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <HAL_I2S_MspInit+0x160>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 800300c:	2304      	movs	r3, #4
 800300e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 800301c:	2306      	movs	r3, #6
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 8003020:	f107 031c 	add.w	r3, r7, #28
 8003024:	4619      	mov	r1, r3
 8003026:	4826      	ldr	r0, [pc, #152]	; (80030c0 <HAL_I2S_MspInit+0x164>)
 8003028:	f003 fa66 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 800302c:	2308      	movs	r3, #8
 800302e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800303c:	2305      	movs	r3, #5
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 8003040:	f107 031c 	add.w	r3, r7, #28
 8003044:	4619      	mov	r1, r3
 8003046:	481e      	ldr	r0, [pc, #120]	; (80030c0 <HAL_I2S_MspInit+0x164>)
 8003048:	f003 fa56 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 800304c:	2308      	movs	r3, #8
 800304e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800305c:	2305      	movs	r3, #5
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	4619      	mov	r1, r3
 8003066:	4817      	ldr	r0, [pc, #92]	; (80030c4 <HAL_I2S_MspInit+0x168>)
 8003068:	f003 fa46 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 800306c:	2308      	movs	r3, #8
 800306e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800307c:	2305      	movs	r3, #5
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	4619      	mov	r1, r3
 8003086:	4810      	ldr	r0, [pc, #64]	; (80030c8 <HAL_I2S_MspInit+0x16c>)
 8003088:	f003 fa36 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 800308c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800309e:	2305      	movs	r3, #5
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80030a2:	f107 031c 	add.w	r3, r7, #28
 80030a6:	4619      	mov	r1, r3
 80030a8:	4808      	ldr	r0, [pc, #32]	; (80030cc <HAL_I2S_MspInit+0x170>)
 80030aa:	f003 fa25 	bl	80064f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030ae:	bf00      	nop
 80030b0:	3730      	adds	r7, #48	; 0x30
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40003800 	.word	0x40003800
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	40020400 	.word	0x40020400

080030d0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08e      	sub	sp, #56	; 0x38
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a56      	ldr	r2, [pc, #344]	; (8003248 <HAL_QSPI_MspInit+0x178>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	f040 80a6 	bne.w	8003240 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80030f4:	2300      	movs	r3, #0
 80030f6:	623b      	str	r3, [r7, #32]
 80030f8:	4b54      	ldr	r3, [pc, #336]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	4a53      	ldr	r2, [pc, #332]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	6393      	str	r3, [r2, #56]	; 0x38
 8003104:	4b51      	ldr	r3, [pc, #324]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	4b4d      	ldr	r3, [pc, #308]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a4c      	ldr	r2, [pc, #304]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	6313      	str	r3, [r2, #48]	; 0x30
 8003120:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f003 0310 	and.w	r3, r3, #16
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
 8003130:	4b46      	ldr	r3, [pc, #280]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	4a45      	ldr	r2, [pc, #276]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003136:	f043 0320 	orr.w	r3, r3, #32
 800313a:	6313      	str	r3, [r2, #48]	; 0x30
 800313c:	4b43      	ldr	r3, [pc, #268]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	61bb      	str	r3, [r7, #24]
 8003146:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003148:	2300      	movs	r3, #0
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	4b3f      	ldr	r3, [pc, #252]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 800314e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003150:	4a3e      	ldr	r2, [pc, #248]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	6313      	str	r3, [r2, #48]	; 0x30
 8003158:	4b3c      	ldr	r3, [pc, #240]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 800315a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
 8003168:	4b38      	ldr	r3, [pc, #224]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	4a37      	ldr	r2, [pc, #220]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 800316e:	f043 0308 	orr.w	r3, r3, #8
 8003172:	6313      	str	r3, [r2, #48]	; 0x30
 8003174:	4b35      	ldr	r3, [pc, #212]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	f003 0308 	and.w	r3, r3, #8
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	4b31      	ldr	r3, [pc, #196]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003188:	4a30      	ldr	r2, [pc, #192]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 800318a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800318e:	6313      	str	r3, [r2, #48]	; 0x30
 8003190:	4b2e      	ldr	r3, [pc, #184]	; (800324c <HAL_QSPI_MspInit+0x17c>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 800319c:	2304      	movs	r3, #4
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a0:	2302      	movs	r3, #2
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a8:	2303      	movs	r3, #3
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80031ac:	2309      	movs	r3, #9
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 80031b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b4:	4619      	mov	r1, r3
 80031b6:	4826      	ldr	r0, [pc, #152]	; (8003250 <HAL_QSPI_MspInit+0x180>)
 80031b8:	f003 f99e 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80031bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2302      	movs	r3, #2
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ca:	2303      	movs	r3, #3
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80031ce:	230a      	movs	r3, #10
 80031d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d6:	4619      	mov	r1, r3
 80031d8:	481e      	ldr	r0, [pc, #120]	; (8003254 <HAL_QSPI_MspInit+0x184>)
 80031da:	f003 f98d 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80031de:	2304      	movs	r3, #4
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ea:	2303      	movs	r3, #3
 80031ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80031ee:	2309      	movs	r3, #9
 80031f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80031f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031f6:	4619      	mov	r1, r3
 80031f8:	4817      	ldr	r0, [pc, #92]	; (8003258 <HAL_QSPI_MspInit+0x188>)
 80031fa:	f003 f97d 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80031fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003204:	2302      	movs	r3, #2
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003208:	2300      	movs	r3, #0
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320c:	2303      	movs	r3, #3
 800320e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8003210:	2309      	movs	r3, #9
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8003214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003218:	4619      	mov	r1, r3
 800321a:	4810      	ldr	r0, [pc, #64]	; (800325c <HAL_QSPI_MspInit+0x18c>)
 800321c:	f003 f96c 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8003220:	2340      	movs	r3, #64	; 0x40
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003230:	230a      	movs	r3, #10
 8003232:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8003234:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003238:	4619      	mov	r1, r3
 800323a:	4809      	ldr	r0, [pc, #36]	; (8003260 <HAL_QSPI_MspInit+0x190>)
 800323c:	f003 f95c 	bl	80064f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8003240:	bf00      	nop
 8003242:	3738      	adds	r7, #56	; 0x38
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	a0001000 	.word	0xa0001000
 800324c:	40023800 	.word	0x40023800
 8003250:	40021000 	.word	0x40021000
 8003254:	40021400 	.word	0x40021400
 8003258:	40020400 	.word	0x40020400
 800325c:	40020c00 	.word	0x40020c00
 8003260:	40021800 	.word	0x40021800

08003264 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b08a      	sub	sp, #40	; 0x28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326c:	f107 0314 	add.w	r3, r7, #20
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a28      	ldr	r2, [pc, #160]	; (8003324 <HAL_SD_MspInit+0xc0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d14a      	bne.n	800331c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	4b27      	ldr	r3, [pc, #156]	; (8003328 <HAL_SD_MspInit+0xc4>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	4a26      	ldr	r2, [pc, #152]	; (8003328 <HAL_SD_MspInit+0xc4>)
 8003290:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003294:	6453      	str	r3, [r2, #68]	; 0x44
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <HAL_SD_MspInit+0xc4>)
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a2:	2300      	movs	r3, #0
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <HAL_SD_MspInit+0xc4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_SD_MspInit+0xc4>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6313      	str	r3, [r2, #48]	; 0x30
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_SD_MspInit+0xc4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032be:	2300      	movs	r3, #0
 80032c0:	60bb      	str	r3, [r7, #8]
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <HAL_SD_MspInit+0xc4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_SD_MspInit+0xc4>)
 80032c8:	f043 0304 	orr.w	r3, r3, #4
 80032cc:	6313      	str	r3, [r2, #48]	; 0x30
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <HAL_SD_MspInit+0xc4>)
 80032d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	60bb      	str	r3, [r7, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032de:	2302      	movs	r3, #2
 80032e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e6:	2303      	movs	r3, #3
 80032e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032ea:	230c      	movs	r3, #12
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80032ee:	f107 0314 	add.w	r3, r7, #20
 80032f2:	4619      	mov	r1, r3
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <HAL_SD_MspInit+0xc8>)
 80032f6:	f003 f8ff 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80032fa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80032fe:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003300:	2302      	movs	r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003308:	2303      	movs	r3, #3
 800330a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800330c:	230c      	movs	r3, #12
 800330e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003310:	f107 0314 	add.w	r3, r7, #20
 8003314:	4619      	mov	r1, r3
 8003316:	4806      	ldr	r0, [pc, #24]	; (8003330 <HAL_SD_MspInit+0xcc>)
 8003318:	f003 f8ee 	bl	80064f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800331c:	bf00      	nop
 800331e:	3728      	adds	r7, #40	; 0x28
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40023800 	.word	0x40023800
 800332c:	40020000 	.word	0x40020000
 8003330:	40020800 	.word	0x40020800

08003334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <HAL_TIM_Base_MspInit+0x3c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10d      	bne.n	8003362 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b0a      	ldr	r3, [pc, #40]	; (8003374 <HAL_TIM_Base_MspInit+0x40>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_TIM_Base_MspInit+0x40>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6413      	str	r3, [r2, #64]	; 0x40
 8003356:	4b07      	ldr	r3, [pc, #28]	; (8003374 <HAL_TIM_Base_MspInit+0x40>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40000400 	.word	0x40000400
 8003374:	40023800 	.word	0x40023800

08003378 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003380:	f107 030c 	add.w	r3, r7, #12
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <HAL_TIM_MspPostInit+0x68>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d11d      	bne.n	80033d6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <HAL_TIM_MspPostInit+0x6c>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_TIM_MspPostInit+0x6c>)
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_TIM_MspPostInit+0x6c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80033b6:	2321      	movs	r3, #33	; 0x21
 80033b8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033c6:	2302      	movs	r3, #2
 80033c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ca:	f107 030c 	add.w	r3, r7, #12
 80033ce:	4619      	mov	r1, r3
 80033d0:	4805      	ldr	r0, [pc, #20]	; (80033e8 <HAL_TIM_MspPostInit+0x70>)
 80033d2:	f003 f891 	bl	80064f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80033d6:	bf00      	nop
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020400 	.word	0x40020400

080033ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08e      	sub	sp, #56	; 0x38
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	60da      	str	r2, [r3, #12]
 8003402:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a67      	ldr	r2, [pc, #412]	; (80035a8 <HAL_UART_MspInit+0x1bc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d163      	bne.n	80034d6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	623b      	str	r3, [r7, #32]
 8003412:	4b66      	ldr	r3, [pc, #408]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4a65      	ldr	r2, [pc, #404]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
 800341e:	4b63      	ldr	r3, [pc, #396]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003426:	623b      	str	r3, [r7, #32]
 8003428:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a5e      	ldr	r2, [pc, #376]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003434:	f043 0320 	orr.w	r3, r3, #32
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b5c      	ldr	r3, [pc, #368]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003446:	23c0      	movs	r3, #192	; 0xc0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800344e:	2301      	movs	r3, #1
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003452:	2303      	movs	r3, #3
 8003454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003456:	2308      	movs	r3, #8
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800345a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800345e:	4619      	mov	r1, r3
 8003460:	4853      	ldr	r0, [pc, #332]	; (80035b0 <HAL_UART_MspInit+0x1c4>)
 8003462:	f003 f849 	bl	80064f8 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8003466:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 8003468:	4a53      	ldr	r2, [pc, #332]	; (80035b8 <HAL_UART_MspInit+0x1cc>)
 800346a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800346c:	4b51      	ldr	r3, [pc, #324]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 800346e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003472:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003474:	4b4f      	ldr	r3, [pc, #316]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 8003476:	2200      	movs	r2, #0
 8003478:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800347a:	4b4e      	ldr	r3, [pc, #312]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 800347c:	2200      	movs	r2, #0
 800347e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003480:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 8003482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003486:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003488:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 800348a:	2200      	movs	r2, #0
 800348c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800348e:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 8003490:	2200      	movs	r2, #0
 8003492:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8003494:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 8003496:	2200      	movs	r2, #0
 8003498:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800349a:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 800349c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034a0:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034a2:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80034a8:	4842      	ldr	r0, [pc, #264]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 80034aa:	f002 fbbb 	bl	8005c24 <HAL_DMA_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80034b4:	f7ff fab8 	bl	8002a28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a3e      	ldr	r2, [pc, #248]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34
 80034be:	4a3d      	ldr	r2, [pc, #244]	; (80035b4 <HAL_UART_MspInit+0x1c8>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	2100      	movs	r1, #0
 80034c8:	2052      	movs	r0, #82	; 0x52
 80034ca:	f002 f95f 	bl	800578c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80034ce:	2052      	movs	r0, #82	; 0x52
 80034d0:	f002 f978 	bl	80057c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80034d4:	e064      	b.n	80035a0 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==UART10)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a38      	ldr	r2, [pc, #224]	; (80035bc <HAL_UART_MspInit+0x1d0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d12d      	bne.n	800353c <HAL_UART_MspInit+0x150>
    __HAL_RCC_UART10_CLK_ENABLE();
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	4a30      	ldr	r2, [pc, #192]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 80034ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ee:	6453      	str	r3, [r2, #68]	; 0x44
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	4a29      	ldr	r2, [pc, #164]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800350a:	6313      	str	r3, [r2, #48]	; 0x30
 800350c:	4b27      	ldr	r3, [pc, #156]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8003518:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351e:	2302      	movs	r3, #2
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003522:	2301      	movs	r3, #1
 8003524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003526:	2303      	movs	r3, #3
 8003528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 800352a:	230b      	movs	r3, #11
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800352e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003532:	4619      	mov	r1, r3
 8003534:	4822      	ldr	r0, [pc, #136]	; (80035c0 <HAL_UART_MspInit+0x1d4>)
 8003536:	f002 ffdf 	bl	80064f8 <HAL_GPIO_Init>
}
 800353a:	e031      	b.n	80035a0 <HAL_UART_MspInit+0x1b4>
  else if(huart->Instance==USART6)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a20      	ldr	r2, [pc, #128]	; (80035c4 <HAL_UART_MspInit+0x1d8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d12c      	bne.n	80035a0 <HAL_UART_MspInit+0x1b4>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	4b18      	ldr	r3, [pc, #96]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a17      	ldr	r2, [pc, #92]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003550:	f043 0320 	orr.w	r3, r3, #32
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b15      	ldr	r3, [pc, #84]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	613b      	str	r3, [r7, #16]
 8003560:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a10      	ldr	r2, [pc, #64]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 800356c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <HAL_UART_MspInit+0x1c0>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 800357e:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003584:	2302      	movs	r3, #2
 8003586:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003588:	2300      	movs	r3, #0
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358c:	2303      	movs	r3, #3
 800358e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003590:	2308      	movs	r3, #8
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003598:	4619      	mov	r1, r3
 800359a:	4809      	ldr	r0, [pc, #36]	; (80035c0 <HAL_UART_MspInit+0x1d4>)
 800359c:	f002 ffac 	bl	80064f8 <HAL_GPIO_Init>
}
 80035a0:	bf00      	nop
 80035a2:	3738      	adds	r7, #56	; 0x38
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40007800 	.word	0x40007800
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40021400 	.word	0x40021400
 80035b4:	20004dc4 	.word	0x20004dc4
 80035b8:	40026058 	.word	0x40026058
 80035bc:	40011c00 	.word	0x40011c00
 80035c0:	40021800 	.word	0x40021800
 80035c4:	40011400 	.word	0x40011400

080035c8 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80035ce:	1d3b      	adds	r3, r7, #4
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80035dc:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <HAL_FSMC_MspInit+0xc8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d151      	bne.n	8003688 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80035e4:	4b2a      	ldr	r3, [pc, #168]	; (8003690 <HAL_FSMC_MspInit+0xc8>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4b29      	ldr	r3, [pc, #164]	; (8003694 <HAL_FSMC_MspInit+0xcc>)
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	4a28      	ldr	r2, [pc, #160]	; (8003694 <HAL_FSMC_MspInit+0xcc>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6393      	str	r3, [r2, #56]	; 0x38
 80035fa:	4b26      	ldr	r3, [pc, #152]	; (8003694 <HAL_FSMC_MspInit+0xcc>)
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8003606:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800360a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003610:	2300      	movs	r3, #0
 8003612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003614:	2303      	movs	r3, #3
 8003616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003618:	230c      	movs	r3, #12
 800361a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800361c:	1d3b      	adds	r3, r7, #4
 800361e:	4619      	mov	r1, r3
 8003620:	481d      	ldr	r0, [pc, #116]	; (8003698 <HAL_FSMC_MspInit+0xd0>)
 8003622:	f002 ff69 	bl	80064f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8003626:	f240 433f 	movw	r3, #1087	; 0x43f
 800362a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362c:	2302      	movs	r3, #2
 800362e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003634:	2303      	movs	r3, #3
 8003636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003638:	230c      	movs	r3, #12
 800363a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800363c:	1d3b      	adds	r3, r7, #4
 800363e:	4619      	mov	r1, r3
 8003640:	4816      	ldr	r0, [pc, #88]	; (800369c <HAL_FSMC_MspInit+0xd4>)
 8003642:	f002 ff59 	bl	80064f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8003646:	f64f 7383 	movw	r3, #65411	; 0xff83
 800364a:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364c:	2302      	movs	r3, #2
 800364e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003654:	2303      	movs	r3, #3
 8003656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003658:	230c      	movs	r3, #12
 800365a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800365c:	1d3b      	adds	r3, r7, #4
 800365e:	4619      	mov	r1, r3
 8003660:	480f      	ldr	r0, [pc, #60]	; (80036a0 <HAL_FSMC_MspInit+0xd8>)
 8003662:	f002 ff49 	bl	80064f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8003666:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 800366a:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366c:	2302      	movs	r3, #2
 800366e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003674:	2303      	movs	r3, #3
 8003676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003678:	230c      	movs	r3, #12
 800367a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	4619      	mov	r1, r3
 8003680:	4808      	ldr	r0, [pc, #32]	; (80036a4 <HAL_FSMC_MspInit+0xdc>)
 8003682:	f002 ff39 	bl	80064f8 <HAL_GPIO_Init>
 8003686:	e000      	b.n	800368a <HAL_FSMC_MspInit+0xc2>
    return;
 8003688:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	200001ac 	.word	0x200001ac
 8003694:	40023800 	.word	0x40023800
 8003698:	40021400 	.word	0x40021400
 800369c:	40021800 	.word	0x40021800
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40020c00 	.word	0x40020c00

080036a8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80036b0:	f7ff ff8a 	bl	80035c8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08c      	sub	sp, #48	; 0x30
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80036c8:	2300      	movs	r3, #0
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80036cc:	2200      	movs	r2, #0
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	2036      	movs	r0, #54	; 0x36
 80036d2:	f002 f85b 	bl	800578c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036d6:	2036      	movs	r0, #54	; 0x36
 80036d8:	f002 f874 	bl	80057c4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	4b1e      	ldr	r3, [pc, #120]	; (800375c <HAL_InitTick+0xa0>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_InitTick+0xa0>)
 80036e6:	f043 0310 	orr.w	r3, r3, #16
 80036ea:	6413      	str	r3, [r2, #64]	; 0x40
 80036ec:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_InitTick+0xa0>)
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80036f8:	f107 0210 	add.w	r2, r7, #16
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f005 fe1a 	bl	800933c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003708:	f005 fdf0 	bl	80092ec <HAL_RCC_GetPCLK1Freq>
 800370c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800370e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003710:	4a13      	ldr	r2, [pc, #76]	; (8003760 <HAL_InitTick+0xa4>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9b      	lsrs	r3, r3, #18
 8003718:	3b01      	subs	r3, #1
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <HAL_InitTick+0xa8>)
 800371e:	4a12      	ldr	r2, [pc, #72]	; (8003768 <HAL_InitTick+0xac>)
 8003720:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003722:	4b10      	ldr	r3, [pc, #64]	; (8003764 <HAL_InitTick+0xa8>)
 8003724:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003728:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800372a:	4a0e      	ldr	r2, [pc, #56]	; (8003764 <HAL_InitTick+0xa8>)
 800372c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_InitTick+0xa8>)
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003736:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_InitTick+0xa8>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800373c:	4809      	ldr	r0, [pc, #36]	; (8003764 <HAL_InitTick+0xa8>)
 800373e:	f007 f9fd 	bl	800ab3c <HAL_TIM_Base_Init>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003748:	4806      	ldr	r0, [pc, #24]	; (8003764 <HAL_InitTick+0xa8>)
 800374a:	f007 fa22 	bl	800ab92 <HAL_TIM_Base_Start_IT>
 800374e:	4603      	mov	r3, r0
 8003750:	e000      	b.n	8003754 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	3730      	adds	r7, #48	; 0x30
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40023800 	.word	0x40023800
 8003760:	431bde83 	.word	0x431bde83
 8003764:	200050ac 	.word	0x200050ac
 8003768:	40001000 	.word	0x40001000

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800377a:	b480      	push	{r7}
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800377e:	e7fe      	b.n	800377e <HardFault_Handler+0x4>

08003780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003784:	e7fe      	b.n	8003784 <MemManage_Handler+0x4>

08003786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800378a:	e7fe      	b.n	800378a <BusFault_Handler+0x4>

0800378c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003790:	e7fe      	b.n	8003790 <UsageFault_Handler+0x4>

08003792 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003792:	b480      	push	{r7}
 8003794:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <DMA1_Stream3_IRQHandler+0x10>)
 80037a6:	f002 fb65 	bl	8005e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20004dc4 	.word	0x20004dc4

080037b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80037b8:	4803      	ldr	r0, [pc, #12]	; (80037c8 <TIM6_DAC_IRQHandler+0x14>)
 80037ba:	f002 f833 	bl	8005824 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80037be:	4803      	ldr	r0, [pc, #12]	; (80037cc <TIM6_DAC_IRQHandler+0x18>)
 80037c0:	f007 fa7e 	bl	800acc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037c4:	bf00      	nop
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20004e28 	.word	0x20004e28
 80037cc:	200050ac 	.word	0x200050ac

080037d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80037d4:	4802      	ldr	r0, [pc, #8]	; (80037e0 <OTG_FS_IRQHandler+0x10>)
 80037d6:	f003 fae5 	bl	8006da4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037da:	bf00      	nop
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20005544 	.word	0x20005544

080037e4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <UART7_IRQHandler+0x10>)
 80037ea:	f008 f985 	bl	800baf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20004b5c 	.word	0x20004b5c

080037f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <_sbrk+0x5c>)
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <_sbrk+0x60>)
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <_sbrk+0x64>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <_sbrk+0x64>)
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <_sbrk+0x68>)
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800381a:	4b10      	ldr	r3, [pc, #64]	; (800385c <_sbrk+0x64>)
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	429a      	cmp	r2, r3
 8003826:	d207      	bcs.n	8003838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003828:	f010 ff3a 	bl	80146a0 <__errno>
 800382c:	4602      	mov	r2, r0
 800382e:	230c      	movs	r3, #12
 8003830:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e009      	b.n	800384c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <_sbrk+0x64>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800383e:	4b07      	ldr	r3, [pc, #28]	; (800385c <_sbrk+0x64>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	4a05      	ldr	r2, [pc, #20]	; (800385c <_sbrk+0x64>)
 8003848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	20050000 	.word	0x20050000
 8003858:	00000400 	.word	0x00000400
 800385c:	200001b0 	.word	0x200001b0
 8003860:	20005810 	.word	0x20005810

08003864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <SystemInit+0x28>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <SystemInit+0x28>)
 8003870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <SystemInit+0x28>)
 800387a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800387e:	609a      	str	r2, [r3, #8]
#endif
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000ed00 	.word	0xe000ed00

08003890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003894:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003896:	e003      	b.n	80038a0 <LoopCopyDataInit>

08003898 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800389a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800389c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800389e:	3104      	adds	r1, #4

080038a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038a0:	480b      	ldr	r0, [pc, #44]	; (80038d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80038a8:	d3f6      	bcc.n	8003898 <CopyDataInit>
  ldr  r2, =_sbss
 80038aa:	4a0b      	ldr	r2, [pc, #44]	; (80038d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80038ac:	e002      	b.n	80038b4 <LoopFillZerobss>

080038ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80038ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80038b0:	f842 3b04 	str.w	r3, [r2], #4

080038b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80038b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80038b8:	d3f9      	bcc.n	80038ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038ba:	f7ff ffd3 	bl	8003864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038be:	f010 fef5 	bl	80146ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038c2:	f7fd fd25 	bl	8001310 <main>
  bx  lr    
 80038c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80038c8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80038cc:	08018120 	.word	0x08018120
  ldr  r0, =_sdata
 80038d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038d4:	20000138 	.word	0x20000138
  ldr  r2, =_sbss
 80038d8:	20000138 	.word	0x20000138
  ldr  r3, = _ebss
 80038dc:	2000580c 	.word	0x2000580c

080038e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e0:	e7fe      	b.n	80038e0 <ADC_IRQHandler>

080038e2 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80038e8:	f000 fd6e 	bl	80043c8 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80038ec:	2200      	movs	r2, #0
 80038ee:	2100      	movs	r1, #0
 80038f0:	2010      	movs	r0, #16
 80038f2:	f000 f9e4 	bl	8003cbe <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80038f6:	200a      	movs	r0, #10
 80038f8:	f000 fd8d 	bl	8004416 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80038fc:	2200      	movs	r2, #0
 80038fe:	2100      	movs	r1, #0
 8003900:	2001      	movs	r0, #1
 8003902:	f000 f9dc 	bl	8003cbe <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8003906:	20c8      	movs	r0, #200	; 0xc8
 8003908:	f000 fd85 	bl	8004416 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 800390c:	2200      	movs	r2, #0
 800390e:	2100      	movs	r1, #0
 8003910:	2011      	movs	r0, #17
 8003912:	f000 f9d4 	bl	8003cbe <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8003916:	2078      	movs	r0, #120	; 0x78
 8003918:	f000 fd7d 	bl	8004416 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 800391c:	2300      	movs	r3, #0
 800391e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8003920:	463b      	mov	r3, r7
 8003922:	2201      	movs	r2, #1
 8003924:	4619      	mov	r1, r3
 8003926:	2036      	movs	r0, #54	; 0x36
 8003928:	f000 f9c9 	bl	8003cbe <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 800392c:	2305      	movs	r3, #5
 800392e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8003930:	463b      	mov	r3, r7
 8003932:	2201      	movs	r2, #1
 8003934:	4619      	mov	r1, r3
 8003936:	203a      	movs	r0, #58	; 0x3a
 8003938:	f000 f9c1 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 800393c:	2200      	movs	r2, #0
 800393e:	2100      	movs	r1, #0
 8003940:	2021      	movs	r0, #33	; 0x21
 8003942:	f000 f9bc 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8003946:	2300      	movs	r3, #0
 8003948:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800394a:	2300      	movs	r3, #0
 800394c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800394e:	2300      	movs	r3, #0
 8003950:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8003952:	23ef      	movs	r3, #239	; 0xef
 8003954:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8003956:	463b      	mov	r3, r7
 8003958:	2204      	movs	r2, #4
 800395a:	4619      	mov	r1, r3
 800395c:	202a      	movs	r0, #42	; 0x2a
 800395e:	f000 f9ae 	bl	8003cbe <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8003962:	2300      	movs	r3, #0
 8003964:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8003966:	2300      	movs	r3, #0
 8003968:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800396a:	2300      	movs	r3, #0
 800396c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800396e:	23ef      	movs	r3, #239	; 0xef
 8003970:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8003972:	463b      	mov	r3, r7
 8003974:	2204      	movs	r2, #4
 8003976:	4619      	mov	r1, r3
 8003978:	202b      	movs	r0, #43	; 0x2b
 800397a:	f000 f9a0 	bl	8003cbe <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800397e:	230c      	movs	r3, #12
 8003980:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8003982:	230c      	movs	r3, #12
 8003984:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 800398a:	2333      	movs	r3, #51	; 0x33
 800398c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800398e:	2333      	movs	r3, #51	; 0x33
 8003990:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8003992:	463b      	mov	r3, r7
 8003994:	2205      	movs	r2, #5
 8003996:	4619      	mov	r1, r3
 8003998:	20b2      	movs	r0, #178	; 0xb2
 800399a:	f000 f990 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800399e:	2335      	movs	r3, #53	; 0x35
 80039a0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80039a2:	463b      	mov	r3, r7
 80039a4:	2201      	movs	r2, #1
 80039a6:	4619      	mov	r1, r3
 80039a8:	20b7      	movs	r0, #183	; 0xb7
 80039aa:	f000 f988 	bl	8003cbe <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 80039ae:	231f      	movs	r3, #31
 80039b0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80039b2:	463b      	mov	r3, r7
 80039b4:	2201      	movs	r2, #1
 80039b6:	4619      	mov	r1, r3
 80039b8:	20bb      	movs	r0, #187	; 0xbb
 80039ba:	f000 f980 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 80039be:	232c      	movs	r3, #44	; 0x2c
 80039c0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80039c2:	463b      	mov	r3, r7
 80039c4:	2201      	movs	r2, #1
 80039c6:	4619      	mov	r1, r3
 80039c8:	20c0      	movs	r0, #192	; 0xc0
 80039ca:	f000 f978 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80039ce:	2301      	movs	r3, #1
 80039d0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80039d2:	23c3      	movs	r3, #195	; 0xc3
 80039d4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80039d6:	463b      	mov	r3, r7
 80039d8:	2202      	movs	r2, #2
 80039da:	4619      	mov	r1, r3
 80039dc:	20c2      	movs	r0, #194	; 0xc2
 80039de:	f000 f96e 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80039e2:	2320      	movs	r3, #32
 80039e4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80039e6:	463b      	mov	r3, r7
 80039e8:	2201      	movs	r2, #1
 80039ea:	4619      	mov	r1, r3
 80039ec:	20c4      	movs	r0, #196	; 0xc4
 80039ee:	f000 f966 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 80039f2:	230f      	movs	r3, #15
 80039f4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80039f6:	463b      	mov	r3, r7
 80039f8:	2201      	movs	r2, #1
 80039fa:	4619      	mov	r1, r3
 80039fc:	20c6      	movs	r0, #198	; 0xc6
 80039fe:	f000 f95e 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8003a02:	23a4      	movs	r3, #164	; 0xa4
 8003a04:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8003a06:	23a1      	movs	r3, #161	; 0xa1
 8003a08:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8003a0a:	463b      	mov	r3, r7
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	4619      	mov	r1, r3
 8003a10:	20d0      	movs	r0, #208	; 0xd0
 8003a12:	f000 f954 	bl	8003cbe <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8003a16:	23d0      	movs	r3, #208	; 0xd0
 8003a18:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8003a1e:	2311      	movs	r3, #17
 8003a20:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8003a22:	2308      	movs	r3, #8
 8003a24:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8003a26:	230c      	movs	r3, #12
 8003a28:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8003a2a:	2315      	movs	r3, #21
 8003a2c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8003a2e:	2339      	movs	r3, #57	; 0x39
 8003a30:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8003a32:	2333      	movs	r3, #51	; 0x33
 8003a34:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8003a36:	2350      	movs	r3, #80	; 0x50
 8003a38:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8003a3a:	2336      	movs	r3, #54	; 0x36
 8003a3c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8003a3e:	2313      	movs	r3, #19
 8003a40:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8003a42:	2314      	movs	r3, #20
 8003a44:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8003a46:	2329      	movs	r3, #41	; 0x29
 8003a48:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8003a4a:	232d      	movs	r3, #45	; 0x2d
 8003a4c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8003a4e:	463b      	mov	r3, r7
 8003a50:	220e      	movs	r2, #14
 8003a52:	4619      	mov	r1, r3
 8003a54:	20e0      	movs	r0, #224	; 0xe0
 8003a56:	f000 f932 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8003a5a:	23d0      	movs	r3, #208	; 0xd0
 8003a5c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8003a5e:	2308      	movs	r3, #8
 8003a60:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8003a62:	2310      	movs	r3, #16
 8003a64:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8003a66:	2308      	movs	r3, #8
 8003a68:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8003a6a:	2306      	movs	r3, #6
 8003a6c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8003a6e:	2306      	movs	r3, #6
 8003a70:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8003a72:	2339      	movs	r3, #57	; 0x39
 8003a74:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8003a76:	2344      	movs	r3, #68	; 0x44
 8003a78:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8003a7a:	2351      	movs	r3, #81	; 0x51
 8003a7c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8003a7e:	230b      	movs	r3, #11
 8003a80:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8003a82:	2316      	movs	r3, #22
 8003a84:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8003a86:	2314      	movs	r3, #20
 8003a88:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8003a8a:	232f      	movs	r3, #47	; 0x2f
 8003a8c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8003a8e:	2331      	movs	r3, #49	; 0x31
 8003a90:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8003a92:	463b      	mov	r3, r7
 8003a94:	220e      	movs	r2, #14
 8003a96:	4619      	mov	r1, r3
 8003a98:	20e1      	movs	r0, #225	; 0xe1
 8003a9a:	f000 f910 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8003a9e:	f000 f847 	bl	8003b30 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8003aa6:	463b      	mov	r3, r7
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	4619      	mov	r1, r3
 8003aac:	2035      	movs	r0, #53	; 0x35
 8003aae:	f000 f906 	bl	8003cbe <ST7789H2_WriteReg>

}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8003ac8:	2300      	movs	r3, #0
 8003aca:	723b      	strb	r3, [r7, #8]
 8003acc:	e025      	b.n	8003b1a <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d120      	bne.n	8003b16 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8003adc:	2301      	movs	r3, #1
 8003ade:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8003ae0:	23f0      	movs	r3, #240	; 0xf0
 8003ae2:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8003ae8:	2300      	movs	r3, #0
 8003aea:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8003aec:	f107 0308 	add.w	r3, r7, #8
 8003af0:	2206      	movs	r2, #6
 8003af2:	4619      	mov	r1, r3
 8003af4:	2033      	movs	r0, #51	; 0x33
 8003af6:	f000 f8e2 	bl	8003cbe <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8003afa:	2300      	movs	r3, #0
 8003afc:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8003afe:	2350      	movs	r3, #80	; 0x50
 8003b00:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	2202      	movs	r2, #2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	2037      	movs	r0, #55	; 0x37
 8003b0c:	f000 f8d7 	bl	8003cbe <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8003b10:	23c0      	movs	r3, #192	; 0xc0
 8003b12:	723b      	strb	r3, [r7, #8]
 8003b14:	e001      	b.n	8003b1a <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8003b16:	2360      	movs	r3, #96	; 0x60
 8003b18:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8003b1a:	f107 0308 	add.w	r3, r7, #8
 8003b1e:	2201      	movs	r2, #1
 8003b20:	4619      	mov	r1, r3
 8003b22:	2036      	movs	r0, #54	; 0x36
 8003b24:	f000 f8cb 	bl	8003cbe <ST7789H2_WriteReg>
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8003b34:	2200      	movs	r2, #0
 8003b36:	2100      	movs	r1, #0
 8003b38:	2029      	movs	r0, #41	; 0x29
 8003b3a:	f000 f8c0 	bl	8003cbe <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	2011      	movs	r0, #17
 8003b44:	f000 f8bb 	bl	8003cbe <ST7789H2_WriteReg>
}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8003b52:	23fe      	movs	r3, #254	; 0xfe
 8003b54:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8003b56:	1d3b      	adds	r3, r7, #4
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	20bd      	movs	r0, #189	; 0xbd
 8003b5e:	f000 f8ae 	bl	8003cbe <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8003b62:	2200      	movs	r2, #0
 8003b64:	2100      	movs	r1, #0
 8003b66:	2010      	movs	r0, #16
 8003b68:	f000 f8a9 	bl	8003cbe <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8003b6c:	200a      	movs	r0, #10
 8003b6e:	f000 fc52 	bl	8004416 <LCD_IO_Delay>
}
 8003b72:	bf00      	nop
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8003b7e:	23f0      	movs	r3, #240	; 0xf0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8003b8e:	23f0      	movs	r3, #240	; 0xf0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8003b9e:	f000 fc13 	bl	80043c8 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 8003ba2:	2004      	movs	r0, #4
 8003ba4:	f000 f8ad 	bl	8003d02 <ST7789H2_ReadReg>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	b29b      	uxth	r3, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	460a      	mov	r2, r1
 8003bba:	80fb      	strh	r3, [r7, #6]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3b11      	subs	r3, #17
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	2204      	movs	r2, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	202a      	movs	r0, #42	; 0x2a
 8003be2:	f000 f86c 	bl	8003cbe <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8003be6:	2300      	movs	r3, #0
 8003be8:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8003bea:	88bb      	ldrh	r3, [r7, #4]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8003bf4:	88bb      	ldrh	r3, [r7, #4]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3b11      	subs	r3, #17
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	2204      	movs	r2, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	202b      	movs	r0, #43	; 0x2b
 8003c08:	f000 f859 	bl	8003cbe <ST7789H2_WriteReg>
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	80fb      	strh	r3, [r7, #6]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	80bb      	strh	r3, [r7, #4]
 8003c22:	4613      	mov	r3, r2
 8003c24:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003c26:	88ba      	ldrh	r2, [r7, #4]
 8003c28:	88fb      	ldrh	r3, [r7, #6]
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff ffbf 	bl	8003bb0 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003c32:	2200      	movs	r2, #0
 8003c34:	2100      	movs	r1, #0
 8003c36:	202c      	movs	r0, #44	; 0x2c
 8003c38:	f000 f841 	bl	8003cbe <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 8003c3c:	887b      	ldrh	r3, [r7, #2]
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fbc8 	bl	80043d4 <LCD_IO_WriteData>
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	460a      	mov	r2, r1
 8003c56:	80fb      	strh	r3, [r7, #6]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003c5c:	88ba      	ldrh	r2, [r7, #4]
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff ffa4 	bl	8003bb0 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8003c68:	88ba      	ldrh	r2, [r7, #4]
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f9bd 	bl	8003fee <ST7789H2_ReadPixel_rgb888>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	733a      	strb	r2, [r7, #12]
 8003c7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003c7e:	737a      	strb	r2, [r7, #13]
 8003c80:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003c84:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8003c86:	7b3b      	ldrb	r3, [r7, #12]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8003c8c:	7b7b      	ldrb	r3, [r7, #13]
 8003c8e:	089b      	lsrs	r3, r3, #2
 8003c90:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 8003c92:	7bbb      	ldrb	r3, [r7, #14]
 8003c94:	08db      	lsrs	r3, r3, #3
 8003c96:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	02db      	lsls	r3, r3, #11
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	7dbb      	ldrb	r3, [r7, #22]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	015b      	lsls	r3, r3, #5
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4413      	add	r3, r2
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	7d7b      	ldrb	r3, [r7, #21]
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8003cb4:	8a7b      	ldrh	r3, [r7, #18]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	6039      	str	r1, [r7, #0]
 8003cc8:	71fb      	strb	r3, [r7, #7]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fb8c 	bl	80043ee <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73fb      	strb	r3, [r7, #15]
 8003cda:	e00a      	b.n	8003cf2 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fb74 	bl	80043d4 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
 8003cf2:	7bfa      	ldrb	r2, [r7, #15]
 8003cf4:	79bb      	ldrb	r3, [r7, #6]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3f0      	bcc.n	8003cdc <ST7789H2_WriteReg+0x1e>
  }
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fb6d 	bl	80043ee <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8003d14:	f000 fb78 	bl	8004408 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8003d18:	f000 fb76 	bl	8004408 <LCD_IO_ReadData>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	b2db      	uxtb	r3, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003d28:	b490      	push	{r4, r7}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4604      	mov	r4, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	4611      	mov	r1, r2
 8003d34:	461a      	mov	r2, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	80fb      	strh	r3, [r7, #6]
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	80bb      	strh	r3, [r7, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	807b      	strh	r3, [r7, #2]
 8003d42:	4613      	mov	r3, r2
 8003d44:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	2bef      	cmp	r3, #239	; 0xef
 8003d4a:	d803      	bhi.n	8003d54 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <ST7789H2_SetDisplayWindow+0x94>)
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	8013      	strh	r3, [r2, #0]
 8003d52:	e002      	b.n	8003d5a <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8003d54:	4b19      	ldr	r3, [pc, #100]	; (8003dbc <ST7789H2_SetDisplayWindow+0x94>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 8003d5a:	88bb      	ldrh	r3, [r7, #4]
 8003d5c:	2bef      	cmp	r3, #239	; 0xef
 8003d5e:	d803      	bhi.n	8003d68 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8003d60:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <ST7789H2_SetDisplayWindow+0x98>)
 8003d62:	88bb      	ldrh	r3, [r7, #4]
 8003d64:	8013      	strh	r3, [r2, #0]
 8003d66:	e002      	b.n	8003d6e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8003d68:	4b15      	ldr	r3, [pc, #84]	; (8003dc0 <ST7789H2_SetDisplayWindow+0x98>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8003d6e:	887a      	ldrh	r2, [r7, #2]
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	4413      	add	r3, r2
 8003d74:	2bf0      	cmp	r3, #240	; 0xf0
 8003d76:	dc08      	bgt.n	8003d8a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8003d78:	887a      	ldrh	r2, [r7, #2]
 8003d7a:	88fb      	ldrh	r3, [r7, #6]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <ST7789H2_SetDisplayWindow+0x9c>)
 8003d86:	801a      	strh	r2, [r3, #0]
 8003d88:	e002      	b.n	8003d90 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <ST7789H2_SetDisplayWindow+0x9c>)
 8003d8c:	22ef      	movs	r2, #239	; 0xef
 8003d8e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8003d90:	883a      	ldrh	r2, [r7, #0]
 8003d92:	88bb      	ldrh	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	2bf0      	cmp	r3, #240	; 0xf0
 8003d98:	dc08      	bgt.n	8003dac <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8003d9a:	883a      	ldrh	r2, [r7, #0]
 8003d9c:	88bb      	ldrh	r3, [r7, #4]
 8003d9e:	4413      	add	r3, r2
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <ST7789H2_SetDisplayWindow+0xa0>)
 8003da8:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8003daa:	e002      	b.n	8003db2 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <ST7789H2_SetDisplayWindow+0xa0>)
 8003dae:	22ef      	movs	r2, #239	; 0xef
 8003db0:	801a      	strh	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc90      	pop	{r4, r7}
 8003dba:	4770      	bx	lr
 8003dbc:	200001b4 	.word	0x200001b4
 8003dc0:	200001b6 	.word	0x200001b6
 8003dc4:	20000084 	.word	0x20000084
 8003dc8:	20000086 	.word	0x20000086

08003dcc <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003dcc:	b590      	push	{r4, r7, lr}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	4608      	mov	r0, r1
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	461a      	mov	r2, r3
 8003dda:	4623      	mov	r3, r4
 8003ddc:	80fb      	strh	r3, [r7, #6]
 8003dde:	4603      	mov	r3, r0
 8003de0:	80bb      	strh	r3, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	807b      	strh	r3, [r7, #2]
 8003de6:	4613      	mov	r3, r2
 8003de8:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8003dee:	887a      	ldrh	r2, [r7, #2]
 8003df0:	88bb      	ldrh	r3, [r7, #4]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fedb 	bl	8003bb0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	202c      	movs	r0, #44	; 0x2c
 8003e00:	f7ff ff5d 	bl	8003cbe <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	81fb      	strh	r3, [r7, #14]
 8003e08:	e006      	b.n	8003e18 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fae1 	bl	80043d4 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8003e12:	89fb      	ldrh	r3, [r7, #14]
 8003e14:	3301      	adds	r3, #1
 8003e16:	81fb      	strh	r3, [r7, #14]
 8003e18:	89fa      	ldrh	r2, [r7, #14]
 8003e1a:	883b      	ldrh	r3, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3f4      	bcc.n	8003e0a <ST7789H2_DrawHLine+0x3e>
  }  
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd90      	pop	{r4, r7, pc}

08003e28 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4604      	mov	r4, r0
 8003e30:	4608      	mov	r0, r1
 8003e32:	4611      	mov	r1, r2
 8003e34:	461a      	mov	r2, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	80fb      	strh	r3, [r7, #6]
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	80bb      	strh	r3, [r7, #4]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	807b      	strh	r3, [r7, #2]
 8003e42:	4613      	mov	r3, r2
 8003e44:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003e4a:	887a      	ldrh	r2, [r7, #2]
 8003e4c:	88bb      	ldrh	r3, [r7, #4]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fead 	bl	8003bb0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8003e56:	2200      	movs	r2, #0
 8003e58:	2100      	movs	r1, #0
 8003e5a:	202c      	movs	r0, #44	; 0x2c
 8003e5c:	f7ff ff2f 	bl	8003cbe <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8003e60:	2300      	movs	r3, #0
 8003e62:	81fb      	strh	r3, [r7, #14]
 8003e64:	e00b      	b.n	8003e7e <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	89fb      	ldrh	r3, [r7, #14]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	b299      	uxth	r1, r3
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	88bb      	ldrh	r3, [r7, #4]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fece 	bl	8003c14 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8003e78:	89fb      	ldrh	r3, [r7, #14]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	81fb      	strh	r3, [r7, #14]
 8003e7e:	89fa      	ldrh	r2, [r7, #14]
 8003e80:	883b      	ldrh	r3, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d3ef      	bcc.n	8003e66 <ST7789H2_DrawVLine+0x3e>
  }
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd90      	pop	{r4, r7, pc}
	...

08003e90 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b088      	sub	sp, #32
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	603a      	str	r2, [r7, #0]
 8003e9a:	80fb      	strh	r3, [r7, #6]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <ST7789H2_DrawBitmap+0xdc>)
 8003eae:	881a      	ldrh	r2, [r3, #0]
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <ST7789H2_DrawBitmap+0xe0>)
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3301      	adds	r3, #1
 8003eba:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8003ebc:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <ST7789H2_DrawBitmap+0xe4>)
 8003ebe:	881a      	ldrh	r2, [r3, #0]
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <ST7789H2_DrawBitmap+0xe8>)
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	3302      	adds	r3, #2
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	330a      	adds	r3, #10
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	461a      	mov	r2, r3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	4413      	add	r3, r2
 8003f14:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003f16:	88ba      	ldrh	r2, [r7, #4]
 8003f18:	89bb      	ldrh	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	e01d      	b.n	8003f5c <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff fe3f 	bl	8003bb0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b299      	uxth	r1, r3
 8003f3a:	89fb      	ldrh	r3, [r7, #14]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	4413      	add	r3, r2
 8003f48:	89fa      	ldrh	r2, [r7, #14]
 8003f4a:	88f8      	ldrh	r0, [r7, #6]
 8003f4c:	f000 f898 	bl	8004080 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	88bb      	ldrh	r3, [r7, #4]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d8dd      	bhi.n	8003f20 <ST7789H2_DrawBitmap+0x90>
  }
}
 8003f64:	bf00      	nop
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	20000084 	.word	0x20000084
 8003f70:	200001b4 	.word	0x200001b4
 8003f74:	20000086 	.word	0x20000086
 8003f78:	200001b6 	.word	0x200001b6

08003f7c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8003f7c:	b590      	push	{r4, r7, lr}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4604      	mov	r4, r0
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	80fb      	strh	r3, [r7, #6]
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80bb      	strh	r3, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	807b      	strh	r3, [r7, #2]
 8003f96:	4613      	mov	r3, r2
 8003f98:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003f9e:	88bb      	ldrh	r3, [r7, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e019      	b.n	8003fd8 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fdff 	bl	8003bb0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	b299      	uxth	r1, r3
 8003fb6:	887b      	ldrh	r3, [r7, #2]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	6a3a      	ldr	r2, [r7, #32]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	887a      	ldrh	r2, [r7, #2]
 8003fc6:	88f8      	ldrh	r0, [r7, #6]
 8003fc8:	f000 f85a 	bl	8004080 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
 8003fd8:	88ba      	ldrh	r2, [r7, #4]
 8003fda:	883b      	ldrh	r3, [r7, #0]
 8003fdc:	4413      	add	r3, r2
 8003fde:	461a      	mov	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d3de      	bcc.n	8003fa4 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd90      	pop	{r4, r7, pc}

08003fee <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	460a      	mov	r2, r1
 8003ff8:	80fb      	strh	r3, [r7, #6]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8003ffe:	88ba      	ldrh	r2, [r7, #4]
 8004000:	88fb      	ldrh	r3, [r7, #6]
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fdd3 	bl	8003bb0 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 800400a:	2200      	movs	r2, #0
 800400c:	2100      	movs	r1, #0
 800400e:	202e      	movs	r0, #46	; 0x2e
 8004010:	f7ff fe55 	bl	8003cbe <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8004014:	f000 f9f8 	bl	8004408 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8004018:	f000 f9f6 	bl	8004408 <LCD_IO_ReadData>
 800401c:	4603      	mov	r3, r0
 800401e:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8004020:	f000 f9f2 	bl	8004408 <LCD_IO_ReadData>
 8004024:	4603      	mov	r3, r0
 8004026:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8004028:	8afb      	ldrh	r3, [r7, #22]
 800402a:	121b      	asrs	r3, r3, #8
 800402c:	b2db      	uxtb	r3, r3
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8004036:	8afb      	ldrh	r3, [r7, #22]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8004042:	8abb      	ldrh	r3, [r7, #20]
 8004044:	121b      	asrs	r3, r3, #8
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f023 0303 	bic.w	r3, r3, #3
 800404c:	b2db      	uxtb	r3, r3
 800404e:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8004050:	f107 0310 	add.w	r3, r7, #16
 8004054:	f107 020c 	add.w	r2, r7, #12
 8004058:	6812      	ldr	r2, [r2, #0]
 800405a:	4611      	mov	r1, r2
 800405c:	8019      	strh	r1, [r3, #0]
 800405e:	3302      	adds	r3, #2
 8004060:	0c12      	lsrs	r2, r2, #16
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	2300      	movs	r3, #0
 8004066:	7c3a      	ldrb	r2, [r7, #16]
 8004068:	f362 0307 	bfi	r3, r2, #0, #8
 800406c:	7c7a      	ldrb	r2, [r7, #17]
 800406e:	f362 230f 	bfi	r3, r2, #8, #8
 8004072:	7cba      	ldrb	r2, [r7, #18]
 8004074:	f362 4317 	bfi	r3, r2, #16, #8
}
 8004078:	4618      	mov	r0, r3
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	607b      	str	r3, [r7, #4]
 8004088:	4603      	mov	r3, r0
 800408a:	81fb      	strh	r3, [r7, #14]
 800408c:	460b      	mov	r3, r1
 800408e:	81bb      	strh	r3, [r7, #12]
 8004090:	4613      	mov	r3, r2
 8004092:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8004094:	2300      	movs	r3, #0
 8004096:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800409c:	2200      	movs	r2, #0
 800409e:	2100      	movs	r1, #0
 80040a0:	202c      	movs	r0, #44	; 0x2c
 80040a2:	f7ff fe0c 	bl	8003cbe <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80040a6:	89fb      	ldrh	r3, [r7, #14]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e02a      	b.n	8004102 <ST7789H2_DrawRGBHLine+0x82>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80040ac:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <ST7789H2_DrawRGBHLine+0x98>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d321      	bcc.n	80040fc <ST7789H2_DrawRGBHLine+0x7c>
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <ST7789H2_DrawRGBHLine+0x9c>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	89ba      	ldrh	r2, [r7, #12]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d31c      	bcc.n	80040fc <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80040c2:	4b17      	ldr	r3, [pc, #92]	; (8004120 <ST7789H2_DrawRGBHLine+0xa0>)
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d816      	bhi.n	80040fc <ST7789H2_DrawRGBHLine+0x7c>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80040ce:	4b15      	ldr	r3, [pc, #84]	; (8004124 <ST7789H2_DrawRGBHLine+0xa4>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	89ba      	ldrh	r2, [r7, #12]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d811      	bhi.n	80040fc <ST7789H2_DrawRGBHLine+0x7c>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 80040d8:	897a      	ldrh	r2, [r7, #10]
 80040da:	89fb      	ldrh	r3, [r7, #14]
 80040dc:	4413      	add	r3, r2
 80040de:	461a      	mov	r2, r3
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <ST7789H2_DrawRGBHLine+0x76>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 f96f 	bl	80043d4 <LCD_IO_WriteData>
      }      
      i++;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	3301      	adds	r3, #1
 80040fa:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	3301      	adds	r3, #1
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	897a      	ldrh	r2, [r7, #10]
 8004104:	89fb      	ldrh	r3, [r7, #14]
 8004106:	4413      	add	r3, r2
 8004108:	461a      	mov	r2, r3
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	4293      	cmp	r3, r2
 800410e:	d3cd      	bcc.n	80040ac <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8004110:	bf00      	nop
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	200001b4 	.word	0x200001b4
 800411c:	200001b6 	.word	0x200001b6
 8004120:	20000084 	.word	0x20000084
 8004124:	20000086 	.word	0x20000086

08004128 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	460a      	mov	r2, r1
 8004132:	71fb      	strb	r3, [r7, #7]
 8004134:	4613      	mov	r3, r2
 8004136:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <BSP_PB_Init+0xa0>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <BSP_PB_Init+0xa0>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6313      	str	r3, [r2, #48]	; 0x30
 8004148:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <BSP_PB_Init+0xa0>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004154:	79bb      	ldrb	r3, [r7, #6]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d111      	bne.n	800417e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800415a:	2301      	movs	r3, #1
 800415c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8004162:	2302      	movs	r3, #2
 8004164:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8004166:	2302      	movs	r3, #2
 8004168:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <BSP_PB_Init+0xa4>)
 800416e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004172:	f107 020c 	add.w	r2, r7, #12
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f002 f9bd 	bl	80064f8 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800417e:	79bb      	ldrb	r3, [r7, #6]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d11d      	bne.n	80041c0 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8004184:	2301      	movs	r3, #1
 8004186:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8004188:	2302      	movs	r3, #2
 800418a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <BSP_PB_Init+0xa8>)
 8004192:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	4a0d      	ldr	r2, [pc, #52]	; (80041cc <BSP_PB_Init+0xa4>)
 8004198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800419c:	f107 020c 	add.w	r2, r7, #12
 80041a0:	4611      	mov	r1, r2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f002 f9a8 	bl	80064f8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80041a8:	2306      	movs	r3, #6
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	2200      	movs	r2, #0
 80041ae:	210f      	movs	r1, #15
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 faeb 	bl	800578c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80041b6:	2306      	movs	r3, #6
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	4618      	mov	r0, r3
 80041bc:	f001 fb02 	bl	80057c4 <HAL_NVIC_EnableIRQ>
  }
}
 80041c0:	bf00      	nop
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40023800 	.word	0x40023800
 80041cc:	20000088 	.word	0x20000088
 80041d0:	10110000 	.word	0x10110000

080041d4 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	; 0x28
 80041d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	4b3a      	ldr	r3, [pc, #232]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	4a39      	ldr	r2, [pc, #228]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6393      	str	r3, [r2, #56]	; 0x38
 80041ea:	4b37      	ldr	r3, [pc, #220]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	4a32      	ldr	r2, [pc, #200]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004200:	f043 0308 	orr.w	r3, r3, #8
 8004204:	6313      	str	r3, [r2, #48]	; 0x30
 8004206:	4b30      	ldr	r3, [pc, #192]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 800421c:	f043 0310 	orr.w	r3, r3, #16
 8004220:	6313      	str	r3, [r2, #48]	; 0x30
 8004222:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	607b      	str	r3, [r7, #4]
 8004232:	4b25      	ldr	r3, [pc, #148]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004236:	4a24      	ldr	r2, [pc, #144]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004238:	f043 0320 	orr.w	r3, r3, #32
 800423c:	6313      	str	r3, [r2, #48]	; 0x30
 800423e:	4b22      	ldr	r3, [pc, #136]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 8004254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004258:	6313      	str	r3, [r2, #48]	; 0x30
 800425a:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <FMC_BANK3_MspInit+0xf4>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	603b      	str	r3, [r7, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004266:	2302      	movs	r3, #2
 8004268:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800426a:	2301      	movs	r3, #1
 800426c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800426e:	2303      	movs	r3, #3
 8004270:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8004272:	230c      	movs	r3, #12
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8004276:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 800427a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800427c:	f107 0314 	add.w	r3, r7, #20
 8004280:	4619      	mov	r1, r3
 8004282:	4812      	ldr	r0, [pc, #72]	; (80042cc <FMC_BANK3_MspInit+0xf8>)
 8004284:	f002 f938 	bl	80064f8 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8004288:	f64f 7380 	movw	r3, #65408	; 0xff80
 800428c:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800428e:	f107 0314 	add.w	r3, r7, #20
 8004292:	4619      	mov	r1, r3
 8004294:	480e      	ldr	r0, [pc, #56]	; (80042d0 <FMC_BANK3_MspInit+0xfc>)
 8004296:	f002 f92f 	bl	80064f8 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800429a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 800429e:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80042a0:	f107 0314 	add.w	r3, r7, #20
 80042a4:	4619      	mov	r1, r3
 80042a6:	480b      	ldr	r0, [pc, #44]	; (80042d4 <FMC_BANK3_MspInit+0x100>)
 80042a8:	f002 f926 	bl	80064f8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80042ac:	f240 433f 	movw	r3, #1087	; 0x43f
 80042b0:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80042b2:	f107 0314 	add.w	r3, r7, #20
 80042b6:	4619      	mov	r1, r3
 80042b8:	4807      	ldr	r0, [pc, #28]	; (80042d8 <FMC_BANK3_MspInit+0x104>)
 80042ba:	f002 f91d 	bl	80064f8 <HAL_GPIO_Init>
}
 80042be:	bf00      	nop
 80042c0:	3728      	adds	r7, #40	; 0x28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40020c00 	.word	0x40020c00
 80042d0:	40021000 	.word	0x40021000
 80042d4:	40021400 	.word	0x40021400
 80042d8:	40021800 	.word	0x40021800

080042dc <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 80042dc:	b580      	push	{r7, lr}
 80042de:	b09c      	sub	sp, #112	; 0x70
 80042e0:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 80042e2:	f7ff ff77 	bl	80041d4 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 80042e6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80042ea:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 80042ec:	4b1e      	ldr	r3, [pc, #120]	; (8004368 <FMC_BANK3_Init+0x8c>)
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 80042f0:	2303      	movs	r3, #3
 80042f2:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 80042f4:	2301      	movs	r3, #1
 80042f6:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 80042f8:	2304      	movs	r3, #4
 80042fa:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 80042fc:	2301      	movs	r3, #1
 80042fe:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8004300:	2302      	movs	r3, #2
 8004302:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8004304:	2302      	movs	r3, #2
 8004306:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 800430c:	2304      	movs	r3, #4
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004310:	2300      	movs	r3, #0
 8004312:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8004314:	2300      	movs	r3, #0
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004318:	2310      	movs	r3, #16
 800431a:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 800431c:	2300      	movs	r3, #0
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004320:	2300      	movs	r3, #0
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8004324:	2300      	movs	r3, #0
 8004326:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8004328:	2300      	movs	r3, #0
 800432a:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 800432c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004330:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8004332:	2300      	movs	r3, #0
 8004334:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8004336:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800433a:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8004340:	2300      	movs	r3, #0
 8004342:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8004344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004348:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 800434a:	2300      	movs	r3, #0
 800434c:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800434e:	2300      	movs	r3, #0
 8004350:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8004352:	1d3a      	adds	r2, r7, #4
 8004354:	1d39      	adds	r1, r7, #4
 8004356:	f107 0320 	add.w	r3, r7, #32
 800435a:	4618      	mov	r0, r3
 800435c:	f006 fbaa 	bl	800aab4 <HAL_SRAM_Init>
}
 8004360:	bf00      	nop
 8004362:	3770      	adds	r7, #112	; 0x70
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	a0000104 	.word	0xa0000104

0800436c <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8004376:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800437e:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	4603      	mov	r3, r0
 8004396:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8004398:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 800439c:	79fa      	ldrb	r2, [r7, #7]
 800439e:	b292      	uxth	r2, r2
 80043a0:	801a      	strh	r2, [r3, #0]
 80043a2:	f3bf 8f4f 	dsb	sy
  __DSB();
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 80043b2:	b480      	push	{r7}
 80043b4:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 80043b6:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80043ba:	885b      	ldrh	r3, [r3, #2]
 80043bc:	b29b      	uxth	r3, r3
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 80043cc:	f7ff ff86 	bl	80042dc <FMC_BANK3_Init>
}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 80043de:	88fb      	ldrh	r3, [r7, #6]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff ffc3 	bl	800436c <FMC_BANK3_WriteData>
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b082      	sub	sp, #8
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	4603      	mov	r3, r0
 80043f6:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ffc7 	bl	800438e <FMC_BANK3_WriteReg>
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 800440c:	f7ff ffd1 	bl	80043b2 <FMC_BANK3_ReadData>
 8004410:	4603      	mov	r3, r0
}
 8004412:	4618      	mov	r0, r3
 8004414:	bd80      	pop	{r7, pc}

08004416 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 fd30 	bl	8004e84 <HAL_Delay>
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8004434:	f000 f80e 	bl	8004454 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8004438:	bf00      	nop
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8004448:	f000 f80b 	bl	8004462 <BSP_AUDIO_OUT_Error_CallBack>
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
}
 8004466:	bf00      	nop
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8004478:	f000 f804 	bl	8004484 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800447c:	bf00      	nop
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8004496:	2001      	movs	r0, #1
 8004498:	f000 f804 	bl	80044a4 <BSP_LCD_InitEx>
 800449c:	4603      	mov	r3, r0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 80044b0:	4b2c      	ldr	r3, [pc, #176]	; (8004564 <BSP_LCD_InitEx+0xc0>)
 80044b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b6:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 80044b8:	4b2a      	ldr	r3, [pc, #168]	; (8004564 <BSP_LCD_InitEx+0xc0>)
 80044ba:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <BSP_LCD_InitEx+0xc4>)
 80044bc:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 80044be:	4b29      	ldr	r3, [pc, #164]	; (8004564 <BSP_LCD_InitEx+0xc0>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 80044c4:	f000 fa10 	bl	80048e8 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80044c8:	2201      	movs	r2, #1
 80044ca:	2120      	movs	r1, #32
 80044cc:	4827      	ldr	r0, [pc, #156]	; (800456c <BSP_LCD_InitEx+0xc8>)
 80044ce:	f002 f9a5 	bl	800681c <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80044d2:	2200      	movs	r2, #0
 80044d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044d8:	4825      	ldr	r0, [pc, #148]	; (8004570 <BSP_LCD_InitEx+0xcc>)
 80044da:	f002 f99f 	bl	800681c <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 80044de:	2005      	movs	r0, #5
 80044e0:	f000 fcd0 	bl	8004e84 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 80044e4:	2201      	movs	r2, #1
 80044e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044ea:	4821      	ldr	r0, [pc, #132]	; (8004570 <BSP_LCD_InitEx+0xcc>)
 80044ec:	f002 f996 	bl	800681c <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80044f0:	200a      	movs	r0, #10
 80044f2:	f000 fcc7 	bl	8004e84 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 80044f6:	2200      	movs	r2, #0
 80044f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044fc:	481c      	ldr	r0, [pc, #112]	; (8004570 <BSP_LCD_InitEx+0xcc>)
 80044fe:	f002 f98d 	bl	800681c <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8004502:	2014      	movs	r0, #20
 8004504:	f000 fcbe 	bl	8004e84 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8004508:	2201      	movs	r2, #1
 800450a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800450e:	4818      	ldr	r0, [pc, #96]	; (8004570 <BSP_LCD_InitEx+0xcc>)
 8004510:	f002 f984 	bl	800681c <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8004514:	200a      	movs	r0, #10
 8004516:	f000 fcb5 	bl	8004e84 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <BSP_LCD_InitEx+0xd0>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4798      	blx	r3
 8004520:	4603      	mov	r3, r0
 8004522:	2b85      	cmp	r3, #133	; 0x85
 8004524:	d118      	bne.n	8004558 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8004526:	4b14      	ldr	r3, [pc, #80]	; (8004578 <BSP_LCD_InitEx+0xd4>)
 8004528:	4a12      	ldr	r2, [pc, #72]	; (8004574 <BSP_LCD_InitEx+0xd0>)
 800452a:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <BSP_LCD_InitEx+0xd4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d103      	bne.n	8004542 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 800453a:	2000      	movs	r0, #0
 800453c:	f7ff fabd 	bl	8003aba <ST7789H2_SetOrientation>
 8004540:	e005      	b.n	800454e <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d102      	bne.n	800454e <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8004548:	2002      	movs	r0, #2
 800454a:	f7ff fab6 	bl	8003aba <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800454e:	480b      	ldr	r0, [pc, #44]	; (800457c <BSP_LCD_InitEx+0xd8>)
 8004550:	f000 f84e 	bl	80045f0 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	200050ec 	.word	0x200050ec
 8004568:	2000008c 	.word	0x2000008c
 800456c:	40021000 	.word	0x40021000
 8004570:	40020400 	.word	0x40020400
 8004574:	2000004c 	.word	0x2000004c
 8004578:	200001b8 	.word	0x200001b8
 800457c:	2000009c 	.word	0x2000009c

08004580 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <BSP_LCD_GetXSize+0x14>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	4798      	blx	r3
 800458c:	4603      	mov	r3, r0
}
 800458e:	4618      	mov	r0, r3
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	200001b8 	.word	0x200001b8

08004598 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 800459c:	4b03      	ldr	r3, [pc, #12]	; (80045ac <BSP_LCD_GetYSize+0x14>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	4798      	blx	r3
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	200001b8 	.word	0x200001b8

080045b0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80045ba:	88fb      	ldrh	r3, [r7, #6]
 80045bc:	4a03      	ldr	r2, [pc, #12]	; (80045cc <BSP_LCD_SetTextColor+0x1c>)
 80045be:	6013      	str	r3, [r2, #0]
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	200050ec 	.word	0x200050ec

080045d0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 80045da:	88fb      	ldrh	r3, [r7, #6]
 80045dc:	4a03      	ldr	r2, [pc, #12]	; (80045ec <BSP_LCD_SetBackColor+0x1c>)
 80045de:	6053      	str	r3, [r2, #4]
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	200050ec 	.word	0x200050ec

080045f0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <BSP_LCD_SetFont+0x1c>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6093      	str	r3, [r2, #8]
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	200050ec 	.word	0x200050ec

08004610 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return DrawProp.pFont;
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <BSP_LCD_GetFont+0x14>)
 8004616:	689b      	ldr	r3, [r3, #8]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	200050ec 	.word	0x200050ec

08004628 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 800463a:	4b15      	ldr	r3, [pc, #84]	; (8004690 <BSP_LCD_Clear+0x68>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8004640:	88fb      	ldrh	r3, [r7, #6]
 8004642:	4a13      	ldr	r2, [pc, #76]	; (8004690 <BSP_LCD_Clear+0x68>)
 8004644:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8004646:	f7ff ffa7 	bl	8004598 <BSP_LCD_GetYSize>
 800464a:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e00d      	b.n	800466e <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	b29c      	uxth	r4, r3
 8004656:	f7ff ff93 	bl	8004580 <BSP_LCD_GetXSize>
 800465a:	4603      	mov	r3, r0
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	4621      	mov	r1, r4
 8004662:	2000      	movs	r0, #0
 8004664:	f000 f906 	bl	8004874 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	3301      	adds	r3, #1
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d3ed      	bcc.n	8004652 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8004676:	4a06      	ldr	r2, [pc, #24]	; (8004690 <BSP_LCD_Clear+0x68>)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <BSP_LCD_Clear+0x68>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	b29b      	uxth	r3, r3
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff ff94 	bl	80045b0 <BSP_LCD_SetTextColor>
}
 8004688:	bf00      	nop
 800468a:	371c      	adds	r7, #28
 800468c:	46bd      	mov	sp, r7
 800468e:	bd90      	pop	{r4, r7, pc}
 8004690:	200050ec 	.word	0x200050ec

08004694 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	80fb      	strh	r3, [r7, #6]
 800469e:	460b      	mov	r3, r1
 80046a0:	80bb      	strh	r3, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80046a6:	4b0f      	ldr	r3, [pc, #60]	; (80046e4 <BSP_LCD_DisplayChar+0x50>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	78fb      	ldrb	r3, [r7, #3]
 80046ae:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80046b0:	490c      	ldr	r1, [pc, #48]	; (80046e4 <BSP_LCD_DisplayChar+0x50>)
 80046b2:	6889      	ldr	r1, [r1, #8]
 80046b4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80046b6:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 80046ba:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <BSP_LCD_DisplayChar+0x50>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	889b      	ldrh	r3, [r3, #4]
 80046c0:	3307      	adds	r3, #7
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da00      	bge.n	80046c8 <BSP_LCD_DisplayChar+0x34>
 80046c6:	3307      	adds	r3, #7
 80046c8:	10db      	asrs	r3, r3, #3
 80046ca:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 80046ce:	441a      	add	r2, r3
 80046d0:	88b9      	ldrh	r1, [r7, #4]
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 f963 	bl	80049a0 <DrawChar>
}
 80046da:	bf00      	nop
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	200050ec 	.word	0x200050ec

080046e8 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60ba      	str	r2, [r7, #8]
 80046f0:	461a      	mov	r2, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	81fb      	strh	r3, [r7, #14]
 80046f6:	460b      	mov	r3, r1
 80046f8:	81bb      	strh	r3, [r7, #12]
 80046fa:	4613      	mov	r3, r2
 80046fc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80046fe:	2301      	movs	r3, #1
 8004700:	83fb      	strh	r3, [r7, #30]
 8004702:	2300      	movs	r3, #0
 8004704:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8004712:	e002      	b.n	800471a <BSP_LCD_DisplayStringAt+0x32>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	3301      	adds	r3, #1
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	617a      	str	r2, [r7, #20]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f6      	bne.n	8004714 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8004726:	f7ff ff2b 	bl	8004580 <BSP_LCD_GetXSize>
 800472a:	4602      	mov	r2, r0
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <BSP_LCD_DisplayStringAt+0x120>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	889b      	ldrh	r3, [r3, #4]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d014      	beq.n	8004768 <BSP_LCD_DisplayStringAt+0x80>
 800473e:	2b03      	cmp	r3, #3
 8004740:	d00f      	beq.n	8004762 <BSP_LCD_DisplayStringAt+0x7a>
 8004742:	2b01      	cmp	r3, #1
 8004744:	d11e      	bne.n	8004784 <BSP_LCD_DisplayStringAt+0x9c>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	4a2e      	ldr	r2, [pc, #184]	; (8004808 <BSP_LCD_DisplayStringAt+0x120>)
 800474e:	6892      	ldr	r2, [r2, #8]
 8004750:	8892      	ldrh	r2, [r2, #4]
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	085b      	lsrs	r3, r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	89fb      	ldrh	r3, [r7, #14]
 800475c:	4413      	add	r3, r2
 800475e:	83fb      	strh	r3, [r7, #30]
      break;
 8004760:	e013      	b.n	800478a <BSP_LCD_DisplayStringAt+0xa2>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8004762:	89fb      	ldrh	r3, [r7, #14]
 8004764:	83fb      	strh	r3, [r7, #30]
      break;
 8004766:	e010      	b.n	800478a <BSP_LCD_DisplayStringAt+0xa2>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	b29a      	uxth	r2, r3
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <BSP_LCD_DisplayStringAt+0x120>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	889b      	ldrh	r3, [r3, #4]
 8004776:	fb12 f303 	smulbb	r3, r2, r3
 800477a:	b29a      	uxth	r2, r3
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	83fb      	strh	r3, [r7, #30]
      break;
 8004782:	e002      	b.n	800478a <BSP_LCD_DisplayStringAt+0xa2>
    }    
  default:
    {
      refcolumn = Xpos;
 8004784:	89fb      	ldrh	r3, [r7, #14]
 8004786:	83fb      	strh	r3, [r7, #30]
      break;
 8004788:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800478a:	8bfb      	ldrh	r3, [r7, #30]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d003      	beq.n	8004798 <BSP_LCD_DisplayStringAt+0xb0>
 8004790:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004794:	2b00      	cmp	r3, #0
 8004796:	da15      	bge.n	80047c4 <BSP_LCD_DisplayStringAt+0xdc>
  {
    refcolumn = 1;
 8004798:	2301      	movs	r3, #1
 800479a:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800479c:	e012      	b.n	80047c4 <BSP_LCD_DisplayStringAt+0xdc>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	89b9      	ldrh	r1, [r7, #12]
 80047a4:	8bfb      	ldrh	r3, [r7, #30]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ff74 	bl	8004694 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 80047ac:	4b16      	ldr	r3, [pc, #88]	; (8004808 <BSP_LCD_DisplayStringAt+0x120>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	889a      	ldrh	r2, [r3, #4]
 80047b2:	8bfb      	ldrh	r3, [r7, #30]
 80047b4:	4413      	add	r3, r2
 80047b6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60bb      	str	r3, [r7, #8]
    i++;
 80047be:	8bbb      	ldrh	r3, [r7, #28]
 80047c0:	3301      	adds	r3, #1
 80047c2:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	bf14      	ite	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	2300      	moveq	r3, #0
 80047d0:	b2dc      	uxtb	r4, r3
 80047d2:	f7ff fed5 	bl	8004580 <BSP_LCD_GetXSize>
 80047d6:	4601      	mov	r1, r0
 80047d8:	8bbb      	ldrh	r3, [r7, #28]
 80047da:	4a0b      	ldr	r2, [pc, #44]	; (8004808 <BSP_LCD_DisplayStringAt+0x120>)
 80047dc:	6892      	ldr	r2, [r2, #8]
 80047de:	8892      	ldrh	r2, [r2, #4]
 80047e0:	fb02 f303 	mul.w	r3, r2, r3
 80047e4:	1acb      	subs	r3, r1, r3
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	4a07      	ldr	r2, [pc, #28]	; (8004808 <BSP_LCD_DisplayStringAt+0x120>)
 80047ea:	6892      	ldr	r2, [r2, #8]
 80047ec:	8892      	ldrh	r2, [r2, #4]
 80047ee:	4293      	cmp	r3, r2
 80047f0:	bf2c      	ite	cs
 80047f2:	2301      	movcs	r3, #1
 80047f4:	2300      	movcc	r3, #0
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	4023      	ands	r3, r4
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ce      	bne.n	800479e <BSP_LCD_DisplayStringAt+0xb6>
  }
}
 8004800:	bf00      	nop
 8004802:	3724      	adds	r7, #36	; 0x24
 8004804:	46bd      	mov	sp, r7
 8004806:	bd90      	pop	{r4, r7, pc}
 8004808:	200050ec 	.word	0x200050ec

0800480c <BSP_LCD_DisplayStringAtLine>:
  *            @arg  0..19: if the Current fonts is Font12x12 or Font8x12
  *            @arg  0..29: if the Current fonts is Font8x8
  * @param  ptr: Pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	4603      	mov	r3, r0
 8004814:	6039      	str	r1, [r7, #0]
 8004816:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8004818:	f7ff fefa 	bl	8004610 <BSP_LCD_GetFont>
 800481c:	4603      	mov	r3, r0
 800481e:	88db      	ldrh	r3, [r3, #6]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	fb12 f303 	smulbb	r3, r2, r3
 8004826:	b299      	uxth	r1, r3
 8004828:	2303      	movs	r3, #3
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	2000      	movs	r0, #0
 800482e:	f7ff ff5b 	bl	80046e8 <BSP_LCD_DisplayStringAt>
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	80fb      	strh	r3, [r7, #6]
 8004846:	460b      	mov	r3, r1
 8004848:	80bb      	strh	r3, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 800484e:	4b08      	ldr	r3, [pc, #32]	; (8004870 <BSP_LCD_DrawPixel+0x34>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d006      	beq.n	8004866 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <BSP_LCD_DrawPixel+0x34>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	887a      	ldrh	r2, [r7, #2]
 8004860:	88b9      	ldrh	r1, [r7, #4]
 8004862:	88f8      	ldrh	r0, [r7, #6]
 8004864:	4798      	blx	r3
  }
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	200001b8 	.word	0x200001b8

08004874 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8004874:	b590      	push	{r4, r7, lr}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	4603      	mov	r3, r0
 800487c:	80fb      	strh	r3, [r7, #6]
 800487e:	460b      	mov	r3, r1
 8004880:	80bb      	strh	r3, [r7, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <BSP_LCD_DrawHLine+0x6c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8004894:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <BSP_LCD_DrawHLine+0x6c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6a1c      	ldr	r4, [r3, #32]
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <BSP_LCD_DrawHLine+0x70>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	b298      	uxth	r0, r3
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	88ba      	ldrh	r2, [r7, #4]
 80048a4:	88f9      	ldrh	r1, [r7, #6]
 80048a6:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 80048a8:	e015      	b.n	80048d6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e00e      	b.n	80048ce <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	4413      	add	r3, r2
 80048b8:	b298      	uxth	r0, r3
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <BSP_LCD_DrawHLine+0x70>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	b29a      	uxth	r2, r3
 80048c0:	88bb      	ldrh	r3, [r7, #4]
 80048c2:	4619      	mov	r1, r3
 80048c4:	f7ff ffba 	bl	800483c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	887b      	ldrh	r3, [r7, #2]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d3ec      	bcc.n	80048b0 <BSP_LCD_DrawHLine+0x3c>
}
 80048d6:	bf00      	nop
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd90      	pop	{r4, r7, pc}
 80048de:	bf00      	nop
 80048e0:	200001b8 	.word	0x200001b8
 80048e4:	200050ec 	.word	0x200050ec

080048e8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]
 80048f2:	4b28      	ldr	r3, [pc, #160]	; (8004994 <BSP_LCD_MspInit+0xac>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	4a27      	ldr	r2, [pc, #156]	; (8004994 <BSP_LCD_MspInit+0xac>)
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	6313      	str	r3, [r2, #48]	; 0x30
 80048fe:	4b25      	ldr	r3, [pc, #148]	; (8004994 <BSP_LCD_MspInit+0xac>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	4b21      	ldr	r3, [pc, #132]	; (8004994 <BSP_LCD_MspInit+0xac>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	4a20      	ldr	r2, [pc, #128]	; (8004994 <BSP_LCD_MspInit+0xac>)
 8004914:	f043 0302 	orr.w	r3, r3, #2
 8004918:	6313      	str	r3, [r2, #48]	; 0x30
 800491a:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <BSP_LCD_MspInit+0xac>)
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	607b      	str	r3, [r7, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004926:	2300      	movs	r3, #0
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	4b1a      	ldr	r3, [pc, #104]	; (8004994 <BSP_LCD_MspInit+0xac>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	4a19      	ldr	r2, [pc, #100]	; (8004994 <BSP_LCD_MspInit+0xac>)
 8004930:	f043 0310 	orr.w	r3, r3, #16
 8004934:	6313      	str	r3, [r2, #48]	; 0x30
 8004936:	4b17      	ldr	r3, [pc, #92]	; (8004994 <BSP_LCD_MspInit+0xac>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8004942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004946:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800494c:	2302      	movs	r3, #2
 800494e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8004950:	2301      	movs	r3, #1
 8004952:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8004954:	f107 030c 	add.w	r3, r7, #12
 8004958:	4619      	mov	r1, r3
 800495a:	480f      	ldr	r0, [pc, #60]	; (8004998 <BSP_LCD_MspInit+0xb0>)
 800495c:	f001 fdcc 	bl	80064f8 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8004960:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004964:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8004966:	2300      	movs	r3, #0
 8004968:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800496a:	f107 030c 	add.w	r3, r7, #12
 800496e:	4619      	mov	r1, r3
 8004970:	4809      	ldr	r0, [pc, #36]	; (8004998 <BSP_LCD_MspInit+0xb0>)
 8004972:	f001 fdc1 	bl	80064f8 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8004976:	2320      	movs	r3, #32
 8004978:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800497a:	2301      	movs	r3, #1
 800497c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800497e:	f107 030c 	add.w	r3, r7, #12
 8004982:	4619      	mov	r1, r3
 8004984:	4805      	ldr	r0, [pc, #20]	; (800499c <BSP_LCD_MspInit+0xb4>)
 8004986:	f001 fdb7 	bl	80064f8 <HAL_GPIO_Init>
}
 800498a:	bf00      	nop
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40023800 	.word	0x40023800
 8004998:	40020400 	.word	0x40020400
 800499c:	40021000 	.word	0x40021000

080049a0 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	603a      	str	r2, [r7, #0]
 80049aa:	80fb      	strh	r3, [r7, #6]
 80049ac:	460b      	mov	r3, r1
 80049ae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 80049b8:	4b44      	ldr	r3, [pc, #272]	; (8004acc <DrawChar+0x12c>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	88db      	ldrh	r3, [r3, #6]
 80049be:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <DrawChar+0x12c>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	889b      	ldrh	r3, [r3, #4]
 80049c6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80049c8:	8a3b      	ldrh	r3, [r7, #16]
 80049ca:	3307      	adds	r3, #7
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	da00      	bge.n	80049d2 <DrawChar+0x32>
 80049d0:	3307      	adds	r3, #7
 80049d2:	10db      	asrs	r3, r3, #3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	8a3b      	ldrh	r3, [r7, #16]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	e069      	b.n	8004abc <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80049e8:	8a3b      	ldrh	r3, [r7, #16]
 80049ea:	3307      	adds	r3, #7
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da00      	bge.n	80049f2 <DrawChar+0x52>
 80049f0:	3307      	adds	r3, #7
 80049f2:	10db      	asrs	r3, r3, #3
 80049f4:	461a      	mov	r2, r3
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	fb03 f302 	mul.w	r3, r3, r2
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	4413      	add	r3, r2
 8004a00:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004a02:	8a3b      	ldrh	r3, [r7, #16]
 8004a04:	3307      	adds	r3, #7
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	da00      	bge.n	8004a0c <DrawChar+0x6c>
 8004a0a:	3307      	adds	r3, #7
 8004a0c:	10db      	asrs	r3, r3, #3
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d002      	beq.n	8004a18 <DrawChar+0x78>
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d004      	beq.n	8004a20 <DrawChar+0x80>
 8004a16:	e00c      	b.n	8004a32 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	617b      	str	r3, [r7, #20]
      break;    
 8004a1e:	e016      	b.n	8004a4e <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	021b      	lsls	r3, r3, #8
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	3201      	adds	r2, #1
 8004a2a:	7812      	ldrb	r2, [r2, #0]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	617b      	str	r3, [r7, #20]
      break;
 8004a30:	e00d      	b.n	8004a4e <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	041a      	lsls	r2, r3, #16
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	4313      	orrs	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	3202      	adds	r2, #2
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	617b      	str	r3, [r7, #20]
      break;
 8004a4c:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e029      	b.n	8004aa8 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004a54:	8a3a      	ldrh	r2, [r7, #16]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	1ad2      	subs	r2, r2, r3
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	2201      	movs	r2, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00c      	beq.n	8004a8a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	88fb      	ldrh	r3, [r7, #6]
 8004a76:	4413      	add	r3, r2
 8004a78:	b298      	uxth	r0, r3
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <DrawChar+0x12c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	88bb      	ldrh	r3, [r7, #4]
 8004a82:	4619      	mov	r1, r3
 8004a84:	f7ff feda 	bl	800483c <BSP_LCD_DrawPixel>
 8004a88:	e00b      	b.n	8004aa2 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	4413      	add	r3, r2
 8004a92:	b298      	uxth	r0, r3
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <DrawChar+0x12c>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	88bb      	ldrh	r3, [r7, #4]
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f7ff fecd 	bl	800483c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	61bb      	str	r3, [r7, #24]
 8004aa8:	8a3b      	ldrh	r3, [r7, #16]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d3d1      	bcc.n	8004a54 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8004ab0:	88bb      	ldrh	r3, [r7, #4]
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	8a7b      	ldrh	r3, [r7, #18]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d391      	bcc.n	80049e8 <DrawChar+0x48>
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	3720      	adds	r7, #32
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	200050ec 	.word	0x200050ec

08004ad0 <RC_READ_SBUS>:
 * Purpose: To read RC SBUS data
 * Language:  C
 */
#include <rc_input_sbus.h>

uint8_t RC_READ_SBUS(UART_HandleTypeDef *huart,SBUS *sbus) {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]

	HAL_UART_Receive_DMA(huart, sbus->sbus_msg_bytes, 25);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	3325      	adds	r3, #37	; 0x25
 8004ade:	2219      	movs	r2, #25
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f006 ff88 	bl	800b9f8 <HAL_UART_Receive_DMA>

	if (sbus->sbus_msg_bytes[0] != 0x0F) {
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004aee:	2b0f      	cmp	r3, #15
 8004af0:	d012      	beq.n	8004b18 <RC_READ_SBUS+0x48>
		//Error out of sync
		sbus->error_cnt++;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af8:	3301      	adds	r3, #1
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		if (sbus->error_cnt > SBUS_ERROR_CNT) {
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b08:	2b0a      	cmp	r3, #10
 8004b0a:	d903      	bls.n	8004b14 <RC_READ_SBUS+0x44>
			sbus->error = 1;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		return 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e16e      	b.n	8004df6 <RC_READ_SBUS+0x326>
	}

	sbus->error = 0;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	sbus->error_cnt = 0;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sbus->frame_lost = 0;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2020 	strb.w	r2, [r3, #32]
	sbus->failsafe = 0;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21


		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004b3e:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[2] << 8)) & 0x07FF;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	b21b      	sxth	r3, r3
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b54:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[0] = (((uint16_t) sbus->sbus_msg_bytes[1])
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	801a      	strh	r2, [r3, #0]
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
				| ((uint16_t) sbus->sbus_msg_bytes[3] << 5)) & 0x07FF;
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	b21a      	sxth	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6c:	015b      	lsls	r3, r3, #5
 8004b6e:	b21b      	sxth	r3, r3
 8004b70:	4313      	orrs	r3, r2
 8004b72:	b21b      	sxth	r3, r3
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b7a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[1] = (((uint16_t) sbus->sbus_msg_bytes[2] >> 3)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	805a      	strh	r2, [r3, #2]
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
				| ((uint16_t) sbus->sbus_msg_bytes[4] << 2)
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	b21a      	sxth	r2, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	b21b      	sxth	r3, r3
 8004b96:	4313      	orrs	r3, r2
 8004b98:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[5] << 10)) & 0x07FF;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004ba0:	029b      	lsls	r3, r3, #10
 8004ba2:	b21b      	sxth	r3, r3
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	b21b      	sxth	r3, r3
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bae:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[2] = (((uint16_t) sbus->sbus_msg_bytes[3] >> 6)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	809a      	strh	r2, [r3, #4]
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
				| ((uint16_t) sbus->sbus_msg_bytes[6] << 7)) & 0x07FF;
 8004bba:	085b      	lsrs	r3, r3, #1
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	b21a      	sxth	r2, r3
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004bc6:	01db      	lsls	r3, r3, #7
 8004bc8:	b21b      	sxth	r3, r3
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	b21b      	sxth	r3, r3
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bd4:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[3] = (((uint16_t) sbus->sbus_msg_bytes[5] >> 1)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	80da      	strh	r2, [r3, #6]
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
				| ((uint16_t) sbus->sbus_msg_bytes[7] << 4)) & 0x07FF;
 8004be0:	091b      	lsrs	r3, r3, #4
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	b21a      	sxth	r2, r3
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	b21b      	sxth	r3, r3
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	b21b      	sxth	r3, r3
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bfa:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[4] = (((uint16_t) sbus->sbus_msg_bytes[6] >> 4)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	811a      	strh	r2, [r3, #8]
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
				| ((uint16_t) sbus->sbus_msg_bytes[8] << 1)
 8004c06:	09db      	lsrs	r3, r3, #7
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	b21a      	sxth	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	b21b      	sxth	r3, r3
 8004c16:	4313      	orrs	r3, r2
 8004c18:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[9] << 9)) & 0x07FF;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004c20:	025b      	lsls	r3, r3, #9
 8004c22:	b21b      	sxth	r3, r3
 8004c24:	4313      	orrs	r3, r2
 8004c26:	b21b      	sxth	r3, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c2e:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[5] = (((uint16_t) sbus->sbus_msg_bytes[7] >> 7)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	815a      	strh	r2, [r3, #10]
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
				| ((uint16_t) sbus->sbus_msg_bytes[10] << 6)) & 0x07FF;
 8004c3a:	089b      	lsrs	r3, r3, #2
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	b21a      	sxth	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004c46:	019b      	lsls	r3, r3, #6
 8004c48:	b21b      	sxth	r3, r3
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	b21b      	sxth	r3, r3
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c54:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[6] = (((uint16_t) sbus->sbus_msg_bytes[9] >> 2)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	819a      	strh	r2, [r3, #12]
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
				| ((uint16_t) sbus->sbus_msg_bytes[11] << 3)) & 0x07FF;
 8004c60:	095b      	lsrs	r3, r3, #5
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	b21a      	sxth	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	b21b      	sxth	r3, r3
 8004c70:	4313      	orrs	r3, r2
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c7a:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[7] = (((uint16_t) sbus->sbus_msg_bytes[10] >> 5)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	81da      	strh	r2, [r3, #14]
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c86:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[13] << 8)) & 0x07FF;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	b21b      	sxth	r3, r3
 8004c92:	4313      	orrs	r3, r2
 8004c94:	b21b      	sxth	r3, r3
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c9c:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[8] = (((uint16_t) sbus->sbus_msg_bytes[12])
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	821a      	strh	r2, [r3, #16]
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
				| ((uint16_t) sbus->sbus_msg_bytes[14] << 5)) & 0x07FF;
 8004ca8:	08db      	lsrs	r3, r3, #3
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	b21a      	sxth	r2, r3
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004cb4:	015b      	lsls	r3, r3, #5
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	b21b      	sxth	r3, r3
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cc2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[9] = (((uint16_t) sbus->sbus_msg_bytes[13] >> 3)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	825a      	strh	r2, [r3, #18]
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
				| ((uint16_t) sbus->sbus_msg_bytes[15] << 2)
 8004cce:	099b      	lsrs	r3, r3, #6
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	b21a      	sxth	r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	b21b      	sxth	r3, r3
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[16] << 10)) & 0x07FF;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce8:	029b      	lsls	r3, r3, #10
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	4313      	orrs	r3, r2
 8004cee:	b21b      	sxth	r3, r3
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cf6:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[10] = (((uint16_t) sbus->sbus_msg_bytes[14] >> 6)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	829a      	strh	r2, [r3, #20]
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
				| ((uint16_t) sbus->sbus_msg_bytes[17] << 7)) & 0x07FF;
 8004d02:	085b      	lsrs	r3, r3, #1
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	b21a      	sxth	r2, r3
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004d0e:	01db      	lsls	r3, r3, #7
 8004d10:	b21b      	sxth	r3, r3
 8004d12:	4313      	orrs	r3, r2
 8004d14:	b21b      	sxth	r3, r3
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d1c:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[11] = (((uint16_t) sbus->sbus_msg_bytes[16] >> 1)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	82da      	strh	r2, [r3, #22]
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
				| ((uint16_t) sbus->sbus_msg_bytes[18] << 4)) & 0x07FF;
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	b21a      	sxth	r2, r3
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	b21b      	sxth	r3, r3
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	b21b      	sxth	r3, r3
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d42:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[12] = (((uint16_t) sbus->sbus_msg_bytes[17] >> 4)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	831a      	strh	r2, [r3, #24]
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
				| ((uint16_t) sbus->sbus_msg_bytes[19] << 1)
 8004d4e:	09db      	lsrs	r3, r3, #7
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	b21a      	sxth	r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	b21a      	sxth	r2, r3
				| ((uint16_t) sbus->sbus_msg_bytes[20] << 9)) & 0x07FF;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d68:	025b      	lsls	r3, r3, #9
 8004d6a:	b21b      	sxth	r3, r3
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	b21b      	sxth	r3, r3
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d76:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[13] = (((uint16_t) sbus->sbus_msg_bytes[18] >> 7)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	835a      	strh	r2, [r3, #26]
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
				| ((uint16_t) sbus->sbus_msg_bytes[21] << 6)) & 0x07FF;
 8004d82:	089b      	lsrs	r3, r3, #2
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	b21a      	sxth	r2, r3
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d8e:	019b      	lsls	r3, r3, #6
 8004d90:	b21b      	sxth	r3, r3
 8004d92:	4313      	orrs	r3, r2
 8004d94:	b21b      	sxth	r3, r3
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d9c:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[14] = (((uint16_t) sbus->sbus_msg_bytes[20] >> 2)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	839a      	strh	r2, [r3, #28]
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
				| ((uint16_t) sbus->sbus_msg_bytes[22] << 3)) & 0x07FF;
 8004da8:	095b      	lsrs	r3, r3, #5
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	b21a      	sxth	r2, r3
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	b21b      	sxth	r3, r3
 8004db8:	4313      	orrs	r3, r2
 8004dba:	b21b      	sxth	r3, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dc2:	b29a      	uxth	r2, r3
		sbus->PWM_US_RC_CH[15] = (((uint16_t) sbus->sbus_msg_bytes[21] >> 5)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	83da      	strh	r2, [r3, #30]
	//for (uint8_t i = 0; i <= SBUS_MAX_CHANNEL_CNT; i++) {
	//	sbus->PWM_US_RC_CH[i] = MAP(sbus->PWM_US_RC_CH[i], SBUS_IN_MIN_PWM,
	//			SBUS_IN_MAX_PWM, SBUS_OUT_MIN_PWM, SBUS_OUT_MAX_PWM);
	//}

	if (sbus->sbus_msg_bytes[23] & (1 << 2)) {
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <RC_READ_SBUS+0x30e>
		sbus->frame_lost = 1;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2020 	strb.w	r2, [r3, #32]
	}

	if (sbus->sbus_msg_bytes[23] & (1 << 3)) {
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <RC_READ_SBUS+0x324>
		sbus->failsafe = 1;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		sbus->arm = 0;
		sbus->disarm = 0;
	}
#endif

	return 1;
 8004df4:	2301      	movs	r3, #1
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e04:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_Init+0x40>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a0d      	ldr	r2, [pc, #52]	; (8004e40 <HAL_Init+0x40>)
 8004e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <HAL_Init+0x40>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <HAL_Init+0x40>)
 8004e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e1c:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <HAL_Init+0x40>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <HAL_Init+0x40>)
 8004e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e28:	2003      	movs	r0, #3
 8004e2a:	f000 fca4 	bl	8005776 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f7fe fc44 	bl	80036bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e34:	f7fd fe00 	bl	8002a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023c00 	.word	0x40023c00

08004e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_IncTick+0x20>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_IncTick+0x24>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4413      	add	r3, r2
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <HAL_IncTick+0x24>)
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	200000a8 	.word	0x200000a8
 8004e68:	200050f8 	.word	0x200050f8

08004e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <HAL_GetTick+0x14>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	200050f8 	.word	0x200050f8

08004e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e8c:	f7ff ffee 	bl	8004e6c <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d005      	beq.n	8004eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_Delay+0x40>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004eaa:	bf00      	nop
 8004eac:	f7ff ffde 	bl	8004e6c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d8f7      	bhi.n	8004eac <HAL_Delay+0x28>
  {
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	200000a8 	.word	0x200000a8

08004ec8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e033      	b.n	8004f46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d109      	bne.n	8004efa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fd fdce 	bl	8002a88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d118      	bne.n	8004f38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004f0e:	f023 0302 	bic.w	r3, r3, #2
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fa82 	bl	8005424 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	f043 0201 	orr.w	r2, r3, #1
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40
 8004f36:	e001      	b.n	8004f3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_ADC_Start+0x1a>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e08a      	b.n	8005080 <HAL_ADC_Start+0x130>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d018      	beq.n	8004fb2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004f90:	4b3e      	ldr	r3, [pc, #248]	; (800508c <HAL_ADC_Start+0x13c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a3e      	ldr	r2, [pc, #248]	; (8005090 <HAL_ADC_Start+0x140>)
 8004f96:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9a:	0c9a      	lsrs	r2, r3, #18
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004fa4:	e002      	b.n	8004fac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f9      	bne.n	8004fa6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d15e      	bne.n	800507e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d007      	beq.n	8004ff2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d106      	bne.n	800500e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	f023 0206 	bic.w	r2, r3, #6
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	645a      	str	r2, [r3, #68]	; 0x44
 800500c:	e002      	b.n	8005014 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800501c:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <HAL_ADC_Start+0x144>)
 800501e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005028:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10f      	bne.n	8005056 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d11c      	bne.n	800507e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	e013      	b.n	800507e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a0f      	ldr	r2, [pc, #60]	; (8005098 <HAL_ADC_Start+0x148>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10e      	bne.n	800507e <HAL_ADC_Start+0x12e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d107      	bne.n	800507e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800507c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	20000048 	.word	0x20000048
 8005090:	431bde83 	.word	0x431bde83
 8005094:	40012300 	.word	0x40012300
 8005098:	40012000 	.word	0x40012000

0800509c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b8:	d113      	bne.n	80050e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80050c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c8:	d10b      	bne.n	80050e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e05c      	b.n	800519c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80050e2:	f7ff fec3 	bl	8004e6c <HAL_GetTick>
 80050e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050e8:	e01a      	b.n	8005120 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f0:	d016      	beq.n	8005120 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <HAL_ADC_PollForConversion+0x6c>
 80050f8:	f7ff feb8 	bl	8004e6c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d20b      	bcs.n	8005120 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	f043 0204 	orr.w	r2, r3, #4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e03d      	b.n	800519c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b02      	cmp	r3, #2
 800512c:	d1dd      	bne.n	80050ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f06f 0212 	mvn.w	r2, #18
 8005136:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d123      	bne.n	800519a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005156:	2b00      	cmp	r3, #0
 8005158:	d11f      	bne.n	800519a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005164:	2b00      	cmp	r3, #0
 8005166:	d006      	beq.n	8005176 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005172:	2b00      	cmp	r3, #0
 8005174:	d111      	bne.n	800519a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0201 	orr.w	r2, r3, #1
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
	...

080051c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_ADC_ConfigChannel+0x1c>
 80051d8:	2302      	movs	r3, #2
 80051da:	e113      	b.n	8005404 <HAL_ADC_ConfigChannel+0x244>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2b09      	cmp	r3, #9
 80051ea:	d925      	bls.n	8005238 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68d9      	ldr	r1, [r3, #12]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	4613      	mov	r3, r2
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	4413      	add	r3, r2
 8005200:	3b1e      	subs	r3, #30
 8005202:	2207      	movs	r2, #7
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43da      	mvns	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	400a      	ands	r2, r1
 8005210:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68d9      	ldr	r1, [r3, #12]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	4618      	mov	r0, r3
 8005224:	4603      	mov	r3, r0
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	4403      	add	r3, r0
 800522a:	3b1e      	subs	r3, #30
 800522c:	409a      	lsls	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	60da      	str	r2, [r3, #12]
 8005236:	e022      	b.n	800527e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6919      	ldr	r1, [r3, #16]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	461a      	mov	r2, r3
 8005246:	4613      	mov	r3, r2
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	2207      	movs	r2, #7
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	43da      	mvns	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	400a      	ands	r2, r1
 800525a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6919      	ldr	r1, [r3, #16]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689a      	ldr	r2, [r3, #8]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	4618      	mov	r0, r3
 800526e:	4603      	mov	r3, r0
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4403      	add	r3, r0
 8005274:	409a      	lsls	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b06      	cmp	r3, #6
 8005284:	d824      	bhi.n	80052d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	4613      	mov	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4413      	add	r3, r2
 8005296:	3b05      	subs	r3, #5
 8005298:	221f      	movs	r2, #31
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43da      	mvns	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	400a      	ands	r2, r1
 80052a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4618      	mov	r0, r3
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	4413      	add	r3, r2
 80052c0:	3b05      	subs	r3, #5
 80052c2:	fa00 f203 	lsl.w	r2, r0, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	635a      	str	r2, [r3, #52]	; 0x34
 80052ce:	e04c      	b.n	800536a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d824      	bhi.n	8005322 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685a      	ldr	r2, [r3, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	3b23      	subs	r3, #35	; 0x23
 80052ea:	221f      	movs	r2, #31
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	43da      	mvns	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	400a      	ands	r2, r1
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	b29b      	uxth	r3, r3
 8005306:	4618      	mov	r0, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	3b23      	subs	r3, #35	; 0x23
 8005314:	fa00 f203 	lsl.w	r2, r0, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	631a      	str	r2, [r3, #48]	; 0x30
 8005320:	e023      	b.n	800536a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4413      	add	r3, r2
 8005332:	3b41      	subs	r3, #65	; 0x41
 8005334:	221f      	movs	r2, #31
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43da      	mvns	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	400a      	ands	r2, r1
 8005342:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	4618      	mov	r0, r3
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	3b41      	subs	r3, #65	; 0x41
 800535e:	fa00 f203 	lsl.w	r2, r0, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800536a:	4b29      	ldr	r3, [pc, #164]	; (8005410 <HAL_ADC_ConfigChannel+0x250>)
 800536c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a28      	ldr	r2, [pc, #160]	; (8005414 <HAL_ADC_ConfigChannel+0x254>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10f      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x1d8>
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b12      	cmp	r3, #18
 800537e:	d10b      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <HAL_ADC_ConfigChannel+0x254>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d12b      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x23a>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <HAL_ADC_ConfigChannel+0x258>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d003      	beq.n	80053b4 <HAL_ADC_ConfigChannel+0x1f4>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b11      	cmp	r3, #17
 80053b2:	d122      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <HAL_ADC_ConfigChannel+0x258>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d111      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <HAL_ADC_ConfigChannel+0x25c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a11      	ldr	r2, [pc, #68]	; (8005420 <HAL_ADC_ConfigChannel+0x260>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	0c9a      	lsrs	r2, r3, #18
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80053ec:	e002      	b.n	80053f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f9      	bne.n	80053ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40012300 	.word	0x40012300
 8005414:	40012000 	.word	0x40012000
 8005418:	10000012 	.word	0x10000012
 800541c:	20000048 	.word	0x20000048
 8005420:	431bde83 	.word	0x431bde83

08005424 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800542c:	4b79      	ldr	r3, [pc, #484]	; (8005614 <ADC_Init+0x1f0>)
 800542e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	431a      	orrs	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6859      	ldr	r1, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	021a      	lsls	r2, r3, #8
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800547c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6859      	ldr	r1, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6899      	ldr	r1, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	4a58      	ldr	r2, [pc, #352]	; (8005618 <ADC_Init+0x1f4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d022      	beq.n	8005502 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6899      	ldr	r1, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6899      	ldr	r1, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	e00f      	b.n	8005522 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005520:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0202 	bic.w	r2, r2, #2
 8005530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6899      	ldr	r1, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	7e1b      	ldrb	r3, [r3, #24]
 800553c:	005a      	lsls	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 3020 	ldrb.w	r3, [r3, #32]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01b      	beq.n	8005588 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800555e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800556e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	3b01      	subs	r3, #1
 800557c:	035a      	lsls	r2, r3, #13
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	e007      	b.n	8005598 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005596:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	051a      	lsls	r2, r3, #20
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055da:	025a      	lsls	r2, r3, #9
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6899      	ldr	r1, [r3, #8]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	029a      	lsls	r2, r3, #10
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40012300 	.word	0x40012300
 8005618:	0f000001 	.word	0x0f000001

0800561c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f003 0307 	and.w	r3, r3, #7
 800562a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <__NVIC_SetPriorityGrouping+0x44>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005638:	4013      	ands	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800564e:	4a04      	ldr	r2, [pc, #16]	; (8005660 <__NVIC_SetPriorityGrouping+0x44>)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	60d3      	str	r3, [r2, #12]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	e000ed00 	.word	0xe000ed00

08005664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <__NVIC_GetPriorityGrouping+0x18>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	f003 0307 	and.w	r3, r3, #7
}
 8005672:	4618      	mov	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	e000ed00 	.word	0xe000ed00

08005680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	2b00      	cmp	r3, #0
 8005690:	db0b      	blt.n	80056aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	f003 021f 	and.w	r2, r3, #31
 8005698:	4907      	ldr	r1, [pc, #28]	; (80056b8 <__NVIC_EnableIRQ+0x38>)
 800569a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	2001      	movs	r0, #1
 80056a2:	fa00 f202 	lsl.w	r2, r0, r2
 80056a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	e000e100 	.word	0xe000e100

080056bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	6039      	str	r1, [r7, #0]
 80056c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	db0a      	blt.n	80056e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	490c      	ldr	r1, [pc, #48]	; (8005708 <__NVIC_SetPriority+0x4c>)
 80056d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056da:	0112      	lsls	r2, r2, #4
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	440b      	add	r3, r1
 80056e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056e4:	e00a      	b.n	80056fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	4908      	ldr	r1, [pc, #32]	; (800570c <__NVIC_SetPriority+0x50>)
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	3b04      	subs	r3, #4
 80056f4:	0112      	lsls	r2, r2, #4
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	440b      	add	r3, r1
 80056fa:	761a      	strb	r2, [r3, #24]
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	e000e100 	.word	0xe000e100
 800570c:	e000ed00 	.word	0xe000ed00

08005710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	; 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f1c3 0307 	rsb	r3, r3, #7
 800572a:	2b04      	cmp	r3, #4
 800572c:	bf28      	it	cs
 800572e:	2304      	movcs	r3, #4
 8005730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3304      	adds	r3, #4
 8005736:	2b06      	cmp	r3, #6
 8005738:	d902      	bls.n	8005740 <NVIC_EncodePriority+0x30>
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3b03      	subs	r3, #3
 800573e:	e000      	b.n	8005742 <NVIC_EncodePriority+0x32>
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	43da      	mvns	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	401a      	ands	r2, r3
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005758:	f04f 31ff 	mov.w	r1, #4294967295
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	43d9      	mvns	r1, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005768:	4313      	orrs	r3, r2
         );
}
 800576a:	4618      	mov	r0, r3
 800576c:	3724      	adds	r7, #36	; 0x24
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b082      	sub	sp, #8
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7ff ff4c 	bl	800561c <__NVIC_SetPriorityGrouping>
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800579e:	f7ff ff61 	bl	8005664 <__NVIC_GetPriorityGrouping>
 80057a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	6978      	ldr	r0, [r7, #20]
 80057aa:	f7ff ffb1 	bl	8005710 <NVIC_EncodePriority>
 80057ae:	4602      	mov	r2, r0
 80057b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b4:	4611      	mov	r1, r2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff ff80 	bl	80056bc <__NVIC_SetPriority>
}
 80057bc:	bf00      	nop
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff ff54 	bl	8005680 <__NVIC_EnableIRQ>
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e014      	b.n	800581c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	791b      	ldrb	r3, [r3, #4]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d105      	bne.n	8005808 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7fd f9bc 	bl	8002b80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3708      	adds	r7, #8
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583a:	d118      	bne.n	800586e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2204      	movs	r2, #4
 8005840:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005856:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005866:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f825 	bl	80058b8 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587c:	d118      	bne.n	80058b0 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2204      	movs	r2, #4
 8005882:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f043 0202 	orr.w	r2, r3, #2
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005898:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80058a8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f85b 	bl	8005966 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80058b0:	bf00      	nop
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	2300      	movs	r3, #0
 80058de:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	795b      	ldrb	r3, [r3, #5]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d101      	bne.n	80058ec <HAL_DAC_ConfigChannel+0x20>
 80058e8:	2302      	movs	r3, #2
 80058ea:	e036      	b.n	800595a <HAL_DAC_ConfigChannel+0x8e>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2202      	movs	r2, #2
 80058f6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005900:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43db      	mvns	r3, r3
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4013      	ands	r3, r2
 8005910:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4313      	orrs	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	22c0      	movs	r2, #192	; 0xc0
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43da      	mvns	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	400a      	ands	r2, r1
 800594a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800596e:	bf00      	nop
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
	...

0800597c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e0cf      	b.n	8005b2e <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a69      	ldr	r2, [pc, #420]	; (8005b38 <HAL_DFSDM_ChannelInit+0x1bc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_DFSDM_ChannelInit+0x3a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a67      	ldr	r2, [pc, #412]	; (8005b3c <HAL_DFSDM_ChannelInit+0x1c0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_DFSDM_ChannelInit+0x3a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a66      	ldr	r2, [pc, #408]	; (8005b40 <HAL_DFSDM_ChannelInit+0x1c4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_DFSDM_ChannelInit+0x3a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a64      	ldr	r2, [pc, #400]	; (8005b44 <HAL_DFSDM_ChannelInit+0x1c8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d106      	bne.n	80059c4 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 80059b6:	4b64      	ldr	r3, [pc, #400]	; (8005b48 <HAL_DFSDM_ChannelInit+0x1cc>)
 80059b8:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 80059ba:	4b64      	ldr	r3, [pc, #400]	; (8005b4c <HAL_DFSDM_ChannelInit+0x1d0>)
 80059bc:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 80059be:	4b5e      	ldr	r3, [pc, #376]	; (8005b38 <HAL_DFSDM_ChannelInit+0x1bc>)
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	e005      	b.n	80059d0 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 80059c4:	4b62      	ldr	r3, [pc, #392]	; (8005b50 <HAL_DFSDM_ChannelInit+0x1d4>)
 80059c6:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 80059c8:	4b62      	ldr	r3, [pc, #392]	; (8005b54 <HAL_DFSDM_ChannelInit+0x1d8>)
 80059ca:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 80059cc:	4b62      	ldr	r3, [pc, #392]	; (8005b58 <HAL_DFSDM_ChannelInit+0x1dc>)
 80059ce:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 f8c1 	bl	8005b5c <DFSDM_GetChannelFromInstance>
 80059da:	4603      	mov	r3, r0
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4413      	add	r3, r2
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0a0      	b.n	8005b2e <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7fd f913 	bl	8002c18 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	1c5a      	adds	r2, r3, #1
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d125      	bne.n	8005a50 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	791b      	ldrb	r3, [r3, #4]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d108      	bne.n	8005a44 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	041b      	lsls	r3, r3, #16
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8005a5e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8005a6e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8005a74:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 020f 	bic.w	r2, r2, #15
 8005a8c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8005ab4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6899      	ldr	r1, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f002 0207 	and.w	r2, r2, #7
 8005ae0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8005af4:	431a      	orrs	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b0c:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f81e 	bl	8005b5c <DFSDM_GetChannelFromInstance>
 8005b20:	4603      	mov	r3, r0
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	40016000 	.word	0x40016000
 8005b3c:	40016020 	.word	0x40016020
 8005b40:	40016040 	.word	0x40016040
 8005b44:	40016060 	.word	0x40016060
 8005b48:	200001bc 	.word	0x200001bc
 8005b4c:	200001c0 	.word	0x200001c0
 8005b50:	200001d0 	.word	0x200001d0
 8005b54:	200001d4 	.word	0x200001d4
 8005b58:	40016400 	.word	0x40016400

08005b5c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a24      	ldr	r2, [pc, #144]	; (8005bf8 <DFSDM_GetChannelFromInstance+0x9c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d003      	beq.n	8005b74 <DFSDM_GetChannelFromInstance+0x18>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a23      	ldr	r2, [pc, #140]	; (8005bfc <DFSDM_GetChannelFromInstance+0xa0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d102      	bne.n	8005b7a <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e037      	b.n	8005bea <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a20      	ldr	r2, [pc, #128]	; (8005c00 <DFSDM_GetChannelFromInstance+0xa4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <DFSDM_GetChannelFromInstance+0x2e>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a1f      	ldr	r2, [pc, #124]	; (8005c04 <DFSDM_GetChannelFromInstance+0xa8>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d102      	bne.n	8005b90 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e02c      	b.n	8005bea <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <DFSDM_GetChannelFromInstance+0xac>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d003      	beq.n	8005ba0 <DFSDM_GetChannelFromInstance+0x44>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <DFSDM_GetChannelFromInstance+0xb0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d102      	bne.n	8005ba6 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	e021      	b.n	8005bea <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a19      	ldr	r2, [pc, #100]	; (8005c10 <DFSDM_GetChannelFromInstance+0xb4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <DFSDM_GetChannelFromInstance+0x5a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <DFSDM_GetChannelFromInstance+0xb8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d102      	bne.n	8005bbc <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e016      	b.n	8005bea <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a16      	ldr	r2, [pc, #88]	; (8005c18 <DFSDM_GetChannelFromInstance+0xbc>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d102      	bne.n	8005bca <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e00f      	b.n	8005bea <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <DFSDM_GetChannelFromInstance+0xc0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d102      	bne.n	8005bd8 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8005bd2:	2305      	movs	r3, #5
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	e008      	b.n	8005bea <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a11      	ldr	r2, [pc, #68]	; (8005c20 <DFSDM_GetChannelFromInstance+0xc4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d102      	bne.n	8005be6 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8005be0:	2306      	movs	r3, #6
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	e001      	b.n	8005bea <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8005be6:	2307      	movs	r3, #7
 8005be8:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8005bea:	68fb      	ldr	r3, [r7, #12]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	40016000 	.word	0x40016000
 8005bfc:	40016400 	.word	0x40016400
 8005c00:	40016020 	.word	0x40016020
 8005c04:	40016420 	.word	0x40016420
 8005c08:	40016040 	.word	0x40016040
 8005c0c:	40016440 	.word	0x40016440
 8005c10:	40016060 	.word	0x40016060
 8005c14:	40016460 	.word	0x40016460
 8005c18:	40016480 	.word	0x40016480
 8005c1c:	400164a0 	.word	0x400164a0
 8005c20:	400164c0 	.word	0x400164c0

08005c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c30:	f7ff f91c 	bl	8004e6c <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e099      	b.n	8005d74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c60:	e00f      	b.n	8005c82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c62:	f7ff f903 	bl	8004e6c <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b05      	cmp	r3, #5
 8005c6e:	d908      	bls.n	8005c82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2203      	movs	r2, #3
 8005c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e078      	b.n	8005d74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e8      	bne.n	8005c62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4b38      	ldr	r3, [pc, #224]	; (8005d7c <HAL_DMA_Init+0x158>)
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d107      	bne.n	8005cec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f023 0307 	bic.w	r3, r3, #7
 8005d02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d117      	bne.n	8005d46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00e      	beq.n	8005d46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fa91 	bl	8006250 <DMA_CheckFifoParam>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2240      	movs	r2, #64	; 0x40
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d42:	2301      	movs	r3, #1
 8005d44:	e016      	b.n	8005d74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa48 	bl	80061e4 <DMA_CalcBaseAndBitshift>
 8005d54:	4603      	mov	r3, r0
 8005d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d5c:	223f      	movs	r2, #63	; 0x3f
 8005d5e:	409a      	lsls	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	e010803f 	.word	0xe010803f

08005d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_DMA_Start_IT+0x26>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e040      	b.n	8005e28 <HAL_DMA_Start_IT+0xa8>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d12f      	bne.n	8005e1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	68b9      	ldr	r1, [r7, #8]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f9da 	bl	8006188 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	223f      	movs	r2, #63	; 0x3f
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0216 	orr.w	r2, r2, #22
 8005dee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d007      	beq.n	8005e08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0208 	orr.w	r2, r2, #8
 8005e06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	e005      	b.n	8005e26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
 8005e24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d004      	beq.n	8005e4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2280      	movs	r2, #128	; 0x80
 8005e48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e00c      	b.n	8005e68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2205      	movs	r2, #5
 8005e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e80:	4b92      	ldr	r3, [pc, #584]	; (80060cc <HAL_DMA_IRQHandler+0x258>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a92      	ldr	r2, [pc, #584]	; (80060d0 <HAL_DMA_IRQHandler+0x25c>)
 8005e86:	fba2 2303 	umull	r2, r3, r2, r3
 8005e8a:	0a9b      	lsrs	r3, r3, #10
 8005e8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	2208      	movs	r2, #8
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d01a      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d013      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0204 	bic.w	r2, r2, #4
 8005ec6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ecc:	2208      	movs	r2, #8
 8005ece:	409a      	lsls	r2, r3
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed8:	f043 0201 	orr.w	r2, r3, #1
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d012      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f02:	2201      	movs	r2, #1
 8005f04:	409a      	lsls	r2, r3
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0e:	f043 0202 	orr.w	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d012      	beq.n	8005f4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	2204      	movs	r2, #4
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f44:	f043 0204 	orr.w	r2, r3, #4
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f50:	2210      	movs	r2, #16
 8005f52:	409a      	lsls	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4013      	ands	r3, r2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d043      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d03c      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6e:	2210      	movs	r2, #16
 8005f70:	409a      	lsls	r2, r3
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d018      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d108      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d024      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	4798      	blx	r3
 8005fa2:	e01f      	b.n	8005fe4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01b      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
 8005fb4:	e016      	b.n	8005fe4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d107      	bne.n	8005fd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0208 	bic.w	r2, r2, #8
 8005fd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	2220      	movs	r2, #32
 8005fea:	409a      	lsls	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 808e 	beq.w	8006112 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8086 	beq.w	8006112 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800600a:	2220      	movs	r2, #32
 800600c:	409a      	lsls	r2, r3
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b05      	cmp	r3, #5
 800601c:	d136      	bne.n	800608c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0216 	bic.w	r2, r2, #22
 800602c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800603c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	d103      	bne.n	800604e <HAL_DMA_IRQHandler+0x1da>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0208 	bic.w	r2, r2, #8
 800605c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	223f      	movs	r2, #63	; 0x3f
 8006064:	409a      	lsls	r2, r3
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607e:	2b00      	cmp	r3, #0
 8006080:	d07d      	beq.n	800617e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
        }
        return;
 800608a:	e078      	b.n	800617e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01c      	beq.n	80060d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d108      	bne.n	80060ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d030      	beq.n	8006112 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	4798      	blx	r3
 80060b8:	e02b      	b.n	8006112 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d027      	beq.n	8006112 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
 80060ca:	e022      	b.n	8006112 <HAL_DMA_IRQHandler+0x29e>
 80060cc:	20000048 	.word	0x20000048
 80060d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10f      	bne.n	8006102 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0210 	bic.w	r2, r2, #16
 80060f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	2b00      	cmp	r3, #0
 8006118:	d032      	beq.n	8006180 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d022      	beq.n	800616c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2205      	movs	r2, #5
 800612a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3301      	adds	r3, #1
 8006142:	60bb      	str	r3, [r7, #8]
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	429a      	cmp	r2, r3
 8006148:	d307      	bcc.n	800615a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f2      	bne.n	800613e <HAL_DMA_IRQHandler+0x2ca>
 8006158:	e000      	b.n	800615c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800615a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
 800617c:	e000      	b.n	8006180 <HAL_DMA_IRQHandler+0x30c>
        return;
 800617e:	bf00      	nop
    }
  }
}
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop

08006188 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80061a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b40      	cmp	r3, #64	; 0x40
 80061b4:	d108      	bne.n	80061c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80061c6:	e007      	b.n	80061d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	3b10      	subs	r3, #16
 80061f4:	4a14      	ldr	r2, [pc, #80]	; (8006248 <DMA_CalcBaseAndBitshift+0x64>)
 80061f6:	fba2 2303 	umull	r2, r3, r2, r3
 80061fa:	091b      	lsrs	r3, r3, #4
 80061fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80061fe:	4a13      	ldr	r2, [pc, #76]	; (800624c <DMA_CalcBaseAndBitshift+0x68>)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b03      	cmp	r3, #3
 8006210:	d909      	bls.n	8006226 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	1d1a      	adds	r2, r3, #4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	659a      	str	r2, [r3, #88]	; 0x58
 8006224:	e007      	b.n	8006236 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	aaaaaaab 	.word	0xaaaaaaab
 800624c:	0801809c 	.word	0x0801809c

08006250 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006260:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11f      	bne.n	80062aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d855      	bhi.n	800631c <DMA_CheckFifoParam+0xcc>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <DMA_CheckFifoParam+0x28>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	08006289 	.word	0x08006289
 800627c:	0800629b 	.word	0x0800629b
 8006280:	08006289 	.word	0x08006289
 8006284:	0800631d 	.word	0x0800631d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d045      	beq.n	8006320 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006298:	e042      	b.n	8006320 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062a2:	d13f      	bne.n	8006324 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062a8:	e03c      	b.n	8006324 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b2:	d121      	bne.n	80062f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d836      	bhi.n	8006328 <DMA_CheckFifoParam+0xd8>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <DMA_CheckFifoParam+0x70>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	080062d7 	.word	0x080062d7
 80062c8:	080062d1 	.word	0x080062d1
 80062cc:	080062e9 	.word	0x080062e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]
      break;
 80062d4:	e02f      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d024      	beq.n	800632c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062e6:	e021      	b.n	800632c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062f0:	d11e      	bne.n	8006330 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80062f6:	e01b      	b.n	8006330 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d902      	bls.n	8006304 <DMA_CheckFifoParam+0xb4>
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d003      	beq.n	800630a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006302:	e018      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
      break;
 8006308:	e015      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00e      	beq.n	8006334 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	73fb      	strb	r3, [r7, #15]
      break;
 800631a:	e00b      	b.n	8006334 <DMA_CheckFifoParam+0xe4>
      break;
 800631c:	bf00      	nop
 800631e:	e00a      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
      break;
 8006320:	bf00      	nop
 8006322:	e008      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
      break;
 8006324:	bf00      	nop
 8006326:	e006      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
      break;
 8006328:	bf00      	nop
 800632a:	e004      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
      break;
 800632c:	bf00      	nop
 800632e:	e002      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
      break;   
 8006330:	bf00      	nop
 8006332:	e000      	b.n	8006336 <DMA_CheckFifoParam+0xe6>
      break;
 8006334:	bf00      	nop
    }
  } 
  
  return status; 
 8006336:	7bfb      	ldrb	r3, [r7, #15]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e081      	b.n	800645a <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fc fd66 	bl	8002e3c <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2224      	movs	r2, #36	; 0x24
 8006374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f022 0201 	bic.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006394:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a4:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d107      	bne.n	80063be <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063ba:	609a      	str	r2, [r3, #8]
 80063bc:	e006      	b.n	80063cc <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689a      	ldr	r2, [r3, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80063ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d104      	bne.n	80063de <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6812      	ldr	r2, [r2, #0]
 80063e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006400:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691a      	ldr	r2, [r3, #16]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	ea42 0103 	orr.w	r1, r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	021a      	lsls	r2, r3, #8
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	69d9      	ldr	r1, [r3, #28]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1a      	ldr	r2, [r3, #32]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006472:	b2db      	uxtb	r3, r3
 8006474:	2b20      	cmp	r3, #32
 8006476:	d138      	bne.n	80064ea <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800647e:	2b01      	cmp	r3, #1
 8006480:	d101      	bne.n	8006486 <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8006482:	2302      	movs	r3, #2
 8006484:	e032      	b.n	80064ec <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2224      	movs	r2, #36	; 0x24
 8006492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064b4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6819      	ldr	r1, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	430a      	orrs	r2, r1
 80064c4:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2220      	movs	r2, #32
 80064da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e000      	b.n	80064ec <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064ea:	2302      	movs	r3, #2
  }
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b089      	sub	sp, #36	; 0x24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800650a:	2300      	movs	r3, #0
 800650c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
 8006512:	e165      	b.n	80067e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006514:	2201      	movs	r2, #1
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	fa02 f303 	lsl.w	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	4013      	ands	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	429a      	cmp	r2, r3
 800652e:	f040 8154 	bne.w	80067da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d00b      	beq.n	8006552 <HAL_GPIO_Init+0x5a>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d007      	beq.n	8006552 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006546:	2b11      	cmp	r3, #17
 8006548:	d003      	beq.n	8006552 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b12      	cmp	r3, #18
 8006550:	d130      	bne.n	80065b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	2203      	movs	r2, #3
 800655e:	fa02 f303 	lsl.w	r3, r2, r3
 8006562:	43db      	mvns	r3, r3
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	4013      	ands	r3, r2
 8006568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	fa02 f303 	lsl.w	r3, r2, r3
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	4313      	orrs	r3, r2
 800657a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006588:	2201      	movs	r2, #1
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	43db      	mvns	r3, r3
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	4013      	ands	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	091b      	lsrs	r3, r3, #4
 800659e:	f003 0201 	and.w	r2, r3, #1
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	2203      	movs	r2, #3
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4313      	orrs	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d003      	beq.n	80065f4 <HAL_GPIO_Init+0xfc>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b12      	cmp	r3, #18
 80065f2:	d123      	bne.n	800663c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	08da      	lsrs	r2, r3, #3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3208      	adds	r2, #8
 80065fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	220f      	movs	r2, #15
 800660c:	fa02 f303 	lsl.w	r3, r2, r3
 8006610:	43db      	mvns	r3, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4013      	ands	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	69ba      	ldr	r2, [r7, #24]
 800662a:	4313      	orrs	r3, r2
 800662c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	08da      	lsrs	r2, r3, #3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	3208      	adds	r2, #8
 8006636:	69b9      	ldr	r1, [r7, #24]
 8006638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	2203      	movs	r2, #3
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	43db      	mvns	r3, r3
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	4013      	ands	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f003 0203 	and.w	r2, r3, #3
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4313      	orrs	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80ae 	beq.w	80067da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	4b5c      	ldr	r3, [pc, #368]	; (80067f4 <HAL_GPIO_Init+0x2fc>)
 8006684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006686:	4a5b      	ldr	r2, [pc, #364]	; (80067f4 <HAL_GPIO_Init+0x2fc>)
 8006688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800668c:	6453      	str	r3, [r2, #68]	; 0x44
 800668e:	4b59      	ldr	r3, [pc, #356]	; (80067f4 <HAL_GPIO_Init+0x2fc>)
 8006690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800669a:	4a57      	ldr	r2, [pc, #348]	; (80067f8 <HAL_GPIO_Init+0x300>)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	089b      	lsrs	r3, r3, #2
 80066a0:	3302      	adds	r3, #2
 80066a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	220f      	movs	r2, #15
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a4e      	ldr	r2, [pc, #312]	; (80067fc <HAL_GPIO_Init+0x304>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d025      	beq.n	8006712 <HAL_GPIO_Init+0x21a>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a4d      	ldr	r2, [pc, #308]	; (8006800 <HAL_GPIO_Init+0x308>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d01f      	beq.n	800670e <HAL_GPIO_Init+0x216>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a4c      	ldr	r2, [pc, #304]	; (8006804 <HAL_GPIO_Init+0x30c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d019      	beq.n	800670a <HAL_GPIO_Init+0x212>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a4b      	ldr	r2, [pc, #300]	; (8006808 <HAL_GPIO_Init+0x310>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <HAL_GPIO_Init+0x20e>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a4a      	ldr	r2, [pc, #296]	; (800680c <HAL_GPIO_Init+0x314>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00d      	beq.n	8006702 <HAL_GPIO_Init+0x20a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a49      	ldr	r2, [pc, #292]	; (8006810 <HAL_GPIO_Init+0x318>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d007      	beq.n	80066fe <HAL_GPIO_Init+0x206>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a48      	ldr	r2, [pc, #288]	; (8006814 <HAL_GPIO_Init+0x31c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d101      	bne.n	80066fa <HAL_GPIO_Init+0x202>
 80066f6:	2306      	movs	r3, #6
 80066f8:	e00c      	b.n	8006714 <HAL_GPIO_Init+0x21c>
 80066fa:	2307      	movs	r3, #7
 80066fc:	e00a      	b.n	8006714 <HAL_GPIO_Init+0x21c>
 80066fe:	2305      	movs	r3, #5
 8006700:	e008      	b.n	8006714 <HAL_GPIO_Init+0x21c>
 8006702:	2304      	movs	r3, #4
 8006704:	e006      	b.n	8006714 <HAL_GPIO_Init+0x21c>
 8006706:	2303      	movs	r3, #3
 8006708:	e004      	b.n	8006714 <HAL_GPIO_Init+0x21c>
 800670a:	2302      	movs	r3, #2
 800670c:	e002      	b.n	8006714 <HAL_GPIO_Init+0x21c>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <HAL_GPIO_Init+0x21c>
 8006712:	2300      	movs	r3, #0
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	f002 0203 	and.w	r2, r2, #3
 800671a:	0092      	lsls	r2, r2, #2
 800671c:	4093      	lsls	r3, r2
 800671e:	69ba      	ldr	r2, [r7, #24]
 8006720:	4313      	orrs	r3, r2
 8006722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006724:	4934      	ldr	r1, [pc, #208]	; (80067f8 <HAL_GPIO_Init+0x300>)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	089b      	lsrs	r3, r3, #2
 800672a:	3302      	adds	r3, #2
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006732:	4b39      	ldr	r3, [pc, #228]	; (8006818 <HAL_GPIO_Init+0x320>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	43db      	mvns	r3, r3
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	4013      	ands	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4313      	orrs	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006756:	4a30      	ldr	r2, [pc, #192]	; (8006818 <HAL_GPIO_Init+0x320>)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800675c:	4b2e      	ldr	r3, [pc, #184]	; (8006818 <HAL_GPIO_Init+0x320>)
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	43db      	mvns	r3, r3
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	4013      	ands	r3, r2
 800676a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4313      	orrs	r3, r2
 800677e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006780:	4a25      	ldr	r2, [pc, #148]	; (8006818 <HAL_GPIO_Init+0x320>)
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006786:	4b24      	ldr	r3, [pc, #144]	; (8006818 <HAL_GPIO_Init+0x320>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	43db      	mvns	r3, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	4013      	ands	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067aa:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <HAL_GPIO_Init+0x320>)
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067b0:	4b19      	ldr	r3, [pc, #100]	; (8006818 <HAL_GPIO_Init+0x320>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	43db      	mvns	r3, r3
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	4013      	ands	r3, r2
 80067be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067d4:	4a10      	ldr	r2, [pc, #64]	; (8006818 <HAL_GPIO_Init+0x320>)
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	3301      	adds	r3, #1
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	f67f ae96 	bls.w	8006514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067e8:	bf00      	nop
 80067ea:	3724      	adds	r7, #36	; 0x24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40023800 	.word	0x40023800
 80067f8:	40013800 	.word	0x40013800
 80067fc:	40020000 	.word	0x40020000
 8006800:	40020400 	.word	0x40020400
 8006804:	40020800 	.word	0x40020800
 8006808:	40020c00 	.word	0x40020c00
 800680c:	40021000 	.word	0x40021000
 8006810:	40021400 	.word	0x40021400
 8006814:	40021800 	.word	0x40021800
 8006818:	40013c00 	.word	0x40013c00

0800681c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	460b      	mov	r3, r1
 8006826:	807b      	strh	r3, [r7, #2]
 8006828:	4613      	mov	r3, r2
 800682a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800682c:	787b      	ldrb	r3, [r7, #1]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006832:	887a      	ldrh	r2, [r7, #2]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006838:	e003      	b.n	8006842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800683a:	887b      	ldrh	r3, [r7, #2]
 800683c:	041a      	lsls	r2, r3, #16
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	619a      	str	r2, [r3, #24]
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695a      	ldr	r2, [r3, #20]
 800685e:	887b      	ldrh	r3, [r7, #2]
 8006860:	401a      	ands	r2, r3
 8006862:	887b      	ldrh	r3, [r7, #2]
 8006864:	429a      	cmp	r2, r3
 8006866:	d104      	bne.n	8006872 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006868:	887b      	ldrh	r3, [r7, #2]
 800686a:	041a      	lsls	r2, r3, #16
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006870:	e002      	b.n	8006878 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8006872:	887a      	ldrh	r2, [r7, #2]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	619a      	str	r2, [r3, #24]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006886:	b08f      	sub	sp, #60	; 0x3c
 8006888:	af0a      	add	r7, sp, #40	; 0x28
 800688a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e054      	b.n	8006940 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f00d fc47 	bl	8014144 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2203      	movs	r2, #3
 80068ba:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d102      	bne.n	80068d0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f006 fd87 	bl	800d3e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	687e      	ldr	r6, [r7, #4]
 80068e2:	466d      	mov	r5, sp
 80068e4:	f106 0410 	add.w	r4, r6, #16
 80068e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80068ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80068f8:	1d33      	adds	r3, r6, #4
 80068fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80068fc:	6838      	ldr	r0, [r7, #0]
 80068fe:	f006 fd01 	bl	800d304 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2101      	movs	r1, #1
 8006908:	4618      	mov	r0, r3
 800690a:	f006 fd7e 	bl	800d40a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	687e      	ldr	r6, [r7, #4]
 8006916:	466d      	mov	r5, sp
 8006918:	f106 0410 	add.w	r4, r6, #16
 800691c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800691e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006924:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006928:	e885 0003 	stmia.w	r5, {r0, r1}
 800692c:	1d33      	adds	r3, r6, #4
 800692e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006930:	6838      	ldr	r0, [r7, #0]
 8006932:	f006 fe91 	bl	800d658 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006948 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006948:	b590      	push	{r4, r7, lr}
 800694a:	b089      	sub	sp, #36	; 0x24
 800694c:	af04      	add	r7, sp, #16
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	4608      	mov	r0, r1
 8006952:	4611      	mov	r1, r2
 8006954:	461a      	mov	r2, r3
 8006956:	4603      	mov	r3, r0
 8006958:	70fb      	strb	r3, [r7, #3]
 800695a:	460b      	mov	r3, r1
 800695c:	70bb      	strb	r3, [r7, #2]
 800695e:	4613      	mov	r3, r2
 8006960:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8006968:	2b01      	cmp	r3, #1
 800696a:	d101      	bne.n	8006970 <HAL_HCD_HC_Init+0x28>
 800696c:	2302      	movs	r3, #2
 800696e:	e07f      	b.n	8006a70 <HAL_HCD_HC_Init+0x128>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8006978:	78fa      	ldrb	r2, [r7, #3]
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	440b      	add	r3, r1
 8006986:	333d      	adds	r3, #61	; 0x3d
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	00db      	lsls	r3, r3, #3
 8006998:	440b      	add	r3, r1
 800699a:	3338      	adds	r3, #56	; 0x38
 800699c:	787a      	ldrb	r2, [r7, #1]
 800699e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80069a0:	78fa      	ldrb	r2, [r7, #3]
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	440b      	add	r3, r1
 80069ae:	3340      	adds	r3, #64	; 0x40
 80069b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069b2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	6879      	ldr	r1, [r7, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	440b      	add	r3, r1
 80069c2:	3339      	adds	r3, #57	; 0x39
 80069c4:	78fa      	ldrb	r2, [r7, #3]
 80069c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80069c8:	78fa      	ldrb	r2, [r7, #3]
 80069ca:	6879      	ldr	r1, [r7, #4]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	440b      	add	r3, r1
 80069d6:	333f      	adds	r3, #63	; 0x3f
 80069d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80069dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80069de:	78fa      	ldrb	r2, [r7, #3]
 80069e0:	78bb      	ldrb	r3, [r7, #2]
 80069e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e6:	b2d8      	uxtb	r0, r3
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	4613      	mov	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	4413      	add	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	440b      	add	r3, r1
 80069f4:	333a      	adds	r3, #58	; 0x3a
 80069f6:	4602      	mov	r2, r0
 80069f8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80069fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	da0a      	bge.n	8006a18 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006a02:	78fa      	ldrb	r2, [r7, #3]
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	440b      	add	r3, r1
 8006a10:	333b      	adds	r3, #59	; 0x3b
 8006a12:	2201      	movs	r2, #1
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e009      	b.n	8006a2c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006a18:	78fa      	ldrb	r2, [r7, #3]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	440b      	add	r3, r1
 8006a26:	333b      	adds	r3, #59	; 0x3b
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	440b      	add	r3, r1
 8006a3a:	333c      	adds	r3, #60	; 0x3c
 8006a3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006a40:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	787c      	ldrb	r4, [r7, #1]
 8006a48:	78ba      	ldrb	r2, [r7, #2]
 8006a4a:	78f9      	ldrb	r1, [r7, #3]
 8006a4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a4e:	9302      	str	r3, [sp, #8]
 8006a50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	4623      	mov	r3, r4
 8006a5e:	f006 ff77 	bl	800d950 <USB_HC_Init>
 8006a62:	4603      	mov	r3, r0
 8006a64:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd90      	pop	{r4, r7, pc}

08006a78 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d101      	bne.n	8006a96 <HAL_HCD_HC_Halt+0x1e>
 8006a92:	2302      	movs	r3, #2
 8006a94:	e00f      	b.n	8006ab6 <HAL_HCD_HC_Halt+0x3e>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	78fa      	ldrb	r2, [r7, #3]
 8006aa4:	4611      	mov	r1, r2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f007 f9b3 	bl	800de12 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	461a      	mov	r2, r3
 8006ace:	4603      	mov	r3, r0
 8006ad0:	70fb      	strb	r3, [r7, #3]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70bb      	strb	r3, [r7, #2]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006ada:	78fa      	ldrb	r2, [r7, #3]
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	440b      	add	r3, r1
 8006ae8:	333b      	adds	r3, #59	; 0x3b
 8006aea:	78ba      	ldrb	r2, [r7, #2]
 8006aec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	440b      	add	r3, r1
 8006afc:	333f      	adds	r3, #63	; 0x3f
 8006afe:	787a      	ldrb	r2, [r7, #1]
 8006b00:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006b02:	7c3b      	ldrb	r3, [r7, #16]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d114      	bne.n	8006b32 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	440b      	add	r3, r1
 8006b16:	3342      	adds	r3, #66	; 0x42
 8006b18:	2203      	movs	r2, #3
 8006b1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	6879      	ldr	r1, [r7, #4]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	440b      	add	r3, r1
 8006b2a:	333d      	adds	r3, #61	; 0x3d
 8006b2c:	7f3a      	ldrb	r2, [r7, #28]
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e009      	b.n	8006b46 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006b32:	78fa      	ldrb	r2, [r7, #3]
 8006b34:	6879      	ldr	r1, [r7, #4]
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	00db      	lsls	r3, r3, #3
 8006b3e:	440b      	add	r3, r1
 8006b40:	3342      	adds	r3, #66	; 0x42
 8006b42:	2202      	movs	r2, #2
 8006b44:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006b46:	787b      	ldrb	r3, [r7, #1]
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	f200 80d6 	bhi.w	8006cfa <HAL_HCD_HC_SubmitRequest+0x23a>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006ce5 	.word	0x08006ce5
 8006b5c:	08006bd1 	.word	0x08006bd1
 8006b60:	08006c5b 	.word	0x08006c5b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006b64:	7c3b      	ldrb	r3, [r7, #16]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	f040 80c9 	bne.w	8006cfe <HAL_HCD_HC_SubmitRequest+0x23e>
 8006b6c:	78bb      	ldrb	r3, [r7, #2]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 80c5 	bne.w	8006cfe <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8006b74:	8b3b      	ldrh	r3, [r7, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	4613      	mov	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4413      	add	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	440b      	add	r3, r1
 8006b88:	3351      	adds	r3, #81	; 0x51
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006b8e:	78fa      	ldrb	r2, [r7, #3]
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	4413      	add	r3, r2
 8006b98:	00db      	lsls	r3, r3, #3
 8006b9a:	440b      	add	r3, r1
 8006b9c:	3351      	adds	r3, #81	; 0x51
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10a      	bne.n	8006bba <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ba4:	78fa      	ldrb	r2, [r7, #3]
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	440b      	add	r3, r1
 8006bb2:	3342      	adds	r3, #66	; 0x42
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006bb8:	e0a1      	b.n	8006cfe <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006bba:	78fa      	ldrb	r2, [r7, #3]
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	440b      	add	r3, r1
 8006bc8:	3342      	adds	r3, #66	; 0x42
 8006bca:	2202      	movs	r2, #2
 8006bcc:	701a      	strb	r2, [r3, #0]
      break;
 8006bce:	e096      	b.n	8006cfe <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006bd0:	78bb      	ldrb	r3, [r7, #2]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d120      	bne.n	8006c18 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	00db      	lsls	r3, r3, #3
 8006be2:	440b      	add	r3, r1
 8006be4:	3351      	adds	r3, #81	; 0x51
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10a      	bne.n	8006c02 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	009b      	lsls	r3, r3, #2
 8006bf4:	4413      	add	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	440b      	add	r3, r1
 8006bfa:	3342      	adds	r3, #66	; 0x42
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006c00:	e07e      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	440b      	add	r3, r1
 8006c10:	3342      	adds	r3, #66	; 0x42
 8006c12:	2202      	movs	r2, #2
 8006c14:	701a      	strb	r2, [r3, #0]
      break;
 8006c16:	e073      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006c18:	78fa      	ldrb	r2, [r7, #3]
 8006c1a:	6879      	ldr	r1, [r7, #4]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	440b      	add	r3, r1
 8006c26:	3350      	adds	r3, #80	; 0x50
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	00db      	lsls	r3, r3, #3
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3342      	adds	r3, #66	; 0x42
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
      break;
 8006c42:	e05d      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c44:	78fa      	ldrb	r2, [r7, #3]
 8006c46:	6879      	ldr	r1, [r7, #4]
 8006c48:	4613      	mov	r3, r2
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	4413      	add	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	440b      	add	r3, r1
 8006c52:	3342      	adds	r3, #66	; 0x42
 8006c54:	2202      	movs	r2, #2
 8006c56:	701a      	strb	r2, [r3, #0]
      break;
 8006c58:	e052      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006c5a:	78bb      	ldrb	r3, [r7, #2]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d120      	bne.n	8006ca2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	440b      	add	r3, r1
 8006c6e:	3351      	adds	r3, #81	; 0x51
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006c76:	78fa      	ldrb	r2, [r7, #3]
 8006c78:	6879      	ldr	r1, [r7, #4]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	440b      	add	r3, r1
 8006c84:	3342      	adds	r3, #66	; 0x42
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006c8a:	e039      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006c8c:	78fa      	ldrb	r2, [r7, #3]
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	4613      	mov	r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	4413      	add	r3, r2
 8006c96:	00db      	lsls	r3, r3, #3
 8006c98:	440b      	add	r3, r1
 8006c9a:	3342      	adds	r3, #66	; 0x42
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	701a      	strb	r2, [r3, #0]
      break;
 8006ca0:	e02e      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006ca2:	78fa      	ldrb	r2, [r7, #3]
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4413      	add	r3, r2
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	440b      	add	r3, r1
 8006cb0:	3350      	adds	r3, #80	; 0x50
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10a      	bne.n	8006cce <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006cb8:	78fa      	ldrb	r2, [r7, #3]
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4413      	add	r3, r2
 8006cc2:	00db      	lsls	r3, r3, #3
 8006cc4:	440b      	add	r3, r1
 8006cc6:	3342      	adds	r3, #66	; 0x42
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
      break;
 8006ccc:	e018      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006cce:	78fa      	ldrb	r2, [r7, #3]
 8006cd0:	6879      	ldr	r1, [r7, #4]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	440b      	add	r3, r1
 8006cdc:	3342      	adds	r3, #66	; 0x42
 8006cde:	2202      	movs	r2, #2
 8006ce0:	701a      	strb	r2, [r3, #0]
      break;
 8006ce2:	e00d      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ce4:	78fa      	ldrb	r2, [r7, #3]
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	440b      	add	r3, r1
 8006cf2:	3342      	adds	r3, #66	; 0x42
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	701a      	strb	r2, [r3, #0]
      break;
 8006cf8:	e002      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8006cfa:	bf00      	nop
 8006cfc:	e000      	b.n	8006d00 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8006cfe:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006d00:	78fa      	ldrb	r2, [r7, #3]
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3344      	adds	r3, #68	; 0x44
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006d14:	78fa      	ldrb	r2, [r7, #3]
 8006d16:	8b39      	ldrh	r1, [r7, #24]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4403      	add	r3, r0
 8006d24:	3348      	adds	r3, #72	; 0x48
 8006d26:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	6879      	ldr	r1, [r7, #4]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	440b      	add	r3, r1
 8006d36:	335c      	adds	r3, #92	; 0x5c
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006d3c:	78fa      	ldrb	r2, [r7, #3]
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	4613      	mov	r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	4413      	add	r3, r2
 8006d46:	00db      	lsls	r3, r3, #3
 8006d48:	440b      	add	r3, r1
 8006d4a:	334c      	adds	r3, #76	; 0x4c
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006d50:	78fa      	ldrb	r2, [r7, #3]
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	440b      	add	r3, r1
 8006d5e:	3339      	adds	r3, #57	; 0x39
 8006d60:	78fa      	ldrb	r2, [r7, #3]
 8006d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4413      	add	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	440b      	add	r3, r1
 8006d72:	335d      	adds	r3, #93	; 0x5d
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	78fa      	ldrb	r2, [r7, #3]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	3338      	adds	r3, #56	; 0x38
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	18d1      	adds	r1, r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	f006 fee6 	bl	800db64 <USB_HC_StartXfer>
 8006d98:	4603      	mov	r3, r0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f006 fc09 	bl	800d5d2 <USB_GetMode>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	f040 80ef 	bne.w	8006fa6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f006 fbed 	bl	800d5ac <USB_ReadInterrupts>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 80e5 	beq.w	8006fa4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f006 fbe4 	bl	800d5ac <USB_ReadInterrupts>
 8006de4:	4603      	mov	r3, r0
 8006de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dee:	d104      	bne.n	8006dfa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006df8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f006 fbd4 	bl	800d5ac <USB_ReadInterrupts>
 8006e04:	4603      	mov	r3, r0
 8006e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e0e:	d104      	bne.n	8006e1a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f006 fbc4 	bl	800d5ac <USB_ReadInterrupts>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e2e:	d104      	bne.n	8006e3a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006e38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f006 fbb4 	bl	800d5ac <USB_ReadInterrupts>
 8006e44:	4603      	mov	r3, r0
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d103      	bne.n	8006e56 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2202      	movs	r2, #2
 8006e54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f006 fba6 	bl	800d5ac <USB_ReadInterrupts>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6a:	d115      	bne.n	8006e98 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006e74:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d108      	bne.n	8006e98 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f00d f9da 	bl	8014240 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2101      	movs	r1, #1
 8006e92:	4618      	mov	r0, r3
 8006e94:	f006 fc96 	bl	800d7c4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f006 fb85 	bl	800d5ac <USB_ReadInterrupts>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eac:	d102      	bne.n	8006eb4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f001 f966 	bl	8008180 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f006 fb77 	bl	800d5ac <USB_ReadInterrupts>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f003 0308 	and.w	r3, r3, #8
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d106      	bne.n	8006ed6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f00d f99d 	bl	8014208 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2208      	movs	r2, #8
 8006ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f006 fb66 	bl	800d5ac <USB_ReadInterrupts>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eea:	d138      	bne.n	8006f5e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f006 ff7d 	bl	800ddf0 <USB_HC_ReadInterrupt>
 8006ef6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	e025      	b.n	8006f4a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f003 030f 	and.w	r3, r3, #15
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	fa22 f303 	lsr.w	r3, r2, r3
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d018      	beq.n	8006f44 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f28:	d106      	bne.n	8006f38 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8cf 	bl	80070d4 <HCD_HC_IN_IRQHandler>
 8006f36:	e005      	b.n	8006f44 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fcfd 	bl	800793e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	3301      	adds	r3, #1
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d3d4      	bcc.n	8006efe <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f006 fb22 	bl	800d5ac <USB_ReadInterrupts>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	f003 0310 	and.w	r3, r3, #16
 8006f6e:	2b10      	cmp	r3, #16
 8006f70:	d101      	bne.n	8006f76 <HAL_HCD_IRQHandler+0x1d2>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <HAL_HCD_IRQHandler+0x1d4>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d014      	beq.n	8006fa6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	699a      	ldr	r2, [r3, #24]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0210 	bic.w	r2, r2, #16
 8006f8a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 f84b 	bl	8008028 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	699a      	ldr	r2, [r3, #24]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0210 	orr.w	r2, r2, #16
 8006fa0:	619a      	str	r2, [r3, #24]
 8006fa2:	e000      	b.n	8006fa6 <HAL_HCD_IRQHandler+0x202>
      return;
 8006fa4:	bf00      	nop
    }
  }
}
 8006fa6:	3718      	adds	r7, #24
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_HCD_Start+0x16>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e013      	b.n	8006fea <HAL_HCD_Start+0x3e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f006 f9f9 	bl	800d3c6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2101      	movs	r1, #1
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f006 fc56 	bl	800d88c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b082      	sub	sp, #8
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_HCD_Stop+0x16>
 8007004:	2302      	movs	r3, #2
 8007006:	e00d      	b.n	8007024 <HAL_HCD_Stop+0x32>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4618      	mov	r0, r3
 8007016:	f007 f837 	bl	800e088 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f006 fbfd 	bl	800d838 <USB_ResetPort>
 800703e:	4603      	mov	r3, r0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007054:	78fa      	ldrb	r2, [r7, #3]
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	00db      	lsls	r3, r3, #3
 8007060:	440b      	add	r3, r1
 8007062:	335c      	adds	r3, #92	; 0x5c
 8007064:	781b      	ldrb	r3, [r3, #0]
}
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007072:	b480      	push	{r7}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	6879      	ldr	r1, [r7, #4]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	440b      	add	r3, r1
 800708c:	334c      	adds	r3, #76	; 0x4c
 800708e:	681b      	ldr	r3, [r3, #0]
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4618      	mov	r0, r3
 80070aa:	f006 fc3f 	bl	800d92c <USB_GetCurrentFrame>
 80070ae:	4603      	mov	r3, r0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f006 fc1a 	bl	800d8fe <USB_GetHostSpeed>
 80070ca:	4603      	mov	r3, r0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	460b      	mov	r3, r1
 80070de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80070ea:	78fb      	ldrb	r3, [r7, #3]
 80070ec:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	015a      	lsls	r2, r3, #5
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b04      	cmp	r3, #4
 8007102:	d119      	bne.n	8007138 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007110:	461a      	mov	r2, r3
 8007112:	2304      	movs	r3, #4
 8007114:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	4413      	add	r3, r2
 800711e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	440a      	add	r2, r1
 800712c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007130:	f043 0302 	orr.w	r3, r3, #2
 8007134:	60d3      	str	r3, [r2, #12]
 8007136:	e0ce      	b.n	80072d6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4413      	add	r3, r2
 8007140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800714e:	d12c      	bne.n	80071aa <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	4413      	add	r3, r2
 8007158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715c:	461a      	mov	r2, r3
 800715e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007162:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	68fa      	ldr	r2, [r7, #12]
 8007168:	4613      	mov	r3, r2
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	4413      	add	r3, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	440b      	add	r3, r1
 8007172:	335d      	adds	r3, #93	; 0x5d
 8007174:	2207      	movs	r2, #7
 8007176:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	4413      	add	r3, r2
 8007180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	440a      	add	r2, r1
 800718e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007192:	f043 0302 	orr.w	r3, r3, #2
 8007196:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	4611      	mov	r1, r2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f006 fe35 	bl	800de12 <USB_HC_Halt>
 80071a8:	e095      	b.n	80072d6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 0320 	and.w	r3, r3, #32
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d109      	bne.n	80071d4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071cc:	461a      	mov	r2, r3
 80071ce:	2320      	movs	r3, #32
 80071d0:	6093      	str	r3, [r2, #8]
 80071d2:	e080      	b.n	80072d6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d134      	bne.n	8007254 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	0151      	lsls	r1, r2, #5
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	440a      	add	r2, r1
 8007200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007204:	f043 0302 	orr.w	r3, r3, #2
 8007208:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	440b      	add	r3, r1
 8007218:	335d      	adds	r3, #93	; 0x5d
 800721a:	2205      	movs	r2, #5
 800721c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	4413      	add	r3, r2
 8007226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722a:	461a      	mov	r2, r3
 800722c:	2310      	movs	r3, #16
 800722e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4413      	add	r3, r2
 8007238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723c:	461a      	mov	r2, r3
 800723e:	2308      	movs	r3, #8
 8007240:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	4611      	mov	r1, r2
 800724c:	4618      	mov	r0, r3
 800724e:	f006 fde0 	bl	800de12 <USB_HC_Halt>
 8007252:	e040      	b.n	80072d6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	4413      	add	r3, r2
 800725c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800726a:	d134      	bne.n	80072d6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4413      	add	r3, r2
 8007274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	0151      	lsls	r1, r2, #5
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	440a      	add	r2, r1
 8007282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007286:	f043 0302 	orr.w	r3, r3, #2
 800728a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	b2d2      	uxtb	r2, r2
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f006 fdbb 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a8:	461a      	mov	r2, r3
 80072aa:	2310      	movs	r3, #16
 80072ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	440b      	add	r3, r1
 80072bc:	335d      	adds	r3, #93	; 0x5d
 80072be:	2208      	movs	r2, #8
 80072c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ce:	461a      	mov	r2, r3
 80072d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ec:	d122      	bne.n	8007334 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	0151      	lsls	r1, r2, #5
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	440a      	add	r2, r1
 8007304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007308:	f043 0302 	orr.w	r3, r3, #2
 800730c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	b2d2      	uxtb	r2, r2
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f006 fd7a 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	4413      	add	r3, r2
 8007326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800732a:	461a      	mov	r2, r3
 800732c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007330:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8007332:	e300      	b.n	8007936 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	4413      	add	r3, r2
 800733c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	2b01      	cmp	r3, #1
 8007348:	f040 80fd 	bne.w	8007546 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d01b      	beq.n	800738c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	440b      	add	r3, r1
 8007362:	3348      	adds	r3, #72	; 0x48
 8007364:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	0159      	lsls	r1, r3, #5
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	440b      	add	r3, r1
 800736e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8007378:	1ad1      	subs	r1, r2, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4403      	add	r3, r0
 8007388:	334c      	adds	r3, #76	; 0x4c
 800738a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800738c:	6879      	ldr	r1, [r7, #4]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	440b      	add	r3, r1
 800739a:	335d      	adds	r3, #93	; 0x5d
 800739c:	2201      	movs	r2, #1
 800739e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	68fa      	ldr	r2, [r7, #12]
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	00db      	lsls	r3, r3, #3
 80073ac:	440b      	add	r3, r1
 80073ae:	3358      	adds	r3, #88	; 0x58
 80073b0:	2200      	movs	r2, #0
 80073b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c0:	461a      	mov	r2, r3
 80073c2:	2301      	movs	r3, #1
 80073c4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	440b      	add	r3, r1
 80073d4:	333f      	adds	r3, #63	; 0x3f
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00a      	beq.n	80073f2 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80073dc:	6879      	ldr	r1, [r7, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	4613      	mov	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	440b      	add	r3, r1
 80073ea:	333f      	adds	r3, #63	; 0x3f
 80073ec:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d121      	bne.n	8007436 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	440a      	add	r2, r1
 8007408:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800740c:	f043 0302 	orr.w	r3, r3, #2
 8007410:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f006 fcf8 	bl	800de12 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4413      	add	r3, r2
 800742a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742e:	461a      	mov	r2, r3
 8007430:	2310      	movs	r3, #16
 8007432:	6093      	str	r3, [r2, #8]
 8007434:	e070      	b.n	8007518 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8007436:	6879      	ldr	r1, [r7, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	440b      	add	r3, r1
 8007444:	333f      	adds	r3, #63	; 0x3f
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b03      	cmp	r3, #3
 800744a:	d12a      	bne.n	80074a2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	440a      	add	r2, r1
 8007462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007466:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800746a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	440b      	add	r3, r1
 800747a:	335c      	adds	r3, #92	; 0x5c
 800747c:	2201      	movs	r2, #1
 800747e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	b2d8      	uxtb	r0, r3
 8007484:	6879      	ldr	r1, [r7, #4]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	440b      	add	r3, r1
 8007492:	335c      	adds	r3, #92	; 0x5c
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	461a      	mov	r2, r3
 8007498:	4601      	mov	r1, r0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f00c fede 	bl	801425c <HAL_HCD_HC_NotifyURBChange_Callback>
 80074a0:	e03a      	b.n	8007518 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80074a2:	6879      	ldr	r1, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	440b      	add	r3, r1
 80074b0:	333f      	adds	r3, #63	; 0x3f
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d12f      	bne.n	8007518 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	440b      	add	r3, r1
 80074c6:	335c      	adds	r3, #92	; 0x5c
 80074c8:	2201      	movs	r2, #1
 80074ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4613      	mov	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	440b      	add	r3, r1
 80074da:	3350      	adds	r3, #80	; 0x50
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	f083 0301 	eor.w	r3, r3, #1
 80074e2:	b2d8      	uxtb	r0, r3
 80074e4:	6879      	ldr	r1, [r7, #4]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	440b      	add	r3, r1
 80074f2:	3350      	adds	r3, #80	; 0x50
 80074f4:	4602      	mov	r2, r0
 80074f6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	b2d8      	uxtb	r0, r3
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4613      	mov	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	440b      	add	r3, r1
 800750a:	335c      	adds	r3, #92	; 0x5c
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	4601      	mov	r1, r0
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f00c fea2 	bl	801425c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	440b      	add	r3, r1
 8007526:	3350      	adds	r3, #80	; 0x50
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f083 0301 	eor.w	r3, r3, #1
 800752e:	b2d8      	uxtb	r0, r3
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	440b      	add	r3, r1
 800753e:	3350      	adds	r3, #80	; 0x50
 8007540:	4602      	mov	r2, r0
 8007542:	701a      	strb	r2, [r3, #0]
}
 8007544:	e1f7      	b.n	8007936 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	4413      	add	r3, r2
 800754e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 0302 	and.w	r3, r3, #2
 8007558:	2b02      	cmp	r3, #2
 800755a:	f040 811a 	bne.w	8007792 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	015a      	lsls	r2, r3, #5
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	4413      	add	r3, r2
 8007566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	0151      	lsls	r1, r2, #5
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	440a      	add	r2, r1
 8007574:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007578:	f023 0302 	bic.w	r3, r3, #2
 800757c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	68fa      	ldr	r2, [r7, #12]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	440b      	add	r3, r1
 800758c:	335d      	adds	r3, #93	; 0x5d
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d10a      	bne.n	80075aa <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	4613      	mov	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4413      	add	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	440b      	add	r3, r1
 80075a2:	335c      	adds	r3, #92	; 0x5c
 80075a4:	2201      	movs	r2, #1
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	e0d9      	b.n	800775e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	440b      	add	r3, r1
 80075b8:	335d      	adds	r3, #93	; 0x5d
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b05      	cmp	r3, #5
 80075be:	d10a      	bne.n	80075d6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	00db      	lsls	r3, r3, #3
 80075cc:	440b      	add	r3, r1
 80075ce:	335c      	adds	r3, #92	; 0x5c
 80075d0:	2205      	movs	r2, #5
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e0c3      	b.n	800775e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80075d6:	6879      	ldr	r1, [r7, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	440b      	add	r3, r1
 80075e4:	335d      	adds	r3, #93	; 0x5d
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b06      	cmp	r3, #6
 80075ea:	d00a      	beq.n	8007602 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	440b      	add	r3, r1
 80075fa:	335d      	adds	r3, #93	; 0x5d
 80075fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d156      	bne.n	80076b0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	00db      	lsls	r3, r3, #3
 800760e:	440b      	add	r3, r1
 8007610:	3358      	adds	r3, #88	; 0x58
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	1c59      	adds	r1, r3, #1
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4613      	mov	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4413      	add	r3, r2
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	4403      	add	r3, r0
 8007624:	3358      	adds	r3, #88	; 0x58
 8007626:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	00db      	lsls	r3, r3, #3
 8007634:	440b      	add	r3, r1
 8007636:	3358      	adds	r3, #88	; 0x58
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b03      	cmp	r3, #3
 800763c:	d914      	bls.n	8007668 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800763e:	6879      	ldr	r1, [r7, #4]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	440b      	add	r3, r1
 800764c:	3358      	adds	r3, #88	; 0x58
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	440b      	add	r3, r1
 8007660:	335c      	adds	r3, #92	; 0x5c
 8007662:	2204      	movs	r2, #4
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	e009      	b.n	800767c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	440b      	add	r3, r1
 8007676:	335c      	adds	r3, #92	; 0x5c
 8007678:	2202      	movs	r2, #2
 800767a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007692:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800769a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076a8:	461a      	mov	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	e056      	b.n	800775e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	00db      	lsls	r3, r3, #3
 80076bc:	440b      	add	r3, r1
 80076be:	335d      	adds	r3, #93	; 0x5d
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d123      	bne.n	800770e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	440b      	add	r3, r1
 80076d4:	335c      	adds	r3, #92	; 0x5c
 80076d6:	2202      	movs	r2, #2
 80076d8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076f0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076f8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4413      	add	r3, r2
 8007702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007706:	461a      	mov	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	e027      	b.n	800775e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	4613      	mov	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	00db      	lsls	r3, r3, #3
 800771a:	440b      	add	r3, r1
 800771c:	335d      	adds	r3, #93	; 0x5d
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b07      	cmp	r3, #7
 8007722:	d11c      	bne.n	800775e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8007724:	6879      	ldr	r1, [r7, #4]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	4613      	mov	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	440b      	add	r3, r1
 8007732:	3358      	adds	r3, #88	; 0x58
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	1c59      	adds	r1, r3, #1
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4403      	add	r3, r0
 8007746:	3358      	adds	r3, #88	; 0x58
 8007748:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	4613      	mov	r3, r2
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	00db      	lsls	r3, r3, #3
 8007756:	440b      	add	r3, r1
 8007758:	335c      	adds	r3, #92	; 0x5c
 800775a:	2204      	movs	r2, #4
 800775c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800776a:	461a      	mov	r2, r3
 800776c:	2302      	movs	r3, #2
 800776e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	b2d8      	uxtb	r0, r3
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	440b      	add	r3, r1
 8007782:	335c      	adds	r3, #92	; 0x5c
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	4601      	mov	r1, r0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f00c fd66 	bl	801425c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007790:	e0d1      	b.n	8007936 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	4413      	add	r3, r2
 800779a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a4:	2b80      	cmp	r3, #128	; 0x80
 80077a6:	d13e      	bne.n	8007826 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4613      	mov	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	4413      	add	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	440b      	add	r3, r1
 80077d6:	3358      	adds	r3, #88	; 0x58
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	1c59      	adds	r1, r3, #1
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	4403      	add	r3, r0
 80077ea:	3358      	adds	r3, #88	; 0x58
 80077ec:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	440b      	add	r3, r1
 80077fc:	335d      	adds	r3, #93	; 0x5d
 80077fe:	2206      	movs	r2, #6
 8007800:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	b2d2      	uxtb	r2, r2
 800780a:	4611      	mov	r1, r2
 800780c:	4618      	mov	r0, r3
 800780e:	f006 fb00 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4413      	add	r3, r2
 800781a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781e:	461a      	mov	r2, r3
 8007820:	2380      	movs	r3, #128	; 0x80
 8007822:	6093      	str	r3, [r2, #8]
}
 8007824:	e087      	b.n	8007936 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	015a      	lsls	r2, r3, #5
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4413      	add	r3, r2
 800782e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 0310 	and.w	r3, r3, #16
 8007838:	2b10      	cmp	r3, #16
 800783a:	d17c      	bne.n	8007936 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800783c:	6879      	ldr	r1, [r7, #4]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4613      	mov	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4413      	add	r3, r2
 8007846:	00db      	lsls	r3, r3, #3
 8007848:	440b      	add	r3, r1
 800784a:	333f      	adds	r3, #63	; 0x3f
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	2b03      	cmp	r3, #3
 8007850:	d122      	bne.n	8007898 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	00db      	lsls	r3, r3, #3
 800785e:	440b      	add	r3, r1
 8007860:	3358      	adds	r3, #88	; 0x58
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	4413      	add	r3, r2
 800786e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	440a      	add	r2, r1
 800787c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007880:	f043 0302 	orr.w	r3, r3, #2
 8007884:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	b2d2      	uxtb	r2, r2
 800788e:	4611      	mov	r1, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f006 fabe 	bl	800de12 <USB_HC_Halt>
 8007896:	e045      	b.n	8007924 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4613      	mov	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4413      	add	r3, r2
 80078a2:	00db      	lsls	r3, r3, #3
 80078a4:	440b      	add	r3, r1
 80078a6:	333f      	adds	r3, #63	; 0x3f
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00a      	beq.n	80078c4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	00db      	lsls	r3, r3, #3
 80078ba:	440b      	add	r3, r1
 80078bc:	333f      	adds	r3, #63	; 0x3f
 80078be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d12f      	bne.n	8007924 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	440b      	add	r3, r1
 80078d2:	3358      	adds	r3, #88	; 0x58
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d121      	bne.n	8007924 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	68fa      	ldr	r2, [r7, #12]
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	440b      	add	r3, r1
 80078ee:	335d      	adds	r3, #93	; 0x5d
 80078f0:	2203      	movs	r2, #3
 80078f2:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	0151      	lsls	r1, r2, #5
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	440a      	add	r2, r1
 800790a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800790e:	f043 0302 	orr.w	r3, r3, #2
 8007912:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	b2d2      	uxtb	r2, r2
 800791c:	4611      	mov	r1, r2
 800791e:	4618      	mov	r0, r3
 8007920:	f006 fa77 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	4413      	add	r3, r2
 800792c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007930:	461a      	mov	r2, r3
 8007932:	2310      	movs	r3, #16
 8007934:	6093      	str	r3, [r2, #8]
}
 8007936:	bf00      	nop
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b04      	cmp	r3, #4
 800796c:	d119      	bne.n	80079a2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800797a:	461a      	mov	r2, r3
 800797c:	2304      	movs	r3, #4
 800797e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4413      	add	r3, r2
 8007988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	693a      	ldr	r2, [r7, #16]
 8007994:	440a      	add	r2, r1
 8007996:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800799a:	f043 0302 	orr.w	r3, r3, #2
 800799e:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80079a0:	e33e      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b20      	cmp	r3, #32
 80079b6:	d141      	bne.n	8007a3c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079c4:	461a      	mov	r2, r3
 80079c6:	2320      	movs	r3, #32
 80079c8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	440b      	add	r3, r1
 80079d8:	333d      	adds	r3, #61	; 0x3d
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	f040 831f 	bne.w	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	440b      	add	r3, r1
 80079f0:	333d      	adds	r3, #61	; 0x3d
 80079f2:	2200      	movs	r2, #0
 80079f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	440b      	add	r3, r1
 8007a04:	335c      	adds	r3, #92	; 0x5c
 8007a06:	2202      	movs	r2, #2
 8007a08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	0151      	lsls	r1, r2, #5
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	440a      	add	r2, r1
 8007a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a24:	f043 0302 	orr.w	r3, r3, #2
 8007a28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	4611      	mov	r1, r2
 8007a34:	4618      	mov	r0, r3
 8007a36:	f006 f9ec 	bl	800de12 <USB_HC_Halt>
}
 8007a3a:	e2f1      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a4e:	2b40      	cmp	r3, #64	; 0x40
 8007a50:	d13f      	bne.n	8007ad2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	00db      	lsls	r3, r3, #3
 8007a5e:	440b      	add	r3, r1
 8007a60:	335d      	adds	r3, #93	; 0x5d
 8007a62:	2204      	movs	r2, #4
 8007a64:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	00db      	lsls	r3, r3, #3
 8007a72:	440b      	add	r3, r1
 8007a74:	333d      	adds	r3, #61	; 0x3d
 8007a76:	2201      	movs	r2, #1
 8007a78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4413      	add	r3, r2
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	440b      	add	r3, r1
 8007a88:	3358      	adds	r3, #88	; 0x58
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	015a      	lsls	r2, r3, #5
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	4413      	add	r3, r2
 8007a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	0151      	lsls	r1, r2, #5
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	440a      	add	r2, r1
 8007aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aa8:	f043 0302 	orr.w	r3, r3, #2
 8007aac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	b2d2      	uxtb	r2, r2
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f006 f9aa 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aca:	461a      	mov	r2, r3
 8007acc:	2340      	movs	r3, #64	; 0x40
 8007ace:	6093      	str	r3, [r2, #8]
}
 8007ad0:	e2a6      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae8:	d122      	bne.n	8007b30 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b04:	f043 0302 	orr.w	r3, r3, #2
 8007b08:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	4611      	mov	r1, r2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f006 f97c 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b26:	461a      	mov	r2, r3
 8007b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b2c:	6093      	str	r3, [r2, #8]
}
 8007b2e:	e277      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d135      	bne.n	8007bb2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b46:	6879      	ldr	r1, [r7, #4]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	440b      	add	r3, r1
 8007b54:	3358      	adds	r3, #88	; 0x58
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b74:	f043 0302 	orr.w	r3, r3, #2
 8007b78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	4611      	mov	r1, r2
 8007b84:	4618      	mov	r0, r3
 8007b86:	f006 f944 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b96:	461a      	mov	r2, r3
 8007b98:	2301      	movs	r3, #1
 8007b9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4413      	add	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	440b      	add	r3, r1
 8007baa:	335d      	adds	r3, #93	; 0x5d
 8007bac:	2201      	movs	r2, #1
 8007bae:	701a      	strb	r2, [r3, #0]
}
 8007bb0:	e236      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b08      	cmp	r3, #8
 8007bc6:	d12b      	bne.n	8007c20 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bf4:	f043 0302 	orr.w	r3, r3, #2
 8007bf8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	4611      	mov	r1, r2
 8007c04:	4618      	mov	r0, r3
 8007c06:	f006 f904 	bl	800de12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	440b      	add	r3, r1
 8007c18:	335d      	adds	r3, #93	; 0x5d
 8007c1a:	2205      	movs	r2, #5
 8007c1c:	701a      	strb	r2, [r3, #0]
}
 8007c1e:	e1ff      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f003 0310 	and.w	r3, r3, #16
 8007c32:	2b10      	cmp	r3, #16
 8007c34:	d155      	bne.n	8007ce2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	00db      	lsls	r3, r3, #3
 8007c42:	440b      	add	r3, r1
 8007c44:	3358      	adds	r3, #88	; 0x58
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	440b      	add	r3, r1
 8007c58:	335d      	adds	r3, #93	; 0x5d
 8007c5a:	2203      	movs	r2, #3
 8007c5c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	00db      	lsls	r3, r3, #3
 8007c6a:	440b      	add	r3, r1
 8007c6c:	333d      	adds	r3, #61	; 0x3d
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d114      	bne.n	8007c9e <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	440b      	add	r3, r1
 8007c82:	333c      	adds	r3, #60	; 0x3c
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d109      	bne.n	8007c9e <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	00db      	lsls	r3, r3, #3
 8007c96:	440b      	add	r3, r1
 8007c98:	333d      	adds	r3, #61	; 0x3d
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cb8:	f043 0302 	orr.w	r3, r3, #2
 8007cbc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	b2d2      	uxtb	r2, r2
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f006 f8a2 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	015a      	lsls	r2, r3, #5
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cda:	461a      	mov	r2, r3
 8007cdc:	2310      	movs	r3, #16
 8007cde:	6093      	str	r3, [r2, #8]
}
 8007ce0:	e19e      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf4:	2b80      	cmp	r3, #128	; 0x80
 8007cf6:	d12b      	bne.n	8007d50 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d12:	f043 0302 	orr.w	r3, r3, #2
 8007d16:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f006 f875 	bl	800de12 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	4413      	add	r3, r2
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	440b      	add	r3, r1
 8007d36:	335d      	adds	r3, #93	; 0x5d
 8007d38:	2206      	movs	r2, #6
 8007d3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2380      	movs	r3, #128	; 0x80
 8007d4c:	6093      	str	r3, [r2, #8]
}
 8007d4e:	e167      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d66:	d135      	bne.n	8007dd4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	015a      	lsls	r2, r3, #5
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	4413      	add	r3, r2
 8007d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	68fa      	ldr	r2, [r7, #12]
 8007d78:	0151      	lsls	r1, r2, #5
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	440a      	add	r2, r1
 8007d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d82:	f043 0302 	orr.w	r3, r3, #2
 8007d86:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f006 f83d 	bl	800de12 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da4:	461a      	mov	r2, r3
 8007da6:	2310      	movs	r3, #16
 8007da8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007db6:	461a      	mov	r2, r3
 8007db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	4413      	add	r3, r2
 8007dc8:	00db      	lsls	r3, r3, #3
 8007dca:	440b      	add	r3, r1
 8007dcc:	335d      	adds	r3, #93	; 0x5d
 8007dce:	2208      	movs	r2, #8
 8007dd0:	701a      	strb	r2, [r3, #0]
}
 8007dd2:	e125      	b.n	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	f040 811a 	bne.w	8008020 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e06:	f023 0302 	bic.w	r3, r3, #2
 8007e0a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	440b      	add	r3, r1
 8007e1a:	335d      	adds	r3, #93	; 0x5d
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d137      	bne.n	8007e92 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007e22:	6879      	ldr	r1, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	00db      	lsls	r3, r3, #3
 8007e2e:	440b      	add	r3, r1
 8007e30:	335c      	adds	r3, #92	; 0x5c
 8007e32:	2201      	movs	r2, #1
 8007e34:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007e36:	6879      	ldr	r1, [r7, #4]
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	440b      	add	r3, r1
 8007e44:	333f      	adds	r3, #63	; 0x3f
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d00b      	beq.n	8007e64 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007e4c:	6879      	ldr	r1, [r7, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	440b      	add	r3, r1
 8007e5a:	333f      	adds	r3, #63	; 0x3f
 8007e5c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	f040 80c5 	bne.w	8007fee <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	440b      	add	r3, r1
 8007e72:	3351      	adds	r3, #81	; 0x51
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	f083 0301 	eor.w	r3, r3, #1
 8007e7a:	b2d8      	uxtb	r0, r3
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	4613      	mov	r3, r2
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	00db      	lsls	r3, r3, #3
 8007e88:	440b      	add	r3, r1
 8007e8a:	3351      	adds	r3, #81	; 0x51
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	e0ad      	b.n	8007fee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4613      	mov	r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	440b      	add	r3, r1
 8007ea0:	335d      	adds	r3, #93	; 0x5d
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d10a      	bne.n	8007ebe <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4613      	mov	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4413      	add	r3, r2
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	440b      	add	r3, r1
 8007eb6:	335c      	adds	r3, #92	; 0x5c
 8007eb8:	2202      	movs	r2, #2
 8007eba:	701a      	strb	r2, [r3, #0]
 8007ebc:	e097      	b.n	8007fee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	00db      	lsls	r3, r3, #3
 8007eca:	440b      	add	r3, r1
 8007ecc:	335d      	adds	r3, #93	; 0x5d
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d10a      	bne.n	8007eea <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007ed4:	6879      	ldr	r1, [r7, #4]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	440b      	add	r3, r1
 8007ee2:	335c      	adds	r3, #92	; 0x5c
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	e081      	b.n	8007fee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	440b      	add	r3, r1
 8007ef8:	335d      	adds	r3, #93	; 0x5d
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b05      	cmp	r3, #5
 8007efe:	d10a      	bne.n	8007f16 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	440b      	add	r3, r1
 8007f0e:	335c      	adds	r3, #92	; 0x5c
 8007f10:	2205      	movs	r2, #5
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e06b      	b.n	8007fee <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	00db      	lsls	r3, r3, #3
 8007f22:	440b      	add	r3, r1
 8007f24:	335d      	adds	r3, #93	; 0x5d
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	2b06      	cmp	r3, #6
 8007f2a:	d00a      	beq.n	8007f42 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007f2c:	6879      	ldr	r1, [r7, #4]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	440b      	add	r3, r1
 8007f3a:	335d      	adds	r3, #93	; 0x5d
 8007f3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007f3e:	2b08      	cmp	r3, #8
 8007f40:	d155      	bne.n	8007fee <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4613      	mov	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	00db      	lsls	r3, r3, #3
 8007f4e:	440b      	add	r3, r1
 8007f50:	3358      	adds	r3, #88	; 0x58
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	1c59      	adds	r1, r3, #1
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	009b      	lsls	r3, r3, #2
 8007f5e:	4413      	add	r3, r2
 8007f60:	00db      	lsls	r3, r3, #3
 8007f62:	4403      	add	r3, r0
 8007f64:	3358      	adds	r3, #88	; 0x58
 8007f66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	440b      	add	r3, r1
 8007f76:	3358      	adds	r3, #88	; 0x58
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d914      	bls.n	8007fa8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	4613      	mov	r3, r2
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	440b      	add	r3, r1
 8007f8c:	3358      	adds	r3, #88	; 0x58
 8007f8e:	2200      	movs	r2, #0
 8007f90:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	00db      	lsls	r3, r3, #3
 8007f9e:	440b      	add	r3, r1
 8007fa0:	335c      	adds	r3, #92	; 0x5c
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e009      	b.n	8007fbc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4613      	mov	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4413      	add	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	440b      	add	r3, r1
 8007fb6:	335c      	adds	r3, #92	; 0x5c
 8007fb8:	2202      	movs	r2, #2
 8007fba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fd2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fda:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fe8:	461a      	mov	r2, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	015a      	lsls	r2, r3, #5
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	b2d8      	uxtb	r0, r3
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	00db      	lsls	r3, r3, #3
 8008010:	440b      	add	r3, r1
 8008012:	335c      	adds	r3, #92	; 0x5c
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	4601      	mov	r1, r0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f00c f91e 	bl	801425c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8008020:	bf00      	nop
 8008022:	3718      	adds	r7, #24
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08a      	sub	sp, #40	; 0x28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f003 030f 	and.w	r3, r3, #15
 8008048:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	0c5b      	lsrs	r3, r3, #17
 800804e:	f003 030f 	and.w	r3, r3, #15
 8008052:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	091b      	lsrs	r3, r3, #4
 8008058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800805c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b02      	cmp	r3, #2
 8008062:	d003      	beq.n	800806c <HCD_RXQLVL_IRQHandler+0x44>
 8008064:	2b05      	cmp	r3, #5
 8008066:	f000 8082 	beq.w	800816e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800806a:	e083      	b.n	8008174 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d07f      	beq.n	8008172 <HCD_RXQLVL_IRQHandler+0x14a>
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	69ba      	ldr	r2, [r7, #24]
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	440b      	add	r3, r1
 8008080:	3344      	adds	r3, #68	; 0x44
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d074      	beq.n	8008172 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	440b      	add	r3, r1
 800809a:	3344      	adds	r3, #68	; 0x44
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	b292      	uxth	r2, r2
 80080a2:	4619      	mov	r1, r3
 80080a4:	f005 fa59 	bl	800d55a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	4613      	mov	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	00db      	lsls	r3, r3, #3
 80080b4:	440b      	add	r3, r1
 80080b6:	3344      	adds	r3, #68	; 0x44
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	18d1      	adds	r1, r2, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4613      	mov	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4413      	add	r3, r2
 80080c8:	00db      	lsls	r3, r3, #3
 80080ca:	4403      	add	r3, r0
 80080cc:	3344      	adds	r3, #68	; 0x44
 80080ce:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	69ba      	ldr	r2, [r7, #24]
 80080d4:	4613      	mov	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	440b      	add	r3, r1
 80080de:	334c      	adds	r3, #76	; 0x4c
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	18d1      	adds	r1, r2, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	4613      	mov	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	00db      	lsls	r3, r3, #3
 80080f2:	4403      	add	r3, r0
 80080f4:	334c      	adds	r3, #76	; 0x4c
 80080f6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008104:	691a      	ldr	r2, [r3, #16]
 8008106:	4b1d      	ldr	r3, [pc, #116]	; (800817c <HCD_RXQLVL_IRQHandler+0x154>)
 8008108:	4013      	ands	r3, r2
 800810a:	2b00      	cmp	r3, #0
 800810c:	d031      	beq.n	8008172 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	015a      	lsls	r2, r3, #5
 8008112:	6a3b      	ldr	r3, [r7, #32]
 8008114:	4413      	add	r3, r2
 8008116:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008124:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800812c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813a:	461a      	mov	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	440b      	add	r3, r1
 800814e:	3350      	adds	r3, #80	; 0x50
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	f083 0301 	eor.w	r3, r3, #1
 8008156:	b2d8      	uxtb	r0, r3
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	4613      	mov	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	00db      	lsls	r3, r3, #3
 8008164:	440b      	add	r3, r1
 8008166:	3350      	adds	r3, #80	; 0x50
 8008168:	4602      	mov	r2, r0
 800816a:	701a      	strb	r2, [r3, #0]
      break;
 800816c:	e001      	b.n	8008172 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800816e:	bf00      	nop
 8008170:	e000      	b.n	8008174 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8008172:	bf00      	nop
  }
}
 8008174:	bf00      	nop
 8008176:	3728      	adds	r7, #40	; 0x28
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	1ff80000 	.word	0x1ff80000

08008180 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80081ac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d10b      	bne.n	80081d0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d102      	bne.n	80081c8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f00c f82e 	bl	8014224 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f043 0302 	orr.w	r3, r3, #2
 80081ce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d132      	bne.n	8008240 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f043 0308 	orr.w	r3, r3, #8
 80081e0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b04      	cmp	r3, #4
 80081ea:	d126      	bne.n	800823a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d113      	bne.n	800821c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80081fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081fe:	d106      	bne.n	800820e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2102      	movs	r1, #2
 8008206:	4618      	mov	r0, r3
 8008208:	f005 fadc 	bl	800d7c4 <USB_InitFSLSPClkSel>
 800820c:	e011      	b.n	8008232 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2101      	movs	r1, #1
 8008214:	4618      	mov	r0, r3
 8008216:	f005 fad5 	bl	800d7c4 <USB_InitFSLSPClkSel>
 800821a:	e00a      	b.n	8008232 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	2b01      	cmp	r3, #1
 8008222:	d106      	bne.n	8008232 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800822a:	461a      	mov	r2, r3
 800822c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8008230:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f00c f824 	bl	8014280 <HAL_HCD_PortEnabled_Callback>
 8008238:	e002      	b.n	8008240 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f00c f82e 	bl	801429c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b20      	cmp	r3, #32
 8008248:	d103      	bne.n	8008252 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f043 0320 	orr.w	r3, r3, #32
 8008250:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008258:	461a      	mov	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	6013      	str	r3, [r2, #0]
}
 800825e:	bf00      	nop
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e11f      	b.n	80084ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f7fa fe1c 	bl	8002ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2224      	movs	r2, #36	; 0x24
 8008298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0201 	bic.w	r2, r2, #1
 80082aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	681a      	ldr	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80082cc:	f001 f80e 	bl	80092ec <HAL_RCC_GetPCLK1Freq>
 80082d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	4a7b      	ldr	r2, [pc, #492]	; (80084c4 <HAL_I2C_Init+0x25c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d807      	bhi.n	80082ec <HAL_I2C_Init+0x84>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4a7a      	ldr	r2, [pc, #488]	; (80084c8 <HAL_I2C_Init+0x260>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	bf94      	ite	ls
 80082e4:	2301      	movls	r3, #1
 80082e6:	2300      	movhi	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	e006      	b.n	80082fa <HAL_I2C_Init+0x92>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4a77      	ldr	r2, [pc, #476]	; (80084cc <HAL_I2C_Init+0x264>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	bf94      	ite	ls
 80082f4:	2301      	movls	r3, #1
 80082f6:	2300      	movhi	r3, #0
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e0db      	b.n	80084ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4a72      	ldr	r2, [pc, #456]	; (80084d0 <HAL_I2C_Init+0x268>)
 8008306:	fba2 2303 	umull	r2, r3, r2, r3
 800830a:	0c9b      	lsrs	r3, r3, #18
 800830c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	430a      	orrs	r2, r1
 8008320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	4a64      	ldr	r2, [pc, #400]	; (80084c4 <HAL_I2C_Init+0x25c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d802      	bhi.n	800833c <HAL_I2C_Init+0xd4>
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	3301      	adds	r3, #1
 800833a:	e009      	b.n	8008350 <HAL_I2C_Init+0xe8>
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008342:	fb02 f303 	mul.w	r3, r2, r3
 8008346:	4a63      	ldr	r2, [pc, #396]	; (80084d4 <HAL_I2C_Init+0x26c>)
 8008348:	fba2 2303 	umull	r2, r3, r2, r3
 800834c:	099b      	lsrs	r3, r3, #6
 800834e:	3301      	adds	r3, #1
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6812      	ldr	r2, [r2, #0]
 8008354:	430b      	orrs	r3, r1
 8008356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008362:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	4956      	ldr	r1, [pc, #344]	; (80084c4 <HAL_I2C_Init+0x25c>)
 800836c:	428b      	cmp	r3, r1
 800836e:	d80d      	bhi.n	800838c <HAL_I2C_Init+0x124>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	1e59      	subs	r1, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	005b      	lsls	r3, r3, #1
 800837a:	fbb1 f3f3 	udiv	r3, r1, r3
 800837e:	3301      	adds	r3, #1
 8008380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008384:	2b04      	cmp	r3, #4
 8008386:	bf38      	it	cc
 8008388:	2304      	movcc	r3, #4
 800838a:	e04f      	b.n	800842c <HAL_I2C_Init+0x1c4>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d111      	bne.n	80083b8 <HAL_I2C_Init+0x150>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	1e58      	subs	r0, r3, #1
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6859      	ldr	r1, [r3, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	005b      	lsls	r3, r3, #1
 80083a0:	440b      	add	r3, r1
 80083a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80083a6:	3301      	adds	r3, #1
 80083a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf0c      	ite	eq
 80083b0:	2301      	moveq	r3, #1
 80083b2:	2300      	movne	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	e012      	b.n	80083de <HAL_I2C_Init+0x176>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	1e58      	subs	r0, r3, #1
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6859      	ldr	r1, [r3, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	440b      	add	r3, r1
 80083c6:	0099      	lsls	r1, r3, #2
 80083c8:	440b      	add	r3, r1
 80083ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80083ce:	3301      	adds	r3, #1
 80083d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	bf0c      	ite	eq
 80083d8:	2301      	moveq	r3, #1
 80083da:	2300      	movne	r3, #0
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <HAL_I2C_Init+0x17e>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e022      	b.n	800842c <HAL_I2C_Init+0x1c4>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10e      	bne.n	800840c <HAL_I2C_Init+0x1a4>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1e58      	subs	r0, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6859      	ldr	r1, [r3, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	440b      	add	r3, r1
 80083fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008400:	3301      	adds	r3, #1
 8008402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800840a:	e00f      	b.n	800842c <HAL_I2C_Init+0x1c4>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	1e58      	subs	r0, r3, #1
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6859      	ldr	r1, [r3, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	440b      	add	r3, r1
 800841a:	0099      	lsls	r1, r3, #2
 800841c:	440b      	add	r3, r1
 800841e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008422:	3301      	adds	r3, #1
 8008424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	6809      	ldr	r1, [r1, #0]
 8008430:	4313      	orrs	r3, r2
 8008432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69da      	ldr	r2, [r3, #28]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	430a      	orrs	r2, r1
 800844e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800845a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6911      	ldr	r1, [r2, #16]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	68d2      	ldr	r2, [r2, #12]
 8008466:	4311      	orrs	r1, r2
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	6812      	ldr	r2, [r2, #0]
 800846c:	430b      	orrs	r3, r1
 800846e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695a      	ldr	r2, [r3, #20]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	430a      	orrs	r2, r1
 800848a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0201 	orr.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2220      	movs	r2, #32
 80084a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	000186a0 	.word	0x000186a0
 80084c8:	001e847f 	.word	0x001e847f
 80084cc:	003d08ff 	.word	0x003d08ff
 80084d0:	431bde83 	.word	0x431bde83
 80084d4:	10624dd3 	.word	0x10624dd3

080084d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b088      	sub	sp, #32
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e154      	b.n	8008794 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d109      	bne.n	800850a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a98      	ldr	r2, [pc, #608]	; (8008764 <HAL_I2S_Init+0x28c>)
 8008502:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f7fa fd29 	bl	8002f5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2202      	movs	r2, #2
 800850e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	6812      	ldr	r2, [r2, #0]
 800851c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008520:	f023 030f 	bic.w	r3, r3, #15
 8008524:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2202      	movs	r2, #2
 800852c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d06f      	beq.n	8008616 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d102      	bne.n	8008544 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800853e:	2310      	movs	r3, #16
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	e001      	b.n	8008548 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008544:	2320      	movs	r3, #32
 8008546:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	2b20      	cmp	r3, #32
 800854e:	d802      	bhi.n	8008556 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	005b      	lsls	r3, r3, #1
 8008554:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a83      	ldr	r2, [pc, #524]	; (8008768 <HAL_I2S_Init+0x290>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d004      	beq.n	800856a <HAL_I2S_Init+0x92>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a81      	ldr	r2, [pc, #516]	; (800876c <HAL_I2S_Init+0x294>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d104      	bne.n	8008574 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800856a:	2001      	movs	r0, #1
 800856c:	f001 f9a4 	bl	80098b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	e003      	b.n	800857c <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8008574:	2002      	movs	r0, #2
 8008576:	f001 f99f 	bl	80098b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800857a:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008584:	d125      	bne.n	80085d2 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d010      	beq.n	80085b0 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	fbb2 f2f3 	udiv	r2, r2, r3
 8008598:	4613      	mov	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	005b      	lsls	r3, r3, #1
 80085a0:	461a      	mov	r2, r3
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085aa:	3305      	adds	r3, #5
 80085ac:	613b      	str	r3, [r7, #16]
 80085ae:	e01f      	b.n	80085f0 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	461a      	mov	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085cc:	3305      	adds	r3, #5
 80085ce:	613b      	str	r3, [r7, #16]
 80085d0:	e00e      	b.n	80085f0 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	461a      	mov	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ec:	3305      	adds	r3, #5
 80085ee:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	4a5f      	ldr	r2, [pc, #380]	; (8008770 <HAL_I2S_Init+0x298>)
 80085f4:	fba2 2303 	umull	r2, r3, r2, r3
 80085f8:	08db      	lsrs	r3, r3, #3
 80085fa:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f003 0301 	and.w	r3, r3, #1
 8008602:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	085b      	lsrs	r3, r3, #1
 800860c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	021b      	lsls	r3, r3, #8
 8008612:	61bb      	str	r3, [r7, #24]
 8008614:	e003      	b.n	800861e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008616:	2302      	movs	r3, #2
 8008618:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800861a:	2300      	movs	r3, #0
 800861c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d902      	bls.n	800862a <HAL_I2S_Init+0x152>
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	2bff      	cmp	r3, #255	; 0xff
 8008628:	d907      	bls.n	800863a <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862e:	f043 0210 	orr.w	r2, r3, #16
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e0ac      	b.n	8008794 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691a      	ldr	r2, [r3, #16]
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	ea42 0103 	orr.w	r1, r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	69fa      	ldr	r2, [r7, #28]
 800864a:	430a      	orrs	r2, r1
 800864c:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008658:	f023 030f 	bic.w	r3, r3, #15
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	6851      	ldr	r1, [r2, #4]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	6892      	ldr	r2, [r2, #8]
 8008664:	4311      	orrs	r1, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	68d2      	ldr	r2, [r2, #12]
 800866a:	4311      	orrs	r1, r2
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6992      	ldr	r2, [r2, #24]
 8008670:	430a      	orrs	r2, r1
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800867c:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	2b30      	cmp	r3, #48	; 0x30
 8008684:	d003      	beq.n	800868e <HAL_I2S_Init+0x1b6>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	2bb0      	cmp	r3, #176	; 0xb0
 800868c:	d107      	bne.n	800869e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800869c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d16e      	bne.n	8008784 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a32      	ldr	r2, [pc, #200]	; (8008774 <HAL_I2S_Init+0x29c>)
 80086aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a2d      	ldr	r2, [pc, #180]	; (8008768 <HAL_I2S_Init+0x290>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d101      	bne.n	80086ba <HAL_I2S_Init+0x1e2>
 80086b6:	4b30      	ldr	r3, [pc, #192]	; (8008778 <HAL_I2S_Init+0x2a0>)
 80086b8:	e001      	b.n	80086be <HAL_I2S_Init+0x1e6>
 80086ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086be:	69db      	ldr	r3, [r3, #28]
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	6812      	ldr	r2, [r2, #0]
 80086c4:	4928      	ldr	r1, [pc, #160]	; (8008768 <HAL_I2S_Init+0x290>)
 80086c6:	428a      	cmp	r2, r1
 80086c8:	d101      	bne.n	80086ce <HAL_I2S_Init+0x1f6>
 80086ca:	4a2b      	ldr	r2, [pc, #172]	; (8008778 <HAL_I2S_Init+0x2a0>)
 80086cc:	e001      	b.n	80086d2 <HAL_I2S_Init+0x1fa>
 80086ce:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80086d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80086d6:	f023 030f 	bic.w	r3, r3, #15
 80086da:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a21      	ldr	r2, [pc, #132]	; (8008768 <HAL_I2S_Init+0x290>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d101      	bne.n	80086ea <HAL_I2S_Init+0x212>
 80086e6:	4b24      	ldr	r3, [pc, #144]	; (8008778 <HAL_I2S_Init+0x2a0>)
 80086e8:	e001      	b.n	80086ee <HAL_I2S_Init+0x216>
 80086ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80086ee:	2202      	movs	r2, #2
 80086f0:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a1c      	ldr	r2, [pc, #112]	; (8008768 <HAL_I2S_Init+0x290>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d101      	bne.n	8008700 <HAL_I2S_Init+0x228>
 80086fc:	4b1e      	ldr	r3, [pc, #120]	; (8008778 <HAL_I2S_Init+0x2a0>)
 80086fe:	e001      	b.n	8008704 <HAL_I2S_Init+0x22c>
 8008700:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008710:	d003      	beq.n	800871a <HAL_I2S_Init+0x242>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d103      	bne.n	8008722 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800871a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800871e:	613b      	str	r3, [r7, #16]
 8008720:	e001      	b.n	8008726 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008722:	2300      	movs	r3, #0
 8008724:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	b299      	uxth	r1, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800873c:	4303      	orrs	r3, r0
 800873e:	b29b      	uxth	r3, r3
 8008740:	430b      	orrs	r3, r1
 8008742:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8008744:	4313      	orrs	r3, r2
 8008746:	b29a      	uxth	r2, r3
 8008748:	897b      	ldrh	r3, [r7, #10]
 800874a:	4313      	orrs	r3, r2
 800874c:	b29b      	uxth	r3, r3
 800874e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008752:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a03      	ldr	r2, [pc, #12]	; (8008768 <HAL_I2S_Init+0x290>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d10e      	bne.n	800877c <HAL_I2S_Init+0x2a4>
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <HAL_I2S_Init+0x2a0>)
 8008760:	e00e      	b.n	8008780 <HAL_I2S_Init+0x2a8>
 8008762:	bf00      	nop
 8008764:	08008857 	.word	0x08008857
 8008768:	40003800 	.word	0x40003800
 800876c:	40003c00 	.word	0x40003c00
 8008770:	cccccccd 	.word	0xcccccccd
 8008774:	0800896d 	.word	0x0800896d
 8008778:	40003400 	.word	0x40003400
 800877c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008780:	897a      	ldrh	r2, [r7, #10]
 8008782:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2201      	movs	r2, #1
 800878e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3720      	adds	r7, #32
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a8:	881a      	ldrh	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	1c9a      	adds	r2, r3, #2
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087cc:	b29b      	uxth	r3, r3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10e      	bne.n	80087f0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80087e0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7fb fe1e 	bl	800442c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80087f0:	bf00      	nop
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68da      	ldr	r2, [r3, #12]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	b292      	uxth	r2, r2
 800880c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008812:	1c9a      	adds	r2, r3, #2
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800881c:	b29b      	uxth	r3, r3
 800881e:	3b01      	subs	r3, #1
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800882a:	b29b      	uxth	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10e      	bne.n	800884e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685a      	ldr	r2, [r3, #4]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800883e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7fb fe11 	bl	8004470 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b086      	sub	sp, #24
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b04      	cmp	r3, #4
 8008870:	d13a      	bne.n	80088e8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	d109      	bne.n	8008890 <I2S_IRQHandler+0x3a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d102      	bne.n	8008890 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff ffb4 	bl	80087f8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008896:	2b40      	cmp	r3, #64	; 0x40
 8008898:	d126      	bne.n	80088e8 <I2S_IRQHandler+0x92>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d11f      	bne.n	80088e8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80088b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80088b8:	2300      	movs	r3, #0
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	613b      	str	r3, [r7, #16]
 80088cc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088da:	f043 0202 	orr.w	r2, r3, #2
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fb fdac 	bl	8004440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	2b03      	cmp	r3, #3
 80088f2:	d136      	bne.n	8008962 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d109      	bne.n	8008912 <I2S_IRQHandler+0xbc>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008908:	2b80      	cmp	r3, #128	; 0x80
 800890a:	d102      	bne.n	8008912 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff ff45 	bl	800879c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f003 0308 	and.w	r3, r3, #8
 8008918:	2b08      	cmp	r3, #8
 800891a:	d122      	bne.n	8008962 <I2S_IRQHandler+0x10c>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f003 0320 	and.w	r3, r3, #32
 8008926:	2b20      	cmp	r3, #32
 8008928:	d11b      	bne.n	8008962 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008938:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800893a:	2300      	movs	r3, #0
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008954:	f043 0204 	orr.w	r2, r3, #4
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f7fb fd6f 	bl	8004440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008962:	bf00      	nop
 8008964:	3718      	adds	r7, #24
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b088      	sub	sp, #32
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4aa2      	ldr	r2, [pc, #648]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d101      	bne.n	800898a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008986:	4ba2      	ldr	r3, [pc, #648]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008988:	e001      	b.n	800898e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800898a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a9b      	ldr	r2, [pc, #620]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d101      	bne.n	80089a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80089a4:	4b9a      	ldr	r3, [pc, #616]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80089a6:	e001      	b.n	80089ac <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80089a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089b8:	d004      	beq.n	80089c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f040 8099 	bne.w	8008af6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b02      	cmp	r3, #2
 80089cc:	d107      	bne.n	80089de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f925 	bl	8008c28 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d107      	bne.n	80089f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d002      	beq.n	80089f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f9c8 	bl	8008d88 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d13a      	bne.n	8008a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d035      	beq.n	8008a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a7e      	ldr	r2, [pc, #504]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d101      	bne.n	8008a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8008a16:	4b7e      	ldr	r3, [pc, #504]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008a18:	e001      	b.n	8008a1e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8008a1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4979      	ldr	r1, [pc, #484]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008a26:	428b      	cmp	r3, r1
 8008a28:	d101      	bne.n	8008a2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8008a2a:	4b79      	ldr	r3, [pc, #484]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008a2c:	e001      	b.n	8008a32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8008a2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008a36:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2201      	movs	r2, #1
 8008a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6a:	f043 0202 	orr.w	r2, r3, #2
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7fb fce4 	bl	8004440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	f003 0308 	and.w	r3, r3, #8
 8008a7e:	2b08      	cmp	r3, #8
 8008a80:	f040 80be 	bne.w	8008c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f003 0320 	and.w	r3, r3, #32
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 80b8 	beq.w	8008c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a9e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a59      	ldr	r2, [pc, #356]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d101      	bne.n	8008aae <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8008aaa:	4b59      	ldr	r3, [pc, #356]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008aac:	e001      	b.n	8008ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4954      	ldr	r1, [pc, #336]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008aba:	428b      	cmp	r3, r1
 8008abc:	d101      	bne.n	8008ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008abe:	4b54      	ldr	r3, [pc, #336]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008ac0:	e001      	b.n	8008ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008ac2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ac6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008aca:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008acc:	2300      	movs	r3, #0
 8008ace:	60bb      	str	r3, [r7, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	60bb      	str	r3, [r7, #8]
 8008ad8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ae6:	f043 0204 	orr.w	r2, r3, #4
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7fb fca6 	bl	8004440 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008af4:	e084      	b.n	8008c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d107      	bne.n	8008b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f8be 	bl	8008c8c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d107      	bne.n	8008b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f8fd 	bl	8008d24 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b30:	2b40      	cmp	r3, #64	; 0x40
 8008b32:	d12f      	bne.n	8008b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d02a      	beq.n	8008b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008b4c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a2e      	ldr	r2, [pc, #184]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d101      	bne.n	8008b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008b58:	4b2d      	ldr	r3, [pc, #180]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008b5a:	e001      	b.n	8008b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4929      	ldr	r1, [pc, #164]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008b68:	428b      	cmp	r3, r1
 8008b6a:	d101      	bne.n	8008b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008b6c:	4b28      	ldr	r3, [pc, #160]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008b6e:	e001      	b.n	8008b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008b70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b78:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b86:	f043 0202 	orr.w	r2, r3, #2
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f7fb fc56 	bl	8004440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	f003 0308 	and.w	r3, r3, #8
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	d131      	bne.n	8008c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	f003 0320 	and.w	r3, r3, #32
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d02c      	beq.n	8008c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a17      	ldr	r2, [pc, #92]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d101      	bne.n	8008bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008bb2:	4b17      	ldr	r3, [pc, #92]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008bb4:	e001      	b.n	8008bba <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008bb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4912      	ldr	r1, [pc, #72]	; (8008c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8008bc2:	428b      	cmp	r3, r1
 8008bc4:	d101      	bne.n	8008bca <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8008bc6:	4b12      	ldr	r3, [pc, #72]	; (8008c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8008bc8:	e001      	b.n	8008bce <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8008bca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008bd2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008be2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	f043 0204 	orr.w	r2, r3, #4
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7fb fc21 	bl	8004440 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008bfe:	e000      	b.n	8008c02 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008c00:	bf00      	nop
}
 8008c02:	bf00      	nop
 8008c04:	3720      	adds	r7, #32
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40003800 	.word	0x40003800
 8008c10:	40003400 	.word	0x40003400

08008c14 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	1c99      	adds	r1, r3, #2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6251      	str	r1, [r2, #36]	; 0x24
 8008c3a:	881a      	ldrh	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d113      	bne.n	8008c82 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f7ff ffc9 	bl	8008c14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}
	...

08008c8c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c98:	1c99      	adds	r1, r3, #2
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6251      	str	r1, [r2, #36]	; 0x24
 8008c9e:	8819      	ldrh	r1, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <I2SEx_TxISR_I2SExt+0x90>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d101      	bne.n	8008cae <I2SEx_TxISR_I2SExt+0x22>
 8008caa:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <I2SEx_TxISR_I2SExt+0x94>)
 8008cac:	e001      	b.n	8008cb2 <I2SEx_TxISR_I2SExt+0x26>
 8008cae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cb2:	460a      	mov	r2, r1
 8008cb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d121      	bne.n	8008d12 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a12      	ldr	r2, [pc, #72]	; (8008d1c <I2SEx_TxISR_I2SExt+0x90>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d101      	bne.n	8008cdc <I2SEx_TxISR_I2SExt+0x50>
 8008cd8:	4b11      	ldr	r3, [pc, #68]	; (8008d20 <I2SEx_TxISR_I2SExt+0x94>)
 8008cda:	e001      	b.n	8008ce0 <I2SEx_TxISR_I2SExt+0x54>
 8008cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	490d      	ldr	r1, [pc, #52]	; (8008d1c <I2SEx_TxISR_I2SExt+0x90>)
 8008ce8:	428b      	cmp	r3, r1
 8008cea:	d101      	bne.n	8008cf0 <I2SEx_TxISR_I2SExt+0x64>
 8008cec:	4b0c      	ldr	r3, [pc, #48]	; (8008d20 <I2SEx_TxISR_I2SExt+0x94>)
 8008cee:	e001      	b.n	8008cf4 <I2SEx_TxISR_I2SExt+0x68>
 8008cf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008cf8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff ff81 	bl	8008c14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	40003800 	.word	0x40003800
 8008d20:	40003400 	.word	0x40003400

08008d24 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68d8      	ldr	r0, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	1c99      	adds	r1, r3, #2
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008d3c:	b282      	uxth	r2, r0
 8008d3e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	3b01      	subs	r3, #1
 8008d48:	b29a      	uxth	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d113      	bne.n	8008d80 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685a      	ldr	r2, [r3, #4]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008d66:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff ff4a 	bl	8008c14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d80:	bf00      	nop
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a20      	ldr	r2, [pc, #128]	; (8008e18 <I2SEx_RxISR_I2SExt+0x90>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d101      	bne.n	8008d9e <I2SEx_RxISR_I2SExt+0x16>
 8008d9a:	4b20      	ldr	r3, [pc, #128]	; (8008e1c <I2SEx_RxISR_I2SExt+0x94>)
 8008d9c:	e001      	b.n	8008da2 <I2SEx_RxISR_I2SExt+0x1a>
 8008d9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008da2:	68d8      	ldr	r0, [r3, #12]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	1c99      	adds	r1, r3, #2
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008dae:	b282      	uxth	r2, r0
 8008db0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	3b01      	subs	r3, #1
 8008dba:	b29a      	uxth	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d121      	bne.n	8008e0e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a12      	ldr	r2, [pc, #72]	; (8008e18 <I2SEx_RxISR_I2SExt+0x90>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d101      	bne.n	8008dd8 <I2SEx_RxISR_I2SExt+0x50>
 8008dd4:	4b11      	ldr	r3, [pc, #68]	; (8008e1c <I2SEx_RxISR_I2SExt+0x94>)
 8008dd6:	e001      	b.n	8008ddc <I2SEx_RxISR_I2SExt+0x54>
 8008dd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	490d      	ldr	r1, [pc, #52]	; (8008e18 <I2SEx_RxISR_I2SExt+0x90>)
 8008de4:	428b      	cmp	r3, r1
 8008de6:	d101      	bne.n	8008dec <I2SEx_RxISR_I2SExt+0x64>
 8008de8:	4b0c      	ldr	r3, [pc, #48]	; (8008e1c <I2SEx_RxISR_I2SExt+0x94>)
 8008dea:	e001      	b.n	8008df0 <I2SEx_RxISR_I2SExt+0x68>
 8008dec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008df0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008df4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d106      	bne.n	8008e0e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7ff ff03 	bl	8008c14 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40003800 	.word	0x40003800
 8008e1c:	40003400 	.word	0x40003400

08008e20 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008e28:	f7fc f820 	bl	8004e6c <HAL_GetTick>
 8008e2c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8008e34:	2301      	movs	r3, #1
 8008e36:	e069      	b.n	8008f0c <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10b      	bne.n	8008e5c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7fa f93f 	bl	80030d0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008e52:	f241 3188 	movw	r1, #5000	; 0x1388
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f85e 	bl	8008f18 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	021a      	lsls	r2, r3, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	2120      	movs	r1, #32
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f856 	bl	8008f34 <QSPI_WaitFlagStateUntilTimeout>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8008e8c:	7afb      	ldrb	r3, [r7, #11]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d137      	bne.n	8008f02 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e9c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	6852      	ldr	r2, [r2, #4]
 8008ea4:	0611      	lsls	r1, r2, #24
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	68d2      	ldr	r2, [r2, #12]
 8008eaa:	4311      	orrs	r1, r2
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	69d2      	ldr	r2, [r2, #28]
 8008eb0:	4311      	orrs	r1, r2
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	6a12      	ldr	r2, [r2, #32]
 8008eb6:	4311      	orrs	r1, r2
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6812      	ldr	r2, [r2, #0]
 8008ebc:	430b      	orrs	r3, r1
 8008ebe:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	4b13      	ldr	r3, [pc, #76]	; (8008f14 <HAL_QSPI_Init+0xf4>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6912      	ldr	r2, [r2, #16]
 8008ece:	0411      	lsls	r1, r2, #16
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	6952      	ldr	r2, [r2, #20]
 8008ed4:	4311      	orrs	r1, r2
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	6992      	ldr	r2, [r2, #24]
 8008eda:	4311      	orrs	r1, r2
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6812      	ldr	r2, [r2, #0]
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8008f0a:	7afb      	ldrb	r3, [r7, #11]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	ffe0f8fe 	.word	0xffe0f8fe

08008f18 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	649a      	str	r2, [r3, #72]	; 0x48
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	603b      	str	r3, [r7, #0]
 8008f40:	4613      	mov	r3, r2
 8008f42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008f44:	e01a      	b.n	8008f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4c:	d016      	beq.n	8008f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f4e:	f7fb ff8d 	bl	8004e6c <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d302      	bcc.n	8008f64 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10b      	bne.n	8008f7c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2204      	movs	r2, #4
 8008f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f70:	f043 0201 	orr.w	r2, r3, #1
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e00e      	b.n	8008f9a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	4013      	ands	r3, r2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bf14      	ite	ne
 8008f8a:	2301      	movne	r3, #1
 8008f8c:	2300      	moveq	r3, #0
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	79fb      	ldrb	r3, [r7, #7]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d1d6      	bne.n	8008f46 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0cc      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008fb8:	4b68      	ldr	r3, [pc, #416]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d90c      	bls.n	8008fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fc6:	4b65      	ldr	r3, [pc, #404]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	b2d2      	uxtb	r2, r2
 8008fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fce:	4b63      	ldr	r3, [pc, #396]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 030f 	and.w	r3, r3, #15
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d001      	beq.n	8008fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e0b8      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0302 	and.w	r3, r3, #2
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d020      	beq.n	800902e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0304 	and.w	r3, r3, #4
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d005      	beq.n	8009004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ff8:	4b59      	ldr	r3, [pc, #356]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	4a58      	ldr	r2, [pc, #352]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8008ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009010:	4b53      	ldr	r3, [pc, #332]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	4a52      	ldr	r2, [pc, #328]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800901a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800901c:	4b50      	ldr	r3, [pc, #320]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	494d      	ldr	r1, [pc, #308]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 800902a:	4313      	orrs	r3, r2
 800902c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d044      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d107      	bne.n	8009052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009042:	4b47      	ldr	r3, [pc, #284]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904a:	2b00      	cmp	r3, #0
 800904c:	d119      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e07f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	2b02      	cmp	r3, #2
 8009058:	d003      	beq.n	8009062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800905e:	2b03      	cmp	r3, #3
 8009060:	d107      	bne.n	8009072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009062:	4b3f      	ldr	r3, [pc, #252]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e06f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009072:	4b3b      	ldr	r3, [pc, #236]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e067      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009082:	4b37      	ldr	r3, [pc, #220]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f023 0203 	bic.w	r2, r3, #3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4934      	ldr	r1, [pc, #208]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009090:	4313      	orrs	r3, r2
 8009092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009094:	f7fb feea 	bl	8004e6c <HAL_GetTick>
 8009098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800909a:	e00a      	b.n	80090b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800909c:	f7fb fee6 	bl	8004e6c <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e04f      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b2:	4b2b      	ldr	r3, [pc, #172]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 020c 	and.w	r2, r3, #12
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d1eb      	bne.n	800909c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80090c4:	4b25      	ldr	r3, [pc, #148]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d20c      	bcs.n	80090ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b22      	ldr	r3, [pc, #136]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090da:	4b20      	ldr	r3, [pc, #128]	; (800915c <HAL_RCC_ClockConfig+0x1b8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 030f 	and.w	r3, r3, #15
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d001      	beq.n	80090ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e032      	b.n	8009152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d008      	beq.n	800910a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090f8:	4b19      	ldr	r3, [pc, #100]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	4916      	ldr	r1, [pc, #88]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009106:	4313      	orrs	r3, r2
 8009108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009116:	4b12      	ldr	r3, [pc, #72]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	490e      	ldr	r1, [pc, #56]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009126:	4313      	orrs	r3, r2
 8009128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800912a:	f000 f821 	bl	8009170 <HAL_RCC_GetSysClockFreq>
 800912e:	4601      	mov	r1, r0
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <HAL_RCC_ClockConfig+0x1bc>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	091b      	lsrs	r3, r3, #4
 8009136:	f003 030f 	and.w	r3, r3, #15
 800913a:	4a0a      	ldr	r2, [pc, #40]	; (8009164 <HAL_RCC_ClockConfig+0x1c0>)
 800913c:	5cd3      	ldrb	r3, [r2, r3]
 800913e:	fa21 f303 	lsr.w	r3, r1, r3
 8009142:	4a09      	ldr	r2, [pc, #36]	; (8009168 <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <HAL_RCC_ClockConfig+0x1c8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f7fa fab6 	bl	80036bc <HAL_InitTick>

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	40023c00 	.word	0x40023c00
 8009160:	40023800 	.word	0x40023800
 8009164:	08015578 	.word	0x08015578
 8009168:	20000048 	.word	0x20000048
 800916c:	200000a4 	.word	0x200000a4

08009170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009176:	2300      	movs	r3, #0
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	2300      	movs	r3, #0
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	2300      	movs	r3, #0
 8009180:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009186:	4b50      	ldr	r3, [pc, #320]	; (80092c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 030c 	and.w	r3, r3, #12
 800918e:	2b04      	cmp	r3, #4
 8009190:	d007      	beq.n	80091a2 <HAL_RCC_GetSysClockFreq+0x32>
 8009192:	2b08      	cmp	r3, #8
 8009194:	d008      	beq.n	80091a8 <HAL_RCC_GetSysClockFreq+0x38>
 8009196:	2b00      	cmp	r3, #0
 8009198:	f040 808d 	bne.w	80092b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800919c:	4b4b      	ldr	r3, [pc, #300]	; (80092cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800919e:	60bb      	str	r3, [r7, #8]
       break;
 80091a0:	e08c      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80091a2:	4b4b      	ldr	r3, [pc, #300]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80091a4:	60bb      	str	r3, [r7, #8]
      break;
 80091a6:	e089      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091a8:	4b47      	ldr	r3, [pc, #284]	; (80092c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80091b2:	4b45      	ldr	r3, [pc, #276]	; (80092c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d023      	beq.n	8009206 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091be:	4b42      	ldr	r3, [pc, #264]	; (80092c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	099b      	lsrs	r3, r3, #6
 80091c4:	f04f 0400 	mov.w	r4, #0
 80091c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80091cc:	f04f 0200 	mov.w	r2, #0
 80091d0:	ea03 0501 	and.w	r5, r3, r1
 80091d4:	ea04 0602 	and.w	r6, r4, r2
 80091d8:	4a3d      	ldr	r2, [pc, #244]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80091da:	fb02 f106 	mul.w	r1, r2, r6
 80091de:	2200      	movs	r2, #0
 80091e0:	fb02 f205 	mul.w	r2, r2, r5
 80091e4:	440a      	add	r2, r1
 80091e6:	493a      	ldr	r1, [pc, #232]	; (80092d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80091e8:	fba5 0101 	umull	r0, r1, r5, r1
 80091ec:	1853      	adds	r3, r2, r1
 80091ee:	4619      	mov	r1, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f04f 0400 	mov.w	r4, #0
 80091f6:	461a      	mov	r2, r3
 80091f8:	4623      	mov	r3, r4
 80091fa:	f7f7 fd2f 	bl	8000c5c <__aeabi_uldivmod>
 80091fe:	4603      	mov	r3, r0
 8009200:	460c      	mov	r4, r1
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	e049      	b.n	800929a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009206:	4b30      	ldr	r3, [pc, #192]	; (80092c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	099b      	lsrs	r3, r3, #6
 800920c:	f04f 0400 	mov.w	r4, #0
 8009210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009214:	f04f 0200 	mov.w	r2, #0
 8009218:	ea03 0501 	and.w	r5, r3, r1
 800921c:	ea04 0602 	and.w	r6, r4, r2
 8009220:	4629      	mov	r1, r5
 8009222:	4632      	mov	r2, r6
 8009224:	f04f 0300 	mov.w	r3, #0
 8009228:	f04f 0400 	mov.w	r4, #0
 800922c:	0154      	lsls	r4, r2, #5
 800922e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009232:	014b      	lsls	r3, r1, #5
 8009234:	4619      	mov	r1, r3
 8009236:	4622      	mov	r2, r4
 8009238:	1b49      	subs	r1, r1, r5
 800923a:	eb62 0206 	sbc.w	r2, r2, r6
 800923e:	f04f 0300 	mov.w	r3, #0
 8009242:	f04f 0400 	mov.w	r4, #0
 8009246:	0194      	lsls	r4, r2, #6
 8009248:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800924c:	018b      	lsls	r3, r1, #6
 800924e:	1a5b      	subs	r3, r3, r1
 8009250:	eb64 0402 	sbc.w	r4, r4, r2
 8009254:	f04f 0100 	mov.w	r1, #0
 8009258:	f04f 0200 	mov.w	r2, #0
 800925c:	00e2      	lsls	r2, r4, #3
 800925e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009262:	00d9      	lsls	r1, r3, #3
 8009264:	460b      	mov	r3, r1
 8009266:	4614      	mov	r4, r2
 8009268:	195b      	adds	r3, r3, r5
 800926a:	eb44 0406 	adc.w	r4, r4, r6
 800926e:	f04f 0100 	mov.w	r1, #0
 8009272:	f04f 0200 	mov.w	r2, #0
 8009276:	02a2      	lsls	r2, r4, #10
 8009278:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800927c:	0299      	lsls	r1, r3, #10
 800927e:	460b      	mov	r3, r1
 8009280:	4614      	mov	r4, r2
 8009282:	4618      	mov	r0, r3
 8009284:	4621      	mov	r1, r4
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f04f 0400 	mov.w	r4, #0
 800928c:	461a      	mov	r2, r3
 800928e:	4623      	mov	r3, r4
 8009290:	f7f7 fce4 	bl	8000c5c <__aeabi_uldivmod>
 8009294:	4603      	mov	r3, r0
 8009296:	460c      	mov	r4, r1
 8009298:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800929a:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	0c1b      	lsrs	r3, r3, #16
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	3301      	adds	r3, #1
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b2:	60bb      	str	r3, [r7, #8]
      break;
 80092b4:	e002      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80092b6:	4b05      	ldr	r3, [pc, #20]	; (80092cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80092b8:	60bb      	str	r3, [r7, #8]
      break;
 80092ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80092bc:	68bb      	ldr	r3, [r7, #8]
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c6:	bf00      	nop
 80092c8:	40023800 	.word	0x40023800
 80092cc:	00f42400 	.word	0x00f42400
 80092d0:	017d7840 	.word	0x017d7840

080092d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092d8:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80092da:	681b      	ldr	r3, [r3, #0]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20000048 	.word	0x20000048

080092ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80092f0:	f7ff fff0 	bl	80092d4 <HAL_RCC_GetHCLKFreq>
 80092f4:	4601      	mov	r1, r0
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <HAL_RCC_GetPCLK1Freq+0x20>)
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	0a9b      	lsrs	r3, r3, #10
 80092fc:	f003 0307 	and.w	r3, r3, #7
 8009300:	4a03      	ldr	r2, [pc, #12]	; (8009310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009302:	5cd3      	ldrb	r3, [r2, r3]
 8009304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009308:	4618      	mov	r0, r3
 800930a:	bd80      	pop	{r7, pc}
 800930c:	40023800 	.word	0x40023800
 8009310:	08015588 	.word	0x08015588

08009314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009318:	f7ff ffdc 	bl	80092d4 <HAL_RCC_GetHCLKFreq>
 800931c:	4601      	mov	r1, r0
 800931e:	4b05      	ldr	r3, [pc, #20]	; (8009334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	0b5b      	lsrs	r3, r3, #13
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	4a03      	ldr	r2, [pc, #12]	; (8009338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800932a:	5cd3      	ldrb	r3, [r2, r3]
 800932c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009330:	4618      	mov	r0, r3
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40023800 	.word	0x40023800
 8009338:	08015588 	.word	0x08015588

0800933c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	220f      	movs	r2, #15
 800934a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800934c:	4b12      	ldr	r3, [pc, #72]	; (8009398 <HAL_RCC_GetClockConfig+0x5c>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f003 0203 	and.w	r2, r3, #3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009358:	4b0f      	ldr	r3, [pc, #60]	; (8009398 <HAL_RCC_GetClockConfig+0x5c>)
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <HAL_RCC_GetClockConfig+0x5c>)
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009370:	4b09      	ldr	r3, [pc, #36]	; (8009398 <HAL_RCC_GetClockConfig+0x5c>)
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	08db      	lsrs	r3, r3, #3
 8009376:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800937e:	4b07      	ldr	r3, [pc, #28]	; (800939c <HAL_RCC_GetClockConfig+0x60>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 020f 	and.w	r2, r3, #15
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	601a      	str	r2, [r3, #0]
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	40023800 	.word	0x40023800
 800939c:	40023c00 	.word	0x40023c00

080093a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093a8:	2300      	movs	r3, #0
 80093aa:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d010      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80093c4:	4b7a      	ldr	r3, [pc, #488]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80093c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	4977      	ldr	r1, [pc, #476]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	69db      	ldr	r3, [r3, #28]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80093e2:	2301      	movs	r3, #1
 80093e4:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d010      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80093f2:	4b6f      	ldr	r3, [pc, #444]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80093f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a1b      	ldr	r3, [r3, #32]
 8009400:	496b      	ldr	r1, [pc, #428]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009402:	4313      	orrs	r3, r2
 8009404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8009410:	2301      	movs	r3, #1
 8009412:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800941c:	2b00      	cmp	r3, #0
 800941e:	d022      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8009420:	4b63      	ldr	r3, [pc, #396]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009422:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800942e:	4960      	ldr	r1, [pc, #384]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009430:	4313      	orrs	r3, r2
 8009432:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800943e:	2301      	movs	r3, #1
 8009440:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800944a:	d10c      	bne.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800944c:	4b58      	ldr	r3, [pc, #352]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800944e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009452:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	695b      	ldr	r3, [r3, #20]
 800945a:	3b01      	subs	r3, #1
 800945c:	021b      	lsls	r3, r3, #8
 800945e:	4954      	ldr	r1, [pc, #336]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009460:	4313      	orrs	r3, r2
 8009462:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d022      	beq.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8009472:	4b4f      	ldr	r3, [pc, #316]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009480:	494b      	ldr	r1, [pc, #300]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d101      	bne.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8009490:	2301      	movs	r3, #1
 8009492:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009498:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800949c:	d10c      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800949e:	4b44      	ldr	r3, [pc, #272]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80094a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	3b01      	subs	r3, #1
 80094ae:	021b      	lsls	r3, r3, #8
 80094b0:	493f      	ldr	r1, [pc, #252]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0308 	and.w	r3, r3, #8
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 808a 	beq.w	80095da <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	4b39      	ldr	r3, [pc, #228]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80094cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ce:	4a38      	ldr	r2, [pc, #224]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80094d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094d4:	6413      	str	r3, [r2, #64]	; 0x40
 80094d6:	4b36      	ldr	r3, [pc, #216]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80094e2:	4b34      	ldr	r3, [pc, #208]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a33      	ldr	r2, [pc, #204]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80094e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094ee:	f7fb fcbd 	bl	8004e6c <HAL_GetTick>
 80094f2:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80094f4:	e008      	b.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80094f6:	f7fb fcb9 	bl	8004e6c <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e1d1      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009508:	4b2a      	ldr	r3, [pc, #168]	; (80095b4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0f0      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009514:	4b26      	ldr	r3, [pc, #152]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800951c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d02f      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	429a      	cmp	r2, r3
 8009530:	d028      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009532:	4b1f      	ldr	r3, [pc, #124]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800953a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800953c:	4b1e      	ldr	r3, [pc, #120]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800953e:	2201      	movs	r2, #1
 8009540:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009542:	4b1d      	ldr	r3, [pc, #116]	; (80095b8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8009544:	2200      	movs	r2, #0
 8009546:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009548:	4a19      	ldr	r2, [pc, #100]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800954e:	4b18      	ldr	r3, [pc, #96]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009552:	f003 0301 	and.w	r3, r3, #1
 8009556:	2b01      	cmp	r3, #1
 8009558:	d114      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800955a:	f7fb fc87 	bl	8004e6c <HAL_GetTick>
 800955e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009560:	e00a      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009562:	f7fb fc83 	bl	8004e6c <HAL_GetTick>
 8009566:	4602      	mov	r2, r0
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009570:	4293      	cmp	r3, r2
 8009572:	d901      	bls.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e199      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009578:	4b0d      	ldr	r3, [pc, #52]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800957a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d0ee      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800958c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009590:	d114      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8009592:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80095a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095a6:	4902      	ldr	r1, [pc, #8]	; (80095b0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80095a8:	4313      	orrs	r3, r2
 80095aa:	608b      	str	r3, [r1, #8]
 80095ac:	e00c      	b.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 80095ae:	bf00      	nop
 80095b0:	40023800 	.word	0x40023800
 80095b4:	40007000 	.word	0x40007000
 80095b8:	42470e40 	.word	0x42470e40
 80095bc:	4b89      	ldr	r3, [pc, #548]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	4a88      	ldr	r2, [pc, #544]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80095c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80095c6:	6093      	str	r3, [r2, #8]
 80095c8:	4b86      	ldr	r3, [pc, #536]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80095ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80095d4:	4983      	ldr	r1, [pc, #524]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 0304 	and.w	r3, r3, #4
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d004      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80095ec:	4b7e      	ldr	r3, [pc, #504]	; (80097e8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80095ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0310 	and.w	r3, r3, #16
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00a      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80095fc:	4b79      	ldr	r3, [pc, #484]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80095fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009602:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800960a:	4976      	ldr	r1, [pc, #472]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800960c:	4313      	orrs	r3, r2
 800960e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f003 0320 	and.w	r3, r3, #32
 800961a:	2b00      	cmp	r3, #0
 800961c:	d011      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800961e:	4b71      	ldr	r3, [pc, #452]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009624:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962c:	496d      	ldr	r1, [pc, #436]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800962e:	4313      	orrs	r3, r2
 8009630:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009638:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800963c:	d101      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800963e:	2301      	movs	r3, #1
 8009640:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00a      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800964e:	4b65      	ldr	r3, [pc, #404]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009654:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965c:	4961      	ldr	r1, [pc, #388]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800965e:	4313      	orrs	r3, r2
 8009660:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d004      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b80      	cmp	r3, #128	; 0x80
 8009670:	f040 80c6 	bne.w	8009800 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009674:	4b5d      	ldr	r3, [pc, #372]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8009676:	2200      	movs	r2, #0
 8009678:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800967a:	f7fb fbf7 	bl	8004e6c <HAL_GetTick>
 800967e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009680:	e008      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009682:	f7fb fbf3 	bl	8004e6c <HAL_GetTick>
 8009686:	4602      	mov	r2, r0
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	1ad3      	subs	r3, r2, r3
 800968c:	2b02      	cmp	r3, #2
 800968e:	d901      	bls.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009690:	2303      	movs	r3, #3
 8009692:	e10b      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009694:	4b53      	ldr	r3, [pc, #332]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1f0      	bne.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80096a0:	4a53      	ldr	r2, [pc, #332]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096a6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d003      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d023      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d003      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d019      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096e4:	d00e      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d019      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d115      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x386>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009702:	d110      	bne.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	019b      	lsls	r3, r3, #6
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	68db      	ldr	r3, [r3, #12]
 8009714:	061b      	lsls	r3, r3, #24
 8009716:	431a      	orrs	r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	691b      	ldr	r3, [r3, #16]
 800971c:	071b      	lsls	r3, r3, #28
 800971e:	4931      	ldr	r1, [pc, #196]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009720:	4313      	orrs	r3, r2
 8009722:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009736:	2b00      	cmp	r3, #0
 8009738:	d009      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8009742:	2b00      	cmp	r3, #0
 8009744:	d026      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974a:	2b00      	cmp	r3, #0
 800974c:	d122      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800974e:	4b25      	ldr	r3, [pc, #148]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009754:	0e1b      	lsrs	r3, r3, #24
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	019b      	lsls	r3, r3, #6
 8009766:	431a      	orrs	r2, r3
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	061b      	lsls	r3, r3, #24
 800976c:	431a      	orrs	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	071b      	lsls	r3, r3, #28
 8009774:	491b      	ldr	r1, [pc, #108]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8009776:	4313      	orrs	r3, r2
 8009778:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800977c:	4b19      	ldr	r3, [pc, #100]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800977e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009782:	f023 021f 	bic.w	r2, r3, #31
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	3b01      	subs	r3, #1
 800978c:	4915      	ldr	r1, [pc, #84]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800978e:	4313      	orrs	r3, r2
 8009790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979c:	2b00      	cmp	r3, #0
 800979e:	d010      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685a      	ldr	r2, [r3, #4]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	019b      	lsls	r3, r3, #6
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	061b      	lsls	r3, r3, #24
 80097b2:	431a      	orrs	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	691b      	ldr	r3, [r3, #16]
 80097b8:	071b      	lsls	r3, r3, #28
 80097ba:	490a      	ldr	r1, [pc, #40]	; (80097e4 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80097bc:	4313      	orrs	r3, r2
 80097be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80097c2:	4b0a      	ldr	r3, [pc, #40]	; (80097ec <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80097c4:	2201      	movs	r2, #1
 80097c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097c8:	f7fb fb50 	bl	8004e6c <HAL_GetTick>
 80097cc:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097ce:	e011      	b.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80097d0:	f7fb fb4c 	bl	8004e6c <HAL_GetTick>
 80097d4:	4602      	mov	r2, r0
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d90a      	bls.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e064      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80097e2:	bf00      	nop
 80097e4:	40023800 	.word	0x40023800
 80097e8:	424711e0 	.word	0x424711e0
 80097ec:	42470068 	.word	0x42470068
 80097f0:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097f4:	4b2f      	ldr	r3, [pc, #188]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0e7      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00a      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800980c:	4b29      	ldr	r3, [pc, #164]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800980e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009812:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981a:	4926      	ldr	r1, [pc, #152]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800981c:	4313      	orrs	r3, r2
 800981e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800982a:	2b00      	cmp	r3, #0
 800982c:	d00a      	beq.n	8009844 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800982e:	4b21      	ldr	r3, [pc, #132]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009834:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983c:	491d      	ldr	r1, [pc, #116]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800983e:	4313      	orrs	r3, r2
 8009840:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8009850:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800985e:	4915      	ldr	r1, [pc, #84]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009860:	4313      	orrs	r3, r2
 8009862:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8009872:	4b10      	ldr	r3, [pc, #64]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009878:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009880:	490c      	ldr	r1, [pc, #48]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009882:	4313      	orrs	r3, r2
 8009884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009894:	4b07      	ldr	r3, [pc, #28]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8009896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800989a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098a2:	4904      	ldr	r1, [pc, #16]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80098a4:	4313      	orrs	r3, r2
 80098a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	40023800 	.word	0x40023800

080098b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80098c0:	2300      	movs	r3, #0
 80098c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80098c4:	2300      	movs	r3, #0
 80098c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80098c8:	2300      	movs	r3, #0
 80098ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d003      	beq.n	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80098d6:	2b02      	cmp	r3, #2
 80098d8:	f000 8098 	beq.w	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80098dc:	e12d      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 80098de:	4b9a      	ldr	r3, [pc, #616]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80098e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098e4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80098e8:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098f0:	d00c      	beq.n	800990c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 80098f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098f6:	d802      	bhi.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00a      	beq.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
 80098fc:	e082      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80098fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009902:	d047      	beq.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8009904:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009908:	d06f      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x132>
 800990a:	e07b      	b.n	8009a04 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800990c:	4b8f      	ldr	r3, [pc, #572]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800990e:	617b      	str	r3, [r7, #20]
          break;
 8009910:	e07b      	b.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8009912:	4b8d      	ldr	r3, [pc, #564]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800991c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009920:	d109      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009922:	4b89      	ldr	r3, [pc, #548]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009924:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800992c:	4a87      	ldr	r2, [pc, #540]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800992e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	e019      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009936:	4b84      	ldr	r3, [pc, #528]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800993e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009942:	d109      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009944:	4b80      	ldr	r3, [pc, #512]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800994a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800994e:	4a80      	ldr	r2, [pc, #512]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009950:	fbb2 f3f3 	udiv	r3, r2, r3
 8009954:	613b      	str	r3, [r7, #16]
 8009956:	e008      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009958:	4b7b      	ldr	r3, [pc, #492]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800995a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800995e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009962:	4a7c      	ldr	r2, [pc, #496]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009964:	fbb2 f3f3 	udiv	r3, r2, r3
 8009968:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800996a:	4b77      	ldr	r3, [pc, #476]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800996c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009970:	099b      	lsrs	r3, r3, #6
 8009972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	fb02 f303 	mul.w	r3, r2, r3
 800997c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800997e:	4b72      	ldr	r3, [pc, #456]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009984:	0f1b      	lsrs	r3, r3, #28
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009990:	617b      	str	r3, [r7, #20]
          break;
 8009992:	e03a      	b.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009994:	4b6c      	ldr	r3, [pc, #432]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800999c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099a0:	d108      	bne.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80099a2:	4b69      	ldr	r3, [pc, #420]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099aa:	4a69      	ldr	r2, [pc, #420]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80099ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b0:	613b      	str	r3, [r7, #16]
 80099b2:	e007      	b.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80099b4:	4b64      	ldr	r3, [pc, #400]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80099b6:	685b      	ldr	r3, [r3, #4]
 80099b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099bc:	4a65      	ldr	r2, [pc, #404]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80099be:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80099c4:	4b60      	ldr	r3, [pc, #384]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	099b      	lsrs	r3, r3, #6
 80099ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	fb02 f303 	mul.w	r3, r2, r3
 80099d4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80099d6:	4b5c      	ldr	r3, [pc, #368]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80099d8:	685b      	ldr	r3, [r3, #4]
 80099da:	0f1b      	lsrs	r3, r3, #28
 80099dc:	f003 0307 	and.w	r3, r3, #7
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099e6:	617b      	str	r3, [r7, #20]
          break;
 80099e8:	e00f      	b.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80099ea:	4b57      	ldr	r3, [pc, #348]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80099f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099f6:	d102      	bne.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          {
            frequency = HSE_VALUE;
 80099f8:	4b55      	ldr	r3, [pc, #340]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80099fa:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80099fc:	e005      	b.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
            frequency = HSI_VALUE;
 80099fe:	4b55      	ldr	r3, [pc, #340]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a00:	617b      	str	r3, [r7, #20]
          break;
 8009a02:	e002      	b.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
          break;
 8009a08:	bf00      	nop
        }
      }
      break;
 8009a0a:	e096      	b.n	8009b3a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8009a0c:	4b4e      	ldr	r3, [pc, #312]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a12:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8009a16:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a1e:	d00c      	beq.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8009a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a24:	d802      	bhi.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x174>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8009a2a:	e082      	b.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a30:	d047      	beq.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009a32:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8009a36:	d06f      	beq.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8009a38:	e07b      	b.n	8009b32 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009a3a:	4b44      	ldr	r3, [pc, #272]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a3c:	617b      	str	r3, [r7, #20]
          break;
 8009a3e:	e07b      	b.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8009a40:	4b41      	ldr	r3, [pc, #260]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a4e:	d109      	bne.n	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009a50:	4b3d      	ldr	r3, [pc, #244]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a5a:	4a3c      	ldr	r2, [pc, #240]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a60:	613b      	str	r3, [r7, #16]
 8009a62:	e019      	b.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009a64:	4b38      	ldr	r3, [pc, #224]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a70:	d109      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009a72:	4b35      	ldr	r3, [pc, #212]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a7c:	4a34      	ldr	r2, [pc, #208]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a82:	613b      	str	r3, [r7, #16]
 8009a84:	e008      	b.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8009a86:	4b30      	ldr	r3, [pc, #192]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a90:	4a30      	ldr	r2, [pc, #192]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a96:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009a98:	4b2b      	ldr	r3, [pc, #172]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a9e:	099b      	lsrs	r3, r3, #6
 8009aa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	fb02 f303 	mul.w	r3, r2, r3
 8009aaa:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009aac:	4b26      	ldr	r3, [pc, #152]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ab2:	0f1b      	lsrs	r3, r3, #28
 8009ab4:	f003 0307 	and.w	r3, r3, #7
 8009ab8:	68ba      	ldr	r2, [r7, #8]
 8009aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009abe:	617b      	str	r3, [r7, #20]
          break;
 8009ac0:	e03a      	b.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009ac2:	4b21      	ldr	r3, [pc, #132]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ace:	d108      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x22a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009ad0:	4b1d      	ldr	r3, [pc, #116]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ad8:	4a1d      	ldr	r2, [pc, #116]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ade:	613b      	str	r3, [r7, #16]
 8009ae0:	e007      	b.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009ae2:	4b19      	ldr	r3, [pc, #100]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009aea:	4a1a      	ldr	r2, [pc, #104]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af0:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8009af2:	4b15      	ldr	r3, [pc, #84]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	099b      	lsrs	r3, r3, #6
 8009af8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
 8009b02:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8009b04:	4b10      	ldr	r3, [pc, #64]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	0f1b      	lsrs	r3, r3, #28
 8009b0a:	f003 0307 	and.w	r3, r3, #7
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b14:	617b      	str	r3, [r7, #20]
          break;
 8009b16:	e00f      	b.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009b18:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b24:	d102      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x274>
          {
            frequency = HSE_VALUE;
 8009b26:	4b0a      	ldr	r3, [pc, #40]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009b28:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8009b2a:	e005      	b.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
            frequency = HSI_VALUE;
 8009b2c:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009b2e:	617b      	str	r3, [r7, #20]
          break;
 8009b30:	e002      	b.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]
          break;
 8009b36:	bf00      	nop
        }
      }
      break;
 8009b38:	bf00      	nop
    }
  }
  return frequency;
 8009b3a:	697b      	ldr	r3, [r7, #20]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	371c      	adds	r7, #28
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	00bb8000 	.word	0x00bb8000
 8009b50:	017d7840 	.word	0x017d7840
 8009b54:	00f42400 	.word	0x00f42400

08009b58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f003 0301 	and.w	r3, r3, #1
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d075      	beq.n	8009c5c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009b70:	4ba2      	ldr	r3, [pc, #648]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f003 030c 	and.w	r3, r3, #12
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d00c      	beq.n	8009b96 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b7c:	4b9f      	ldr	r3, [pc, #636]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009b84:	2b08      	cmp	r3, #8
 8009b86:	d112      	bne.n	8009bae <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009b88:	4b9c      	ldr	r3, [pc, #624]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b94:	d10b      	bne.n	8009bae <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b96:	4b99      	ldr	r3, [pc, #612]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d05b      	beq.n	8009c5a <HAL_RCC_OscConfig+0x102>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d157      	bne.n	8009c5a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e20b      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bb6:	d106      	bne.n	8009bc6 <HAL_RCC_OscConfig+0x6e>
 8009bb8:	4b90      	ldr	r3, [pc, #576]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a8f      	ldr	r2, [pc, #572]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bc2:	6013      	str	r3, [r2, #0]
 8009bc4:	e01d      	b.n	8009c02 <HAL_RCC_OscConfig+0xaa>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bce:	d10c      	bne.n	8009bea <HAL_RCC_OscConfig+0x92>
 8009bd0:	4b8a      	ldr	r3, [pc, #552]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a89      	ldr	r2, [pc, #548]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	4b87      	ldr	r3, [pc, #540]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a86      	ldr	r2, [pc, #536]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009be6:	6013      	str	r3, [r2, #0]
 8009be8:	e00b      	b.n	8009c02 <HAL_RCC_OscConfig+0xaa>
 8009bea:	4b84      	ldr	r3, [pc, #528]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a83      	ldr	r2, [pc, #524]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	4b81      	ldr	r3, [pc, #516]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a80      	ldr	r2, [pc, #512]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c00:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d013      	beq.n	8009c32 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c0a:	f7fb f92f 	bl	8004e6c <HAL_GetTick>
 8009c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c10:	e008      	b.n	8009c24 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c12:	f7fb f92b 	bl	8004e6c <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	2b64      	cmp	r3, #100	; 0x64
 8009c1e:	d901      	bls.n	8009c24 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e1d0      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c24:	4b75      	ldr	r3, [pc, #468]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0f0      	beq.n	8009c12 <HAL_RCC_OscConfig+0xba>
 8009c30:	e014      	b.n	8009c5c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c32:	f7fb f91b 	bl	8004e6c <HAL_GetTick>
 8009c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c38:	e008      	b.n	8009c4c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009c3a:	f7fb f917 	bl	8004e6c <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	2b64      	cmp	r3, #100	; 0x64
 8009c46:	d901      	bls.n	8009c4c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e1bc      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009c4c:	4b6b      	ldr	r3, [pc, #428]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d1f0      	bne.n	8009c3a <HAL_RCC_OscConfig+0xe2>
 8009c58:	e000      	b.n	8009c5c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0302 	and.w	r3, r3, #2
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d063      	beq.n	8009d30 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009c68:	4b64      	ldr	r3, [pc, #400]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f003 030c 	and.w	r3, r3, #12
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d00b      	beq.n	8009c8c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c74:	4b61      	ldr	r3, [pc, #388]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009c76:	689b      	ldr	r3, [r3, #8]
 8009c78:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d11c      	bne.n	8009cba <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009c80:	4b5e      	ldr	r3, [pc, #376]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d116      	bne.n	8009cba <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009c8c:	4b5b      	ldr	r3, [pc, #364]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d005      	beq.n	8009ca4 <HAL_RCC_OscConfig+0x14c>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d001      	beq.n	8009ca4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e190      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ca4:	4b55      	ldr	r3, [pc, #340]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	00db      	lsls	r3, r3, #3
 8009cb2:	4952      	ldr	r1, [pc, #328]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009cb8:	e03a      	b.n	8009d30 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d020      	beq.n	8009d04 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009cc2:	4b4f      	ldr	r3, [pc, #316]	; (8009e00 <HAL_RCC_OscConfig+0x2a8>)
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cc8:	f7fb f8d0 	bl	8004e6c <HAL_GetTick>
 8009ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009cce:	e008      	b.n	8009ce2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cd0:	f7fb f8cc 	bl	8004e6c <HAL_GetTick>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d901      	bls.n	8009ce2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009cde:	2303      	movs	r3, #3
 8009ce0:	e171      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ce2:	4b46      	ldr	r3, [pc, #280]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d0f0      	beq.n	8009cd0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cee:	4b43      	ldr	r3, [pc, #268]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	00db      	lsls	r3, r3, #3
 8009cfc:	493f      	ldr	r1, [pc, #252]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	600b      	str	r3, [r1, #0]
 8009d02:	e015      	b.n	8009d30 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d04:	4b3e      	ldr	r3, [pc, #248]	; (8009e00 <HAL_RCC_OscConfig+0x2a8>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d0a:	f7fb f8af 	bl	8004e6c <HAL_GetTick>
 8009d0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d10:	e008      	b.n	8009d24 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d12:	f7fb f8ab 	bl	8004e6c <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d901      	bls.n	8009d24 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e150      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009d24:	4b35      	ldr	r3, [pc, #212]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1f0      	bne.n	8009d12 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0308 	and.w	r3, r3, #8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d030      	beq.n	8009d9e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	695b      	ldr	r3, [r3, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d016      	beq.n	8009d72 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d44:	4b2f      	ldr	r3, [pc, #188]	; (8009e04 <HAL_RCC_OscConfig+0x2ac>)
 8009d46:	2201      	movs	r2, #1
 8009d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d4a:	f7fb f88f 	bl	8004e6c <HAL_GetTick>
 8009d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d50:	e008      	b.n	8009d64 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d52:	f7fb f88b 	bl	8004e6c <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d901      	bls.n	8009d64 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e130      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009d64:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0f0      	beq.n	8009d52 <HAL_RCC_OscConfig+0x1fa>
 8009d70:	e015      	b.n	8009d9e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009d72:	4b24      	ldr	r3, [pc, #144]	; (8009e04 <HAL_RCC_OscConfig+0x2ac>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d78:	f7fb f878 	bl	8004e6c <HAL_GetTick>
 8009d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d7e:	e008      	b.n	8009d92 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009d80:	f7fb f874 	bl	8004e6c <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d901      	bls.n	8009d92 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e119      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009d92:	4b1a      	ldr	r3, [pc, #104]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1f0      	bne.n	8009d80 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f003 0304 	and.w	r3, r3, #4
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 809f 	beq.w	8009eea <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009dac:	2300      	movs	r3, #0
 8009dae:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009db0:	4b12      	ldr	r3, [pc, #72]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10f      	bne.n	8009ddc <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	60fb      	str	r3, [r7, #12]
 8009dc0:	4b0e      	ldr	r3, [pc, #56]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc4:	4a0d      	ldr	r2, [pc, #52]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009dc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dca:	6413      	str	r3, [r2, #64]	; 0x40
 8009dcc:	4b0b      	ldr	r3, [pc, #44]	; (8009dfc <HAL_RCC_OscConfig+0x2a4>)
 8009dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <HAL_RCC_OscConfig+0x2b0>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d120      	bne.n	8009e2a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009de8:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <HAL_RCC_OscConfig+0x2b0>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a06      	ldr	r2, [pc, #24]	; (8009e08 <HAL_RCC_OscConfig+0x2b0>)
 8009dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009df2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009df4:	f7fb f83a 	bl	8004e6c <HAL_GetTick>
 8009df8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009dfa:	e010      	b.n	8009e1e <HAL_RCC_OscConfig+0x2c6>
 8009dfc:	40023800 	.word	0x40023800
 8009e00:	42470000 	.word	0x42470000
 8009e04:	42470e80 	.word	0x42470e80
 8009e08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e0c:	f7fb f82e 	bl	8004e6c <HAL_GetTick>
 8009e10:	4602      	mov	r2, r0
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e0d3      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e1e:	4b6c      	ldr	r3, [pc, #432]	; (8009fd0 <HAL_RCC_OscConfig+0x478>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0f0      	beq.n	8009e0c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d106      	bne.n	8009e40 <HAL_RCC_OscConfig+0x2e8>
 8009e32:	4b68      	ldr	r3, [pc, #416]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e36:	4a67      	ldr	r2, [pc, #412]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e38:	f043 0301 	orr.w	r3, r3, #1
 8009e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e3e:	e01c      	b.n	8009e7a <HAL_RCC_OscConfig+0x322>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b05      	cmp	r3, #5
 8009e46:	d10c      	bne.n	8009e62 <HAL_RCC_OscConfig+0x30a>
 8009e48:	4b62      	ldr	r3, [pc, #392]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e4c:	4a61      	ldr	r2, [pc, #388]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e4e:	f043 0304 	orr.w	r3, r3, #4
 8009e52:	6713      	str	r3, [r2, #112]	; 0x70
 8009e54:	4b5f      	ldr	r3, [pc, #380]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e58:	4a5e      	ldr	r2, [pc, #376]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e5a:	f043 0301 	orr.w	r3, r3, #1
 8009e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e60:	e00b      	b.n	8009e7a <HAL_RCC_OscConfig+0x322>
 8009e62:	4b5c      	ldr	r3, [pc, #368]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e66:	4a5b      	ldr	r2, [pc, #364]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8009e6e:	4b59      	ldr	r3, [pc, #356]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e72:	4a58      	ldr	r2, [pc, #352]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009e74:	f023 0304 	bic.w	r3, r3, #4
 8009e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d015      	beq.n	8009eae <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e82:	f7fa fff3 	bl	8004e6c <HAL_GetTick>
 8009e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e88:	e00a      	b.n	8009ea0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009e8a:	f7fa ffef 	bl	8004e6c <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e092      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ea0:	4b4c      	ldr	r3, [pc, #304]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0ee      	beq.n	8009e8a <HAL_RCC_OscConfig+0x332>
 8009eac:	e014      	b.n	8009ed8 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eae:	f7fa ffdd 	bl	8004e6c <HAL_GetTick>
 8009eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009eb4:	e00a      	b.n	8009ecc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009eb6:	f7fa ffd9 	bl	8004e6c <HAL_GetTick>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d901      	bls.n	8009ecc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e07c      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009ecc:	4b41      	ldr	r3, [pc, #260]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1ee      	bne.n	8009eb6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d105      	bne.n	8009eea <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009ede:	4b3d      	ldr	r3, [pc, #244]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee2:	4a3c      	ldr	r2, [pc, #240]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d068      	beq.n	8009fc4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ef2:	4b38      	ldr	r3, [pc, #224]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	f003 030c 	and.w	r3, r3, #12
 8009efa:	2b08      	cmp	r3, #8
 8009efc:	d060      	beq.n	8009fc0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d145      	bne.n	8009f92 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f06:	4b34      	ldr	r3, [pc, #208]	; (8009fd8 <HAL_RCC_OscConfig+0x480>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f0c:	f7fa ffae 	bl	8004e6c <HAL_GetTick>
 8009f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f12:	e008      	b.n	8009f26 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f14:	f7fa ffaa 	bl	8004e6c <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d901      	bls.n	8009f26 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e04f      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f26:	4b2b      	ldr	r3, [pc, #172]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d1f0      	bne.n	8009f14 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	69da      	ldr	r2, [r3, #28]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	019b      	lsls	r3, r3, #6
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f48:	085b      	lsrs	r3, r3, #1
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	041b      	lsls	r3, r3, #16
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	061b      	lsls	r3, r3, #24
 8009f56:	431a      	orrs	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f5c:	071b      	lsls	r3, r3, #28
 8009f5e:	491d      	ldr	r1, [pc, #116]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f64:	4b1c      	ldr	r3, [pc, #112]	; (8009fd8 <HAL_RCC_OscConfig+0x480>)
 8009f66:	2201      	movs	r2, #1
 8009f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f6a:	f7fa ff7f 	bl	8004e6c <HAL_GetTick>
 8009f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f70:	e008      	b.n	8009f84 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f72:	f7fa ff7b 	bl	8004e6c <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d901      	bls.n	8009f84 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e020      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f84:	4b13      	ldr	r3, [pc, #76]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0f0      	beq.n	8009f72 <HAL_RCC_OscConfig+0x41a>
 8009f90:	e018      	b.n	8009fc4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f92:	4b11      	ldr	r3, [pc, #68]	; (8009fd8 <HAL_RCC_OscConfig+0x480>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f98:	f7fa ff68 	bl	8004e6c <HAL_GetTick>
 8009f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009f9e:	e008      	b.n	8009fb2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fa0:	f7fa ff64 	bl	8004e6c <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d901      	bls.n	8009fb2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	e009      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fb2:	4b08      	ldr	r3, [pc, #32]	; (8009fd4 <HAL_RCC_OscConfig+0x47c>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1f0      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x448>
 8009fbe:	e001      	b.n	8009fc4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e000      	b.n	8009fc6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	40007000 	.word	0x40007000
 8009fd4:	40023800 	.word	0x40023800
 8009fd8:	42470060 	.word	0x42470060

08009fdc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e022      	b.n	800a034 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d105      	bne.n	800a006 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f7f9 f92f 	bl	8003264 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2203      	movs	r2, #3
 800a00a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f814 	bl	800a03c <HAL_SD_InitCard>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e00a      	b.n	800a034 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a03c:	b5b0      	push	{r4, r5, r7, lr}
 800a03e:	b08e      	sub	sp, #56	; 0x38
 800a040:	af04      	add	r7, sp, #16
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a044:	2300      	movs	r3, #0
 800a046:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a050:	2300      	movs	r3, #0
 800a052:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a054:	2300      	movs	r3, #0
 800a056:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a058:	2376      	movs	r3, #118	; 0x76
 800a05a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681d      	ldr	r5, [r3, #0]
 800a060:	466c      	mov	r4, sp
 800a062:	f107 0314 	add.w	r3, r7, #20
 800a066:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a06a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a06e:	f107 0308 	add.w	r3, r7, #8
 800a072:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a074:	4628      	mov	r0, r5
 800a076:	f002 fcbd 	bl	800c9f4 <SDIO_Init>
 800a07a:	4603      	mov	r3, r0
 800a07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e031      	b.n	800a0f0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a08c:	4b1a      	ldr	r3, [pc, #104]	; (800a0f8 <HAL_SD_InitCard+0xbc>)
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4618      	mov	r0, r3
 800a098:	f002 fce4 	bl	800ca64 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a09c:	4b16      	ldr	r3, [pc, #88]	; (800a0f8 <HAL_SD_InitCard+0xbc>)
 800a09e:	2201      	movs	r2, #1
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fb18 	bl	800a6d8 <SD_PowerON>
 800a0a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	431a      	orrs	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e013      	b.n	800a0f0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fa37 	bl	800a53c <SD_InitCard>
 800a0ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00b      	beq.n	800a0ee <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0e2:	6a3b      	ldr	r3, [r7, #32]
 800a0e4:	431a      	orrs	r2, r3
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e000      	b.n	800a0f0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3728      	adds	r7, #40	; 0x28
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bdb0      	pop	{r4, r5, r7, pc}
 800a0f8:	422580a0 	.word	0x422580a0

0800a0fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a10a:	0f9b      	lsrs	r3, r3, #30
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a116:	0e9b      	lsrs	r3, r3, #26
 800a118:	b2db      	uxtb	r3, r3
 800a11a:	f003 030f 	and.w	r3, r3, #15
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a128:	0e1b      	lsrs	r3, r3, #24
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	f003 0303 	and.w	r3, r3, #3
 800a130:	b2da      	uxtb	r2, r3
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a13a:	0c1b      	lsrs	r3, r3, #16
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a146:	0a1b      	lsrs	r3, r3, #8
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a152:	b2da      	uxtb	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a15c:	0d1b      	lsrs	r3, r3, #20
 800a15e:	b29a      	uxth	r2, r3
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a168:	0c1b      	lsrs	r3, r3, #16
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	f003 030f 	and.w	r3, r3, #15
 800a170:	b2da      	uxtb	r2, r3
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a17a:	0bdb      	lsrs	r3, r3, #15
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	f003 0301 	and.w	r3, r3, #1
 800a182:	b2da      	uxtb	r2, r3
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a18c:	0b9b      	lsrs	r3, r3, #14
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	b2da      	uxtb	r2, r3
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a19e:	0b5b      	lsrs	r3, r3, #13
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1b0:	0b1b      	lsrs	r3, r3, #12
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 0301 	and.w	r3, r3, #1
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d163      	bne.n	800a294 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1d0:	009a      	lsls	r2, r3, #2
 800a1d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a1dc:	0f92      	lsrs	r2, r2, #30
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1e8:	0edb      	lsrs	r3, r3, #27
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	f003 0307 	and.w	r3, r3, #7
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1fa:	0e1b      	lsrs	r3, r3, #24
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f003 0307 	and.w	r3, r3, #7
 800a202:	b2da      	uxtb	r2, r3
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a20c:	0d5b      	lsrs	r3, r3, #21
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	f003 0307 	and.w	r3, r3, #7
 800a214:	b2da      	uxtb	r2, r3
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a21e:	0c9b      	lsrs	r3, r3, #18
 800a220:	b2db      	uxtb	r3, r3
 800a222:	f003 0307 	and.w	r3, r3, #7
 800a226:	b2da      	uxtb	r2, r3
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a230:	0bdb      	lsrs	r3, r3, #15
 800a232:	b2db      	uxtb	r3, r3
 800a234:	f003 0307 	and.w	r3, r3, #7
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	1c5a      	adds	r2, r3, #1
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	7e1b      	ldrb	r3, [r3, #24]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	f003 0307 	and.w	r3, r3, #7
 800a252:	3302      	adds	r3, #2
 800a254:	2201      	movs	r2, #1
 800a256:	fa02 f303 	lsl.w	r3, r2, r3
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a25e:	fb02 f203 	mul.w	r2, r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	7a1b      	ldrb	r3, [r3, #8]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 030f 	and.w	r3, r3, #15
 800a270:	2201      	movs	r2, #1
 800a272:	409a      	lsls	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a280:	0a52      	lsrs	r2, r2, #9
 800a282:	fb02 f203 	mul.w	r2, r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a290:	661a      	str	r2, [r3, #96]	; 0x60
 800a292:	e031      	b.n	800a2f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d11d      	bne.n	800a2d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2a0:	041b      	lsls	r3, r3, #16
 800a2a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2aa:	0c1b      	lsrs	r3, r3, #16
 800a2ac:	431a      	orrs	r2, r3
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	029a      	lsls	r2, r3, #10
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	661a      	str	r2, [r3, #96]	; 0x60
 800a2d6:	e00f      	b.n	800a2f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a58      	ldr	r2, [pc, #352]	; (800a440 <HAL_SD_GetCardCSD+0x344>)
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e09d      	b.n	800a434 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2fc:	0b9b      	lsrs	r3, r3, #14
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	b2da      	uxtb	r2, r3
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a30e:	09db      	lsrs	r3, r3, #7
 800a310:	b2db      	uxtb	r3, r3
 800a312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a316:	b2da      	uxtb	r2, r3
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a320:	b2db      	uxtb	r3, r3
 800a322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a326:	b2da      	uxtb	r2, r3
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a330:	0fdb      	lsrs	r3, r3, #31
 800a332:	b2da      	uxtb	r2, r3
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33c:	0f5b      	lsrs	r3, r3, #29
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f003 0303 	and.w	r3, r3, #3
 800a344:	b2da      	uxtb	r2, r3
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a34e:	0e9b      	lsrs	r3, r3, #26
 800a350:	b2db      	uxtb	r3, r3
 800a352:	f003 0307 	and.w	r3, r3, #7
 800a356:	b2da      	uxtb	r2, r3
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a360:	0d9b      	lsrs	r3, r3, #22
 800a362:	b2db      	uxtb	r3, r3
 800a364:	f003 030f 	and.w	r3, r3, #15
 800a368:	b2da      	uxtb	r2, r3
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a372:	0d5b      	lsrs	r3, r3, #21
 800a374:	b2db      	uxtb	r3, r3
 800a376:	f003 0301 	and.w	r3, r3, #1
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a38e:	0c1b      	lsrs	r3, r3, #16
 800a390:	b2db      	uxtb	r3, r3
 800a392:	f003 0301 	and.w	r3, r3, #1
 800a396:	b2da      	uxtb	r2, r3
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a2:	0bdb      	lsrs	r3, r3, #15
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	b2da      	uxtb	r2, r3
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b6:	0b9b      	lsrs	r3, r3, #14
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3ca:	0b5b      	lsrs	r3, r3, #13
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	b2da      	uxtb	r2, r3
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3de:	0b1b      	lsrs	r3, r3, #12
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	b2da      	uxtb	r2, r3
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3f2:	0a9b      	lsrs	r3, r3, #10
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a406:	0a1b      	lsrs	r3, r3, #8
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	f003 0303 	and.w	r3, r3, #3
 800a40e:	b2da      	uxtb	r2, r3
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a41a:	085b      	lsrs	r3, r3, #1
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a422:	b2da      	uxtb	r2, r3
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	004005ff 	.word	0x004005ff

0800a444 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a444:	b5b0      	push	{r4, r5, r7, lr}
 800a446:	b08e      	sub	sp, #56	; 0x38
 800a448:	af04      	add	r7, sp, #16
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2203      	movs	r2, #3
 800a452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d02e      	beq.n	800a4bc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a464:	d106      	bne.n	800a474 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	639a      	str	r2, [r3, #56]	; 0x38
 800a472:	e029      	b.n	800a4c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a47a:	d10a      	bne.n	800a492 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f9b9 	bl	800a7f4 <SD_WideBus_Enable>
 800a482:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	431a      	orrs	r2, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	639a      	str	r2, [r3, #56]	; 0x38
 800a490:	e01a      	b.n	800a4c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10a      	bne.n	800a4ae <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f9f6 	bl	800a88a <SD_WideBus_Disable>
 800a49e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	639a      	str	r2, [r3, #56]	; 0x38
 800a4ac:	e00c      	b.n	800a4c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	639a      	str	r2, [r3, #56]	; 0x38
 800a4ba:	e005      	b.n	800a4c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a18      	ldr	r2, [pc, #96]	; (800a538 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a4d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e024      	b.n	800a52e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	695b      	ldr	r3, [r3, #20]
 800a4fe:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681d      	ldr	r5, [r3, #0]
 800a50a:	466c      	mov	r4, sp
 800a50c:	f107 0318 	add.w	r3, r7, #24
 800a510:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a514:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a518:	f107 030c 	add.w	r3, r7, #12
 800a51c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a51e:	4628      	mov	r0, r5
 800a520:	f002 fa68 	bl	800c9f4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3728      	adds	r7, #40	; 0x28
 800a532:	46bd      	mov	sp, r7
 800a534:	bdb0      	pop	{r4, r5, r7, pc}
 800a536:	bf00      	nop
 800a538:	004005ff 	.word	0x004005ff

0800a53c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a53c:	b5b0      	push	{r4, r5, r7, lr}
 800a53e:	b094      	sub	sp, #80	; 0x50
 800a540:	af04      	add	r7, sp, #16
 800a542:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a544:	2301      	movs	r3, #1
 800a546:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4618      	mov	r0, r3
 800a54e:	f002 fa98 	bl	800ca82 <SDIO_GetPowerState>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d102      	bne.n	800a55e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a558:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a55c:	e0b7      	b.n	800a6ce <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a562:	2b03      	cmp	r3, #3
 800a564:	d02f      	beq.n	800a5c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f002 fc17 	bl	800cd9e <SDMMC_CmdSendCID>
 800a570:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <SD_InitCard+0x40>
    {
      return errorstate;
 800a578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a57a:	e0a8      	b.n	800a6ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2100      	movs	r1, #0
 800a582:	4618      	mov	r0, r3
 800a584:	f002 fac2 	bl	800cb0c <SDIO_GetResponse>
 800a588:	4602      	mov	r2, r0
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2104      	movs	r1, #4
 800a594:	4618      	mov	r0, r3
 800a596:	f002 fab9 	bl	800cb0c <SDIO_GetResponse>
 800a59a:	4602      	mov	r2, r0
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2108      	movs	r1, #8
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f002 fab0 	bl	800cb0c <SDIO_GetResponse>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	210c      	movs	r1, #12
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f002 faa7 	bl	800cb0c <SDIO_GetResponse>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ca:	2b03      	cmp	r3, #3
 800a5cc:	d00d      	beq.n	800a5ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f107 020e 	add.w	r2, r7, #14
 800a5d6:	4611      	mov	r1, r2
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f002 fc1d 	bl	800ce18 <SDMMC_CmdSetRelAdd>
 800a5de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <SD_InitCard+0xae>
    {
      return errorstate;
 800a5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5e8:	e071      	b.n	800a6ce <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d036      	beq.n	800a660 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a5f2:	89fb      	ldrh	r3, [r7, #14]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a602:	041b      	lsls	r3, r3, #16
 800a604:	4619      	mov	r1, r3
 800a606:	4610      	mov	r0, r2
 800a608:	f002 fbe7 	bl	800cdda <SDMMC_CmdSendCSD>
 800a60c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a610:	2b00      	cmp	r3, #0
 800a612:	d001      	beq.n	800a618 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a616:	e05a      	b.n	800a6ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2100      	movs	r1, #0
 800a61e:	4618      	mov	r0, r3
 800a620:	f002 fa74 	bl	800cb0c <SDIO_GetResponse>
 800a624:	4602      	mov	r2, r0
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2104      	movs	r1, #4
 800a630:	4618      	mov	r0, r3
 800a632:	f002 fa6b 	bl	800cb0c <SDIO_GetResponse>
 800a636:	4602      	mov	r2, r0
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2108      	movs	r1, #8
 800a642:	4618      	mov	r0, r3
 800a644:	f002 fa62 	bl	800cb0c <SDIO_GetResponse>
 800a648:	4602      	mov	r2, r0
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	210c      	movs	r1, #12
 800a654:	4618      	mov	r0, r3
 800a656:	f002 fa59 	bl	800cb0c <SDIO_GetResponse>
 800a65a:	4602      	mov	r2, r0
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2104      	movs	r1, #4
 800a666:	4618      	mov	r0, r3
 800a668:	f002 fa50 	bl	800cb0c <SDIO_GetResponse>
 800a66c:	4603      	mov	r3, r0
 800a66e:	0d1a      	lsrs	r2, r3, #20
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a674:	f107 0310 	add.w	r3, r7, #16
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fd3e 	bl	800a0fc <HAL_SD_GetCardCSD>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a68a:	e020      	b.n	800a6ce <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6819      	ldr	r1, [r3, #0]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a694:	041b      	lsls	r3, r3, #16
 800a696:	f04f 0400 	mov.w	r4, #0
 800a69a:	461a      	mov	r2, r3
 800a69c:	4623      	mov	r3, r4
 800a69e:	4608      	mov	r0, r1
 800a6a0:	f002 fa95 	bl	800cbce <SDMMC_CmdSelDesel>
 800a6a4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d001      	beq.n	800a6b0 <SD_InitCard+0x174>
  {
    return errorstate;
 800a6ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ae:	e00e      	b.n	800a6ce <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681d      	ldr	r5, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	466c      	mov	r4, sp
 800a6b8:	f103 0210 	add.w	r2, r3, #16
 800a6bc:	ca07      	ldmia	r2, {r0, r1, r2}
 800a6be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	f002 f994 	bl	800c9f4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3740      	adds	r7, #64	; 0x40
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a6d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	617b      	str	r3, [r7, #20]
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f002 fa8f 	bl	800cc14 <SDMMC_CmdGoIdleState>
 800a6f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	e072      	b.n	800a7e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4618      	mov	r0, r3
 800a708:	f002 faa2 	bl	800cc50 <SDMMC_CmdOperCond>
 800a70c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00d      	beq.n	800a730 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f002 fa78 	bl	800cc14 <SDMMC_CmdGoIdleState>
 800a724:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d004      	beq.n	800a736 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	e05b      	b.n	800a7e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d137      	bne.n	800a7ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2100      	movs	r1, #0
 800a744:	4618      	mov	r0, r3
 800a746:	f002 faa2 	bl	800cc8e <SDMMC_CmdAppCommand>
 800a74a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d02d      	beq.n	800a7ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a752:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a756:	e047      	b.n	800a7e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2100      	movs	r1, #0
 800a75e:	4618      	mov	r0, r3
 800a760:	f002 fa95 	bl	800cc8e <SDMMC_CmdAppCommand>
 800a764:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <SD_PowerON+0x98>
    {
      return errorstate;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	e03b      	b.n	800a7e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	491e      	ldr	r1, [pc, #120]	; (800a7f0 <SD_PowerON+0x118>)
 800a776:	4618      	mov	r0, r3
 800a778:	f002 faab 	bl	800ccd2 <SDMMC_CmdAppOperCommand>
 800a77c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a784:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a788:	e02e      	b.n	800a7e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2100      	movs	r1, #0
 800a790:	4618      	mov	r0, r3
 800a792:	f002 f9bb 	bl	800cb0c <SDIO_GetResponse>
 800a796:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	0fdb      	lsrs	r3, r3, #31
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d101      	bne.n	800a7a4 <SD_PowerON+0xcc>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e000      	b.n	800a7a6 <SD_PowerON+0xce>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	613b      	str	r3, [r7, #16]

    count++;
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d802      	bhi.n	800a7be <SD_PowerON+0xe6>
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0cc      	beq.n	800a758 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d902      	bls.n	800a7ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a7c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7cc:	e00c      	b.n	800a7e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d003      	beq.n	800a7e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	645a      	str	r2, [r3, #68]	; 0x44
 800a7de:	e002      	b.n	800a7e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	c1100000 	.word	0xc1100000

0800a7f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	60fb      	str	r3, [r7, #12]
 800a800:	2300      	movs	r3, #0
 800a802:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2100      	movs	r1, #0
 800a80a:	4618      	mov	r0, r3
 800a80c:	f002 f97e 	bl	800cb0c <SDIO_GetResponse>
 800a810:	4603      	mov	r3, r0
 800a812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a81a:	d102      	bne.n	800a822 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a81c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a820:	e02f      	b.n	800a882 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a822:	f107 030c 	add.w	r3, r7, #12
 800a826:	4619      	mov	r1, r3
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 f879 	bl	800a920 <SD_FindSCR>
 800a82e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	e023      	b.n	800a882 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d01c      	beq.n	800a87e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84c:	041b      	lsls	r3, r3, #16
 800a84e:	4619      	mov	r1, r3
 800a850:	4610      	mov	r0, r2
 800a852:	f002 fa1c 	bl	800cc8e <SDMMC_CmdAppCommand>
 800a856:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d001      	beq.n	800a862 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	e00f      	b.n	800a882 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2102      	movs	r1, #2
 800a868:	4618      	mov	r0, r3
 800a86a:	f002 fa55 	bl	800cd18 <SDMMC_CmdBusWidth>
 800a86e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	e003      	b.n	800a882 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a87a:	2300      	movs	r3, #0
 800a87c:	e001      	b.n	800a882 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a87e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b086      	sub	sp, #24
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a892:	2300      	movs	r3, #0
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	2300      	movs	r3, #0
 800a898:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2100      	movs	r1, #0
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f002 f933 	bl	800cb0c <SDIO_GetResponse>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8b0:	d102      	bne.n	800a8b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a8b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8b6:	e02f      	b.n	800a918 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a8b8:	f107 030c 	add.w	r3, r7, #12
 800a8bc:	4619      	mov	r1, r3
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 f82e 	bl	800a920 <SD_FindSCR>
 800a8c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d001      	beq.n	800a8d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	e023      	b.n	800a918 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d01c      	beq.n	800a914 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e2:	041b      	lsls	r3, r3, #16
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4610      	mov	r0, r2
 800a8e8:	f002 f9d1 	bl	800cc8e <SDMMC_CmdAppCommand>
 800a8ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	e00f      	b.n	800a918 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	4618      	mov	r0, r3
 800a900:	f002 fa0a 	bl	800cd18 <SDMMC_CmdBusWidth>
 800a904:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	e003      	b.n	800a918 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a910:	2300      	movs	r3, #0
 800a912:	e001      	b.n	800a918 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a914:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a920:	b590      	push	{r4, r7, lr}
 800a922:	b08f      	sub	sp, #60	; 0x3c
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a92a:	f7fa fa9f 	bl	8004e6c <HAL_GetTick>
 800a92e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a930:	2300      	movs	r3, #0
 800a932:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a934:	2300      	movs	r3, #0
 800a936:	60bb      	str	r3, [r7, #8]
 800a938:	2300      	movs	r3, #0
 800a93a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2108      	movs	r1, #8
 800a946:	4618      	mov	r0, r3
 800a948:	f002 f91f 	bl	800cb8a <SDMMC_CmdBlockLength>
 800a94c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a956:	e0a9      	b.n	800aaac <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a960:	041b      	lsls	r3, r3, #16
 800a962:	4619      	mov	r1, r3
 800a964:	4610      	mov	r0, r2
 800a966:	f002 f992 	bl	800cc8e <SDMMC_CmdAppCommand>
 800a96a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	e09a      	b.n	800aaac <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a976:	f04f 33ff 	mov.w	r3, #4294967295
 800a97a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a97c:	2308      	movs	r3, #8
 800a97e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a980:	2330      	movs	r3, #48	; 0x30
 800a982:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a984:	2302      	movs	r3, #2
 800a986:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a988:	2300      	movs	r3, #0
 800a98a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a98c:	2301      	movs	r3, #1
 800a98e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f107 0210 	add.w	r2, r7, #16
 800a998:	4611      	mov	r1, r2
 800a99a:	4618      	mov	r0, r3
 800a99c:	f002 f8c9 	bl	800cb32 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f002 f9d9 	bl	800cd5c <SDMMC_CmdSendSCR>
 800a9aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d022      	beq.n	800a9f8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b4:	e07a      	b.n	800aaac <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00e      	beq.n	800a9e2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6819      	ldr	r1, [r3, #0]
 800a9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	f107 0208 	add.w	r2, r7, #8
 800a9d0:	18d4      	adds	r4, r2, r3
 800a9d2:	4608      	mov	r0, r1
 800a9d4:	f002 f839 	bl	800ca4a <SDIO_ReadFIFO>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	6023      	str	r3, [r4, #0]
      index++;
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	3301      	adds	r3, #1
 800a9e0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9e2:	f7fa fa43 	bl	8004e6c <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f0:	d102      	bne.n	800a9f8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a9f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9f6:	e059      	b.n	800aaac <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9fe:	f240 432a 	movw	r3, #1066	; 0x42a
 800aa02:	4013      	ands	r3, r2
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0d6      	beq.n	800a9b6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0e:	f003 0308 	and.w	r3, r3, #8
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d005      	beq.n	800aa22 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2208      	movs	r2, #8
 800aa1c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aa1e:	2308      	movs	r3, #8
 800aa20:	e044      	b.n	800aaac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa28:	f003 0302 	and.w	r3, r3, #2
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d005      	beq.n	800aa3c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2202      	movs	r2, #2
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e037      	b.n	800aaac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa42:	f003 0320 	and.w	r3, r3, #32
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d005      	beq.n	800aa56 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aa52:	2320      	movs	r3, #32
 800aa54:	e02a      	b.n	800aaac <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f240 523a 	movw	r2, #1338	; 0x53a
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	061a      	lsls	r2, r3, #24
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	021b      	lsls	r3, r3, #8
 800aa68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	0a1b      	lsrs	r3, r3, #8
 800aa72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	0e1b      	lsrs	r3, r3, #24
 800aa7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa80:	601a      	str	r2, [r3, #0]
    scr++;
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	3304      	adds	r3, #4
 800aa86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	061a      	lsls	r2, r3, #24
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	021b      	lsls	r3, r3, #8
 800aa90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	0a1b      	lsrs	r3, r3, #8
 800aa9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aa9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	0e1b      	lsrs	r3, r3, #24
 800aaa4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	373c      	adds	r7, #60	; 0x3c
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd90      	pop	{r4, r7, pc}

0800aab4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	60f8      	str	r0, [r7, #12]
 800aabc:	60b9      	str	r1, [r7, #8]
 800aabe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e034      	b.n	800ab34 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2200      	movs	r2, #0
 800aada:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7f8 fde2 	bl	80036a8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3308      	adds	r3, #8
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	f001 fe7c 	bl	800c7ec <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6818      	ldr	r0, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	461a      	mov	r2, r3
 800aafe:	68b9      	ldr	r1, [r7, #8]
 800ab00:	f001 fee4 	bl	800c8cc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6858      	ldr	r0, [r3, #4]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	689a      	ldr	r2, [r3, #8]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	f001 ff2f 	bl	800c974 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	6892      	ldr	r2, [r2, #8]
 800ab1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	6892      	ldr	r2, [r2, #8]
 800ab2a:	f041 0101 	orr.w	r1, r1, #1
 800ab2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e01d      	b.n	800ab8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d106      	bne.n	800ab68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7f8 fbe6 	bl	8003334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	3304      	adds	r3, #4
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	f000 fb4e 	bl	800b21c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2201      	movs	r2, #1
 800ab84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3708      	adds	r7, #8
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab92:	b480      	push	{r7}
 800ab94:	b085      	sub	sp, #20
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68da      	ldr	r2, [r3, #12]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f042 0201 	orr.w	r2, r2, #1
 800aba8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f003 0307 	and.w	r3, r3, #7
 800abb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b06      	cmp	r3, #6
 800abba:	d007      	beq.n	800abcc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3714      	adds	r7, #20
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d101      	bne.n	800abec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	e01d      	b.n	800ac28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d106      	bne.n	800ac06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f815 	bl	800ac30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2202      	movs	r2, #2
 800ac0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	3304      	adds	r3, #4
 800ac16:	4619      	mov	r1, r3
 800ac18:	4610      	mov	r0, r2
 800ac1a:	f000 faff 	bl	800b21c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2201      	movs	r2, #1
 800ac54:	6839      	ldr	r1, [r7, #0]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 fdca 	bl	800b7f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a15      	ldr	r2, [pc, #84]	; (800acb8 <HAL_TIM_PWM_Start+0x74>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d004      	beq.n	800ac70 <HAL_TIM_PWM_Start+0x2c>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a14      	ldr	r2, [pc, #80]	; (800acbc <HAL_TIM_PWM_Start+0x78>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d101      	bne.n	800ac74 <HAL_TIM_PWM_Start+0x30>
 800ac70:	2301      	movs	r3, #1
 800ac72:	e000      	b.n	800ac76 <HAL_TIM_PWM_Start+0x32>
 800ac74:	2300      	movs	r3, #0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d007      	beq.n	800ac8a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f003 0307 	and.w	r3, r3, #7
 800ac94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2b06      	cmp	r3, #6
 800ac9a:	d007      	beq.n	800acac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f042 0201 	orr.w	r2, r2, #1
 800acaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	40010000 	.word	0x40010000
 800acbc:	40010400 	.word	0x40010400

0800acc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	691b      	ldr	r3, [r3, #16]
 800acce:	f003 0302 	and.w	r3, r3, #2
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d122      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f003 0302 	and.w	r3, r3, #2
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	d11b      	bne.n	800ad1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f06f 0202 	mvn.w	r2, #2
 800acec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2201      	movs	r2, #1
 800acf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	f003 0303 	and.w	r3, r3, #3
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa6b 	bl	800b1de <HAL_TIM_IC_CaptureCallback>
 800ad08:	e005      	b.n	800ad16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa5d 	bl	800b1ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 fa6e 	bl	800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f003 0304 	and.w	r3, r3, #4
 800ad26:	2b04      	cmp	r3, #4
 800ad28:	d122      	bne.n	800ad70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	f003 0304 	and.w	r3, r3, #4
 800ad34:	2b04      	cmp	r3, #4
 800ad36:	d11b      	bne.n	800ad70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f06f 0204 	mvn.w	r2, #4
 800ad40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2202      	movs	r2, #2
 800ad46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fa41 	bl	800b1de <HAL_TIM_IC_CaptureCallback>
 800ad5c:	e005      	b.n	800ad6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa33 	bl	800b1ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fa44 	bl	800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0308 	and.w	r3, r3, #8
 800ad7a:	2b08      	cmp	r3, #8
 800ad7c:	d122      	bne.n	800adc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0308 	and.w	r3, r3, #8
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d11b      	bne.n	800adc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0208 	mvn.w	r2, #8
 800ad94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2204      	movs	r2, #4
 800ad9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	f003 0303 	and.w	r3, r3, #3
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d003      	beq.n	800adb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa17 	bl	800b1de <HAL_TIM_IC_CaptureCallback>
 800adb0:	e005      	b.n	800adbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fa09 	bl	800b1ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fa1a 	bl	800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	f003 0310 	and.w	r3, r3, #16
 800adce:	2b10      	cmp	r3, #16
 800add0:	d122      	bne.n	800ae18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f003 0310 	and.w	r3, r3, #16
 800addc:	2b10      	cmp	r3, #16
 800adde:	d11b      	bne.n	800ae18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f06f 0210 	mvn.w	r2, #16
 800ade8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2208      	movs	r2, #8
 800adee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	69db      	ldr	r3, [r3, #28]
 800adf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f9ed 	bl	800b1de <HAL_TIM_IC_CaptureCallback>
 800ae04:	e005      	b.n	800ae12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f9df 	bl	800b1ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f9f0 	bl	800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2200      	movs	r2, #0
 800ae16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d10e      	bne.n	800ae44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f003 0301 	and.w	r3, r3, #1
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d107      	bne.n	800ae44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f06f 0201 	mvn.w	r2, #1
 800ae3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7f7 fde0 	bl	8002a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	691b      	ldr	r3, [r3, #16]
 800ae4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4e:	2b80      	cmp	r3, #128	; 0x80
 800ae50:	d10e      	bne.n	800ae70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae5c:	2b80      	cmp	r3, #128	; 0x80
 800ae5e:	d107      	bne.n	800ae70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fd6c 	bl	800b948 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae7a:	2b40      	cmp	r3, #64	; 0x40
 800ae7c:	d10e      	bne.n	800ae9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae88:	2b40      	cmp	r3, #64	; 0x40
 800ae8a:	d107      	bne.n	800ae9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f9b5 	bl	800b206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	f003 0320 	and.w	r3, r3, #32
 800aea6:	2b20      	cmp	r3, #32
 800aea8:	d10e      	bne.n	800aec8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	f003 0320 	and.w	r3, r3, #32
 800aeb4:	2b20      	cmp	r3, #32
 800aeb6:	d107      	bne.n	800aec8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f06f 0220 	mvn.w	r2, #32
 800aec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fd36 	bl	800b934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d101      	bne.n	800aeea <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aee6:	2302      	movs	r3, #2
 800aee8:	e0b4      	b.n	800b054 <HAL_TIM_PWM_ConfigChannel+0x184>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2202      	movs	r2, #2
 800aef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2b0c      	cmp	r3, #12
 800aefe:	f200 809f 	bhi.w	800b040 <HAL_TIM_PWM_ConfigChannel+0x170>
 800af02:	a201      	add	r2, pc, #4	; (adr r2, 800af08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800af04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af08:	0800af3d 	.word	0x0800af3d
 800af0c:	0800b041 	.word	0x0800b041
 800af10:	0800b041 	.word	0x0800b041
 800af14:	0800b041 	.word	0x0800b041
 800af18:	0800af7d 	.word	0x0800af7d
 800af1c:	0800b041 	.word	0x0800b041
 800af20:	0800b041 	.word	0x0800b041
 800af24:	0800b041 	.word	0x0800b041
 800af28:	0800afbf 	.word	0x0800afbf
 800af2c:	0800b041 	.word	0x0800b041
 800af30:	0800b041 	.word	0x0800b041
 800af34:	0800b041 	.word	0x0800b041
 800af38:	0800afff 	.word	0x0800afff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	4618      	mov	r0, r3
 800af44:	f000 fa0a 	bl	800b35c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	699a      	ldr	r2, [r3, #24]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f042 0208 	orr.w	r2, r2, #8
 800af56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0204 	bic.w	r2, r2, #4
 800af66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6999      	ldr	r1, [r3, #24]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	691a      	ldr	r2, [r3, #16]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	619a      	str	r2, [r3, #24]
      break;
 800af7a:	e062      	b.n	800b042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fa5a 	bl	800b43c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	699a      	ldr	r2, [r3, #24]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	699a      	ldr	r2, [r3, #24]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6999      	ldr	r1, [r3, #24]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	021a      	lsls	r2, r3, #8
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	430a      	orrs	r2, r1
 800afba:	619a      	str	r2, [r3, #24]
      break;
 800afbc:	e041      	b.n	800b042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68b9      	ldr	r1, [r7, #8]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 faaf 	bl	800b528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f042 0208 	orr.w	r2, r2, #8
 800afd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f022 0204 	bic.w	r2, r2, #4
 800afe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69d9      	ldr	r1, [r3, #28]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	691a      	ldr	r2, [r3, #16]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	430a      	orrs	r2, r1
 800affa:	61da      	str	r2, [r3, #28]
      break;
 800affc:	e021      	b.n	800b042 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68b9      	ldr	r1, [r7, #8]
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fb03 	bl	800b610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	69da      	ldr	r2, [r3, #28]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	69da      	ldr	r2, [r3, #28]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	69d9      	ldr	r1, [r3, #28]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	021a      	lsls	r2, r3, #8
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	61da      	str	r2, [r3, #28]
      break;
 800b03e:	e000      	b.n	800b042 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b040:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d101      	bne.n	800b074 <HAL_TIM_ConfigClockSource+0x18>
 800b070:	2302      	movs	r3, #2
 800b072:	e0a6      	b.n	800b1c2 <HAL_TIM_ConfigClockSource+0x166>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2202      	movs	r2, #2
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b09a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2b40      	cmp	r3, #64	; 0x40
 800b0aa:	d067      	beq.n	800b17c <HAL_TIM_ConfigClockSource+0x120>
 800b0ac:	2b40      	cmp	r3, #64	; 0x40
 800b0ae:	d80b      	bhi.n	800b0c8 <HAL_TIM_ConfigClockSource+0x6c>
 800b0b0:	2b10      	cmp	r3, #16
 800b0b2:	d073      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x140>
 800b0b4:	2b10      	cmp	r3, #16
 800b0b6:	d802      	bhi.n	800b0be <HAL_TIM_ConfigClockSource+0x62>
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d06f      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800b0bc:	e078      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0be:	2b20      	cmp	r3, #32
 800b0c0:	d06c      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x140>
 800b0c2:	2b30      	cmp	r3, #48	; 0x30
 800b0c4:	d06a      	beq.n	800b19c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800b0c6:	e073      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0c8:	2b70      	cmp	r3, #112	; 0x70
 800b0ca:	d00d      	beq.n	800b0e8 <HAL_TIM_ConfigClockSource+0x8c>
 800b0cc:	2b70      	cmp	r3, #112	; 0x70
 800b0ce:	d804      	bhi.n	800b0da <HAL_TIM_ConfigClockSource+0x7e>
 800b0d0:	2b50      	cmp	r3, #80	; 0x50
 800b0d2:	d033      	beq.n	800b13c <HAL_TIM_ConfigClockSource+0xe0>
 800b0d4:	2b60      	cmp	r3, #96	; 0x60
 800b0d6:	d041      	beq.n	800b15c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800b0d8:	e06a      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800b0da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0de:	d066      	beq.n	800b1ae <HAL_TIM_ConfigClockSource+0x152>
 800b0e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0e4:	d017      	beq.n	800b116 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800b0e6:	e063      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6818      	ldr	r0, [r3, #0]
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	6899      	ldr	r1, [r3, #8]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	685a      	ldr	r2, [r3, #4]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	f000 fb5a 	bl	800b7b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b10a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	609a      	str	r2, [r3, #8]
      break;
 800b114:	e04c      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6818      	ldr	r0, [r3, #0]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	6899      	ldr	r1, [r3, #8]
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f000 fb43 	bl	800b7b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	689a      	ldr	r2, [r3, #8]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b138:	609a      	str	r2, [r3, #8]
      break;
 800b13a:	e039      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6818      	ldr	r0, [r3, #0]
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	6859      	ldr	r1, [r3, #4]
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	461a      	mov	r2, r3
 800b14a:	f000 fab7 	bl	800b6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	2150      	movs	r1, #80	; 0x50
 800b154:	4618      	mov	r0, r3
 800b156:	f000 fb10 	bl	800b77a <TIM_ITRx_SetConfig>
      break;
 800b15a:	e029      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	6859      	ldr	r1, [r3, #4]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	461a      	mov	r2, r3
 800b16a:	f000 fad6 	bl	800b71a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2160      	movs	r1, #96	; 0x60
 800b174:	4618      	mov	r0, r3
 800b176:	f000 fb00 	bl	800b77a <TIM_ITRx_SetConfig>
      break;
 800b17a:	e019      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6818      	ldr	r0, [r3, #0]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	6859      	ldr	r1, [r3, #4]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	461a      	mov	r2, r3
 800b18a:	f000 fa97 	bl	800b6bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2140      	movs	r1, #64	; 0x40
 800b194:	4618      	mov	r0, r3
 800b196:	f000 faf0 	bl	800b77a <TIM_ITRx_SetConfig>
      break;
 800b19a:	e009      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	4610      	mov	r0, r2
 800b1a8:	f000 fae7 	bl	800b77a <TIM_ITRx_SetConfig>
      break;
 800b1ac:	e000      	b.n	800b1b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800b1ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1c0:	2300      	movs	r3, #0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1d2:	bf00      	nop
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b083      	sub	sp, #12
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1e6:	bf00      	nop
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1fa:	bf00      	nop
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr

0800b206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b206:	b480      	push	{r7}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b20e:	bf00      	nop
 800b210:	370c      	adds	r7, #12
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
	...

0800b21c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a40      	ldr	r2, [pc, #256]	; (800b330 <TIM_Base_SetConfig+0x114>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d013      	beq.n	800b25c <TIM_Base_SetConfig+0x40>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b23a:	d00f      	beq.n	800b25c <TIM_Base_SetConfig+0x40>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	4a3d      	ldr	r2, [pc, #244]	; (800b334 <TIM_Base_SetConfig+0x118>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d00b      	beq.n	800b25c <TIM_Base_SetConfig+0x40>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4a3c      	ldr	r2, [pc, #240]	; (800b338 <TIM_Base_SetConfig+0x11c>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d007      	beq.n	800b25c <TIM_Base_SetConfig+0x40>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a3b      	ldr	r2, [pc, #236]	; (800b33c <TIM_Base_SetConfig+0x120>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d003      	beq.n	800b25c <TIM_Base_SetConfig+0x40>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a3a      	ldr	r2, [pc, #232]	; (800b340 <TIM_Base_SetConfig+0x124>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d108      	bne.n	800b26e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	68fa      	ldr	r2, [r7, #12]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a2f      	ldr	r2, [pc, #188]	; (800b330 <TIM_Base_SetConfig+0x114>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d02b      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b27c:	d027      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a2c      	ldr	r2, [pc, #176]	; (800b334 <TIM_Base_SetConfig+0x118>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d023      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a2b      	ldr	r2, [pc, #172]	; (800b338 <TIM_Base_SetConfig+0x11c>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d01f      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a2a      	ldr	r2, [pc, #168]	; (800b33c <TIM_Base_SetConfig+0x120>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d01b      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a29      	ldr	r2, [pc, #164]	; (800b340 <TIM_Base_SetConfig+0x124>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d017      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a28      	ldr	r2, [pc, #160]	; (800b344 <TIM_Base_SetConfig+0x128>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d013      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a27      	ldr	r2, [pc, #156]	; (800b348 <TIM_Base_SetConfig+0x12c>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d00f      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a26      	ldr	r2, [pc, #152]	; (800b34c <TIM_Base_SetConfig+0x130>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00b      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a25      	ldr	r2, [pc, #148]	; (800b350 <TIM_Base_SetConfig+0x134>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d007      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a24      	ldr	r2, [pc, #144]	; (800b354 <TIM_Base_SetConfig+0x138>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d003      	beq.n	800b2ce <TIM_Base_SetConfig+0xb2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a23      	ldr	r2, [pc, #140]	; (800b358 <TIM_Base_SetConfig+0x13c>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d108      	bne.n	800b2e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	695b      	ldr	r3, [r3, #20]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	4a0a      	ldr	r2, [pc, #40]	; (800b330 <TIM_Base_SetConfig+0x114>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d003      	beq.n	800b314 <TIM_Base_SetConfig+0xf8>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a0c      	ldr	r2, [pc, #48]	; (800b340 <TIM_Base_SetConfig+0x124>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d103      	bne.n	800b31c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	691a      	ldr	r2, [r3, #16]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	615a      	str	r2, [r3, #20]
}
 800b322:	bf00      	nop
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	40010000 	.word	0x40010000
 800b334:	40000400 	.word	0x40000400
 800b338:	40000800 	.word	0x40000800
 800b33c:	40000c00 	.word	0x40000c00
 800b340:	40010400 	.word	0x40010400
 800b344:	40014000 	.word	0x40014000
 800b348:	40014400 	.word	0x40014400
 800b34c:	40014800 	.word	0x40014800
 800b350:	40001800 	.word	0x40001800
 800b354:	40001c00 	.word	0x40001c00
 800b358:	40002000 	.word	0x40002000

0800b35c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b087      	sub	sp, #28
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	f023 0201 	bic.w	r2, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	699b      	ldr	r3, [r3, #24]
 800b382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f023 0303 	bic.w	r3, r3, #3
 800b392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	f023 0302 	bic.w	r3, r3, #2
 800b3a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a20      	ldr	r2, [pc, #128]	; (800b434 <TIM_OC1_SetConfig+0xd8>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d003      	beq.n	800b3c0 <TIM_OC1_SetConfig+0x64>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a1f      	ldr	r2, [pc, #124]	; (800b438 <TIM_OC1_SetConfig+0xdc>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d10c      	bne.n	800b3da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	f023 0308 	bic.w	r3, r3, #8
 800b3c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f023 0304 	bic.w	r3, r3, #4
 800b3d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a15      	ldr	r2, [pc, #84]	; (800b434 <TIM_OC1_SetConfig+0xd8>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d003      	beq.n	800b3ea <TIM_OC1_SetConfig+0x8e>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a14      	ldr	r2, [pc, #80]	; (800b438 <TIM_OC1_SetConfig+0xdc>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d111      	bne.n	800b40e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	4313      	orrs	r3, r2
 800b402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	699b      	ldr	r3, [r3, #24]
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	693a      	ldr	r2, [r7, #16]
 800b412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	697a      	ldr	r2, [r7, #20]
 800b426:	621a      	str	r2, [r3, #32]
}
 800b428:	bf00      	nop
 800b42a:	371c      	adds	r7, #28
 800b42c:	46bd      	mov	sp, r7
 800b42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b432:	4770      	bx	lr
 800b434:	40010000 	.word	0x40010000
 800b438:	40010400 	.word	0x40010400

0800b43c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b087      	sub	sp, #28
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a1b      	ldr	r3, [r3, #32]
 800b44a:	f023 0210 	bic.w	r2, r3, #16
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	021b      	lsls	r3, r3, #8
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	f023 0320 	bic.w	r3, r3, #32
 800b486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	011b      	lsls	r3, r3, #4
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	4313      	orrs	r3, r2
 800b492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	4a22      	ldr	r2, [pc, #136]	; (800b520 <TIM_OC2_SetConfig+0xe4>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d003      	beq.n	800b4a4 <TIM_OC2_SetConfig+0x68>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4a21      	ldr	r2, [pc, #132]	; (800b524 <TIM_OC2_SetConfig+0xe8>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d10d      	bne.n	800b4c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	011b      	lsls	r3, r3, #4
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a17      	ldr	r2, [pc, #92]	; (800b520 <TIM_OC2_SetConfig+0xe4>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d003      	beq.n	800b4d0 <TIM_OC2_SetConfig+0x94>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4a16      	ldr	r2, [pc, #88]	; (800b524 <TIM_OC2_SetConfig+0xe8>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d113      	bne.n	800b4f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	693a      	ldr	r2, [r7, #16]
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	693a      	ldr	r2, [r7, #16]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	697a      	ldr	r2, [r7, #20]
 800b510:	621a      	str	r2, [r3, #32]
}
 800b512:	bf00      	nop
 800b514:	371c      	adds	r7, #28
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	40010000 	.word	0x40010000
 800b524:	40010400 	.word	0x40010400

0800b528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b528:	b480      	push	{r7}
 800b52a:	b087      	sub	sp, #28
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a1b      	ldr	r3, [r3, #32]
 800b542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	69db      	ldr	r3, [r3, #28]
 800b54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 0303 	bic.w	r3, r3, #3
 800b55e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4313      	orrs	r3, r2
 800b568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	021b      	lsls	r3, r3, #8
 800b578:	697a      	ldr	r2, [r7, #20]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4a21      	ldr	r2, [pc, #132]	; (800b608 <TIM_OC3_SetConfig+0xe0>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d003      	beq.n	800b58e <TIM_OC3_SetConfig+0x66>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4a20      	ldr	r2, [pc, #128]	; (800b60c <TIM_OC3_SetConfig+0xe4>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d10d      	bne.n	800b5aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	021b      	lsls	r3, r3, #8
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b5a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a16      	ldr	r2, [pc, #88]	; (800b608 <TIM_OC3_SetConfig+0xe0>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d003      	beq.n	800b5ba <TIM_OC3_SetConfig+0x92>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a15      	ldr	r2, [pc, #84]	; (800b60c <TIM_OC3_SetConfig+0xe4>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d113      	bne.n	800b5e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	011b      	lsls	r3, r3, #4
 800b5d0:	693a      	ldr	r2, [r7, #16]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	011b      	lsls	r3, r3, #4
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	621a      	str	r2, [r3, #32]
}
 800b5fc:	bf00      	nop
 800b5fe:	371c      	adds	r7, #28
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	40010000 	.word	0x40010000
 800b60c:	40010400 	.word	0x40010400

0800b610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b610:	b480      	push	{r7}
 800b612:	b087      	sub	sp, #28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	69db      	ldr	r3, [r3, #28]
 800b636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	021b      	lsls	r3, r3, #8
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	4313      	orrs	r3, r2
 800b652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b65a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	031b      	lsls	r3, r3, #12
 800b662:	693a      	ldr	r2, [r7, #16]
 800b664:	4313      	orrs	r3, r2
 800b666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a12      	ldr	r2, [pc, #72]	; (800b6b4 <TIM_OC4_SetConfig+0xa4>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d003      	beq.n	800b678 <TIM_OC4_SetConfig+0x68>
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a11      	ldr	r2, [pc, #68]	; (800b6b8 <TIM_OC4_SetConfig+0xa8>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d109      	bne.n	800b68c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b67e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	695b      	ldr	r3, [r3, #20]
 800b684:	019b      	lsls	r3, r3, #6
 800b686:	697a      	ldr	r2, [r7, #20]
 800b688:	4313      	orrs	r3, r2
 800b68a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	68fa      	ldr	r2, [r7, #12]
 800b696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	621a      	str	r2, [r3, #32]
}
 800b6a6:	bf00      	nop
 800b6a8:	371c      	adds	r7, #28
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	40010000 	.word	0x40010000
 800b6b8:	40010400 	.word	0x40010400

0800b6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b087      	sub	sp, #28
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	f023 0201 	bic.w	r2, r3, #1
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	011b      	lsls	r3, r3, #4
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f023 030a 	bic.w	r3, r3, #10
 800b6f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	621a      	str	r2, [r3, #32]
}
 800b70e:	bf00      	nop
 800b710:	371c      	adds	r7, #28
 800b712:	46bd      	mov	sp, r7
 800b714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b718:	4770      	bx	lr

0800b71a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b71a:	b480      	push	{r7}
 800b71c:	b087      	sub	sp, #28
 800b71e:	af00      	add	r7, sp, #0
 800b720:	60f8      	str	r0, [r7, #12]
 800b722:	60b9      	str	r1, [r7, #8]
 800b724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	f023 0210 	bic.w	r2, r3, #16
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a1b      	ldr	r3, [r3, #32]
 800b73c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	031b      	lsls	r3, r3, #12
 800b74a:	697a      	ldr	r2, [r7, #20]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	011b      	lsls	r3, r3, #4
 800b75c:	693a      	ldr	r2, [r7, #16]
 800b75e:	4313      	orrs	r3, r2
 800b760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	621a      	str	r2, [r3, #32]
}
 800b76e:	bf00      	nop
 800b770:	371c      	adds	r7, #28
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b085      	sub	sp, #20
 800b77e:	af00      	add	r7, sp, #0
 800b780:	6078      	str	r0, [r7, #4]
 800b782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	4313      	orrs	r3, r2
 800b798:	f043 0307 	orr.w	r3, r3, #7
 800b79c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	609a      	str	r2, [r3, #8]
}
 800b7a4:	bf00      	nop
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
 800b7bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	021a      	lsls	r2, r3, #8
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	609a      	str	r2, [r3, #8]
}
 800b7e4:	bf00      	nop
 800b7e6:	371c      	adds	r7, #28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	f003 031f 	and.w	r3, r3, #31
 800b802:	2201      	movs	r2, #1
 800b804:	fa02 f303 	lsl.w	r3, r2, r3
 800b808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6a1a      	ldr	r2, [r3, #32]
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	43db      	mvns	r3, r3
 800b812:	401a      	ands	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6a1a      	ldr	r2, [r3, #32]
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	f003 031f 	and.w	r3, r3, #31
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	fa01 f303 	lsl.w	r3, r1, r3
 800b828:	431a      	orrs	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	621a      	str	r2, [r3, #32]
}
 800b82e:	bf00      	nop
 800b830:	371c      	adds	r7, #28
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
	...

0800b83c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b850:	2302      	movs	r3, #2
 800b852:	e05a      	b.n	800b90a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2202      	movs	r2, #2
 800b860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b87a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	4313      	orrs	r3, r2
 800b884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a21      	ldr	r2, [pc, #132]	; (800b918 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d022      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8a0:	d01d      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a1d      	ldr	r2, [pc, #116]	; (800b91c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d018      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a1b      	ldr	r2, [pc, #108]	; (800b920 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d013      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a1a      	ldr	r2, [pc, #104]	; (800b924 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d00e      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a18      	ldr	r2, [pc, #96]	; (800b928 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d009      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a17      	ldr	r2, [pc, #92]	; (800b92c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d004      	beq.n	800b8de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a15      	ldr	r2, [pc, #84]	; (800b930 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d10c      	bne.n	800b8f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	40010000 	.word	0x40010000
 800b91c:	40000400 	.word	0x40000400
 800b920:	40000800 	.word	0x40000800
 800b924:	40000c00 	.word	0x40000c00
 800b928:	40010400 	.word	0x40010400
 800b92c:	40014000 	.word	0x40014000
 800b930:	40001800 	.word	0x40001800

0800b934 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e03f      	b.n	800b9ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7f7 fd32 	bl	80033ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2224      	movs	r2, #36	; 0x24
 800b98c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68da      	ldr	r2, [r3, #12]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b99e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 fb8b 	bl	800c0bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	691a      	ldr	r2, [r3, #16]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	695a      	ldr	r2, [r3, #20]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68da      	ldr	r2, [r3, #12]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b9d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2220      	movs	r2, #32
 800b9e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2220      	movs	r2, #32
 800b9e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
	...

0800b9f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	d166      	bne.n	800bae0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d002      	beq.n	800ba1e <HAL_UART_Receive_DMA+0x26>
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e05f      	b.n	800bae2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d101      	bne.n	800ba30 <HAL_UART_Receive_DMA+0x38>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e058      	b.n	800bae2 <HAL_UART_Receive_DMA+0xea>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ba38:	68ba      	ldr	r2, [r7, #8]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	88fa      	ldrh	r2, [r7, #6]
 800ba42:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2222      	movs	r2, #34	; 0x22
 800ba4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba56:	4a25      	ldr	r2, [pc, #148]	; (800baec <HAL_UART_Receive_DMA+0xf4>)
 800ba58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5e:	4a24      	ldr	r2, [pc, #144]	; (800baf0 <HAL_UART_Receive_DMA+0xf8>)
 800ba60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba66:	4a23      	ldr	r2, [pc, #140]	; (800baf4 <HAL_UART_Receive_DMA+0xfc>)
 800ba68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6e:	2200      	movs	r2, #0
 800ba70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800ba72:	f107 0308 	add.w	r3, r7, #8
 800ba76:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3304      	adds	r3, #4
 800ba82:	4619      	mov	r1, r3
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	88fb      	ldrh	r3, [r7, #6]
 800ba8a:	f7fa f979 	bl	8005d80 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800ba8e:	2300      	movs	r3, #0
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	613b      	str	r3, [r7, #16]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	613b      	str	r3, [r7, #16]
 800baa2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68da      	ldr	r2, [r3, #12]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baba:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	695a      	ldr	r2, [r3, #20]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	695a      	ldr	r2, [r3, #20]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bada:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	e000      	b.n	800bae2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800bae0:	2302      	movs	r3, #2
  }
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	0800bd35 	.word	0x0800bd35
 800baf0:	0800bd9d 	.word	0x0800bd9d
 800baf4:	0800bdb9 	.word	0x0800bdb9

0800baf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	695b      	ldr	r3, [r3, #20]
 800bb16:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	f003 030f 	and.w	r3, r3, #15
 800bb26:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10d      	bne.n	800bb4a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	f003 0320 	and.w	r3, r3, #32
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d008      	beq.n	800bb4a <HAL_UART_IRQHandler+0x52>
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	f003 0320 	and.w	r3, r3, #32
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d003      	beq.n	800bb4a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f000 fa38 	bl	800bfb8 <UART_Receive_IT>
      return;
 800bb48:	e0d1      	b.n	800bcee <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 80b0 	beq.w	800bcb2 <HAL_UART_IRQHandler+0x1ba>
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f003 0301 	and.w	r3, r3, #1
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d105      	bne.n	800bb68 <HAL_UART_IRQHandler+0x70>
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	f000 80a5 	beq.w	800bcb2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <HAL_UART_IRQHandler+0x90>
 800bb72:	69bb      	ldr	r3, [r7, #24]
 800bb74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d005      	beq.n	800bb88 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb80:	f043 0201 	orr.w	r2, r3, #1
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	f003 0304 	and.w	r3, r3, #4
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d00a      	beq.n	800bba8 <HAL_UART_IRQHandler+0xb0>
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f003 0301 	and.w	r3, r3, #1
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d005      	beq.n	800bba8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba0:	f043 0202 	orr.w	r2, r3, #2
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	f003 0302 	and.w	r3, r3, #2
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d00a      	beq.n	800bbc8 <HAL_UART_IRQHandler+0xd0>
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d005      	beq.n	800bbc8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbc0:	f043 0204 	orr.w	r2, r3, #4
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00f      	beq.n	800bbf2 <HAL_UART_IRQHandler+0xfa>
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	f003 0320 	and.w	r3, r3, #32
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d104      	bne.n	800bbe6 <HAL_UART_IRQHandler+0xee>
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d005      	beq.n	800bbf2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbea:	f043 0208 	orr.w	r2, r3, #8
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d078      	beq.n	800bcec <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	f003 0320 	and.w	r3, r3, #32
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d007      	beq.n	800bc14 <HAL_UART_IRQHandler+0x11c>
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	f003 0320 	and.w	r3, r3, #32
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d002      	beq.n	800bc14 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 f9d2 	bl	800bfb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1e:	2b40      	cmp	r3, #64	; 0x40
 800bc20:	bf0c      	ite	eq
 800bc22:	2301      	moveq	r3, #1
 800bc24:	2300      	movne	r3, #0
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2e:	f003 0308 	and.w	r3, r3, #8
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d102      	bne.n	800bc3c <HAL_UART_IRQHandler+0x144>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d031      	beq.n	800bca0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f91b 	bl	800be78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc4c:	2b40      	cmp	r3, #64	; 0x40
 800bc4e:	d123      	bne.n	800bc98 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	695a      	ldr	r2, [r3, #20]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc5e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d013      	beq.n	800bc90 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc6c:	4a21      	ldr	r2, [pc, #132]	; (800bcf4 <HAL_UART_IRQHandler+0x1fc>)
 800bc6e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc74:	4618      	mov	r0, r3
 800bc76:	f7fa f8db 	bl	8005e30 <HAL_DMA_Abort_IT>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d016      	beq.n	800bcae <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc8e:	e00e      	b.n	800bcae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f845 	bl	800bd20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc96:	e00a      	b.n	800bcae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f000 f841 	bl	800bd20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc9e:	e006      	b.n	800bcae <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f83d 	bl	800bd20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800bcac:	e01e      	b.n	800bcec <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcae:	bf00      	nop
    return;
 800bcb0:	e01c      	b.n	800bcec <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d008      	beq.n	800bcce <HAL_UART_IRQHandler+0x1d6>
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d003      	beq.n	800bcce <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 f908 	bl	800bedc <UART_Transmit_IT>
    return;
 800bccc:	e00f      	b.n	800bcee <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00a      	beq.n	800bcee <HAL_UART_IRQHandler+0x1f6>
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d005      	beq.n	800bcee <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 f950 	bl	800bf88 <UART_EndTransmit_IT>
    return;
 800bce8:	bf00      	nop
 800bcea:	e000      	b.n	800bcee <HAL_UART_IRQHandler+0x1f6>
    return;
 800bcec:	bf00      	nop
  }
}
 800bcee:	3720      	adds	r7, #32
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	0800beb5 	.word	0x0800beb5

0800bcf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b083      	sub	sp, #12
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bd14:	bf00      	nop
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b084      	sub	sp, #16
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd40:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d11e      	bne.n	800bd8e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2200      	movs	r2, #0
 800bd54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68da      	ldr	r2, [r3, #12]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd64:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	695a      	ldr	r2, [r3, #20]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f022 0201 	bic.w	r2, r2, #1
 800bd74:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	695a      	ldr	r2, [r3, #20]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd84:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2220      	movs	r2, #32
 800bd8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7f6 f98a 	bl	80020a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd94:	bf00      	nop
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f7ff ffae 	bl	800bd0c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdb0:	bf00      	nop
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b084      	sub	sp, #16
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	695b      	ldr	r3, [r3, #20]
 800bdd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdd4:	2b80      	cmp	r3, #128	; 0x80
 800bdd6:	bf0c      	ite	eq
 800bdd8:	2301      	moveq	r3, #1
 800bdda:	2300      	movne	r3, #0
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b21      	cmp	r3, #33	; 0x21
 800bdea:	d108      	bne.n	800bdfe <UART_DMAError+0x46>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d005      	beq.n	800bdfe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bdf8:	68b8      	ldr	r0, [r7, #8]
 800bdfa:	f000 f827 	bl	800be4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	695b      	ldr	r3, [r3, #20]
 800be04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be08:	2b40      	cmp	r3, #64	; 0x40
 800be0a:	bf0c      	ite	eq
 800be0c:	2301      	moveq	r3, #1
 800be0e:	2300      	movne	r3, #0
 800be10:	b2db      	uxtb	r3, r3
 800be12:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	2b22      	cmp	r3, #34	; 0x22
 800be1e:	d108      	bne.n	800be32 <UART_DMAError+0x7a>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d005      	beq.n	800be32 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2200      	movs	r2, #0
 800be2a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800be2c:	68b8      	ldr	r0, [r7, #8]
 800be2e:	f000 f823 	bl	800be78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be36:	f043 0210 	orr.w	r2, r3, #16
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be3e:	68b8      	ldr	r0, [r7, #8]
 800be40:	f7ff ff6e 	bl	800bd20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be44:	bf00      	nop
 800be46:	3710      	adds	r7, #16
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68da      	ldr	r2, [r3, #12]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800be62:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68da      	ldr	r2, [r3, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	695a      	ldr	r2, [r3, #20]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f022 0201 	bic.w	r2, r2, #1
 800be9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2220      	movs	r2, #32
 800bea4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800bea8:	bf00      	nop
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f7ff ff26 	bl	800bd20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bed4:	bf00      	nop
 800bed6:	3710      	adds	r7, #16
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b21      	cmp	r3, #33	; 0x21
 800beee:	d144      	bne.n	800bf7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef8:	d11a      	bne.n	800bf30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a1b      	ldr	r3, [r3, #32]
 800befe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	461a      	mov	r2, r3
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d105      	bne.n	800bf24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a1b      	ldr	r3, [r3, #32]
 800bf1c:	1c9a      	adds	r2, r3, #2
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	621a      	str	r2, [r3, #32]
 800bf22:	e00e      	b.n	800bf42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a1b      	ldr	r3, [r3, #32]
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	621a      	str	r2, [r3, #32]
 800bf2e:	e008      	b.n	800bf42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a1b      	ldr	r3, [r3, #32]
 800bf34:	1c59      	adds	r1, r3, #1
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	6211      	str	r1, [r2, #32]
 800bf3a:	781a      	ldrb	r2, [r3, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	3b01      	subs	r3, #1
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	4619      	mov	r1, r3
 800bf50:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10f      	bne.n	800bf76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68da      	ldr	r2, [r3, #12]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf76:	2300      	movs	r3, #0
 800bf78:	e000      	b.n	800bf7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800bf7a:	2302      	movs	r3, #2
  }
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3714      	adds	r7, #20
 800bf80:	46bd      	mov	sp, r7
 800bf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf86:	4770      	bx	lr

0800bf88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68da      	ldr	r2, [r3, #12]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2220      	movs	r2, #32
 800bfa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f7ff fea5 	bl	800bcf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b22      	cmp	r3, #34	; 0x22
 800bfca:	d171      	bne.n	800c0b0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd4:	d123      	bne.n	800c01e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d10e      	bne.n	800c002 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bffa:	1c9a      	adds	r2, r3, #2
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	629a      	str	r2, [r3, #40]	; 0x28
 800c000:	e029      	b.n	800c056 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	b29b      	uxth	r3, r3
 800c00a:	b2db      	uxtb	r3, r3
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	629a      	str	r2, [r3, #40]	; 0x28
 800c01c:	e01b      	b.n	800c056 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10a      	bne.n	800c03c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6858      	ldr	r0, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c030:	1c59      	adds	r1, r3, #1
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	6291      	str	r1, [r2, #40]	; 0x28
 800c036:	b2c2      	uxtb	r2, r0
 800c038:	701a      	strb	r2, [r3, #0]
 800c03a:	e00c      	b.n	800c056 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	b2da      	uxtb	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c048:	1c58      	adds	r0, r3, #1
 800c04a:	6879      	ldr	r1, [r7, #4]
 800c04c:	6288      	str	r0, [r1, #40]	; 0x28
 800c04e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c052:	b2d2      	uxtb	r2, r2
 800c054:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	3b01      	subs	r3, #1
 800c05e:	b29b      	uxth	r3, r3
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	4619      	mov	r1, r3
 800c064:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c066:	2b00      	cmp	r3, #0
 800c068:	d120      	bne.n	800c0ac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	68da      	ldr	r2, [r3, #12]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f022 0220 	bic.w	r2, r2, #32
 800c078:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68da      	ldr	r2, [r3, #12]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c088:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	695a      	ldr	r2, [r3, #20]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f022 0201 	bic.w	r2, r2, #1
 800c098:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2220      	movs	r2, #32
 800c09e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7f6 f800 	bl	80020a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	e002      	b.n	800c0b2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e000      	b.n	800c0b2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800c0b0:	2302      	movs	r3, #2
  }
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
	...

0800c0bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c0:	b085      	sub	sp, #20
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	68da      	ldr	r2, [r3, #12]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	430a      	orrs	r2, r1
 800c0da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689a      	ldr	r2, [r3, #8]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	431a      	orrs	r2, r3
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	695b      	ldr	r3, [r3, #20]
 800c0ea:	431a      	orrs	r2, r3
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	69db      	ldr	r3, [r3, #28]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c0fe:	f023 030c 	bic.w	r3, r3, #12
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	6812      	ldr	r2, [r2, #0]
 800c106:	68f9      	ldr	r1, [r7, #12]
 800c108:	430b      	orrs	r3, r1
 800c10a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	699a      	ldr	r2, [r3, #24]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	430a      	orrs	r2, r1
 800c120:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	69db      	ldr	r3, [r3, #28]
 800c126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c12a:	f040 8199 	bne.w	800c460 <UART_SetConfig+0x3a4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	4ac6      	ldr	r2, [pc, #792]	; (800c44c <UART_SetConfig+0x390>)
 800c134:	4293      	cmp	r3, r2
 800c136:	d00f      	beq.n	800c158 <UART_SetConfig+0x9c>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4ac4      	ldr	r2, [pc, #784]	; (800c450 <UART_SetConfig+0x394>)
 800c13e:	4293      	cmp	r3, r2
 800c140:	d00a      	beq.n	800c158 <UART_SetConfig+0x9c>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4ac3      	ldr	r2, [pc, #780]	; (800c454 <UART_SetConfig+0x398>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d005      	beq.n	800c158 <UART_SetConfig+0x9c>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	4ac1      	ldr	r2, [pc, #772]	; (800c458 <UART_SetConfig+0x39c>)
 800c152:	4293      	cmp	r3, r2
 800c154:	f040 80bd 	bne.w	800c2d2 <UART_SetConfig+0x216>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c158:	f7fd f8dc 	bl	8009314 <HAL_RCC_GetPCLK2Freq>
 800c15c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	461d      	mov	r5, r3
 800c162:	f04f 0600 	mov.w	r6, #0
 800c166:	46a8      	mov	r8, r5
 800c168:	46b1      	mov	r9, r6
 800c16a:	eb18 0308 	adds.w	r3, r8, r8
 800c16e:	eb49 0409 	adc.w	r4, r9, r9
 800c172:	4698      	mov	r8, r3
 800c174:	46a1      	mov	r9, r4
 800c176:	eb18 0805 	adds.w	r8, r8, r5
 800c17a:	eb49 0906 	adc.w	r9, r9, r6
 800c17e:	f04f 0100 	mov.w	r1, #0
 800c182:	f04f 0200 	mov.w	r2, #0
 800c186:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c18a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c18e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c192:	4688      	mov	r8, r1
 800c194:	4691      	mov	r9, r2
 800c196:	eb18 0005 	adds.w	r0, r8, r5
 800c19a:	eb49 0106 	adc.w	r1, r9, r6
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	461d      	mov	r5, r3
 800c1a4:	f04f 0600 	mov.w	r6, #0
 800c1a8:	196b      	adds	r3, r5, r5
 800c1aa:	eb46 0406 	adc.w	r4, r6, r6
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	4623      	mov	r3, r4
 800c1b2:	f7f4 fd53 	bl	8000c5c <__aeabi_uldivmod>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	4ba7      	ldr	r3, [pc, #668]	; (800c45c <UART_SetConfig+0x3a0>)
 800c1be:	fba3 2302 	umull	r2, r3, r3, r2
 800c1c2:	095b      	lsrs	r3, r3, #5
 800c1c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	461d      	mov	r5, r3
 800c1cc:	f04f 0600 	mov.w	r6, #0
 800c1d0:	46a9      	mov	r9, r5
 800c1d2:	46b2      	mov	sl, r6
 800c1d4:	eb19 0309 	adds.w	r3, r9, r9
 800c1d8:	eb4a 040a 	adc.w	r4, sl, sl
 800c1dc:	4699      	mov	r9, r3
 800c1de:	46a2      	mov	sl, r4
 800c1e0:	eb19 0905 	adds.w	r9, r9, r5
 800c1e4:	eb4a 0a06 	adc.w	sl, sl, r6
 800c1e8:	f04f 0100 	mov.w	r1, #0
 800c1ec:	f04f 0200 	mov.w	r2, #0
 800c1f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c1f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c1fc:	4689      	mov	r9, r1
 800c1fe:	4692      	mov	sl, r2
 800c200:	eb19 0005 	adds.w	r0, r9, r5
 800c204:	eb4a 0106 	adc.w	r1, sl, r6
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	461d      	mov	r5, r3
 800c20e:	f04f 0600 	mov.w	r6, #0
 800c212:	196b      	adds	r3, r5, r5
 800c214:	eb46 0406 	adc.w	r4, r6, r6
 800c218:	461a      	mov	r2, r3
 800c21a:	4623      	mov	r3, r4
 800c21c:	f7f4 fd1e 	bl	8000c5c <__aeabi_uldivmod>
 800c220:	4603      	mov	r3, r0
 800c222:	460c      	mov	r4, r1
 800c224:	461a      	mov	r2, r3
 800c226:	4b8d      	ldr	r3, [pc, #564]	; (800c45c <UART_SetConfig+0x3a0>)
 800c228:	fba3 1302 	umull	r1, r3, r3, r2
 800c22c:	095b      	lsrs	r3, r3, #5
 800c22e:	2164      	movs	r1, #100	; 0x64
 800c230:	fb01 f303 	mul.w	r3, r1, r3
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	3332      	adds	r3, #50	; 0x32
 800c23a:	4a88      	ldr	r2, [pc, #544]	; (800c45c <UART_SetConfig+0x3a0>)
 800c23c:	fba2 2303 	umull	r2, r3, r2, r3
 800c240:	095b      	lsrs	r3, r3, #5
 800c242:	005b      	lsls	r3, r3, #1
 800c244:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c248:	4498      	add	r8, r3
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	461d      	mov	r5, r3
 800c24e:	f04f 0600 	mov.w	r6, #0
 800c252:	46a9      	mov	r9, r5
 800c254:	46b2      	mov	sl, r6
 800c256:	eb19 0309 	adds.w	r3, r9, r9
 800c25a:	eb4a 040a 	adc.w	r4, sl, sl
 800c25e:	4699      	mov	r9, r3
 800c260:	46a2      	mov	sl, r4
 800c262:	eb19 0905 	adds.w	r9, r9, r5
 800c266:	eb4a 0a06 	adc.w	sl, sl, r6
 800c26a:	f04f 0100 	mov.w	r1, #0
 800c26e:	f04f 0200 	mov.w	r2, #0
 800c272:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c276:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c27a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c27e:	4689      	mov	r9, r1
 800c280:	4692      	mov	sl, r2
 800c282:	eb19 0005 	adds.w	r0, r9, r5
 800c286:	eb4a 0106 	adc.w	r1, sl, r6
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	685b      	ldr	r3, [r3, #4]
 800c28e:	461d      	mov	r5, r3
 800c290:	f04f 0600 	mov.w	r6, #0
 800c294:	196b      	adds	r3, r5, r5
 800c296:	eb46 0406 	adc.w	r4, r6, r6
 800c29a:	461a      	mov	r2, r3
 800c29c:	4623      	mov	r3, r4
 800c29e:	f7f4 fcdd 	bl	8000c5c <__aeabi_uldivmod>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	4b6c      	ldr	r3, [pc, #432]	; (800c45c <UART_SetConfig+0x3a0>)
 800c2aa:	fba3 1302 	umull	r1, r3, r3, r2
 800c2ae:	095b      	lsrs	r3, r3, #5
 800c2b0:	2164      	movs	r1, #100	; 0x64
 800c2b2:	fb01 f303 	mul.w	r3, r1, r3
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	00db      	lsls	r3, r3, #3
 800c2ba:	3332      	adds	r3, #50	; 0x32
 800c2bc:	4a67      	ldr	r2, [pc, #412]	; (800c45c <UART_SetConfig+0x3a0>)
 800c2be:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c2:	095b      	lsrs	r3, r3, #5
 800c2c4:	f003 0207 	and.w	r2, r3, #7
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4442      	add	r2, r8
 800c2ce:	609a      	str	r2, [r3, #8]
 800c2d0:	e27d      	b.n	800c7ce <UART_SetConfig+0x712>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c2d2:	f7fd f80b 	bl	80092ec <HAL_RCC_GetPCLK1Freq>
 800c2d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	461d      	mov	r5, r3
 800c2dc:	f04f 0600 	mov.w	r6, #0
 800c2e0:	46a8      	mov	r8, r5
 800c2e2:	46b1      	mov	r9, r6
 800c2e4:	eb18 0308 	adds.w	r3, r8, r8
 800c2e8:	eb49 0409 	adc.w	r4, r9, r9
 800c2ec:	4698      	mov	r8, r3
 800c2ee:	46a1      	mov	r9, r4
 800c2f0:	eb18 0805 	adds.w	r8, r8, r5
 800c2f4:	eb49 0906 	adc.w	r9, r9, r6
 800c2f8:	f04f 0100 	mov.w	r1, #0
 800c2fc:	f04f 0200 	mov.w	r2, #0
 800c300:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c304:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c308:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c30c:	4688      	mov	r8, r1
 800c30e:	4691      	mov	r9, r2
 800c310:	eb18 0005 	adds.w	r0, r8, r5
 800c314:	eb49 0106 	adc.w	r1, r9, r6
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	461d      	mov	r5, r3
 800c31e:	f04f 0600 	mov.w	r6, #0
 800c322:	196b      	adds	r3, r5, r5
 800c324:	eb46 0406 	adc.w	r4, r6, r6
 800c328:	461a      	mov	r2, r3
 800c32a:	4623      	mov	r3, r4
 800c32c:	f7f4 fc96 	bl	8000c5c <__aeabi_uldivmod>
 800c330:	4603      	mov	r3, r0
 800c332:	460c      	mov	r4, r1
 800c334:	461a      	mov	r2, r3
 800c336:	4b49      	ldr	r3, [pc, #292]	; (800c45c <UART_SetConfig+0x3a0>)
 800c338:	fba3 2302 	umull	r2, r3, r3, r2
 800c33c:	095b      	lsrs	r3, r3, #5
 800c33e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	461d      	mov	r5, r3
 800c346:	f04f 0600 	mov.w	r6, #0
 800c34a:	46a9      	mov	r9, r5
 800c34c:	46b2      	mov	sl, r6
 800c34e:	eb19 0309 	adds.w	r3, r9, r9
 800c352:	eb4a 040a 	adc.w	r4, sl, sl
 800c356:	4699      	mov	r9, r3
 800c358:	46a2      	mov	sl, r4
 800c35a:	eb19 0905 	adds.w	r9, r9, r5
 800c35e:	eb4a 0a06 	adc.w	sl, sl, r6
 800c362:	f04f 0100 	mov.w	r1, #0
 800c366:	f04f 0200 	mov.w	r2, #0
 800c36a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c36e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c372:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c376:	4689      	mov	r9, r1
 800c378:	4692      	mov	sl, r2
 800c37a:	eb19 0005 	adds.w	r0, r9, r5
 800c37e:	eb4a 0106 	adc.w	r1, sl, r6
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	461d      	mov	r5, r3
 800c388:	f04f 0600 	mov.w	r6, #0
 800c38c:	196b      	adds	r3, r5, r5
 800c38e:	eb46 0406 	adc.w	r4, r6, r6
 800c392:	461a      	mov	r2, r3
 800c394:	4623      	mov	r3, r4
 800c396:	f7f4 fc61 	bl	8000c5c <__aeabi_uldivmod>
 800c39a:	4603      	mov	r3, r0
 800c39c:	460c      	mov	r4, r1
 800c39e:	461a      	mov	r2, r3
 800c3a0:	4b2e      	ldr	r3, [pc, #184]	; (800c45c <UART_SetConfig+0x3a0>)
 800c3a2:	fba3 1302 	umull	r1, r3, r3, r2
 800c3a6:	095b      	lsrs	r3, r3, #5
 800c3a8:	2164      	movs	r1, #100	; 0x64
 800c3aa:	fb01 f303 	mul.w	r3, r1, r3
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	3332      	adds	r3, #50	; 0x32
 800c3b4:	4a29      	ldr	r2, [pc, #164]	; (800c45c <UART_SetConfig+0x3a0>)
 800c3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c3ba:	095b      	lsrs	r3, r3, #5
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c3c2:	4498      	add	r8, r3
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	461d      	mov	r5, r3
 800c3c8:	f04f 0600 	mov.w	r6, #0
 800c3cc:	46a9      	mov	r9, r5
 800c3ce:	46b2      	mov	sl, r6
 800c3d0:	eb19 0309 	adds.w	r3, r9, r9
 800c3d4:	eb4a 040a 	adc.w	r4, sl, sl
 800c3d8:	4699      	mov	r9, r3
 800c3da:	46a2      	mov	sl, r4
 800c3dc:	eb19 0905 	adds.w	r9, r9, r5
 800c3e0:	eb4a 0a06 	adc.w	sl, sl, r6
 800c3e4:	f04f 0100 	mov.w	r1, #0
 800c3e8:	f04f 0200 	mov.w	r2, #0
 800c3ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c3f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c3f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c3f8:	4689      	mov	r9, r1
 800c3fa:	4692      	mov	sl, r2
 800c3fc:	eb19 0005 	adds.w	r0, r9, r5
 800c400:	eb4a 0106 	adc.w	r1, sl, r6
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	461d      	mov	r5, r3
 800c40a:	f04f 0600 	mov.w	r6, #0
 800c40e:	196b      	adds	r3, r5, r5
 800c410:	eb46 0406 	adc.w	r4, r6, r6
 800c414:	461a      	mov	r2, r3
 800c416:	4623      	mov	r3, r4
 800c418:	f7f4 fc20 	bl	8000c5c <__aeabi_uldivmod>
 800c41c:	4603      	mov	r3, r0
 800c41e:	460c      	mov	r4, r1
 800c420:	461a      	mov	r2, r3
 800c422:	4b0e      	ldr	r3, [pc, #56]	; (800c45c <UART_SetConfig+0x3a0>)
 800c424:	fba3 1302 	umull	r1, r3, r3, r2
 800c428:	095b      	lsrs	r3, r3, #5
 800c42a:	2164      	movs	r1, #100	; 0x64
 800c42c:	fb01 f303 	mul.w	r3, r1, r3
 800c430:	1ad3      	subs	r3, r2, r3
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	3332      	adds	r3, #50	; 0x32
 800c436:	4a09      	ldr	r2, [pc, #36]	; (800c45c <UART_SetConfig+0x3a0>)
 800c438:	fba2 2303 	umull	r2, r3, r2, r3
 800c43c:	095b      	lsrs	r3, r3, #5
 800c43e:	f003 0207 	and.w	r2, r3, #7
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4442      	add	r2, r8
 800c448:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c44a:	e1c0      	b.n	800c7ce <UART_SetConfig+0x712>
 800c44c:	40011000 	.word	0x40011000
 800c450:	40011400 	.word	0x40011400
 800c454:	40011800 	.word	0x40011800
 800c458:	40011c00 	.word	0x40011c00
 800c45c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4adc      	ldr	r2, [pc, #880]	; (800c7d8 <UART_SetConfig+0x71c>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d00f      	beq.n	800c48a <UART_SetConfig+0x3ce>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4adb      	ldr	r2, [pc, #876]	; (800c7dc <UART_SetConfig+0x720>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d00a      	beq.n	800c48a <UART_SetConfig+0x3ce>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4ad9      	ldr	r2, [pc, #868]	; (800c7e0 <UART_SetConfig+0x724>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d005      	beq.n	800c48a <UART_SetConfig+0x3ce>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4ad8      	ldr	r2, [pc, #864]	; (800c7e4 <UART_SetConfig+0x728>)
 800c484:	4293      	cmp	r3, r2
 800c486:	f040 80d1 	bne.w	800c62c <UART_SetConfig+0x570>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c48a:	f7fc ff43 	bl	8009314 <HAL_RCC_GetPCLK2Freq>
 800c48e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	469a      	mov	sl, r3
 800c494:	f04f 0b00 	mov.w	fp, #0
 800c498:	46d0      	mov	r8, sl
 800c49a:	46d9      	mov	r9, fp
 800c49c:	eb18 0308 	adds.w	r3, r8, r8
 800c4a0:	eb49 0409 	adc.w	r4, r9, r9
 800c4a4:	4698      	mov	r8, r3
 800c4a6:	46a1      	mov	r9, r4
 800c4a8:	eb18 080a 	adds.w	r8, r8, sl
 800c4ac:	eb49 090b 	adc.w	r9, r9, fp
 800c4b0:	f04f 0100 	mov.w	r1, #0
 800c4b4:	f04f 0200 	mov.w	r2, #0
 800c4b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c4bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c4c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c4c4:	4688      	mov	r8, r1
 800c4c6:	4691      	mov	r9, r2
 800c4c8:	eb1a 0508 	adds.w	r5, sl, r8
 800c4cc:	eb4b 0609 	adc.w	r6, fp, r9
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	f04f 0200 	mov.w	r2, #0
 800c4da:	f04f 0300 	mov.w	r3, #0
 800c4de:	f04f 0400 	mov.w	r4, #0
 800c4e2:	0094      	lsls	r4, r2, #2
 800c4e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c4e8:	008b      	lsls	r3, r1, #2
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	4623      	mov	r3, r4
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	4631      	mov	r1, r6
 800c4f2:	f7f4 fbb3 	bl	8000c5c <__aeabi_uldivmod>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	4bba      	ldr	r3, [pc, #744]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c4fe:	fba3 2302 	umull	r2, r3, r3, r2
 800c502:	095b      	lsrs	r3, r3, #5
 800c504:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	469b      	mov	fp, r3
 800c50c:	f04f 0c00 	mov.w	ip, #0
 800c510:	46d9      	mov	r9, fp
 800c512:	46e2      	mov	sl, ip
 800c514:	eb19 0309 	adds.w	r3, r9, r9
 800c518:	eb4a 040a 	adc.w	r4, sl, sl
 800c51c:	4699      	mov	r9, r3
 800c51e:	46a2      	mov	sl, r4
 800c520:	eb19 090b 	adds.w	r9, r9, fp
 800c524:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c528:	f04f 0100 	mov.w	r1, #0
 800c52c:	f04f 0200 	mov.w	r2, #0
 800c530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c534:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c538:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c53c:	4689      	mov	r9, r1
 800c53e:	4692      	mov	sl, r2
 800c540:	eb1b 0509 	adds.w	r5, fp, r9
 800c544:	eb4c 060a 	adc.w	r6, ip, sl
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	4619      	mov	r1, r3
 800c54e:	f04f 0200 	mov.w	r2, #0
 800c552:	f04f 0300 	mov.w	r3, #0
 800c556:	f04f 0400 	mov.w	r4, #0
 800c55a:	0094      	lsls	r4, r2, #2
 800c55c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c560:	008b      	lsls	r3, r1, #2
 800c562:	461a      	mov	r2, r3
 800c564:	4623      	mov	r3, r4
 800c566:	4628      	mov	r0, r5
 800c568:	4631      	mov	r1, r6
 800c56a:	f7f4 fb77 	bl	8000c5c <__aeabi_uldivmod>
 800c56e:	4603      	mov	r3, r0
 800c570:	460c      	mov	r4, r1
 800c572:	461a      	mov	r2, r3
 800c574:	4b9c      	ldr	r3, [pc, #624]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c576:	fba3 1302 	umull	r1, r3, r3, r2
 800c57a:	095b      	lsrs	r3, r3, #5
 800c57c:	2164      	movs	r1, #100	; 0x64
 800c57e:	fb01 f303 	mul.w	r3, r1, r3
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	011b      	lsls	r3, r3, #4
 800c586:	3332      	adds	r3, #50	; 0x32
 800c588:	4a97      	ldr	r2, [pc, #604]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c58a:	fba2 2303 	umull	r2, r3, r2, r3
 800c58e:	095b      	lsrs	r3, r3, #5
 800c590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c594:	4498      	add	r8, r3
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	469b      	mov	fp, r3
 800c59a:	f04f 0c00 	mov.w	ip, #0
 800c59e:	46d9      	mov	r9, fp
 800c5a0:	46e2      	mov	sl, ip
 800c5a2:	eb19 0309 	adds.w	r3, r9, r9
 800c5a6:	eb4a 040a 	adc.w	r4, sl, sl
 800c5aa:	4699      	mov	r9, r3
 800c5ac:	46a2      	mov	sl, r4
 800c5ae:	eb19 090b 	adds.w	r9, r9, fp
 800c5b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c5b6:	f04f 0100 	mov.w	r1, #0
 800c5ba:	f04f 0200 	mov.w	r2, #0
 800c5be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c5c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c5c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c5ca:	4689      	mov	r9, r1
 800c5cc:	4692      	mov	sl, r2
 800c5ce:	eb1b 0509 	adds.w	r5, fp, r9
 800c5d2:	eb4c 060a 	adc.w	r6, ip, sl
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	4619      	mov	r1, r3
 800c5dc:	f04f 0200 	mov.w	r2, #0
 800c5e0:	f04f 0300 	mov.w	r3, #0
 800c5e4:	f04f 0400 	mov.w	r4, #0
 800c5e8:	0094      	lsls	r4, r2, #2
 800c5ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c5ee:	008b      	lsls	r3, r1, #2
 800c5f0:	461a      	mov	r2, r3
 800c5f2:	4623      	mov	r3, r4
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	4631      	mov	r1, r6
 800c5f8:	f7f4 fb30 	bl	8000c5c <__aeabi_uldivmod>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	460c      	mov	r4, r1
 800c600:	461a      	mov	r2, r3
 800c602:	4b79      	ldr	r3, [pc, #484]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c604:	fba3 1302 	umull	r1, r3, r3, r2
 800c608:	095b      	lsrs	r3, r3, #5
 800c60a:	2164      	movs	r1, #100	; 0x64
 800c60c:	fb01 f303 	mul.w	r3, r1, r3
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	011b      	lsls	r3, r3, #4
 800c614:	3332      	adds	r3, #50	; 0x32
 800c616:	4a74      	ldr	r2, [pc, #464]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c618:	fba2 2303 	umull	r2, r3, r2, r3
 800c61c:	095b      	lsrs	r3, r3, #5
 800c61e:	f003 020f 	and.w	r2, r3, #15
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4442      	add	r2, r8
 800c628:	609a      	str	r2, [r3, #8]
 800c62a:	e0d0      	b.n	800c7ce <UART_SetConfig+0x712>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c62c:	f7fc fe5e 	bl	80092ec <HAL_RCC_GetPCLK1Freq>
 800c630:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	469a      	mov	sl, r3
 800c636:	f04f 0b00 	mov.w	fp, #0
 800c63a:	46d0      	mov	r8, sl
 800c63c:	46d9      	mov	r9, fp
 800c63e:	eb18 0308 	adds.w	r3, r8, r8
 800c642:	eb49 0409 	adc.w	r4, r9, r9
 800c646:	4698      	mov	r8, r3
 800c648:	46a1      	mov	r9, r4
 800c64a:	eb18 080a 	adds.w	r8, r8, sl
 800c64e:	eb49 090b 	adc.w	r9, r9, fp
 800c652:	f04f 0100 	mov.w	r1, #0
 800c656:	f04f 0200 	mov.w	r2, #0
 800c65a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c65e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c662:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c666:	4688      	mov	r8, r1
 800c668:	4691      	mov	r9, r2
 800c66a:	eb1a 0508 	adds.w	r5, sl, r8
 800c66e:	eb4b 0609 	adc.w	r6, fp, r9
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	4619      	mov	r1, r3
 800c678:	f04f 0200 	mov.w	r2, #0
 800c67c:	f04f 0300 	mov.w	r3, #0
 800c680:	f04f 0400 	mov.w	r4, #0
 800c684:	0094      	lsls	r4, r2, #2
 800c686:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c68a:	008b      	lsls	r3, r1, #2
 800c68c:	461a      	mov	r2, r3
 800c68e:	4623      	mov	r3, r4
 800c690:	4628      	mov	r0, r5
 800c692:	4631      	mov	r1, r6
 800c694:	f7f4 fae2 	bl	8000c5c <__aeabi_uldivmod>
 800c698:	4603      	mov	r3, r0
 800c69a:	460c      	mov	r4, r1
 800c69c:	461a      	mov	r2, r3
 800c69e:	4b52      	ldr	r3, [pc, #328]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c6a0:	fba3 2302 	umull	r2, r3, r3, r2
 800c6a4:	095b      	lsrs	r3, r3, #5
 800c6a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	469b      	mov	fp, r3
 800c6ae:	f04f 0c00 	mov.w	ip, #0
 800c6b2:	46d9      	mov	r9, fp
 800c6b4:	46e2      	mov	sl, ip
 800c6b6:	eb19 0309 	adds.w	r3, r9, r9
 800c6ba:	eb4a 040a 	adc.w	r4, sl, sl
 800c6be:	4699      	mov	r9, r3
 800c6c0:	46a2      	mov	sl, r4
 800c6c2:	eb19 090b 	adds.w	r9, r9, fp
 800c6c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c6ca:	f04f 0100 	mov.w	r1, #0
 800c6ce:	f04f 0200 	mov.w	r2, #0
 800c6d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c6d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c6da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c6de:	4689      	mov	r9, r1
 800c6e0:	4692      	mov	sl, r2
 800c6e2:	eb1b 0509 	adds.w	r5, fp, r9
 800c6e6:	eb4c 060a 	adc.w	r6, ip, sl
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	f04f 0200 	mov.w	r2, #0
 800c6f4:	f04f 0300 	mov.w	r3, #0
 800c6f8:	f04f 0400 	mov.w	r4, #0
 800c6fc:	0094      	lsls	r4, r2, #2
 800c6fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c702:	008b      	lsls	r3, r1, #2
 800c704:	461a      	mov	r2, r3
 800c706:	4623      	mov	r3, r4
 800c708:	4628      	mov	r0, r5
 800c70a:	4631      	mov	r1, r6
 800c70c:	f7f4 faa6 	bl	8000c5c <__aeabi_uldivmod>
 800c710:	4603      	mov	r3, r0
 800c712:	460c      	mov	r4, r1
 800c714:	461a      	mov	r2, r3
 800c716:	4b34      	ldr	r3, [pc, #208]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c718:	fba3 1302 	umull	r1, r3, r3, r2
 800c71c:	095b      	lsrs	r3, r3, #5
 800c71e:	2164      	movs	r1, #100	; 0x64
 800c720:	fb01 f303 	mul.w	r3, r1, r3
 800c724:	1ad3      	subs	r3, r2, r3
 800c726:	011b      	lsls	r3, r3, #4
 800c728:	3332      	adds	r3, #50	; 0x32
 800c72a:	4a2f      	ldr	r2, [pc, #188]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c72c:	fba2 2303 	umull	r2, r3, r2, r3
 800c730:	095b      	lsrs	r3, r3, #5
 800c732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c736:	4498      	add	r8, r3
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	469b      	mov	fp, r3
 800c73c:	f04f 0c00 	mov.w	ip, #0
 800c740:	46d9      	mov	r9, fp
 800c742:	46e2      	mov	sl, ip
 800c744:	eb19 0309 	adds.w	r3, r9, r9
 800c748:	eb4a 040a 	adc.w	r4, sl, sl
 800c74c:	4699      	mov	r9, r3
 800c74e:	46a2      	mov	sl, r4
 800c750:	eb19 090b 	adds.w	r9, r9, fp
 800c754:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c758:	f04f 0100 	mov.w	r1, #0
 800c75c:	f04f 0200 	mov.w	r2, #0
 800c760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c764:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c768:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c76c:	4689      	mov	r9, r1
 800c76e:	4692      	mov	sl, r2
 800c770:	eb1b 0509 	adds.w	r5, fp, r9
 800c774:	eb4c 060a 	adc.w	r6, ip, sl
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	4619      	mov	r1, r3
 800c77e:	f04f 0200 	mov.w	r2, #0
 800c782:	f04f 0300 	mov.w	r3, #0
 800c786:	f04f 0400 	mov.w	r4, #0
 800c78a:	0094      	lsls	r4, r2, #2
 800c78c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c790:	008b      	lsls	r3, r1, #2
 800c792:	461a      	mov	r2, r3
 800c794:	4623      	mov	r3, r4
 800c796:	4628      	mov	r0, r5
 800c798:	4631      	mov	r1, r6
 800c79a:	f7f4 fa5f 	bl	8000c5c <__aeabi_uldivmod>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	460c      	mov	r4, r1
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	4b10      	ldr	r3, [pc, #64]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c7a6:	fba3 1302 	umull	r1, r3, r3, r2
 800c7aa:	095b      	lsrs	r3, r3, #5
 800c7ac:	2164      	movs	r1, #100	; 0x64
 800c7ae:	fb01 f303 	mul.w	r3, r1, r3
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	011b      	lsls	r3, r3, #4
 800c7b6:	3332      	adds	r3, #50	; 0x32
 800c7b8:	4a0b      	ldr	r2, [pc, #44]	; (800c7e8 <UART_SetConfig+0x72c>)
 800c7ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c7be:	095b      	lsrs	r3, r3, #5
 800c7c0:	f003 020f 	and.w	r2, r3, #15
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4442      	add	r2, r8
 800c7ca:	609a      	str	r2, [r3, #8]
}
 800c7cc:	e7ff      	b.n	800c7ce <UART_SetConfig+0x712>
 800c7ce:	bf00      	nop
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d8:	40011000 	.word	0x40011000
 800c7dc:	40011400 	.word	0x40011400
 800c7e0:	40011800 	.word	0x40011800
 800c7e4:	40011c00 	.word	0x40011c00
 800c7e8:	51eb851f 	.word	0x51eb851f

0800c7ec <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c804:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	4b2f      	ldr	r3, [pc, #188]	; (800c8c8 <FSMC_NORSRAM_Init+0xdc>)
 800c80a:	4013      	ands	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c816:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800c81c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800c822:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800c828:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800c82e:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800c834:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800c83a:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800c840:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800c846:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800c84c:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800c852:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800c858:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800c85e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4313      	orrs	r3, r2
 800c864:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	2b08      	cmp	r3, #8
 800c86c:	d103      	bne.n	800c876 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c874:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68f9      	ldr	r1, [r7, #12]
 800c87e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c88a:	d10a      	bne.n	800c8a2 <FSMC_NORSRAM_Init+0xb6>
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d006      	beq.n	800c8a2 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c89c:	431a      	orrs	r2, r3
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d006      	beq.n	800c8b8 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	ffc00480 	.word	0xffc00480

0800c8cc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c8ee:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c8fa:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800c902:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800c90a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	3b01      	subs	r3, #1
 800c912:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c914:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	695b      	ldr	r3, [r3, #20]
 800c91a:	3b02      	subs	r3, #2
 800c91c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800c91e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c924:	4313      	orrs	r3, r2
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4313      	orrs	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	1c5a      	adds	r2, r3, #1
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6979      	ldr	r1, [r7, #20]
 800c934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c944:	d10e      	bne.n	800c964 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c94e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	3b01      	subs	r3, #1
 800c956:	051b      	lsls	r3, r3, #20
 800c958:	697a      	ldr	r2, [r7, #20]
 800c95a:	4313      	orrs	r3, r2
 800c95c:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	371c      	adds	r7, #28
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
	...

0800c974 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800c974:	b480      	push	{r7}
 800c976:	b087      	sub	sp, #28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
 800c980:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800c982:	2300      	movs	r3, #0
 800c984:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c98c:	d122      	bne.n	800c9d4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c996:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	4b15      	ldr	r3, [pc, #84]	; (800c9f0 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800c99c:	4013      	ands	r3, r2
 800c99e:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c9aa:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	689b      	ldr	r3, [r3, #8]
 800c9b0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800c9b2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800c9ba:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800c9c0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800c9c2:	697a      	ldr	r2, [r7, #20]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	6979      	ldr	r1, [r7, #20]
 800c9ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c9d2:	e005      	b.n	800c9e0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800c9dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	371c      	adds	r7, #28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	cff00000 	.word	0xcff00000

0800c9f4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	b480      	push	{r7}
 800c9f8:	b085      	sub	sp, #20
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
 800c9fe:	f107 001c 	add.w	r0, r7, #28
 800ca02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ca0a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ca0e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ca12:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ca16:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ca1a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ca1e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ca20:	68fa      	ldr	r2, [r7, #12]
 800ca22:	4313      	orrs	r3, r2
 800ca24:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ca2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	431a      	orrs	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	b004      	add	sp, #16
 800ca48:	4770      	bx	lr

0800ca4a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b083      	sub	sp, #12
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	370c      	adds	r7, #12
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2203      	movs	r2, #3
 800ca70:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ca72:	2002      	movs	r0, #2
 800ca74:	f7f8 fa06 	bl	8004e84 <HAL_Delay>
  
  return HAL_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3708      	adds	r7, #8
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ca82:	b480      	push	{r7}
 800ca84:	b083      	sub	sp, #12
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 0303 	and.w	r3, r3, #3
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	370c      	adds	r7, #12
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr

0800ca9e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ca9e:	b480      	push	{r7}
 800caa0:	b085      	sub	sp, #20
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cabc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cac2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cac8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	4313      	orrs	r3, r2
 800cace:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cad8:	f023 030f 	bic.w	r3, r3, #15
 800cadc:	68fa      	ldr	r2, [r7, #12]
 800cade:	431a      	orrs	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800caf2:	b480      	push	{r7}
 800caf4:	b083      	sub	sp, #12
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	b2db      	uxtb	r3, r3
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3314      	adds	r3, #20
 800cb1a:	461a      	mov	r2, r3
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	4413      	add	r3, r2
 800cb20:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
}  
 800cb26:	4618      	mov	r0, r3
 800cb28:	3714      	adds	r7, #20
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr

0800cb32 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cb32:	b480      	push	{r7}
 800cb34:	b085      	sub	sp, #20
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
 800cb3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb58:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cb5e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cb64:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb70:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	431a      	orrs	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cb7c:	2300      	movs	r3, #0

}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr

0800cb8a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b088      	sub	sp, #32
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cb98:	2310      	movs	r3, #16
 800cb9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb9c:	2340      	movs	r3, #64	; 0x40
 800cb9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cba0:	2300      	movs	r3, #0
 800cba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cba8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbaa:	f107 0308 	add.w	r3, r7, #8
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7ff ff74 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cbb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbba:	2110      	movs	r1, #16
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f975 	bl	800ceac <SDMMC_GetCmdResp1>
 800cbc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbc4:	69fb      	ldr	r3, [r7, #28]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3720      	adds	r7, #32
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b08a      	sub	sp, #40	; 0x28
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	60f8      	str	r0, [r7, #12]
 800cbd6:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cbde:	2307      	movs	r3, #7
 800cbe0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbe2:	2340      	movs	r3, #64	; 0x40
 800cbe4:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbee:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbf0:	f107 0310 	add.w	r3, r7, #16
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f7ff ff51 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cbfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc00:	2107      	movs	r1, #7
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f000 f952 	bl	800ceac <SDMMC_GetCmdResp1>
 800cc08:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3728      	adds	r7, #40	; 0x28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cc20:	2300      	movs	r3, #0
 800cc22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800cc24:	2300      	movs	r3, #0
 800cc26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc32:	f107 0308 	add.w	r3, r7, #8
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f7ff ff30 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f90c 	bl	800ce5c <SDMMC_GetCmdError>
 800cc44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc46:	69fb      	ldr	r3, [r7, #28]
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3720      	adds	r7, #32
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b088      	sub	sp, #32
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cc58:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cc5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cc5e:	2308      	movs	r3, #8
 800cc60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc62:	2340      	movs	r3, #64	; 0x40
 800cc64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc66:	2300      	movs	r3, #0
 800cc68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc70:	f107 0308 	add.w	r3, r7, #8
 800cc74:	4619      	mov	r1, r3
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f7ff ff11 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 faf5 	bl	800d26c <SDMMC_GetCmdResp7>
 800cc82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc84:	69fb      	ldr	r3, [r7, #28]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3720      	adds	r7, #32
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b088      	sub	sp, #32
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
 800cc96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cc9c:	2337      	movs	r3, #55	; 0x37
 800cc9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cca0:	2340      	movs	r3, #64	; 0x40
 800cca2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cca4:	2300      	movs	r3, #0
 800cca6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccae:	f107 0308 	add.w	r3, r7, #8
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f7ff fef2 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ccba:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccbe:	2137      	movs	r1, #55	; 0x37
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 f8f3 	bl	800ceac <SDMMC_GetCmdResp1>
 800ccc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccc8:	69fb      	ldr	r3, [r7, #28]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3720      	adds	r7, #32
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b088      	sub	sp, #32
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cce6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cce8:	2329      	movs	r3, #41	; 0x29
 800ccea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccec:	2340      	movs	r3, #64	; 0x40
 800ccee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccf8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccfa:	f107 0308 	add.w	r3, r7, #8
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7ff fecc 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 fa02 	bl	800d110 <SDMMC_GetCmdResp3>
 800cd0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd0e:	69fb      	ldr	r3, [r7, #28]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3720      	adds	r7, #32
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cd26:	2306      	movs	r3, #6
 800cd28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd2a:	2340      	movs	r3, #64	; 0x40
 800cd2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd38:	f107 0308 	add.w	r3, r7, #8
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f7ff fead 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cd44:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd48:	2106      	movs	r1, #6
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f000 f8ae 	bl	800ceac <SDMMC_GetCmdResp1>
 800cd50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd52:	69fb      	ldr	r3, [r7, #28]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3720      	adds	r7, #32
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cd64:	2300      	movs	r3, #0
 800cd66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cd68:	2333      	movs	r3, #51	; 0x33
 800cd6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd6c:	2340      	movs	r3, #64	; 0x40
 800cd6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd70:	2300      	movs	r3, #0
 800cd72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd7a:	f107 0308 	add.w	r3, r7, #8
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7ff fe8c 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800cd86:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd8a:	2133      	movs	r1, #51	; 0x33
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 f88d 	bl	800ceac <SDMMC_GetCmdResp1>
 800cd92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd94:	69fb      	ldr	r3, [r7, #28]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3720      	adds	r7, #32
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b088      	sub	sp, #32
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cda6:	2300      	movs	r3, #0
 800cda8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cdaa:	2302      	movs	r3, #2
 800cdac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cdae:	23c0      	movs	r3, #192	; 0xc0
 800cdb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdbc:	f107 0308 	add.w	r3, r7, #8
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f7ff fe6b 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 f95b 	bl	800d084 <SDMMC_GetCmdResp2>
 800cdce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdd0:	69fb      	ldr	r3, [r7, #28]
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3720      	adds	r7, #32
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b088      	sub	sp, #32
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cde8:	2309      	movs	r3, #9
 800cdea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cdec:	23c0      	movs	r3, #192	; 0xc0
 800cdee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdf8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdfa:	f107 0308 	add.w	r3, r7, #8
 800cdfe:	4619      	mov	r1, r3
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff fe4c 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f93c 	bl	800d084 <SDMMC_GetCmdResp2>
 800ce0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce0e:	69fb      	ldr	r3, [r7, #28]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3720      	adds	r7, #32
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b088      	sub	sp, #32
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ce26:	2303      	movs	r3, #3
 800ce28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce2a:	2340      	movs	r3, #64	; 0x40
 800ce2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce38:	f107 0308 	add.w	r3, r7, #8
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff fe2d 	bl	800ca9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	2103      	movs	r1, #3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f99b 	bl	800d184 <SDMMC_GetCmdResp6>
 800ce4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce50:	69fb      	ldr	r3, [r7, #28]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3720      	adds	r7, #32
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
	...

0800ce5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ce5c:	b490      	push	{r4, r7}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce64:	4b0f      	ldr	r3, [pc, #60]	; (800cea4 <SDMMC_GetCmdError+0x48>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a0f      	ldr	r2, [pc, #60]	; (800cea8 <SDMMC_GetCmdError+0x4c>)
 800ce6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6e:	0a5b      	lsrs	r3, r3, #9
 800ce70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce74:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ce78:	4623      	mov	r3, r4
 800ce7a:	1e5c      	subs	r4, r3, #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d102      	bne.n	800ce86 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce84:	e009      	b.n	800ce9a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0f2      	beq.n	800ce78 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	22c5      	movs	r2, #197	; 0xc5
 800ce96:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bc90      	pop	{r4, r7}
 800cea2:	4770      	bx	lr
 800cea4:	20000048 	.word	0x20000048
 800cea8:	10624dd3 	.word	0x10624dd3

0800ceac <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ceac:	b590      	push	{r4, r7, lr}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	460b      	mov	r3, r1
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ceba:	4b6f      	ldr	r3, [pc, #444]	; (800d078 <SDMMC_GetCmdResp1+0x1cc>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4a6f      	ldr	r2, [pc, #444]	; (800d07c <SDMMC_GetCmdResp1+0x1d0>)
 800cec0:	fba2 2303 	umull	r2, r3, r2, r3
 800cec4:	0a5b      	lsrs	r3, r3, #9
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cecc:	4623      	mov	r3, r4
 800cece:	1e5c      	subs	r4, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d102      	bne.n	800ceda <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ced4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ced8:	e0c9      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cede:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d0f0      	beq.n	800cecc <SDMMC_GetCmdResp1+0x20>
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d1eb      	bne.n	800cecc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef8:	f003 0304 	and.w	r3, r3, #4
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d004      	beq.n	800cf0a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2204      	movs	r2, #4
 800cf04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf06:	2304      	movs	r3, #4
 800cf08:	e0b1      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d004      	beq.n	800cf20 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2201      	movs	r2, #1
 800cf1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e0a6      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	22c5      	movs	r2, #197	; 0xc5
 800cf24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cf26:	68f8      	ldr	r0, [r7, #12]
 800cf28:	f7ff fde3 	bl	800caf2 <SDIO_GetCommandResponse>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	461a      	mov	r2, r3
 800cf30:	7afb      	ldrb	r3, [r7, #11]
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d001      	beq.n	800cf3a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e099      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f7ff fde5 	bl	800cb0c <SDIO_GetResponse>
 800cf42:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf44:	693a      	ldr	r2, [r7, #16]
 800cf46:	4b4e      	ldr	r3, [pc, #312]	; (800d080 <SDMMC_GetCmdResp1+0x1d4>)
 800cf48:	4013      	ands	r3, r2
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d101      	bne.n	800cf52 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e08d      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	da02      	bge.n	800cf5e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf5c:	e087      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d001      	beq.n	800cf6c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf68:	2340      	movs	r3, #64	; 0x40
 800cf6a:	e080      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf76:	2380      	movs	r3, #128	; 0x80
 800cf78:	e079      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d002      	beq.n	800cf8a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf84:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf88:	e071      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d002      	beq.n	800cf9a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf98:	e069      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cfa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfa8:	e061      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d002      	beq.n	800cfba <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cfb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cfb8:	e059      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d002      	beq.n	800cfca <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cfc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cfc8:	e051      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d002      	beq.n	800cfda <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cfd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfd8:	e049      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cfda:	693b      	ldr	r3, [r7, #16]
 800cfdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cfe4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfe8:	e041      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cff8:	e039      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d000:	2b00      	cmp	r3, #0
 800d002:	d002      	beq.n	800d00a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d008:	e031      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d014:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d018:	e029      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d01a:	693b      	ldr	r3, [r7, #16]
 800d01c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d002      	beq.n	800d02a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d024:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d028:	e021      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d030:	2b00      	cmp	r3, #0
 800d032:	d002      	beq.n	800d03a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d034:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d038:	e019      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d048:	e011      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d050:	2b00      	cmp	r3, #0
 800d052:	d002      	beq.n	800d05a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d054:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d058:	e009      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	f003 0308 	and.w	r3, r3, #8
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d064:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d068:	e001      	b.n	800d06e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d06a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d06e:	4618      	mov	r0, r3
 800d070:	371c      	adds	r7, #28
 800d072:	46bd      	mov	sp, r7
 800d074:	bd90      	pop	{r4, r7, pc}
 800d076:	bf00      	nop
 800d078:	20000048 	.word	0x20000048
 800d07c:	10624dd3 	.word	0x10624dd3
 800d080:	fdffe008 	.word	0xfdffe008

0800d084 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d084:	b490      	push	{r4, r7}
 800d086:	b084      	sub	sp, #16
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d08c:	4b1e      	ldr	r3, [pc, #120]	; (800d108 <SDMMC_GetCmdResp2+0x84>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a1e      	ldr	r2, [pc, #120]	; (800d10c <SDMMC_GetCmdResp2+0x88>)
 800d092:	fba2 2303 	umull	r2, r3, r2, r3
 800d096:	0a5b      	lsrs	r3, r3, #9
 800d098:	f241 3288 	movw	r2, #5000	; 0x1388
 800d09c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d0a0:	4623      	mov	r3, r4
 800d0a2:	1e5c      	subs	r4, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d102      	bne.n	800d0ae <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0ac:	e026      	b.n	800d0fc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d0f0      	beq.n	800d0a0 <SDMMC_GetCmdResp2+0x1c>
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1eb      	bne.n	800d0a0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0cc:	f003 0304 	and.w	r3, r3, #4
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d004      	beq.n	800d0de <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2204      	movs	r2, #4
 800d0d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0da:	2304      	movs	r3, #4
 800d0dc:	e00e      	b.n	800d0fc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e2:	f003 0301 	and.w	r3, r3, #1
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d004      	beq.n	800d0f4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2201      	movs	r2, #1
 800d0ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e003      	b.n	800d0fc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	22c5      	movs	r2, #197	; 0xc5
 800d0f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d0fa:	2300      	movs	r3, #0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bc90      	pop	{r4, r7}
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	20000048 	.word	0x20000048
 800d10c:	10624dd3 	.word	0x10624dd3

0800d110 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d110:	b490      	push	{r4, r7}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d118:	4b18      	ldr	r3, [pc, #96]	; (800d17c <SDMMC_GetCmdResp3+0x6c>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a18      	ldr	r2, [pc, #96]	; (800d180 <SDMMC_GetCmdResp3+0x70>)
 800d11e:	fba2 2303 	umull	r2, r3, r2, r3
 800d122:	0a5b      	lsrs	r3, r3, #9
 800d124:	f241 3288 	movw	r2, #5000	; 0x1388
 800d128:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d12c:	4623      	mov	r3, r4
 800d12e:	1e5c      	subs	r4, r3, #1
 800d130:	2b00      	cmp	r3, #0
 800d132:	d102      	bne.n	800d13a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d134:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d138:	e01b      	b.n	800d172 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d13e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d146:	2b00      	cmp	r3, #0
 800d148:	d0f0      	beq.n	800d12c <SDMMC_GetCmdResp3+0x1c>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d150:	2b00      	cmp	r3, #0
 800d152:	d1eb      	bne.n	800d12c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d158:	f003 0304 	and.w	r3, r3, #4
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d004      	beq.n	800d16a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2204      	movs	r2, #4
 800d164:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d166:	2304      	movs	r3, #4
 800d168:	e003      	b.n	800d172 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	22c5      	movs	r2, #197	; 0xc5
 800d16e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3710      	adds	r7, #16
 800d176:	46bd      	mov	sp, r7
 800d178:	bc90      	pop	{r4, r7}
 800d17a:	4770      	bx	lr
 800d17c:	20000048 	.word	0x20000048
 800d180:	10624dd3 	.word	0x10624dd3

0800d184 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d184:	b590      	push	{r4, r7, lr}
 800d186:	b087      	sub	sp, #28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60f8      	str	r0, [r7, #12]
 800d18c:	460b      	mov	r3, r1
 800d18e:	607a      	str	r2, [r7, #4]
 800d190:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d192:	4b34      	ldr	r3, [pc, #208]	; (800d264 <SDMMC_GetCmdResp6+0xe0>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a34      	ldr	r2, [pc, #208]	; (800d268 <SDMMC_GetCmdResp6+0xe4>)
 800d198:	fba2 2303 	umull	r2, r3, r2, r3
 800d19c:	0a5b      	lsrs	r3, r3, #9
 800d19e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1a2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d1a6:	4623      	mov	r3, r4
 800d1a8:	1e5c      	subs	r4, r3, #1
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d102      	bne.n	800d1b4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1b2:	e052      	b.n	800d25a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d0f0      	beq.n	800d1a6 <SDMMC_GetCmdResp6+0x22>
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1eb      	bne.n	800d1a6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d2:	f003 0304 	and.w	r3, r3, #4
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d004      	beq.n	800d1e4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2204      	movs	r2, #4
 800d1de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1e0:	2304      	movs	r3, #4
 800d1e2:	e03a      	b.n	800d25a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e8:	f003 0301 	and.w	r3, r3, #1
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d004      	beq.n	800d1fa <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e02f      	b.n	800d25a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f7ff fc79 	bl	800caf2 <SDIO_GetCommandResponse>
 800d200:	4603      	mov	r3, r0
 800d202:	461a      	mov	r2, r3
 800d204:	7afb      	ldrb	r3, [r7, #11]
 800d206:	4293      	cmp	r3, r2
 800d208:	d001      	beq.n	800d20e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e025      	b.n	800d25a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	22c5      	movs	r2, #197	; 0xc5
 800d212:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d214:	2100      	movs	r1, #0
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f7ff fc78 	bl	800cb0c <SDIO_GetResponse>
 800d21c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d106      	bne.n	800d236 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	0c1b      	lsrs	r3, r3, #16
 800d22c:	b29a      	uxth	r2, r3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d232:	2300      	movs	r3, #0
 800d234:	e011      	b.n	800d25a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d002      	beq.n	800d246 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d244:	e009      	b.n	800d25a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d002      	beq.n	800d256 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d254:	e001      	b.n	800d25a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	371c      	adds	r7, #28
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd90      	pop	{r4, r7, pc}
 800d262:	bf00      	nop
 800d264:	20000048 	.word	0x20000048
 800d268:	10624dd3 	.word	0x10624dd3

0800d26c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d26c:	b490      	push	{r4, r7}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d274:	4b21      	ldr	r3, [pc, #132]	; (800d2fc <SDMMC_GetCmdResp7+0x90>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a21      	ldr	r2, [pc, #132]	; (800d300 <SDMMC_GetCmdResp7+0x94>)
 800d27a:	fba2 2303 	umull	r2, r3, r2, r3
 800d27e:	0a5b      	lsrs	r3, r3, #9
 800d280:	f241 3288 	movw	r2, #5000	; 0x1388
 800d284:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d288:	4623      	mov	r3, r4
 800d28a:	1e5c      	subs	r4, r3, #1
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d102      	bne.n	800d296 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d290:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d294:	e02c      	b.n	800d2f0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d29a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0f0      	beq.n	800d288 <SDMMC_GetCmdResp7+0x1c>
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1eb      	bne.n	800d288 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b4:	f003 0304 	and.w	r3, r3, #4
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d004      	beq.n	800d2c6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2204      	movs	r2, #4
 800d2c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2c2:	2304      	movs	r3, #4
 800d2c4:	e014      	b.n	800d2f0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ca:	f003 0301 	and.w	r3, r3, #1
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d004      	beq.n	800d2dc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e009      	b.n	800d2f0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2240      	movs	r2, #64	; 0x40
 800d2ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d2ee:	2300      	movs	r3, #0
  
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bc90      	pop	{r4, r7}
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	20000048 	.word	0x20000048
 800d300:	10624dd3 	.word	0x10624dd3

0800d304 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d304:	b084      	sub	sp, #16
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	f107 001c 	add.w	r0, r7, #28
 800d312:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d122      	bne.n	800d362 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	68db      	ldr	r3, [r3, #12]
 800d32c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d330:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	68db      	ldr	r3, [r3, #12]
 800d33c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d346:	2b01      	cmp	r3, #1
 800d348:	d105      	bne.n	800d356 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 f94a 	bl	800d5f0 <USB_CoreReset>
 800d35c:	4603      	mov	r3, r0
 800d35e:	73fb      	strb	r3, [r7, #15]
 800d360:	e01a      	b.n	800d398 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f93e 	bl	800d5f0 <USB_CoreReset>
 800d374:	4603      	mov	r3, r0
 800d376:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d106      	bne.n	800d38c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d382:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	639a      	str	r2, [r3, #56]	; 0x38
 800d38a:	e005      	b.n	800d398 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	2b01      	cmp	r3, #1
 800d39c:	d10b      	bne.n	800d3b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	f043 0206 	orr.w	r2, r3, #6
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	f043 0220 	orr.w	r2, r3, #32
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3710      	adds	r7, #16
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d3c2:	b004      	add	sp, #16
 800d3c4:	4770      	bx	lr

0800d3c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3c6:	b480      	push	{r7}
 800d3c8:	b083      	sub	sp, #12
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f043 0201 	orr.w	r2, r3, #1
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d3da:	2300      	movs	r3, #0
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	f023 0201 	bic.w	r2, r3, #1
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d3fc:	2300      	movs	r3, #0
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	370c      	adds	r7, #12
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr

0800d40a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b082      	sub	sp, #8
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
 800d412:	460b      	mov	r3, r1
 800d414:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d422:	78fb      	ldrb	r3, [r7, #3]
 800d424:	2b01      	cmp	r3, #1
 800d426:	d106      	bne.n	800d436 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	60da      	str	r2, [r3, #12]
 800d434:	e00b      	b.n	800d44e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d436:	78fb      	ldrb	r3, [r7, #3]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d106      	bne.n	800d44a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	60da      	str	r2, [r3, #12]
 800d448:	e001      	b.n	800d44e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e003      	b.n	800d456 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d44e:	2032      	movs	r0, #50	; 0x32
 800d450:	f7f7 fd18 	bl	8004e84 <HAL_Delay>

  return HAL_OK;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
	...

0800d460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	019b      	lsls	r3, r3, #6
 800d472:	f043 0220 	orr.w	r2, r3, #32
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	3301      	adds	r3, #1
 800d47e:	60fb      	str	r3, [r7, #12]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4a09      	ldr	r2, [pc, #36]	; (800d4a8 <USB_FlushTxFifo+0x48>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d901      	bls.n	800d48c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d488:	2303      	movs	r3, #3
 800d48a:	e006      	b.n	800d49a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	691b      	ldr	r3, [r3, #16]
 800d490:	f003 0320 	and.w	r3, r3, #32
 800d494:	2b20      	cmp	r3, #32
 800d496:	d0f0      	beq.n	800d47a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	00030d40 	.word	0x00030d40

0800d4ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b085      	sub	sp, #20
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2210      	movs	r2, #16
 800d4bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	60fb      	str	r3, [r7, #12]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	4a09      	ldr	r2, [pc, #36]	; (800d4ec <USB_FlushRxFifo+0x40>)
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d901      	bls.n	800d4d0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d4cc:	2303      	movs	r3, #3
 800d4ce:	e006      	b.n	800d4de <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	691b      	ldr	r3, [r3, #16]
 800d4d4:	f003 0310 	and.w	r3, r3, #16
 800d4d8:	2b10      	cmp	r3, #16
 800d4da:	d0f0      	beq.n	800d4be <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d4dc:	2300      	movs	r3, #0
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3714      	adds	r7, #20
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e8:	4770      	bx	lr
 800d4ea:	bf00      	nop
 800d4ec:	00030d40 	.word	0x00030d40

0800d4f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b089      	sub	sp, #36	; 0x24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	460b      	mov	r3, r1
 800d500:	71fb      	strb	r3, [r7, #7]
 800d502:	4613      	mov	r3, r2
 800d504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800d50e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d512:	2b00      	cmp	r3, #0
 800d514:	d11a      	bne.n	800d54c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d516:	88bb      	ldrh	r3, [r7, #4]
 800d518:	3303      	adds	r3, #3
 800d51a:	089b      	lsrs	r3, r3, #2
 800d51c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d51e:	2300      	movs	r3, #0
 800d520:	61bb      	str	r3, [r7, #24]
 800d522:	e00f      	b.n	800d544 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	031a      	lsls	r2, r3, #12
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	4413      	add	r3, r2
 800d52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d530:	461a      	mov	r2, r3
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	3304      	adds	r3, #4
 800d53c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	3301      	adds	r3, #1
 800d542:	61bb      	str	r3, [r7, #24]
 800d544:	69ba      	ldr	r2, [r7, #24]
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	429a      	cmp	r2, r3
 800d54a:	d3eb      	bcc.n	800d524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d54c:	2300      	movs	r3, #0
}
 800d54e:	4618      	mov	r0, r3
 800d550:	3724      	adds	r7, #36	; 0x24
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr

0800d55a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d55a:	b480      	push	{r7}
 800d55c:	b089      	sub	sp, #36	; 0x24
 800d55e:	af00      	add	r7, sp, #0
 800d560:	60f8      	str	r0, [r7, #12]
 800d562:	60b9      	str	r1, [r7, #8]
 800d564:	4613      	mov	r3, r2
 800d566:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800d570:	88fb      	ldrh	r3, [r7, #6]
 800d572:	3303      	adds	r3, #3
 800d574:	089b      	lsrs	r3, r3, #2
 800d576:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800d578:	2300      	movs	r3, #0
 800d57a:	61bb      	str	r3, [r7, #24]
 800d57c:	e00b      	b.n	800d596 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d584:	681a      	ldr	r2, [r3, #0]
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	601a      	str	r2, [r3, #0]
    pDest++;
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	3304      	adds	r3, #4
 800d58e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	3301      	adds	r3, #1
 800d594:	61bb      	str	r3, [r7, #24]
 800d596:	69ba      	ldr	r2, [r7, #24]
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d3ef      	bcc.n	800d57e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800d59e:	69fb      	ldr	r3, [r7, #28]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3724      	adds	r7, #36	; 0x24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr

0800d5ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	695b      	ldr	r3, [r3, #20]
 800d5b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	699b      	ldr	r3, [r3, #24]
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	695b      	ldr	r3, [r3, #20]
 800d5de:	f003 0301 	and.w	r3, r3, #1
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	370c      	adds	r7, #12
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr
	...

0800d5f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b085      	sub	sp, #20
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3301      	adds	r3, #1
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	4a13      	ldr	r2, [pc, #76]	; (800d654 <USB_CoreReset+0x64>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d901      	bls.n	800d60e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d60a:	2303      	movs	r3, #3
 800d60c:	e01b      	b.n	800d646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	691b      	ldr	r3, [r3, #16]
 800d612:	2b00      	cmp	r3, #0
 800d614:	daf2      	bge.n	800d5fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d616:	2300      	movs	r3, #0
 800d618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	f043 0201 	orr.w	r2, r3, #1
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4a09      	ldr	r2, [pc, #36]	; (800d654 <USB_CoreReset+0x64>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d901      	bls.n	800d638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d634:	2303      	movs	r3, #3
 800d636:	e006      	b.n	800d646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	2b01      	cmp	r3, #1
 800d642:	d0f0      	beq.n	800d626 <USB_CoreReset+0x36>

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr
 800d652:	bf00      	nop
 800d654:	00030d40 	.word	0x00030d40

0800d658 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d658:	b084      	sub	sp, #16
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b084      	sub	sp, #16
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	f107 001c 	add.w	r0, r7, #28
 800d666:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d674:	461a      	mov	r2, r3
 800d676:	2300      	movs	r3, #0
 800d678:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d018      	beq.n	800d6d0 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	d10a      	bne.n	800d6ba <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68ba      	ldr	r2, [r7, #8]
 800d6ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6b2:	f043 0304 	orr.w	r3, r3, #4
 800d6b6:	6013      	str	r3, [r2, #0]
 800d6b8:	e014      	b.n	800d6e4 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6c8:	f023 0304 	bic.w	r3, r3, #4
 800d6cc:	6013      	str	r3, [r2, #0]
 800d6ce:	e009      	b.n	800d6e4 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68ba      	ldr	r2, [r7, #8]
 800d6da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6de:	f023 0304 	bic.w	r3, r3, #4
 800d6e2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800d6e4:	2110      	movs	r1, #16
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7ff feba 	bl	800d460 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f7ff fedd 	bl	800d4ac <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	60fb      	str	r3, [r7, #12]
 800d6f6:	e015      	b.n	800d724 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	015a      	lsls	r2, r3, #5
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	4413      	add	r3, r2
 800d700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d704:	461a      	mov	r2, r3
 800d706:	f04f 33ff 	mov.w	r3, #4294967295
 800d70a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	015a      	lsls	r2, r3, #5
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	4413      	add	r3, r2
 800d714:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d718:	461a      	mov	r2, r3
 800d71a:	2300      	movs	r3, #0
 800d71c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	3301      	adds	r3, #1
 800d722:	60fb      	str	r3, [r7, #12]
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d3e5      	bcc.n	800d6f8 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800d72c:	2101      	movs	r1, #1
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f8ac 	bl	800d88c <USB_DriveVbus>

  HAL_Delay(200U);
 800d734:	20c8      	movs	r0, #200	; 0xc8
 800d736:	f7f7 fba5 	bl	8004e84 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f04f 32ff 	mov.w	r2, #4294967295
 800d746:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d74c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00b      	beq.n	800d76c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d75a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a14      	ldr	r2, [pc, #80]	; (800d7b0 <USB_HostInit+0x158>)
 800d760:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a13      	ldr	r2, [pc, #76]	; (800d7b4 <USB_HostInit+0x15c>)
 800d766:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d76a:	e009      	b.n	800d780 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2280      	movs	r2, #128	; 0x80
 800d770:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a10      	ldr	r2, [pc, #64]	; (800d7b8 <USB_HostInit+0x160>)
 800d776:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a10      	ldr	r2, [pc, #64]	; (800d7bc <USB_HostInit+0x164>)
 800d77c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d782:	2b00      	cmp	r3, #0
 800d784:	d105      	bne.n	800d792 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	699b      	ldr	r3, [r3, #24]
 800d78a:	f043 0210 	orr.w	r2, r3, #16
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	699a      	ldr	r2, [r3, #24]
 800d796:	4b0a      	ldr	r3, [pc, #40]	; (800d7c0 <USB_HostInit+0x168>)
 800d798:	4313      	orrs	r3, r2
 800d79a:	687a      	ldr	r2, [r7, #4]
 800d79c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3710      	adds	r7, #16
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d7aa:	b004      	add	sp, #16
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	01000200 	.word	0x01000200
 800d7b4:	00e00300 	.word	0x00e00300
 800d7b8:	00600080 	.word	0x00600080
 800d7bc:	004000e0 	.word	0x004000e0
 800d7c0:	a3200008 	.word	0xa3200008

0800d7c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d7e2:	f023 0303 	bic.w	r3, r3, #3
 800d7e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	f003 0303 	and.w	r3, r3, #3
 800d7f6:	68f9      	ldr	r1, [r7, #12]
 800d7f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d800:	78fb      	ldrb	r3, [r7, #3]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d107      	bne.n	800d816 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d80c:	461a      	mov	r2, r3
 800d80e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d812:	6053      	str	r3, [r2, #4]
 800d814:	e009      	b.n	800d82a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d816:	78fb      	ldrb	r3, [r7, #3]
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d106      	bne.n	800d82a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d822:	461a      	mov	r2, r3
 800d824:	f241 7370 	movw	r3, #6000	; 0x1770
 800d828:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d82a:	2300      	movs	r3, #0
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3714      	adds	r7, #20
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b084      	sub	sp, #16
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d844:	2300      	movs	r3, #0
 800d846:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d858:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d866:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d868:	2064      	movs	r0, #100	; 0x64
 800d86a:	f7f7 fb0b 	bl	8004e84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	68fa      	ldr	r2, [r7, #12]
 800d872:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d876:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d87a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d87c:	200a      	movs	r0, #10
 800d87e:	f7f7 fb01 	bl	8004e84 <HAL_Delay>

  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	460b      	mov	r3, r1
 800d896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d89c:	2300      	movs	r3, #0
 800d89e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d8b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d109      	bne.n	800d8d0 <USB_DriveVbus+0x44>
 800d8bc:	78fb      	ldrb	r3, [r7, #3]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d106      	bne.n	800d8d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	68fa      	ldr	r2, [r7, #12]
 800d8c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d8ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d8ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d8d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d8da:	d109      	bne.n	800d8f0 <USB_DriveVbus+0x64>
 800d8dc:	78fb      	ldrb	r3, [r7, #3]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d106      	bne.n	800d8f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	68fa      	ldr	r2, [r7, #12]
 800d8e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d8ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3714      	adds	r7, #20
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b085      	sub	sp, #20
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d90a:	2300      	movs	r3, #0
 800d90c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	0c5b      	lsrs	r3, r3, #17
 800d91c:	f003 0303 	and.w	r3, r3, #3
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	b29b      	uxth	r3, r3
}
 800d942:	4618      	mov	r0, r3
 800d944:	3714      	adds	r7, #20
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr
	...

0800d950 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d950:	b480      	push	{r7}
 800d952:	b087      	sub	sp, #28
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	4608      	mov	r0, r1
 800d95a:	4611      	mov	r1, r2
 800d95c:	461a      	mov	r2, r3
 800d95e:	4603      	mov	r3, r0
 800d960:	70fb      	strb	r3, [r7, #3]
 800d962:	460b      	mov	r3, r1
 800d964:	70bb      	strb	r3, [r7, #2]
 800d966:	4613      	mov	r3, r2
 800d968:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d96a:	2300      	movs	r3, #0
 800d96c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d972:	78fb      	ldrb	r3, [r7, #3]
 800d974:	015a      	lsls	r2, r3, #5
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	4413      	add	r3, r2
 800d97a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d97e:	461a      	mov	r2, r3
 800d980:	f04f 33ff 	mov.w	r3, #4294967295
 800d984:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d986:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d87e      	bhi.n	800da8c <USB_HC_Init+0x13c>
 800d98e:	a201      	add	r2, pc, #4	; (adr r2, 800d994 <USB_HC_Init+0x44>)
 800d990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d994:	0800d9a5 	.word	0x0800d9a5
 800d998:	0800da4f 	.word	0x0800da4f
 800d99c:	0800d9a5 	.word	0x0800d9a5
 800d9a0:	0800da11 	.word	0x0800da11
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d9a4:	78fb      	ldrb	r3, [r7, #3]
 800d9a6:	015a      	lsls	r2, r3, #5
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	f240 439d 	movw	r3, #1181	; 0x49d
 800d9b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d9b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	da10      	bge.n	800d9e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d9c0:	78fb      	ldrb	r3, [r7, #3]
 800d9c2:	015a      	lsls	r2, r3, #5
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	78fa      	ldrb	r2, [r7, #3]
 800d9d0:	0151      	lsls	r1, r2, #5
 800d9d2:	68ba      	ldr	r2, [r7, #8]
 800d9d4:	440a      	add	r2, r1
 800d9d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d9da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9de:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800d9e0:	e057      	b.n	800da92 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d051      	beq.n	800da92 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800d9ee:	78fb      	ldrb	r3, [r7, #3]
 800d9f0:	015a      	lsls	r2, r3, #5
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	78fa      	ldrb	r2, [r7, #3]
 800d9fe:	0151      	lsls	r1, r2, #5
 800da00:	68ba      	ldr	r2, [r7, #8]
 800da02:	440a      	add	r2, r1
 800da04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800da0c:	60d3      	str	r3, [r2, #12]
      break;
 800da0e:	e040      	b.n	800da92 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800da10:	78fb      	ldrb	r3, [r7, #3]
 800da12:	015a      	lsls	r2, r3, #5
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	4413      	add	r3, r2
 800da18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da1c:	461a      	mov	r2, r3
 800da1e:	f240 639d 	movw	r3, #1693	; 0x69d
 800da22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800da24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	da34      	bge.n	800da96 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800da2c:	78fb      	ldrb	r3, [r7, #3]
 800da2e:	015a      	lsls	r2, r3, #5
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	4413      	add	r3, r2
 800da34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	78fa      	ldrb	r2, [r7, #3]
 800da3c:	0151      	lsls	r1, r2, #5
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	440a      	add	r2, r1
 800da42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da4a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800da4c:	e023      	b.n	800da96 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800da4e:	78fb      	ldrb	r3, [r7, #3]
 800da50:	015a      	lsls	r2, r3, #5
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	4413      	add	r3, r2
 800da56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da5a:	461a      	mov	r2, r3
 800da5c:	f240 2325 	movw	r3, #549	; 0x225
 800da60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800da62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800da66:	2b00      	cmp	r3, #0
 800da68:	da17      	bge.n	800da9a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800da6a:	78fb      	ldrb	r3, [r7, #3]
 800da6c:	015a      	lsls	r2, r3, #5
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	4413      	add	r3, r2
 800da72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	78fa      	ldrb	r2, [r7, #3]
 800da7a:	0151      	lsls	r1, r2, #5
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	440a      	add	r2, r1
 800da80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800da84:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800da88:	60d3      	str	r3, [r2, #12]
      }
      break;
 800da8a:	e006      	b.n	800da9a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	75fb      	strb	r3, [r7, #23]
      break;
 800da90:	e004      	b.n	800da9c <USB_HC_Init+0x14c>
      break;
 800da92:	bf00      	nop
 800da94:	e002      	b.n	800da9c <USB_HC_Init+0x14c>
      break;
 800da96:	bf00      	nop
 800da98:	e000      	b.n	800da9c <USB_HC_Init+0x14c>
      break;
 800da9a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800daa2:	699a      	ldr	r2, [r3, #24]
 800daa4:	78fb      	ldrb	r3, [r7, #3]
 800daa6:	f003 030f 	and.w	r3, r3, #15
 800daaa:	2101      	movs	r1, #1
 800daac:	fa01 f303 	lsl.w	r3, r1, r3
 800dab0:	68b9      	ldr	r1, [r7, #8]
 800dab2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800dab6:	4313      	orrs	r3, r2
 800dab8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	699b      	ldr	r3, [r3, #24]
 800dabe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dac6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	da03      	bge.n	800dad6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dad2:	613b      	str	r3, [r7, #16]
 800dad4:	e001      	b.n	800dada <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800dad6:	2300      	movs	r3, #0
 800dad8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800dada:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d103      	bne.n	800daea <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800dae6:	60fb      	str	r3, [r7, #12]
 800dae8:	e001      	b.n	800daee <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800daea:	2300      	movs	r3, #0
 800daec:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800daee:	787b      	ldrb	r3, [r7, #1]
 800daf0:	059b      	lsls	r3, r3, #22
 800daf2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800daf6:	78bb      	ldrb	r3, [r7, #2]
 800daf8:	02db      	lsls	r3, r3, #11
 800dafa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dafe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800db00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db04:	049b      	lsls	r3, r3, #18
 800db06:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800db0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800db0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800db0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800db12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800db18:	78fb      	ldrb	r3, [r7, #3]
 800db1a:	0159      	lsls	r1, r3, #5
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	440b      	add	r3, r1
 800db20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db24:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800db2a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800db2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db30:	2b03      	cmp	r3, #3
 800db32:	d10f      	bne.n	800db54 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800db34:	78fb      	ldrb	r3, [r7, #3]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	78fa      	ldrb	r2, [r7, #3]
 800db44:	0151      	lsls	r1, r2, #5
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	440a      	add	r2, r1
 800db4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800db4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db52:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800db54:	7dfb      	ldrb	r3, [r7, #23]
}
 800db56:	4618      	mov	r0, r3
 800db58:	371c      	adds	r7, #28
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop

0800db64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b08c      	sub	sp, #48	; 0x30
 800db68:	af02      	add	r7, sp, #8
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	4613      	mov	r3, r2
 800db70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	785b      	ldrb	r3, [r3, #1]
 800db7a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800db7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db80:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d028      	beq.n	800dbe0 <USB_HC_StartXfer+0x7c>
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	791b      	ldrb	r3, [r3, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d124      	bne.n	800dbe0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800db96:	79fb      	ldrb	r3, [r7, #7]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d10b      	bne.n	800dbb4 <USB_HC_StartXfer+0x50>
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	795b      	ldrb	r3, [r3, #5]
 800dba0:	2b01      	cmp	r3, #1
 800dba2:	d107      	bne.n	800dbb4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	785b      	ldrb	r3, [r3, #1]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f000 fa30 	bl	800e010 <USB_DoPing>
      return HAL_OK;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	e114      	b.n	800ddde <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 800dbb4:	79fb      	ldrb	r3, [r7, #7]
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d112      	bne.n	800dbe0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	015a      	lsls	r2, r3, #5
 800dbbe:	6a3b      	ldr	r3, [r7, #32]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	69fa      	ldr	r2, [r7, #28]
 800dbca:	0151      	lsls	r1, r2, #5
 800dbcc:	6a3a      	ldr	r2, [r7, #32]
 800dbce:	440a      	add	r2, r1
 800dbd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dbd4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800dbd8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d018      	beq.n	800dc1a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	691b      	ldr	r3, [r3, #16]
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	8912      	ldrh	r2, [r2, #8]
 800dbf0:	4413      	add	r3, r2
 800dbf2:	3b01      	subs	r3, #1
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	8912      	ldrh	r2, [r2, #8]
 800dbf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbfc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800dbfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800dc00:	8b7b      	ldrh	r3, [r7, #26]
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d90b      	bls.n	800dc1e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800dc06:	8b7b      	ldrh	r3, [r7, #26]
 800dc08:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800dc0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc0c:	68ba      	ldr	r2, [r7, #8]
 800dc0e:	8912      	ldrh	r2, [r2, #8]
 800dc10:	fb02 f203 	mul.w	r2, r2, r3
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	611a      	str	r2, [r3, #16]
 800dc18:	e001      	b.n	800dc1e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	78db      	ldrb	r3, [r3, #3]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d006      	beq.n	800dc34 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800dc26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc28:	68ba      	ldr	r2, [r7, #8]
 800dc2a:	8912      	ldrh	r2, [r2, #8]
 800dc2c:	fb02 f203 	mul.w	r2, r2, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	691b      	ldr	r3, [r3, #16]
 800dc38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dc3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800dc3e:	04d9      	lsls	r1, r3, #19
 800dc40:	4b69      	ldr	r3, [pc, #420]	; (800dde8 <USB_HC_StartXfer+0x284>)
 800dc42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	7a9b      	ldrb	r3, [r3, #10]
 800dc4a:	075b      	lsls	r3, r3, #29
 800dc4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc50:	69f9      	ldr	r1, [r7, #28]
 800dc52:	0148      	lsls	r0, r1, #5
 800dc54:	6a39      	ldr	r1, [r7, #32]
 800dc56:	4401      	add	r1, r0
 800dc58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800dc5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800dc5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800dc60:	79fb      	ldrb	r3, [r7, #7]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d009      	beq.n	800dc7a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	68d9      	ldr	r1, [r3, #12]
 800dc6a:	69fb      	ldr	r3, [r7, #28]
 800dc6c:	015a      	lsls	r2, r3, #5
 800dc6e:	6a3b      	ldr	r3, [r7, #32]
 800dc70:	4413      	add	r3, r2
 800dc72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc76:	460a      	mov	r2, r1
 800dc78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800dc7a:	6a3b      	ldr	r3, [r7, #32]
 800dc7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	f003 0301 	and.w	r3, r3, #1
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	bf0c      	ite	eq
 800dc8a:	2301      	moveq	r3, #1
 800dc8c:	2300      	movne	r3, #0
 800dc8e:	b2db      	uxtb	r3, r3
 800dc90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	015a      	lsls	r2, r3, #5
 800dc96:	6a3b      	ldr	r3, [r7, #32]
 800dc98:	4413      	add	r3, r2
 800dc9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	69fa      	ldr	r2, [r7, #28]
 800dca2:	0151      	lsls	r1, r2, #5
 800dca4:	6a3a      	ldr	r2, [r7, #32]
 800dca6:	440a      	add	r2, r1
 800dca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dcac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dcb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	015a      	lsls	r2, r3, #5
 800dcb6:	6a3b      	ldr	r3, [r7, #32]
 800dcb8:	4413      	add	r3, r2
 800dcba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	7e7b      	ldrb	r3, [r7, #25]
 800dcc2:	075b      	lsls	r3, r3, #29
 800dcc4:	69f9      	ldr	r1, [r7, #28]
 800dcc6:	0148      	lsls	r0, r1, #5
 800dcc8:	6a39      	ldr	r1, [r7, #32]
 800dcca:	4401      	add	r1, r0
 800dccc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	015a      	lsls	r2, r3, #5
 800dcd8:	6a3b      	ldr	r3, [r7, #32]
 800dcda:	4413      	add	r3, r2
 800dcdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a42      	ldr	r2, [pc, #264]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dce4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800dce6:	4b41      	ldr	r3, [pc, #260]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dcee:	4a3f      	ldr	r2, [pc, #252]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dcf0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	78db      	ldrb	r3, [r3, #3]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d006      	beq.n	800dd08 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800dcfa:	4b3c      	ldr	r3, [pc, #240]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd02:	4a3a      	ldr	r2, [pc, #232]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	e005      	b.n	800dd14 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800dd08:	4b38      	ldr	r3, [pc, #224]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dd10:	4a36      	ldr	r2, [pc, #216]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dd12:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800dd14:	4b35      	ldr	r3, [pc, #212]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dd1c:	4a33      	ldr	r2, [pc, #204]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dd1e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	015a      	lsls	r2, r3, #5
 800dd24:	6a3b      	ldr	r3, [r7, #32]
 800dd26:	4413      	add	r3, r2
 800dd28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	4b2f      	ldr	r3, [pc, #188]	; (800ddec <USB_HC_StartXfer+0x288>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800dd34:	79fb      	ldrb	r3, [r7, #7]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d001      	beq.n	800dd3e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	e04f      	b.n	800ddde <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	78db      	ldrb	r3, [r3, #3]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d14a      	bne.n	800dddc <USB_HC_StartXfer+0x278>
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d046      	beq.n	800dddc <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	79db      	ldrb	r3, [r3, #7]
 800dd52:	2b03      	cmp	r3, #3
 800dd54:	d830      	bhi.n	800ddb8 <USB_HC_StartXfer+0x254>
 800dd56:	a201      	add	r2, pc, #4	; (adr r2, 800dd5c <USB_HC_StartXfer+0x1f8>)
 800dd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd5c:	0800dd6d 	.word	0x0800dd6d
 800dd60:	0800dd91 	.word	0x0800dd91
 800dd64:	0800dd6d 	.word	0x0800dd6d
 800dd68:	0800dd91 	.word	0x0800dd91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	691b      	ldr	r3, [r3, #16]
 800dd70:	3303      	adds	r3, #3
 800dd72:	089b      	lsrs	r3, r3, #2
 800dd74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800dd76:	8afa      	ldrh	r2, [r7, #22]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d91c      	bls.n	800ddbc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	699b      	ldr	r3, [r3, #24]
 800dd86:	f043 0220 	orr.w	r2, r3, #32
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	619a      	str	r2, [r3, #24]
        }
        break;
 800dd8e:	e015      	b.n	800ddbc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	691b      	ldr	r3, [r3, #16]
 800dd94:	3303      	adds	r3, #3
 800dd96:	089b      	lsrs	r3, r3, #2
 800dd98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800dd9a:	8afa      	ldrh	r2, [r7, #22]
 800dd9c:	6a3b      	ldr	r3, [r7, #32]
 800dd9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	429a      	cmp	r2, r3
 800dda8:	d90a      	bls.n	800ddc0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	619a      	str	r2, [r3, #24]
        }
        break;
 800ddb6:	e003      	b.n	800ddc0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ddb8:	bf00      	nop
 800ddba:	e002      	b.n	800ddc2 <USB_HC_StartXfer+0x25e>
        break;
 800ddbc:	bf00      	nop
 800ddbe:	e000      	b.n	800ddc2 <USB_HC_StartXfer+0x25e>
        break;
 800ddc0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ddc2:	68bb      	ldr	r3, [r7, #8]
 800ddc4:	68d9      	ldr	r1, [r3, #12]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	785a      	ldrb	r2, [r3, #1]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	b298      	uxth	r0, r3
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9300      	str	r3, [sp, #0]
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f7ff fb8a 	bl	800d4f0 <USB_WritePacket>
  }

  return HAL_OK;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3728      	adds	r7, #40	; 0x28
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	1ff80000 	.word	0x1ff80000
 800ddec:	200001f4 	.word	0x200001f4

0800ddf0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de02:	695b      	ldr	r3, [r3, #20]
 800de04:	b29b      	uxth	r3, r3
}
 800de06:	4618      	mov	r0, r3
 800de08:	3714      	adds	r7, #20
 800de0a:	46bd      	mov	sp, r7
 800de0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de10:	4770      	bx	lr

0800de12 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800de12:	b480      	push	{r7}
 800de14:	b087      	sub	sp, #28
 800de16:	af00      	add	r7, sp, #0
 800de18:	6078      	str	r0, [r7, #4]
 800de1a:	460b      	mov	r3, r1
 800de1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800de22:	78fb      	ldrb	r3, [r7, #3]
 800de24:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800de26:	2300      	movs	r3, #0
 800de28:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	015a      	lsls	r2, r3, #5
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	4413      	add	r3, r2
 800de32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	0c9b      	lsrs	r3, r3, #18
 800de3a:	f003 0303 	and.w	r3, r3, #3
 800de3e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <USB_HC_Halt+0x3a>
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d16c      	bne.n	800df26 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	015a      	lsls	r2, r3, #5
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	4413      	add	r3, r2
 800de54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	0151      	lsls	r1, r2, #5
 800de5e:	693a      	ldr	r2, [r7, #16]
 800de60:	440a      	add	r2, r1
 800de62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800de6a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de74:	2b00      	cmp	r3, #0
 800de76:	d143      	bne.n	800df00 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	015a      	lsls	r2, r3, #5
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	4413      	add	r3, r2
 800de80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68fa      	ldr	r2, [r7, #12]
 800de88:	0151      	lsls	r1, r2, #5
 800de8a:	693a      	ldr	r2, [r7, #16]
 800de8c:	440a      	add	r2, r1
 800de8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800de92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	015a      	lsls	r2, r3, #5
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	4413      	add	r3, r2
 800dea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	68fa      	ldr	r2, [r7, #12]
 800dea8:	0151      	lsls	r1, r2, #5
 800deaa:	693a      	ldr	r2, [r7, #16]
 800deac:	440a      	add	r2, r1
 800deae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800deb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800deb6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	015a      	lsls	r2, r3, #5
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	4413      	add	r3, r2
 800dec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	68fa      	ldr	r2, [r7, #12]
 800dec8:	0151      	lsls	r1, r2, #5
 800deca:	693a      	ldr	r2, [r7, #16]
 800decc:	440a      	add	r2, r1
 800dece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ded2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ded6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	3301      	adds	r3, #1
 800dedc:	617b      	str	r3, [r7, #20]
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dee4:	d81d      	bhi.n	800df22 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	015a      	lsls	r2, r3, #5
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	4413      	add	r3, r2
 800deee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800def8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800defc:	d0ec      	beq.n	800ded8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800defe:	e080      	b.n	800e002 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	015a      	lsls	r2, r3, #5
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	4413      	add	r3, r2
 800df08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	68fa      	ldr	r2, [r7, #12]
 800df10:	0151      	lsls	r1, r2, #5
 800df12:	693a      	ldr	r2, [r7, #16]
 800df14:	440a      	add	r2, r1
 800df16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df1e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800df20:	e06f      	b.n	800e002 <USB_HC_Halt+0x1f0>
          break;
 800df22:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800df24:	e06d      	b.n	800e002 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	015a      	lsls	r2, r3, #5
 800df2a:	693b      	ldr	r3, [r7, #16]
 800df2c:	4413      	add	r3, r2
 800df2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	0151      	lsls	r1, r2, #5
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	440a      	add	r2, r1
 800df3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df44:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800df52:	2b00      	cmp	r3, #0
 800df54:	d143      	bne.n	800dfde <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	015a      	lsls	r2, r3, #5
 800df5a:	693b      	ldr	r3, [r7, #16]
 800df5c:	4413      	add	r3, r2
 800df5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	0151      	lsls	r1, r2, #5
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	440a      	add	r2, r1
 800df6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df74:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	015a      	lsls	r2, r3, #5
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	68fa      	ldr	r2, [r7, #12]
 800df86:	0151      	lsls	r1, r2, #5
 800df88:	693a      	ldr	r2, [r7, #16]
 800df8a:	440a      	add	r2, r1
 800df8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800df90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800df94:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	0151      	lsls	r1, r2, #5
 800dfa8:	693a      	ldr	r2, [r7, #16]
 800dfaa:	440a      	add	r2, r1
 800dfac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dfb0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800dfb4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	617b      	str	r3, [r7, #20]
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfc2:	d81d      	bhi.n	800e000 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	015a      	lsls	r2, r3, #5
 800dfc8:	693b      	ldr	r3, [r7, #16]
 800dfca:	4413      	add	r3, r2
 800dfcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dfd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dfda:	d0ec      	beq.n	800dfb6 <USB_HC_Halt+0x1a4>
 800dfdc:	e011      	b.n	800e002 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	015a      	lsls	r2, r3, #5
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	0151      	lsls	r1, r2, #5
 800dff0:	693a      	ldr	r2, [r7, #16]
 800dff2:	440a      	add	r2, r1
 800dff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800dff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800dffc:	6013      	str	r3, [r2, #0]
 800dffe:	e000      	b.n	800e002 <USB_HC_Halt+0x1f0>
          break;
 800e000:	bf00      	nop
    }
  }

  return HAL_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	371c      	adds	r7, #28
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e010:	b480      	push	{r7}
 800e012:	b087      	sub	sp, #28
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
 800e018:	460b      	mov	r3, r1
 800e01a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e020:	78fb      	ldrb	r3, [r7, #3]
 800e022:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e024:	2301      	movs	r3, #1
 800e026:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	04da      	lsls	r2, r3, #19
 800e02c:	4b15      	ldr	r3, [pc, #84]	; (800e084 <USB_DoPing+0x74>)
 800e02e:	4013      	ands	r3, r2
 800e030:	693a      	ldr	r2, [r7, #16]
 800e032:	0151      	lsls	r1, r2, #5
 800e034:	697a      	ldr	r2, [r7, #20]
 800e036:	440a      	add	r2, r1
 800e038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800e03c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e040:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	015a      	lsls	r2, r3, #5
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	4413      	add	r3, r2
 800e04a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e058:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e05a:	68bb      	ldr	r3, [r7, #8]
 800e05c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e060:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	015a      	lsls	r2, r3, #5
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	4413      	add	r3, r2
 800e06a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e06e:	461a      	mov	r2, r3
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	371c      	adds	r7, #28
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	1ff80000 	.word	0x1ff80000

0800e088 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800e094:	2300      	movs	r3, #0
 800e096:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7ff f9a5 	bl	800d3e8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800e09e:	2110      	movs	r1, #16
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7ff f9dd 	bl	800d460 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff fa00 	bl	800d4ac <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	613b      	str	r3, [r7, #16]
 800e0b0:	e01f      	b.n	800e0f2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e0c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0d0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e0d8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	015a      	lsls	r2, r3, #5
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	613b      	str	r3, [r7, #16]
 800e0f2:	693b      	ldr	r3, [r7, #16]
 800e0f4:	2b0f      	cmp	r3, #15
 800e0f6:	d9dc      	bls.n	800e0b2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	613b      	str	r3, [r7, #16]
 800e0fc:	e034      	b.n	800e168 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	015a      	lsls	r2, r3, #5
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	4413      	add	r3, r2
 800e106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e114:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e11c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e11e:	68bb      	ldr	r3, [r7, #8]
 800e120:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e124:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	015a      	lsls	r2, r3, #5
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	4413      	add	r3, r2
 800e12e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e132:	461a      	mov	r2, r3
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800e138:	697b      	ldr	r3, [r7, #20]
 800e13a:	3301      	adds	r3, #1
 800e13c:	617b      	str	r3, [r7, #20]
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e144:	d80c      	bhi.n	800e160 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	015a      	lsls	r2, r3, #5
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	4413      	add	r3, r2
 800e14e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e15c:	d0ec      	beq.n	800e138 <USB_StopHost+0xb0>
 800e15e:	e000      	b.n	800e162 <USB_StopHost+0xda>
        break;
 800e160:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	3301      	adds	r3, #1
 800e166:	613b      	str	r3, [r7, #16]
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	2b0f      	cmp	r3, #15
 800e16c:	d9c7      	bls.n	800e0fe <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e174:	461a      	mov	r2, r3
 800e176:	f04f 33ff 	mov.w	r3, #4294967295
 800e17a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	f04f 32ff 	mov.w	r2, #4294967295
 800e182:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7ff f91e 	bl	800d3c6 <USB_EnableGlobalInt>

  return HAL_OK;
 800e18a:	2300      	movs	r3, #0
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3718      	adds	r7, #24
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}

0800e194 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e194:	b590      	push	{r4, r7, lr}
 800e196:	b089      	sub	sp, #36	; 0x24
 800e198:	af04      	add	r7, sp, #16
 800e19a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e19c:	2301      	movs	r3, #1
 800e19e:	2202      	movs	r2, #2
 800e1a0:	2102      	movs	r1, #2
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fcb4 	bl	800eb10 <USBH_FindInterface>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
 800e1ae:	2bff      	cmp	r3, #255	; 0xff
 800e1b0:	d002      	beq.n	800e1b8 <USBH_CDC_InterfaceInit+0x24>
 800e1b2:	7bfb      	ldrb	r3, [r7, #15]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d901      	bls.n	800e1bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e1b8:	2302      	movs	r3, #2
 800e1ba:	e13d      	b.n	800e438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e1bc:	7bfb      	ldrb	r3, [r7, #15]
 800e1be:	4619      	mov	r1, r3
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 fc89 	bl	800ead8 <USBH_SelectInterface>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e1ca:	7bbb      	ldrb	r3, [r7, #14]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e1d0:	2302      	movs	r3, #2
 800e1d2:	e131      	b.n	800e438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800e1da:	2050      	movs	r0, #80	; 0x50
 800e1dc:	f006 fa8a 	bl	80146f4 <malloc>
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e1ea:	69db      	ldr	r3, [r3, #28]
 800e1ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e1ee:	68bb      	ldr	r3, [r7, #8]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e1f4:	2302      	movs	r3, #2
 800e1f6:	e11f      	b.n	800e438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e1f8:	2250      	movs	r2, #80	; 0x50
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	68b8      	ldr	r0, [r7, #8]
 800e1fe:	f006 fa94 	bl	801472a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e202:	7bfb      	ldrb	r3, [r7, #15]
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	211a      	movs	r1, #26
 800e208:	fb01 f303 	mul.w	r3, r1, r3
 800e20c:	4413      	add	r3, r2
 800e20e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	b25b      	sxtb	r3, r3
 800e216:	2b00      	cmp	r3, #0
 800e218:	da15      	bge.n	800e246 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e21a:	7bfb      	ldrb	r3, [r7, #15]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	211a      	movs	r1, #26
 800e220:	fb01 f303 	mul.w	r3, r1, r3
 800e224:	4413      	add	r3, r2
 800e226:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e22a:	781a      	ldrb	r2, [r3, #0]
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e230:	7bfb      	ldrb	r3, [r7, #15]
 800e232:	687a      	ldr	r2, [r7, #4]
 800e234:	211a      	movs	r1, #26
 800e236:	fb01 f303 	mul.w	r3, r1, r3
 800e23a:	4413      	add	r3, r2
 800e23c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e240:	881a      	ldrh	r2, [r3, #0]
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	785b      	ldrb	r3, [r3, #1]
 800e24a:	4619      	mov	r1, r3
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f002 f890 	bl	8010372 <USBH_AllocPipe>
 800e252:	4603      	mov	r3, r0
 800e254:	461a      	mov	r2, r3
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	7819      	ldrb	r1, [r3, #0]
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	7858      	ldrb	r0, [r3, #1]
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	8952      	ldrh	r2, [r2, #10]
 800e272:	9202      	str	r2, [sp, #8]
 800e274:	2203      	movs	r2, #3
 800e276:	9201      	str	r2, [sp, #4]
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	4623      	mov	r3, r4
 800e27c:	4602      	mov	r2, r0
 800e27e:	6878      	ldr	r0, [r7, #4]
 800e280:	f002 f848 	bl	8010314 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	2200      	movs	r2, #0
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f006 f981 	bl	8014594 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e292:	2300      	movs	r3, #0
 800e294:	2200      	movs	r2, #0
 800e296:	210a      	movs	r1, #10
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f000 fc39 	bl	800eb10 <USBH_FindInterface>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e2a2:	7bfb      	ldrb	r3, [r7, #15]
 800e2a4:	2bff      	cmp	r3, #255	; 0xff
 800e2a6:	d002      	beq.n	800e2ae <USBH_CDC_InterfaceInit+0x11a>
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d901      	bls.n	800e2b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e0c2      	b.n	800e438 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800e2b2:	7bfb      	ldrb	r3, [r7, #15]
 800e2b4:	687a      	ldr	r2, [r7, #4]
 800e2b6:	211a      	movs	r1, #26
 800e2b8:	fb01 f303 	mul.w	r3, r1, r3
 800e2bc:	4413      	add	r3, r2
 800e2be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	b25b      	sxtb	r3, r3
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	da16      	bge.n	800e2f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e2ca:	7bfb      	ldrb	r3, [r7, #15]
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	211a      	movs	r1, #26
 800e2d0:	fb01 f303 	mul.w	r3, r1, r3
 800e2d4:	4413      	add	r3, r2
 800e2d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e2da:	781a      	ldrb	r2, [r3, #0]
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e2e0:	7bfb      	ldrb	r3, [r7, #15]
 800e2e2:	687a      	ldr	r2, [r7, #4]
 800e2e4:	211a      	movs	r1, #26
 800e2e6:	fb01 f303 	mul.w	r3, r1, r3
 800e2ea:	4413      	add	r3, r2
 800e2ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e2f0:	881a      	ldrh	r2, [r3, #0]
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	835a      	strh	r2, [r3, #26]
 800e2f6:	e015      	b.n	800e324 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	211a      	movs	r1, #26
 800e2fe:	fb01 f303 	mul.w	r3, r1, r3
 800e302:	4413      	add	r3, r2
 800e304:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800e308:	781a      	ldrb	r2, [r3, #0]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e30e:	7bfb      	ldrb	r3, [r7, #15]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	211a      	movs	r1, #26
 800e314:	fb01 f303 	mul.w	r3, r1, r3
 800e318:	4413      	add	r3, r2
 800e31a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800e31e:	881a      	ldrh	r2, [r3, #0]
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800e324:	7bfb      	ldrb	r3, [r7, #15]
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	211a      	movs	r1, #26
 800e32a:	fb01 f303 	mul.w	r3, r1, r3
 800e32e:	4413      	add	r3, r2
 800e330:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e334:	781b      	ldrb	r3, [r3, #0]
 800e336:	b25b      	sxtb	r3, r3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	da16      	bge.n	800e36a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e33c:	7bfb      	ldrb	r3, [r7, #15]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	211a      	movs	r1, #26
 800e342:	fb01 f303 	mul.w	r3, r1, r3
 800e346:	4413      	add	r3, r2
 800e348:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e34c:	781a      	ldrb	r2, [r3, #0]
 800e34e:	68bb      	ldr	r3, [r7, #8]
 800e350:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e352:	7bfb      	ldrb	r3, [r7, #15]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	211a      	movs	r1, #26
 800e358:	fb01 f303 	mul.w	r3, r1, r3
 800e35c:	4413      	add	r3, r2
 800e35e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e362:	881a      	ldrh	r2, [r3, #0]
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	835a      	strh	r2, [r3, #26]
 800e368:	e015      	b.n	800e396 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e36a:	7bfb      	ldrb	r3, [r7, #15]
 800e36c:	687a      	ldr	r2, [r7, #4]
 800e36e:	211a      	movs	r1, #26
 800e370:	fb01 f303 	mul.w	r3, r1, r3
 800e374:	4413      	add	r3, r2
 800e376:	f203 3356 	addw	r3, r3, #854	; 0x356
 800e37a:	781a      	ldrb	r2, [r3, #0]
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e380:	7bfb      	ldrb	r3, [r7, #15]
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	211a      	movs	r1, #26
 800e386:	fb01 f303 	mul.w	r3, r1, r3
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800e390:	881a      	ldrh	r2, [r3, #0]
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	7b9b      	ldrb	r3, [r3, #14]
 800e39a:	4619      	mov	r1, r3
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f001 ffe8 	bl	8010372 <USBH_AllocPipe>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	7bdb      	ldrb	r3, [r3, #15]
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f001 ffde 	bl	8010372 <USBH_AllocPipe>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	7b59      	ldrb	r1, [r3, #13]
 800e3c2:	68bb      	ldr	r3, [r7, #8]
 800e3c4:	7b98      	ldrb	r0, [r3, #14]
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e3d2:	68ba      	ldr	r2, [r7, #8]
 800e3d4:	8b12      	ldrh	r2, [r2, #24]
 800e3d6:	9202      	str	r2, [sp, #8]
 800e3d8:	2202      	movs	r2, #2
 800e3da:	9201      	str	r2, [sp, #4]
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	4623      	mov	r3, r4
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f001 ff96 	bl	8010314 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	7b19      	ldrb	r1, [r3, #12]
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	7bd8      	ldrb	r0, [r3, #15]
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e3fc:	68ba      	ldr	r2, [r7, #8]
 800e3fe:	8b52      	ldrh	r2, [r2, #26]
 800e400:	9202      	str	r2, [sp, #8]
 800e402:	2202      	movs	r2, #2
 800e404:	9201      	str	r2, [sp, #4]
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	4623      	mov	r3, r4
 800e40a:	4602      	mov	r2, r0
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f001 ff81 	bl	8010314 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2200      	movs	r2, #0
 800e416:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	7b5b      	ldrb	r3, [r3, #13]
 800e41e:	2200      	movs	r2, #0
 800e420:	4619      	mov	r1, r3
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f006 f8b6 	bl	8014594 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	7b1b      	ldrb	r3, [r3, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	4619      	mov	r1, r3
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f006 f8af 	bl	8014594 <USBH_LL_SetToggle>

  return USBH_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3714      	adds	r7, #20
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd90      	pop	{r4, r7, pc}

0800e440 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e44e:	69db      	ldr	r3, [r3, #28]
 800e450:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00e      	beq.n	800e478 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	4619      	mov	r1, r3
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f001 ff76 	bl	8010352 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	4619      	mov	r1, r3
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f001 ffa1 	bl	80103b4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	7b1b      	ldrb	r3, [r3, #12]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00e      	beq.n	800e49e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	7b1b      	ldrb	r3, [r3, #12]
 800e484:	4619      	mov	r1, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f001 ff63 	bl	8010352 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	7b1b      	ldrb	r3, [r3, #12]
 800e490:	4619      	mov	r1, r3
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f001 ff8e 	bl	80103b4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	2200      	movs	r2, #0
 800e49c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	7b5b      	ldrb	r3, [r3, #13]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00e      	beq.n	800e4c4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	7b5b      	ldrb	r3, [r3, #13]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f001 ff50 	bl	8010352 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	7b5b      	ldrb	r3, [r3, #13]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f001 ff7b 	bl	80103b4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4ca:	69db      	ldr	r3, [r3, #28]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00b      	beq.n	800e4e8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4d6:	69db      	ldr	r3, [r3, #28]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f006 f913 	bl	8014704 <free>
    phost->pActiveClass->pData = 0U;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b084      	sub	sp, #16
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e500:	69db      	ldr	r3, [r3, #28]
 800e502:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	3340      	adds	r3, #64	; 0x40
 800e508:	4619      	mov	r1, r3
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 f8b1 	bl	800e672 <GetLineCoding>
 800e510:	4603      	mov	r3, r0
 800e512:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e514:	7afb      	ldrb	r3, [r7, #11]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d105      	bne.n	800e526 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e520:	2102      	movs	r1, #2
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800e526:	7afb      	ldrb	r3, [r7, #11]
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3710      	adds	r7, #16
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}

0800e530 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e538:	2301      	movs	r3, #1
 800e53a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e546:	69db      	ldr	r3, [r3, #28]
 800e548:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800e550:	2b04      	cmp	r3, #4
 800e552:	d877      	bhi.n	800e644 <USBH_CDC_Process+0x114>
 800e554:	a201      	add	r2, pc, #4	; (adr r2, 800e55c <USBH_CDC_Process+0x2c>)
 800e556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55a:	bf00      	nop
 800e55c:	0800e571 	.word	0x0800e571
 800e560:	0800e577 	.word	0x0800e577
 800e564:	0800e5a7 	.word	0x0800e5a7
 800e568:	0800e61b 	.word	0x0800e61b
 800e56c:	0800e629 	.word	0x0800e629
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	73fb      	strb	r3, [r7, #15]
      break;
 800e574:	e06d      	b.n	800e652 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e57a:	4619      	mov	r1, r3
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 f897 	bl	800e6b0 <SetLineCoding>
 800e582:	4603      	mov	r3, r0
 800e584:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e586:	7bbb      	ldrb	r3, [r7, #14]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d104      	bne.n	800e596 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	2202      	movs	r2, #2
 800e590:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e594:	e058      	b.n	800e648 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800e596:	7bbb      	ldrb	r3, [r7, #14]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d055      	beq.n	800e648 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	2204      	movs	r2, #4
 800e5a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e5a4:	e050      	b.n	800e648 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	3340      	adds	r3, #64	; 0x40
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f860 	bl	800e672 <GetLineCoding>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e5b6:	7bbb      	ldrb	r3, [r7, #14]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d126      	bne.n	800e60a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ce:	791b      	ldrb	r3, [r3, #4]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d13b      	bne.n	800e64c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800e5da:	68bb      	ldr	r3, [r7, #8]
 800e5dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5de:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	d133      	bne.n	800e64c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e5e4:	68bb      	ldr	r3, [r7, #8]
 800e5e6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800e5f0:	429a      	cmp	r2, r3
 800e5f2:	d12b      	bne.n	800e64c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5fc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d124      	bne.n	800e64c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f984 	bl	800e910 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800e608:	e020      	b.n	800e64c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800e60a:	7bbb      	ldrb	r3, [r7, #14]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d01d      	beq.n	800e64c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	2204      	movs	r2, #4
 800e614:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800e618:	e018      	b.n	800e64c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 f867 	bl	800e6ee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 f8f8 	bl	800e816 <CDC_ProcessReception>
      break;
 800e626:	e014      	b.n	800e652 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800e628:	2100      	movs	r1, #0
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f001 f94f 	bl	800f8ce <USBH_ClrFeature>
 800e630:	4603      	mov	r3, r0
 800e632:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800e634:	7bbb      	ldrb	r3, [r7, #14]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d10a      	bne.n	800e650 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	2200      	movs	r2, #0
 800e63e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800e642:	e005      	b.n	800e650 <USBH_CDC_Process+0x120>

    default:
      break;
 800e644:	bf00      	nop
 800e646:	e004      	b.n	800e652 <USBH_CDC_Process+0x122>
      break;
 800e648:	bf00      	nop
 800e64a:	e002      	b.n	800e652 <USBH_CDC_Process+0x122>
      break;
 800e64c:	bf00      	nop
 800e64e:	e000      	b.n	800e652 <USBH_CDC_Process+0x122>
      break;
 800e650:	bf00      	nop

  }

  return status;
 800e652:	7bfb      	ldrb	r3, [r7, #15]
}
 800e654:	4618      	mov	r0, r3
 800e656:	3710      	adds	r7, #16
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr

0800e672 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800e672:	b580      	push	{r7, lr}
 800e674:	b082      	sub	sp, #8
 800e676:	af00      	add	r7, sp, #0
 800e678:	6078      	str	r0, [r7, #4]
 800e67a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	22a1      	movs	r2, #161	; 0xa1
 800e680:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2221      	movs	r2, #33	; 0x21
 800e686:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2200      	movs	r2, #0
 800e68c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	2207      	movs	r2, #7
 800e698:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	2207      	movs	r2, #7
 800e69e:	4619      	mov	r1, r3
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f001 faf4 	bl	800fc8e <USBH_CtlReq>
 800e6a6:	4603      	mov	r3, r0
}
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
 800e6b8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2221      	movs	r2, #33	; 0x21
 800e6be:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2220      	movs	r2, #32
 800e6c4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2207      	movs	r2, #7
 800e6d6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	2207      	movs	r2, #7
 800e6dc:	4619      	mov	r1, r3
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f001 fad5 	bl	800fc8e <USBH_CtlReq>
 800e6e4:	4603      	mov	r3, r0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b086      	sub	sp, #24
 800e6f2:	af02      	add	r7, sp, #8
 800e6f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e6fc:	69db      	ldr	r3, [r3, #28]
 800e6fe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e700:	2300      	movs	r3, #0
 800e702:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d002      	beq.n	800e714 <CDC_ProcessTransmission+0x26>
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d025      	beq.n	800e75e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800e712:	e07c      	b.n	800e80e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	8b12      	ldrh	r2, [r2, #24]
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d90c      	bls.n	800e73a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	69d9      	ldr	r1, [r3, #28]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	8b1a      	ldrh	r2, [r3, #24]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	7b58      	ldrb	r0, [r3, #13]
 800e72c:	2301      	movs	r3, #1
 800e72e:	9300      	str	r3, [sp, #0]
 800e730:	4603      	mov	r3, r0
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f001 fdab 	bl	801028e <USBH_BulkSendData>
 800e738:	e00c      	b.n	800e754 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800e742:	b29a      	uxth	r2, r3
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	7b58      	ldrb	r0, [r3, #13]
 800e748:	2301      	movs	r3, #1
 800e74a:	9300      	str	r3, [sp, #0]
 800e74c:	4603      	mov	r3, r0
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f001 fd9d 	bl	801028e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2202      	movs	r2, #2
 800e758:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800e75c:	e057      	b.n	800e80e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	7b5b      	ldrb	r3, [r3, #13]
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f005 feeb 	bl	8014540 <USBH_LL_GetURBState>
 800e76a:	4603      	mov	r3, r0
 800e76c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800e76e:	7afb      	ldrb	r3, [r7, #11]
 800e770:	2b01      	cmp	r3, #1
 800e772:	d136      	bne.n	800e7e2 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	8b12      	ldrh	r2, [r2, #24]
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d90e      	bls.n	800e79e <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e784:	68fa      	ldr	r2, [r7, #12]
 800e786:	8b12      	ldrh	r2, [r2, #24]
 800e788:	1a9a      	subs	r2, r3, r2
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	69db      	ldr	r3, [r3, #28]
 800e792:	68fa      	ldr	r2, [r7, #12]
 800e794:	8b12      	ldrh	r2, [r2, #24]
 800e796:	441a      	add	r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	61da      	str	r2, [r3, #28]
 800e79c:	e002      	b.n	800e7a4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d004      	beq.n	800e7b6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800e7b4:	e006      	b.n	800e7c4 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 f892 	bl	800e8e8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2204      	movs	r2, #4
 800e7c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e7d8:	2300      	movs	r3, #0
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f002 fa54 	bl	8010c88 <osMessageQueuePut>
      break;
 800e7e0:	e014      	b.n	800e80c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800e7e2:	7afb      	ldrb	r3, [r7, #11]
 800e7e4:	2b02      	cmp	r3, #2
 800e7e6:	d111      	bne.n	800e80c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2204      	movs	r2, #4
 800e7f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e804:	2300      	movs	r3, #0
 800e806:	2200      	movs	r2, #0
 800e808:	f002 fa3e 	bl	8010c88 <osMessageQueuePut>
      break;
 800e80c:	bf00      	nop
  }
}
 800e80e:	bf00      	nop
 800e810:	3710      	adds	r7, #16
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800e816:	b580      	push	{r7, lr}
 800e818:	b086      	sub	sp, #24
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e824:	69db      	ldr	r3, [r3, #28]
 800e826:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e828:	2300      	movs	r3, #0
 800e82a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800e832:	2b03      	cmp	r3, #3
 800e834:	d002      	beq.n	800e83c <CDC_ProcessReception+0x26>
 800e836:	2b04      	cmp	r3, #4
 800e838:	d00e      	beq.n	800e858 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800e83a:	e051      	b.n	800e8e0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	6a19      	ldr	r1, [r3, #32]
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	8b5a      	ldrh	r2, [r3, #26]
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	7b1b      	ldrb	r3, [r3, #12]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f001 fd45 	bl	80102d8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2204      	movs	r2, #4
 800e852:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800e856:	e043      	b.n	800e8e0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	7b1b      	ldrb	r3, [r3, #12]
 800e85c:	4619      	mov	r1, r3
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f005 fe6e 	bl	8014540 <USBH_LL_GetURBState>
 800e864:	4603      	mov	r3, r0
 800e866:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800e868:	7cfb      	ldrb	r3, [r7, #19]
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d137      	bne.n	800e8de <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	7b1b      	ldrb	r3, [r3, #12]
 800e872:	4619      	mov	r1, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f005 fdd1 	bl	801441c <USBH_LL_GetLastXferSize>
 800e87a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	429a      	cmp	r2, r3
 800e884:	d016      	beq.n	800e8b4 <CDC_ProcessReception+0x9e>
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	8b5b      	ldrh	r3, [r3, #26]
 800e88a:	461a      	mov	r2, r3
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	4293      	cmp	r3, r2
 800e890:	d910      	bls.n	800e8b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	1ad2      	subs	r2, r2, r3
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	6a1a      	ldr	r2, [r3, #32]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	441a      	add	r2, r3
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	2203      	movs	r2, #3
 800e8ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800e8b2:	e006      	b.n	800e8c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f81d 	bl	800e8fc <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2204      	movs	r2, #4
 800e8c6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	2200      	movs	r2, #0
 800e8da:	f002 f9d5 	bl	8010c88 <osMessageQueuePut>
      break;
 800e8de:	bf00      	nop
  }
}
 800e8e0:	bf00      	nop
 800e8e2:	3718      	adds	r7, #24
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b083      	sub	sp, #12
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e904:	bf00      	nop
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800e918:	bf00      	nop
 800e91a:	370c      	adds	r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e922:	4770      	bx	lr

0800e924 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4613      	mov	r3, r2
 800e930:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d101      	bne.n	800e93c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800e938:	2302      	movs	r3, #2
 800e93a:	e044      	b.n	800e9c6 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	79fa      	ldrb	r2, [r7, #7]
 800e940:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2200      	movs	r2, #0
 800e948:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2200      	movs	r2, #0
 800e950:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f000 f841 	bl	800e9dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2200      	movs	r2, #0
 800e966:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d003      	beq.n	800e988 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	68ba      	ldr	r2, [r7, #8]
 800e984:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800e988:	2200      	movs	r2, #0
 800e98a:	2104      	movs	r1, #4
 800e98c:	2010      	movs	r0, #16
 800e98e:	f002 f8f5 	bl	8010b7c <osMessageQueueNew>
 800e992:	4602      	mov	r2, r0
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800e99a:	4b0d      	ldr	r3, [pc, #52]	; (800e9d0 <USBH_Init+0xac>)
 800e99c:	4a0d      	ldr	r2, [pc, #52]	; (800e9d4 <USBH_Init+0xb0>)
 800e99e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800e9a0:	4b0b      	ldr	r3, [pc, #44]	; (800e9d0 <USBH_Init+0xac>)
 800e9a2:	2280      	movs	r2, #128	; 0x80
 800e9a4:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800e9a6:	4b0a      	ldr	r3, [pc, #40]	; (800e9d0 <USBH_Init+0xac>)
 800e9a8:	2218      	movs	r2, #24
 800e9aa:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800e9ac:	4a08      	ldr	r2, [pc, #32]	; (800e9d0 <USBH_Init+0xac>)
 800e9ae:	68f9      	ldr	r1, [r7, #12]
 800e9b0:	4809      	ldr	r0, [pc, #36]	; (800e9d8 <USBH_Init+0xb4>)
 800e9b2:	f001 fdb3 	bl	801051c <osThreadNew>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f005 fc7a 	bl	80142b8 <USBH_LL_Init>

  return USBH_OK;
 800e9c4:	2300      	movs	r3, #0
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	200050fc 	.word	0x200050fc
 800e9d4:	0801544c 	.word	0x0801544c
 800e9d8:	0800f645 	.word	0x0800f645

0800e9dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	60fb      	str	r3, [r7, #12]
 800e9ec:	e009      	b.n	800ea02 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800e9ee:	687a      	ldr	r2, [r7, #4]
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	33e0      	adds	r3, #224	; 0xe0
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	60fb      	str	r3, [r7, #12]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b0e      	cmp	r3, #14
 800ea06:	d9f2      	bls.n	800e9ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ea08:	2300      	movs	r3, #0
 800ea0a:	60fb      	str	r3, [r7, #12]
 800ea0c:	e009      	b.n	800ea22 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	4413      	add	r3, r2
 800ea14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ea18:	2200      	movs	r2, #0
 800ea1a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	60fb      	str	r3, [r7, #12]
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea28:	d3f1      	bcc.n	800ea0e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2200      	movs	r2, #0
 800ea34:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2201      	movs	r2, #1
 800ea48:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2240      	movs	r2, #64	; 0x40
 800ea4e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr

0800ea84 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ea84:	b480      	push	{r7}
 800ea86:	b085      	sub	sp, #20
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d016      	beq.n	800eac6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d10e      	bne.n	800eac0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eaa8:	1c59      	adds	r1, r3, #1
 800eaaa:	687a      	ldr	r2, [r7, #4]
 800eaac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	33de      	adds	r3, #222	; 0xde
 800eab4:	6839      	ldr	r1, [r7, #0]
 800eab6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800eaba:	2300      	movs	r3, #0
 800eabc:	73fb      	strb	r3, [r7, #15]
 800eabe:	e004      	b.n	800eaca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800eac0:	2302      	movs	r3, #2
 800eac2:	73fb      	strb	r3, [r7, #15]
 800eac4:	e001      	b.n	800eaca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800eac6:	2302      	movs	r3, #2
 800eac8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eaca:	7bfb      	ldrb	r3, [r7, #15]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3714      	adds	r7, #20
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ead8:	b480      	push	{r7}
 800eada:	b085      	sub	sp, #20
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	460b      	mov	r3, r1
 800eae2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800eae4:	2300      	movs	r3, #0
 800eae6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800eaee:	78fa      	ldrb	r2, [r7, #3]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d204      	bcs.n	800eafe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	78fa      	ldrb	r2, [r7, #3]
 800eaf8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800eafc:	e001      	b.n	800eb02 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800eafe:	2302      	movs	r3, #2
 800eb00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3714      	adds	r7, #20
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr

0800eb10 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b087      	sub	sp, #28
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	4608      	mov	r0, r1
 800eb1a:	4611      	mov	r1, r2
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	4603      	mov	r3, r0
 800eb20:	70fb      	strb	r3, [r7, #3]
 800eb22:	460b      	mov	r3, r1
 800eb24:	70bb      	strb	r3, [r7, #2]
 800eb26:	4613      	mov	r3, r2
 800eb28:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800eb38:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eb3a:	e025      	b.n	800eb88 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800eb3c:	7dfb      	ldrb	r3, [r7, #23]
 800eb3e:	221a      	movs	r2, #26
 800eb40:	fb02 f303 	mul.w	r3, r2, r3
 800eb44:	3308      	adds	r3, #8
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	4413      	add	r3, r2
 800eb4a:	3302      	adds	r3, #2
 800eb4c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	795b      	ldrb	r3, [r3, #5]
 800eb52:	78fa      	ldrb	r2, [r7, #3]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d002      	beq.n	800eb5e <USBH_FindInterface+0x4e>
 800eb58:	78fb      	ldrb	r3, [r7, #3]
 800eb5a:	2bff      	cmp	r3, #255	; 0xff
 800eb5c:	d111      	bne.n	800eb82 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800eb62:	78ba      	ldrb	r2, [r7, #2]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d002      	beq.n	800eb6e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb68:	78bb      	ldrb	r3, [r7, #2]
 800eb6a:	2bff      	cmp	r3, #255	; 0xff
 800eb6c:	d109      	bne.n	800eb82 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eb6e:	693b      	ldr	r3, [r7, #16]
 800eb70:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eb72:	787a      	ldrb	r2, [r7, #1]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d002      	beq.n	800eb7e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eb78:	787b      	ldrb	r3, [r7, #1]
 800eb7a:	2bff      	cmp	r3, #255	; 0xff
 800eb7c:	d101      	bne.n	800eb82 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
 800eb80:	e006      	b.n	800eb90 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800eb82:	7dfb      	ldrb	r3, [r7, #23]
 800eb84:	3301      	adds	r3, #1
 800eb86:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800eb88:	7dfb      	ldrb	r3, [r7, #23]
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d9d6      	bls.n	800eb3c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800eb8e:	23ff      	movs	r3, #255	; 0xff
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	371c      	adds	r7, #28
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f005 fbc3 	bl	8014330 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800ebaa:	2101      	movs	r1, #1
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f005 fcda 	bl	8014566 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800ebb2:	2300      	movs	r3, #0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3708      	adds	r7, #8
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b088      	sub	sp, #32
 800ebc0:	af04      	add	r7, sp, #16
 800ebc2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800ebc4:	2302      	movs	r3, #2
 800ebc6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d102      	bne.n	800ebde <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2203      	movs	r2, #3
 800ebdc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	b2db      	uxtb	r3, r3
 800ebe4:	2b0b      	cmp	r3, #11
 800ebe6:	f200 823c 	bhi.w	800f062 <USBH_Process+0x4a6>
 800ebea:	a201      	add	r2, pc, #4	; (adr r2, 800ebf0 <USBH_Process+0x34>)
 800ebec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf0:	0800ec21 	.word	0x0800ec21
 800ebf4:	0800ec6f 	.word	0x0800ec6f
 800ebf8:	0800ecf3 	.word	0x0800ecf3
 800ebfc:	0800efe1 	.word	0x0800efe1
 800ec00:	0800f063 	.word	0x0800f063
 800ec04:	0800edb3 	.word	0x0800edb3
 800ec08:	0800ef6b 	.word	0x0800ef6b
 800ec0c:	0800ee05 	.word	0x0800ee05
 800ec10:	0800ee41 	.word	0x0800ee41
 800ec14:	0800ee7b 	.word	0x0800ee7b
 800ec18:	0800eec3 	.word	0x0800eec3
 800ec1c:	0800efc9 	.word	0x0800efc9
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800ec26:	b2db      	uxtb	r3, r3
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 821c 	beq.w	800f066 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2201      	movs	r2, #1
 800ec32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ec34:	20c8      	movs	r0, #200	; 0xc8
 800ec36:	f005 fce0 	bl	80145fa <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	f005 fbd3 	bl	80143e6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2201      	movs	r2, #1
 800ec54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ec64:	2300      	movs	r3, #0
 800ec66:	2200      	movs	r2, #0
 800ec68:	f002 f80e 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ec6c:	e1fb      	b.n	800f066 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d107      	bne.n	800ec88 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2202      	movs	r2, #2
 800ec84:	701a      	strb	r2, [r3, #0]
 800ec86:	e025      	b.n	800ecd4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ec8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ec92:	d914      	bls.n	800ecbe <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	b2da      	uxtb	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ecaa:	2b03      	cmp	r3, #3
 800ecac:	d903      	bls.n	800ecb6 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	220d      	movs	r2, #13
 800ecb2:	701a      	strb	r2, [r3, #0]
 800ecb4:	e00e      	b.n	800ecd4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	701a      	strb	r2, [r3, #0]
 800ecbc:	e00a      	b.n	800ecd4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ecc4:	f103 020a 	add.w	r2, r3, #10
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ecce:	200a      	movs	r0, #10
 800ecd0:	f005 fc93 	bl	80145fa <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ece8:	2300      	movs	r3, #0
 800ecea:	2200      	movs	r2, #0
 800ecec:	f001 ffcc 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      break;
 800ecf0:	e1c0      	b.n	800f074 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d005      	beq.n	800ed08 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ed02:	2104      	movs	r1, #4
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ed08:	2064      	movs	r0, #100	; 0x64
 800ed0a:	f005 fc76 	bl	80145fa <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f005 fb44 	bl	801439c <USBH_LL_GetSpeed>
 800ed14:	4603      	mov	r3, r0
 800ed16:	461a      	mov	r2, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2205      	movs	r2, #5
 800ed22:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ed24:	2100      	movs	r1, #0
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f001 fb23 	bl	8010372 <USBH_AllocPipe>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	461a      	mov	r2, r3
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800ed34:	2180      	movs	r1, #128	; 0x80
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f001 fb1b 	bl	8010372 <USBH_AllocPipe>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	461a      	mov	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	7919      	ldrb	r1, [r3, #4]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ed58:	b292      	uxth	r2, r2
 800ed5a:	9202      	str	r2, [sp, #8]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	9201      	str	r2, [sp, #4]
 800ed60:	9300      	str	r3, [sp, #0]
 800ed62:	4603      	mov	r3, r0
 800ed64:	2280      	movs	r2, #128	; 0x80
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f001 fad4 	bl	8010314 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	7959      	ldrb	r1, [r3, #5]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800ed80:	b292      	uxth	r2, r2
 800ed82:	9202      	str	r2, [sp, #8]
 800ed84:	2200      	movs	r2, #0
 800ed86:	9201      	str	r2, [sp, #4]
 800ed88:	9300      	str	r3, [sp, #0]
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f001 fac0 	bl	8010314 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eda8:	2300      	movs	r3, #0
 800edaa:	2200      	movs	r2, #0
 800edac:	f001 ff6c 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      break;
 800edb0:	e160      	b.n	800f074 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f000 f964 	bl	800f080 <USBH_HandleEnum>
 800edb8:	4603      	mov	r3, r0
 800edba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800edbc:	7bbb      	ldrb	r3, [r7, #14]
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	f040 8152 	bne.w	800f06a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800edd4:	2b01      	cmp	r3, #1
 800edd6:	d103      	bne.n	800ede0 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2208      	movs	r2, #8
 800eddc:	701a      	strb	r2, [r3, #0]
 800edde:	e002      	b.n	800ede6 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2207      	movs	r2, #7
 800ede4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2205      	movs	r2, #5
 800edea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800edfa:	2300      	movs	r3, #0
 800edfc:	2200      	movs	r2, #0
 800edfe:	f001 ff43 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800ee02:	e132      	b.n	800f06a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 812f 	beq.w	800f06e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ee16:	2101      	movs	r1, #1
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2208      	movs	r2, #8
 800ee20:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2205      	movs	r2, #5
 800ee26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee36:	2300      	movs	r3, #0
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f001 ff25 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800ee3e:	e116      	b.n	800f06e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	4619      	mov	r1, r3
 800ee4a:	6878      	ldr	r0, [r7, #4]
 800ee4c:	f000 fcf8 	bl	800f840 <USBH_SetCfg>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d102      	bne.n	800ee5c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2209      	movs	r2, #9
 800ee5a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2201      	movs	r2, #1
 800ee60:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ee70:	2300      	movs	r3, #0
 800ee72:	2200      	movs	r2, #0
 800ee74:	f001 ff08 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      break;
 800ee78:	e0fc      	b.n	800f074 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ee80:	f003 0320 	and.w	r3, r3, #32
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d00a      	beq.n	800ee9e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800ee88:	2101      	movs	r1, #1
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fcfb 	bl	800f886 <USBH_SetFeature>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d106      	bne.n	800eea4 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	220a      	movs	r2, #10
 800ee9a:	701a      	strb	r2, [r3, #0]
 800ee9c:	e002      	b.n	800eea4 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	220a      	movs	r2, #10
 800eea2:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2201      	movs	r2, #1
 800eea8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800eeb8:	2300      	movs	r3, #0
 800eeba:	2200      	movs	r2, #0
 800eebc:	f001 fee4 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      break;
 800eec0:	e0d8      	b.n	800f074 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d03f      	beq.n	800ef4c <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2200      	movs	r2, #0
 800eed0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800eed4:	2300      	movs	r3, #0
 800eed6:	73fb      	strb	r3, [r7, #15]
 800eed8:	e016      	b.n	800ef08 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800eeda:	7bfa      	ldrb	r2, [r7, #15]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	32de      	adds	r2, #222	; 0xde
 800eee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eee4:	791a      	ldrb	r2, [r3, #4]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800eeec:	429a      	cmp	r2, r3
 800eeee:	d108      	bne.n	800ef02 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800eef0:	7bfa      	ldrb	r2, [r7, #15]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	32de      	adds	r2, #222	; 0xde
 800eef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800ef00:	e005      	b.n	800ef0e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800ef02:	7bfb      	ldrb	r3, [r7, #15]
 800ef04:	3301      	adds	r3, #1
 800ef06:	73fb      	strb	r3, [r7, #15]
 800ef08:	7bfb      	ldrb	r3, [r7, #15]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d0e5      	beq.n	800eeda <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d016      	beq.n	800ef46 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	6878      	ldr	r0, [r7, #4]
 800ef22:	4798      	blx	r3
 800ef24:	4603      	mov	r3, r0
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d109      	bne.n	800ef3e <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2206      	movs	r2, #6
 800ef2e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef36:	2103      	movs	r1, #3
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	4798      	blx	r3
 800ef3c:	e006      	b.n	800ef4c <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	220d      	movs	r2, #13
 800ef42:	701a      	strb	r2, [r3, #0]
 800ef44:	e002      	b.n	800ef4c <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	220d      	movs	r2, #13
 800ef4a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2205      	movs	r2, #5
 800ef50:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ef60:	2300      	movs	r3, #0
 800ef62:	2200      	movs	r2, #0
 800ef64:	f001 fe90 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      break;
 800ef68:	e084      	b.n	800f074 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d017      	beq.n	800efa4 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	4798      	blx	r3
 800ef80:	4603      	mov	r3, r0
 800ef82:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d103      	bne.n	800ef94 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	220b      	movs	r2, #11
 800ef90:	701a      	strb	r2, [r3, #0]
 800ef92:	e00a      	b.n	800efaa <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800ef94:	7bbb      	ldrb	r3, [r7, #14]
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b02      	cmp	r3, #2
 800ef9a:	d106      	bne.n	800efaa <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	220d      	movs	r2, #13
 800efa0:	701a      	strb	r2, [r3, #0]
 800efa2:	e002      	b.n	800efaa <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	220d      	movs	r2, #13
 800efa8:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2205      	movs	r2, #5
 800efae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800efbe:	2300      	movs	r3, #0
 800efc0:	2200      	movs	r2, #0
 800efc2:	f001 fe61 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      break;
 800efc6:	e055      	b.n	800f074 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d04f      	beq.n	800f072 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800efd8:	695b      	ldr	r3, [r3, #20]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	4798      	blx	r3
      }
      break;
 800efde:	e048      	b.n	800f072 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7ff fcf7 	bl	800e9dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d009      	beq.n	800f00c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2200      	movs	r2, #0
 800f008:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f012:	2b00      	cmp	r3, #0
 800f014:	d005      	beq.n	800f022 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f01c:	2105      	movs	r1, #5
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d107      	bne.n	800f03e <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2200      	movs	r2, #0
 800f032:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7ff fdb0 	bl	800eb9c <USBH_Start>
 800f03c:	e002      	b.n	800f044 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f005 f976 	bl	8014330 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f058:	2300      	movs	r3, #0
 800f05a:	2200      	movs	r2, #0
 800f05c:	f001 fe14 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      break;
 800f060:	e008      	b.n	800f074 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800f062:	bf00      	nop
 800f064:	e006      	b.n	800f074 <USBH_Process+0x4b8>
      break;
 800f066:	bf00      	nop
 800f068:	e004      	b.n	800f074 <USBH_Process+0x4b8>
      break;
 800f06a:	bf00      	nop
 800f06c:	e002      	b.n	800f074 <USBH_Process+0x4b8>
    break;
 800f06e:	bf00      	nop
 800f070:	e000      	b.n	800f074 <USBH_Process+0x4b8>
      break;
 800f072:	bf00      	nop
  }
  return USBH_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop

0800f080 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b088      	sub	sp, #32
 800f084:	af04      	add	r7, sp, #16
 800f086:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f088:	2301      	movs	r3, #1
 800f08a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f08c:	2301      	movs	r3, #1
 800f08e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	785b      	ldrb	r3, [r3, #1]
 800f094:	2b07      	cmp	r3, #7
 800f096:	f200 8208 	bhi.w	800f4aa <USBH_HandleEnum+0x42a>
 800f09a:	a201      	add	r2, pc, #4	; (adr r2, 800f0a0 <USBH_HandleEnum+0x20>)
 800f09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a0:	0800f0c1 	.word	0x0800f0c1
 800f0a4:	0800f17f 	.word	0x0800f17f
 800f0a8:	0800f1e9 	.word	0x0800f1e9
 800f0ac:	0800f277 	.word	0x0800f277
 800f0b0:	0800f2e1 	.word	0x0800f2e1
 800f0b4:	0800f351 	.word	0x0800f351
 800f0b8:	0800f3ed 	.word	0x0800f3ed
 800f0bc:	0800f46b 	.word	0x0800f46b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f0c0:	2108      	movs	r1, #8
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 faec 	bl	800f6a0 <USBH_Get_DevDesc>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f0cc:	7bbb      	ldrb	r3, [r7, #14]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d130      	bne.n	800f134 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	7919      	ldrb	r1, [r3, #4]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f0f2:	687a      	ldr	r2, [r7, #4]
 800f0f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f0f6:	b292      	uxth	r2, r2
 800f0f8:	9202      	str	r2, [sp, #8]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	9201      	str	r2, [sp, #4]
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	4603      	mov	r3, r0
 800f102:	2280      	movs	r2, #128	; 0x80
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f001 f905 	bl	8010314 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	7959      	ldrb	r1, [r3, #5]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f11e:	b292      	uxth	r2, r2
 800f120:	9202      	str	r2, [sp, #8]
 800f122:	2200      	movs	r2, #0
 800f124:	9201      	str	r2, [sp, #4]
 800f126:	9300      	str	r3, [sp, #0]
 800f128:	4603      	mov	r3, r0
 800f12a:	2200      	movs	r2, #0
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f001 f8f1 	bl	8010314 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f132:	e1bc      	b.n	800f4ae <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f134:	7bbb      	ldrb	r3, [r7, #14]
 800f136:	2b03      	cmp	r3, #3
 800f138:	f040 81b9 	bne.w	800f4ae <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f142:	3301      	adds	r3, #1
 800f144:	b2da      	uxtb	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f152:	2b03      	cmp	r3, #3
 800f154:	d903      	bls.n	800f15e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	220d      	movs	r2, #13
 800f15a:	701a      	strb	r2, [r3, #0]
      break;
 800f15c:	e1a7      	b.n	800f4ae <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	795b      	ldrb	r3, [r3, #5]
 800f162:	4619      	mov	r1, r3
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f001 f925 	bl	80103b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	791b      	ldrb	r3, [r3, #4]
 800f16e:	4619      	mov	r1, r3
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f001 f91f 	bl	80103b4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2200      	movs	r2, #0
 800f17a:	701a      	strb	r2, [r3, #0]
      break;
 800f17c:	e197      	b.n	800f4ae <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f17e:	2112      	movs	r1, #18
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 fa8d 	bl	800f6a0 <USBH_Get_DevDesc>
 800f186:	4603      	mov	r3, r0
 800f188:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f18a:	7bbb      	ldrb	r3, [r7, #14]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d103      	bne.n	800f198 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2202      	movs	r2, #2
 800f194:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f196:	e18c      	b.n	800f4b2 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f198:	7bbb      	ldrb	r3, [r7, #14]
 800f19a:	2b03      	cmp	r3, #3
 800f19c:	f040 8189 	bne.w	800f4b2 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	b2da      	uxtb	r2, r3
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f1b6:	2b03      	cmp	r3, #3
 800f1b8:	d903      	bls.n	800f1c2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	220d      	movs	r2, #13
 800f1be:	701a      	strb	r2, [r3, #0]
      break;
 800f1c0:	e177      	b.n	800f4b2 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	795b      	ldrb	r3, [r3, #5]
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f001 f8f3 	bl	80103b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	791b      	ldrb	r3, [r3, #4]
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f001 f8ed 	bl	80103b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	701a      	strb	r2, [r3, #0]
      break;
 800f1e6:	e164      	b.n	800f4b2 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f1e8:	2101      	movs	r1, #1
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 fb04 	bl	800f7f8 <USBH_SetAddress>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f1f4:	7bbb      	ldrb	r3, [r7, #14]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d132      	bne.n	800f260 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800f1fa:	2002      	movs	r0, #2
 800f1fc:	f005 f9fd 	bl	80145fa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2201      	movs	r2, #1
 800f204:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2203      	movs	r2, #3
 800f20c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	7919      	ldrb	r1, [r3, #4]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f21e:	687a      	ldr	r2, [r7, #4]
 800f220:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f222:	b292      	uxth	r2, r2
 800f224:	9202      	str	r2, [sp, #8]
 800f226:	2200      	movs	r2, #0
 800f228:	9201      	str	r2, [sp, #4]
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	4603      	mov	r3, r0
 800f22e:	2280      	movs	r2, #128	; 0x80
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f001 f86f 	bl	8010314 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	7959      	ldrb	r1, [r3, #5]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800f246:	687a      	ldr	r2, [r7, #4]
 800f248:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f24a:	b292      	uxth	r2, r2
 800f24c:	9202      	str	r2, [sp, #8]
 800f24e:	2200      	movs	r2, #0
 800f250:	9201      	str	r2, [sp, #4]
 800f252:	9300      	str	r3, [sp, #0]
 800f254:	4603      	mov	r3, r0
 800f256:	2200      	movs	r2, #0
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f001 f85b 	bl	8010314 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f25e:	e12a      	b.n	800f4b6 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f260:	7bbb      	ldrb	r3, [r7, #14]
 800f262:	2b03      	cmp	r3, #3
 800f264:	f040 8127 	bne.w	800f4b6 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	220d      	movs	r2, #13
 800f26c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	705a      	strb	r2, [r3, #1]
      break;
 800f274:	e11f      	b.n	800f4b6 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f276:	2109      	movs	r1, #9
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fa39 	bl	800f6f0 <USBH_Get_CfgDesc>
 800f27e:	4603      	mov	r3, r0
 800f280:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f282:	7bbb      	ldrb	r3, [r7, #14]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d103      	bne.n	800f290 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2204      	movs	r2, #4
 800f28c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f28e:	e114      	b.n	800f4ba <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f290:	7bbb      	ldrb	r3, [r7, #14]
 800f292:	2b03      	cmp	r3, #3
 800f294:	f040 8111 	bne.w	800f4ba <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f29e:	3301      	adds	r3, #1
 800f2a0:	b2da      	uxtb	r2, r3
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f2ae:	2b03      	cmp	r3, #3
 800f2b0:	d903      	bls.n	800f2ba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	220d      	movs	r2, #13
 800f2b6:	701a      	strb	r2, [r3, #0]
      break;
 800f2b8:	e0ff      	b.n	800f4ba <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	795b      	ldrb	r3, [r3, #5]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f001 f877 	bl	80103b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	791b      	ldrb	r3, [r3, #4]
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f001 f871 	bl	80103b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	701a      	strb	r2, [r3, #0]
      break;
 800f2de:	e0ec      	b.n	800f4ba <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fa01 	bl	800f6f0 <USBH_Get_CfgDesc>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f2f2:	7bbb      	ldrb	r3, [r7, #14]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d103      	bne.n	800f300 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2205      	movs	r2, #5
 800f2fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f2fe:	e0de      	b.n	800f4be <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	2b03      	cmp	r3, #3
 800f304:	f040 80db 	bne.w	800f4be <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f30e:	3301      	adds	r3, #1
 800f310:	b2da      	uxtb	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d903      	bls.n	800f32a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	220d      	movs	r2, #13
 800f326:	701a      	strb	r2, [r3, #0]
      break;
 800f328:	e0c9      	b.n	800f4be <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	795b      	ldrb	r3, [r3, #5]
 800f32e:	4619      	mov	r1, r3
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f001 f83f 	bl	80103b4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	791b      	ldrb	r3, [r3, #4]
 800f33a:	4619      	mov	r1, r3
 800f33c:	6878      	ldr	r0, [r7, #4]
 800f33e:	f001 f839 	bl	80103b4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	2200      	movs	r2, #0
 800f346:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	701a      	strb	r2, [r3, #0]
      break;
 800f34e:	e0b6      	b.n	800f4be <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800f356:	2b00      	cmp	r3, #0
 800f358:	d036      	beq.n	800f3c8 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f366:	23ff      	movs	r3, #255	; 0xff
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 f9e5 	bl	800f738 <USBH_Get_StringDesc>
 800f36e:	4603      	mov	r3, r0
 800f370:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f372:	7bbb      	ldrb	r3, [r7, #14]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d111      	bne.n	800f39c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2206      	movs	r2, #6
 800f37c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2205      	movs	r2, #5
 800f382:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f392:	2300      	movs	r3, #0
 800f394:	2200      	movs	r2, #0
 800f396:	f001 fc77 	bl	8010c88 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f39a:	e092      	b.n	800f4c2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f39c:	7bbb      	ldrb	r3, [r7, #14]
 800f39e:	2b03      	cmp	r3, #3
 800f3a0:	f040 808f 	bne.w	800f4c2 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2206      	movs	r2, #6
 800f3a8:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2205      	movs	r2, #5
 800f3ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3be:	2300      	movs	r3, #0
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	f001 fc61 	bl	8010c88 <osMessageQueuePut>
      break;
 800f3c6:	e07c      	b.n	800f4c2 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2206      	movs	r2, #6
 800f3cc:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2205      	movs	r2, #5
 800f3d2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	f001 fc4f 	bl	8010c88 <osMessageQueuePut>
      break;
 800f3ea:	e06a      	b.n	800f4c2 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d027      	beq.n	800f446 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f402:	23ff      	movs	r3, #255	; 0xff
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 f997 	bl	800f738 <USBH_Get_StringDesc>
 800f40a:	4603      	mov	r3, r0
 800f40c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f40e:	7bbb      	ldrb	r3, [r7, #14]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d103      	bne.n	800f41c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2207      	movs	r2, #7
 800f418:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800f41a:	e054      	b.n	800f4c6 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f41c:	7bbb      	ldrb	r3, [r7, #14]
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d151      	bne.n	800f4c6 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2207      	movs	r2, #7
 800f426:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2205      	movs	r2, #5
 800f42c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f43c:	2300      	movs	r3, #0
 800f43e:	2200      	movs	r2, #0
 800f440:	f001 fc22 	bl	8010c88 <osMessageQueuePut>
      break;
 800f444:	e03f      	b.n	800f4c6 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2207      	movs	r2, #7
 800f44a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2205      	movs	r2, #5
 800f450:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f460:	2300      	movs	r3, #0
 800f462:	2200      	movs	r2, #0
 800f464:	f001 fc10 	bl	8010c88 <osMessageQueuePut>
      break;
 800f468:	e02d      	b.n	800f4c6 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800f470:	2b00      	cmp	r3, #0
 800f472:	d017      	beq.n	800f4a4 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f480:	23ff      	movs	r3, #255	; 0xff
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 f958 	bl	800f738 <USBH_Get_StringDesc>
 800f488:	4603      	mov	r3, r0
 800f48a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f48c:	7bbb      	ldrb	r3, [r7, #14]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d102      	bne.n	800f498 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f492:	2300      	movs	r3, #0
 800f494:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f496:	e018      	b.n	800f4ca <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f498:	7bbb      	ldrb	r3, [r7, #14]
 800f49a:	2b03      	cmp	r3, #3
 800f49c:	d115      	bne.n	800f4ca <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	73fb      	strb	r3, [r7, #15]
      break;
 800f4a2:	e012      	b.n	800f4ca <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	73fb      	strb	r3, [r7, #15]
      break;
 800f4a8:	e00f      	b.n	800f4ca <USBH_HandleEnum+0x44a>

    default:
      break;
 800f4aa:	bf00      	nop
 800f4ac:	e00e      	b.n	800f4cc <USBH_HandleEnum+0x44c>
      break;
 800f4ae:	bf00      	nop
 800f4b0:	e00c      	b.n	800f4cc <USBH_HandleEnum+0x44c>
      break;
 800f4b2:	bf00      	nop
 800f4b4:	e00a      	b.n	800f4cc <USBH_HandleEnum+0x44c>
      break;
 800f4b6:	bf00      	nop
 800f4b8:	e008      	b.n	800f4cc <USBH_HandleEnum+0x44c>
      break;
 800f4ba:	bf00      	nop
 800f4bc:	e006      	b.n	800f4cc <USBH_HandleEnum+0x44c>
      break;
 800f4be:	bf00      	nop
 800f4c0:	e004      	b.n	800f4cc <USBH_HandleEnum+0x44c>
      break;
 800f4c2:	bf00      	nop
 800f4c4:	e002      	b.n	800f4cc <USBH_HandleEnum+0x44c>
      break;
 800f4c6:	bf00      	nop
 800f4c8:	e000      	b.n	800f4cc <USBH_HandleEnum+0x44c>
      break;
 800f4ca:	bf00      	nop
  }
  return Status;
 800f4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	3710      	adds	r7, #16
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop

0800f4d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	683a      	ldr	r2, [r7, #0]
 800f4e6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800f4ea:	bf00      	nop
 800f4ec:	370c      	adds	r7, #12
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr

0800f4f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f4f6:	b580      	push	{r7, lr}
 800f4f8:	b082      	sub	sp, #8
 800f4fa:	af00      	add	r7, sp, #0
 800f4fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f504:	1c5a      	adds	r2, r3, #1
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f804 	bl	800f51a <USBH_HandleSof>
}
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b082      	sub	sp, #8
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	781b      	ldrb	r3, [r3, #0]
 800f526:	b2db      	uxtb	r3, r3
 800f528:	2b0b      	cmp	r3, #11
 800f52a:	d10a      	bne.n	800f542 <USBH_HandleSof+0x28>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f532:	2b00      	cmp	r3, #0
 800f534:	d005      	beq.n	800f542 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f53c:	699b      	ldr	r3, [r3, #24]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	4798      	blx	r3
  }
}
 800f542:	bf00      	nop
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}

0800f54a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f54a:	b580      	push	{r7, lr}
 800f54c:	b082      	sub	sp, #8
 800f54e:	af00      	add	r7, sp, #0
 800f550:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2201      	movs	r2, #1
 800f556:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2201      	movs	r2, #1
 800f55e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f56e:	2300      	movs	r3, #0
 800f570:	2200      	movs	r2, #0
 800f572:	f001 fb89 	bl	8010c88 <osMessageQueuePut>
#endif
#endif

  return;
 800f576:	bf00      	nop
}
 800f578:	3708      	adds	r7, #8
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}

0800f57e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f57e:	b480      	push	{r7}
 800f580:	b083      	sub	sp, #12
 800f582:	af00      	add	r7, sp, #0
 800f584:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800f58e:	bf00      	nop
}
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f59a:	b580      	push	{r7, lr}
 800f59c:	b082      	sub	sp, #8
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2201      	movs	r2, #1
 800f5a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f001 fb59 	bl	8010c88 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3708      	adds	r7, #8
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f004 feb0 	bl	8014366 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	791b      	ldrb	r3, [r3, #4]
 800f60a:	4619      	mov	r1, r3
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f000 fed1 	bl	80103b4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	795b      	ldrb	r3, [r3, #5]
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 fecb 	bl	80103b4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2201      	movs	r2, #1
 800f622:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f632:	2300      	movs	r3, #0
 800f634:	2200      	movs	r2, #0
 800f636:	f001 fb27 	bl	8010c88 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f658:	f04f 33ff 	mov.w	r3, #4294967295
 800f65c:	2200      	movs	r2, #0
 800f65e:	f001 fb87 	bl	8010d70 <osMessageQueueGet>
 800f662:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d1f0      	bne.n	800f64c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f7ff faa6 	bl	800ebbc <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800f670:	e7ec      	b.n	800f64c <USBH_Process_OS+0x8>

0800f672 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800f672:	b580      	push	{r7, lr}
 800f674:	b082      	sub	sp, #8
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2201      	movs	r2, #1
 800f67e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800f68e:	2300      	movs	r3, #0
 800f690:	2200      	movs	r2, #0
 800f692:	f001 faf9 	bl	8010c88 <osMessageQueuePut>
#endif

  return USBH_OK;
 800f696:	2300      	movs	r3, #0
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b086      	sub	sp, #24
 800f6a4:	af02      	add	r7, sp, #8
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f6b2:	78fb      	ldrb	r3, [r7, #3]
 800f6b4:	b29b      	uxth	r3, r3
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	4613      	mov	r3, r2
 800f6ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f6be:	2100      	movs	r1, #0
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f000 f864 	bl	800f78e <USBH_GetDescriptor>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	73fb      	strb	r3, [r7, #15]
 800f6ca:	7bfb      	ldrb	r3, [r7, #15]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10a      	bne.n	800f6e6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f6dc:	78fa      	ldrb	r2, [r7, #3]
 800f6de:	b292      	uxth	r2, r2
 800f6e0:	4619      	mov	r1, r3
 800f6e2:	f000 f918 	bl	800f916 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800f6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	3710      	adds	r7, #16
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}

0800f6f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b086      	sub	sp, #24
 800f6f4:	af02      	add	r7, sp, #8
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	460b      	mov	r3, r1
 800f6fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	331c      	adds	r3, #28
 800f700:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f702:	887b      	ldrh	r3, [r7, #2]
 800f704:	9300      	str	r3, [sp, #0]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f70c:	2100      	movs	r1, #0
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 f83d 	bl	800f78e <USBH_GetDescriptor>
 800f714:	4603      	mov	r3, r0
 800f716:	72fb      	strb	r3, [r7, #11]
 800f718:	7afb      	ldrb	r3, [r7, #11]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d107      	bne.n	800f72e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f724:	887a      	ldrh	r2, [r7, #2]
 800f726:	68f9      	ldr	r1, [r7, #12]
 800f728:	4618      	mov	r0, r3
 800f72a:	f000 f964 	bl	800f9f6 <USBH_ParseCfgDesc>
  }

  return status;
 800f72e:	7afb      	ldrb	r3, [r7, #11]
}
 800f730:	4618      	mov	r0, r3
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b088      	sub	sp, #32
 800f73c:	af02      	add	r7, sp, #8
 800f73e:	60f8      	str	r0, [r7, #12]
 800f740:	607a      	str	r2, [r7, #4]
 800f742:	461a      	mov	r2, r3
 800f744:	460b      	mov	r3, r1
 800f746:	72fb      	strb	r3, [r7, #11]
 800f748:	4613      	mov	r3, r2
 800f74a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800f74c:	7afb      	ldrb	r3, [r7, #11]
 800f74e:	b29b      	uxth	r3, r3
 800f750:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f754:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800f75c:	893b      	ldrh	r3, [r7, #8]
 800f75e:	9300      	str	r3, [sp, #0]
 800f760:	460b      	mov	r3, r1
 800f762:	2100      	movs	r1, #0
 800f764:	68f8      	ldr	r0, [r7, #12]
 800f766:	f000 f812 	bl	800f78e <USBH_GetDescriptor>
 800f76a:	4603      	mov	r3, r0
 800f76c:	75fb      	strb	r3, [r7, #23]
 800f76e:	7dfb      	ldrb	r3, [r7, #23]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d107      	bne.n	800f784 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f77a:	893a      	ldrh	r2, [r7, #8]
 800f77c:	6879      	ldr	r1, [r7, #4]
 800f77e:	4618      	mov	r0, r3
 800f780:	f000 fa37 	bl	800fbf2 <USBH_ParseStringDesc>
  }

  return status;
 800f784:	7dfb      	ldrb	r3, [r7, #23]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3718      	adds	r7, #24
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b084      	sub	sp, #16
 800f792:	af00      	add	r7, sp, #0
 800f794:	60f8      	str	r0, [r7, #12]
 800f796:	607b      	str	r3, [r7, #4]
 800f798:	460b      	mov	r3, r1
 800f79a:	72fb      	strb	r3, [r7, #11]
 800f79c:	4613      	mov	r3, r2
 800f79e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	789b      	ldrb	r3, [r3, #2]
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d11c      	bne.n	800f7e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800f7a8:	7afb      	ldrb	r3, [r7, #11]
 800f7aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f7ae:	b2da      	uxtb	r2, r3
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2206      	movs	r2, #6
 800f7b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	893a      	ldrh	r2, [r7, #8]
 800f7be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800f7c0:	893b      	ldrh	r3, [r7, #8]
 800f7c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f7c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f7ca:	d104      	bne.n	800f7d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f240 4209 	movw	r2, #1033	; 0x409
 800f7d2:	829a      	strh	r2, [r3, #20]
 800f7d4:	e002      	b.n	800f7dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	8b3a      	ldrh	r2, [r7, #24]
 800f7e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800f7e2:	8b3b      	ldrh	r3, [r7, #24]
 800f7e4:	461a      	mov	r2, r3
 800f7e6:	6879      	ldr	r1, [r7, #4]
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f000 fa50 	bl	800fc8e <USBH_CtlReq>
 800f7ee:	4603      	mov	r3, r0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b082      	sub	sp, #8
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	460b      	mov	r3, r1
 800f802:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	789b      	ldrb	r3, [r3, #2]
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d10f      	bne.n	800f82c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	2205      	movs	r2, #5
 800f816:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800f818:	78fb      	ldrb	r3, [r7, #3]
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2200      	movs	r2, #0
 800f824:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2200      	movs	r2, #0
 800f82a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f82c:	2200      	movs	r2, #0
 800f82e:	2100      	movs	r1, #0
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f000 fa2c 	bl	800fc8e <USBH_CtlReq>
 800f836:	4603      	mov	r3, r0
}
 800f838:	4618      	mov	r0, r3
 800f83a:	3708      	adds	r7, #8
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b082      	sub	sp, #8
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	460b      	mov	r3, r1
 800f84a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	789b      	ldrb	r3, [r3, #2]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d10e      	bne.n	800f872 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2200      	movs	r2, #0
 800f858:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2209      	movs	r2, #9
 800f85e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	887a      	ldrh	r2, [r7, #2]
 800f864:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2200      	movs	r2, #0
 800f86a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2200      	movs	r2, #0
 800f870:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f872:	2200      	movs	r2, #0
 800f874:	2100      	movs	r1, #0
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 fa09 	bl	800fc8e <USBH_CtlReq>
 800f87c:	4603      	mov	r3, r0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b082      	sub	sp, #8
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	460b      	mov	r3, r1
 800f890:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	789b      	ldrb	r3, [r3, #2]
 800f896:	2b01      	cmp	r3, #1
 800f898:	d10f      	bne.n	800f8ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2203      	movs	r2, #3
 800f8a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800f8a6:	78fb      	ldrb	r3, [r7, #3]
 800f8a8:	b29a      	uxth	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	2100      	movs	r1, #0
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f9e5 	bl	800fc8e <USBH_CtlReq>
 800f8c4:	4603      	mov	r3, r0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3708      	adds	r7, #8
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b082      	sub	sp, #8
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	789b      	ldrb	r3, [r3, #2]
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d10f      	bne.n	800f902 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2202      	movs	r2, #2
 800f8e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800f8f4:	78fb      	ldrb	r3, [r7, #3]
 800f8f6:	b29a      	uxth	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800f902:	2200      	movs	r2, #0
 800f904:	2100      	movs	r1, #0
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 f9c1 	bl	800fc8e <USBH_CtlReq>
 800f90c:	4603      	mov	r3, r0
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3708      	adds	r7, #8
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800f916:	b480      	push	{r7}
 800f918:	b085      	sub	sp, #20
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	60f8      	str	r0, [r7, #12]
 800f91e:	60b9      	str	r1, [r7, #8]
 800f920:	4613      	mov	r3, r2
 800f922:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	781a      	ldrb	r2, [r3, #0]
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	785a      	ldrb	r2, [r3, #1]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	3302      	adds	r3, #2
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	b29a      	uxth	r2, r3
 800f93c:	68bb      	ldr	r3, [r7, #8]
 800f93e:	3303      	adds	r3, #3
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	b29b      	uxth	r3, r3
 800f944:	021b      	lsls	r3, r3, #8
 800f946:	b29b      	uxth	r3, r3
 800f948:	4313      	orrs	r3, r2
 800f94a:	b29a      	uxth	r2, r3
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	791a      	ldrb	r2, [r3, #4]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	795a      	ldrb	r2, [r3, #5]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	799a      	ldrb	r2, [r3, #6]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	79da      	ldrb	r2, [r3, #7]
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800f970:	88fb      	ldrh	r3, [r7, #6]
 800f972:	2b08      	cmp	r3, #8
 800f974:	d939      	bls.n	800f9ea <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	3308      	adds	r3, #8
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	b29a      	uxth	r2, r3
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	3309      	adds	r3, #9
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	b29b      	uxth	r3, r3
 800f986:	021b      	lsls	r3, r3, #8
 800f988:	b29b      	uxth	r3, r3
 800f98a:	4313      	orrs	r3, r2
 800f98c:	b29a      	uxth	r2, r3
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	330a      	adds	r3, #10
 800f996:	781b      	ldrb	r3, [r3, #0]
 800f998:	b29a      	uxth	r2, r3
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	330b      	adds	r3, #11
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	b29b      	uxth	r3, r3
 800f9a2:	021b      	lsls	r3, r3, #8
 800f9a4:	b29b      	uxth	r3, r3
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	330c      	adds	r3, #12
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	b29a      	uxth	r2, r3
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	330d      	adds	r3, #13
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	021b      	lsls	r3, r3, #8
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	4313      	orrs	r3, r2
 800f9c4:	b29a      	uxth	r2, r3
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800f9ca:	68bb      	ldr	r3, [r7, #8]
 800f9cc:	7b9a      	ldrb	r2, [r3, #14]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	7bda      	ldrb	r2, [r3, #15]
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	7c1a      	ldrb	r2, [r3, #16]
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800f9e2:	68bb      	ldr	r3, [r7, #8]
 800f9e4:	7c5a      	ldrb	r2, [r3, #17]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	745a      	strb	r2, [r3, #17]
  }
}
 800f9ea:	bf00      	nop
 800f9ec:	3714      	adds	r7, #20
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b08a      	sub	sp, #40	; 0x28
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	60f8      	str	r0, [r7, #12]
 800f9fe:	60b9      	str	r1, [r7, #8]
 800fa00:	4613      	mov	r3, r2
 800fa02:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	781a      	ldrb	r2, [r3, #0]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	785a      	ldrb	r2, [r3, #1]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	3302      	adds	r3, #2
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	3303      	adds	r3, #3
 800fa34:	781b      	ldrb	r3, [r3, #0]
 800fa36:	b29b      	uxth	r3, r3
 800fa38:	021b      	lsls	r3, r3, #8
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	791a      	ldrb	r2, [r3, #4]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	795a      	ldrb	r2, [r3, #5]
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	799a      	ldrb	r2, [r3, #6]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	79da      	ldrb	r2, [r3, #7]
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	7a1a      	ldrb	r2, [r3, #8]
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fa6c:	88fb      	ldrh	r3, [r7, #6]
 800fa6e:	2b09      	cmp	r3, #9
 800fa70:	d95f      	bls.n	800fb32 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800fa72:	2309      	movs	r3, #9
 800fa74:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fa7a:	e051      	b.n	800fb20 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fa7c:	f107 0316 	add.w	r3, r7, #22
 800fa80:	4619      	mov	r1, r3
 800fa82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa84:	f000 f8e8 	bl	800fc58 <USBH_GetNextDesc>
 800fa88:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8c:	785b      	ldrb	r3, [r3, #1]
 800fa8e:	2b04      	cmp	r3, #4
 800fa90:	d146      	bne.n	800fb20 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800fa92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fa96:	221a      	movs	r2, #26
 800fa98:	fb02 f303 	mul.w	r3, r2, r3
 800fa9c:	3308      	adds	r3, #8
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	4413      	add	r3, r2
 800faa2:	3302      	adds	r3, #2
 800faa4:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800faa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faa8:	69f8      	ldr	r0, [r7, #28]
 800faaa:	f000 f846 	bl	800fb3a <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800faae:	2300      	movs	r3, #0
 800fab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800fab4:	2300      	movs	r3, #0
 800fab6:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fab8:	e022      	b.n	800fb00 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800faba:	f107 0316 	add.w	r3, r7, #22
 800fabe:	4619      	mov	r1, r3
 800fac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fac2:	f000 f8c9 	bl	800fc58 <USBH_GetNextDesc>
 800fac6:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800fac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faca:	785b      	ldrb	r3, [r3, #1]
 800facc:	2b05      	cmp	r3, #5
 800face:	d117      	bne.n	800fb00 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fad4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fad8:	3201      	adds	r2, #1
 800fada:	00d2      	lsls	r2, r2, #3
 800fadc:	211a      	movs	r1, #26
 800fade:	fb01 f303 	mul.w	r3, r1, r3
 800fae2:	4413      	add	r3, r2
 800fae4:	3308      	adds	r3, #8
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	4413      	add	r3, r2
 800faea:	3304      	adds	r3, #4
 800faec:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800faee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800faf0:	69b8      	ldr	r0, [r7, #24]
 800faf2:	f000 f851 	bl	800fb98 <USBH_ParseEPDesc>
            ep_ix++;
 800faf6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fafa:	3301      	adds	r3, #1
 800fafc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	791b      	ldrb	r3, [r3, #4]
 800fb04:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d204      	bcs.n	800fb16 <USBH_ParseCfgDesc+0x120>
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	885a      	ldrh	r2, [r3, #2]
 800fb10:	8afb      	ldrh	r3, [r7, #22]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d8d1      	bhi.n	800faba <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800fb16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fb20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d804      	bhi.n	800fb32 <USBH_ParseCfgDesc+0x13c>
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	885a      	ldrh	r2, [r3, #2]
 800fb2c:	8afb      	ldrh	r3, [r7, #22]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d8a4      	bhi.n	800fa7c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800fb32:	bf00      	nop
 800fb34:	3728      	adds	r7, #40	; 0x28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800fb3a:	b480      	push	{r7}
 800fb3c:	b083      	sub	sp, #12
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	6078      	str	r0, [r7, #4]
 800fb42:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	781a      	ldrb	r2, [r3, #0]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	785a      	ldrb	r2, [r3, #1]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	789a      	ldrb	r2, [r3, #2]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	78da      	ldrb	r2, [r3, #3]
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	791a      	ldrb	r2, [r3, #4]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	795a      	ldrb	r2, [r3, #5]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	799a      	ldrb	r2, [r3, #6]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800fb7c:	683b      	ldr	r3, [r7, #0]
 800fb7e:	79da      	ldrb	r2, [r3, #7]
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	7a1a      	ldrb	r2, [r3, #8]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	721a      	strb	r2, [r3, #8]
}
 800fb8c:	bf00      	nop
 800fb8e:	370c      	adds	r7, #12
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b083      	sub	sp, #12
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	781a      	ldrb	r2, [r3, #0]
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	785a      	ldrb	r2, [r3, #1]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	789a      	ldrb	r2, [r3, #2]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	78da      	ldrb	r2, [r3, #3]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	3304      	adds	r3, #4
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	b29a      	uxth	r2, r3
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	3305      	adds	r3, #5
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	b29b      	uxth	r3, r3
 800fbd2:	021b      	lsls	r3, r3, #8
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	799a      	ldrb	r2, [r3, #6]
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	719a      	strb	r2, [r3, #6]
}
 800fbe6:	bf00      	nop
 800fbe8:	370c      	adds	r7, #12
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b087      	sub	sp, #28
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	60f8      	str	r0, [r7, #12]
 800fbfa:	60b9      	str	r1, [r7, #8]
 800fbfc:	4613      	mov	r3, r2
 800fbfe:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	3301      	adds	r3, #1
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	2b03      	cmp	r3, #3
 800fc08:	d120      	bne.n	800fc4c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	1e9a      	subs	r2, r3, #2
 800fc10:	88fb      	ldrh	r3, [r7, #6]
 800fc12:	4293      	cmp	r3, r2
 800fc14:	bf28      	it	cs
 800fc16:	4613      	movcs	r3, r2
 800fc18:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	3302      	adds	r3, #2
 800fc1e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800fc20:	2300      	movs	r3, #0
 800fc22:	82fb      	strh	r3, [r7, #22]
 800fc24:	e00b      	b.n	800fc3e <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800fc26:	8afb      	ldrh	r3, [r7, #22]
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	781a      	ldrb	r2, [r3, #0]
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	701a      	strb	r2, [r3, #0]
      pdest++;
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	3301      	adds	r3, #1
 800fc36:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800fc38:	8afb      	ldrh	r3, [r7, #22]
 800fc3a:	3302      	adds	r3, #2
 800fc3c:	82fb      	strh	r3, [r7, #22]
 800fc3e:	8afa      	ldrh	r2, [r7, #22]
 800fc40:	8abb      	ldrh	r3, [r7, #20]
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d3ef      	bcc.n	800fc26 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	701a      	strb	r2, [r3, #0]
  }
}
 800fc4c:	bf00      	nop
 800fc4e:	371c      	adds	r7, #28
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr

0800fc58 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b085      	sub	sp, #20
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	881a      	ldrh	r2, [r3, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	4413      	add	r3, r2
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4413      	add	r3, r2
 800fc7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800fc80:	68fb      	ldr	r3, [r7, #12]
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3714      	adds	r7, #20
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr

0800fc8e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b086      	sub	sp, #24
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	60f8      	str	r0, [r7, #12]
 800fc96:	60b9      	str	r1, [r7, #8]
 800fc98:	4613      	mov	r3, r2
 800fc9a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	789b      	ldrb	r3, [r3, #2]
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d002      	beq.n	800fcae <USBH_CtlReq+0x20>
 800fca8:	2b02      	cmp	r3, #2
 800fcaa:	d01d      	beq.n	800fce8 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800fcac:	e043      	b.n	800fd36 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	88fa      	ldrh	r2, [r7, #6]
 800fcb8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2201      	movs	r2, #1
 800fcbe:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2203      	movs	r2, #3
 800fcce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fcde:	2300      	movs	r3, #0
 800fce0:	2200      	movs	r2, #0
 800fce2:	f000 ffd1 	bl	8010c88 <osMessageQueuePut>
      break;
 800fce6:	e026      	b.n	800fd36 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800fce8:	68f8      	ldr	r0, [r7, #12]
 800fcea:	f000 f829 	bl	800fd40 <USBH_HandleControl>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800fcf2:	7dfb      	ldrb	r3, [r7, #23]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d002      	beq.n	800fcfe <USBH_CtlReq+0x70>
 800fcf8:	7dfb      	ldrb	r3, [r7, #23]
 800fcfa:	2b03      	cmp	r3, #3
 800fcfc:	d106      	bne.n	800fd0c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2201      	movs	r2, #1
 800fd02:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2200      	movs	r2, #0
 800fd08:	761a      	strb	r2, [r3, #24]
 800fd0a:	e005      	b.n	800fd18 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800fd0c:	7dfb      	ldrb	r3, [r7, #23]
 800fd0e:	2b02      	cmp	r3, #2
 800fd10:	d102      	bne.n	800fd18 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2201      	movs	r2, #1
 800fd16:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2203      	movs	r2, #3
 800fd1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f000 ffaa 	bl	8010c88 <osMessageQueuePut>
      break;
 800fd34:	bf00      	nop
  }
  return status;
 800fd36:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3718      	adds	r7, #24
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	bd80      	pop	{r7, pc}

0800fd40 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af02      	add	r7, sp, #8
 800fd46:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800fd48:	2301      	movs	r3, #1
 800fd4a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	7e1b      	ldrb	r3, [r3, #24]
 800fd54:	3b01      	subs	r3, #1
 800fd56:	2b0a      	cmp	r3, #10
 800fd58:	f200 822b 	bhi.w	80101b2 <USBH_HandleControl+0x472>
 800fd5c:	a201      	add	r2, pc, #4	; (adr r2, 800fd64 <USBH_HandleControl+0x24>)
 800fd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd62:	bf00      	nop
 800fd64:	0800fd91 	.word	0x0800fd91
 800fd68:	0800fdab 	.word	0x0800fdab
 800fd6c:	0800fe4d 	.word	0x0800fe4d
 800fd70:	0800fe73 	.word	0x0800fe73
 800fd74:	0800feff 	.word	0x0800feff
 800fd78:	0800ff2b 	.word	0x0800ff2b
 800fd7c:	0800ffed 	.word	0x0800ffed
 800fd80:	0801000f 	.word	0x0801000f
 800fd84:	080100a1 	.word	0x080100a1
 800fd88:	080100c9 	.word	0x080100c9
 800fd8c:	0801015b 	.word	0x0801015b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f103 0110 	add.w	r1, r3, #16
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	795b      	ldrb	r3, [r3, #5]
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f000 fa19 	bl	80101d4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2202      	movs	r2, #2
 800fda6:	761a      	strb	r2, [r3, #24]
      break;
 800fda8:	e20e      	b.n	80101c8 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	795b      	ldrb	r3, [r3, #5]
 800fdae:	4619      	mov	r1, r3
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f004 fbc5 	bl	8014540 <USBH_LL_GetURBState>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800fdba:	7bbb      	ldrb	r3, [r7, #14]
 800fdbc:	2b01      	cmp	r3, #1
 800fdbe:	d12c      	bne.n	800fe1a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	7c1b      	ldrb	r3, [r3, #16]
 800fdc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fdc8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	8adb      	ldrh	r3, [r3, #22]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d00a      	beq.n	800fde8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800fdd2:	7b7b      	ldrb	r3, [r7, #13]
 800fdd4:	2b80      	cmp	r3, #128	; 0x80
 800fdd6:	d103      	bne.n	800fde0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2203      	movs	r2, #3
 800fddc:	761a      	strb	r2, [r3, #24]
 800fdde:	e00d      	b.n	800fdfc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2205      	movs	r2, #5
 800fde4:	761a      	strb	r2, [r3, #24]
 800fde6:	e009      	b.n	800fdfc <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800fde8:	7b7b      	ldrb	r3, [r7, #13]
 800fdea:	2b80      	cmp	r3, #128	; 0x80
 800fdec:	d103      	bne.n	800fdf6 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2209      	movs	r2, #9
 800fdf2:	761a      	strb	r2, [r3, #24]
 800fdf4:	e002      	b.n	800fdfc <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2207      	movs	r2, #7
 800fdfa:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2203      	movs	r2, #3
 800fe00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fe10:	2300      	movs	r3, #0
 800fe12:	2200      	movs	r2, #0
 800fe14:	f000 ff38 	bl	8010c88 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fe18:	e1cd      	b.n	80101b6 <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800fe1a:	7bbb      	ldrb	r3, [r7, #14]
 800fe1c:	2b04      	cmp	r3, #4
 800fe1e:	d003      	beq.n	800fe28 <USBH_HandleControl+0xe8>
 800fe20:	7bbb      	ldrb	r3, [r7, #14]
 800fe22:	2b02      	cmp	r3, #2
 800fe24:	f040 81c7 	bne.w	80101b6 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	220b      	movs	r2, #11
 800fe2c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2203      	movs	r2, #3
 800fe32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fe42:	2300      	movs	r3, #0
 800fe44:	2200      	movs	r2, #0
 800fe46:	f000 ff1f 	bl	8010c88 <osMessageQueuePut>
      break;
 800fe4a:	e1b4      	b.n	80101b6 <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6899      	ldr	r1, [r3, #8]
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	899a      	ldrh	r2, [r3, #12]
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	791b      	ldrb	r3, [r3, #4]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f000 f9f4 	bl	8010252 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2204      	movs	r2, #4
 800fe6e:	761a      	strb	r2, [r3, #24]
      break;
 800fe70:	e1aa      	b.n	80101c8 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	791b      	ldrb	r3, [r3, #4]
 800fe76:	4619      	mov	r1, r3
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f004 fb61 	bl	8014540 <USBH_LL_GetURBState>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800fe82:	7bbb      	ldrb	r3, [r7, #14]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	d110      	bne.n	800feaa <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2209      	movs	r2, #9
 800fe8c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	2203      	movs	r2, #3
 800fe92:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fea2:	2300      	movs	r3, #0
 800fea4:	2200      	movs	r2, #0
 800fea6:	f000 feef 	bl	8010c88 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800feaa:	7bbb      	ldrb	r3, [r7, #14]
 800feac:	2b05      	cmp	r3, #5
 800feae:	d110      	bne.n	800fed2 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800feb0:	2303      	movs	r3, #3
 800feb2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2203      	movs	r2, #3
 800feb8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fec8:	2300      	movs	r3, #0
 800feca:	2200      	movs	r2, #0
 800fecc:	f000 fedc 	bl	8010c88 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800fed0:	e173      	b.n	80101ba <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800fed2:	7bbb      	ldrb	r3, [r7, #14]
 800fed4:	2b04      	cmp	r3, #4
 800fed6:	f040 8170 	bne.w	80101ba <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	220b      	movs	r2, #11
 800fede:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2203      	movs	r2, #3
 800fee4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800fef4:	2300      	movs	r3, #0
 800fef6:	2200      	movs	r2, #0
 800fef8:	f000 fec6 	bl	8010c88 <osMessageQueuePut>
      break;
 800fefc:	e15d      	b.n	80101ba <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	6899      	ldr	r1, [r3, #8]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	899a      	ldrh	r2, [r3, #12]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	7958      	ldrb	r0, [r3, #5]
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	9300      	str	r3, [sp, #0]
 800ff0e:	4603      	mov	r3, r0
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 f979 	bl	8010208 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ff1c:	b29a      	uxth	r2, r3
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2206      	movs	r2, #6
 800ff26:	761a      	strb	r2, [r3, #24]
      break;
 800ff28:	e14e      	b.n	80101c8 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	795b      	ldrb	r3, [r3, #5]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f004 fb05 	bl	8014540 <USBH_LL_GetURBState>
 800ff36:	4603      	mov	r3, r0
 800ff38:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ff3a:	7bbb      	ldrb	r3, [r7, #14]
 800ff3c:	2b01      	cmp	r3, #1
 800ff3e:	d111      	bne.n	800ff64 <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2207      	movs	r2, #7
 800ff44:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2203      	movs	r2, #3
 800ff4a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f000 fe93 	bl	8010c88 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ff62:	e12c      	b.n	80101be <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
 800ff66:	2b05      	cmp	r3, #5
 800ff68:	d113      	bne.n	800ff92 <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	220c      	movs	r2, #12
 800ff6e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ff70:	2303      	movs	r3, #3
 800ff72:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	2203      	movs	r2, #3
 800ff78:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ff88:	2300      	movs	r3, #0
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f000 fe7c 	bl	8010c88 <osMessageQueuePut>
      break;
 800ff90:	e115      	b.n	80101be <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ff92:	7bbb      	ldrb	r3, [r7, #14]
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d111      	bne.n	800ffbc <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2205      	movs	r2, #5
 800ff9c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2203      	movs	r2, #3
 800ffa2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	f000 fe67 	bl	8010c88 <osMessageQueuePut>
      break;
 800ffba:	e100      	b.n	80101be <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800ffbc:	7bbb      	ldrb	r3, [r7, #14]
 800ffbe:	2b04      	cmp	r3, #4
 800ffc0:	f040 80fd 	bne.w	80101be <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	220b      	movs	r2, #11
 800ffc8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ffca:	2302      	movs	r3, #2
 800ffcc:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2203      	movs	r2, #3
 800ffd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	f000 fe4f 	bl	8010c88 <osMessageQueuePut>
      break;
 800ffea:	e0e8      	b.n	80101be <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	791b      	ldrb	r3, [r3, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	2100      	movs	r1, #0
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f000 f92c 	bl	8010252 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010000:	b29a      	uxth	r2, r3
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2208      	movs	r2, #8
 801000a:	761a      	strb	r2, [r3, #24]

      break;
 801000c:	e0dc      	b.n	80101c8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	791b      	ldrb	r3, [r3, #4]
 8010012:	4619      	mov	r1, r3
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f004 fa93 	bl	8014540 <USBH_LL_GetURBState>
 801001a:	4603      	mov	r3, r0
 801001c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801001e:	7bbb      	ldrb	r3, [r7, #14]
 8010020:	2b01      	cmp	r3, #1
 8010022:	d113      	bne.n	801004c <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	220d      	movs	r2, #13
 8010028:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801002a:	2300      	movs	r3, #0
 801002c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	2203      	movs	r2, #3
 8010032:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010042:	2300      	movs	r3, #0
 8010044:	2200      	movs	r2, #0
 8010046:	f000 fe1f 	bl	8010c88 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 801004a:	e0ba      	b.n	80101c2 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 801004c:	7bbb      	ldrb	r3, [r7, #14]
 801004e:	2b04      	cmp	r3, #4
 8010050:	d111      	bne.n	8010076 <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	220b      	movs	r2, #11
 8010056:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2203      	movs	r2, #3
 801005c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 801006c:	2300      	movs	r3, #0
 801006e:	2200      	movs	r2, #0
 8010070:	f000 fe0a 	bl	8010c88 <osMessageQueuePut>
      break;
 8010074:	e0a5      	b.n	80101c2 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 8010076:	7bbb      	ldrb	r3, [r7, #14]
 8010078:	2b05      	cmp	r3, #5
 801007a:	f040 80a2 	bne.w	80101c2 <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 801007e:	2303      	movs	r3, #3
 8010080:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2203      	movs	r2, #3
 8010086:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010096:	2300      	movs	r3, #0
 8010098:	2200      	movs	r2, #0
 801009a:	f000 fdf5 	bl	8010c88 <osMessageQueuePut>
      break;
 801009e:	e090      	b.n	80101c2 <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	795a      	ldrb	r2, [r3, #5]
 80100a4:	2301      	movs	r3, #1
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	4613      	mov	r3, r2
 80100aa:	2200      	movs	r2, #0
 80100ac:	2100      	movs	r1, #0
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f8aa 	bl	8010208 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	220a      	movs	r2, #10
 80100c4:	761a      	strb	r2, [r3, #24]
      break;
 80100c6:	e07f      	b.n	80101c8 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	795b      	ldrb	r3, [r3, #5]
 80100cc:	4619      	mov	r1, r3
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f004 fa36 	bl	8014540 <USBH_LL_GetURBState>
 80100d4:	4603      	mov	r3, r0
 80100d6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80100d8:	7bbb      	ldrb	r3, [r7, #14]
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d113      	bne.n	8010106 <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	220d      	movs	r2, #13
 80100e6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2203      	movs	r2, #3
 80100ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 80100fc:	2300      	movs	r3, #0
 80100fe:	2200      	movs	r2, #0
 8010100:	f000 fdc2 	bl	8010c88 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8010104:	e05f      	b.n	80101c6 <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010106:	7bbb      	ldrb	r3, [r7, #14]
 8010108:	2b02      	cmp	r3, #2
 801010a:	d111      	bne.n	8010130 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2209      	movs	r2, #9
 8010110:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2203      	movs	r2, #3
 8010116:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010126:	2300      	movs	r3, #0
 8010128:	2200      	movs	r2, #0
 801012a:	f000 fdad 	bl	8010c88 <osMessageQueuePut>
      break;
 801012e:	e04a      	b.n	80101c6 <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 8010130:	7bbb      	ldrb	r3, [r7, #14]
 8010132:	2b04      	cmp	r3, #4
 8010134:	d147      	bne.n	80101c6 <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	220b      	movs	r2, #11
 801013a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2203      	movs	r2, #3
 8010140:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 8010150:	2300      	movs	r3, #0
 8010152:	2200      	movs	r2, #0
 8010154:	f000 fd98 	bl	8010c88 <osMessageQueuePut>
      break;
 8010158:	e035      	b.n	80101c6 <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	7e5b      	ldrb	r3, [r3, #25]
 801015e:	3301      	adds	r3, #1
 8010160:	b2da      	uxtb	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	765a      	strb	r2, [r3, #25]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	7e5b      	ldrb	r3, [r3, #25]
 801016a:	2b02      	cmp	r3, #2
 801016c:	d806      	bhi.n	801017c <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2201      	movs	r2, #1
 8010172:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2201      	movs	r2, #1
 8010178:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 801017a:	e025      	b.n	80101c8 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010182:	2106      	movs	r1, #6
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	2200      	movs	r2, #0
 801018c:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	795b      	ldrb	r3, [r3, #5]
 8010192:	4619      	mov	r1, r3
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 f90d 	bl	80103b4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	791b      	ldrb	r3, [r3, #4]
 801019e:	4619      	mov	r1, r3
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f000 f907 	bl	80103b4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80101ac:	2302      	movs	r3, #2
 80101ae:	73fb      	strb	r3, [r7, #15]
      break;
 80101b0:	e00a      	b.n	80101c8 <USBH_HandleControl+0x488>

    default:
      break;
 80101b2:	bf00      	nop
 80101b4:	e008      	b.n	80101c8 <USBH_HandleControl+0x488>
      break;
 80101b6:	bf00      	nop
 80101b8:	e006      	b.n	80101c8 <USBH_HandleControl+0x488>
      break;
 80101ba:	bf00      	nop
 80101bc:	e004      	b.n	80101c8 <USBH_HandleControl+0x488>
      break;
 80101be:	bf00      	nop
 80101c0:	e002      	b.n	80101c8 <USBH_HandleControl+0x488>
      break;
 80101c2:	bf00      	nop
 80101c4:	e000      	b.n	80101c8 <USBH_HandleControl+0x488>
      break;
 80101c6:	bf00      	nop
  }

  return status;
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop

080101d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b088      	sub	sp, #32
 80101d8:	af04      	add	r7, sp, #16
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	4613      	mov	r3, r2
 80101e0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80101e2:	79f9      	ldrb	r1, [r7, #7]
 80101e4:	2300      	movs	r3, #0
 80101e6:	9303      	str	r3, [sp, #12]
 80101e8:	2308      	movs	r3, #8
 80101ea:	9302      	str	r3, [sp, #8]
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	9301      	str	r3, [sp, #4]
 80101f0:	2300      	movs	r3, #0
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	2300      	movs	r3, #0
 80101f6:	2200      	movs	r2, #0
 80101f8:	68f8      	ldr	r0, [r7, #12]
 80101fa:	f004 f970 	bl	80144de <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80101fe:	2300      	movs	r3, #0
}
 8010200:	4618      	mov	r0, r3
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b088      	sub	sp, #32
 801020c:	af04      	add	r7, sp, #16
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	4611      	mov	r1, r2
 8010214:	461a      	mov	r2, r3
 8010216:	460b      	mov	r3, r1
 8010218:	80fb      	strh	r3, [r7, #6]
 801021a:	4613      	mov	r3, r2
 801021c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010224:	2b00      	cmp	r3, #0
 8010226:	d001      	beq.n	801022c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010228:	2300      	movs	r3, #0
 801022a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 801022c:	7979      	ldrb	r1, [r7, #5]
 801022e:	7e3b      	ldrb	r3, [r7, #24]
 8010230:	9303      	str	r3, [sp, #12]
 8010232:	88fb      	ldrh	r3, [r7, #6]
 8010234:	9302      	str	r3, [sp, #8]
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	9301      	str	r3, [sp, #4]
 801023a:	2301      	movs	r3, #1
 801023c:	9300      	str	r3, [sp, #0]
 801023e:	2300      	movs	r3, #0
 8010240:	2200      	movs	r2, #0
 8010242:	68f8      	ldr	r0, [r7, #12]
 8010244:	f004 f94b 	bl	80144de <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010248:	2300      	movs	r3, #0
}
 801024a:	4618      	mov	r0, r3
 801024c:	3710      	adds	r7, #16
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}

08010252 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	b088      	sub	sp, #32
 8010256:	af04      	add	r7, sp, #16
 8010258:	60f8      	str	r0, [r7, #12]
 801025a:	60b9      	str	r1, [r7, #8]
 801025c:	4611      	mov	r1, r2
 801025e:	461a      	mov	r2, r3
 8010260:	460b      	mov	r3, r1
 8010262:	80fb      	strh	r3, [r7, #6]
 8010264:	4613      	mov	r3, r2
 8010266:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8010268:	7979      	ldrb	r1, [r7, #5]
 801026a:	2300      	movs	r3, #0
 801026c:	9303      	str	r3, [sp, #12]
 801026e:	88fb      	ldrh	r3, [r7, #6]
 8010270:	9302      	str	r3, [sp, #8]
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	9301      	str	r3, [sp, #4]
 8010276:	2301      	movs	r3, #1
 8010278:	9300      	str	r3, [sp, #0]
 801027a:	2300      	movs	r3, #0
 801027c:	2201      	movs	r2, #1
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f004 f92d 	bl	80144de <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8010284:	2300      	movs	r3, #0

}
 8010286:	4618      	mov	r0, r3
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}

0801028e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801028e:	b580      	push	{r7, lr}
 8010290:	b088      	sub	sp, #32
 8010292:	af04      	add	r7, sp, #16
 8010294:	60f8      	str	r0, [r7, #12]
 8010296:	60b9      	str	r1, [r7, #8]
 8010298:	4611      	mov	r1, r2
 801029a:	461a      	mov	r2, r3
 801029c:	460b      	mov	r3, r1
 801029e:	80fb      	strh	r3, [r7, #6]
 80102a0:	4613      	mov	r3, r2
 80102a2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d001      	beq.n	80102b2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80102ae:	2300      	movs	r3, #0
 80102b0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80102b2:	7979      	ldrb	r1, [r7, #5]
 80102b4:	7e3b      	ldrb	r3, [r7, #24]
 80102b6:	9303      	str	r3, [sp, #12]
 80102b8:	88fb      	ldrh	r3, [r7, #6]
 80102ba:	9302      	str	r3, [sp, #8]
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	9301      	str	r3, [sp, #4]
 80102c0:	2301      	movs	r3, #1
 80102c2:	9300      	str	r3, [sp, #0]
 80102c4:	2302      	movs	r3, #2
 80102c6:	2200      	movs	r2, #0
 80102c8:	68f8      	ldr	r0, [r7, #12]
 80102ca:	f004 f908 	bl	80144de <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80102ce:	2300      	movs	r3, #0
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	3710      	adds	r7, #16
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b088      	sub	sp, #32
 80102dc:	af04      	add	r7, sp, #16
 80102de:	60f8      	str	r0, [r7, #12]
 80102e0:	60b9      	str	r1, [r7, #8]
 80102e2:	4611      	mov	r1, r2
 80102e4:	461a      	mov	r2, r3
 80102e6:	460b      	mov	r3, r1
 80102e8:	80fb      	strh	r3, [r7, #6]
 80102ea:	4613      	mov	r3, r2
 80102ec:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80102ee:	7979      	ldrb	r1, [r7, #5]
 80102f0:	2300      	movs	r3, #0
 80102f2:	9303      	str	r3, [sp, #12]
 80102f4:	88fb      	ldrh	r3, [r7, #6]
 80102f6:	9302      	str	r3, [sp, #8]
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	9301      	str	r3, [sp, #4]
 80102fc:	2301      	movs	r3, #1
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	2302      	movs	r3, #2
 8010302:	2201      	movs	r2, #1
 8010304:	68f8      	ldr	r0, [r7, #12]
 8010306:	f004 f8ea 	bl	80144de <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 801030a:	2300      	movs	r3, #0
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b086      	sub	sp, #24
 8010318:	af04      	add	r7, sp, #16
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	4608      	mov	r0, r1
 801031e:	4611      	mov	r1, r2
 8010320:	461a      	mov	r2, r3
 8010322:	4603      	mov	r3, r0
 8010324:	70fb      	strb	r3, [r7, #3]
 8010326:	460b      	mov	r3, r1
 8010328:	70bb      	strb	r3, [r7, #2]
 801032a:	4613      	mov	r3, r2
 801032c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 801032e:	7878      	ldrb	r0, [r7, #1]
 8010330:	78ba      	ldrb	r2, [r7, #2]
 8010332:	78f9      	ldrb	r1, [r7, #3]
 8010334:	8b3b      	ldrh	r3, [r7, #24]
 8010336:	9302      	str	r3, [sp, #8]
 8010338:	7d3b      	ldrb	r3, [r7, #20]
 801033a:	9301      	str	r3, [sp, #4]
 801033c:	7c3b      	ldrb	r3, [r7, #16]
 801033e:	9300      	str	r3, [sp, #0]
 8010340:	4603      	mov	r3, r0
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f004 f87d 	bl	8014442 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010348:	2300      	movs	r3, #0
}
 801034a:	4618      	mov	r0, r3
 801034c:	3708      	adds	r7, #8
 801034e:	46bd      	mov	sp, r7
 8010350:	bd80      	pop	{r7, pc}

08010352 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010352:	b580      	push	{r7, lr}
 8010354:	b082      	sub	sp, #8
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
 801035a:	460b      	mov	r3, r1
 801035c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 801035e:	78fb      	ldrb	r3, [r7, #3]
 8010360:	4619      	mov	r1, r3
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f004 f89c 	bl	80144a0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010368:	2300      	movs	r3, #0
}
 801036a:	4618      	mov	r0, r3
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b084      	sub	sp, #16
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	460b      	mov	r3, r1
 801037c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 f836 	bl	80103f0 <USBH_GetFreePipe>
 8010384:	4603      	mov	r3, r0
 8010386:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010388:	89fb      	ldrh	r3, [r7, #14]
 801038a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801038e:	4293      	cmp	r3, r2
 8010390:	d00a      	beq.n	80103a8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8010392:	78fa      	ldrb	r2, [r7, #3]
 8010394:	89fb      	ldrh	r3, [r7, #14]
 8010396:	f003 030f 	and.w	r3, r3, #15
 801039a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801039e:	6879      	ldr	r1, [r7, #4]
 80103a0:	33e0      	adds	r3, #224	; 0xe0
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	440b      	add	r3, r1
 80103a6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80103a8:	89fb      	ldrh	r3, [r7, #14]
 80103aa:	b2db      	uxtb	r3, r3
}
 80103ac:	4618      	mov	r0, r3
 80103ae:	3710      	adds	r7, #16
 80103b0:	46bd      	mov	sp, r7
 80103b2:	bd80      	pop	{r7, pc}

080103b4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
 80103bc:	460b      	mov	r3, r1
 80103be:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80103c0:	78fb      	ldrb	r3, [r7, #3]
 80103c2:	2b0a      	cmp	r3, #10
 80103c4:	d80d      	bhi.n	80103e2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80103c6:	78fb      	ldrb	r3, [r7, #3]
 80103c8:	687a      	ldr	r2, [r7, #4]
 80103ca:	33e0      	adds	r3, #224	; 0xe0
 80103cc:	009b      	lsls	r3, r3, #2
 80103ce:	4413      	add	r3, r2
 80103d0:	685a      	ldr	r2, [r3, #4]
 80103d2:	78fb      	ldrb	r3, [r7, #3]
 80103d4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80103d8:	6879      	ldr	r1, [r7, #4]
 80103da:	33e0      	adds	r3, #224	; 0xe0
 80103dc:	009b      	lsls	r3, r3, #2
 80103de:	440b      	add	r3, r1
 80103e0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80103e2:	2300      	movs	r3, #0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80103f8:	2300      	movs	r3, #0
 80103fa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80103fc:	2300      	movs	r3, #0
 80103fe:	73fb      	strb	r3, [r7, #15]
 8010400:	e00f      	b.n	8010422 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010402:	7bfb      	ldrb	r3, [r7, #15]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	33e0      	adds	r3, #224	; 0xe0
 8010408:	009b      	lsls	r3, r3, #2
 801040a:	4413      	add	r3, r2
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010412:	2b00      	cmp	r3, #0
 8010414:	d102      	bne.n	801041c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010416:	7bfb      	ldrb	r3, [r7, #15]
 8010418:	b29b      	uxth	r3, r3
 801041a:	e007      	b.n	801042c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 801041c:	7bfb      	ldrb	r3, [r7, #15]
 801041e:	3301      	adds	r3, #1
 8010420:	73fb      	strb	r3, [r7, #15]
 8010422:	7bfb      	ldrb	r3, [r7, #15]
 8010424:	2b0a      	cmp	r3, #10
 8010426:	d9ec      	bls.n	8010402 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010428:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 801042c:	4618      	mov	r0, r3
 801042e:	3714      	adds	r7, #20
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr

08010438 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010438:	b480      	push	{r7}
 801043a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 801043c:	bf00      	nop
 801043e:	46bd      	mov	sp, r7
 8010440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010444:	4770      	bx	lr
	...

08010448 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801044e:	f3ef 8305 	mrs	r3, IPSR
 8010452:	60bb      	str	r3, [r7, #8]
  return(result);
 8010454:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010456:	2b00      	cmp	r3, #0
 8010458:	d10f      	bne.n	801047a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801045a:	f3ef 8310 	mrs	r3, PRIMASK
 801045e:	607b      	str	r3, [r7, #4]
  return(result);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d105      	bne.n	8010472 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010466:	f3ef 8311 	mrs	r3, BASEPRI
 801046a:	603b      	str	r3, [r7, #0]
  return(result);
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d007      	beq.n	8010482 <osKernelInitialize+0x3a>
 8010472:	4b0e      	ldr	r3, [pc, #56]	; (80104ac <osKernelInitialize+0x64>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	2b02      	cmp	r3, #2
 8010478:	d103      	bne.n	8010482 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 801047a:	f06f 0305 	mvn.w	r3, #5
 801047e:	60fb      	str	r3, [r7, #12]
 8010480:	e00c      	b.n	801049c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010482:	4b0a      	ldr	r3, [pc, #40]	; (80104ac <osKernelInitialize+0x64>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d105      	bne.n	8010496 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801048a:	4b08      	ldr	r3, [pc, #32]	; (80104ac <osKernelInitialize+0x64>)
 801048c:	2201      	movs	r2, #1
 801048e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010490:	2300      	movs	r3, #0
 8010492:	60fb      	str	r3, [r7, #12]
 8010494:	e002      	b.n	801049c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010496:	f04f 33ff 	mov.w	r3, #4294967295
 801049a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801049c:	68fb      	ldr	r3, [r7, #12]
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3714      	adds	r7, #20
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	200001f8 	.word	0x200001f8

080104b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b084      	sub	sp, #16
 80104b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104b6:	f3ef 8305 	mrs	r3, IPSR
 80104ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80104bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10f      	bne.n	80104e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104c2:	f3ef 8310 	mrs	r3, PRIMASK
 80104c6:	607b      	str	r3, [r7, #4]
  return(result);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d105      	bne.n	80104da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104ce:	f3ef 8311 	mrs	r3, BASEPRI
 80104d2:	603b      	str	r3, [r7, #0]
  return(result);
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d007      	beq.n	80104ea <osKernelStart+0x3a>
 80104da:	4b0f      	ldr	r3, [pc, #60]	; (8010518 <osKernelStart+0x68>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2b02      	cmp	r3, #2
 80104e0:	d103      	bne.n	80104ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80104e2:	f06f 0305 	mvn.w	r3, #5
 80104e6:	60fb      	str	r3, [r7, #12]
 80104e8:	e010      	b.n	801050c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80104ea:	4b0b      	ldr	r3, [pc, #44]	; (8010518 <osKernelStart+0x68>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d109      	bne.n	8010506 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80104f2:	f7ff ffa1 	bl	8010438 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80104f6:	4b08      	ldr	r3, [pc, #32]	; (8010518 <osKernelStart+0x68>)
 80104f8:	2202      	movs	r2, #2
 80104fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80104fc:	f001 ff98 	bl	8012430 <vTaskStartScheduler>
      stat = osOK;
 8010500:	2300      	movs	r3, #0
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	e002      	b.n	801050c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010506:	f04f 33ff 	mov.w	r3, #4294967295
 801050a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 801050c:	68fb      	ldr	r3, [r7, #12]
}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	200001f8 	.word	0x200001f8

0801051c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801051c:	b580      	push	{r7, lr}
 801051e:	b090      	sub	sp, #64	; 0x40
 8010520:	af04      	add	r7, sp, #16
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010528:	2300      	movs	r3, #0
 801052a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801052c:	f3ef 8305 	mrs	r3, IPSR
 8010530:	61fb      	str	r3, [r7, #28]
  return(result);
 8010532:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010534:	2b00      	cmp	r3, #0
 8010536:	f040 808f 	bne.w	8010658 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801053a:	f3ef 8310 	mrs	r3, PRIMASK
 801053e:	61bb      	str	r3, [r7, #24]
  return(result);
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d105      	bne.n	8010552 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010546:	f3ef 8311 	mrs	r3, BASEPRI
 801054a:	617b      	str	r3, [r7, #20]
  return(result);
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d003      	beq.n	801055a <osThreadNew+0x3e>
 8010552:	4b44      	ldr	r3, [pc, #272]	; (8010664 <osThreadNew+0x148>)
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b02      	cmp	r3, #2
 8010558:	d07e      	beq.n	8010658 <osThreadNew+0x13c>
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d07b      	beq.n	8010658 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010560:	2380      	movs	r3, #128	; 0x80
 8010562:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010564:	2318      	movs	r3, #24
 8010566:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010568:	2300      	movs	r3, #0
 801056a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 801056c:	f04f 33ff 	mov.w	r3, #4294967295
 8010570:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d045      	beq.n	8010604 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <osThreadNew+0x6a>
        name = attr->name;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	699b      	ldr	r3, [r3, #24]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d002      	beq.n	8010594 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	699b      	ldr	r3, [r3, #24]
 8010592:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010596:	2b00      	cmp	r3, #0
 8010598:	d008      	beq.n	80105ac <osThreadNew+0x90>
 801059a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801059c:	2b38      	cmp	r3, #56	; 0x38
 801059e:	d805      	bhi.n	80105ac <osThreadNew+0x90>
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	685b      	ldr	r3, [r3, #4]
 80105a4:	f003 0301 	and.w	r3, r3, #1
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d001      	beq.n	80105b0 <osThreadNew+0x94>
        return (NULL);
 80105ac:	2300      	movs	r3, #0
 80105ae:	e054      	b.n	801065a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	695b      	ldr	r3, [r3, #20]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d003      	beq.n	80105c0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	695b      	ldr	r3, [r3, #20]
 80105bc:	089b      	lsrs	r3, r3, #2
 80105be:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	689b      	ldr	r3, [r3, #8]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00e      	beq.n	80105e6 <osThreadNew+0xca>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	68db      	ldr	r3, [r3, #12]
 80105cc:	2b5b      	cmp	r3, #91	; 0x5b
 80105ce:	d90a      	bls.n	80105e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d006      	beq.n	80105e6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	695b      	ldr	r3, [r3, #20]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d002      	beq.n	80105e6 <osThreadNew+0xca>
        mem = 1;
 80105e0:	2301      	movs	r3, #1
 80105e2:	623b      	str	r3, [r7, #32]
 80105e4:	e010      	b.n	8010608 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d10c      	bne.n	8010608 <osThreadNew+0xec>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d108      	bne.n	8010608 <osThreadNew+0xec>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d104      	bne.n	8010608 <osThreadNew+0xec>
          mem = 0;
 80105fe:	2300      	movs	r3, #0
 8010600:	623b      	str	r3, [r7, #32]
 8010602:	e001      	b.n	8010608 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010608:	6a3b      	ldr	r3, [r7, #32]
 801060a:	2b01      	cmp	r3, #1
 801060c:	d110      	bne.n	8010630 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010616:	9202      	str	r2, [sp, #8]
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061c:	9300      	str	r3, [sp, #0]
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010624:	68f8      	ldr	r0, [r7, #12]
 8010626:	f001 fc63 	bl	8011ef0 <xTaskCreateStatic>
 801062a:	4603      	mov	r3, r0
 801062c:	613b      	str	r3, [r7, #16]
 801062e:	e013      	b.n	8010658 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010630:	6a3b      	ldr	r3, [r7, #32]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d110      	bne.n	8010658 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010638:	b29a      	uxth	r2, r3
 801063a:	f107 0310 	add.w	r3, r7, #16
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f001 fcab 	bl	8011fa4 <xTaskCreate>
 801064e:	4603      	mov	r3, r0
 8010650:	2b01      	cmp	r3, #1
 8010652:	d001      	beq.n	8010658 <osThreadNew+0x13c>
          hTask = NULL;
 8010654:	2300      	movs	r3, #0
 8010656:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010658:	693b      	ldr	r3, [r7, #16]
}
 801065a:	4618      	mov	r0, r3
 801065c:	3730      	adds	r7, #48	; 0x30
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	200001f8 	.word	0x200001f8

08010668 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8010668:	b580      	push	{r7, lr}
 801066a:	b088      	sub	sp, #32
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010674:	f3ef 8305 	mrs	r3, IPSR
 8010678:	617b      	str	r3, [r7, #20]
  return(result);
 801067a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 801067c:	2b00      	cmp	r3, #0
 801067e:	d10f      	bne.n	80106a0 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010680:	f3ef 8310 	mrs	r3, PRIMASK
 8010684:	613b      	str	r3, [r7, #16]
  return(result);
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d105      	bne.n	8010698 <osThreadSuspend+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801068c:	f3ef 8311 	mrs	r3, BASEPRI
 8010690:	60fb      	str	r3, [r7, #12]
  return(result);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d007      	beq.n	80106a8 <osThreadSuspend+0x40>
 8010698:	4b0c      	ldr	r3, [pc, #48]	; (80106cc <osThreadSuspend+0x64>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b02      	cmp	r3, #2
 801069e:	d103      	bne.n	80106a8 <osThreadSuspend+0x40>
    stat = osErrorISR;
 80106a0:	f06f 0305 	mvn.w	r3, #5
 80106a4:	61fb      	str	r3, [r7, #28]
 80106a6:	e00b      	b.n	80106c0 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d103      	bne.n	80106b6 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 80106ae:	f06f 0303 	mvn.w	r3, #3
 80106b2:	61fb      	str	r3, [r7, #28]
 80106b4:	e004      	b.n	80106c0 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 80106b6:	2300      	movs	r3, #0
 80106b8:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 80106ba:	69b8      	ldr	r0, [r7, #24]
 80106bc:	f001 fdb6 	bl	801222c <vTaskSuspend>
  }

  return (stat);
 80106c0:	69fb      	ldr	r3, [r7, #28]
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3720      	adds	r7, #32
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	200001f8 	.word	0x200001f8

080106d0 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80106dc:	f3ef 8305 	mrs	r3, IPSR
 80106e0:	617b      	str	r3, [r7, #20]
  return(result);
 80106e2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d10f      	bne.n	8010708 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106e8:	f3ef 8310 	mrs	r3, PRIMASK
 80106ec:	613b      	str	r3, [r7, #16]
  return(result);
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d105      	bne.n	8010700 <osThreadResume+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80106f4:	f3ef 8311 	mrs	r3, BASEPRI
 80106f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d007      	beq.n	8010710 <osThreadResume+0x40>
 8010700:	4b0c      	ldr	r3, [pc, #48]	; (8010734 <osThreadResume+0x64>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b02      	cmp	r3, #2
 8010706:	d103      	bne.n	8010710 <osThreadResume+0x40>
    stat = osErrorISR;
 8010708:	f06f 0305 	mvn.w	r3, #5
 801070c:	61fb      	str	r3, [r7, #28]
 801070e:	e00b      	b.n	8010728 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d103      	bne.n	801071e <osThreadResume+0x4e>
    stat = osErrorParameter;
 8010716:	f06f 0303 	mvn.w	r3, #3
 801071a:	61fb      	str	r3, [r7, #28]
 801071c:	e004      	b.n	8010728 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 801071e:	2300      	movs	r3, #0
 8010720:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8010722:	69b8      	ldr	r0, [r7, #24]
 8010724:	f001 fe26 	bl	8012374 <vTaskResume>
  }

  return (stat);
 8010728:	69fb      	ldr	r3, [r7, #28]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3720      	adds	r7, #32
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	200001f8 	.word	0x200001f8

08010738 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8010738:	b580      	push	{r7, lr}
 801073a:	b084      	sub	sp, #16
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f003 f873 	bl	801382c <pvTimerGetTimerID>
 8010746:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d005      	beq.n	801075a <TimerCallback+0x22>
    callb->func (callb->arg);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	68fa      	ldr	r2, [r7, #12]
 8010754:	6852      	ldr	r2, [r2, #4]
 8010756:	4610      	mov	r0, r2
 8010758:	4798      	blx	r3
  }
}
 801075a:	bf00      	nop
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
	...

08010764 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8010764:	b580      	push	{r7, lr}
 8010766:	b08e      	sub	sp, #56	; 0x38
 8010768:	af02      	add	r7, sp, #8
 801076a:	60f8      	str	r0, [r7, #12]
 801076c:	607a      	str	r2, [r7, #4]
 801076e:	603b      	str	r3, [r7, #0]
 8010770:	460b      	mov	r3, r1
 8010772:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8010774:	2300      	movs	r3, #0
 8010776:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010778:	f3ef 8305 	mrs	r3, IPSR
 801077c:	61bb      	str	r3, [r7, #24]
  return(result);
 801077e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8010780:	2b00      	cmp	r3, #0
 8010782:	d16a      	bne.n	801085a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010784:	f3ef 8310 	mrs	r3, PRIMASK
 8010788:	617b      	str	r3, [r7, #20]
  return(result);
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d105      	bne.n	801079c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010790:	f3ef 8311 	mrs	r3, BASEPRI
 8010794:	613b      	str	r3, [r7, #16]
  return(result);
 8010796:	693b      	ldr	r3, [r7, #16]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d003      	beq.n	80107a4 <osTimerNew+0x40>
 801079c:	4b31      	ldr	r3, [pc, #196]	; (8010864 <osTimerNew+0x100>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	2b02      	cmp	r3, #2
 80107a2:	d05a      	beq.n	801085a <osTimerNew+0xf6>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d057      	beq.n	801085a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80107aa:	2008      	movs	r0, #8
 80107ac:	f003 faa0 	bl	8013cf0 <pvPortMalloc>
 80107b0:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d050      	beq.n	801085a <osTimerNew+0xf6>
      callb->func = func;
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80107c4:	7afb      	ldrb	r3, [r7, #11]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d102      	bne.n	80107d0 <osTimerNew+0x6c>
        reload = pdFALSE;
 80107ca:	2300      	movs	r3, #0
 80107cc:	627b      	str	r3, [r7, #36]	; 0x24
 80107ce:	e001      	b.n	80107d4 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80107d0:	2301      	movs	r3, #1
 80107d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80107d4:	f04f 33ff 	mov.w	r3, #4294967295
 80107d8:	623b      	str	r3, [r7, #32]
      name = NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d01c      	beq.n	801081e <osTimerNew+0xba>
        if (attr->name != NULL) {
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d002      	beq.n	80107f2 <osTimerNew+0x8e>
          name = attr->name;
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	689b      	ldr	r3, [r3, #8]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d006      	beq.n	8010808 <osTimerNew+0xa4>
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	2b2b      	cmp	r3, #43	; 0x2b
 8010800:	d902      	bls.n	8010808 <osTimerNew+0xa4>
          mem = 1;
 8010802:	2301      	movs	r3, #1
 8010804:	623b      	str	r3, [r7, #32]
 8010806:	e00c      	b.n	8010822 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d108      	bne.n	8010822 <osTimerNew+0xbe>
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d104      	bne.n	8010822 <osTimerNew+0xbe>
            mem = 0;
 8010818:	2300      	movs	r3, #0
 801081a:	623b      	str	r3, [r7, #32]
 801081c:	e001      	b.n	8010822 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 801081e:	2300      	movs	r3, #0
 8010820:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8010822:	6a3b      	ldr	r3, [r7, #32]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d10c      	bne.n	8010842 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8010828:	683b      	ldr	r3, [r7, #0]
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	9301      	str	r3, [sp, #4]
 801082e:	4b0e      	ldr	r3, [pc, #56]	; (8010868 <osTimerNew+0x104>)
 8010830:	9300      	str	r3, [sp, #0]
 8010832:	69fb      	ldr	r3, [r7, #28]
 8010834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010836:	2101      	movs	r1, #1
 8010838:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801083a:	f002 fc82 	bl	8013142 <xTimerCreateStatic>
 801083e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010840:	e00b      	b.n	801085a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8010842:	6a3b      	ldr	r3, [r7, #32]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d108      	bne.n	801085a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8010848:	4b07      	ldr	r3, [pc, #28]	; (8010868 <osTimerNew+0x104>)
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010850:	2101      	movs	r1, #1
 8010852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010854:	f002 fc54 	bl	8013100 <xTimerCreate>
 8010858:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 801085a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801085c:	4618      	mov	r0, r3
 801085e:	3730      	adds	r7, #48	; 0x30
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	200001f8 	.word	0x200001f8
 8010868:	08010739 	.word	0x08010739

0801086c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 801086c:	b580      	push	{r7, lr}
 801086e:	b08a      	sub	sp, #40	; 0x28
 8010870:	af02      	add	r7, sp, #8
 8010872:	6078      	str	r0, [r7, #4]
 8010874:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801087a:	f3ef 8305 	mrs	r3, IPSR
 801087e:	617b      	str	r3, [r7, #20]
  return(result);
 8010880:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010882:	2b00      	cmp	r3, #0
 8010884:	d10f      	bne.n	80108a6 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010886:	f3ef 8310 	mrs	r3, PRIMASK
 801088a:	613b      	str	r3, [r7, #16]
  return(result);
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d105      	bne.n	801089e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010892:	f3ef 8311 	mrs	r3, BASEPRI
 8010896:	60fb      	str	r3, [r7, #12]
  return(result);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d007      	beq.n	80108ae <osTimerStart+0x42>
 801089e:	4b12      	ldr	r3, [pc, #72]	; (80108e8 <osTimerStart+0x7c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b02      	cmp	r3, #2
 80108a4:	d103      	bne.n	80108ae <osTimerStart+0x42>
    stat = osErrorISR;
 80108a6:	f06f 0305 	mvn.w	r3, #5
 80108aa:	61fb      	str	r3, [r7, #28]
 80108ac:	e017      	b.n	80108de <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d103      	bne.n	80108bc <osTimerStart+0x50>
    stat = osErrorParameter;
 80108b4:	f06f 0303 	mvn.w	r3, #3
 80108b8:	61fb      	str	r3, [r7, #28]
 80108ba:	e010      	b.n	80108de <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80108bc:	2300      	movs	r3, #0
 80108be:	9300      	str	r3, [sp, #0]
 80108c0:	2300      	movs	r3, #0
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	2104      	movs	r1, #4
 80108c6:	69b8      	ldr	r0, [r7, #24]
 80108c8:	f002 fcb2 	bl	8013230 <xTimerGenericCommand>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d102      	bne.n	80108d8 <osTimerStart+0x6c>
      stat = osOK;
 80108d2:	2300      	movs	r3, #0
 80108d4:	61fb      	str	r3, [r7, #28]
 80108d6:	e002      	b.n	80108de <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80108d8:	f06f 0302 	mvn.w	r3, #2
 80108dc:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80108de:	69fb      	ldr	r3, [r7, #28]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3720      	adds	r7, #32
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	200001f8 	.word	0x200001f8

080108ec <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b08a      	sub	sp, #40	; 0x28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80108f4:	2300      	movs	r3, #0
 80108f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80108f8:	f3ef 8305 	mrs	r3, IPSR
 80108fc:	613b      	str	r3, [r7, #16]
  return(result);
 80108fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8010900:	2b00      	cmp	r3, #0
 8010902:	f040 8085 	bne.w	8010a10 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010906:	f3ef 8310 	mrs	r3, PRIMASK
 801090a:	60fb      	str	r3, [r7, #12]
  return(result);
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d105      	bne.n	801091e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010912:	f3ef 8311 	mrs	r3, BASEPRI
 8010916:	60bb      	str	r3, [r7, #8]
  return(result);
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d003      	beq.n	8010926 <osMutexNew+0x3a>
 801091e:	4b3f      	ldr	r3, [pc, #252]	; (8010a1c <osMutexNew+0x130>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b02      	cmp	r3, #2
 8010924:	d074      	beq.n	8010a10 <osMutexNew+0x124>
    if (attr != NULL) {
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d003      	beq.n	8010934 <osMutexNew+0x48>
      type = attr->attr_bits;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	623b      	str	r3, [r7, #32]
 8010932:	e001      	b.n	8010938 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8010934:	2300      	movs	r3, #0
 8010936:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8010938:	6a3b      	ldr	r3, [r7, #32]
 801093a:	f003 0301 	and.w	r3, r3, #1
 801093e:	2b00      	cmp	r3, #0
 8010940:	d002      	beq.n	8010948 <osMutexNew+0x5c>
      rmtx = 1U;
 8010942:	2301      	movs	r3, #1
 8010944:	61fb      	str	r3, [r7, #28]
 8010946:	e001      	b.n	801094c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8010948:	2300      	movs	r3, #0
 801094a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 801094c:	6a3b      	ldr	r3, [r7, #32]
 801094e:	f003 0308 	and.w	r3, r3, #8
 8010952:	2b00      	cmp	r3, #0
 8010954:	d15c      	bne.n	8010a10 <osMutexNew+0x124>
      mem = -1;
 8010956:	f04f 33ff 	mov.w	r3, #4294967295
 801095a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d015      	beq.n	801098e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	689b      	ldr	r3, [r3, #8]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d006      	beq.n	8010978 <osMutexNew+0x8c>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	68db      	ldr	r3, [r3, #12]
 801096e:	2b4f      	cmp	r3, #79	; 0x4f
 8010970:	d902      	bls.n	8010978 <osMutexNew+0x8c>
          mem = 1;
 8010972:	2301      	movs	r3, #1
 8010974:	61bb      	str	r3, [r7, #24]
 8010976:	e00c      	b.n	8010992 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	689b      	ldr	r3, [r3, #8]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d108      	bne.n	8010992 <osMutexNew+0xa6>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d104      	bne.n	8010992 <osMutexNew+0xa6>
            mem = 0;
 8010988:	2300      	movs	r3, #0
 801098a:	61bb      	str	r3, [r7, #24]
 801098c:	e001      	b.n	8010992 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 801098e:	2300      	movs	r3, #0
 8010990:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8010992:	69bb      	ldr	r3, [r7, #24]
 8010994:	2b01      	cmp	r3, #1
 8010996:	d112      	bne.n	80109be <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8010998:	69fb      	ldr	r3, [r7, #28]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d007      	beq.n	80109ae <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	4619      	mov	r1, r3
 80109a4:	2004      	movs	r0, #4
 80109a6:	f000 fcac 	bl	8011302 <xQueueCreateMutexStatic>
 80109aa:	6278      	str	r0, [r7, #36]	; 0x24
 80109ac:	e016      	b.n	80109dc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	689b      	ldr	r3, [r3, #8]
 80109b2:	4619      	mov	r1, r3
 80109b4:	2001      	movs	r0, #1
 80109b6:	f000 fca4 	bl	8011302 <xQueueCreateMutexStatic>
 80109ba:	6278      	str	r0, [r7, #36]	; 0x24
 80109bc:	e00e      	b.n	80109dc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80109be:	69bb      	ldr	r3, [r7, #24]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d10b      	bne.n	80109dc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80109c4:	69fb      	ldr	r3, [r7, #28]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d004      	beq.n	80109d4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80109ca:	2004      	movs	r0, #4
 80109cc:	f000 fc81 	bl	80112d2 <xQueueCreateMutex>
 80109d0:	6278      	str	r0, [r7, #36]	; 0x24
 80109d2:	e003      	b.n	80109dc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80109d4:	2001      	movs	r0, #1
 80109d6:	f000 fc7c 	bl	80112d2 <xQueueCreateMutex>
 80109da:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80109dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d00c      	beq.n	80109fc <osMutexNew+0x110>
        if (attr != NULL) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d003      	beq.n	80109f0 <osMutexNew+0x104>
          name = attr->name;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	617b      	str	r3, [r7, #20]
 80109ee:	e001      	b.n	80109f4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80109f0:	2300      	movs	r3, #0
 80109f2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80109f4:	6979      	ldr	r1, [r7, #20]
 80109f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109f8:	f001 fa1e 	bl	8011e38 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80109fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d006      	beq.n	8010a10 <osMutexNew+0x124>
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d003      	beq.n	8010a10 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8010a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0a:	f043 0301 	orr.w	r3, r3, #1
 8010a0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8010a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3728      	adds	r7, #40	; 0x28
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	200001f8 	.word	0x200001f8

08010a20 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b088      	sub	sp, #32
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	f023 0301 	bic.w	r3, r3, #1
 8010a30:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f003 0301 	and.w	r3, r3, #1
 8010a38:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010a3e:	f3ef 8305 	mrs	r3, IPSR
 8010a42:	613b      	str	r3, [r7, #16]
  return(result);
 8010a44:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d10f      	bne.n	8010a6a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8010a4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d105      	bne.n	8010a62 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010a56:	f3ef 8311 	mrs	r3, BASEPRI
 8010a5a:	60bb      	str	r3, [r7, #8]
  return(result);
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d007      	beq.n	8010a72 <osMutexAcquire+0x52>
 8010a62:	4b1d      	ldr	r3, [pc, #116]	; (8010ad8 <osMutexAcquire+0xb8>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	2b02      	cmp	r3, #2
 8010a68:	d103      	bne.n	8010a72 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8010a6a:	f06f 0305 	mvn.w	r3, #5
 8010a6e:	61fb      	str	r3, [r7, #28]
 8010a70:	e02c      	b.n	8010acc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d103      	bne.n	8010a80 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8010a78:	f06f 0303 	mvn.w	r3, #3
 8010a7c:	61fb      	str	r3, [r7, #28]
 8010a7e:	e025      	b.n	8010acc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d011      	beq.n	8010aaa <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8010a86:	6839      	ldr	r1, [r7, #0]
 8010a88:	69b8      	ldr	r0, [r7, #24]
 8010a8a:	f000 fc88 	bl	801139e <xQueueTakeMutexRecursive>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d01b      	beq.n	8010acc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d003      	beq.n	8010aa2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8010a9a:	f06f 0301 	mvn.w	r3, #1
 8010a9e:	61fb      	str	r3, [r7, #28]
 8010aa0:	e014      	b.n	8010acc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010aa2:	f06f 0302 	mvn.w	r3, #2
 8010aa6:	61fb      	str	r3, [r7, #28]
 8010aa8:	e010      	b.n	8010acc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8010aaa:	6839      	ldr	r1, [r7, #0]
 8010aac:	69b8      	ldr	r0, [r7, #24]
 8010aae:	f000 ff15 	bl	80118dc <xQueueSemaphoreTake>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d009      	beq.n	8010acc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d003      	beq.n	8010ac6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8010abe:	f06f 0301 	mvn.w	r3, #1
 8010ac2:	61fb      	str	r3, [r7, #28]
 8010ac4:	e002      	b.n	8010acc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8010ac6:	f06f 0302 	mvn.w	r3, #2
 8010aca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010acc:	69fb      	ldr	r3, [r7, #28]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3720      	adds	r7, #32
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	200001f8 	.word	0x200001f8

08010adc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b088      	sub	sp, #32
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f023 0301 	bic.w	r3, r3, #1
 8010aea:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	f003 0301 	and.w	r3, r3, #1
 8010af2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8010af4:	2300      	movs	r3, #0
 8010af6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010af8:	f3ef 8305 	mrs	r3, IPSR
 8010afc:	613b      	str	r3, [r7, #16]
  return(result);
 8010afe:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d10f      	bne.n	8010b24 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b04:	f3ef 8310 	mrs	r3, PRIMASK
 8010b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d105      	bne.n	8010b1c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010b10:	f3ef 8311 	mrs	r3, BASEPRI
 8010b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d007      	beq.n	8010b2c <osMutexRelease+0x50>
 8010b1c:	4b16      	ldr	r3, [pc, #88]	; (8010b78 <osMutexRelease+0x9c>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b02      	cmp	r3, #2
 8010b22:	d103      	bne.n	8010b2c <osMutexRelease+0x50>
    stat = osErrorISR;
 8010b24:	f06f 0305 	mvn.w	r3, #5
 8010b28:	61fb      	str	r3, [r7, #28]
 8010b2a:	e01f      	b.n	8010b6c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8010b2c:	69bb      	ldr	r3, [r7, #24]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d103      	bne.n	8010b3a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8010b32:	f06f 0303 	mvn.w	r3, #3
 8010b36:	61fb      	str	r3, [r7, #28]
 8010b38:	e018      	b.n	8010b6c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d009      	beq.n	8010b54 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8010b40:	69b8      	ldr	r0, [r7, #24]
 8010b42:	f000 fbf9 	bl	8011338 <xQueueGiveMutexRecursive>
 8010b46:	4603      	mov	r3, r0
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d00f      	beq.n	8010b6c <osMutexRelease+0x90>
        stat = osErrorResource;
 8010b4c:	f06f 0302 	mvn.w	r3, #2
 8010b50:	61fb      	str	r3, [r7, #28]
 8010b52:	e00b      	b.n	8010b6c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8010b54:	2300      	movs	r3, #0
 8010b56:	2200      	movs	r2, #0
 8010b58:	2100      	movs	r1, #0
 8010b5a:	69b8      	ldr	r0, [r7, #24]
 8010b5c:	f000 fc54 	bl	8011408 <xQueueGenericSend>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	d002      	beq.n	8010b6c <osMutexRelease+0x90>
        stat = osErrorResource;
 8010b66:	f06f 0302 	mvn.w	r3, #2
 8010b6a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8010b6c:	69fb      	ldr	r3, [r7, #28]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3720      	adds	r7, #32
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	200001f8 	.word	0x200001f8

08010b7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b08c      	sub	sp, #48	; 0x30
 8010b80:	af02      	add	r7, sp, #8
 8010b82:	60f8      	str	r0, [r7, #12]
 8010b84:	60b9      	str	r1, [r7, #8]
 8010b86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010b8c:	f3ef 8305 	mrs	r3, IPSR
 8010b90:	61bb      	str	r3, [r7, #24]
  return(result);
 8010b92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d170      	bne.n	8010c7a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b98:	f3ef 8310 	mrs	r3, PRIMASK
 8010b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d105      	bne.n	8010bb0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010ba4:	f3ef 8311 	mrs	r3, BASEPRI
 8010ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d003      	beq.n	8010bb8 <osMessageQueueNew+0x3c>
 8010bb0:	4b34      	ldr	r3, [pc, #208]	; (8010c84 <osMessageQueueNew+0x108>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b02      	cmp	r3, #2
 8010bb6:	d060      	beq.n	8010c7a <osMessageQueueNew+0xfe>
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d05d      	beq.n	8010c7a <osMessageQueueNew+0xfe>
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d05a      	beq.n	8010c7a <osMessageQueueNew+0xfe>
    mem = -1;
 8010bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d029      	beq.n	8010c24 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	689b      	ldr	r3, [r3, #8]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d012      	beq.n	8010bfe <osMessageQueueNew+0x82>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	2b4f      	cmp	r3, #79	; 0x4f
 8010bde:	d90e      	bls.n	8010bfe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00a      	beq.n	8010bfe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	695a      	ldr	r2, [r3, #20]
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	68b9      	ldr	r1, [r7, #8]
 8010bf0:	fb01 f303 	mul.w	r3, r1, r3
 8010bf4:	429a      	cmp	r2, r3
 8010bf6:	d302      	bcc.n	8010bfe <osMessageQueueNew+0x82>
        mem = 1;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	623b      	str	r3, [r7, #32]
 8010bfc:	e014      	b.n	8010c28 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	689b      	ldr	r3, [r3, #8]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d110      	bne.n	8010c28 <osMessageQueueNew+0xac>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d10c      	bne.n	8010c28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d108      	bne.n	8010c28 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	695b      	ldr	r3, [r3, #20]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d104      	bne.n	8010c28 <osMessageQueueNew+0xac>
          mem = 0;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	623b      	str	r3, [r7, #32]
 8010c22:	e001      	b.n	8010c28 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010c28:	6a3b      	ldr	r3, [r7, #32]
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d10c      	bne.n	8010c48 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	691a      	ldr	r2, [r3, #16]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6899      	ldr	r1, [r3, #8]
 8010c36:	2300      	movs	r3, #0
 8010c38:	9300      	str	r3, [sp, #0]
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	68b9      	ldr	r1, [r7, #8]
 8010c3e:	68f8      	ldr	r0, [r7, #12]
 8010c40:	f000 fa58 	bl	80110f4 <xQueueGenericCreateStatic>
 8010c44:	6278      	str	r0, [r7, #36]	; 0x24
 8010c46:	e008      	b.n	8010c5a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010c48:	6a3b      	ldr	r3, [r7, #32]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d105      	bne.n	8010c5a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8010c4e:	2200      	movs	r2, #0
 8010c50:	68b9      	ldr	r1, [r7, #8]
 8010c52:	68f8      	ldr	r0, [r7, #12]
 8010c54:	f000 fac1 	bl	80111da <xQueueGenericCreate>
 8010c58:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d00c      	beq.n	8010c7a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d003      	beq.n	8010c6e <osMessageQueueNew+0xf2>
        name = attr->name;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	61fb      	str	r3, [r7, #28]
 8010c6c:	e001      	b.n	8010c72 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8010c72:	69f9      	ldr	r1, [r7, #28]
 8010c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c76:	f001 f8df 	bl	8011e38 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3728      	adds	r7, #40	; 0x28
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}
 8010c84:	200001f8 	.word	0x200001f8

08010c88 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b08a      	sub	sp, #40	; 0x28
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	603b      	str	r3, [r7, #0]
 8010c94:	4613      	mov	r3, r2
 8010c96:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ca0:	f3ef 8305 	mrs	r3, IPSR
 8010ca4:	61fb      	str	r3, [r7, #28]
  return(result);
 8010ca6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d10f      	bne.n	8010ccc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cac:	f3ef 8310 	mrs	r3, PRIMASK
 8010cb0:	61bb      	str	r3, [r7, #24]
  return(result);
 8010cb2:	69bb      	ldr	r3, [r7, #24]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d105      	bne.n	8010cc4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010cb8:	f3ef 8311 	mrs	r3, BASEPRI
 8010cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d02c      	beq.n	8010d1e <osMessageQueuePut+0x96>
 8010cc4:	4b28      	ldr	r3, [pc, #160]	; (8010d68 <osMessageQueuePut+0xe0>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	2b02      	cmp	r3, #2
 8010cca:	d128      	bne.n	8010d1e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ccc:	6a3b      	ldr	r3, [r7, #32]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d005      	beq.n	8010cde <osMessageQueuePut+0x56>
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <osMessageQueuePut+0x56>
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d003      	beq.n	8010ce6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8010cde:	f06f 0303 	mvn.w	r3, #3
 8010ce2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010ce4:	e039      	b.n	8010d5a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010cea:	f107 0210 	add.w	r2, r7, #16
 8010cee:	2300      	movs	r3, #0
 8010cf0:	68b9      	ldr	r1, [r7, #8]
 8010cf2:	6a38      	ldr	r0, [r7, #32]
 8010cf4:	f000 fc82 	bl	80115fc <xQueueGenericSendFromISR>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d003      	beq.n	8010d06 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8010cfe:	f06f 0302 	mvn.w	r3, #2
 8010d02:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010d04:	e029      	b.n	8010d5a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d026      	beq.n	8010d5a <osMessageQueuePut+0xd2>
 8010d0c:	4b17      	ldr	r3, [pc, #92]	; (8010d6c <osMessageQueuePut+0xe4>)
 8010d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	f3bf 8f4f 	dsb	sy
 8010d18:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010d1c:	e01d      	b.n	8010d5a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010d1e:	6a3b      	ldr	r3, [r7, #32]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d002      	beq.n	8010d2a <osMessageQueuePut+0xa2>
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d103      	bne.n	8010d32 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010d2a:	f06f 0303 	mvn.w	r3, #3
 8010d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d30:	e014      	b.n	8010d5c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010d32:	2300      	movs	r3, #0
 8010d34:	683a      	ldr	r2, [r7, #0]
 8010d36:	68b9      	ldr	r1, [r7, #8]
 8010d38:	6a38      	ldr	r0, [r7, #32]
 8010d3a:	f000 fb65 	bl	8011408 <xQueueGenericSend>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	d00b      	beq.n	8010d5c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d003      	beq.n	8010d52 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010d4a:	f06f 0301 	mvn.w	r3, #1
 8010d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8010d50:	e004      	b.n	8010d5c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8010d52:	f06f 0302 	mvn.w	r3, #2
 8010d56:	627b      	str	r3, [r7, #36]	; 0x24
 8010d58:	e000      	b.n	8010d5c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010d5a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3728      	adds	r7, #40	; 0x28
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	200001f8 	.word	0x200001f8
 8010d6c:	e000ed04 	.word	0xe000ed04

08010d70 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b08a      	sub	sp, #40	; 0x28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60f8      	str	r0, [r7, #12]
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
 8010d7c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010d82:	2300      	movs	r3, #0
 8010d84:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d86:	f3ef 8305 	mrs	r3, IPSR
 8010d8a:	61fb      	str	r3, [r7, #28]
  return(result);
 8010d8c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d10f      	bne.n	8010db2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d92:	f3ef 8310 	mrs	r3, PRIMASK
 8010d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d105      	bne.n	8010daa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8010da2:	617b      	str	r3, [r7, #20]
  return(result);
 8010da4:	697b      	ldr	r3, [r7, #20]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d02c      	beq.n	8010e04 <osMessageQueueGet+0x94>
 8010daa:	4b28      	ldr	r3, [pc, #160]	; (8010e4c <osMessageQueueGet+0xdc>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d128      	bne.n	8010e04 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010db2:	6a3b      	ldr	r3, [r7, #32]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d005      	beq.n	8010dc4 <osMessageQueueGet+0x54>
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d002      	beq.n	8010dc4 <osMessageQueueGet+0x54>
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d003      	beq.n	8010dcc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8010dc4:	f06f 0303 	mvn.w	r3, #3
 8010dc8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010dca:	e038      	b.n	8010e3e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8010dcc:	2300      	movs	r3, #0
 8010dce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010dd0:	f107 0310 	add.w	r3, r7, #16
 8010dd4:	461a      	mov	r2, r3
 8010dd6:	68b9      	ldr	r1, [r7, #8]
 8010dd8:	6a38      	ldr	r0, [r7, #32]
 8010dda:	f000 fe87 	bl	8011aec <xQueueReceiveFromISR>
 8010dde:	4603      	mov	r3, r0
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	d003      	beq.n	8010dec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010de4:	f06f 0302 	mvn.w	r3, #2
 8010de8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010dea:	e028      	b.n	8010e3e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010dec:	693b      	ldr	r3, [r7, #16]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d025      	beq.n	8010e3e <osMessageQueueGet+0xce>
 8010df2:	4b17      	ldr	r3, [pc, #92]	; (8010e50 <osMessageQueueGet+0xe0>)
 8010df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	f3bf 8f4f 	dsb	sy
 8010dfe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e02:	e01c      	b.n	8010e3e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010e04:	6a3b      	ldr	r3, [r7, #32]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d002      	beq.n	8010e10 <osMessageQueueGet+0xa0>
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d103      	bne.n	8010e18 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8010e10:	f06f 0303 	mvn.w	r3, #3
 8010e14:	627b      	str	r3, [r7, #36]	; 0x24
 8010e16:	e013      	b.n	8010e40 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010e18:	683a      	ldr	r2, [r7, #0]
 8010e1a:	68b9      	ldr	r1, [r7, #8]
 8010e1c:	6a38      	ldr	r0, [r7, #32]
 8010e1e:	f000 fc81 	bl	8011724 <xQueueReceive>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d00b      	beq.n	8010e40 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d003      	beq.n	8010e36 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8010e2e:	f06f 0301 	mvn.w	r3, #1
 8010e32:	627b      	str	r3, [r7, #36]	; 0x24
 8010e34:	e004      	b.n	8010e40 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010e36:	f06f 0302 	mvn.w	r3, #2
 8010e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e3c:	e000      	b.n	8010e40 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010e3e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3728      	adds	r7, #40	; 0x28
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	200001f8 	.word	0x200001f8
 8010e50:	e000ed04 	.word	0xe000ed04

08010e54 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010e54:	b480      	push	{r7}
 8010e56:	b085      	sub	sp, #20
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	60f8      	str	r0, [r7, #12]
 8010e5c:	60b9      	str	r1, [r7, #8]
 8010e5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	4a07      	ldr	r2, [pc, #28]	; (8010e80 <vApplicationGetIdleTaskMemory+0x2c>)
 8010e64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	4a06      	ldr	r2, [pc, #24]	; (8010e84 <vApplicationGetIdleTaskMemory+0x30>)
 8010e6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	2280      	movs	r2, #128	; 0x80
 8010e70:	601a      	str	r2, [r3, #0]
}
 8010e72:	bf00      	nop
 8010e74:	3714      	adds	r7, #20
 8010e76:	46bd      	mov	sp, r7
 8010e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop
 8010e80:	200001fc 	.word	0x200001fc
 8010e84:	20000258 	.word	0x20000258

08010e88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010e88:	b480      	push	{r7}
 8010e8a:	b085      	sub	sp, #20
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	4a07      	ldr	r2, [pc, #28]	; (8010eb4 <vApplicationGetTimerTaskMemory+0x2c>)
 8010e98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010e9a:	68bb      	ldr	r3, [r7, #8]
 8010e9c:	4a06      	ldr	r2, [pc, #24]	; (8010eb8 <vApplicationGetTimerTaskMemory+0x30>)
 8010e9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ea6:	601a      	str	r2, [r3, #0]
}
 8010ea8:	bf00      	nop
 8010eaa:	3714      	adds	r7, #20
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr
 8010eb4:	20000458 	.word	0x20000458
 8010eb8:	200004b4 	.word	0x200004b4

08010ebc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b083      	sub	sp, #12
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f103 0208 	add.w	r2, r3, #8
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ed4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f103 0208 	add.w	r2, r3, #8
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f103 0208 	add.w	r2, r3, #8
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010ef0:	bf00      	nop
 8010ef2:	370c      	adds	r7, #12
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr

08010efc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010efc:	b480      	push	{r7}
 8010efe:	b083      	sub	sp, #12
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010f0a:	bf00      	nop
 8010f0c:	370c      	adds	r7, #12
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr

08010f16 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f16:	b480      	push	{r7}
 8010f18:	b085      	sub	sp, #20
 8010f1a:	af00      	add	r7, sp, #0
 8010f1c:	6078      	str	r0, [r7, #4]
 8010f1e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	685b      	ldr	r3, [r3, #4]
 8010f24:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	68fa      	ldr	r2, [r7, #12]
 8010f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	689a      	ldr	r2, [r3, #8]
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	689b      	ldr	r3, [r3, #8]
 8010f38:	683a      	ldr	r2, [r7, #0]
 8010f3a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	683a      	ldr	r2, [r7, #0]
 8010f40:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	1c5a      	adds	r2, r3, #1
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	601a      	str	r2, [r3, #0]
}
 8010f52:	bf00      	nop
 8010f54:	3714      	adds	r7, #20
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr

08010f5e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010f5e:	b480      	push	{r7}
 8010f60:	b085      	sub	sp, #20
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
 8010f66:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010f68:	683b      	ldr	r3, [r7, #0]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f74:	d103      	bne.n	8010f7e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	60fb      	str	r3, [r7, #12]
 8010f7c:	e00c      	b.n	8010f98 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	3308      	adds	r3, #8
 8010f82:	60fb      	str	r3, [r7, #12]
 8010f84:	e002      	b.n	8010f8c <vListInsert+0x2e>
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	60fb      	str	r3, [r7, #12]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	68ba      	ldr	r2, [r7, #8]
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d2f6      	bcs.n	8010f86 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	685a      	ldr	r2, [r3, #4]
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	68fa      	ldr	r2, [r7, #12]
 8010fac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	683a      	ldr	r2, [r7, #0]
 8010fb2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	1c5a      	adds	r2, r3, #1
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	601a      	str	r2, [r3, #0]
}
 8010fc4:	bf00      	nop
 8010fc6:	3714      	adds	r7, #20
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b085      	sub	sp, #20
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	6892      	ldr	r2, [r2, #8]
 8010fe6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	687a      	ldr	r2, [r7, #4]
 8010fee:	6852      	ldr	r2, [r2, #4]
 8010ff0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	685b      	ldr	r3, [r3, #4]
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d103      	bne.n	8011004 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	689a      	ldr	r2, [r3, #8]
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2200      	movs	r2, #0
 8011008:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	1e5a      	subs	r2, r3, #1
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	681b      	ldr	r3, [r3, #0]
}
 8011018:	4618      	mov	r0, r3
 801101a:	3714      	adds	r7, #20
 801101c:	46bd      	mov	sp, r7
 801101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011022:	4770      	bx	lr

08011024 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011024:	b580      	push	{r7, lr}
 8011026:	b084      	sub	sp, #16
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	2b00      	cmp	r3, #0
 8011036:	d109      	bne.n	801104c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801103c:	f383 8811 	msr	BASEPRI, r3
 8011040:	f3bf 8f6f 	isb	sy
 8011044:	f3bf 8f4f 	dsb	sy
 8011048:	60bb      	str	r3, [r7, #8]
 801104a:	e7fe      	b.n	801104a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 801104c:	f002 fd36 	bl	8013abc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	681a      	ldr	r2, [r3, #0]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011058:	68f9      	ldr	r1, [r7, #12]
 801105a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801105c:	fb01 f303 	mul.w	r3, r1, r3
 8011060:	441a      	add	r2, r3
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	2200      	movs	r2, #0
 801106a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681a      	ldr	r2, [r3, #0]
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801107c:	3b01      	subs	r3, #1
 801107e:	68f9      	ldr	r1, [r7, #12]
 8011080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011082:	fb01 f303 	mul.w	r3, r1, r3
 8011086:	441a      	add	r2, r3
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	22ff      	movs	r2, #255	; 0xff
 8011090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	22ff      	movs	r2, #255	; 0xff
 8011098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d114      	bne.n	80110cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	691b      	ldr	r3, [r3, #16]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d01a      	beq.n	80110e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	3310      	adds	r3, #16
 80110ae:	4618      	mov	r0, r3
 80110b0:	f001 fc3e 	bl	8012930 <xTaskRemoveFromEventList>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d012      	beq.n	80110e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80110ba:	4b0d      	ldr	r3, [pc, #52]	; (80110f0 <xQueueGenericReset+0xcc>)
 80110bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110c0:	601a      	str	r2, [r3, #0]
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	f3bf 8f6f 	isb	sy
 80110ca:	e009      	b.n	80110e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	3310      	adds	r3, #16
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7ff fef3 	bl	8010ebc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	3324      	adds	r3, #36	; 0x24
 80110da:	4618      	mov	r0, r3
 80110dc:	f7ff feee 	bl	8010ebc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80110e0:	f002 fd1a 	bl	8013b18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80110e4:	2301      	movs	r3, #1
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3710      	adds	r7, #16
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	e000ed04 	.word	0xe000ed04

080110f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b08e      	sub	sp, #56	; 0x38
 80110f8:	af02      	add	r7, sp, #8
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	607a      	str	r2, [r7, #4]
 8011100:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d109      	bne.n	801111c <xQueueGenericCreateStatic+0x28>
 8011108:	f04f 0350 	mov.w	r3, #80	; 0x50
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	62bb      	str	r3, [r7, #40]	; 0x28
 801111a:	e7fe      	b.n	801111a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d109      	bne.n	8011136 <xQueueGenericCreateStatic+0x42>
 8011122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011126:	f383 8811 	msr	BASEPRI, r3
 801112a:	f3bf 8f6f 	isb	sy
 801112e:	f3bf 8f4f 	dsb	sy
 8011132:	627b      	str	r3, [r7, #36]	; 0x24
 8011134:	e7fe      	b.n	8011134 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d002      	beq.n	8011142 <xQueueGenericCreateStatic+0x4e>
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d001      	beq.n	8011146 <xQueueGenericCreateStatic+0x52>
 8011142:	2301      	movs	r3, #1
 8011144:	e000      	b.n	8011148 <xQueueGenericCreateStatic+0x54>
 8011146:	2300      	movs	r3, #0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d109      	bne.n	8011160 <xQueueGenericCreateStatic+0x6c>
 801114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011150:	f383 8811 	msr	BASEPRI, r3
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	f3bf 8f4f 	dsb	sy
 801115c:	623b      	str	r3, [r7, #32]
 801115e:	e7fe      	b.n	801115e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d102      	bne.n	801116c <xQueueGenericCreateStatic+0x78>
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d101      	bne.n	8011170 <xQueueGenericCreateStatic+0x7c>
 801116c:	2301      	movs	r3, #1
 801116e:	e000      	b.n	8011172 <xQueueGenericCreateStatic+0x7e>
 8011170:	2300      	movs	r3, #0
 8011172:	2b00      	cmp	r3, #0
 8011174:	d109      	bne.n	801118a <xQueueGenericCreateStatic+0x96>
 8011176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801117a:	f383 8811 	msr	BASEPRI, r3
 801117e:	f3bf 8f6f 	isb	sy
 8011182:	f3bf 8f4f 	dsb	sy
 8011186:	61fb      	str	r3, [r7, #28]
 8011188:	e7fe      	b.n	8011188 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801118a:	2350      	movs	r3, #80	; 0x50
 801118c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	2b50      	cmp	r3, #80	; 0x50
 8011192:	d009      	beq.n	80111a8 <xQueueGenericCreateStatic+0xb4>
 8011194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011198:	f383 8811 	msr	BASEPRI, r3
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	61bb      	str	r3, [r7, #24]
 80111a6:	e7fe      	b.n	80111a6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80111a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80111ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d00d      	beq.n	80111d0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80111b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b6:	2201      	movs	r2, #1
 80111b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80111bc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	4613      	mov	r3, r2
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	68b9      	ldr	r1, [r7, #8]
 80111ca:	68f8      	ldr	r0, [r7, #12]
 80111cc:	f000 f844 	bl	8011258 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80111d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3730      	adds	r7, #48	; 0x30
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b08a      	sub	sp, #40	; 0x28
 80111de:	af02      	add	r7, sp, #8
 80111e0:	60f8      	str	r0, [r7, #12]
 80111e2:	60b9      	str	r1, [r7, #8]
 80111e4:	4613      	mov	r3, r2
 80111e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d109      	bne.n	8011202 <xQueueGenericCreate+0x28>
 80111ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f2:	f383 8811 	msr	BASEPRI, r3
 80111f6:	f3bf 8f6f 	isb	sy
 80111fa:	f3bf 8f4f 	dsb	sy
 80111fe:	613b      	str	r3, [r7, #16]
 8011200:	e7fe      	b.n	8011200 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d102      	bne.n	801120e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011208:	2300      	movs	r3, #0
 801120a:	61fb      	str	r3, [r7, #28]
 801120c:	e004      	b.n	8011218 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	68ba      	ldr	r2, [r7, #8]
 8011212:	fb02 f303 	mul.w	r3, r2, r3
 8011216:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011218:	69fb      	ldr	r3, [r7, #28]
 801121a:	3350      	adds	r3, #80	; 0x50
 801121c:	4618      	mov	r0, r3
 801121e:	f002 fd67 	bl	8013cf0 <pvPortMalloc>
 8011222:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d011      	beq.n	801124e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801122a:	69bb      	ldr	r3, [r7, #24]
 801122c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	3350      	adds	r3, #80	; 0x50
 8011232:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	2200      	movs	r2, #0
 8011238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801123c:	79fa      	ldrb	r2, [r7, #7]
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	9300      	str	r3, [sp, #0]
 8011242:	4613      	mov	r3, r2
 8011244:	697a      	ldr	r2, [r7, #20]
 8011246:	68b9      	ldr	r1, [r7, #8]
 8011248:	68f8      	ldr	r0, [r7, #12]
 801124a:	f000 f805 	bl	8011258 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801124e:	69bb      	ldr	r3, [r7, #24]
	}
 8011250:	4618      	mov	r0, r3
 8011252:	3720      	adds	r7, #32
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	60f8      	str	r0, [r7, #12]
 8011260:	60b9      	str	r1, [r7, #8]
 8011262:	607a      	str	r2, [r7, #4]
 8011264:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d103      	bne.n	8011274 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801126c:	69bb      	ldr	r3, [r7, #24]
 801126e:	69ba      	ldr	r2, [r7, #24]
 8011270:	601a      	str	r2, [r3, #0]
 8011272:	e002      	b.n	801127a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011274:	69bb      	ldr	r3, [r7, #24]
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801127a:	69bb      	ldr	r3, [r7, #24]
 801127c:	68fa      	ldr	r2, [r7, #12]
 801127e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011280:	69bb      	ldr	r3, [r7, #24]
 8011282:	68ba      	ldr	r2, [r7, #8]
 8011284:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011286:	2101      	movs	r1, #1
 8011288:	69b8      	ldr	r0, [r7, #24]
 801128a:	f7ff fecb 	bl	8011024 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801128e:	69bb      	ldr	r3, [r7, #24]
 8011290:	78fa      	ldrb	r2, [r7, #3]
 8011292:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011296:	bf00      	nop
 8011298:	3710      	adds	r7, #16
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}

0801129e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b082      	sub	sp, #8
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00e      	beq.n	80112ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2200      	movs	r2, #0
 80112b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2200      	movs	r2, #0
 80112b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2200      	movs	r2, #0
 80112bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80112be:	2300      	movs	r3, #0
 80112c0:	2200      	movs	r2, #0
 80112c2:	2100      	movs	r1, #0
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 f89f 	bl	8011408 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80112ca:	bf00      	nop
 80112cc:	3708      	adds	r7, #8
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}

080112d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80112d2:	b580      	push	{r7, lr}
 80112d4:	b086      	sub	sp, #24
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	4603      	mov	r3, r0
 80112da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80112dc:	2301      	movs	r3, #1
 80112de:	617b      	str	r3, [r7, #20]
 80112e0:	2300      	movs	r3, #0
 80112e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80112e4:	79fb      	ldrb	r3, [r7, #7]
 80112e6:	461a      	mov	r2, r3
 80112e8:	6939      	ldr	r1, [r7, #16]
 80112ea:	6978      	ldr	r0, [r7, #20]
 80112ec:	f7ff ff75 	bl	80111da <xQueueGenericCreate>
 80112f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80112f2:	68f8      	ldr	r0, [r7, #12]
 80112f4:	f7ff ffd3 	bl	801129e <prvInitialiseMutex>

		return xNewQueue;
 80112f8:	68fb      	ldr	r3, [r7, #12]
	}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3718      	adds	r7, #24
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011302:	b580      	push	{r7, lr}
 8011304:	b088      	sub	sp, #32
 8011306:	af02      	add	r7, sp, #8
 8011308:	4603      	mov	r3, r0
 801130a:	6039      	str	r1, [r7, #0]
 801130c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801130e:	2301      	movs	r3, #1
 8011310:	617b      	str	r3, [r7, #20]
 8011312:	2300      	movs	r3, #0
 8011314:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011316:	79fb      	ldrb	r3, [r7, #7]
 8011318:	9300      	str	r3, [sp, #0]
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	2200      	movs	r2, #0
 801131e:	6939      	ldr	r1, [r7, #16]
 8011320:	6978      	ldr	r0, [r7, #20]
 8011322:	f7ff fee7 	bl	80110f4 <xQueueGenericCreateStatic>
 8011326:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011328:	68f8      	ldr	r0, [r7, #12]
 801132a:	f7ff ffb8 	bl	801129e <prvInitialiseMutex>

		return xNewQueue;
 801132e:	68fb      	ldr	r3, [r7, #12]
	}
 8011330:	4618      	mov	r0, r3
 8011332:	3718      	adds	r7, #24
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8011338:	b590      	push	{r4, r7, lr}
 801133a:	b087      	sub	sp, #28
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d109      	bne.n	801135e <xQueueGiveMutexRecursive+0x26>
 801134a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134e:	f383 8811 	msr	BASEPRI, r3
 8011352:	f3bf 8f6f 	isb	sy
 8011356:	f3bf 8f4f 	dsb	sy
 801135a:	60fb      	str	r3, [r7, #12]
 801135c:	e7fe      	b.n	801135c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	689c      	ldr	r4, [r3, #8]
 8011362:	f001 fc9b 	bl	8012c9c <xTaskGetCurrentTaskHandle>
 8011366:	4603      	mov	r3, r0
 8011368:	429c      	cmp	r4, r3
 801136a:	d111      	bne.n	8011390 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	1e5a      	subs	r2, r3, #1
 8011372:	693b      	ldr	r3, [r7, #16]
 8011374:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	68db      	ldr	r3, [r3, #12]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d105      	bne.n	801138a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801137e:	2300      	movs	r3, #0
 8011380:	2200      	movs	r2, #0
 8011382:	2100      	movs	r1, #0
 8011384:	6938      	ldr	r0, [r7, #16]
 8011386:	f000 f83f 	bl	8011408 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 801138a:	2301      	movs	r3, #1
 801138c:	617b      	str	r3, [r7, #20]
 801138e:	e001      	b.n	8011394 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8011390:	2300      	movs	r3, #0
 8011392:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8011394:	697b      	ldr	r3, [r7, #20]
	}
 8011396:	4618      	mov	r0, r3
 8011398:	371c      	adds	r7, #28
 801139a:	46bd      	mov	sp, r7
 801139c:	bd90      	pop	{r4, r7, pc}

0801139e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 801139e:	b590      	push	{r4, r7, lr}
 80113a0:	b087      	sub	sp, #28
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	6078      	str	r0, [r7, #4]
 80113a6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d109      	bne.n	80113c6 <xQueueTakeMutexRecursive+0x28>
 80113b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b6:	f383 8811 	msr	BASEPRI, r3
 80113ba:	f3bf 8f6f 	isb	sy
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	60fb      	str	r3, [r7, #12]
 80113c4:	e7fe      	b.n	80113c4 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	689c      	ldr	r4, [r3, #8]
 80113ca:	f001 fc67 	bl	8012c9c <xTaskGetCurrentTaskHandle>
 80113ce:	4603      	mov	r3, r0
 80113d0:	429c      	cmp	r4, r3
 80113d2:	d107      	bne.n	80113e4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80113d4:	693b      	ldr	r3, [r7, #16]
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80113de:	2301      	movs	r3, #1
 80113e0:	617b      	str	r3, [r7, #20]
 80113e2:	e00c      	b.n	80113fe <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80113e4:	6839      	ldr	r1, [r7, #0]
 80113e6:	6938      	ldr	r0, [r7, #16]
 80113e8:	f000 fa78 	bl	80118dc <xQueueSemaphoreTake>
 80113ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d004      	beq.n	80113fe <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	1c5a      	adds	r2, r3, #1
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80113fe:	697b      	ldr	r3, [r7, #20]
	}
 8011400:	4618      	mov	r0, r3
 8011402:	371c      	adds	r7, #28
 8011404:	46bd      	mov	sp, r7
 8011406:	bd90      	pop	{r4, r7, pc}

08011408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b08e      	sub	sp, #56	; 0x38
 801140c:	af00      	add	r7, sp, #0
 801140e:	60f8      	str	r0, [r7, #12]
 8011410:	60b9      	str	r1, [r7, #8]
 8011412:	607a      	str	r2, [r7, #4]
 8011414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011416:	2300      	movs	r3, #0
 8011418:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011420:	2b00      	cmp	r3, #0
 8011422:	d109      	bne.n	8011438 <xQueueGenericSend+0x30>
 8011424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011428:	f383 8811 	msr	BASEPRI, r3
 801142c:	f3bf 8f6f 	isb	sy
 8011430:	f3bf 8f4f 	dsb	sy
 8011434:	62bb      	str	r3, [r7, #40]	; 0x28
 8011436:	e7fe      	b.n	8011436 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d103      	bne.n	8011446 <xQueueGenericSend+0x3e>
 801143e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011442:	2b00      	cmp	r3, #0
 8011444:	d101      	bne.n	801144a <xQueueGenericSend+0x42>
 8011446:	2301      	movs	r3, #1
 8011448:	e000      	b.n	801144c <xQueueGenericSend+0x44>
 801144a:	2300      	movs	r3, #0
 801144c:	2b00      	cmp	r3, #0
 801144e:	d109      	bne.n	8011464 <xQueueGenericSend+0x5c>
 8011450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	627b      	str	r3, [r7, #36]	; 0x24
 8011462:	e7fe      	b.n	8011462 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	2b02      	cmp	r3, #2
 8011468:	d103      	bne.n	8011472 <xQueueGenericSend+0x6a>
 801146a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801146e:	2b01      	cmp	r3, #1
 8011470:	d101      	bne.n	8011476 <xQueueGenericSend+0x6e>
 8011472:	2301      	movs	r3, #1
 8011474:	e000      	b.n	8011478 <xQueueGenericSend+0x70>
 8011476:	2300      	movs	r3, #0
 8011478:	2b00      	cmp	r3, #0
 801147a:	d109      	bne.n	8011490 <xQueueGenericSend+0x88>
 801147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011480:	f383 8811 	msr	BASEPRI, r3
 8011484:	f3bf 8f6f 	isb	sy
 8011488:	f3bf 8f4f 	dsb	sy
 801148c:	623b      	str	r3, [r7, #32]
 801148e:	e7fe      	b.n	801148e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011490:	f001 fc14 	bl	8012cbc <xTaskGetSchedulerState>
 8011494:	4603      	mov	r3, r0
 8011496:	2b00      	cmp	r3, #0
 8011498:	d102      	bne.n	80114a0 <xQueueGenericSend+0x98>
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d101      	bne.n	80114a4 <xQueueGenericSend+0x9c>
 80114a0:	2301      	movs	r3, #1
 80114a2:	e000      	b.n	80114a6 <xQueueGenericSend+0x9e>
 80114a4:	2300      	movs	r3, #0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d109      	bne.n	80114be <xQueueGenericSend+0xb6>
 80114aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ae:	f383 8811 	msr	BASEPRI, r3
 80114b2:	f3bf 8f6f 	isb	sy
 80114b6:	f3bf 8f4f 	dsb	sy
 80114ba:	61fb      	str	r3, [r7, #28]
 80114bc:	e7fe      	b.n	80114bc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114be:	f002 fafd 	bl	8013abc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80114c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d302      	bcc.n	80114d4 <xQueueGenericSend+0xcc>
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d129      	bne.n	8011528 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80114d4:	683a      	ldr	r2, [r7, #0]
 80114d6:	68b9      	ldr	r1, [r7, #8]
 80114d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114da:	f000 fb9c 	bl	8011c16 <prvCopyDataToQueue>
 80114de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d010      	beq.n	801150a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114ea:	3324      	adds	r3, #36	; 0x24
 80114ec:	4618      	mov	r0, r3
 80114ee:	f001 fa1f 	bl	8012930 <xTaskRemoveFromEventList>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d013      	beq.n	8011520 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80114f8:	4b3f      	ldr	r3, [pc, #252]	; (80115f8 <xQueueGenericSend+0x1f0>)
 80114fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114fe:	601a      	str	r2, [r3, #0]
 8011500:	f3bf 8f4f 	dsb	sy
 8011504:	f3bf 8f6f 	isb	sy
 8011508:	e00a      	b.n	8011520 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	2b00      	cmp	r3, #0
 801150e:	d007      	beq.n	8011520 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011510:	4b39      	ldr	r3, [pc, #228]	; (80115f8 <xQueueGenericSend+0x1f0>)
 8011512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011516:	601a      	str	r2, [r3, #0]
 8011518:	f3bf 8f4f 	dsb	sy
 801151c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011520:	f002 fafa 	bl	8013b18 <vPortExitCritical>
				return pdPASS;
 8011524:	2301      	movs	r3, #1
 8011526:	e063      	b.n	80115f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d103      	bne.n	8011536 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801152e:	f002 faf3 	bl	8013b18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011532:	2300      	movs	r3, #0
 8011534:	e05c      	b.n	80115f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011538:	2b00      	cmp	r3, #0
 801153a:	d106      	bne.n	801154a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801153c:	f107 0314 	add.w	r3, r7, #20
 8011540:	4618      	mov	r0, r3
 8011542:	f001 fa57 	bl	80129f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011546:	2301      	movs	r3, #1
 8011548:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801154a:	f002 fae5 	bl	8013b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801154e:	f000 ffd3 	bl	80124f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011552:	f002 fab3 	bl	8013abc <vPortEnterCritical>
 8011556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801155c:	b25b      	sxtb	r3, r3
 801155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011562:	d103      	bne.n	801156c <xQueueGenericSend+0x164>
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	2200      	movs	r2, #0
 8011568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011572:	b25b      	sxtb	r3, r3
 8011574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011578:	d103      	bne.n	8011582 <xQueueGenericSend+0x17a>
 801157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157c:	2200      	movs	r2, #0
 801157e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011582:	f002 fac9 	bl	8013b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011586:	1d3a      	adds	r2, r7, #4
 8011588:	f107 0314 	add.w	r3, r7, #20
 801158c:	4611      	mov	r1, r2
 801158e:	4618      	mov	r0, r3
 8011590:	f001 fa46 	bl	8012a20 <xTaskCheckForTimeOut>
 8011594:	4603      	mov	r3, r0
 8011596:	2b00      	cmp	r3, #0
 8011598:	d124      	bne.n	80115e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801159a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801159c:	f000 fc33 	bl	8011e06 <prvIsQueueFull>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d018      	beq.n	80115d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80115a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a8:	3310      	adds	r3, #16
 80115aa:	687a      	ldr	r2, [r7, #4]
 80115ac:	4611      	mov	r1, r2
 80115ae:	4618      	mov	r0, r3
 80115b0:	f001 f970 	bl	8012894 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80115b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115b6:	f000 fbbe 	bl	8011d36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80115ba:	f000 ffab 	bl	8012514 <xTaskResumeAll>
 80115be:	4603      	mov	r3, r0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	f47f af7c 	bne.w	80114be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80115c6:	4b0c      	ldr	r3, [pc, #48]	; (80115f8 <xQueueGenericSend+0x1f0>)
 80115c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115cc:	601a      	str	r2, [r3, #0]
 80115ce:	f3bf 8f4f 	dsb	sy
 80115d2:	f3bf 8f6f 	isb	sy
 80115d6:	e772      	b.n	80114be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80115d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115da:	f000 fbac 	bl	8011d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80115de:	f000 ff99 	bl	8012514 <xTaskResumeAll>
 80115e2:	e76c      	b.n	80114be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80115e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115e6:	f000 fba6 	bl	8011d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80115ea:	f000 ff93 	bl	8012514 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80115ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80115f0:	4618      	mov	r0, r3
 80115f2:	3738      	adds	r7, #56	; 0x38
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	e000ed04 	.word	0xe000ed04

080115fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b08e      	sub	sp, #56	; 0x38
 8011600:	af00      	add	r7, sp, #0
 8011602:	60f8      	str	r0, [r7, #12]
 8011604:	60b9      	str	r1, [r7, #8]
 8011606:	607a      	str	r2, [r7, #4]
 8011608:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011610:	2b00      	cmp	r3, #0
 8011612:	d109      	bne.n	8011628 <xQueueGenericSendFromISR+0x2c>
 8011614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011618:	f383 8811 	msr	BASEPRI, r3
 801161c:	f3bf 8f6f 	isb	sy
 8011620:	f3bf 8f4f 	dsb	sy
 8011624:	627b      	str	r3, [r7, #36]	; 0x24
 8011626:	e7fe      	b.n	8011626 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d103      	bne.n	8011636 <xQueueGenericSendFromISR+0x3a>
 801162e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011632:	2b00      	cmp	r3, #0
 8011634:	d101      	bne.n	801163a <xQueueGenericSendFromISR+0x3e>
 8011636:	2301      	movs	r3, #1
 8011638:	e000      	b.n	801163c <xQueueGenericSendFromISR+0x40>
 801163a:	2300      	movs	r3, #0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d109      	bne.n	8011654 <xQueueGenericSendFromISR+0x58>
 8011640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011644:	f383 8811 	msr	BASEPRI, r3
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	623b      	str	r3, [r7, #32]
 8011652:	e7fe      	b.n	8011652 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	2b02      	cmp	r3, #2
 8011658:	d103      	bne.n	8011662 <xQueueGenericSendFromISR+0x66>
 801165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801165e:	2b01      	cmp	r3, #1
 8011660:	d101      	bne.n	8011666 <xQueueGenericSendFromISR+0x6a>
 8011662:	2301      	movs	r3, #1
 8011664:	e000      	b.n	8011668 <xQueueGenericSendFromISR+0x6c>
 8011666:	2300      	movs	r3, #0
 8011668:	2b00      	cmp	r3, #0
 801166a:	d109      	bne.n	8011680 <xQueueGenericSendFromISR+0x84>
 801166c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011670:	f383 8811 	msr	BASEPRI, r3
 8011674:	f3bf 8f6f 	isb	sy
 8011678:	f3bf 8f4f 	dsb	sy
 801167c:	61fb      	str	r3, [r7, #28]
 801167e:	e7fe      	b.n	801167e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011680:	f002 faf8 	bl	8013c74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011684:	f3ef 8211 	mrs	r2, BASEPRI
 8011688:	f04f 0350 	mov.w	r3, #80	; 0x50
 801168c:	f383 8811 	msr	BASEPRI, r3
 8011690:	f3bf 8f6f 	isb	sy
 8011694:	f3bf 8f4f 	dsb	sy
 8011698:	61ba      	str	r2, [r7, #24]
 801169a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801169c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801169e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d302      	bcc.n	80116b2 <xQueueGenericSendFromISR+0xb6>
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	2b02      	cmp	r3, #2
 80116b0:	d12c      	bne.n	801170c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80116b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80116bc:	683a      	ldr	r2, [r7, #0]
 80116be:	68b9      	ldr	r1, [r7, #8]
 80116c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116c2:	f000 faa8 	bl	8011c16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80116c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80116ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ce:	d112      	bne.n	80116f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	d016      	beq.n	8011706 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80116d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116da:	3324      	adds	r3, #36	; 0x24
 80116dc:	4618      	mov	r0, r3
 80116de:	f001 f927 	bl	8012930 <xTaskRemoveFromEventList>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d00e      	beq.n	8011706 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00b      	beq.n	8011706 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2201      	movs	r2, #1
 80116f2:	601a      	str	r2, [r3, #0]
 80116f4:	e007      	b.n	8011706 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80116f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80116fa:	3301      	adds	r3, #1
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	b25a      	sxtb	r2, r3
 8011700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011706:	2301      	movs	r3, #1
 8011708:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801170a:	e001      	b.n	8011710 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801170c:	2300      	movs	r3, #0
 801170e:	637b      	str	r3, [r7, #52]	; 0x34
 8011710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011712:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801171c:	4618      	mov	r0, r3
 801171e:	3738      	adds	r7, #56	; 0x38
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b08c      	sub	sp, #48	; 0x30
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011730:	2300      	movs	r3, #0
 8011732:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801173a:	2b00      	cmp	r3, #0
 801173c:	d109      	bne.n	8011752 <xQueueReceive+0x2e>
	__asm volatile
 801173e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011742:	f383 8811 	msr	BASEPRI, r3
 8011746:	f3bf 8f6f 	isb	sy
 801174a:	f3bf 8f4f 	dsb	sy
 801174e:	623b      	str	r3, [r7, #32]
 8011750:	e7fe      	b.n	8011750 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d103      	bne.n	8011760 <xQueueReceive+0x3c>
 8011758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175c:	2b00      	cmp	r3, #0
 801175e:	d101      	bne.n	8011764 <xQueueReceive+0x40>
 8011760:	2301      	movs	r3, #1
 8011762:	e000      	b.n	8011766 <xQueueReceive+0x42>
 8011764:	2300      	movs	r3, #0
 8011766:	2b00      	cmp	r3, #0
 8011768:	d109      	bne.n	801177e <xQueueReceive+0x5a>
 801176a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176e:	f383 8811 	msr	BASEPRI, r3
 8011772:	f3bf 8f6f 	isb	sy
 8011776:	f3bf 8f4f 	dsb	sy
 801177a:	61fb      	str	r3, [r7, #28]
 801177c:	e7fe      	b.n	801177c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801177e:	f001 fa9d 	bl	8012cbc <xTaskGetSchedulerState>
 8011782:	4603      	mov	r3, r0
 8011784:	2b00      	cmp	r3, #0
 8011786:	d102      	bne.n	801178e <xQueueReceive+0x6a>
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d101      	bne.n	8011792 <xQueueReceive+0x6e>
 801178e:	2301      	movs	r3, #1
 8011790:	e000      	b.n	8011794 <xQueueReceive+0x70>
 8011792:	2300      	movs	r3, #0
 8011794:	2b00      	cmp	r3, #0
 8011796:	d109      	bne.n	80117ac <xQueueReceive+0x88>
 8011798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179c:	f383 8811 	msr	BASEPRI, r3
 80117a0:	f3bf 8f6f 	isb	sy
 80117a4:	f3bf 8f4f 	dsb	sy
 80117a8:	61bb      	str	r3, [r7, #24]
 80117aa:	e7fe      	b.n	80117aa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80117ac:	f002 f986 	bl	8013abc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d01f      	beq.n	80117fc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80117bc:	68b9      	ldr	r1, [r7, #8]
 80117be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117c0:	f000 fa93 	bl	8011cea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80117c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c6:	1e5a      	subs	r2, r3, #1
 80117c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ce:	691b      	ldr	r3, [r3, #16]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d00f      	beq.n	80117f4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d6:	3310      	adds	r3, #16
 80117d8:	4618      	mov	r0, r3
 80117da:	f001 f8a9 	bl	8012930 <xTaskRemoveFromEventList>
 80117de:	4603      	mov	r3, r0
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d007      	beq.n	80117f4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80117e4:	4b3c      	ldr	r3, [pc, #240]	; (80118d8 <xQueueReceive+0x1b4>)
 80117e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ea:	601a      	str	r2, [r3, #0]
 80117ec:	f3bf 8f4f 	dsb	sy
 80117f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80117f4:	f002 f990 	bl	8013b18 <vPortExitCritical>
				return pdPASS;
 80117f8:	2301      	movs	r3, #1
 80117fa:	e069      	b.n	80118d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d103      	bne.n	801180a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011802:	f002 f989 	bl	8013b18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011806:	2300      	movs	r3, #0
 8011808:	e062      	b.n	80118d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180c:	2b00      	cmp	r3, #0
 801180e:	d106      	bne.n	801181e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011810:	f107 0310 	add.w	r3, r7, #16
 8011814:	4618      	mov	r0, r3
 8011816:	f001 f8ed 	bl	80129f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801181a:	2301      	movs	r3, #1
 801181c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801181e:	f002 f97b 	bl	8013b18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011822:	f000 fe69 	bl	80124f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011826:	f002 f949 	bl	8013abc <vPortEnterCritical>
 801182a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801182c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011830:	b25b      	sxtb	r3, r3
 8011832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011836:	d103      	bne.n	8011840 <xQueueReceive+0x11c>
 8011838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183a:	2200      	movs	r2, #0
 801183c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011846:	b25b      	sxtb	r3, r3
 8011848:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184c:	d103      	bne.n	8011856 <xQueueReceive+0x132>
 801184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011850:	2200      	movs	r2, #0
 8011852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011856:	f002 f95f 	bl	8013b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801185a:	1d3a      	adds	r2, r7, #4
 801185c:	f107 0310 	add.w	r3, r7, #16
 8011860:	4611      	mov	r1, r2
 8011862:	4618      	mov	r0, r3
 8011864:	f001 f8dc 	bl	8012a20 <xTaskCheckForTimeOut>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d123      	bne.n	80118b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801186e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011870:	f000 fab3 	bl	8011dda <prvIsQueueEmpty>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d017      	beq.n	80118aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187c:	3324      	adds	r3, #36	; 0x24
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	4611      	mov	r1, r2
 8011882:	4618      	mov	r0, r3
 8011884:	f001 f806 	bl	8012894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801188a:	f000 fa54 	bl	8011d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801188e:	f000 fe41 	bl	8012514 <xTaskResumeAll>
 8011892:	4603      	mov	r3, r0
 8011894:	2b00      	cmp	r3, #0
 8011896:	d189      	bne.n	80117ac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8011898:	4b0f      	ldr	r3, [pc, #60]	; (80118d8 <xQueueReceive+0x1b4>)
 801189a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801189e:	601a      	str	r2, [r3, #0]
 80118a0:	f3bf 8f4f 	dsb	sy
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	e780      	b.n	80117ac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80118aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118ac:	f000 fa43 	bl	8011d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80118b0:	f000 fe30 	bl	8012514 <xTaskResumeAll>
 80118b4:	e77a      	b.n	80117ac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80118b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118b8:	f000 fa3d 	bl	8011d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80118bc:	f000 fe2a 	bl	8012514 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80118c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118c2:	f000 fa8a 	bl	8011dda <prvIsQueueEmpty>
 80118c6:	4603      	mov	r3, r0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	f43f af6f 	beq.w	80117ac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80118ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3730      	adds	r7, #48	; 0x30
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}
 80118d8:	e000ed04 	.word	0xe000ed04

080118dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b08e      	sub	sp, #56	; 0x38
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80118e6:	2300      	movs	r3, #0
 80118e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80118ee:	2300      	movs	r3, #0
 80118f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80118f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d109      	bne.n	801190c <xQueueSemaphoreTake+0x30>
 80118f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118fc:	f383 8811 	msr	BASEPRI, r3
 8011900:	f3bf 8f6f 	isb	sy
 8011904:	f3bf 8f4f 	dsb	sy
 8011908:	623b      	str	r3, [r7, #32]
 801190a:	e7fe      	b.n	801190a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801190c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011910:	2b00      	cmp	r3, #0
 8011912:	d009      	beq.n	8011928 <xQueueSemaphoreTake+0x4c>
 8011914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011918:	f383 8811 	msr	BASEPRI, r3
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	61fb      	str	r3, [r7, #28]
 8011926:	e7fe      	b.n	8011926 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011928:	f001 f9c8 	bl	8012cbc <xTaskGetSchedulerState>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d102      	bne.n	8011938 <xQueueSemaphoreTake+0x5c>
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d101      	bne.n	801193c <xQueueSemaphoreTake+0x60>
 8011938:	2301      	movs	r3, #1
 801193a:	e000      	b.n	801193e <xQueueSemaphoreTake+0x62>
 801193c:	2300      	movs	r3, #0
 801193e:	2b00      	cmp	r3, #0
 8011940:	d109      	bne.n	8011956 <xQueueSemaphoreTake+0x7a>
 8011942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011946:	f383 8811 	msr	BASEPRI, r3
 801194a:	f3bf 8f6f 	isb	sy
 801194e:	f3bf 8f4f 	dsb	sy
 8011952:	61bb      	str	r3, [r7, #24]
 8011954:	e7fe      	b.n	8011954 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011956:	f002 f8b1 	bl	8013abc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801195e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011962:	2b00      	cmp	r3, #0
 8011964:	d024      	beq.n	80119b0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011968:	1e5a      	subs	r2, r3, #1
 801196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d104      	bne.n	8011980 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011976:	f001 fb13 	bl	8012fa0 <pvTaskIncrementMutexHeldCount>
 801197a:	4602      	mov	r2, r0
 801197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011982:	691b      	ldr	r3, [r3, #16]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d00f      	beq.n	80119a8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198a:	3310      	adds	r3, #16
 801198c:	4618      	mov	r0, r3
 801198e:	f000 ffcf 	bl	8012930 <xTaskRemoveFromEventList>
 8011992:	4603      	mov	r3, r0
 8011994:	2b00      	cmp	r3, #0
 8011996:	d007      	beq.n	80119a8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011998:	4b53      	ldr	r3, [pc, #332]	; (8011ae8 <xQueueSemaphoreTake+0x20c>)
 801199a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801199e:	601a      	str	r2, [r3, #0]
 80119a0:	f3bf 8f4f 	dsb	sy
 80119a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80119a8:	f002 f8b6 	bl	8013b18 <vPortExitCritical>
				return pdPASS;
 80119ac:	2301      	movs	r3, #1
 80119ae:	e096      	b.n	8011ade <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d110      	bne.n	80119d8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80119b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d009      	beq.n	80119d0 <xQueueSemaphoreTake+0xf4>
 80119bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c0:	f383 8811 	msr	BASEPRI, r3
 80119c4:	f3bf 8f6f 	isb	sy
 80119c8:	f3bf 8f4f 	dsb	sy
 80119cc:	617b      	str	r3, [r7, #20]
 80119ce:	e7fe      	b.n	80119ce <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80119d0:	f002 f8a2 	bl	8013b18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80119d4:	2300      	movs	r3, #0
 80119d6:	e082      	b.n	8011ade <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80119d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d106      	bne.n	80119ec <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80119de:	f107 030c 	add.w	r3, r7, #12
 80119e2:	4618      	mov	r0, r3
 80119e4:	f001 f806 	bl	80129f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80119e8:	2301      	movs	r3, #1
 80119ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80119ec:	f002 f894 	bl	8013b18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80119f0:	f000 fd82 	bl	80124f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80119f4:	f002 f862 	bl	8013abc <vPortEnterCritical>
 80119f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119fe:	b25b      	sxtb	r3, r3
 8011a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a04:	d103      	bne.n	8011a0e <xQueueSemaphoreTake+0x132>
 8011a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a14:	b25b      	sxtb	r3, r3
 8011a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a1a:	d103      	bne.n	8011a24 <xQueueSemaphoreTake+0x148>
 8011a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011a24:	f002 f878 	bl	8013b18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011a28:	463a      	mov	r2, r7
 8011a2a:	f107 030c 	add.w	r3, r7, #12
 8011a2e:	4611      	mov	r1, r2
 8011a30:	4618      	mov	r0, r3
 8011a32:	f000 fff5 	bl	8012a20 <xTaskCheckForTimeOut>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d132      	bne.n	8011aa2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a3e:	f000 f9cc 	bl	8011dda <prvIsQueueEmpty>
 8011a42:	4603      	mov	r3, r0
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d026      	beq.n	8011a96 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d109      	bne.n	8011a64 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011a50:	f002 f834 	bl	8013abc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a56:	689b      	ldr	r3, [r3, #8]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f001 f94d 	bl	8012cf8 <xTaskPriorityInherit>
 8011a5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011a60:	f002 f85a 	bl	8013b18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a66:	3324      	adds	r3, #36	; 0x24
 8011a68:	683a      	ldr	r2, [r7, #0]
 8011a6a:	4611      	mov	r1, r2
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f000 ff11 	bl	8012894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011a72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a74:	f000 f95f 	bl	8011d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011a78:	f000 fd4c 	bl	8012514 <xTaskResumeAll>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f47f af69 	bne.w	8011956 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011a84:	4b18      	ldr	r3, [pc, #96]	; (8011ae8 <xQueueSemaphoreTake+0x20c>)
 8011a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a8a:	601a      	str	r2, [r3, #0]
 8011a8c:	f3bf 8f4f 	dsb	sy
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	e75f      	b.n	8011956 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a98:	f000 f94d 	bl	8011d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a9c:	f000 fd3a 	bl	8012514 <xTaskResumeAll>
 8011aa0:	e759      	b.n	8011956 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011aa4:	f000 f947 	bl	8011d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011aa8:	f000 fd34 	bl	8012514 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011aac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011aae:	f000 f994 	bl	8011dda <prvIsQueueEmpty>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	f43f af4e 	beq.w	8011956 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d00d      	beq.n	8011adc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011ac0:	f001 fffc 	bl	8013abc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011ac4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ac6:	f000 f88e 	bl	8011be6 <prvGetDisinheritPriorityAfterTimeout>
 8011aca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	689b      	ldr	r3, [r3, #8]
 8011ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f001 f9e4 	bl	8012ea0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011ad8:	f002 f81e 	bl	8013b18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011adc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3738      	adds	r7, #56	; 0x38
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	e000ed04 	.word	0xe000ed04

08011aec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b08e      	sub	sp, #56	; 0x38
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	60b9      	str	r1, [r7, #8]
 8011af6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d109      	bne.n	8011b16 <xQueueReceiveFromISR+0x2a>
 8011b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b06:	f383 8811 	msr	BASEPRI, r3
 8011b0a:	f3bf 8f6f 	isb	sy
 8011b0e:	f3bf 8f4f 	dsb	sy
 8011b12:	623b      	str	r3, [r7, #32]
 8011b14:	e7fe      	b.n	8011b14 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d103      	bne.n	8011b24 <xQueueReceiveFromISR+0x38>
 8011b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d101      	bne.n	8011b28 <xQueueReceiveFromISR+0x3c>
 8011b24:	2301      	movs	r3, #1
 8011b26:	e000      	b.n	8011b2a <xQueueReceiveFromISR+0x3e>
 8011b28:	2300      	movs	r3, #0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d109      	bne.n	8011b42 <xQueueReceiveFromISR+0x56>
 8011b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b32:	f383 8811 	msr	BASEPRI, r3
 8011b36:	f3bf 8f6f 	isb	sy
 8011b3a:	f3bf 8f4f 	dsb	sy
 8011b3e:	61fb      	str	r3, [r7, #28]
 8011b40:	e7fe      	b.n	8011b40 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011b42:	f002 f897 	bl	8013c74 <vPortValidateInterruptPriority>
	__asm volatile
 8011b46:	f3ef 8211 	mrs	r2, BASEPRI
 8011b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b4e:	f383 8811 	msr	BASEPRI, r3
 8011b52:	f3bf 8f6f 	isb	sy
 8011b56:	f3bf 8f4f 	dsb	sy
 8011b5a:	61ba      	str	r2, [r7, #24]
 8011b5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011b5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d02f      	beq.n	8011bce <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011b78:	68b9      	ldr	r1, [r7, #8]
 8011b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b7c:	f000 f8b5 	bl	8011cea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b82:	1e5a      	subs	r2, r3, #1
 8011b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b90:	d112      	bne.n	8011bb8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b94:	691b      	ldr	r3, [r3, #16]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d016      	beq.n	8011bc8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9c:	3310      	adds	r3, #16
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f000 fec6 	bl	8012930 <xTaskRemoveFromEventList>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d00e      	beq.n	8011bc8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d00b      	beq.n	8011bc8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2201      	movs	r2, #1
 8011bb4:	601a      	str	r2, [r3, #0]
 8011bb6:	e007      	b.n	8011bc8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	b25a      	sxtb	r2, r3
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011bc8:	2301      	movs	r3, #1
 8011bca:	637b      	str	r3, [r7, #52]	; 0x34
 8011bcc:	e001      	b.n	8011bd2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8011bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011bd6:	693b      	ldr	r3, [r7, #16]
 8011bd8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3738      	adds	r7, #56	; 0x38
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}

08011be6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011be6:	b480      	push	{r7}
 8011be8:	b085      	sub	sp, #20
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d006      	beq.n	8011c04 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011c00:	60fb      	str	r3, [r7, #12]
 8011c02:	e001      	b.n	8011c08 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011c04:	2300      	movs	r3, #0
 8011c06:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011c08:	68fb      	ldr	r3, [r7, #12]
	}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr

08011c16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b086      	sub	sp, #24
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	60f8      	str	r0, [r7, #12]
 8011c1e:	60b9      	str	r1, [r7, #8]
 8011c20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011c22:	2300      	movs	r3, #0
 8011c24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d10d      	bne.n	8011c50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d14d      	bne.n	8011cd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	4618      	mov	r0, r3
 8011c42:	f001 f8c1 	bl	8012dc8 <xTaskPriorityDisinherit>
 8011c46:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	609a      	str	r2, [r3, #8]
 8011c4e:	e043      	b.n	8011cd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d119      	bne.n	8011c8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	6858      	ldr	r0, [r3, #4]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c5e:	461a      	mov	r2, r3
 8011c60:	68b9      	ldr	r1, [r7, #8]
 8011c62:	f002 fd57 	bl	8014714 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	685a      	ldr	r2, [r3, #4]
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c6e:	441a      	add	r2, r3
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	685a      	ldr	r2, [r3, #4]
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	689b      	ldr	r3, [r3, #8]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d32b      	bcc.n	8011cd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	605a      	str	r2, [r3, #4]
 8011c88:	e026      	b.n	8011cd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	68d8      	ldr	r0, [r3, #12]
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c92:	461a      	mov	r2, r3
 8011c94:	68b9      	ldr	r1, [r7, #8]
 8011c96:	f002 fd3d 	bl	8014714 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	68da      	ldr	r2, [r3, #12]
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ca2:	425b      	negs	r3, r3
 8011ca4:	441a      	add	r2, r3
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	68da      	ldr	r2, [r3, #12]
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d207      	bcs.n	8011cc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	689a      	ldr	r2, [r3, #8]
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cbe:	425b      	negs	r3, r3
 8011cc0:	441a      	add	r2, r3
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b02      	cmp	r3, #2
 8011cca:	d105      	bne.n	8011cd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ccc:	693b      	ldr	r3, [r7, #16]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d002      	beq.n	8011cd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	3b01      	subs	r3, #1
 8011cd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	1c5a      	adds	r2, r3, #1
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011ce0:	697b      	ldr	r3, [r7, #20]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3718      	adds	r7, #24
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b082      	sub	sp, #8
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
 8011cf2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d018      	beq.n	8011d2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	68da      	ldr	r2, [r3, #12]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d04:	441a      	add	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	68da      	ldr	r2, [r3, #12]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d303      	bcc.n	8011d1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681a      	ldr	r2, [r3, #0]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	68d9      	ldr	r1, [r3, #12]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d26:	461a      	mov	r2, r3
 8011d28:	6838      	ldr	r0, [r7, #0]
 8011d2a:	f002 fcf3 	bl	8014714 <memcpy>
	}
}
 8011d2e:	bf00      	nop
 8011d30:	3708      	adds	r7, #8
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011d36:	b580      	push	{r7, lr}
 8011d38:	b084      	sub	sp, #16
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011d3e:	f001 febd 	bl	8013abc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d4a:	e011      	b.n	8011d70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d012      	beq.n	8011d7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	3324      	adds	r3, #36	; 0x24
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f000 fde9 	bl	8012930 <xTaskRemoveFromEventList>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d001      	beq.n	8011d68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011d64:	f000 febc 	bl	8012ae0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011d68:	7bfb      	ldrb	r3, [r7, #15]
 8011d6a:	3b01      	subs	r3, #1
 8011d6c:	b2db      	uxtb	r3, r3
 8011d6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	dce9      	bgt.n	8011d4c <prvUnlockQueue+0x16>
 8011d78:	e000      	b.n	8011d7c <prvUnlockQueue+0x46>
					break;
 8011d7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	22ff      	movs	r2, #255	; 0xff
 8011d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011d84:	f001 fec8 	bl	8013b18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011d88:	f001 fe98 	bl	8013abc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011d94:	e011      	b.n	8011dba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	691b      	ldr	r3, [r3, #16]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d012      	beq.n	8011dc4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	3310      	adds	r3, #16
 8011da2:	4618      	mov	r0, r3
 8011da4:	f000 fdc4 	bl	8012930 <xTaskRemoveFromEventList>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d001      	beq.n	8011db2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011dae:	f000 fe97 	bl	8012ae0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011db2:	7bbb      	ldrb	r3, [r7, #14]
 8011db4:	3b01      	subs	r3, #1
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	dce9      	bgt.n	8011d96 <prvUnlockQueue+0x60>
 8011dc2:	e000      	b.n	8011dc6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011dc4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	22ff      	movs	r2, #255	; 0xff
 8011dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011dce:	f001 fea3 	bl	8013b18 <vPortExitCritical>
}
 8011dd2:	bf00      	nop
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}

08011dda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011dda:	b580      	push	{r7, lr}
 8011ddc:	b084      	sub	sp, #16
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011de2:	f001 fe6b 	bl	8013abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d102      	bne.n	8011df4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011dee:	2301      	movs	r3, #1
 8011df0:	60fb      	str	r3, [r7, #12]
 8011df2:	e001      	b.n	8011df8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011df4:	2300      	movs	r3, #0
 8011df6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011df8:	f001 fe8e 	bl	8013b18 <vPortExitCritical>

	return xReturn;
 8011dfc:	68fb      	ldr	r3, [r7, #12]
}
 8011dfe:	4618      	mov	r0, r3
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}

08011e06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b084      	sub	sp, #16
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011e0e:	f001 fe55 	bl	8013abc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d102      	bne.n	8011e24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011e1e:	2301      	movs	r3, #1
 8011e20:	60fb      	str	r3, [r7, #12]
 8011e22:	e001      	b.n	8011e28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011e24:	2300      	movs	r3, #0
 8011e26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011e28:	f001 fe76 	bl	8013b18 <vPortExitCritical>

	return xReturn;
 8011e2c:	68fb      	ldr	r3, [r7, #12]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3710      	adds	r7, #16
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}
	...

08011e38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011e38:	b480      	push	{r7}
 8011e3a:	b085      	sub	sp, #20
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e42:	2300      	movs	r3, #0
 8011e44:	60fb      	str	r3, [r7, #12]
 8011e46:	e014      	b.n	8011e72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011e48:	4a0e      	ldr	r2, [pc, #56]	; (8011e84 <vQueueAddToRegistry+0x4c>)
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d10b      	bne.n	8011e6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011e54:	490b      	ldr	r1, [pc, #44]	; (8011e84 <vQueueAddToRegistry+0x4c>)
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	683a      	ldr	r2, [r7, #0]
 8011e5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011e5e:	4a09      	ldr	r2, [pc, #36]	; (8011e84 <vQueueAddToRegistry+0x4c>)
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	00db      	lsls	r3, r3, #3
 8011e64:	4413      	add	r3, r2
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011e6a:	e005      	b.n	8011e78 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	3301      	adds	r3, #1
 8011e70:	60fb      	str	r3, [r7, #12]
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	2b07      	cmp	r3, #7
 8011e76:	d9e7      	bls.n	8011e48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011e78:	bf00      	nop
 8011e7a:	3714      	adds	r7, #20
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr
 8011e84:	20005120 	.word	0x20005120

08011e88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	60f8      	str	r0, [r7, #12]
 8011e90:	60b9      	str	r1, [r7, #8]
 8011e92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8011e98:	f001 fe10 	bl	8013abc <vPortEnterCritical>
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ea2:	b25b      	sxtb	r3, r3
 8011ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea8:	d103      	bne.n	8011eb2 <vQueueWaitForMessageRestricted+0x2a>
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	2200      	movs	r2, #0
 8011eae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011eb8:	b25b      	sxtb	r3, r3
 8011eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ebe:	d103      	bne.n	8011ec8 <vQueueWaitForMessageRestricted+0x40>
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ec8:	f001 fe26 	bl	8013b18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d106      	bne.n	8011ee2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	3324      	adds	r3, #36	; 0x24
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	68b9      	ldr	r1, [r7, #8]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f000 fcfd 	bl	80128dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011ee2:	6978      	ldr	r0, [r7, #20]
 8011ee4:	f7ff ff27 	bl	8011d36 <prvUnlockQueue>
	}
 8011ee8:	bf00      	nop
 8011eea:	3718      	adds	r7, #24
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}

08011ef0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b08e      	sub	sp, #56	; 0x38
 8011ef4:	af04      	add	r7, sp, #16
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	607a      	str	r2, [r7, #4]
 8011efc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d109      	bne.n	8011f18 <xTaskCreateStatic+0x28>
	__asm volatile
 8011f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f08:	f383 8811 	msr	BASEPRI, r3
 8011f0c:	f3bf 8f6f 	isb	sy
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	623b      	str	r3, [r7, #32]
 8011f16:	e7fe      	b.n	8011f16 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8011f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d109      	bne.n	8011f32 <xTaskCreateStatic+0x42>
 8011f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f22:	f383 8811 	msr	BASEPRI, r3
 8011f26:	f3bf 8f6f 	isb	sy
 8011f2a:	f3bf 8f4f 	dsb	sy
 8011f2e:	61fb      	str	r3, [r7, #28]
 8011f30:	e7fe      	b.n	8011f30 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011f32:	235c      	movs	r3, #92	; 0x5c
 8011f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	2b5c      	cmp	r3, #92	; 0x5c
 8011f3a:	d009      	beq.n	8011f50 <xTaskCreateStatic+0x60>
 8011f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f40:	f383 8811 	msr	BASEPRI, r3
 8011f44:	f3bf 8f6f 	isb	sy
 8011f48:	f3bf 8f4f 	dsb	sy
 8011f4c:	61bb      	str	r3, [r7, #24]
 8011f4e:	e7fe      	b.n	8011f4e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011f50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d01e      	beq.n	8011f96 <xTaskCreateStatic+0xa6>
 8011f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d01b      	beq.n	8011f96 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f60:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f66:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6a:	2202      	movs	r2, #2
 8011f6c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011f70:	2300      	movs	r3, #0
 8011f72:	9303      	str	r3, [sp, #12]
 8011f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f76:	9302      	str	r3, [sp, #8]
 8011f78:	f107 0314 	add.w	r3, r7, #20
 8011f7c:	9301      	str	r3, [sp, #4]
 8011f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	68b9      	ldr	r1, [r7, #8]
 8011f88:	68f8      	ldr	r0, [r7, #12]
 8011f8a:	f000 f850 	bl	801202e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011f8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f90:	f000 f8dc 	bl	801214c <prvAddNewTaskToReadyList>
 8011f94:	e001      	b.n	8011f9a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8011f96:	2300      	movs	r3, #0
 8011f98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011f9a:	697b      	ldr	r3, [r7, #20]
	}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	3728      	adds	r7, #40	; 0x28
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b08c      	sub	sp, #48	; 0x30
 8011fa8:	af04      	add	r7, sp, #16
 8011faa:	60f8      	str	r0, [r7, #12]
 8011fac:	60b9      	str	r1, [r7, #8]
 8011fae:	603b      	str	r3, [r7, #0]
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011fb4:	88fb      	ldrh	r3, [r7, #6]
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f001 fe99 	bl	8013cf0 <pvPortMalloc>
 8011fbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d00e      	beq.n	8011fe4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011fc6:	205c      	movs	r0, #92	; 0x5c
 8011fc8:	f001 fe92 	bl	8013cf0 <pvPortMalloc>
 8011fcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d003      	beq.n	8011fdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011fd4:	69fb      	ldr	r3, [r7, #28]
 8011fd6:	697a      	ldr	r2, [r7, #20]
 8011fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8011fda:	e005      	b.n	8011fe8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011fdc:	6978      	ldr	r0, [r7, #20]
 8011fde:	f001 ff49 	bl	8013e74 <vPortFree>
 8011fe2:	e001      	b.n	8011fe8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d017      	beq.n	801201e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011ff6:	88fa      	ldrh	r2, [r7, #6]
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	9303      	str	r3, [sp, #12]
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	9302      	str	r3, [sp, #8]
 8012000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012002:	9301      	str	r3, [sp, #4]
 8012004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	68b9      	ldr	r1, [r7, #8]
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	f000 f80e 	bl	801202e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012012:	69f8      	ldr	r0, [r7, #28]
 8012014:	f000 f89a 	bl	801214c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012018:	2301      	movs	r3, #1
 801201a:	61bb      	str	r3, [r7, #24]
 801201c:	e002      	b.n	8012024 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801201e:	f04f 33ff 	mov.w	r3, #4294967295
 8012022:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012024:	69bb      	ldr	r3, [r7, #24]
	}
 8012026:	4618      	mov	r0, r3
 8012028:	3720      	adds	r7, #32
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}

0801202e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b088      	sub	sp, #32
 8012032:	af00      	add	r7, sp, #0
 8012034:	60f8      	str	r0, [r7, #12]
 8012036:	60b9      	str	r1, [r7, #8]
 8012038:	607a      	str	r2, [r7, #4]
 801203a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801203e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	461a      	mov	r2, r3
 8012046:	21a5      	movs	r1, #165	; 0xa5
 8012048:	f002 fb6f 	bl	801472a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801204e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012056:	3b01      	subs	r3, #1
 8012058:	009b      	lsls	r3, r3, #2
 801205a:	4413      	add	r3, r2
 801205c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801205e:	69bb      	ldr	r3, [r7, #24]
 8012060:	f023 0307 	bic.w	r3, r3, #7
 8012064:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012066:	69bb      	ldr	r3, [r7, #24]
 8012068:	f003 0307 	and.w	r3, r3, #7
 801206c:	2b00      	cmp	r3, #0
 801206e:	d009      	beq.n	8012084 <prvInitialiseNewTask+0x56>
 8012070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012074:	f383 8811 	msr	BASEPRI, r3
 8012078:	f3bf 8f6f 	isb	sy
 801207c:	f3bf 8f4f 	dsb	sy
 8012080:	617b      	str	r3, [r7, #20]
 8012082:	e7fe      	b.n	8012082 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d01f      	beq.n	80120ca <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801208a:	2300      	movs	r3, #0
 801208c:	61fb      	str	r3, [r7, #28]
 801208e:	e012      	b.n	80120b6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012090:	68ba      	ldr	r2, [r7, #8]
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	4413      	add	r3, r2
 8012096:	7819      	ldrb	r1, [r3, #0]
 8012098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	4413      	add	r3, r2
 801209e:	3334      	adds	r3, #52	; 0x34
 80120a0:	460a      	mov	r2, r1
 80120a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80120a4:	68ba      	ldr	r2, [r7, #8]
 80120a6:	69fb      	ldr	r3, [r7, #28]
 80120a8:	4413      	add	r3, r2
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d006      	beq.n	80120be <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	3301      	adds	r3, #1
 80120b4:	61fb      	str	r3, [r7, #28]
 80120b6:	69fb      	ldr	r3, [r7, #28]
 80120b8:	2b0f      	cmp	r3, #15
 80120ba:	d9e9      	bls.n	8012090 <prvInitialiseNewTask+0x62>
 80120bc:	e000      	b.n	80120c0 <prvInitialiseNewTask+0x92>
			{
				break;
 80120be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80120c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120c2:	2200      	movs	r2, #0
 80120c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80120c8:	e003      	b.n	80120d2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80120ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120cc:	2200      	movs	r2, #0
 80120ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80120d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d4:	2b37      	cmp	r3, #55	; 0x37
 80120d6:	d901      	bls.n	80120dc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80120d8:	2337      	movs	r3, #55	; 0x37
 80120da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80120dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80120e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ea:	2200      	movs	r2, #0
 80120ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80120ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f0:	3304      	adds	r3, #4
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fe ff02 	bl	8010efc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80120f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fa:	3318      	adds	r3, #24
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fe fefd 	bl	8010efc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012106:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801210a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012110:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012116:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801211a:	2200      	movs	r2, #0
 801211c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012120:	2200      	movs	r2, #0
 8012122:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012126:	683a      	ldr	r2, [r7, #0]
 8012128:	68f9      	ldr	r1, [r7, #12]
 801212a:	69b8      	ldr	r0, [r7, #24]
 801212c:	f001 fb9e 	bl	801386c <pxPortInitialiseStack>
 8012130:	4602      	mov	r2, r0
 8012132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012134:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012138:	2b00      	cmp	r3, #0
 801213a:	d002      	beq.n	8012142 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012140:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012142:	bf00      	nop
 8012144:	3720      	adds	r7, #32
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
	...

0801214c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012154:	f001 fcb2 	bl	8013abc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012158:	4b2d      	ldr	r3, [pc, #180]	; (8012210 <prvAddNewTaskToReadyList+0xc4>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	3301      	adds	r3, #1
 801215e:	4a2c      	ldr	r2, [pc, #176]	; (8012210 <prvAddNewTaskToReadyList+0xc4>)
 8012160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012162:	4b2c      	ldr	r3, [pc, #176]	; (8012214 <prvAddNewTaskToReadyList+0xc8>)
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d109      	bne.n	801217e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801216a:	4a2a      	ldr	r2, [pc, #168]	; (8012214 <prvAddNewTaskToReadyList+0xc8>)
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012170:	4b27      	ldr	r3, [pc, #156]	; (8012210 <prvAddNewTaskToReadyList+0xc4>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b01      	cmp	r3, #1
 8012176:	d110      	bne.n	801219a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012178:	f000 fcd6 	bl	8012b28 <prvInitialiseTaskLists>
 801217c:	e00d      	b.n	801219a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801217e:	4b26      	ldr	r3, [pc, #152]	; (8012218 <prvAddNewTaskToReadyList+0xcc>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d109      	bne.n	801219a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012186:	4b23      	ldr	r3, [pc, #140]	; (8012214 <prvAddNewTaskToReadyList+0xc8>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012190:	429a      	cmp	r2, r3
 8012192:	d802      	bhi.n	801219a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012194:	4a1f      	ldr	r2, [pc, #124]	; (8012214 <prvAddNewTaskToReadyList+0xc8>)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801219a:	4b20      	ldr	r3, [pc, #128]	; (801221c <prvAddNewTaskToReadyList+0xd0>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	3301      	adds	r3, #1
 80121a0:	4a1e      	ldr	r2, [pc, #120]	; (801221c <prvAddNewTaskToReadyList+0xd0>)
 80121a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80121a4:	4b1d      	ldr	r3, [pc, #116]	; (801221c <prvAddNewTaskToReadyList+0xd0>)
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b0:	4b1b      	ldr	r3, [pc, #108]	; (8012220 <prvAddNewTaskToReadyList+0xd4>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d903      	bls.n	80121c0 <prvAddNewTaskToReadyList+0x74>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121bc:	4a18      	ldr	r2, [pc, #96]	; (8012220 <prvAddNewTaskToReadyList+0xd4>)
 80121be:	6013      	str	r3, [r2, #0]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121c4:	4613      	mov	r3, r2
 80121c6:	009b      	lsls	r3, r3, #2
 80121c8:	4413      	add	r3, r2
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	4a15      	ldr	r2, [pc, #84]	; (8012224 <prvAddNewTaskToReadyList+0xd8>)
 80121ce:	441a      	add	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	3304      	adds	r3, #4
 80121d4:	4619      	mov	r1, r3
 80121d6:	4610      	mov	r0, r2
 80121d8:	f7fe fe9d 	bl	8010f16 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80121dc:	f001 fc9c 	bl	8013b18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80121e0:	4b0d      	ldr	r3, [pc, #52]	; (8012218 <prvAddNewTaskToReadyList+0xcc>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d00e      	beq.n	8012206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80121e8:	4b0a      	ldr	r3, [pc, #40]	; (8012214 <prvAddNewTaskToReadyList+0xc8>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d207      	bcs.n	8012206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80121f6:	4b0c      	ldr	r3, [pc, #48]	; (8012228 <prvAddNewTaskToReadyList+0xdc>)
 80121f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121fc:	601a      	str	r2, [r3, #0]
 80121fe:	f3bf 8f4f 	dsb	sy
 8012202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012206:	bf00      	nop
 8012208:	3708      	adds	r7, #8
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	20000d88 	.word	0x20000d88
 8012214:	200008b4 	.word	0x200008b4
 8012218:	20000d94 	.word	0x20000d94
 801221c:	20000da4 	.word	0x20000da4
 8012220:	20000d90 	.word	0x20000d90
 8012224:	200008b8 	.word	0x200008b8
 8012228:	e000ed04 	.word	0xe000ed04

0801222c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012234:	f001 fc42 	bl	8013abc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d102      	bne.n	8012244 <vTaskSuspend+0x18>
 801223e:	4b2f      	ldr	r3, [pc, #188]	; (80122fc <vTaskSuspend+0xd0>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	e000      	b.n	8012246 <vTaskSuspend+0x1a>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	3304      	adds	r3, #4
 801224c:	4618      	mov	r0, r3
 801224e:	f7fe febf 	bl	8010fd0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012256:	2b00      	cmp	r3, #0
 8012258:	d004      	beq.n	8012264 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	3318      	adds	r3, #24
 801225e:	4618      	mov	r0, r3
 8012260:	f7fe feb6 	bl	8010fd0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	3304      	adds	r3, #4
 8012268:	4619      	mov	r1, r3
 801226a:	4825      	ldr	r0, [pc, #148]	; (8012300 <vTaskSuspend+0xd4>)
 801226c:	f7fe fe53 	bl	8010f16 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8012276:	b2db      	uxtb	r3, r3
 8012278:	2b01      	cmp	r3, #1
 801227a:	d103      	bne.n	8012284 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	2200      	movs	r2, #0
 8012280:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8012284:	f001 fc48 	bl	8013b18 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8012288:	4b1e      	ldr	r3, [pc, #120]	; (8012304 <vTaskSuspend+0xd8>)
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d005      	beq.n	801229c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8012290:	f001 fc14 	bl	8013abc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8012294:	f000 fce2 	bl	8012c5c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8012298:	f001 fc3e 	bl	8013b18 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801229c:	4b17      	ldr	r3, [pc, #92]	; (80122fc <vTaskSuspend+0xd0>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	68fa      	ldr	r2, [r7, #12]
 80122a2:	429a      	cmp	r2, r3
 80122a4:	d126      	bne.n	80122f4 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 80122a6:	4b17      	ldr	r3, [pc, #92]	; (8012304 <vTaskSuspend+0xd8>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d016      	beq.n	80122dc <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80122ae:	4b16      	ldr	r3, [pc, #88]	; (8012308 <vTaskSuspend+0xdc>)
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d009      	beq.n	80122ca <vTaskSuspend+0x9e>
 80122b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122ba:	f383 8811 	msr	BASEPRI, r3
 80122be:	f3bf 8f6f 	isb	sy
 80122c2:	f3bf 8f4f 	dsb	sy
 80122c6:	60bb      	str	r3, [r7, #8]
 80122c8:	e7fe      	b.n	80122c8 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 80122ca:	4b10      	ldr	r3, [pc, #64]	; (801230c <vTaskSuspend+0xe0>)
 80122cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122d0:	601a      	str	r2, [r3, #0]
 80122d2:	f3bf 8f4f 	dsb	sy
 80122d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80122da:	e00b      	b.n	80122f4 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80122dc:	4b08      	ldr	r3, [pc, #32]	; (8012300 <vTaskSuspend+0xd4>)
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	4b0b      	ldr	r3, [pc, #44]	; (8012310 <vTaskSuspend+0xe4>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	429a      	cmp	r2, r3
 80122e6:	d103      	bne.n	80122f0 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 80122e8:	4b04      	ldr	r3, [pc, #16]	; (80122fc <vTaskSuspend+0xd0>)
 80122ea:	2200      	movs	r2, #0
 80122ec:	601a      	str	r2, [r3, #0]
	}
 80122ee:	e001      	b.n	80122f4 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 80122f0:	f000 fa74 	bl	80127dc <vTaskSwitchContext>
	}
 80122f4:	bf00      	nop
 80122f6:	3710      	adds	r7, #16
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	200008b4 	.word	0x200008b4
 8012300:	20000d74 	.word	0x20000d74
 8012304:	20000d94 	.word	0x20000d94
 8012308:	20000db0 	.word	0x20000db0
 801230c:	e000ed04 	.word	0xe000ed04
 8012310:	20000d88 	.word	0x20000d88

08012314 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8012314:	b480      	push	{r7}
 8012316:	b087      	sub	sp, #28
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 801231c:	2300      	movs	r3, #0
 801231e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d109      	bne.n	801233e <prvTaskIsTaskSuspended+0x2a>
 801232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232e:	f383 8811 	msr	BASEPRI, r3
 8012332:	f3bf 8f6f 	isb	sy
 8012336:	f3bf 8f4f 	dsb	sy
 801233a:	60fb      	str	r3, [r7, #12]
 801233c:	e7fe      	b.n	801233c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	695b      	ldr	r3, [r3, #20]
 8012342:	4a0a      	ldr	r2, [pc, #40]	; (801236c <prvTaskIsTaskSuspended+0x58>)
 8012344:	4293      	cmp	r3, r2
 8012346:	d10a      	bne.n	801235e <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801234c:	4a08      	ldr	r2, [pc, #32]	; (8012370 <prvTaskIsTaskSuspended+0x5c>)
 801234e:	4293      	cmp	r3, r2
 8012350:	d005      	beq.n	801235e <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012356:	2b00      	cmp	r3, #0
 8012358:	d101      	bne.n	801235e <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 801235a:	2301      	movs	r3, #1
 801235c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801235e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8012360:	4618      	mov	r0, r3
 8012362:	371c      	adds	r7, #28
 8012364:	46bd      	mov	sp, r7
 8012366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236a:	4770      	bx	lr
 801236c:	20000d74 	.word	0x20000d74
 8012370:	20000d48 	.word	0x20000d48

08012374 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d109      	bne.n	801239a <vTaskResume+0x26>
 8012386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801238a:	f383 8811 	msr	BASEPRI, r3
 801238e:	f3bf 8f6f 	isb	sy
 8012392:	f3bf 8f4f 	dsb	sy
 8012396:	60bb      	str	r3, [r7, #8]
 8012398:	e7fe      	b.n	8012398 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 801239a:	4b21      	ldr	r3, [pc, #132]	; (8012420 <vTaskResume+0xac>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	68fa      	ldr	r2, [r7, #12]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d038      	beq.n	8012416 <vTaskResume+0xa2>
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d035      	beq.n	8012416 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80123aa:	f001 fb87 	bl	8013abc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80123ae:	68f8      	ldr	r0, [r7, #12]
 80123b0:	f7ff ffb0 	bl	8012314 <prvTaskIsTaskSuspended>
 80123b4:	4603      	mov	r3, r0
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d02b      	beq.n	8012412 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	3304      	adds	r3, #4
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fe fe06 	bl	8010fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123c8:	4b16      	ldr	r3, [pc, #88]	; (8012424 <vTaskResume+0xb0>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d903      	bls.n	80123d8 <vTaskResume+0x64>
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123d4:	4a13      	ldr	r2, [pc, #76]	; (8012424 <vTaskResume+0xb0>)
 80123d6:	6013      	str	r3, [r2, #0]
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123dc:	4613      	mov	r3, r2
 80123de:	009b      	lsls	r3, r3, #2
 80123e0:	4413      	add	r3, r2
 80123e2:	009b      	lsls	r3, r3, #2
 80123e4:	4a10      	ldr	r2, [pc, #64]	; (8012428 <vTaskResume+0xb4>)
 80123e6:	441a      	add	r2, r3
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	3304      	adds	r3, #4
 80123ec:	4619      	mov	r1, r3
 80123ee:	4610      	mov	r0, r2
 80123f0:	f7fe fd91 	bl	8010f16 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123f8:	4b09      	ldr	r3, [pc, #36]	; (8012420 <vTaskResume+0xac>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123fe:	429a      	cmp	r2, r3
 8012400:	d307      	bcc.n	8012412 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8012402:	4b0a      	ldr	r3, [pc, #40]	; (801242c <vTaskResume+0xb8>)
 8012404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012408:	601a      	str	r2, [r3, #0]
 801240a:	f3bf 8f4f 	dsb	sy
 801240e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8012412:	f001 fb81 	bl	8013b18 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012416:	bf00      	nop
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	200008b4 	.word	0x200008b4
 8012424:	20000d90 	.word	0x20000d90
 8012428:	200008b8 	.word	0x200008b8
 801242c:	e000ed04 	.word	0xe000ed04

08012430 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b08a      	sub	sp, #40	; 0x28
 8012434:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012436:	2300      	movs	r3, #0
 8012438:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801243a:	2300      	movs	r3, #0
 801243c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801243e:	463a      	mov	r2, r7
 8012440:	1d39      	adds	r1, r7, #4
 8012442:	f107 0308 	add.w	r3, r7, #8
 8012446:	4618      	mov	r0, r3
 8012448:	f7fe fd04 	bl	8010e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801244c:	6839      	ldr	r1, [r7, #0]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	68ba      	ldr	r2, [r7, #8]
 8012452:	9202      	str	r2, [sp, #8]
 8012454:	9301      	str	r3, [sp, #4]
 8012456:	2300      	movs	r3, #0
 8012458:	9300      	str	r3, [sp, #0]
 801245a:	2300      	movs	r3, #0
 801245c:	460a      	mov	r2, r1
 801245e:	4920      	ldr	r1, [pc, #128]	; (80124e0 <vTaskStartScheduler+0xb0>)
 8012460:	4820      	ldr	r0, [pc, #128]	; (80124e4 <vTaskStartScheduler+0xb4>)
 8012462:	f7ff fd45 	bl	8011ef0 <xTaskCreateStatic>
 8012466:	4602      	mov	r2, r0
 8012468:	4b1f      	ldr	r3, [pc, #124]	; (80124e8 <vTaskStartScheduler+0xb8>)
 801246a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801246c:	4b1e      	ldr	r3, [pc, #120]	; (80124e8 <vTaskStartScheduler+0xb8>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d002      	beq.n	801247a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012474:	2301      	movs	r3, #1
 8012476:	617b      	str	r3, [r7, #20]
 8012478:	e001      	b.n	801247e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801247a:	2300      	movs	r3, #0
 801247c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	2b01      	cmp	r3, #1
 8012482:	d102      	bne.n	801248a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012484:	f000 fdf4 	bl	8013070 <xTimerCreateTimerTask>
 8012488:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	2b01      	cmp	r3, #1
 801248e:	d115      	bne.n	80124bc <vTaskStartScheduler+0x8c>
 8012490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012494:	f383 8811 	msr	BASEPRI, r3
 8012498:	f3bf 8f6f 	isb	sy
 801249c:	f3bf 8f4f 	dsb	sy
 80124a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80124a2:	4b12      	ldr	r3, [pc, #72]	; (80124ec <vTaskStartScheduler+0xbc>)
 80124a4:	f04f 32ff 	mov.w	r2, #4294967295
 80124a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80124aa:	4b11      	ldr	r3, [pc, #68]	; (80124f0 <vTaskStartScheduler+0xc0>)
 80124ac:	2201      	movs	r2, #1
 80124ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80124b0:	4b10      	ldr	r3, [pc, #64]	; (80124f4 <vTaskStartScheduler+0xc4>)
 80124b2:	2200      	movs	r2, #0
 80124b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80124b6:	f001 fa63 	bl	8013980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80124ba:	e00d      	b.n	80124d8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124c2:	d109      	bne.n	80124d8 <vTaskStartScheduler+0xa8>
 80124c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124c8:	f383 8811 	msr	BASEPRI, r3
 80124cc:	f3bf 8f6f 	isb	sy
 80124d0:	f3bf 8f4f 	dsb	sy
 80124d4:	60fb      	str	r3, [r7, #12]
 80124d6:	e7fe      	b.n	80124d6 <vTaskStartScheduler+0xa6>
}
 80124d8:	bf00      	nop
 80124da:	3718      	adds	r7, #24
 80124dc:	46bd      	mov	sp, r7
 80124de:	bd80      	pop	{r7, pc}
 80124e0:	08015458 	.word	0x08015458
 80124e4:	08012af9 	.word	0x08012af9
 80124e8:	20000dac 	.word	0x20000dac
 80124ec:	20000da8 	.word	0x20000da8
 80124f0:	20000d94 	.word	0x20000d94
 80124f4:	20000d8c 	.word	0x20000d8c

080124f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80124f8:	b480      	push	{r7}
 80124fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80124fc:	4b04      	ldr	r3, [pc, #16]	; (8012510 <vTaskSuspendAll+0x18>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	3301      	adds	r3, #1
 8012502:	4a03      	ldr	r2, [pc, #12]	; (8012510 <vTaskSuspendAll+0x18>)
 8012504:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012506:	bf00      	nop
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr
 8012510:	20000db0 	.word	0x20000db0

08012514 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801251a:	2300      	movs	r3, #0
 801251c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801251e:	2300      	movs	r3, #0
 8012520:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012522:	4b41      	ldr	r3, [pc, #260]	; (8012628 <xTaskResumeAll+0x114>)
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d109      	bne.n	801253e <xTaskResumeAll+0x2a>
 801252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801252e:	f383 8811 	msr	BASEPRI, r3
 8012532:	f3bf 8f6f 	isb	sy
 8012536:	f3bf 8f4f 	dsb	sy
 801253a:	603b      	str	r3, [r7, #0]
 801253c:	e7fe      	b.n	801253c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801253e:	f001 fabd 	bl	8013abc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012542:	4b39      	ldr	r3, [pc, #228]	; (8012628 <xTaskResumeAll+0x114>)
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	3b01      	subs	r3, #1
 8012548:	4a37      	ldr	r2, [pc, #220]	; (8012628 <xTaskResumeAll+0x114>)
 801254a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801254c:	4b36      	ldr	r3, [pc, #216]	; (8012628 <xTaskResumeAll+0x114>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d162      	bne.n	801261a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012554:	4b35      	ldr	r3, [pc, #212]	; (801262c <xTaskResumeAll+0x118>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d05e      	beq.n	801261a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801255c:	e02f      	b.n	80125be <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801255e:	4b34      	ldr	r3, [pc, #208]	; (8012630 <xTaskResumeAll+0x11c>)
 8012560:	68db      	ldr	r3, [r3, #12]
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	3318      	adds	r3, #24
 801256a:	4618      	mov	r0, r3
 801256c:	f7fe fd30 	bl	8010fd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	3304      	adds	r3, #4
 8012574:	4618      	mov	r0, r3
 8012576:	f7fe fd2b 	bl	8010fd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801257e:	4b2d      	ldr	r3, [pc, #180]	; (8012634 <xTaskResumeAll+0x120>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	429a      	cmp	r2, r3
 8012584:	d903      	bls.n	801258e <xTaskResumeAll+0x7a>
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801258a:	4a2a      	ldr	r2, [pc, #168]	; (8012634 <xTaskResumeAll+0x120>)
 801258c:	6013      	str	r3, [r2, #0]
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012592:	4613      	mov	r3, r2
 8012594:	009b      	lsls	r3, r3, #2
 8012596:	4413      	add	r3, r2
 8012598:	009b      	lsls	r3, r3, #2
 801259a:	4a27      	ldr	r2, [pc, #156]	; (8012638 <xTaskResumeAll+0x124>)
 801259c:	441a      	add	r2, r3
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	3304      	adds	r3, #4
 80125a2:	4619      	mov	r1, r3
 80125a4:	4610      	mov	r0, r2
 80125a6:	f7fe fcb6 	bl	8010f16 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ae:	4b23      	ldr	r3, [pc, #140]	; (801263c <xTaskResumeAll+0x128>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d302      	bcc.n	80125be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80125b8:	4b21      	ldr	r3, [pc, #132]	; (8012640 <xTaskResumeAll+0x12c>)
 80125ba:	2201      	movs	r2, #1
 80125bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80125be:	4b1c      	ldr	r3, [pc, #112]	; (8012630 <xTaskResumeAll+0x11c>)
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d1cb      	bne.n	801255e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d001      	beq.n	80125d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80125cc:	f000 fb46 	bl	8012c5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80125d0:	4b1c      	ldr	r3, [pc, #112]	; (8012644 <xTaskResumeAll+0x130>)
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d010      	beq.n	80125fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80125dc:	f000 f846 	bl	801266c <xTaskIncrementTick>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d002      	beq.n	80125ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80125e6:	4b16      	ldr	r3, [pc, #88]	; (8012640 <xTaskResumeAll+0x12c>)
 80125e8:	2201      	movs	r2, #1
 80125ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	3b01      	subs	r3, #1
 80125f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d1f1      	bne.n	80125dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80125f8:	4b12      	ldr	r3, [pc, #72]	; (8012644 <xTaskResumeAll+0x130>)
 80125fa:	2200      	movs	r2, #0
 80125fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80125fe:	4b10      	ldr	r3, [pc, #64]	; (8012640 <xTaskResumeAll+0x12c>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d009      	beq.n	801261a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012606:	2301      	movs	r3, #1
 8012608:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801260a:	4b0f      	ldr	r3, [pc, #60]	; (8012648 <xTaskResumeAll+0x134>)
 801260c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012610:	601a      	str	r2, [r3, #0]
 8012612:	f3bf 8f4f 	dsb	sy
 8012616:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801261a:	f001 fa7d 	bl	8013b18 <vPortExitCritical>

	return xAlreadyYielded;
 801261e:	68bb      	ldr	r3, [r7, #8]
}
 8012620:	4618      	mov	r0, r3
 8012622:	3710      	adds	r7, #16
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}
 8012628:	20000db0 	.word	0x20000db0
 801262c:	20000d88 	.word	0x20000d88
 8012630:	20000d48 	.word	0x20000d48
 8012634:	20000d90 	.word	0x20000d90
 8012638:	200008b8 	.word	0x200008b8
 801263c:	200008b4 	.word	0x200008b4
 8012640:	20000d9c 	.word	0x20000d9c
 8012644:	20000d98 	.word	0x20000d98
 8012648:	e000ed04 	.word	0xe000ed04

0801264c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801264c:	b480      	push	{r7}
 801264e:	b083      	sub	sp, #12
 8012650:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012652:	4b05      	ldr	r3, [pc, #20]	; (8012668 <xTaskGetTickCount+0x1c>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012658:	687b      	ldr	r3, [r7, #4]
}
 801265a:	4618      	mov	r0, r3
 801265c:	370c      	adds	r7, #12
 801265e:	46bd      	mov	sp, r7
 8012660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012664:	4770      	bx	lr
 8012666:	bf00      	nop
 8012668:	20000d8c 	.word	0x20000d8c

0801266c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b086      	sub	sp, #24
 8012670:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012672:	2300      	movs	r3, #0
 8012674:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012676:	4b4e      	ldr	r3, [pc, #312]	; (80127b0 <xTaskIncrementTick+0x144>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	2b00      	cmp	r3, #0
 801267c:	f040 8088 	bne.w	8012790 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012680:	4b4c      	ldr	r3, [pc, #304]	; (80127b4 <xTaskIncrementTick+0x148>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	3301      	adds	r3, #1
 8012686:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012688:	4a4a      	ldr	r2, [pc, #296]	; (80127b4 <xTaskIncrementTick+0x148>)
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d11f      	bne.n	80126d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012694:	4b48      	ldr	r3, [pc, #288]	; (80127b8 <xTaskIncrementTick+0x14c>)
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d009      	beq.n	80126b2 <xTaskIncrementTick+0x46>
 801269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a2:	f383 8811 	msr	BASEPRI, r3
 80126a6:	f3bf 8f6f 	isb	sy
 80126aa:	f3bf 8f4f 	dsb	sy
 80126ae:	603b      	str	r3, [r7, #0]
 80126b0:	e7fe      	b.n	80126b0 <xTaskIncrementTick+0x44>
 80126b2:	4b41      	ldr	r3, [pc, #260]	; (80127b8 <xTaskIncrementTick+0x14c>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	60fb      	str	r3, [r7, #12]
 80126b8:	4b40      	ldr	r3, [pc, #256]	; (80127bc <xTaskIncrementTick+0x150>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4a3e      	ldr	r2, [pc, #248]	; (80127b8 <xTaskIncrementTick+0x14c>)
 80126be:	6013      	str	r3, [r2, #0]
 80126c0:	4a3e      	ldr	r2, [pc, #248]	; (80127bc <xTaskIncrementTick+0x150>)
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	6013      	str	r3, [r2, #0]
 80126c6:	4b3e      	ldr	r3, [pc, #248]	; (80127c0 <xTaskIncrementTick+0x154>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	3301      	adds	r3, #1
 80126cc:	4a3c      	ldr	r2, [pc, #240]	; (80127c0 <xTaskIncrementTick+0x154>)
 80126ce:	6013      	str	r3, [r2, #0]
 80126d0:	f000 fac4 	bl	8012c5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80126d4:	4b3b      	ldr	r3, [pc, #236]	; (80127c4 <xTaskIncrementTick+0x158>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	693a      	ldr	r2, [r7, #16]
 80126da:	429a      	cmp	r2, r3
 80126dc:	d349      	bcc.n	8012772 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80126de:	4b36      	ldr	r3, [pc, #216]	; (80127b8 <xTaskIncrementTick+0x14c>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d104      	bne.n	80126f2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80126e8:	4b36      	ldr	r3, [pc, #216]	; (80127c4 <xTaskIncrementTick+0x158>)
 80126ea:	f04f 32ff 	mov.w	r2, #4294967295
 80126ee:	601a      	str	r2, [r3, #0]
					break;
 80126f0:	e03f      	b.n	8012772 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126f2:	4b31      	ldr	r3, [pc, #196]	; (80127b8 <xTaskIncrementTick+0x14c>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	68db      	ldr	r3, [r3, #12]
 80126f8:	68db      	ldr	r3, [r3, #12]
 80126fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012702:	693a      	ldr	r2, [r7, #16]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	429a      	cmp	r2, r3
 8012708:	d203      	bcs.n	8012712 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801270a:	4a2e      	ldr	r2, [pc, #184]	; (80127c4 <xTaskIncrementTick+0x158>)
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012710:	e02f      	b.n	8012772 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012712:	68bb      	ldr	r3, [r7, #8]
 8012714:	3304      	adds	r3, #4
 8012716:	4618      	mov	r0, r3
 8012718:	f7fe fc5a 	bl	8010fd0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012720:	2b00      	cmp	r3, #0
 8012722:	d004      	beq.n	801272e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	3318      	adds	r3, #24
 8012728:	4618      	mov	r0, r3
 801272a:	f7fe fc51 	bl	8010fd0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012732:	4b25      	ldr	r3, [pc, #148]	; (80127c8 <xTaskIncrementTick+0x15c>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	429a      	cmp	r2, r3
 8012738:	d903      	bls.n	8012742 <xTaskIncrementTick+0xd6>
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801273e:	4a22      	ldr	r2, [pc, #136]	; (80127c8 <xTaskIncrementTick+0x15c>)
 8012740:	6013      	str	r3, [r2, #0]
 8012742:	68bb      	ldr	r3, [r7, #8]
 8012744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012746:	4613      	mov	r3, r2
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	4413      	add	r3, r2
 801274c:	009b      	lsls	r3, r3, #2
 801274e:	4a1f      	ldr	r2, [pc, #124]	; (80127cc <xTaskIncrementTick+0x160>)
 8012750:	441a      	add	r2, r3
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	3304      	adds	r3, #4
 8012756:	4619      	mov	r1, r3
 8012758:	4610      	mov	r0, r2
 801275a:	f7fe fbdc 	bl	8010f16 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012762:	4b1b      	ldr	r3, [pc, #108]	; (80127d0 <xTaskIncrementTick+0x164>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012768:	429a      	cmp	r2, r3
 801276a:	d3b8      	bcc.n	80126de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801276c:	2301      	movs	r3, #1
 801276e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012770:	e7b5      	b.n	80126de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012772:	4b17      	ldr	r3, [pc, #92]	; (80127d0 <xTaskIncrementTick+0x164>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012778:	4914      	ldr	r1, [pc, #80]	; (80127cc <xTaskIncrementTick+0x160>)
 801277a:	4613      	mov	r3, r2
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	4413      	add	r3, r2
 8012780:	009b      	lsls	r3, r3, #2
 8012782:	440b      	add	r3, r1
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b01      	cmp	r3, #1
 8012788:	d907      	bls.n	801279a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801278a:	2301      	movs	r3, #1
 801278c:	617b      	str	r3, [r7, #20]
 801278e:	e004      	b.n	801279a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012790:	4b10      	ldr	r3, [pc, #64]	; (80127d4 <xTaskIncrementTick+0x168>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	3301      	adds	r3, #1
 8012796:	4a0f      	ldr	r2, [pc, #60]	; (80127d4 <xTaskIncrementTick+0x168>)
 8012798:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801279a:	4b0f      	ldr	r3, [pc, #60]	; (80127d8 <xTaskIncrementTick+0x16c>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d001      	beq.n	80127a6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80127a2:	2301      	movs	r3, #1
 80127a4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80127a6:	697b      	ldr	r3, [r7, #20]
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3718      	adds	r7, #24
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	20000db0 	.word	0x20000db0
 80127b4:	20000d8c 	.word	0x20000d8c
 80127b8:	20000d40 	.word	0x20000d40
 80127bc:	20000d44 	.word	0x20000d44
 80127c0:	20000da0 	.word	0x20000da0
 80127c4:	20000da8 	.word	0x20000da8
 80127c8:	20000d90 	.word	0x20000d90
 80127cc:	200008b8 	.word	0x200008b8
 80127d0:	200008b4 	.word	0x200008b4
 80127d4:	20000d98 	.word	0x20000d98
 80127d8:	20000d9c 	.word	0x20000d9c

080127dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80127dc:	b480      	push	{r7}
 80127de:	b085      	sub	sp, #20
 80127e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80127e2:	4b27      	ldr	r3, [pc, #156]	; (8012880 <vTaskSwitchContext+0xa4>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d003      	beq.n	80127f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80127ea:	4b26      	ldr	r3, [pc, #152]	; (8012884 <vTaskSwitchContext+0xa8>)
 80127ec:	2201      	movs	r2, #1
 80127ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80127f0:	e040      	b.n	8012874 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80127f2:	4b24      	ldr	r3, [pc, #144]	; (8012884 <vTaskSwitchContext+0xa8>)
 80127f4:	2200      	movs	r2, #0
 80127f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127f8:	4b23      	ldr	r3, [pc, #140]	; (8012888 <vTaskSwitchContext+0xac>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	60fb      	str	r3, [r7, #12]
 80127fe:	e00f      	b.n	8012820 <vTaskSwitchContext+0x44>
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d109      	bne.n	801281a <vTaskSwitchContext+0x3e>
 8012806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801280a:	f383 8811 	msr	BASEPRI, r3
 801280e:	f3bf 8f6f 	isb	sy
 8012812:	f3bf 8f4f 	dsb	sy
 8012816:	607b      	str	r3, [r7, #4]
 8012818:	e7fe      	b.n	8012818 <vTaskSwitchContext+0x3c>
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	3b01      	subs	r3, #1
 801281e:	60fb      	str	r3, [r7, #12]
 8012820:	491a      	ldr	r1, [pc, #104]	; (801288c <vTaskSwitchContext+0xb0>)
 8012822:	68fa      	ldr	r2, [r7, #12]
 8012824:	4613      	mov	r3, r2
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	4413      	add	r3, r2
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	440b      	add	r3, r1
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d0e5      	beq.n	8012800 <vTaskSwitchContext+0x24>
 8012834:	68fa      	ldr	r2, [r7, #12]
 8012836:	4613      	mov	r3, r2
 8012838:	009b      	lsls	r3, r3, #2
 801283a:	4413      	add	r3, r2
 801283c:	009b      	lsls	r3, r3, #2
 801283e:	4a13      	ldr	r2, [pc, #76]	; (801288c <vTaskSwitchContext+0xb0>)
 8012840:	4413      	add	r3, r2
 8012842:	60bb      	str	r3, [r7, #8]
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	685b      	ldr	r3, [r3, #4]
 8012848:	685a      	ldr	r2, [r3, #4]
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	605a      	str	r2, [r3, #4]
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	685a      	ldr	r2, [r3, #4]
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	3308      	adds	r3, #8
 8012856:	429a      	cmp	r2, r3
 8012858:	d104      	bne.n	8012864 <vTaskSwitchContext+0x88>
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	685a      	ldr	r2, [r3, #4]
 8012860:	68bb      	ldr	r3, [r7, #8]
 8012862:	605a      	str	r2, [r3, #4]
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	4a09      	ldr	r2, [pc, #36]	; (8012890 <vTaskSwitchContext+0xb4>)
 801286c:	6013      	str	r3, [r2, #0]
 801286e:	4a06      	ldr	r2, [pc, #24]	; (8012888 <vTaskSwitchContext+0xac>)
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	6013      	str	r3, [r2, #0]
}
 8012874:	bf00      	nop
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr
 8012880:	20000db0 	.word	0x20000db0
 8012884:	20000d9c 	.word	0x20000d9c
 8012888:	20000d90 	.word	0x20000d90
 801288c:	200008b8 	.word	0x200008b8
 8012890:	200008b4 	.word	0x200008b4

08012894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d109      	bne.n	80128b8 <vTaskPlaceOnEventList+0x24>
 80128a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a8:	f383 8811 	msr	BASEPRI, r3
 80128ac:	f3bf 8f6f 	isb	sy
 80128b0:	f3bf 8f4f 	dsb	sy
 80128b4:	60fb      	str	r3, [r7, #12]
 80128b6:	e7fe      	b.n	80128b6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80128b8:	4b07      	ldr	r3, [pc, #28]	; (80128d8 <vTaskPlaceOnEventList+0x44>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	3318      	adds	r3, #24
 80128be:	4619      	mov	r1, r3
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7fe fb4c 	bl	8010f5e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80128c6:	2101      	movs	r1, #1
 80128c8:	6838      	ldr	r0, [r7, #0]
 80128ca:	f000 fb7d 	bl	8012fc8 <prvAddCurrentTaskToDelayedList>
}
 80128ce:	bf00      	nop
 80128d0:	3710      	adds	r7, #16
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bd80      	pop	{r7, pc}
 80128d6:	bf00      	nop
 80128d8:	200008b4 	.word	0x200008b4

080128dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b086      	sub	sp, #24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d109      	bne.n	8012902 <vTaskPlaceOnEventListRestricted+0x26>
 80128ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f2:	f383 8811 	msr	BASEPRI, r3
 80128f6:	f3bf 8f6f 	isb	sy
 80128fa:	f3bf 8f4f 	dsb	sy
 80128fe:	617b      	str	r3, [r7, #20]
 8012900:	e7fe      	b.n	8012900 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012902:	4b0a      	ldr	r3, [pc, #40]	; (801292c <vTaskPlaceOnEventListRestricted+0x50>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	3318      	adds	r3, #24
 8012908:	4619      	mov	r1, r3
 801290a:	68f8      	ldr	r0, [r7, #12]
 801290c:	f7fe fb03 	bl	8010f16 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d002      	beq.n	801291c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8012916:	f04f 33ff 	mov.w	r3, #4294967295
 801291a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801291c:	6879      	ldr	r1, [r7, #4]
 801291e:	68b8      	ldr	r0, [r7, #8]
 8012920:	f000 fb52 	bl	8012fc8 <prvAddCurrentTaskToDelayedList>
	}
 8012924:	bf00      	nop
 8012926:	3718      	adds	r7, #24
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}
 801292c:	200008b4 	.word	0x200008b4

08012930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b086      	sub	sp, #24
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	68db      	ldr	r3, [r3, #12]
 801293e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d109      	bne.n	801295a <xTaskRemoveFromEventList+0x2a>
 8012946:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294a:	f383 8811 	msr	BASEPRI, r3
 801294e:	f3bf 8f6f 	isb	sy
 8012952:	f3bf 8f4f 	dsb	sy
 8012956:	60fb      	str	r3, [r7, #12]
 8012958:	e7fe      	b.n	8012958 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801295a:	693b      	ldr	r3, [r7, #16]
 801295c:	3318      	adds	r3, #24
 801295e:	4618      	mov	r0, r3
 8012960:	f7fe fb36 	bl	8010fd0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012964:	4b1d      	ldr	r3, [pc, #116]	; (80129dc <xTaskRemoveFromEventList+0xac>)
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d11d      	bne.n	80129a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	3304      	adds	r3, #4
 8012970:	4618      	mov	r0, r3
 8012972:	f7fe fb2d 	bl	8010fd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801297a:	4b19      	ldr	r3, [pc, #100]	; (80129e0 <xTaskRemoveFromEventList+0xb0>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	429a      	cmp	r2, r3
 8012980:	d903      	bls.n	801298a <xTaskRemoveFromEventList+0x5a>
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012986:	4a16      	ldr	r2, [pc, #88]	; (80129e0 <xTaskRemoveFromEventList+0xb0>)
 8012988:	6013      	str	r3, [r2, #0]
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801298e:	4613      	mov	r3, r2
 8012990:	009b      	lsls	r3, r3, #2
 8012992:	4413      	add	r3, r2
 8012994:	009b      	lsls	r3, r3, #2
 8012996:	4a13      	ldr	r2, [pc, #76]	; (80129e4 <xTaskRemoveFromEventList+0xb4>)
 8012998:	441a      	add	r2, r3
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	3304      	adds	r3, #4
 801299e:	4619      	mov	r1, r3
 80129a0:	4610      	mov	r0, r2
 80129a2:	f7fe fab8 	bl	8010f16 <vListInsertEnd>
 80129a6:	e005      	b.n	80129b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	3318      	adds	r3, #24
 80129ac:	4619      	mov	r1, r3
 80129ae:	480e      	ldr	r0, [pc, #56]	; (80129e8 <xTaskRemoveFromEventList+0xb8>)
 80129b0:	f7fe fab1 	bl	8010f16 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129b8:	4b0c      	ldr	r3, [pc, #48]	; (80129ec <xTaskRemoveFromEventList+0xbc>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129be:	429a      	cmp	r2, r3
 80129c0:	d905      	bls.n	80129ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80129c2:	2301      	movs	r3, #1
 80129c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80129c6:	4b0a      	ldr	r3, [pc, #40]	; (80129f0 <xTaskRemoveFromEventList+0xc0>)
 80129c8:	2201      	movs	r2, #1
 80129ca:	601a      	str	r2, [r3, #0]
 80129cc:	e001      	b.n	80129d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80129ce:	2300      	movs	r3, #0
 80129d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80129d2:	697b      	ldr	r3, [r7, #20]
}
 80129d4:	4618      	mov	r0, r3
 80129d6:	3718      	adds	r7, #24
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	20000db0 	.word	0x20000db0
 80129e0:	20000d90 	.word	0x20000d90
 80129e4:	200008b8 	.word	0x200008b8
 80129e8:	20000d48 	.word	0x20000d48
 80129ec:	200008b4 	.word	0x200008b4
 80129f0:	20000d9c 	.word	0x20000d9c

080129f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80129f4:	b480      	push	{r7}
 80129f6:	b083      	sub	sp, #12
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80129fc:	4b06      	ldr	r3, [pc, #24]	; (8012a18 <vTaskInternalSetTimeOutState+0x24>)
 80129fe:	681a      	ldr	r2, [r3, #0]
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012a04:	4b05      	ldr	r3, [pc, #20]	; (8012a1c <vTaskInternalSetTimeOutState+0x28>)
 8012a06:	681a      	ldr	r2, [r3, #0]
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	605a      	str	r2, [r3, #4]
}
 8012a0c:	bf00      	nop
 8012a0e:	370c      	adds	r7, #12
 8012a10:	46bd      	mov	sp, r7
 8012a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a16:	4770      	bx	lr
 8012a18:	20000da0 	.word	0x20000da0
 8012a1c:	20000d8c 	.word	0x20000d8c

08012a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b088      	sub	sp, #32
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d109      	bne.n	8012a44 <xTaskCheckForTimeOut+0x24>
 8012a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a34:	f383 8811 	msr	BASEPRI, r3
 8012a38:	f3bf 8f6f 	isb	sy
 8012a3c:	f3bf 8f4f 	dsb	sy
 8012a40:	613b      	str	r3, [r7, #16]
 8012a42:	e7fe      	b.n	8012a42 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d109      	bne.n	8012a5e <xTaskCheckForTimeOut+0x3e>
 8012a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4e:	f383 8811 	msr	BASEPRI, r3
 8012a52:	f3bf 8f6f 	isb	sy
 8012a56:	f3bf 8f4f 	dsb	sy
 8012a5a:	60fb      	str	r3, [r7, #12]
 8012a5c:	e7fe      	b.n	8012a5c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012a5e:	f001 f82d 	bl	8013abc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012a62:	4b1d      	ldr	r3, [pc, #116]	; (8012ad8 <xTaskCheckForTimeOut+0xb8>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	685b      	ldr	r3, [r3, #4]
 8012a6c:	69ba      	ldr	r2, [r7, #24]
 8012a6e:	1ad3      	subs	r3, r2, r3
 8012a70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a7a:	d102      	bne.n	8012a82 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	61fb      	str	r3, [r7, #28]
 8012a80:	e023      	b.n	8012aca <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	4b15      	ldr	r3, [pc, #84]	; (8012adc <xTaskCheckForTimeOut+0xbc>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d007      	beq.n	8012a9e <xTaskCheckForTimeOut+0x7e>
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	69ba      	ldr	r2, [r7, #24]
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d302      	bcc.n	8012a9e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012a98:	2301      	movs	r3, #1
 8012a9a:	61fb      	str	r3, [r7, #28]
 8012a9c:	e015      	b.n	8012aca <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	697a      	ldr	r2, [r7, #20]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d20b      	bcs.n	8012ac0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	1ad2      	subs	r2, r2, r3
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f7ff ff9d 	bl	80129f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012aba:	2300      	movs	r3, #0
 8012abc:	61fb      	str	r3, [r7, #28]
 8012abe:	e004      	b.n	8012aca <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012ac6:	2301      	movs	r3, #1
 8012ac8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012aca:	f001 f825 	bl	8013b18 <vPortExitCritical>

	return xReturn;
 8012ace:	69fb      	ldr	r3, [r7, #28]
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3720      	adds	r7, #32
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	20000d8c 	.word	0x20000d8c
 8012adc:	20000da0 	.word	0x20000da0

08012ae0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012ae0:	b480      	push	{r7}
 8012ae2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012ae4:	4b03      	ldr	r3, [pc, #12]	; (8012af4 <vTaskMissedYield+0x14>)
 8012ae6:	2201      	movs	r2, #1
 8012ae8:	601a      	str	r2, [r3, #0]
}
 8012aea:	bf00      	nop
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr
 8012af4:	20000d9c 	.word	0x20000d9c

08012af8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b082      	sub	sp, #8
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012b00:	f000 f852 	bl	8012ba8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012b04:	4b06      	ldr	r3, [pc, #24]	; (8012b20 <prvIdleTask+0x28>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d9f9      	bls.n	8012b00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012b0c:	4b05      	ldr	r3, [pc, #20]	; (8012b24 <prvIdleTask+0x2c>)
 8012b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b12:	601a      	str	r2, [r3, #0]
 8012b14:	f3bf 8f4f 	dsb	sy
 8012b18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012b1c:	e7f0      	b.n	8012b00 <prvIdleTask+0x8>
 8012b1e:	bf00      	nop
 8012b20:	200008b8 	.word	0x200008b8
 8012b24:	e000ed04 	.word	0xe000ed04

08012b28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b2e:	2300      	movs	r3, #0
 8012b30:	607b      	str	r3, [r7, #4]
 8012b32:	e00c      	b.n	8012b4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012b34:	687a      	ldr	r2, [r7, #4]
 8012b36:	4613      	mov	r3, r2
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	4413      	add	r3, r2
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	4a12      	ldr	r2, [pc, #72]	; (8012b88 <prvInitialiseTaskLists+0x60>)
 8012b40:	4413      	add	r3, r2
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7fe f9ba 	bl	8010ebc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	607b      	str	r3, [r7, #4]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	2b37      	cmp	r3, #55	; 0x37
 8012b52:	d9ef      	bls.n	8012b34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012b54:	480d      	ldr	r0, [pc, #52]	; (8012b8c <prvInitialiseTaskLists+0x64>)
 8012b56:	f7fe f9b1 	bl	8010ebc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012b5a:	480d      	ldr	r0, [pc, #52]	; (8012b90 <prvInitialiseTaskLists+0x68>)
 8012b5c:	f7fe f9ae 	bl	8010ebc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012b60:	480c      	ldr	r0, [pc, #48]	; (8012b94 <prvInitialiseTaskLists+0x6c>)
 8012b62:	f7fe f9ab 	bl	8010ebc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012b66:	480c      	ldr	r0, [pc, #48]	; (8012b98 <prvInitialiseTaskLists+0x70>)
 8012b68:	f7fe f9a8 	bl	8010ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012b6c:	480b      	ldr	r0, [pc, #44]	; (8012b9c <prvInitialiseTaskLists+0x74>)
 8012b6e:	f7fe f9a5 	bl	8010ebc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012b72:	4b0b      	ldr	r3, [pc, #44]	; (8012ba0 <prvInitialiseTaskLists+0x78>)
 8012b74:	4a05      	ldr	r2, [pc, #20]	; (8012b8c <prvInitialiseTaskLists+0x64>)
 8012b76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012b78:	4b0a      	ldr	r3, [pc, #40]	; (8012ba4 <prvInitialiseTaskLists+0x7c>)
 8012b7a:	4a05      	ldr	r2, [pc, #20]	; (8012b90 <prvInitialiseTaskLists+0x68>)
 8012b7c:	601a      	str	r2, [r3, #0]
}
 8012b7e:	bf00      	nop
 8012b80:	3708      	adds	r7, #8
 8012b82:	46bd      	mov	sp, r7
 8012b84:	bd80      	pop	{r7, pc}
 8012b86:	bf00      	nop
 8012b88:	200008b8 	.word	0x200008b8
 8012b8c:	20000d18 	.word	0x20000d18
 8012b90:	20000d2c 	.word	0x20000d2c
 8012b94:	20000d48 	.word	0x20000d48
 8012b98:	20000d5c 	.word	0x20000d5c
 8012b9c:	20000d74 	.word	0x20000d74
 8012ba0:	20000d40 	.word	0x20000d40
 8012ba4:	20000d44 	.word	0x20000d44

08012ba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012bae:	e019      	b.n	8012be4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012bb0:	f000 ff84 	bl	8013abc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012bb4:	4b0f      	ldr	r3, [pc, #60]	; (8012bf4 <prvCheckTasksWaitingTermination+0x4c>)
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	68db      	ldr	r3, [r3, #12]
 8012bba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	3304      	adds	r3, #4
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f7fe fa05 	bl	8010fd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012bc6:	4b0c      	ldr	r3, [pc, #48]	; (8012bf8 <prvCheckTasksWaitingTermination+0x50>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	3b01      	subs	r3, #1
 8012bcc:	4a0a      	ldr	r2, [pc, #40]	; (8012bf8 <prvCheckTasksWaitingTermination+0x50>)
 8012bce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012bd0:	4b0a      	ldr	r3, [pc, #40]	; (8012bfc <prvCheckTasksWaitingTermination+0x54>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	3b01      	subs	r3, #1
 8012bd6:	4a09      	ldr	r2, [pc, #36]	; (8012bfc <prvCheckTasksWaitingTermination+0x54>)
 8012bd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012bda:	f000 ff9d 	bl	8013b18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f000 f80e 	bl	8012c00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012be4:	4b05      	ldr	r3, [pc, #20]	; (8012bfc <prvCheckTasksWaitingTermination+0x54>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d1e1      	bne.n	8012bb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012bec:	bf00      	nop
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	20000d5c 	.word	0x20000d5c
 8012bf8:	20000d88 	.word	0x20000d88
 8012bfc:	20000d70 	.word	0x20000d70

08012c00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d108      	bne.n	8012c24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c16:	4618      	mov	r0, r3
 8012c18:	f001 f92c 	bl	8013e74 <vPortFree>
				vPortFree( pxTCB );
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f001 f929 	bl	8013e74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012c22:	e017      	b.n	8012c54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d103      	bne.n	8012c36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012c2e:	6878      	ldr	r0, [r7, #4]
 8012c30:	f001 f920 	bl	8013e74 <vPortFree>
	}
 8012c34:	e00e      	b.n	8012c54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012c3c:	2b02      	cmp	r3, #2
 8012c3e:	d009      	beq.n	8012c54 <prvDeleteTCB+0x54>
 8012c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c44:	f383 8811 	msr	BASEPRI, r3
 8012c48:	f3bf 8f6f 	isb	sy
 8012c4c:	f3bf 8f4f 	dsb	sy
 8012c50:	60fb      	str	r3, [r7, #12]
 8012c52:	e7fe      	b.n	8012c52 <prvDeleteTCB+0x52>
	}
 8012c54:	bf00      	nop
 8012c56:	3710      	adds	r7, #16
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012c62:	4b0c      	ldr	r3, [pc, #48]	; (8012c94 <prvResetNextTaskUnblockTime+0x38>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d104      	bne.n	8012c76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012c6c:	4b0a      	ldr	r3, [pc, #40]	; (8012c98 <prvResetNextTaskUnblockTime+0x3c>)
 8012c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012c74:	e008      	b.n	8012c88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c76:	4b07      	ldr	r3, [pc, #28]	; (8012c94 <prvResetNextTaskUnblockTime+0x38>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	4a04      	ldr	r2, [pc, #16]	; (8012c98 <prvResetNextTaskUnblockTime+0x3c>)
 8012c86:	6013      	str	r3, [r2, #0]
}
 8012c88:	bf00      	nop
 8012c8a:	370c      	adds	r7, #12
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c92:	4770      	bx	lr
 8012c94:	20000d40 	.word	0x20000d40
 8012c98:	20000da8 	.word	0x20000da8

08012c9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b083      	sub	sp, #12
 8012ca0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012ca2:	4b05      	ldr	r3, [pc, #20]	; (8012cb8 <xTaskGetCurrentTaskHandle+0x1c>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012ca8:	687b      	ldr	r3, [r7, #4]
	}
 8012caa:	4618      	mov	r0, r3
 8012cac:	370c      	adds	r7, #12
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr
 8012cb6:	bf00      	nop
 8012cb8:	200008b4 	.word	0x200008b4

08012cbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012cbc:	b480      	push	{r7}
 8012cbe:	b083      	sub	sp, #12
 8012cc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012cc2:	4b0b      	ldr	r3, [pc, #44]	; (8012cf0 <xTaskGetSchedulerState+0x34>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d102      	bne.n	8012cd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012cca:	2301      	movs	r3, #1
 8012ccc:	607b      	str	r3, [r7, #4]
 8012cce:	e008      	b.n	8012ce2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cd0:	4b08      	ldr	r3, [pc, #32]	; (8012cf4 <xTaskGetSchedulerState+0x38>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d102      	bne.n	8012cde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012cd8:	2302      	movs	r3, #2
 8012cda:	607b      	str	r3, [r7, #4]
 8012cdc:	e001      	b.n	8012ce2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012ce2:	687b      	ldr	r3, [r7, #4]
	}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	370c      	adds	r7, #12
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cee:	4770      	bx	lr
 8012cf0:	20000d94 	.word	0x20000d94
 8012cf4:	20000db0 	.word	0x20000db0

08012cf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b084      	sub	sp, #16
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012d04:	2300      	movs	r3, #0
 8012d06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d051      	beq.n	8012db2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d12:	4b2a      	ldr	r3, [pc, #168]	; (8012dbc <xTaskPriorityInherit+0xc4>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d241      	bcs.n	8012da0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	699b      	ldr	r3, [r3, #24]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	db06      	blt.n	8012d32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d24:	4b25      	ldr	r3, [pc, #148]	; (8012dbc <xTaskPriorityInherit+0xc4>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	6959      	ldr	r1, [r3, #20]
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	4413      	add	r3, r2
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	4a1f      	ldr	r2, [pc, #124]	; (8012dc0 <xTaskPriorityInherit+0xc8>)
 8012d44:	4413      	add	r3, r2
 8012d46:	4299      	cmp	r1, r3
 8012d48:	d122      	bne.n	8012d90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	3304      	adds	r3, #4
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7fe f93e 	bl	8010fd0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d54:	4b19      	ldr	r3, [pc, #100]	; (8012dbc <xTaskPriorityInherit+0xc4>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d5a:	68bb      	ldr	r3, [r7, #8]
 8012d5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012d5e:	68bb      	ldr	r3, [r7, #8]
 8012d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d62:	4b18      	ldr	r3, [pc, #96]	; (8012dc4 <xTaskPriorityInherit+0xcc>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	429a      	cmp	r2, r3
 8012d68:	d903      	bls.n	8012d72 <xTaskPriorityInherit+0x7a>
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d6e:	4a15      	ldr	r2, [pc, #84]	; (8012dc4 <xTaskPriorityInherit+0xcc>)
 8012d70:	6013      	str	r3, [r2, #0]
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d76:	4613      	mov	r3, r2
 8012d78:	009b      	lsls	r3, r3, #2
 8012d7a:	4413      	add	r3, r2
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	4a10      	ldr	r2, [pc, #64]	; (8012dc0 <xTaskPriorityInherit+0xc8>)
 8012d80:	441a      	add	r2, r3
 8012d82:	68bb      	ldr	r3, [r7, #8]
 8012d84:	3304      	adds	r3, #4
 8012d86:	4619      	mov	r1, r3
 8012d88:	4610      	mov	r0, r2
 8012d8a:	f7fe f8c4 	bl	8010f16 <vListInsertEnd>
 8012d8e:	e004      	b.n	8012d9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012d90:	4b0a      	ldr	r3, [pc, #40]	; (8012dbc <xTaskPriorityInherit+0xc4>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d96:	68bb      	ldr	r3, [r7, #8]
 8012d98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	60fb      	str	r3, [r7, #12]
 8012d9e:	e008      	b.n	8012db2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012da4:	4b05      	ldr	r3, [pc, #20]	; (8012dbc <xTaskPriorityInherit+0xc4>)
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d201      	bcs.n	8012db2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012dae:	2301      	movs	r3, #1
 8012db0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012db2:	68fb      	ldr	r3, [r7, #12]
	}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	200008b4 	.word	0x200008b4
 8012dc0:	200008b8 	.word	0x200008b8
 8012dc4:	20000d90 	.word	0x20000d90

08012dc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b086      	sub	sp, #24
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d054      	beq.n	8012e88 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012dde:	4b2d      	ldr	r3, [pc, #180]	; (8012e94 <xTaskPriorityDisinherit+0xcc>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	693a      	ldr	r2, [r7, #16]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d009      	beq.n	8012dfc <xTaskPriorityDisinherit+0x34>
 8012de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dec:	f383 8811 	msr	BASEPRI, r3
 8012df0:	f3bf 8f6f 	isb	sy
 8012df4:	f3bf 8f4f 	dsb	sy
 8012df8:	60fb      	str	r3, [r7, #12]
 8012dfa:	e7fe      	b.n	8012dfa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012dfc:	693b      	ldr	r3, [r7, #16]
 8012dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d109      	bne.n	8012e18 <xTaskPriorityDisinherit+0x50>
 8012e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e08:	f383 8811 	msr	BASEPRI, r3
 8012e0c:	f3bf 8f6f 	isb	sy
 8012e10:	f3bf 8f4f 	dsb	sy
 8012e14:	60bb      	str	r3, [r7, #8]
 8012e16:	e7fe      	b.n	8012e16 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e1c:	1e5a      	subs	r2, r3, #1
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d02c      	beq.n	8012e88 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d128      	bne.n	8012e88 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	3304      	adds	r3, #4
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fe f8c8 	bl	8010fd0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e58:	4b0f      	ldr	r3, [pc, #60]	; (8012e98 <xTaskPriorityDisinherit+0xd0>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d903      	bls.n	8012e68 <xTaskPriorityDisinherit+0xa0>
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e64:	4a0c      	ldr	r2, [pc, #48]	; (8012e98 <xTaskPriorityDisinherit+0xd0>)
 8012e66:	6013      	str	r3, [r2, #0]
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e6c:	4613      	mov	r3, r2
 8012e6e:	009b      	lsls	r3, r3, #2
 8012e70:	4413      	add	r3, r2
 8012e72:	009b      	lsls	r3, r3, #2
 8012e74:	4a09      	ldr	r2, [pc, #36]	; (8012e9c <xTaskPriorityDisinherit+0xd4>)
 8012e76:	441a      	add	r2, r3
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	3304      	adds	r3, #4
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	4610      	mov	r0, r2
 8012e80:	f7fe f849 	bl	8010f16 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012e84:	2301      	movs	r3, #1
 8012e86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012e88:	697b      	ldr	r3, [r7, #20]
	}
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	3718      	adds	r7, #24
 8012e8e:	46bd      	mov	sp, r7
 8012e90:	bd80      	pop	{r7, pc}
 8012e92:	bf00      	nop
 8012e94:	200008b4 	.word	0x200008b4
 8012e98:	20000d90 	.word	0x20000d90
 8012e9c:	200008b8 	.word	0x200008b8

08012ea0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b088      	sub	sp, #32
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d068      	beq.n	8012f8a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d109      	bne.n	8012ed4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8012ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec4:	f383 8811 	msr	BASEPRI, r3
 8012ec8:	f3bf 8f6f 	isb	sy
 8012ecc:	f3bf 8f4f 	dsb	sy
 8012ed0:	60fb      	str	r3, [r7, #12]
 8012ed2:	e7fe      	b.n	8012ed2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ed8:	683a      	ldr	r2, [r7, #0]
 8012eda:	429a      	cmp	r2, r3
 8012edc:	d902      	bls.n	8012ee4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	61fb      	str	r3, [r7, #28]
 8012ee2:	e002      	b.n	8012eea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012ee4:	69bb      	ldr	r3, [r7, #24]
 8012ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ee8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eee:	69fa      	ldr	r2, [r7, #28]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d04a      	beq.n	8012f8a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012ef4:	69bb      	ldr	r3, [r7, #24]
 8012ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ef8:	697a      	ldr	r2, [r7, #20]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d145      	bne.n	8012f8a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012efe:	4b25      	ldr	r3, [pc, #148]	; (8012f94 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	69ba      	ldr	r2, [r7, #24]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d109      	bne.n	8012f1c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8012f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f0c:	f383 8811 	msr	BASEPRI, r3
 8012f10:	f3bf 8f6f 	isb	sy
 8012f14:	f3bf 8f4f 	dsb	sy
 8012f18:	60bb      	str	r3, [r7, #8]
 8012f1a:	e7fe      	b.n	8012f1a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012f1c:	69bb      	ldr	r3, [r7, #24]
 8012f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f20:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012f22:	69bb      	ldr	r3, [r7, #24]
 8012f24:	69fa      	ldr	r2, [r7, #28]
 8012f26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	699b      	ldr	r3, [r3, #24]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	db04      	blt.n	8012f3a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f36:	69bb      	ldr	r3, [r7, #24]
 8012f38:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012f3a:	69bb      	ldr	r3, [r7, #24]
 8012f3c:	6959      	ldr	r1, [r3, #20]
 8012f3e:	693a      	ldr	r2, [r7, #16]
 8012f40:	4613      	mov	r3, r2
 8012f42:	009b      	lsls	r3, r3, #2
 8012f44:	4413      	add	r3, r2
 8012f46:	009b      	lsls	r3, r3, #2
 8012f48:	4a13      	ldr	r2, [pc, #76]	; (8012f98 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012f4a:	4413      	add	r3, r2
 8012f4c:	4299      	cmp	r1, r3
 8012f4e:	d11c      	bne.n	8012f8a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f50:	69bb      	ldr	r3, [r7, #24]
 8012f52:	3304      	adds	r3, #4
 8012f54:	4618      	mov	r0, r3
 8012f56:	f7fe f83b 	bl	8010fd0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f5e:	4b0f      	ldr	r3, [pc, #60]	; (8012f9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	429a      	cmp	r2, r3
 8012f64:	d903      	bls.n	8012f6e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f6a:	4a0c      	ldr	r2, [pc, #48]	; (8012f9c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012f6c:	6013      	str	r3, [r2, #0]
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f72:	4613      	mov	r3, r2
 8012f74:	009b      	lsls	r3, r3, #2
 8012f76:	4413      	add	r3, r2
 8012f78:	009b      	lsls	r3, r3, #2
 8012f7a:	4a07      	ldr	r2, [pc, #28]	; (8012f98 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012f7c:	441a      	add	r2, r3
 8012f7e:	69bb      	ldr	r3, [r7, #24]
 8012f80:	3304      	adds	r3, #4
 8012f82:	4619      	mov	r1, r3
 8012f84:	4610      	mov	r0, r2
 8012f86:	f7fd ffc6 	bl	8010f16 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012f8a:	bf00      	nop
 8012f8c:	3720      	adds	r7, #32
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	200008b4 	.word	0x200008b4
 8012f98:	200008b8 	.word	0x200008b8
 8012f9c:	20000d90 	.word	0x20000d90

08012fa0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012fa0:	b480      	push	{r7}
 8012fa2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012fa4:	4b07      	ldr	r3, [pc, #28]	; (8012fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d004      	beq.n	8012fb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012fac:	4b05      	ldr	r3, [pc, #20]	; (8012fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012fb2:	3201      	adds	r2, #1
 8012fb4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8012fb6:	4b03      	ldr	r3, [pc, #12]	; (8012fc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8012fb8:	681b      	ldr	r3, [r3, #0]
	}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc2:	4770      	bx	lr
 8012fc4:	200008b4 	.word	0x200008b4

08012fc8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b084      	sub	sp, #16
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	6078      	str	r0, [r7, #4]
 8012fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012fd2:	4b21      	ldr	r3, [pc, #132]	; (8013058 <prvAddCurrentTaskToDelayedList+0x90>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012fd8:	4b20      	ldr	r3, [pc, #128]	; (801305c <prvAddCurrentTaskToDelayedList+0x94>)
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	3304      	adds	r3, #4
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7fd fff6 	bl	8010fd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fea:	d10a      	bne.n	8013002 <prvAddCurrentTaskToDelayedList+0x3a>
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d007      	beq.n	8013002 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ff2:	4b1a      	ldr	r3, [pc, #104]	; (801305c <prvAddCurrentTaskToDelayedList+0x94>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	3304      	adds	r3, #4
 8012ff8:	4619      	mov	r1, r3
 8012ffa:	4819      	ldr	r0, [pc, #100]	; (8013060 <prvAddCurrentTaskToDelayedList+0x98>)
 8012ffc:	f7fd ff8b 	bl	8010f16 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013000:	e026      	b.n	8013050 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013002:	68fa      	ldr	r2, [r7, #12]
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	4413      	add	r3, r2
 8013008:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801300a:	4b14      	ldr	r3, [pc, #80]	; (801305c <prvAddCurrentTaskToDelayedList+0x94>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	68ba      	ldr	r2, [r7, #8]
 8013010:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013012:	68ba      	ldr	r2, [r7, #8]
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	429a      	cmp	r2, r3
 8013018:	d209      	bcs.n	801302e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801301a:	4b12      	ldr	r3, [pc, #72]	; (8013064 <prvAddCurrentTaskToDelayedList+0x9c>)
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	4b0f      	ldr	r3, [pc, #60]	; (801305c <prvAddCurrentTaskToDelayedList+0x94>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	3304      	adds	r3, #4
 8013024:	4619      	mov	r1, r3
 8013026:	4610      	mov	r0, r2
 8013028:	f7fd ff99 	bl	8010f5e <vListInsert>
}
 801302c:	e010      	b.n	8013050 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801302e:	4b0e      	ldr	r3, [pc, #56]	; (8013068 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	4b0a      	ldr	r3, [pc, #40]	; (801305c <prvAddCurrentTaskToDelayedList+0x94>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	3304      	adds	r3, #4
 8013038:	4619      	mov	r1, r3
 801303a:	4610      	mov	r0, r2
 801303c:	f7fd ff8f 	bl	8010f5e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013040:	4b0a      	ldr	r3, [pc, #40]	; (801306c <prvAddCurrentTaskToDelayedList+0xa4>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	68ba      	ldr	r2, [r7, #8]
 8013046:	429a      	cmp	r2, r3
 8013048:	d202      	bcs.n	8013050 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801304a:	4a08      	ldr	r2, [pc, #32]	; (801306c <prvAddCurrentTaskToDelayedList+0xa4>)
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	6013      	str	r3, [r2, #0]
}
 8013050:	bf00      	nop
 8013052:	3710      	adds	r7, #16
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	20000d8c 	.word	0x20000d8c
 801305c:	200008b4 	.word	0x200008b4
 8013060:	20000d74 	.word	0x20000d74
 8013064:	20000d44 	.word	0x20000d44
 8013068:	20000d40 	.word	0x20000d40
 801306c:	20000da8 	.word	0x20000da8

08013070 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b08a      	sub	sp, #40	; 0x28
 8013074:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013076:	2300      	movs	r3, #0
 8013078:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801307a:	f000 fb97 	bl	80137ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801307e:	4b1c      	ldr	r3, [pc, #112]	; (80130f0 <xTimerCreateTimerTask+0x80>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d021      	beq.n	80130ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013086:	2300      	movs	r3, #0
 8013088:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801308a:	2300      	movs	r3, #0
 801308c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801308e:	1d3a      	adds	r2, r7, #4
 8013090:	f107 0108 	add.w	r1, r7, #8
 8013094:	f107 030c 	add.w	r3, r7, #12
 8013098:	4618      	mov	r0, r3
 801309a:	f7fd fef5 	bl	8010e88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801309e:	6879      	ldr	r1, [r7, #4]
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	68fa      	ldr	r2, [r7, #12]
 80130a4:	9202      	str	r2, [sp, #8]
 80130a6:	9301      	str	r3, [sp, #4]
 80130a8:	2302      	movs	r3, #2
 80130aa:	9300      	str	r3, [sp, #0]
 80130ac:	2300      	movs	r3, #0
 80130ae:	460a      	mov	r2, r1
 80130b0:	4910      	ldr	r1, [pc, #64]	; (80130f4 <xTimerCreateTimerTask+0x84>)
 80130b2:	4811      	ldr	r0, [pc, #68]	; (80130f8 <xTimerCreateTimerTask+0x88>)
 80130b4:	f7fe ff1c 	bl	8011ef0 <xTaskCreateStatic>
 80130b8:	4602      	mov	r2, r0
 80130ba:	4b10      	ldr	r3, [pc, #64]	; (80130fc <xTimerCreateTimerTask+0x8c>)
 80130bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80130be:	4b0f      	ldr	r3, [pc, #60]	; (80130fc <xTimerCreateTimerTask+0x8c>)
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d001      	beq.n	80130ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80130c6:	2301      	movs	r3, #1
 80130c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d109      	bne.n	80130e4 <xTimerCreateTimerTask+0x74>
 80130d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d4:	f383 8811 	msr	BASEPRI, r3
 80130d8:	f3bf 8f6f 	isb	sy
 80130dc:	f3bf 8f4f 	dsb	sy
 80130e0:	613b      	str	r3, [r7, #16]
 80130e2:	e7fe      	b.n	80130e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80130e4:	697b      	ldr	r3, [r7, #20]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3718      	adds	r7, #24
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	20000de4 	.word	0x20000de4
 80130f4:	08015460 	.word	0x08015460
 80130f8:	08013361 	.word	0x08013361
 80130fc:	20000de8 	.word	0x20000de8

08013100 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8013100:	b580      	push	{r7, lr}
 8013102:	b088      	sub	sp, #32
 8013104:	af02      	add	r7, sp, #8
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	607a      	str	r2, [r7, #4]
 801310c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801310e:	202c      	movs	r0, #44	; 0x2c
 8013110:	f000 fdee 	bl	8013cf0 <pvPortMalloc>
 8013114:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d00d      	beq.n	8013138 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	2200      	movs	r2, #0
 8013120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	9301      	str	r3, [sp, #4]
 8013128:	6a3b      	ldr	r3, [r7, #32]
 801312a:	9300      	str	r3, [sp, #0]
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	687a      	ldr	r2, [r7, #4]
 8013130:	68b9      	ldr	r1, [r7, #8]
 8013132:	68f8      	ldr	r0, [r7, #12]
 8013134:	f000 f841 	bl	80131ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8013138:	697b      	ldr	r3, [r7, #20]
	}
 801313a:	4618      	mov	r0, r3
 801313c:	3718      	adds	r7, #24
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}

08013142 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8013142:	b580      	push	{r7, lr}
 8013144:	b08a      	sub	sp, #40	; 0x28
 8013146:	af02      	add	r7, sp, #8
 8013148:	60f8      	str	r0, [r7, #12]
 801314a:	60b9      	str	r1, [r7, #8]
 801314c:	607a      	str	r2, [r7, #4]
 801314e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8013150:	232c      	movs	r3, #44	; 0x2c
 8013152:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	2b2c      	cmp	r3, #44	; 0x2c
 8013158:	d009      	beq.n	801316e <xTimerCreateStatic+0x2c>
 801315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315e:	f383 8811 	msr	BASEPRI, r3
 8013162:	f3bf 8f6f 	isb	sy
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	61bb      	str	r3, [r7, #24]
 801316c:	e7fe      	b.n	801316c <xTimerCreateStatic+0x2a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801316e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8013170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013172:	2b00      	cmp	r3, #0
 8013174:	d109      	bne.n	801318a <xTimerCreateStatic+0x48>
 8013176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317a:	f383 8811 	msr	BASEPRI, r3
 801317e:	f3bf 8f6f 	isb	sy
 8013182:	f3bf 8f4f 	dsb	sy
 8013186:	617b      	str	r3, [r7, #20]
 8013188:	e7fe      	b.n	8013188 <xTimerCreateStatic+0x46>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 801318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801318c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d00d      	beq.n	80131b0 <xTimerCreateStatic+0x6e>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8013194:	69fb      	ldr	r3, [r7, #28]
 8013196:	2202      	movs	r2, #2
 8013198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	9301      	str	r3, [sp, #4]
 80131a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a2:	9300      	str	r3, [sp, #0]
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	687a      	ldr	r2, [r7, #4]
 80131a8:	68b9      	ldr	r1, [r7, #8]
 80131aa:	68f8      	ldr	r0, [r7, #12]
 80131ac:	f000 f805 	bl	80131ba <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80131b0:	69fb      	ldr	r3, [r7, #28]
	}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3720      	adds	r7, #32
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}

080131ba <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80131ba:	b580      	push	{r7, lr}
 80131bc:	b086      	sub	sp, #24
 80131be:	af00      	add	r7, sp, #0
 80131c0:	60f8      	str	r0, [r7, #12]
 80131c2:	60b9      	str	r1, [r7, #8]
 80131c4:	607a      	str	r2, [r7, #4]
 80131c6:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d109      	bne.n	80131e2 <prvInitialiseNewTimer+0x28>
 80131ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d2:	f383 8811 	msr	BASEPRI, r3
 80131d6:	f3bf 8f6f 	isb	sy
 80131da:	f3bf 8f4f 	dsb	sy
 80131de:	617b      	str	r3, [r7, #20]
 80131e0:	e7fe      	b.n	80131e0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80131e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d01e      	beq.n	8013226 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80131e8:	f000 fae0 	bl	80137ac <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80131ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ee:	68fa      	ldr	r2, [r7, #12]
 80131f0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80131f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f4:	68ba      	ldr	r2, [r7, #8]
 80131f6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80131f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fa:	683a      	ldr	r2, [r7, #0]
 80131fc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80131fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013200:	6a3a      	ldr	r2, [r7, #32]
 8013202:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8013204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013206:	3304      	adds	r3, #4
 8013208:	4618      	mov	r0, r3
 801320a:	f7fd fe77 	bl	8010efc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d008      	beq.n	8013226 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801321a:	f043 0304 	orr.w	r3, r3, #4
 801321e:	b2da      	uxtb	r2, r3
 8013220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013222:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8013226:	bf00      	nop
 8013228:	3718      	adds	r7, #24
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
	...

08013230 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b08a      	sub	sp, #40	; 0x28
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	607a      	str	r2, [r7, #4]
 801323c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801323e:	2300      	movs	r3, #0
 8013240:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d109      	bne.n	801325c <xTimerGenericCommand+0x2c>
 8013248:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324c:	f383 8811 	msr	BASEPRI, r3
 8013250:	f3bf 8f6f 	isb	sy
 8013254:	f3bf 8f4f 	dsb	sy
 8013258:	623b      	str	r3, [r7, #32]
 801325a:	e7fe      	b.n	801325a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801325c:	4b19      	ldr	r3, [pc, #100]	; (80132c4 <xTimerGenericCommand+0x94>)
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d02a      	beq.n	80132ba <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	2b05      	cmp	r3, #5
 8013274:	dc18      	bgt.n	80132a8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013276:	f7ff fd21 	bl	8012cbc <xTaskGetSchedulerState>
 801327a:	4603      	mov	r3, r0
 801327c:	2b02      	cmp	r3, #2
 801327e:	d109      	bne.n	8013294 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013280:	4b10      	ldr	r3, [pc, #64]	; (80132c4 <xTimerGenericCommand+0x94>)
 8013282:	6818      	ldr	r0, [r3, #0]
 8013284:	f107 0110 	add.w	r1, r7, #16
 8013288:	2300      	movs	r3, #0
 801328a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801328c:	f7fe f8bc 	bl	8011408 <xQueueGenericSend>
 8013290:	6278      	str	r0, [r7, #36]	; 0x24
 8013292:	e012      	b.n	80132ba <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013294:	4b0b      	ldr	r3, [pc, #44]	; (80132c4 <xTimerGenericCommand+0x94>)
 8013296:	6818      	ldr	r0, [r3, #0]
 8013298:	f107 0110 	add.w	r1, r7, #16
 801329c:	2300      	movs	r3, #0
 801329e:	2200      	movs	r2, #0
 80132a0:	f7fe f8b2 	bl	8011408 <xQueueGenericSend>
 80132a4:	6278      	str	r0, [r7, #36]	; 0x24
 80132a6:	e008      	b.n	80132ba <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80132a8:	4b06      	ldr	r3, [pc, #24]	; (80132c4 <xTimerGenericCommand+0x94>)
 80132aa:	6818      	ldr	r0, [r3, #0]
 80132ac:	f107 0110 	add.w	r1, r7, #16
 80132b0:	2300      	movs	r3, #0
 80132b2:	683a      	ldr	r2, [r7, #0]
 80132b4:	f7fe f9a2 	bl	80115fc <xQueueGenericSendFromISR>
 80132b8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80132ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3728      	adds	r7, #40	; 0x28
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	20000de4 	.word	0x20000de4

080132c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b088      	sub	sp, #32
 80132cc:	af02      	add	r7, sp, #8
 80132ce:	6078      	str	r0, [r7, #4]
 80132d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132d2:	4b22      	ldr	r3, [pc, #136]	; (801335c <prvProcessExpiredTimer+0x94>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80132dc:	697b      	ldr	r3, [r7, #20]
 80132de:	3304      	adds	r3, #4
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7fd fe75 	bl	8010fd0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80132ec:	f003 0304 	and.w	r3, r3, #4
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d021      	beq.n	8013338 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80132f4:	697b      	ldr	r3, [r7, #20]
 80132f6:	699a      	ldr	r2, [r3, #24]
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	18d1      	adds	r1, r2, r3
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	683a      	ldr	r2, [r7, #0]
 8013300:	6978      	ldr	r0, [r7, #20]
 8013302:	f000 f8d1 	bl	80134a8 <prvInsertTimerInActiveList>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d01e      	beq.n	801334a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801330c:	2300      	movs	r3, #0
 801330e:	9300      	str	r3, [sp, #0]
 8013310:	2300      	movs	r3, #0
 8013312:	687a      	ldr	r2, [r7, #4]
 8013314:	2100      	movs	r1, #0
 8013316:	6978      	ldr	r0, [r7, #20]
 8013318:	f7ff ff8a 	bl	8013230 <xTimerGenericCommand>
 801331c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d112      	bne.n	801334a <prvProcessExpiredTimer+0x82>
 8013324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013328:	f383 8811 	msr	BASEPRI, r3
 801332c:	f3bf 8f6f 	isb	sy
 8013330:	f3bf 8f4f 	dsb	sy
 8013334:	60fb      	str	r3, [r7, #12]
 8013336:	e7fe      	b.n	8013336 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801333e:	f023 0301 	bic.w	r3, r3, #1
 8013342:	b2da      	uxtb	r2, r3
 8013344:	697b      	ldr	r3, [r7, #20]
 8013346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	6a1b      	ldr	r3, [r3, #32]
 801334e:	6978      	ldr	r0, [r7, #20]
 8013350:	4798      	blx	r3
}
 8013352:	bf00      	nop
 8013354:	3718      	adds	r7, #24
 8013356:	46bd      	mov	sp, r7
 8013358:	bd80      	pop	{r7, pc}
 801335a:	bf00      	nop
 801335c:	20000ddc 	.word	0x20000ddc

08013360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013368:	f107 0308 	add.w	r3, r7, #8
 801336c:	4618      	mov	r0, r3
 801336e:	f000 f857 	bl	8013420 <prvGetNextExpireTime>
 8013372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	4619      	mov	r1, r3
 8013378:	68f8      	ldr	r0, [r7, #12]
 801337a:	f000 f803 	bl	8013384 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801337e:	f000 f8d5 	bl	801352c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013382:	e7f1      	b.n	8013368 <prvTimerTask+0x8>

08013384 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
 801338c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801338e:	f7ff f8b3 	bl	80124f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013392:	f107 0308 	add.w	r3, r7, #8
 8013396:	4618      	mov	r0, r3
 8013398:	f000 f866 	bl	8013468 <prvSampleTimeNow>
 801339c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d130      	bne.n	8013406 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80133a4:	683b      	ldr	r3, [r7, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d10a      	bne.n	80133c0 <prvProcessTimerOrBlockTask+0x3c>
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	d806      	bhi.n	80133c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80133b2:	f7ff f8af 	bl	8012514 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80133b6:	68f9      	ldr	r1, [r7, #12]
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f7ff ff85 	bl	80132c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80133be:	e024      	b.n	801340a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d008      	beq.n	80133d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80133c6:	4b13      	ldr	r3, [pc, #76]	; (8013414 <prvProcessTimerOrBlockTask+0x90>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d101      	bne.n	80133d4 <prvProcessTimerOrBlockTask+0x50>
 80133d0:	2301      	movs	r3, #1
 80133d2:	e000      	b.n	80133d6 <prvProcessTimerOrBlockTask+0x52>
 80133d4:	2300      	movs	r3, #0
 80133d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80133d8:	4b0f      	ldr	r3, [pc, #60]	; (8013418 <prvProcessTimerOrBlockTask+0x94>)
 80133da:	6818      	ldr	r0, [r3, #0]
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	1ad3      	subs	r3, r2, r3
 80133e2:	683a      	ldr	r2, [r7, #0]
 80133e4:	4619      	mov	r1, r3
 80133e6:	f7fe fd4f 	bl	8011e88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80133ea:	f7ff f893 	bl	8012514 <xTaskResumeAll>
 80133ee:	4603      	mov	r3, r0
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d10a      	bne.n	801340a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80133f4:	4b09      	ldr	r3, [pc, #36]	; (801341c <prvProcessTimerOrBlockTask+0x98>)
 80133f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133fa:	601a      	str	r2, [r3, #0]
 80133fc:	f3bf 8f4f 	dsb	sy
 8013400:	f3bf 8f6f 	isb	sy
}
 8013404:	e001      	b.n	801340a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013406:	f7ff f885 	bl	8012514 <xTaskResumeAll>
}
 801340a:	bf00      	nop
 801340c:	3710      	adds	r7, #16
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	20000de0 	.word	0x20000de0
 8013418:	20000de4 	.word	0x20000de4
 801341c:	e000ed04 	.word	0xe000ed04

08013420 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013420:	b480      	push	{r7}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013428:	4b0e      	ldr	r3, [pc, #56]	; (8013464 <prvGetNextExpireTime+0x44>)
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	681b      	ldr	r3, [r3, #0]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d101      	bne.n	8013436 <prvGetNextExpireTime+0x16>
 8013432:	2201      	movs	r2, #1
 8013434:	e000      	b.n	8013438 <prvGetNextExpireTime+0x18>
 8013436:	2200      	movs	r2, #0
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d105      	bne.n	8013450 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013444:	4b07      	ldr	r3, [pc, #28]	; (8013464 <prvGetNextExpireTime+0x44>)
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	68db      	ldr	r3, [r3, #12]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	60fb      	str	r3, [r7, #12]
 801344e:	e001      	b.n	8013454 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013450:	2300      	movs	r3, #0
 8013452:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013454:	68fb      	ldr	r3, [r7, #12]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3714      	adds	r7, #20
 801345a:	46bd      	mov	sp, r7
 801345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013460:	4770      	bx	lr
 8013462:	bf00      	nop
 8013464:	20000ddc 	.word	0x20000ddc

08013468 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b084      	sub	sp, #16
 801346c:	af00      	add	r7, sp, #0
 801346e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013470:	f7ff f8ec 	bl	801264c <xTaskGetTickCount>
 8013474:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013476:	4b0b      	ldr	r3, [pc, #44]	; (80134a4 <prvSampleTimeNow+0x3c>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	68fa      	ldr	r2, [r7, #12]
 801347c:	429a      	cmp	r2, r3
 801347e:	d205      	bcs.n	801348c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013480:	f000 f930 	bl	80136e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2201      	movs	r2, #1
 8013488:	601a      	str	r2, [r3, #0]
 801348a:	e002      	b.n	8013492 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	2200      	movs	r2, #0
 8013490:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013492:	4a04      	ldr	r2, [pc, #16]	; (80134a4 <prvSampleTimeNow+0x3c>)
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013498:	68fb      	ldr	r3, [r7, #12]
}
 801349a:	4618      	mov	r0, r3
 801349c:	3710      	adds	r7, #16
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
 80134a2:	bf00      	nop
 80134a4:	20000dec 	.word	0x20000dec

080134a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b086      	sub	sp, #24
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
 80134b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80134b6:	2300      	movs	r3, #0
 80134b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	68ba      	ldr	r2, [r7, #8]
 80134be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	68fa      	ldr	r2, [r7, #12]
 80134c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80134c6:	68ba      	ldr	r2, [r7, #8]
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d812      	bhi.n	80134f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80134ce:	687a      	ldr	r2, [r7, #4]
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	1ad2      	subs	r2, r2, r3
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	699b      	ldr	r3, [r3, #24]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d302      	bcc.n	80134e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80134dc:	2301      	movs	r3, #1
 80134de:	617b      	str	r3, [r7, #20]
 80134e0:	e01b      	b.n	801351a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80134e2:	4b10      	ldr	r3, [pc, #64]	; (8013524 <prvInsertTimerInActiveList+0x7c>)
 80134e4:	681a      	ldr	r2, [r3, #0]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	3304      	adds	r3, #4
 80134ea:	4619      	mov	r1, r3
 80134ec:	4610      	mov	r0, r2
 80134ee:	f7fd fd36 	bl	8010f5e <vListInsert>
 80134f2:	e012      	b.n	801351a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d206      	bcs.n	801350a <prvInsertTimerInActiveList+0x62>
 80134fc:	68ba      	ldr	r2, [r7, #8]
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	429a      	cmp	r2, r3
 8013502:	d302      	bcc.n	801350a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013504:	2301      	movs	r3, #1
 8013506:	617b      	str	r3, [r7, #20]
 8013508:	e007      	b.n	801351a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801350a:	4b07      	ldr	r3, [pc, #28]	; (8013528 <prvInsertTimerInActiveList+0x80>)
 801350c:	681a      	ldr	r2, [r3, #0]
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	3304      	adds	r3, #4
 8013512:	4619      	mov	r1, r3
 8013514:	4610      	mov	r0, r2
 8013516:	f7fd fd22 	bl	8010f5e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801351a:	697b      	ldr	r3, [r7, #20]
}
 801351c:	4618      	mov	r0, r3
 801351e:	3718      	adds	r7, #24
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	20000de0 	.word	0x20000de0
 8013528:	20000ddc 	.word	0x20000ddc

0801352c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b08e      	sub	sp, #56	; 0x38
 8013530:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013532:	e0c6      	b.n	80136c2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	da17      	bge.n	801356a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801353a:	1d3b      	adds	r3, r7, #4
 801353c:	3304      	adds	r3, #4
 801353e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013542:	2b00      	cmp	r3, #0
 8013544:	d109      	bne.n	801355a <prvProcessReceivedCommands+0x2e>
 8013546:	f04f 0350 	mov.w	r3, #80	; 0x50
 801354a:	f383 8811 	msr	BASEPRI, r3
 801354e:	f3bf 8f6f 	isb	sy
 8013552:	f3bf 8f4f 	dsb	sy
 8013556:	61fb      	str	r3, [r7, #28]
 8013558:	e7fe      	b.n	8013558 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801355a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013560:	6850      	ldr	r0, [r2, #4]
 8013562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013564:	6892      	ldr	r2, [r2, #8]
 8013566:	4611      	mov	r1, r2
 8013568:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2b00      	cmp	r3, #0
 801356e:	f2c0 80a7 	blt.w	80136c0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013578:	695b      	ldr	r3, [r3, #20]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d004      	beq.n	8013588 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013580:	3304      	adds	r3, #4
 8013582:	4618      	mov	r0, r3
 8013584:	f7fd fd24 	bl	8010fd0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013588:	463b      	mov	r3, r7
 801358a:	4618      	mov	r0, r3
 801358c:	f7ff ff6c 	bl	8013468 <prvSampleTimeNow>
 8013590:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2b09      	cmp	r3, #9
 8013596:	f200 8094 	bhi.w	80136c2 <prvProcessReceivedCommands+0x196>
 801359a:	a201      	add	r2, pc, #4	; (adr r2, 80135a0 <prvProcessReceivedCommands+0x74>)
 801359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135a0:	080135c9 	.word	0x080135c9
 80135a4:	080135c9 	.word	0x080135c9
 80135a8:	080135c9 	.word	0x080135c9
 80135ac:	0801363b 	.word	0x0801363b
 80135b0:	0801364f 	.word	0x0801364f
 80135b4:	08013697 	.word	0x08013697
 80135b8:	080135c9 	.word	0x080135c9
 80135bc:	080135c9 	.word	0x080135c9
 80135c0:	0801363b 	.word	0x0801363b
 80135c4:	0801364f 	.word	0x0801364f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80135c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80135ce:	f043 0301 	orr.w	r3, r3, #1
 80135d2:	b2da      	uxtb	r2, r3
 80135d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80135da:	68ba      	ldr	r2, [r7, #8]
 80135dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135de:	699b      	ldr	r3, [r3, #24]
 80135e0:	18d1      	adds	r1, r2, r3
 80135e2:	68bb      	ldr	r3, [r7, #8]
 80135e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135e8:	f7ff ff5e 	bl	80134a8 <prvInsertTimerInActiveList>
 80135ec:	4603      	mov	r3, r0
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d067      	beq.n	80136c2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80135f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f4:	6a1b      	ldr	r3, [r3, #32]
 80135f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80135fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013600:	f003 0304 	and.w	r3, r3, #4
 8013604:	2b00      	cmp	r3, #0
 8013606:	d05c      	beq.n	80136c2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013608:	68ba      	ldr	r2, [r7, #8]
 801360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360c:	699b      	ldr	r3, [r3, #24]
 801360e:	441a      	add	r2, r3
 8013610:	2300      	movs	r3, #0
 8013612:	9300      	str	r3, [sp, #0]
 8013614:	2300      	movs	r3, #0
 8013616:	2100      	movs	r1, #0
 8013618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801361a:	f7ff fe09 	bl	8013230 <xTimerGenericCommand>
 801361e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013620:	6a3b      	ldr	r3, [r7, #32]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d14d      	bne.n	80136c2 <prvProcessReceivedCommands+0x196>
 8013626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362a:	f383 8811 	msr	BASEPRI, r3
 801362e:	f3bf 8f6f 	isb	sy
 8013632:	f3bf 8f4f 	dsb	sy
 8013636:	61bb      	str	r3, [r7, #24]
 8013638:	e7fe      	b.n	8013638 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013640:	f023 0301 	bic.w	r3, r3, #1
 8013644:	b2da      	uxtb	r2, r3
 8013646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013648:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801364c:	e039      	b.n	80136c2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013654:	f043 0301 	orr.w	r3, r3, #1
 8013658:	b2da      	uxtb	r2, r3
 801365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013664:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	699b      	ldr	r3, [r3, #24]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d109      	bne.n	8013682 <prvProcessReceivedCommands+0x156>
 801366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013672:	f383 8811 	msr	BASEPRI, r3
 8013676:	f3bf 8f6f 	isb	sy
 801367a:	f3bf 8f4f 	dsb	sy
 801367e:	617b      	str	r3, [r7, #20]
 8013680:	e7fe      	b.n	8013680 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013684:	699a      	ldr	r2, [r3, #24]
 8013686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013688:	18d1      	adds	r1, r2, r3
 801368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801368e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013690:	f7ff ff0a 	bl	80134a8 <prvInsertTimerInActiveList>
					break;
 8013694:	e015      	b.n	80136c2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801369c:	f003 0302 	and.w	r3, r3, #2
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d103      	bne.n	80136ac <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80136a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136a6:	f000 fbe5 	bl	8013e74 <vPortFree>
 80136aa:	e00a      	b.n	80136c2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80136ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80136b2:	f023 0301 	bic.w	r3, r3, #1
 80136b6:	b2da      	uxtb	r2, r3
 80136b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80136be:	e000      	b.n	80136c2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80136c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80136c2:	4b07      	ldr	r3, [pc, #28]	; (80136e0 <prvProcessReceivedCommands+0x1b4>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	1d39      	adds	r1, r7, #4
 80136c8:	2200      	movs	r2, #0
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7fe f82a 	bl	8011724 <xQueueReceive>
 80136d0:	4603      	mov	r3, r0
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	f47f af2e 	bne.w	8013534 <prvProcessReceivedCommands+0x8>
	}
}
 80136d8:	bf00      	nop
 80136da:	3730      	adds	r7, #48	; 0x30
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	20000de4 	.word	0x20000de4

080136e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b088      	sub	sp, #32
 80136e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80136ea:	e047      	b.n	801377c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80136ec:	4b2d      	ldr	r3, [pc, #180]	; (80137a4 <prvSwitchTimerLists+0xc0>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	68db      	ldr	r3, [r3, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136f6:	4b2b      	ldr	r3, [pc, #172]	; (80137a4 <prvSwitchTimerLists+0xc0>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	68db      	ldr	r3, [r3, #12]
 80136fc:	68db      	ldr	r3, [r3, #12]
 80136fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	3304      	adds	r3, #4
 8013704:	4618      	mov	r0, r3
 8013706:	f7fd fc63 	bl	8010fd0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	6a1b      	ldr	r3, [r3, #32]
 801370e:	68f8      	ldr	r0, [r7, #12]
 8013710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013718:	f003 0304 	and.w	r3, r3, #4
 801371c:	2b00      	cmp	r3, #0
 801371e:	d02d      	beq.n	801377c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	699b      	ldr	r3, [r3, #24]
 8013724:	693a      	ldr	r2, [r7, #16]
 8013726:	4413      	add	r3, r2
 8013728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801372a:	68ba      	ldr	r2, [r7, #8]
 801372c:	693b      	ldr	r3, [r7, #16]
 801372e:	429a      	cmp	r2, r3
 8013730:	d90e      	bls.n	8013750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	68ba      	ldr	r2, [r7, #8]
 8013736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	68fa      	ldr	r2, [r7, #12]
 801373c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801373e:	4b19      	ldr	r3, [pc, #100]	; (80137a4 <prvSwitchTimerLists+0xc0>)
 8013740:	681a      	ldr	r2, [r3, #0]
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	3304      	adds	r3, #4
 8013746:	4619      	mov	r1, r3
 8013748:	4610      	mov	r0, r2
 801374a:	f7fd fc08 	bl	8010f5e <vListInsert>
 801374e:	e015      	b.n	801377c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013750:	2300      	movs	r3, #0
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	2300      	movs	r3, #0
 8013756:	693a      	ldr	r2, [r7, #16]
 8013758:	2100      	movs	r1, #0
 801375a:	68f8      	ldr	r0, [r7, #12]
 801375c:	f7ff fd68 	bl	8013230 <xTimerGenericCommand>
 8013760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d109      	bne.n	801377c <prvSwitchTimerLists+0x98>
 8013768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801376c:	f383 8811 	msr	BASEPRI, r3
 8013770:	f3bf 8f6f 	isb	sy
 8013774:	f3bf 8f4f 	dsb	sy
 8013778:	603b      	str	r3, [r7, #0]
 801377a:	e7fe      	b.n	801377a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801377c:	4b09      	ldr	r3, [pc, #36]	; (80137a4 <prvSwitchTimerLists+0xc0>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d1b2      	bne.n	80136ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013786:	4b07      	ldr	r3, [pc, #28]	; (80137a4 <prvSwitchTimerLists+0xc0>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801378c:	4b06      	ldr	r3, [pc, #24]	; (80137a8 <prvSwitchTimerLists+0xc4>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4a04      	ldr	r2, [pc, #16]	; (80137a4 <prvSwitchTimerLists+0xc0>)
 8013792:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013794:	4a04      	ldr	r2, [pc, #16]	; (80137a8 <prvSwitchTimerLists+0xc4>)
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	6013      	str	r3, [r2, #0]
}
 801379a:	bf00      	nop
 801379c:	3718      	adds	r7, #24
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	20000ddc 	.word	0x20000ddc
 80137a8:	20000de0 	.word	0x20000de0

080137ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b082      	sub	sp, #8
 80137b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80137b2:	f000 f983 	bl	8013abc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80137b6:	4b15      	ldr	r3, [pc, #84]	; (801380c <prvCheckForValidListAndQueue+0x60>)
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d120      	bne.n	8013800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80137be:	4814      	ldr	r0, [pc, #80]	; (8013810 <prvCheckForValidListAndQueue+0x64>)
 80137c0:	f7fd fb7c 	bl	8010ebc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80137c4:	4813      	ldr	r0, [pc, #76]	; (8013814 <prvCheckForValidListAndQueue+0x68>)
 80137c6:	f7fd fb79 	bl	8010ebc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80137ca:	4b13      	ldr	r3, [pc, #76]	; (8013818 <prvCheckForValidListAndQueue+0x6c>)
 80137cc:	4a10      	ldr	r2, [pc, #64]	; (8013810 <prvCheckForValidListAndQueue+0x64>)
 80137ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80137d0:	4b12      	ldr	r3, [pc, #72]	; (801381c <prvCheckForValidListAndQueue+0x70>)
 80137d2:	4a10      	ldr	r2, [pc, #64]	; (8013814 <prvCheckForValidListAndQueue+0x68>)
 80137d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80137d6:	2300      	movs	r3, #0
 80137d8:	9300      	str	r3, [sp, #0]
 80137da:	4b11      	ldr	r3, [pc, #68]	; (8013820 <prvCheckForValidListAndQueue+0x74>)
 80137dc:	4a11      	ldr	r2, [pc, #68]	; (8013824 <prvCheckForValidListAndQueue+0x78>)
 80137de:	2110      	movs	r1, #16
 80137e0:	200a      	movs	r0, #10
 80137e2:	f7fd fc87 	bl	80110f4 <xQueueGenericCreateStatic>
 80137e6:	4602      	mov	r2, r0
 80137e8:	4b08      	ldr	r3, [pc, #32]	; (801380c <prvCheckForValidListAndQueue+0x60>)
 80137ea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80137ec:	4b07      	ldr	r3, [pc, #28]	; (801380c <prvCheckForValidListAndQueue+0x60>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d005      	beq.n	8013800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80137f4:	4b05      	ldr	r3, [pc, #20]	; (801380c <prvCheckForValidListAndQueue+0x60>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	490b      	ldr	r1, [pc, #44]	; (8013828 <prvCheckForValidListAndQueue+0x7c>)
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7fe fb1c 	bl	8011e38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013800:	f000 f98a 	bl	8013b18 <vPortExitCritical>
}
 8013804:	bf00      	nop
 8013806:	46bd      	mov	sp, r7
 8013808:	bd80      	pop	{r7, pc}
 801380a:	bf00      	nop
 801380c:	20000de4 	.word	0x20000de4
 8013810:	20000db4 	.word	0x20000db4
 8013814:	20000dc8 	.word	0x20000dc8
 8013818:	20000ddc 	.word	0x20000ddc
 801381c:	20000de0 	.word	0x20000de0
 8013820:	20000e90 	.word	0x20000e90
 8013824:	20000df0 	.word	0x20000df0
 8013828:	08015468 	.word	0x08015468

0801382c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d109      	bne.n	8013852 <pvTimerGetTimerID+0x26>
 801383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013842:	f383 8811 	msr	BASEPRI, r3
 8013846:	f3bf 8f6f 	isb	sy
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	60fb      	str	r3, [r7, #12]
 8013850:	e7fe      	b.n	8013850 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8013852:	f000 f933 	bl	8013abc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8013856:	697b      	ldr	r3, [r7, #20]
 8013858:	69db      	ldr	r3, [r3, #28]
 801385a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801385c:	f000 f95c 	bl	8013b18 <vPortExitCritical>

	return pvReturn;
 8013860:	693b      	ldr	r3, [r7, #16]
}
 8013862:	4618      	mov	r0, r3
 8013864:	3718      	adds	r7, #24
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
	...

0801386c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801386c:	b480      	push	{r7}
 801386e:	b085      	sub	sp, #20
 8013870:	af00      	add	r7, sp, #0
 8013872:	60f8      	str	r0, [r7, #12]
 8013874:	60b9      	str	r1, [r7, #8]
 8013876:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	3b04      	subs	r3, #4
 801387c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013884:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	3b04      	subs	r3, #4
 801388a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	f023 0201 	bic.w	r2, r3, #1
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	3b04      	subs	r3, #4
 801389a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801389c:	4a0c      	ldr	r2, [pc, #48]	; (80138d0 <pxPortInitialiseStack+0x64>)
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	3b14      	subs	r3, #20
 80138a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	3b04      	subs	r3, #4
 80138b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	f06f 0202 	mvn.w	r2, #2
 80138ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	3b20      	subs	r3, #32
 80138c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80138c2:	68fb      	ldr	r3, [r7, #12]
}
 80138c4:	4618      	mov	r0, r3
 80138c6:	3714      	adds	r7, #20
 80138c8:	46bd      	mov	sp, r7
 80138ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ce:	4770      	bx	lr
 80138d0:	080138d5 	.word	0x080138d5

080138d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80138d4:	b480      	push	{r7}
 80138d6:	b085      	sub	sp, #20
 80138d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80138da:	2300      	movs	r3, #0
 80138dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80138de:	4b11      	ldr	r3, [pc, #68]	; (8013924 <prvTaskExitError+0x50>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138e6:	d009      	beq.n	80138fc <prvTaskExitError+0x28>
 80138e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138ec:	f383 8811 	msr	BASEPRI, r3
 80138f0:	f3bf 8f6f 	isb	sy
 80138f4:	f3bf 8f4f 	dsb	sy
 80138f8:	60fb      	str	r3, [r7, #12]
 80138fa:	e7fe      	b.n	80138fa <prvTaskExitError+0x26>
 80138fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013900:	f383 8811 	msr	BASEPRI, r3
 8013904:	f3bf 8f6f 	isb	sy
 8013908:	f3bf 8f4f 	dsb	sy
 801390c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801390e:	bf00      	nop
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d0fc      	beq.n	8013910 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013916:	bf00      	nop
 8013918:	3714      	adds	r7, #20
 801391a:	46bd      	mov	sp, r7
 801391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013920:	4770      	bx	lr
 8013922:	bf00      	nop
 8013924:	200000cc 	.word	0x200000cc
	...

08013930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013930:	4b07      	ldr	r3, [pc, #28]	; (8013950 <pxCurrentTCBConst2>)
 8013932:	6819      	ldr	r1, [r3, #0]
 8013934:	6808      	ldr	r0, [r1, #0]
 8013936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801393a:	f380 8809 	msr	PSP, r0
 801393e:	f3bf 8f6f 	isb	sy
 8013942:	f04f 0000 	mov.w	r0, #0
 8013946:	f380 8811 	msr	BASEPRI, r0
 801394a:	4770      	bx	lr
 801394c:	f3af 8000 	nop.w

08013950 <pxCurrentTCBConst2>:
 8013950:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013954:	bf00      	nop
 8013956:	bf00      	nop

08013958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013958:	4808      	ldr	r0, [pc, #32]	; (801397c <prvPortStartFirstTask+0x24>)
 801395a:	6800      	ldr	r0, [r0, #0]
 801395c:	6800      	ldr	r0, [r0, #0]
 801395e:	f380 8808 	msr	MSP, r0
 8013962:	f04f 0000 	mov.w	r0, #0
 8013966:	f380 8814 	msr	CONTROL, r0
 801396a:	b662      	cpsie	i
 801396c:	b661      	cpsie	f
 801396e:	f3bf 8f4f 	dsb	sy
 8013972:	f3bf 8f6f 	isb	sy
 8013976:	df00      	svc	0
 8013978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801397a:	bf00      	nop
 801397c:	e000ed08 	.word	0xe000ed08

08013980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b086      	sub	sp, #24
 8013984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013986:	4b44      	ldr	r3, [pc, #272]	; (8013a98 <xPortStartScheduler+0x118>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	4a44      	ldr	r2, [pc, #272]	; (8013a9c <xPortStartScheduler+0x11c>)
 801398c:	4293      	cmp	r3, r2
 801398e:	d109      	bne.n	80139a4 <xPortStartScheduler+0x24>
 8013990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013994:	f383 8811 	msr	BASEPRI, r3
 8013998:	f3bf 8f6f 	isb	sy
 801399c:	f3bf 8f4f 	dsb	sy
 80139a0:	613b      	str	r3, [r7, #16]
 80139a2:	e7fe      	b.n	80139a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80139a4:	4b3c      	ldr	r3, [pc, #240]	; (8013a98 <xPortStartScheduler+0x118>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	4a3d      	ldr	r2, [pc, #244]	; (8013aa0 <xPortStartScheduler+0x120>)
 80139aa:	4293      	cmp	r3, r2
 80139ac:	d109      	bne.n	80139c2 <xPortStartScheduler+0x42>
 80139ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b2:	f383 8811 	msr	BASEPRI, r3
 80139b6:	f3bf 8f6f 	isb	sy
 80139ba:	f3bf 8f4f 	dsb	sy
 80139be:	60fb      	str	r3, [r7, #12]
 80139c0:	e7fe      	b.n	80139c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80139c2:	4b38      	ldr	r3, [pc, #224]	; (8013aa4 <xPortStartScheduler+0x124>)
 80139c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	781b      	ldrb	r3, [r3, #0]
 80139ca:	b2db      	uxtb	r3, r3
 80139cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	22ff      	movs	r2, #255	; 0xff
 80139d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80139d4:	697b      	ldr	r3, [r7, #20]
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	b2db      	uxtb	r3, r3
 80139da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80139dc:	78fb      	ldrb	r3, [r7, #3]
 80139de:	b2db      	uxtb	r3, r3
 80139e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80139e4:	b2da      	uxtb	r2, r3
 80139e6:	4b30      	ldr	r3, [pc, #192]	; (8013aa8 <xPortStartScheduler+0x128>)
 80139e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80139ea:	4b30      	ldr	r3, [pc, #192]	; (8013aac <xPortStartScheduler+0x12c>)
 80139ec:	2207      	movs	r2, #7
 80139ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80139f0:	e009      	b.n	8013a06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80139f2:	4b2e      	ldr	r3, [pc, #184]	; (8013aac <xPortStartScheduler+0x12c>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	3b01      	subs	r3, #1
 80139f8:	4a2c      	ldr	r2, [pc, #176]	; (8013aac <xPortStartScheduler+0x12c>)
 80139fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80139fc:	78fb      	ldrb	r3, [r7, #3]
 80139fe:	b2db      	uxtb	r3, r3
 8013a00:	005b      	lsls	r3, r3, #1
 8013a02:	b2db      	uxtb	r3, r3
 8013a04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013a06:	78fb      	ldrb	r3, [r7, #3]
 8013a08:	b2db      	uxtb	r3, r3
 8013a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a0e:	2b80      	cmp	r3, #128	; 0x80
 8013a10:	d0ef      	beq.n	80139f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013a12:	4b26      	ldr	r3, [pc, #152]	; (8013aac <xPortStartScheduler+0x12c>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f1c3 0307 	rsb	r3, r3, #7
 8013a1a:	2b04      	cmp	r3, #4
 8013a1c:	d009      	beq.n	8013a32 <xPortStartScheduler+0xb2>
 8013a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a22:	f383 8811 	msr	BASEPRI, r3
 8013a26:	f3bf 8f6f 	isb	sy
 8013a2a:	f3bf 8f4f 	dsb	sy
 8013a2e:	60bb      	str	r3, [r7, #8]
 8013a30:	e7fe      	b.n	8013a30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013a32:	4b1e      	ldr	r3, [pc, #120]	; (8013aac <xPortStartScheduler+0x12c>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	021b      	lsls	r3, r3, #8
 8013a38:	4a1c      	ldr	r2, [pc, #112]	; (8013aac <xPortStartScheduler+0x12c>)
 8013a3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013a3c:	4b1b      	ldr	r3, [pc, #108]	; (8013aac <xPortStartScheduler+0x12c>)
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013a44:	4a19      	ldr	r2, [pc, #100]	; (8013aac <xPortStartScheduler+0x12c>)
 8013a46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	b2da      	uxtb	r2, r3
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013a50:	4b17      	ldr	r3, [pc, #92]	; (8013ab0 <xPortStartScheduler+0x130>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	4a16      	ldr	r2, [pc, #88]	; (8013ab0 <xPortStartScheduler+0x130>)
 8013a56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013a5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013a5c:	4b14      	ldr	r3, [pc, #80]	; (8013ab0 <xPortStartScheduler+0x130>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	4a13      	ldr	r2, [pc, #76]	; (8013ab0 <xPortStartScheduler+0x130>)
 8013a62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013a66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013a68:	f000 f8d6 	bl	8013c18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013a6c:	4b11      	ldr	r3, [pc, #68]	; (8013ab4 <xPortStartScheduler+0x134>)
 8013a6e:	2200      	movs	r2, #0
 8013a70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013a72:	f000 f8f5 	bl	8013c60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013a76:	4b10      	ldr	r3, [pc, #64]	; (8013ab8 <xPortStartScheduler+0x138>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	4a0f      	ldr	r2, [pc, #60]	; (8013ab8 <xPortStartScheduler+0x138>)
 8013a7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013a80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013a82:	f7ff ff69 	bl	8013958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013a86:	f7fe fea9 	bl	80127dc <vTaskSwitchContext>
	prvTaskExitError();
 8013a8a:	f7ff ff23 	bl	80138d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013a8e:	2300      	movs	r3, #0
}
 8013a90:	4618      	mov	r0, r3
 8013a92:	3718      	adds	r7, #24
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	e000ed00 	.word	0xe000ed00
 8013a9c:	410fc271 	.word	0x410fc271
 8013aa0:	410fc270 	.word	0x410fc270
 8013aa4:	e000e400 	.word	0xe000e400
 8013aa8:	20000ee0 	.word	0x20000ee0
 8013aac:	20000ee4 	.word	0x20000ee4
 8013ab0:	e000ed20 	.word	0xe000ed20
 8013ab4:	200000cc 	.word	0x200000cc
 8013ab8:	e000ef34 	.word	0xe000ef34

08013abc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac6:	f383 8811 	msr	BASEPRI, r3
 8013aca:	f3bf 8f6f 	isb	sy
 8013ace:	f3bf 8f4f 	dsb	sy
 8013ad2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013ad4:	4b0e      	ldr	r3, [pc, #56]	; (8013b10 <vPortEnterCritical+0x54>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	4a0d      	ldr	r2, [pc, #52]	; (8013b10 <vPortEnterCritical+0x54>)
 8013adc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013ade:	4b0c      	ldr	r3, [pc, #48]	; (8013b10 <vPortEnterCritical+0x54>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d10e      	bne.n	8013b04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013ae6:	4b0b      	ldr	r3, [pc, #44]	; (8013b14 <vPortEnterCritical+0x58>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	b2db      	uxtb	r3, r3
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d009      	beq.n	8013b04 <vPortEnterCritical+0x48>
 8013af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af4:	f383 8811 	msr	BASEPRI, r3
 8013af8:	f3bf 8f6f 	isb	sy
 8013afc:	f3bf 8f4f 	dsb	sy
 8013b00:	603b      	str	r3, [r7, #0]
 8013b02:	e7fe      	b.n	8013b02 <vPortEnterCritical+0x46>
	}
}
 8013b04:	bf00      	nop
 8013b06:	370c      	adds	r7, #12
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0e:	4770      	bx	lr
 8013b10:	200000cc 	.word	0x200000cc
 8013b14:	e000ed04 	.word	0xe000ed04

08013b18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013b18:	b480      	push	{r7}
 8013b1a:	b083      	sub	sp, #12
 8013b1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013b1e:	4b11      	ldr	r3, [pc, #68]	; (8013b64 <vPortExitCritical+0x4c>)
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d109      	bne.n	8013b3a <vPortExitCritical+0x22>
 8013b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b2a:	f383 8811 	msr	BASEPRI, r3
 8013b2e:	f3bf 8f6f 	isb	sy
 8013b32:	f3bf 8f4f 	dsb	sy
 8013b36:	607b      	str	r3, [r7, #4]
 8013b38:	e7fe      	b.n	8013b38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8013b3a:	4b0a      	ldr	r3, [pc, #40]	; (8013b64 <vPortExitCritical+0x4c>)
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	3b01      	subs	r3, #1
 8013b40:	4a08      	ldr	r2, [pc, #32]	; (8013b64 <vPortExitCritical+0x4c>)
 8013b42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013b44:	4b07      	ldr	r3, [pc, #28]	; (8013b64 <vPortExitCritical+0x4c>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d104      	bne.n	8013b56 <vPortExitCritical+0x3e>
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8013b56:	bf00      	nop
 8013b58:	370c      	adds	r7, #12
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop
 8013b64:	200000cc 	.word	0x200000cc
	...

08013b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013b70:	f3ef 8009 	mrs	r0, PSP
 8013b74:	f3bf 8f6f 	isb	sy
 8013b78:	4b15      	ldr	r3, [pc, #84]	; (8013bd0 <pxCurrentTCBConst>)
 8013b7a:	681a      	ldr	r2, [r3, #0]
 8013b7c:	f01e 0f10 	tst.w	lr, #16
 8013b80:	bf08      	it	eq
 8013b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b8a:	6010      	str	r0, [r2, #0]
 8013b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013b90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013b94:	f380 8811 	msr	BASEPRI, r0
 8013b98:	f3bf 8f4f 	dsb	sy
 8013b9c:	f3bf 8f6f 	isb	sy
 8013ba0:	f7fe fe1c 	bl	80127dc <vTaskSwitchContext>
 8013ba4:	f04f 0000 	mov.w	r0, #0
 8013ba8:	f380 8811 	msr	BASEPRI, r0
 8013bac:	bc09      	pop	{r0, r3}
 8013bae:	6819      	ldr	r1, [r3, #0]
 8013bb0:	6808      	ldr	r0, [r1, #0]
 8013bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb6:	f01e 0f10 	tst.w	lr, #16
 8013bba:	bf08      	it	eq
 8013bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013bc0:	f380 8809 	msr	PSP, r0
 8013bc4:	f3bf 8f6f 	isb	sy
 8013bc8:	4770      	bx	lr
 8013bca:	bf00      	nop
 8013bcc:	f3af 8000 	nop.w

08013bd0 <pxCurrentTCBConst>:
 8013bd0:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013bd4:	bf00      	nop
 8013bd6:	bf00      	nop

08013bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8013bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be2:	f383 8811 	msr	BASEPRI, r3
 8013be6:	f3bf 8f6f 	isb	sy
 8013bea:	f3bf 8f4f 	dsb	sy
 8013bee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013bf0:	f7fe fd3c 	bl	801266c <xTaskIncrementTick>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d003      	beq.n	8013c02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013bfa:	4b06      	ldr	r3, [pc, #24]	; (8013c14 <SysTick_Handler+0x3c>)
 8013bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c00:	601a      	str	r2, [r3, #0]
 8013c02:	2300      	movs	r3, #0
 8013c04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013c0c:	bf00      	nop
 8013c0e:	3708      	adds	r7, #8
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	e000ed04 	.word	0xe000ed04

08013c18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013c18:	b480      	push	{r7}
 8013c1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013c1c:	4b0b      	ldr	r3, [pc, #44]	; (8013c4c <vPortSetupTimerInterrupt+0x34>)
 8013c1e:	2200      	movs	r2, #0
 8013c20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013c22:	4b0b      	ldr	r3, [pc, #44]	; (8013c50 <vPortSetupTimerInterrupt+0x38>)
 8013c24:	2200      	movs	r2, #0
 8013c26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013c28:	4b0a      	ldr	r3, [pc, #40]	; (8013c54 <vPortSetupTimerInterrupt+0x3c>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	4a0a      	ldr	r2, [pc, #40]	; (8013c58 <vPortSetupTimerInterrupt+0x40>)
 8013c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8013c32:	099b      	lsrs	r3, r3, #6
 8013c34:	4a09      	ldr	r2, [pc, #36]	; (8013c5c <vPortSetupTimerInterrupt+0x44>)
 8013c36:	3b01      	subs	r3, #1
 8013c38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013c3a:	4b04      	ldr	r3, [pc, #16]	; (8013c4c <vPortSetupTimerInterrupt+0x34>)
 8013c3c:	2207      	movs	r2, #7
 8013c3e:	601a      	str	r2, [r3, #0]
}
 8013c40:	bf00      	nop
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr
 8013c4a:	bf00      	nop
 8013c4c:	e000e010 	.word	0xe000e010
 8013c50:	e000e018 	.word	0xe000e018
 8013c54:	20000048 	.word	0x20000048
 8013c58:	10624dd3 	.word	0x10624dd3
 8013c5c:	e000e014 	.word	0xe000e014

08013c60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013c60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013c70 <vPortEnableVFP+0x10>
 8013c64:	6801      	ldr	r1, [r0, #0]
 8013c66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013c6a:	6001      	str	r1, [r0, #0]
 8013c6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013c6e:	bf00      	nop
 8013c70:	e000ed88 	.word	0xe000ed88

08013c74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013c74:	b480      	push	{r7}
 8013c76:	b085      	sub	sp, #20
 8013c78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013c7a:	f3ef 8305 	mrs	r3, IPSR
 8013c7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2b0f      	cmp	r3, #15
 8013c84:	d913      	bls.n	8013cae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013c86:	4a16      	ldr	r2, [pc, #88]	; (8013ce0 <vPortValidateInterruptPriority+0x6c>)
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	4413      	add	r3, r2
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013c90:	4b14      	ldr	r3, [pc, #80]	; (8013ce4 <vPortValidateInterruptPriority+0x70>)
 8013c92:	781b      	ldrb	r3, [r3, #0]
 8013c94:	7afa      	ldrb	r2, [r7, #11]
 8013c96:	429a      	cmp	r2, r3
 8013c98:	d209      	bcs.n	8013cae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8013c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c9e:	f383 8811 	msr	BASEPRI, r3
 8013ca2:	f3bf 8f6f 	isb	sy
 8013ca6:	f3bf 8f4f 	dsb	sy
 8013caa:	607b      	str	r3, [r7, #4]
 8013cac:	e7fe      	b.n	8013cac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013cae:	4b0e      	ldr	r3, [pc, #56]	; (8013ce8 <vPortValidateInterruptPriority+0x74>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013cb6:	4b0d      	ldr	r3, [pc, #52]	; (8013cec <vPortValidateInterruptPriority+0x78>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d909      	bls.n	8013cd2 <vPortValidateInterruptPriority+0x5e>
 8013cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cc2:	f383 8811 	msr	BASEPRI, r3
 8013cc6:	f3bf 8f6f 	isb	sy
 8013cca:	f3bf 8f4f 	dsb	sy
 8013cce:	603b      	str	r3, [r7, #0]
 8013cd0:	e7fe      	b.n	8013cd0 <vPortValidateInterruptPriority+0x5c>
	}
 8013cd2:	bf00      	nop
 8013cd4:	3714      	adds	r7, #20
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	e000e3f0 	.word	0xe000e3f0
 8013ce4:	20000ee0 	.word	0x20000ee0
 8013ce8:	e000ed0c 	.word	0xe000ed0c
 8013cec:	20000ee4 	.word	0x20000ee4

08013cf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b08a      	sub	sp, #40	; 0x28
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013cfc:	f7fe fbfc 	bl	80124f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013d00:	4b57      	ldr	r3, [pc, #348]	; (8013e60 <pvPortMalloc+0x170>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d101      	bne.n	8013d0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013d08:	f000 f90c 	bl	8013f24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013d0c:	4b55      	ldr	r3, [pc, #340]	; (8013e64 <pvPortMalloc+0x174>)
 8013d0e:	681a      	ldr	r2, [r3, #0]
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4013      	ands	r3, r2
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	f040 808c 	bne.w	8013e32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d01c      	beq.n	8013d5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8013d20:	2208      	movs	r2, #8
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	4413      	add	r3, r2
 8013d26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	f003 0307 	and.w	r3, r3, #7
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d013      	beq.n	8013d5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f023 0307 	bic.w	r3, r3, #7
 8013d38:	3308      	adds	r3, #8
 8013d3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f003 0307 	and.w	r3, r3, #7
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d009      	beq.n	8013d5a <pvPortMalloc+0x6a>
 8013d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d4a:	f383 8811 	msr	BASEPRI, r3
 8013d4e:	f3bf 8f6f 	isb	sy
 8013d52:	f3bf 8f4f 	dsb	sy
 8013d56:	617b      	str	r3, [r7, #20]
 8013d58:	e7fe      	b.n	8013d58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d068      	beq.n	8013e32 <pvPortMalloc+0x142>
 8013d60:	4b41      	ldr	r3, [pc, #260]	; (8013e68 <pvPortMalloc+0x178>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	687a      	ldr	r2, [r7, #4]
 8013d66:	429a      	cmp	r2, r3
 8013d68:	d863      	bhi.n	8013e32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013d6a:	4b40      	ldr	r3, [pc, #256]	; (8013e6c <pvPortMalloc+0x17c>)
 8013d6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013d6e:	4b3f      	ldr	r3, [pc, #252]	; (8013e6c <pvPortMalloc+0x17c>)
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d74:	e004      	b.n	8013d80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	687a      	ldr	r2, [r7, #4]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d903      	bls.n	8013d92 <pvPortMalloc+0xa2>
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d1f1      	bne.n	8013d76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013d92:	4b33      	ldr	r3, [pc, #204]	; (8013e60 <pvPortMalloc+0x170>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d04a      	beq.n	8013e32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013d9c:	6a3b      	ldr	r3, [r7, #32]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	2208      	movs	r2, #8
 8013da2:	4413      	add	r3, r2
 8013da4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da8:	681a      	ldr	r2, [r3, #0]
 8013daa:	6a3b      	ldr	r3, [r7, #32]
 8013dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db0:	685a      	ldr	r2, [r3, #4]
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	1ad2      	subs	r2, r2, r3
 8013db6:	2308      	movs	r3, #8
 8013db8:	005b      	lsls	r3, r3, #1
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d91e      	bls.n	8013dfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	4413      	add	r3, r2
 8013dc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013dc6:	69bb      	ldr	r3, [r7, #24]
 8013dc8:	f003 0307 	and.w	r3, r3, #7
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d009      	beq.n	8013de4 <pvPortMalloc+0xf4>
 8013dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dd4:	f383 8811 	msr	BASEPRI, r3
 8013dd8:	f3bf 8f6f 	isb	sy
 8013ddc:	f3bf 8f4f 	dsb	sy
 8013de0:	613b      	str	r3, [r7, #16]
 8013de2:	e7fe      	b.n	8013de2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de6:	685a      	ldr	r2, [r3, #4]
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	1ad2      	subs	r2, r2, r3
 8013dec:	69bb      	ldr	r3, [r7, #24]
 8013dee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df2:	687a      	ldr	r2, [r7, #4]
 8013df4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013df6:	69b8      	ldr	r0, [r7, #24]
 8013df8:	f000 f8f6 	bl	8013fe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013dfc:	4b1a      	ldr	r3, [pc, #104]	; (8013e68 <pvPortMalloc+0x178>)
 8013dfe:	681a      	ldr	r2, [r3, #0]
 8013e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e02:	685b      	ldr	r3, [r3, #4]
 8013e04:	1ad3      	subs	r3, r2, r3
 8013e06:	4a18      	ldr	r2, [pc, #96]	; (8013e68 <pvPortMalloc+0x178>)
 8013e08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013e0a:	4b17      	ldr	r3, [pc, #92]	; (8013e68 <pvPortMalloc+0x178>)
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	4b18      	ldr	r3, [pc, #96]	; (8013e70 <pvPortMalloc+0x180>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d203      	bcs.n	8013e1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013e16:	4b14      	ldr	r3, [pc, #80]	; (8013e68 <pvPortMalloc+0x178>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	4a15      	ldr	r2, [pc, #84]	; (8013e70 <pvPortMalloc+0x180>)
 8013e1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e20:	685a      	ldr	r2, [r3, #4]
 8013e22:	4b10      	ldr	r3, [pc, #64]	; (8013e64 <pvPortMalloc+0x174>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	431a      	orrs	r2, r3
 8013e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2e:	2200      	movs	r2, #0
 8013e30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013e32:	f7fe fb6f 	bl	8012514 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013e36:	69fb      	ldr	r3, [r7, #28]
 8013e38:	f003 0307 	and.w	r3, r3, #7
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d009      	beq.n	8013e54 <pvPortMalloc+0x164>
 8013e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e44:	f383 8811 	msr	BASEPRI, r3
 8013e48:	f3bf 8f6f 	isb	sy
 8013e4c:	f3bf 8f4f 	dsb	sy
 8013e50:	60fb      	str	r3, [r7, #12]
 8013e52:	e7fe      	b.n	8013e52 <pvPortMalloc+0x162>
	return pvReturn;
 8013e54:	69fb      	ldr	r3, [r7, #28]
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3728      	adds	r7, #40	; 0x28
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	20004af0 	.word	0x20004af0
 8013e64:	20004afc 	.word	0x20004afc
 8013e68:	20004af4 	.word	0x20004af4
 8013e6c:	20004ae8 	.word	0x20004ae8
 8013e70:	20004af8 	.word	0x20004af8

08013e74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b086      	sub	sp, #24
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d046      	beq.n	8013f14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013e86:	2308      	movs	r3, #8
 8013e88:	425b      	negs	r3, r3
 8013e8a:	697a      	ldr	r2, [r7, #20]
 8013e8c:	4413      	add	r3, r2
 8013e8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013e90:	697b      	ldr	r3, [r7, #20]
 8013e92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013e94:	693b      	ldr	r3, [r7, #16]
 8013e96:	685a      	ldr	r2, [r3, #4]
 8013e98:	4b20      	ldr	r3, [pc, #128]	; (8013f1c <vPortFree+0xa8>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	4013      	ands	r3, r2
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d109      	bne.n	8013eb6 <vPortFree+0x42>
 8013ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea6:	f383 8811 	msr	BASEPRI, r3
 8013eaa:	f3bf 8f6f 	isb	sy
 8013eae:	f3bf 8f4f 	dsb	sy
 8013eb2:	60fb      	str	r3, [r7, #12]
 8013eb4:	e7fe      	b.n	8013eb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d009      	beq.n	8013ed2 <vPortFree+0x5e>
 8013ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ec2:	f383 8811 	msr	BASEPRI, r3
 8013ec6:	f3bf 8f6f 	isb	sy
 8013eca:	f3bf 8f4f 	dsb	sy
 8013ece:	60bb      	str	r3, [r7, #8]
 8013ed0:	e7fe      	b.n	8013ed0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	685a      	ldr	r2, [r3, #4]
 8013ed6:	4b11      	ldr	r3, [pc, #68]	; (8013f1c <vPortFree+0xa8>)
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	4013      	ands	r3, r2
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d019      	beq.n	8013f14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d115      	bne.n	8013f14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	685a      	ldr	r2, [r3, #4]
 8013eec:	4b0b      	ldr	r3, [pc, #44]	; (8013f1c <vPortFree+0xa8>)
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	43db      	mvns	r3, r3
 8013ef2:	401a      	ands	r2, r3
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013ef8:	f7fe fafe 	bl	80124f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	685a      	ldr	r2, [r3, #4]
 8013f00:	4b07      	ldr	r3, [pc, #28]	; (8013f20 <vPortFree+0xac>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	4413      	add	r3, r2
 8013f06:	4a06      	ldr	r2, [pc, #24]	; (8013f20 <vPortFree+0xac>)
 8013f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013f0a:	6938      	ldr	r0, [r7, #16]
 8013f0c:	f000 f86c 	bl	8013fe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013f10:	f7fe fb00 	bl	8012514 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013f14:	bf00      	nop
 8013f16:	3718      	adds	r7, #24
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}
 8013f1c:	20004afc 	.word	0x20004afc
 8013f20:	20004af4 	.word	0x20004af4

08013f24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013f24:	b480      	push	{r7}
 8013f26:	b085      	sub	sp, #20
 8013f28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013f2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8013f2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013f30:	4b27      	ldr	r3, [pc, #156]	; (8013fd0 <prvHeapInit+0xac>)
 8013f32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	f003 0307 	and.w	r3, r3, #7
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d00c      	beq.n	8013f58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	3307      	adds	r3, #7
 8013f42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	f023 0307 	bic.w	r3, r3, #7
 8013f4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013f4c:	68ba      	ldr	r2, [r7, #8]
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	1ad3      	subs	r3, r2, r3
 8013f52:	4a1f      	ldr	r2, [pc, #124]	; (8013fd0 <prvHeapInit+0xac>)
 8013f54:	4413      	add	r3, r2
 8013f56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013f5c:	4a1d      	ldr	r2, [pc, #116]	; (8013fd4 <prvHeapInit+0xb0>)
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013f62:	4b1c      	ldr	r3, [pc, #112]	; (8013fd4 <prvHeapInit+0xb0>)
 8013f64:	2200      	movs	r2, #0
 8013f66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	68ba      	ldr	r2, [r7, #8]
 8013f6c:	4413      	add	r3, r2
 8013f6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013f70:	2208      	movs	r2, #8
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	1a9b      	subs	r3, r3, r2
 8013f76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	f023 0307 	bic.w	r3, r3, #7
 8013f7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	4a15      	ldr	r2, [pc, #84]	; (8013fd8 <prvHeapInit+0xb4>)
 8013f84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013f86:	4b14      	ldr	r3, [pc, #80]	; (8013fd8 <prvHeapInit+0xb4>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013f8e:	4b12      	ldr	r3, [pc, #72]	; (8013fd8 <prvHeapInit+0xb4>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	2200      	movs	r2, #0
 8013f94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	68fa      	ldr	r2, [r7, #12]
 8013f9e:	1ad2      	subs	r2, r2, r3
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013fa4:	4b0c      	ldr	r3, [pc, #48]	; (8013fd8 <prvHeapInit+0xb4>)
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013fac:	683b      	ldr	r3, [r7, #0]
 8013fae:	685b      	ldr	r3, [r3, #4]
 8013fb0:	4a0a      	ldr	r2, [pc, #40]	; (8013fdc <prvHeapInit+0xb8>)
 8013fb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013fb4:	683b      	ldr	r3, [r7, #0]
 8013fb6:	685b      	ldr	r3, [r3, #4]
 8013fb8:	4a09      	ldr	r2, [pc, #36]	; (8013fe0 <prvHeapInit+0xbc>)
 8013fba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013fbc:	4b09      	ldr	r3, [pc, #36]	; (8013fe4 <prvHeapInit+0xc0>)
 8013fbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013fc2:	601a      	str	r2, [r3, #0]
}
 8013fc4:	bf00      	nop
 8013fc6:	3714      	adds	r7, #20
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fce:	4770      	bx	lr
 8013fd0:	20000ee8 	.word	0x20000ee8
 8013fd4:	20004ae8 	.word	0x20004ae8
 8013fd8:	20004af0 	.word	0x20004af0
 8013fdc:	20004af8 	.word	0x20004af8
 8013fe0:	20004af4 	.word	0x20004af4
 8013fe4:	20004afc 	.word	0x20004afc

08013fe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b085      	sub	sp, #20
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013ff0:	4b28      	ldr	r3, [pc, #160]	; (8014094 <prvInsertBlockIntoFreeList+0xac>)
 8013ff2:	60fb      	str	r3, [r7, #12]
 8013ff4:	e002      	b.n	8013ffc <prvInsertBlockIntoFreeList+0x14>
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	60fb      	str	r3, [r7, #12]
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	687a      	ldr	r2, [r7, #4]
 8014002:	429a      	cmp	r2, r3
 8014004:	d8f7      	bhi.n	8013ff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	68ba      	ldr	r2, [r7, #8]
 8014010:	4413      	add	r3, r2
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	429a      	cmp	r2, r3
 8014016:	d108      	bne.n	801402a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	685a      	ldr	r2, [r3, #4]
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	441a      	add	r2, r3
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	68ba      	ldr	r2, [r7, #8]
 8014034:	441a      	add	r2, r3
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	429a      	cmp	r2, r3
 801403c:	d118      	bne.n	8014070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	681a      	ldr	r2, [r3, #0]
 8014042:	4b15      	ldr	r3, [pc, #84]	; (8014098 <prvInsertBlockIntoFreeList+0xb0>)
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	429a      	cmp	r2, r3
 8014048:	d00d      	beq.n	8014066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	685a      	ldr	r2, [r3, #4]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	685b      	ldr	r3, [r3, #4]
 8014054:	441a      	add	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	681a      	ldr	r2, [r3, #0]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	601a      	str	r2, [r3, #0]
 8014064:	e008      	b.n	8014078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014066:	4b0c      	ldr	r3, [pc, #48]	; (8014098 <prvInsertBlockIntoFreeList+0xb0>)
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	601a      	str	r2, [r3, #0]
 801406e:	e003      	b.n	8014078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014078:	68fa      	ldr	r2, [r7, #12]
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	429a      	cmp	r2, r3
 801407e:	d002      	beq.n	8014086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	687a      	ldr	r2, [r7, #4]
 8014084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014086:	bf00      	nop
 8014088:	3714      	adds	r7, #20
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr
 8014092:	bf00      	nop
 8014094:	20004ae8 	.word	0x20004ae8
 8014098:	20004af0 	.word	0x20004af0

0801409c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80140a0:	2201      	movs	r2, #1
 80140a2:	490e      	ldr	r1, [pc, #56]	; (80140dc <MX_USB_HOST_Init+0x40>)
 80140a4:	480e      	ldr	r0, [pc, #56]	; (80140e0 <MX_USB_HOST_Init+0x44>)
 80140a6:	f7fa fc3d 	bl	800e924 <USBH_Init>
 80140aa:	4603      	mov	r3, r0
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d001      	beq.n	80140b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80140b0:	f7ee fcba 	bl	8002a28 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80140b4:	490b      	ldr	r1, [pc, #44]	; (80140e4 <MX_USB_HOST_Init+0x48>)
 80140b6:	480a      	ldr	r0, [pc, #40]	; (80140e0 <MX_USB_HOST_Init+0x44>)
 80140b8:	f7fa fce4 	bl	800ea84 <USBH_RegisterClass>
 80140bc:	4603      	mov	r3, r0
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d001      	beq.n	80140c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80140c2:	f7ee fcb1 	bl	8002a28 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80140c6:	4806      	ldr	r0, [pc, #24]	; (80140e0 <MX_USB_HOST_Init+0x44>)
 80140c8:	f7fa fd68 	bl	800eb9c <USBH_Start>
 80140cc:	4603      	mov	r3, r0
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d001      	beq.n	80140d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80140d2:	f7ee fca9 	bl	8002a28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80140d6:	bf00      	nop
 80140d8:	bd80      	pop	{r7, pc}
 80140da:	bf00      	nop
 80140dc:	080140e9 	.word	0x080140e9
 80140e0:	20005160 	.word	0x20005160
 80140e4:	200000ac 	.word	0x200000ac

080140e8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b083      	sub	sp, #12
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
 80140f0:	460b      	mov	r3, r1
 80140f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80140f4:	78fb      	ldrb	r3, [r7, #3]
 80140f6:	3b01      	subs	r3, #1
 80140f8:	2b04      	cmp	r3, #4
 80140fa:	d819      	bhi.n	8014130 <USBH_UserProcess+0x48>
 80140fc:	a201      	add	r2, pc, #4	; (adr r2, 8014104 <USBH_UserProcess+0x1c>)
 80140fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014102:	bf00      	nop
 8014104:	08014131 	.word	0x08014131
 8014108:	08014121 	.word	0x08014121
 801410c:	08014131 	.word	0x08014131
 8014110:	08014129 	.word	0x08014129
 8014114:	08014119 	.word	0x08014119
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8014118:	4b09      	ldr	r3, [pc, #36]	; (8014140 <USBH_UserProcess+0x58>)
 801411a:	2203      	movs	r2, #3
 801411c:	701a      	strb	r2, [r3, #0]
  break;
 801411e:	e008      	b.n	8014132 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8014120:	4b07      	ldr	r3, [pc, #28]	; (8014140 <USBH_UserProcess+0x58>)
 8014122:	2202      	movs	r2, #2
 8014124:	701a      	strb	r2, [r3, #0]
  break;
 8014126:	e004      	b.n	8014132 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8014128:	4b05      	ldr	r3, [pc, #20]	; (8014140 <USBH_UserProcess+0x58>)
 801412a:	2201      	movs	r2, #1
 801412c:	701a      	strb	r2, [r3, #0]
  break;
 801412e:	e000      	b.n	8014132 <USBH_UserProcess+0x4a>

  default:
  break;
 8014130:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8014132:	bf00      	nop
 8014134:	370c      	adds	r7, #12
 8014136:	46bd      	mov	sp, r7
 8014138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413c:	4770      	bx	lr
 801413e:	bf00      	nop
 8014140:	20004b00 	.word	0x20004b00

08014144 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b08a      	sub	sp, #40	; 0x28
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801414c:	f107 0314 	add.w	r3, r7, #20
 8014150:	2200      	movs	r2, #0
 8014152:	601a      	str	r2, [r3, #0]
 8014154:	605a      	str	r2, [r3, #4]
 8014156:	609a      	str	r2, [r3, #8]
 8014158:	60da      	str	r2, [r3, #12]
 801415a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014164:	d147      	bne.n	80141f6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014166:	2300      	movs	r3, #0
 8014168:	613b      	str	r3, [r7, #16]
 801416a:	4b25      	ldr	r3, [pc, #148]	; (8014200 <HAL_HCD_MspInit+0xbc>)
 801416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801416e:	4a24      	ldr	r2, [pc, #144]	; (8014200 <HAL_HCD_MspInit+0xbc>)
 8014170:	f043 0301 	orr.w	r3, r3, #1
 8014174:	6313      	str	r3, [r2, #48]	; 0x30
 8014176:	4b22      	ldr	r3, [pc, #136]	; (8014200 <HAL_HCD_MspInit+0xbc>)
 8014178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801417a:	f003 0301 	and.w	r3, r3, #1
 801417e:	613b      	str	r3, [r7, #16]
 8014180:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8014182:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014188:	2300      	movs	r3, #0
 801418a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801418c:	2300      	movs	r3, #0
 801418e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8014190:	f107 0314 	add.w	r3, r7, #20
 8014194:	4619      	mov	r1, r3
 8014196:	481b      	ldr	r0, [pc, #108]	; (8014204 <HAL_HCD_MspInit+0xc0>)
 8014198:	f7f2 f9ae 	bl	80064f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 801419c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80141a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141a2:	2302      	movs	r3, #2
 80141a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141a6:	2300      	movs	r3, #0
 80141a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141aa:	2303      	movs	r3, #3
 80141ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80141ae:	230a      	movs	r3, #10
 80141b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80141b2:	f107 0314 	add.w	r3, r7, #20
 80141b6:	4619      	mov	r1, r3
 80141b8:	4812      	ldr	r0, [pc, #72]	; (8014204 <HAL_HCD_MspInit+0xc0>)
 80141ba:	f7f2 f99d 	bl	80064f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80141be:	4b10      	ldr	r3, [pc, #64]	; (8014200 <HAL_HCD_MspInit+0xbc>)
 80141c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141c2:	4a0f      	ldr	r2, [pc, #60]	; (8014200 <HAL_HCD_MspInit+0xbc>)
 80141c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141c8:	6353      	str	r3, [r2, #52]	; 0x34
 80141ca:	2300      	movs	r3, #0
 80141cc:	60fb      	str	r3, [r7, #12]
 80141ce:	4b0c      	ldr	r3, [pc, #48]	; (8014200 <HAL_HCD_MspInit+0xbc>)
 80141d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141d2:	4a0b      	ldr	r2, [pc, #44]	; (8014200 <HAL_HCD_MspInit+0xbc>)
 80141d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80141d8:	6453      	str	r3, [r2, #68]	; 0x44
 80141da:	4b09      	ldr	r3, [pc, #36]	; (8014200 <HAL_HCD_MspInit+0xbc>)
 80141dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80141e2:	60fb      	str	r3, [r7, #12]
 80141e4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80141e6:	2200      	movs	r2, #0
 80141e8:	2100      	movs	r1, #0
 80141ea:	2043      	movs	r0, #67	; 0x43
 80141ec:	f7f1 face 	bl	800578c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80141f0:	2043      	movs	r0, #67	; 0x43
 80141f2:	f7f1 fae7 	bl	80057c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80141f6:	bf00      	nop
 80141f8:	3728      	adds	r7, #40	; 0x28
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}
 80141fe:	bf00      	nop
 8014200:	40023800 	.word	0x40023800
 8014204:	40020000 	.word	0x40020000

08014208 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014216:	4618      	mov	r0, r3
 8014218:	f7fb f96d 	bl	800f4f6 <USBH_LL_IncTimer>
}
 801421c:	bf00      	nop
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014232:	4618      	mov	r0, r3
 8014234:	f7fb f9b1 	bl	800f59a <USBH_LL_Connect>
}
 8014238:	bf00      	nop
 801423a:	3708      	adds	r7, #8
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}

08014240 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b082      	sub	sp, #8
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801424e:	4618      	mov	r0, r3
 8014250:	f7fb f9c6 	bl	800f5e0 <USBH_LL_Disconnect>
}
 8014254:	bf00      	nop
 8014256:	3708      	adds	r7, #8
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b082      	sub	sp, #8
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
 8014264:	460b      	mov	r3, r1
 8014266:	70fb      	strb	r3, [r7, #3]
 8014268:	4613      	mov	r3, r2
 801426a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014272:	4618      	mov	r0, r3
 8014274:	f7fb f9fd 	bl	800f672 <USBH_LL_NotifyURBChange>
#endif
}
 8014278:	bf00      	nop
 801427a:	3708      	adds	r7, #8
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801428e:	4618      	mov	r0, r3
 8014290:	f7fb f95b 	bl	800f54a <USBH_LL_PortEnabled>
}
 8014294:	bf00      	nop
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7fb f967 	bl	800f57e <USBH_LL_PortDisabled>
}
 80142b0:	bf00      	nop
 80142b2:	3708      	adds	r7, #8
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
 80142be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80142c6:	2b01      	cmp	r3, #1
 80142c8:	d12a      	bne.n	8014320 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80142ca:	4a18      	ldr	r2, [pc, #96]	; (801432c <USBH_LL_Init+0x74>)
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	4a15      	ldr	r2, [pc, #84]	; (801432c <USBH_LL_Init+0x74>)
 80142d6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80142da:	4b14      	ldr	r3, [pc, #80]	; (801432c <USBH_LL_Init+0x74>)
 80142dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80142e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 80142e2:	4b12      	ldr	r3, [pc, #72]	; (801432c <USBH_LL_Init+0x74>)
 80142e4:	220c      	movs	r2, #12
 80142e6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80142e8:	4b10      	ldr	r3, [pc, #64]	; (801432c <USBH_LL_Init+0x74>)
 80142ea:	2201      	movs	r2, #1
 80142ec:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80142ee:	4b0f      	ldr	r3, [pc, #60]	; (801432c <USBH_LL_Init+0x74>)
 80142f0:	2200      	movs	r2, #0
 80142f2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80142f4:	4b0d      	ldr	r3, [pc, #52]	; (801432c <USBH_LL_Init+0x74>)
 80142f6:	2202      	movs	r2, #2
 80142f8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80142fa:	4b0c      	ldr	r3, [pc, #48]	; (801432c <USBH_LL_Init+0x74>)
 80142fc:	2200      	movs	r2, #0
 80142fe:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8014300:	480a      	ldr	r0, [pc, #40]	; (801432c <USBH_LL_Init+0x74>)
 8014302:	f7f2 fabf 	bl	8006884 <HAL_HCD_Init>
 8014306:	4603      	mov	r3, r0
 8014308:	2b00      	cmp	r3, #0
 801430a:	d001      	beq.n	8014310 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801430c:	f7ee fb8c 	bl	8002a28 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8014310:	4806      	ldr	r0, [pc, #24]	; (801432c <USBH_LL_Init+0x74>)
 8014312:	f7f2 fec3 	bl	800709c <HAL_HCD_GetCurrentFrame>
 8014316:	4603      	mov	r3, r0
 8014318:	4619      	mov	r1, r3
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f7fb f8dc 	bl	800f4d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8014320:	2300      	movs	r3, #0
}
 8014322:	4618      	mov	r0, r3
 8014324:	3708      	adds	r7, #8
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	20005544 	.word	0x20005544

08014330 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b084      	sub	sp, #16
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014338:	2300      	movs	r3, #0
 801433a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801433c:	2300      	movs	r3, #0
 801433e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014346:	4618      	mov	r0, r3
 8014348:	f7f2 fe30 	bl	8006fac <HAL_HCD_Start>
 801434c:	4603      	mov	r3, r0
 801434e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014350:	7bfb      	ldrb	r3, [r7, #15]
 8014352:	4618      	mov	r0, r3
 8014354:	f000 f95c 	bl	8014610 <USBH_Get_USB_Status>
 8014358:	4603      	mov	r3, r0
 801435a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801435c:	7bbb      	ldrb	r3, [r7, #14]
}
 801435e:	4618      	mov	r0, r3
 8014360:	3710      	adds	r7, #16
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}

08014366 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8014366:	b580      	push	{r7, lr}
 8014368:	b084      	sub	sp, #16
 801436a:	af00      	add	r7, sp, #0
 801436c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801436e:	2300      	movs	r3, #0
 8014370:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014372:	2300      	movs	r3, #0
 8014374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801437c:	4618      	mov	r0, r3
 801437e:	f7f2 fe38 	bl	8006ff2 <HAL_HCD_Stop>
 8014382:	4603      	mov	r3, r0
 8014384:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014386:	7bfb      	ldrb	r3, [r7, #15]
 8014388:	4618      	mov	r0, r3
 801438a:	f000 f941 	bl	8014610 <USBH_Get_USB_Status>
 801438e:	4603      	mov	r3, r0
 8014390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014392:	7bbb      	ldrb	r3, [r7, #14]
}
 8014394:	4618      	mov	r0, r3
 8014396:	3710      	adds	r7, #16
 8014398:	46bd      	mov	sp, r7
 801439a:	bd80      	pop	{r7, pc}

0801439c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801439c:	b580      	push	{r7, lr}
 801439e:	b084      	sub	sp, #16
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80143a4:	2301      	movs	r3, #1
 80143a6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80143ae:	4618      	mov	r0, r3
 80143b0:	f7f2 fe82 	bl	80070b8 <HAL_HCD_GetCurrentSpeed>
 80143b4:	4603      	mov	r3, r0
 80143b6:	2b01      	cmp	r3, #1
 80143b8:	d007      	beq.n	80143ca <USBH_LL_GetSpeed+0x2e>
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d302      	bcc.n	80143c4 <USBH_LL_GetSpeed+0x28>
 80143be:	2b02      	cmp	r3, #2
 80143c0:	d006      	beq.n	80143d0 <USBH_LL_GetSpeed+0x34>
 80143c2:	e008      	b.n	80143d6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80143c4:	2300      	movs	r3, #0
 80143c6:	73fb      	strb	r3, [r7, #15]
    break;
 80143c8:	e008      	b.n	80143dc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80143ca:	2301      	movs	r3, #1
 80143cc:	73fb      	strb	r3, [r7, #15]
    break;
 80143ce:	e005      	b.n	80143dc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80143d0:	2302      	movs	r3, #2
 80143d2:	73fb      	strb	r3, [r7, #15]
    break;
 80143d4:	e002      	b.n	80143dc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80143d6:	2301      	movs	r3, #1
 80143d8:	73fb      	strb	r3, [r7, #15]
    break;
 80143da:	bf00      	nop
  }
  return  speed;
 80143dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3710      	adds	r7, #16
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}

080143e6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80143e6:	b580      	push	{r7, lr}
 80143e8:	b084      	sub	sp, #16
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143ee:	2300      	movs	r3, #0
 80143f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80143f2:	2300      	movs	r3, #0
 80143f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7f2 fe15 	bl	800702c <HAL_HCD_ResetPort>
 8014402:	4603      	mov	r3, r0
 8014404:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014406:	7bfb      	ldrb	r3, [r7, #15]
 8014408:	4618      	mov	r0, r3
 801440a:	f000 f901 	bl	8014610 <USBH_Get_USB_Status>
 801440e:	4603      	mov	r3, r0
 8014410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014412:	7bbb      	ldrb	r3, [r7, #14]
}
 8014414:	4618      	mov	r0, r3
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}

0801441c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	b082      	sub	sp, #8
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
 8014424:	460b      	mov	r3, r1
 8014426:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801442e:	78fa      	ldrb	r2, [r7, #3]
 8014430:	4611      	mov	r1, r2
 8014432:	4618      	mov	r0, r3
 8014434:	f7f2 fe1d 	bl	8007072 <HAL_HCD_HC_GetXferCount>
 8014438:	4603      	mov	r3, r0
}
 801443a:	4618      	mov	r0, r3
 801443c:	3708      	adds	r7, #8
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}

08014442 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014442:	b590      	push	{r4, r7, lr}
 8014444:	b089      	sub	sp, #36	; 0x24
 8014446:	af04      	add	r7, sp, #16
 8014448:	6078      	str	r0, [r7, #4]
 801444a:	4608      	mov	r0, r1
 801444c:	4611      	mov	r1, r2
 801444e:	461a      	mov	r2, r3
 8014450:	4603      	mov	r3, r0
 8014452:	70fb      	strb	r3, [r7, #3]
 8014454:	460b      	mov	r3, r1
 8014456:	70bb      	strb	r3, [r7, #2]
 8014458:	4613      	mov	r3, r2
 801445a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801445c:	2300      	movs	r3, #0
 801445e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014460:	2300      	movs	r3, #0
 8014462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801446a:	787c      	ldrb	r4, [r7, #1]
 801446c:	78ba      	ldrb	r2, [r7, #2]
 801446e:	78f9      	ldrb	r1, [r7, #3]
 8014470:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014472:	9302      	str	r3, [sp, #8]
 8014474:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014478:	9301      	str	r3, [sp, #4]
 801447a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801447e:	9300      	str	r3, [sp, #0]
 8014480:	4623      	mov	r3, r4
 8014482:	f7f2 fa61 	bl	8006948 <HAL_HCD_HC_Init>
 8014486:	4603      	mov	r3, r0
 8014488:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801448a:	7bfb      	ldrb	r3, [r7, #15]
 801448c:	4618      	mov	r0, r3
 801448e:	f000 f8bf 	bl	8014610 <USBH_Get_USB_Status>
 8014492:	4603      	mov	r3, r0
 8014494:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014496:	7bbb      	ldrb	r3, [r7, #14]
}
 8014498:	4618      	mov	r0, r3
 801449a:	3714      	adds	r7, #20
 801449c:	46bd      	mov	sp, r7
 801449e:	bd90      	pop	{r4, r7, pc}

080144a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b084      	sub	sp, #16
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	460b      	mov	r3, r1
 80144aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144ac:	2300      	movs	r3, #0
 80144ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80144b0:	2300      	movs	r3, #0
 80144b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80144ba:	78fa      	ldrb	r2, [r7, #3]
 80144bc:	4611      	mov	r1, r2
 80144be:	4618      	mov	r0, r3
 80144c0:	f7f2 fada 	bl	8006a78 <HAL_HCD_HC_Halt>
 80144c4:	4603      	mov	r3, r0
 80144c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80144c8:	7bfb      	ldrb	r3, [r7, #15]
 80144ca:	4618      	mov	r0, r3
 80144cc:	f000 f8a0 	bl	8014610 <USBH_Get_USB_Status>
 80144d0:	4603      	mov	r3, r0
 80144d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80144d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80144d6:	4618      	mov	r0, r3
 80144d8:	3710      	adds	r7, #16
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}

080144de <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80144de:	b590      	push	{r4, r7, lr}
 80144e0:	b089      	sub	sp, #36	; 0x24
 80144e2:	af04      	add	r7, sp, #16
 80144e4:	6078      	str	r0, [r7, #4]
 80144e6:	4608      	mov	r0, r1
 80144e8:	4611      	mov	r1, r2
 80144ea:	461a      	mov	r2, r3
 80144ec:	4603      	mov	r3, r0
 80144ee:	70fb      	strb	r3, [r7, #3]
 80144f0:	460b      	mov	r3, r1
 80144f2:	70bb      	strb	r3, [r7, #2]
 80144f4:	4613      	mov	r3, r2
 80144f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80144f8:	2300      	movs	r3, #0
 80144fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80144fc:	2300      	movs	r3, #0
 80144fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014506:	787c      	ldrb	r4, [r7, #1]
 8014508:	78ba      	ldrb	r2, [r7, #2]
 801450a:	78f9      	ldrb	r1, [r7, #3]
 801450c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014510:	9303      	str	r3, [sp, #12]
 8014512:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014514:	9302      	str	r3, [sp, #8]
 8014516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014518:	9301      	str	r3, [sp, #4]
 801451a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801451e:	9300      	str	r3, [sp, #0]
 8014520:	4623      	mov	r3, r4
 8014522:	f7f2 facd 	bl	8006ac0 <HAL_HCD_HC_SubmitRequest>
 8014526:	4603      	mov	r3, r0
 8014528:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801452a:	7bfb      	ldrb	r3, [r7, #15]
 801452c:	4618      	mov	r0, r3
 801452e:	f000 f86f 	bl	8014610 <USBH_Get_USB_Status>
 8014532:	4603      	mov	r3, r0
 8014534:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014536:	7bbb      	ldrb	r3, [r7, #14]
}
 8014538:	4618      	mov	r0, r3
 801453a:	3714      	adds	r7, #20
 801453c:	46bd      	mov	sp, r7
 801453e:	bd90      	pop	{r4, r7, pc}

08014540 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	460b      	mov	r3, r1
 801454a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014552:	78fa      	ldrb	r2, [r7, #3]
 8014554:	4611      	mov	r1, r2
 8014556:	4618      	mov	r0, r3
 8014558:	f7f2 fd76 	bl	8007048 <HAL_HCD_HC_GetURBState>
 801455c:	4603      	mov	r3, r0
}
 801455e:	4618      	mov	r0, r3
 8014560:	3708      	adds	r7, #8
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}

08014566 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014566:	b580      	push	{r7, lr}
 8014568:	b082      	sub	sp, #8
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
 801456e:	460b      	mov	r3, r1
 8014570:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014578:	2b01      	cmp	r3, #1
 801457a:	d103      	bne.n	8014584 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801457c:	78fb      	ldrb	r3, [r7, #3]
 801457e:	4618      	mov	r0, r3
 8014580:	f000 f872 	bl	8014668 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014584:	20c8      	movs	r0, #200	; 0xc8
 8014586:	f7f0 fc7d 	bl	8004e84 <HAL_Delay>
  return USBH_OK;
 801458a:	2300      	movs	r3, #0
}
 801458c:	4618      	mov	r0, r3
 801458e:	3708      	adds	r7, #8
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}

08014594 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014594:	b480      	push	{r7}
 8014596:	b085      	sub	sp, #20
 8014598:	af00      	add	r7, sp, #0
 801459a:	6078      	str	r0, [r7, #4]
 801459c:	460b      	mov	r3, r1
 801459e:	70fb      	strb	r3, [r7, #3]
 80145a0:	4613      	mov	r3, r2
 80145a2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80145aa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80145ac:	78fa      	ldrb	r2, [r7, #3]
 80145ae:	68f9      	ldr	r1, [r7, #12]
 80145b0:	4613      	mov	r3, r2
 80145b2:	009b      	lsls	r3, r3, #2
 80145b4:	4413      	add	r3, r2
 80145b6:	00db      	lsls	r3, r3, #3
 80145b8:	440b      	add	r3, r1
 80145ba:	333b      	adds	r3, #59	; 0x3b
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d00a      	beq.n	80145d8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80145c2:	78fa      	ldrb	r2, [r7, #3]
 80145c4:	68f9      	ldr	r1, [r7, #12]
 80145c6:	4613      	mov	r3, r2
 80145c8:	009b      	lsls	r3, r3, #2
 80145ca:	4413      	add	r3, r2
 80145cc:	00db      	lsls	r3, r3, #3
 80145ce:	440b      	add	r3, r1
 80145d0:	3350      	adds	r3, #80	; 0x50
 80145d2:	78ba      	ldrb	r2, [r7, #2]
 80145d4:	701a      	strb	r2, [r3, #0]
 80145d6:	e009      	b.n	80145ec <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80145d8:	78fa      	ldrb	r2, [r7, #3]
 80145da:	68f9      	ldr	r1, [r7, #12]
 80145dc:	4613      	mov	r3, r2
 80145de:	009b      	lsls	r3, r3, #2
 80145e0:	4413      	add	r3, r2
 80145e2:	00db      	lsls	r3, r3, #3
 80145e4:	440b      	add	r3, r1
 80145e6:	3351      	adds	r3, #81	; 0x51
 80145e8:	78ba      	ldrb	r2, [r7, #2]
 80145ea:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80145ec:	2300      	movs	r3, #0
}
 80145ee:	4618      	mov	r0, r3
 80145f0:	3714      	adds	r7, #20
 80145f2:	46bd      	mov	sp, r7
 80145f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145f8:	4770      	bx	lr

080145fa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80145fa:	b580      	push	{r7, lr}
 80145fc:	b082      	sub	sp, #8
 80145fe:	af00      	add	r7, sp, #0
 8014600:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f7f0 fc3e 	bl	8004e84 <HAL_Delay>
}
 8014608:	bf00      	nop
 801460a:	3708      	adds	r7, #8
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}

08014610 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014610:	b480      	push	{r7}
 8014612:	b085      	sub	sp, #20
 8014614:	af00      	add	r7, sp, #0
 8014616:	4603      	mov	r3, r0
 8014618:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801461a:	2300      	movs	r3, #0
 801461c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801461e:	79fb      	ldrb	r3, [r7, #7]
 8014620:	2b03      	cmp	r3, #3
 8014622:	d817      	bhi.n	8014654 <USBH_Get_USB_Status+0x44>
 8014624:	a201      	add	r2, pc, #4	; (adr r2, 801462c <USBH_Get_USB_Status+0x1c>)
 8014626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801462a:	bf00      	nop
 801462c:	0801463d 	.word	0x0801463d
 8014630:	08014643 	.word	0x08014643
 8014634:	08014649 	.word	0x08014649
 8014638:	0801464f 	.word	0x0801464f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801463c:	2300      	movs	r3, #0
 801463e:	73fb      	strb	r3, [r7, #15]
    break;
 8014640:	e00b      	b.n	801465a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014642:	2302      	movs	r3, #2
 8014644:	73fb      	strb	r3, [r7, #15]
    break;
 8014646:	e008      	b.n	801465a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014648:	2301      	movs	r3, #1
 801464a:	73fb      	strb	r3, [r7, #15]
    break;
 801464c:	e005      	b.n	801465a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801464e:	2302      	movs	r3, #2
 8014650:	73fb      	strb	r3, [r7, #15]
    break;
 8014652:	e002      	b.n	801465a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8014654:	2302      	movs	r3, #2
 8014656:	73fb      	strb	r3, [r7, #15]
    break;
 8014658:	bf00      	nop
  }
  return usb_status;
 801465a:	7bfb      	ldrb	r3, [r7, #15]
}
 801465c:	4618      	mov	r0, r3
 801465e:	3714      	adds	r7, #20
 8014660:	46bd      	mov	sp, r7
 8014662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014666:	4770      	bx	lr

08014668 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	4603      	mov	r3, r0
 8014670:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014672:	79fb      	ldrb	r3, [r7, #7]
 8014674:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8014676:	79fb      	ldrb	r3, [r7, #7]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d102      	bne.n	8014682 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801467c:	2301      	movs	r3, #1
 801467e:	73fb      	strb	r3, [r7, #15]
 8014680:	e001      	b.n	8014686 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8014682:	2300      	movs	r3, #0
 8014684:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8014686:	7bfb      	ldrb	r3, [r7, #15]
 8014688:	461a      	mov	r2, r3
 801468a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801468e:	4803      	ldr	r0, [pc, #12]	; (801469c <MX_DriverVbusFS+0x34>)
 8014690:	f7f2 f8c4 	bl	800681c <HAL_GPIO_WritePin>
}
 8014694:	bf00      	nop
 8014696:	3710      	adds	r7, #16
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}
 801469c:	40021800 	.word	0x40021800

080146a0 <__errno>:
 80146a0:	4b01      	ldr	r3, [pc, #4]	; (80146a8 <__errno+0x8>)
 80146a2:	6818      	ldr	r0, [r3, #0]
 80146a4:	4770      	bx	lr
 80146a6:	bf00      	nop
 80146a8:	200000d0 	.word	0x200000d0

080146ac <__libc_init_array>:
 80146ac:	b570      	push	{r4, r5, r6, lr}
 80146ae:	4e0d      	ldr	r6, [pc, #52]	; (80146e4 <__libc_init_array+0x38>)
 80146b0:	4c0d      	ldr	r4, [pc, #52]	; (80146e8 <__libc_init_array+0x3c>)
 80146b2:	1ba4      	subs	r4, r4, r6
 80146b4:	10a4      	asrs	r4, r4, #2
 80146b6:	2500      	movs	r5, #0
 80146b8:	42a5      	cmp	r5, r4
 80146ba:	d109      	bne.n	80146d0 <__libc_init_array+0x24>
 80146bc:	4e0b      	ldr	r6, [pc, #44]	; (80146ec <__libc_init_array+0x40>)
 80146be:	4c0c      	ldr	r4, [pc, #48]	; (80146f0 <__libc_init_array+0x44>)
 80146c0:	f000 fe2e 	bl	8015320 <_init>
 80146c4:	1ba4      	subs	r4, r4, r6
 80146c6:	10a4      	asrs	r4, r4, #2
 80146c8:	2500      	movs	r5, #0
 80146ca:	42a5      	cmp	r5, r4
 80146cc:	d105      	bne.n	80146da <__libc_init_array+0x2e>
 80146ce:	bd70      	pop	{r4, r5, r6, pc}
 80146d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80146d4:	4798      	blx	r3
 80146d6:	3501      	adds	r5, #1
 80146d8:	e7ee      	b.n	80146b8 <__libc_init_array+0xc>
 80146da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80146de:	4798      	blx	r3
 80146e0:	3501      	adds	r5, #1
 80146e2:	e7f2      	b.n	80146ca <__libc_init_array+0x1e>
 80146e4:	08018118 	.word	0x08018118
 80146e8:	08018118 	.word	0x08018118
 80146ec:	08018118 	.word	0x08018118
 80146f0:	0801811c 	.word	0x0801811c

080146f4 <malloc>:
 80146f4:	4b02      	ldr	r3, [pc, #8]	; (8014700 <malloc+0xc>)
 80146f6:	4601      	mov	r1, r0
 80146f8:	6818      	ldr	r0, [r3, #0]
 80146fa:	f000 b86d 	b.w	80147d8 <_malloc_r>
 80146fe:	bf00      	nop
 8014700:	200000d0 	.word	0x200000d0

08014704 <free>:
 8014704:	4b02      	ldr	r3, [pc, #8]	; (8014710 <free+0xc>)
 8014706:	4601      	mov	r1, r0
 8014708:	6818      	ldr	r0, [r3, #0]
 801470a:	f000 b817 	b.w	801473c <_free_r>
 801470e:	bf00      	nop
 8014710:	200000d0 	.word	0x200000d0

08014714 <memcpy>:
 8014714:	b510      	push	{r4, lr}
 8014716:	1e43      	subs	r3, r0, #1
 8014718:	440a      	add	r2, r1
 801471a:	4291      	cmp	r1, r2
 801471c:	d100      	bne.n	8014720 <memcpy+0xc>
 801471e:	bd10      	pop	{r4, pc}
 8014720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014728:	e7f7      	b.n	801471a <memcpy+0x6>

0801472a <memset>:
 801472a:	4402      	add	r2, r0
 801472c:	4603      	mov	r3, r0
 801472e:	4293      	cmp	r3, r2
 8014730:	d100      	bne.n	8014734 <memset+0xa>
 8014732:	4770      	bx	lr
 8014734:	f803 1b01 	strb.w	r1, [r3], #1
 8014738:	e7f9      	b.n	801472e <memset+0x4>
	...

0801473c <_free_r>:
 801473c:	b538      	push	{r3, r4, r5, lr}
 801473e:	4605      	mov	r5, r0
 8014740:	2900      	cmp	r1, #0
 8014742:	d045      	beq.n	80147d0 <_free_r+0x94>
 8014744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014748:	1f0c      	subs	r4, r1, #4
 801474a:	2b00      	cmp	r3, #0
 801474c:	bfb8      	it	lt
 801474e:	18e4      	addlt	r4, r4, r3
 8014750:	f000 f8cc 	bl	80148ec <__malloc_lock>
 8014754:	4a1f      	ldr	r2, [pc, #124]	; (80147d4 <_free_r+0x98>)
 8014756:	6813      	ldr	r3, [r2, #0]
 8014758:	4610      	mov	r0, r2
 801475a:	b933      	cbnz	r3, 801476a <_free_r+0x2e>
 801475c:	6063      	str	r3, [r4, #4]
 801475e:	6014      	str	r4, [r2, #0]
 8014760:	4628      	mov	r0, r5
 8014762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014766:	f000 b8c2 	b.w	80148ee <__malloc_unlock>
 801476a:	42a3      	cmp	r3, r4
 801476c:	d90c      	bls.n	8014788 <_free_r+0x4c>
 801476e:	6821      	ldr	r1, [r4, #0]
 8014770:	1862      	adds	r2, r4, r1
 8014772:	4293      	cmp	r3, r2
 8014774:	bf04      	itt	eq
 8014776:	681a      	ldreq	r2, [r3, #0]
 8014778:	685b      	ldreq	r3, [r3, #4]
 801477a:	6063      	str	r3, [r4, #4]
 801477c:	bf04      	itt	eq
 801477e:	1852      	addeq	r2, r2, r1
 8014780:	6022      	streq	r2, [r4, #0]
 8014782:	6004      	str	r4, [r0, #0]
 8014784:	e7ec      	b.n	8014760 <_free_r+0x24>
 8014786:	4613      	mov	r3, r2
 8014788:	685a      	ldr	r2, [r3, #4]
 801478a:	b10a      	cbz	r2, 8014790 <_free_r+0x54>
 801478c:	42a2      	cmp	r2, r4
 801478e:	d9fa      	bls.n	8014786 <_free_r+0x4a>
 8014790:	6819      	ldr	r1, [r3, #0]
 8014792:	1858      	adds	r0, r3, r1
 8014794:	42a0      	cmp	r0, r4
 8014796:	d10b      	bne.n	80147b0 <_free_r+0x74>
 8014798:	6820      	ldr	r0, [r4, #0]
 801479a:	4401      	add	r1, r0
 801479c:	1858      	adds	r0, r3, r1
 801479e:	4282      	cmp	r2, r0
 80147a0:	6019      	str	r1, [r3, #0]
 80147a2:	d1dd      	bne.n	8014760 <_free_r+0x24>
 80147a4:	6810      	ldr	r0, [r2, #0]
 80147a6:	6852      	ldr	r2, [r2, #4]
 80147a8:	605a      	str	r2, [r3, #4]
 80147aa:	4401      	add	r1, r0
 80147ac:	6019      	str	r1, [r3, #0]
 80147ae:	e7d7      	b.n	8014760 <_free_r+0x24>
 80147b0:	d902      	bls.n	80147b8 <_free_r+0x7c>
 80147b2:	230c      	movs	r3, #12
 80147b4:	602b      	str	r3, [r5, #0]
 80147b6:	e7d3      	b.n	8014760 <_free_r+0x24>
 80147b8:	6820      	ldr	r0, [r4, #0]
 80147ba:	1821      	adds	r1, r4, r0
 80147bc:	428a      	cmp	r2, r1
 80147be:	bf04      	itt	eq
 80147c0:	6811      	ldreq	r1, [r2, #0]
 80147c2:	6852      	ldreq	r2, [r2, #4]
 80147c4:	6062      	str	r2, [r4, #4]
 80147c6:	bf04      	itt	eq
 80147c8:	1809      	addeq	r1, r1, r0
 80147ca:	6021      	streq	r1, [r4, #0]
 80147cc:	605c      	str	r4, [r3, #4]
 80147ce:	e7c7      	b.n	8014760 <_free_r+0x24>
 80147d0:	bd38      	pop	{r3, r4, r5, pc}
 80147d2:	bf00      	nop
 80147d4:	20004b04 	.word	0x20004b04

080147d8 <_malloc_r>:
 80147d8:	b570      	push	{r4, r5, r6, lr}
 80147da:	1ccd      	adds	r5, r1, #3
 80147dc:	f025 0503 	bic.w	r5, r5, #3
 80147e0:	3508      	adds	r5, #8
 80147e2:	2d0c      	cmp	r5, #12
 80147e4:	bf38      	it	cc
 80147e6:	250c      	movcc	r5, #12
 80147e8:	2d00      	cmp	r5, #0
 80147ea:	4606      	mov	r6, r0
 80147ec:	db01      	blt.n	80147f2 <_malloc_r+0x1a>
 80147ee:	42a9      	cmp	r1, r5
 80147f0:	d903      	bls.n	80147fa <_malloc_r+0x22>
 80147f2:	230c      	movs	r3, #12
 80147f4:	6033      	str	r3, [r6, #0]
 80147f6:	2000      	movs	r0, #0
 80147f8:	bd70      	pop	{r4, r5, r6, pc}
 80147fa:	f000 f877 	bl	80148ec <__malloc_lock>
 80147fe:	4a21      	ldr	r2, [pc, #132]	; (8014884 <_malloc_r+0xac>)
 8014800:	6814      	ldr	r4, [r2, #0]
 8014802:	4621      	mov	r1, r4
 8014804:	b991      	cbnz	r1, 801482c <_malloc_r+0x54>
 8014806:	4c20      	ldr	r4, [pc, #128]	; (8014888 <_malloc_r+0xb0>)
 8014808:	6823      	ldr	r3, [r4, #0]
 801480a:	b91b      	cbnz	r3, 8014814 <_malloc_r+0x3c>
 801480c:	4630      	mov	r0, r6
 801480e:	f000 f83d 	bl	801488c <_sbrk_r>
 8014812:	6020      	str	r0, [r4, #0]
 8014814:	4629      	mov	r1, r5
 8014816:	4630      	mov	r0, r6
 8014818:	f000 f838 	bl	801488c <_sbrk_r>
 801481c:	1c43      	adds	r3, r0, #1
 801481e:	d124      	bne.n	801486a <_malloc_r+0x92>
 8014820:	230c      	movs	r3, #12
 8014822:	6033      	str	r3, [r6, #0]
 8014824:	4630      	mov	r0, r6
 8014826:	f000 f862 	bl	80148ee <__malloc_unlock>
 801482a:	e7e4      	b.n	80147f6 <_malloc_r+0x1e>
 801482c:	680b      	ldr	r3, [r1, #0]
 801482e:	1b5b      	subs	r3, r3, r5
 8014830:	d418      	bmi.n	8014864 <_malloc_r+0x8c>
 8014832:	2b0b      	cmp	r3, #11
 8014834:	d90f      	bls.n	8014856 <_malloc_r+0x7e>
 8014836:	600b      	str	r3, [r1, #0]
 8014838:	50cd      	str	r5, [r1, r3]
 801483a:	18cc      	adds	r4, r1, r3
 801483c:	4630      	mov	r0, r6
 801483e:	f000 f856 	bl	80148ee <__malloc_unlock>
 8014842:	f104 000b 	add.w	r0, r4, #11
 8014846:	1d23      	adds	r3, r4, #4
 8014848:	f020 0007 	bic.w	r0, r0, #7
 801484c:	1ac3      	subs	r3, r0, r3
 801484e:	d0d3      	beq.n	80147f8 <_malloc_r+0x20>
 8014850:	425a      	negs	r2, r3
 8014852:	50e2      	str	r2, [r4, r3]
 8014854:	e7d0      	b.n	80147f8 <_malloc_r+0x20>
 8014856:	428c      	cmp	r4, r1
 8014858:	684b      	ldr	r3, [r1, #4]
 801485a:	bf16      	itet	ne
 801485c:	6063      	strne	r3, [r4, #4]
 801485e:	6013      	streq	r3, [r2, #0]
 8014860:	460c      	movne	r4, r1
 8014862:	e7eb      	b.n	801483c <_malloc_r+0x64>
 8014864:	460c      	mov	r4, r1
 8014866:	6849      	ldr	r1, [r1, #4]
 8014868:	e7cc      	b.n	8014804 <_malloc_r+0x2c>
 801486a:	1cc4      	adds	r4, r0, #3
 801486c:	f024 0403 	bic.w	r4, r4, #3
 8014870:	42a0      	cmp	r0, r4
 8014872:	d005      	beq.n	8014880 <_malloc_r+0xa8>
 8014874:	1a21      	subs	r1, r4, r0
 8014876:	4630      	mov	r0, r6
 8014878:	f000 f808 	bl	801488c <_sbrk_r>
 801487c:	3001      	adds	r0, #1
 801487e:	d0cf      	beq.n	8014820 <_malloc_r+0x48>
 8014880:	6025      	str	r5, [r4, #0]
 8014882:	e7db      	b.n	801483c <_malloc_r+0x64>
 8014884:	20004b04 	.word	0x20004b04
 8014888:	20004b08 	.word	0x20004b08

0801488c <_sbrk_r>:
 801488c:	b538      	push	{r3, r4, r5, lr}
 801488e:	4c06      	ldr	r4, [pc, #24]	; (80148a8 <_sbrk_r+0x1c>)
 8014890:	2300      	movs	r3, #0
 8014892:	4605      	mov	r5, r0
 8014894:	4608      	mov	r0, r1
 8014896:	6023      	str	r3, [r4, #0]
 8014898:	f7ee ffae 	bl	80037f8 <_sbrk>
 801489c:	1c43      	adds	r3, r0, #1
 801489e:	d102      	bne.n	80148a6 <_sbrk_r+0x1a>
 80148a0:	6823      	ldr	r3, [r4, #0]
 80148a2:	b103      	cbz	r3, 80148a6 <_sbrk_r+0x1a>
 80148a4:	602b      	str	r3, [r5, #0]
 80148a6:	bd38      	pop	{r3, r4, r5, pc}
 80148a8:	20005808 	.word	0x20005808

080148ac <siprintf>:
 80148ac:	b40e      	push	{r1, r2, r3}
 80148ae:	b500      	push	{lr}
 80148b0:	b09c      	sub	sp, #112	; 0x70
 80148b2:	ab1d      	add	r3, sp, #116	; 0x74
 80148b4:	9002      	str	r0, [sp, #8]
 80148b6:	9006      	str	r0, [sp, #24]
 80148b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80148bc:	4809      	ldr	r0, [pc, #36]	; (80148e4 <siprintf+0x38>)
 80148be:	9107      	str	r1, [sp, #28]
 80148c0:	9104      	str	r1, [sp, #16]
 80148c2:	4909      	ldr	r1, [pc, #36]	; (80148e8 <siprintf+0x3c>)
 80148c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80148c8:	9105      	str	r1, [sp, #20]
 80148ca:	6800      	ldr	r0, [r0, #0]
 80148cc:	9301      	str	r3, [sp, #4]
 80148ce:	a902      	add	r1, sp, #8
 80148d0:	f000 f868 	bl	80149a4 <_svfiprintf_r>
 80148d4:	9b02      	ldr	r3, [sp, #8]
 80148d6:	2200      	movs	r2, #0
 80148d8:	701a      	strb	r2, [r3, #0]
 80148da:	b01c      	add	sp, #112	; 0x70
 80148dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80148e0:	b003      	add	sp, #12
 80148e2:	4770      	bx	lr
 80148e4:	200000d0 	.word	0x200000d0
 80148e8:	ffff0208 	.word	0xffff0208

080148ec <__malloc_lock>:
 80148ec:	4770      	bx	lr

080148ee <__malloc_unlock>:
 80148ee:	4770      	bx	lr

080148f0 <__ssputs_r>:
 80148f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148f4:	688e      	ldr	r6, [r1, #8]
 80148f6:	429e      	cmp	r6, r3
 80148f8:	4682      	mov	sl, r0
 80148fa:	460c      	mov	r4, r1
 80148fc:	4690      	mov	r8, r2
 80148fe:	4699      	mov	r9, r3
 8014900:	d837      	bhi.n	8014972 <__ssputs_r+0x82>
 8014902:	898a      	ldrh	r2, [r1, #12]
 8014904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014908:	d031      	beq.n	801496e <__ssputs_r+0x7e>
 801490a:	6825      	ldr	r5, [r4, #0]
 801490c:	6909      	ldr	r1, [r1, #16]
 801490e:	1a6f      	subs	r7, r5, r1
 8014910:	6965      	ldr	r5, [r4, #20]
 8014912:	2302      	movs	r3, #2
 8014914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014918:	fb95 f5f3 	sdiv	r5, r5, r3
 801491c:	f109 0301 	add.w	r3, r9, #1
 8014920:	443b      	add	r3, r7
 8014922:	429d      	cmp	r5, r3
 8014924:	bf38      	it	cc
 8014926:	461d      	movcc	r5, r3
 8014928:	0553      	lsls	r3, r2, #21
 801492a:	d530      	bpl.n	801498e <__ssputs_r+0x9e>
 801492c:	4629      	mov	r1, r5
 801492e:	f7ff ff53 	bl	80147d8 <_malloc_r>
 8014932:	4606      	mov	r6, r0
 8014934:	b950      	cbnz	r0, 801494c <__ssputs_r+0x5c>
 8014936:	230c      	movs	r3, #12
 8014938:	f8ca 3000 	str.w	r3, [sl]
 801493c:	89a3      	ldrh	r3, [r4, #12]
 801493e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014942:	81a3      	strh	r3, [r4, #12]
 8014944:	f04f 30ff 	mov.w	r0, #4294967295
 8014948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801494c:	463a      	mov	r2, r7
 801494e:	6921      	ldr	r1, [r4, #16]
 8014950:	f7ff fee0 	bl	8014714 <memcpy>
 8014954:	89a3      	ldrh	r3, [r4, #12]
 8014956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801495a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801495e:	81a3      	strh	r3, [r4, #12]
 8014960:	6126      	str	r6, [r4, #16]
 8014962:	6165      	str	r5, [r4, #20]
 8014964:	443e      	add	r6, r7
 8014966:	1bed      	subs	r5, r5, r7
 8014968:	6026      	str	r6, [r4, #0]
 801496a:	60a5      	str	r5, [r4, #8]
 801496c:	464e      	mov	r6, r9
 801496e:	454e      	cmp	r6, r9
 8014970:	d900      	bls.n	8014974 <__ssputs_r+0x84>
 8014972:	464e      	mov	r6, r9
 8014974:	4632      	mov	r2, r6
 8014976:	4641      	mov	r1, r8
 8014978:	6820      	ldr	r0, [r4, #0]
 801497a:	f000 fa93 	bl	8014ea4 <memmove>
 801497e:	68a3      	ldr	r3, [r4, #8]
 8014980:	1b9b      	subs	r3, r3, r6
 8014982:	60a3      	str	r3, [r4, #8]
 8014984:	6823      	ldr	r3, [r4, #0]
 8014986:	441e      	add	r6, r3
 8014988:	6026      	str	r6, [r4, #0]
 801498a:	2000      	movs	r0, #0
 801498c:	e7dc      	b.n	8014948 <__ssputs_r+0x58>
 801498e:	462a      	mov	r2, r5
 8014990:	f000 faa1 	bl	8014ed6 <_realloc_r>
 8014994:	4606      	mov	r6, r0
 8014996:	2800      	cmp	r0, #0
 8014998:	d1e2      	bne.n	8014960 <__ssputs_r+0x70>
 801499a:	6921      	ldr	r1, [r4, #16]
 801499c:	4650      	mov	r0, sl
 801499e:	f7ff fecd 	bl	801473c <_free_r>
 80149a2:	e7c8      	b.n	8014936 <__ssputs_r+0x46>

080149a4 <_svfiprintf_r>:
 80149a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149a8:	461d      	mov	r5, r3
 80149aa:	898b      	ldrh	r3, [r1, #12]
 80149ac:	061f      	lsls	r7, r3, #24
 80149ae:	b09d      	sub	sp, #116	; 0x74
 80149b0:	4680      	mov	r8, r0
 80149b2:	460c      	mov	r4, r1
 80149b4:	4616      	mov	r6, r2
 80149b6:	d50f      	bpl.n	80149d8 <_svfiprintf_r+0x34>
 80149b8:	690b      	ldr	r3, [r1, #16]
 80149ba:	b96b      	cbnz	r3, 80149d8 <_svfiprintf_r+0x34>
 80149bc:	2140      	movs	r1, #64	; 0x40
 80149be:	f7ff ff0b 	bl	80147d8 <_malloc_r>
 80149c2:	6020      	str	r0, [r4, #0]
 80149c4:	6120      	str	r0, [r4, #16]
 80149c6:	b928      	cbnz	r0, 80149d4 <_svfiprintf_r+0x30>
 80149c8:	230c      	movs	r3, #12
 80149ca:	f8c8 3000 	str.w	r3, [r8]
 80149ce:	f04f 30ff 	mov.w	r0, #4294967295
 80149d2:	e0c8      	b.n	8014b66 <_svfiprintf_r+0x1c2>
 80149d4:	2340      	movs	r3, #64	; 0x40
 80149d6:	6163      	str	r3, [r4, #20]
 80149d8:	2300      	movs	r3, #0
 80149da:	9309      	str	r3, [sp, #36]	; 0x24
 80149dc:	2320      	movs	r3, #32
 80149de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80149e2:	2330      	movs	r3, #48	; 0x30
 80149e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80149e8:	9503      	str	r5, [sp, #12]
 80149ea:	f04f 0b01 	mov.w	fp, #1
 80149ee:	4637      	mov	r7, r6
 80149f0:	463d      	mov	r5, r7
 80149f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80149f6:	b10b      	cbz	r3, 80149fc <_svfiprintf_r+0x58>
 80149f8:	2b25      	cmp	r3, #37	; 0x25
 80149fa:	d13e      	bne.n	8014a7a <_svfiprintf_r+0xd6>
 80149fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8014a00:	d00b      	beq.n	8014a1a <_svfiprintf_r+0x76>
 8014a02:	4653      	mov	r3, sl
 8014a04:	4632      	mov	r2, r6
 8014a06:	4621      	mov	r1, r4
 8014a08:	4640      	mov	r0, r8
 8014a0a:	f7ff ff71 	bl	80148f0 <__ssputs_r>
 8014a0e:	3001      	adds	r0, #1
 8014a10:	f000 80a4 	beq.w	8014b5c <_svfiprintf_r+0x1b8>
 8014a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a16:	4453      	add	r3, sl
 8014a18:	9309      	str	r3, [sp, #36]	; 0x24
 8014a1a:	783b      	ldrb	r3, [r7, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	f000 809d 	beq.w	8014b5c <_svfiprintf_r+0x1b8>
 8014a22:	2300      	movs	r3, #0
 8014a24:	f04f 32ff 	mov.w	r2, #4294967295
 8014a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014a2c:	9304      	str	r3, [sp, #16]
 8014a2e:	9307      	str	r3, [sp, #28]
 8014a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014a34:	931a      	str	r3, [sp, #104]	; 0x68
 8014a36:	462f      	mov	r7, r5
 8014a38:	2205      	movs	r2, #5
 8014a3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014a3e:	4850      	ldr	r0, [pc, #320]	; (8014b80 <_svfiprintf_r+0x1dc>)
 8014a40:	f7eb fbee 	bl	8000220 <memchr>
 8014a44:	9b04      	ldr	r3, [sp, #16]
 8014a46:	b9d0      	cbnz	r0, 8014a7e <_svfiprintf_r+0xda>
 8014a48:	06d9      	lsls	r1, r3, #27
 8014a4a:	bf44      	itt	mi
 8014a4c:	2220      	movmi	r2, #32
 8014a4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014a52:	071a      	lsls	r2, r3, #28
 8014a54:	bf44      	itt	mi
 8014a56:	222b      	movmi	r2, #43	; 0x2b
 8014a58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014a5c:	782a      	ldrb	r2, [r5, #0]
 8014a5e:	2a2a      	cmp	r2, #42	; 0x2a
 8014a60:	d015      	beq.n	8014a8e <_svfiprintf_r+0xea>
 8014a62:	9a07      	ldr	r2, [sp, #28]
 8014a64:	462f      	mov	r7, r5
 8014a66:	2000      	movs	r0, #0
 8014a68:	250a      	movs	r5, #10
 8014a6a:	4639      	mov	r1, r7
 8014a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014a70:	3b30      	subs	r3, #48	; 0x30
 8014a72:	2b09      	cmp	r3, #9
 8014a74:	d94d      	bls.n	8014b12 <_svfiprintf_r+0x16e>
 8014a76:	b1b8      	cbz	r0, 8014aa8 <_svfiprintf_r+0x104>
 8014a78:	e00f      	b.n	8014a9a <_svfiprintf_r+0xf6>
 8014a7a:	462f      	mov	r7, r5
 8014a7c:	e7b8      	b.n	80149f0 <_svfiprintf_r+0x4c>
 8014a7e:	4a40      	ldr	r2, [pc, #256]	; (8014b80 <_svfiprintf_r+0x1dc>)
 8014a80:	1a80      	subs	r0, r0, r2
 8014a82:	fa0b f000 	lsl.w	r0, fp, r0
 8014a86:	4318      	orrs	r0, r3
 8014a88:	9004      	str	r0, [sp, #16]
 8014a8a:	463d      	mov	r5, r7
 8014a8c:	e7d3      	b.n	8014a36 <_svfiprintf_r+0x92>
 8014a8e:	9a03      	ldr	r2, [sp, #12]
 8014a90:	1d11      	adds	r1, r2, #4
 8014a92:	6812      	ldr	r2, [r2, #0]
 8014a94:	9103      	str	r1, [sp, #12]
 8014a96:	2a00      	cmp	r2, #0
 8014a98:	db01      	blt.n	8014a9e <_svfiprintf_r+0xfa>
 8014a9a:	9207      	str	r2, [sp, #28]
 8014a9c:	e004      	b.n	8014aa8 <_svfiprintf_r+0x104>
 8014a9e:	4252      	negs	r2, r2
 8014aa0:	f043 0302 	orr.w	r3, r3, #2
 8014aa4:	9207      	str	r2, [sp, #28]
 8014aa6:	9304      	str	r3, [sp, #16]
 8014aa8:	783b      	ldrb	r3, [r7, #0]
 8014aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8014aac:	d10c      	bne.n	8014ac8 <_svfiprintf_r+0x124>
 8014aae:	787b      	ldrb	r3, [r7, #1]
 8014ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8014ab2:	d133      	bne.n	8014b1c <_svfiprintf_r+0x178>
 8014ab4:	9b03      	ldr	r3, [sp, #12]
 8014ab6:	1d1a      	adds	r2, r3, #4
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	9203      	str	r2, [sp, #12]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	bfb8      	it	lt
 8014ac0:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ac4:	3702      	adds	r7, #2
 8014ac6:	9305      	str	r3, [sp, #20]
 8014ac8:	4d2e      	ldr	r5, [pc, #184]	; (8014b84 <_svfiprintf_r+0x1e0>)
 8014aca:	7839      	ldrb	r1, [r7, #0]
 8014acc:	2203      	movs	r2, #3
 8014ace:	4628      	mov	r0, r5
 8014ad0:	f7eb fba6 	bl	8000220 <memchr>
 8014ad4:	b138      	cbz	r0, 8014ae6 <_svfiprintf_r+0x142>
 8014ad6:	2340      	movs	r3, #64	; 0x40
 8014ad8:	1b40      	subs	r0, r0, r5
 8014ada:	fa03 f000 	lsl.w	r0, r3, r0
 8014ade:	9b04      	ldr	r3, [sp, #16]
 8014ae0:	4303      	orrs	r3, r0
 8014ae2:	3701      	adds	r7, #1
 8014ae4:	9304      	str	r3, [sp, #16]
 8014ae6:	7839      	ldrb	r1, [r7, #0]
 8014ae8:	4827      	ldr	r0, [pc, #156]	; (8014b88 <_svfiprintf_r+0x1e4>)
 8014aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014aee:	2206      	movs	r2, #6
 8014af0:	1c7e      	adds	r6, r7, #1
 8014af2:	f7eb fb95 	bl	8000220 <memchr>
 8014af6:	2800      	cmp	r0, #0
 8014af8:	d038      	beq.n	8014b6c <_svfiprintf_r+0x1c8>
 8014afa:	4b24      	ldr	r3, [pc, #144]	; (8014b8c <_svfiprintf_r+0x1e8>)
 8014afc:	bb13      	cbnz	r3, 8014b44 <_svfiprintf_r+0x1a0>
 8014afe:	9b03      	ldr	r3, [sp, #12]
 8014b00:	3307      	adds	r3, #7
 8014b02:	f023 0307 	bic.w	r3, r3, #7
 8014b06:	3308      	adds	r3, #8
 8014b08:	9303      	str	r3, [sp, #12]
 8014b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b0c:	444b      	add	r3, r9
 8014b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b10:	e76d      	b.n	80149ee <_svfiprintf_r+0x4a>
 8014b12:	fb05 3202 	mla	r2, r5, r2, r3
 8014b16:	2001      	movs	r0, #1
 8014b18:	460f      	mov	r7, r1
 8014b1a:	e7a6      	b.n	8014a6a <_svfiprintf_r+0xc6>
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	3701      	adds	r7, #1
 8014b20:	9305      	str	r3, [sp, #20]
 8014b22:	4619      	mov	r1, r3
 8014b24:	250a      	movs	r5, #10
 8014b26:	4638      	mov	r0, r7
 8014b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014b2c:	3a30      	subs	r2, #48	; 0x30
 8014b2e:	2a09      	cmp	r2, #9
 8014b30:	d903      	bls.n	8014b3a <_svfiprintf_r+0x196>
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d0c8      	beq.n	8014ac8 <_svfiprintf_r+0x124>
 8014b36:	9105      	str	r1, [sp, #20]
 8014b38:	e7c6      	b.n	8014ac8 <_svfiprintf_r+0x124>
 8014b3a:	fb05 2101 	mla	r1, r5, r1, r2
 8014b3e:	2301      	movs	r3, #1
 8014b40:	4607      	mov	r7, r0
 8014b42:	e7f0      	b.n	8014b26 <_svfiprintf_r+0x182>
 8014b44:	ab03      	add	r3, sp, #12
 8014b46:	9300      	str	r3, [sp, #0]
 8014b48:	4622      	mov	r2, r4
 8014b4a:	4b11      	ldr	r3, [pc, #68]	; (8014b90 <_svfiprintf_r+0x1ec>)
 8014b4c:	a904      	add	r1, sp, #16
 8014b4e:	4640      	mov	r0, r8
 8014b50:	f3af 8000 	nop.w
 8014b54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014b58:	4681      	mov	r9, r0
 8014b5a:	d1d6      	bne.n	8014b0a <_svfiprintf_r+0x166>
 8014b5c:	89a3      	ldrh	r3, [r4, #12]
 8014b5e:	065b      	lsls	r3, r3, #25
 8014b60:	f53f af35 	bmi.w	80149ce <_svfiprintf_r+0x2a>
 8014b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b66:	b01d      	add	sp, #116	; 0x74
 8014b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b6c:	ab03      	add	r3, sp, #12
 8014b6e:	9300      	str	r3, [sp, #0]
 8014b70:	4622      	mov	r2, r4
 8014b72:	4b07      	ldr	r3, [pc, #28]	; (8014b90 <_svfiprintf_r+0x1ec>)
 8014b74:	a904      	add	r1, sp, #16
 8014b76:	4640      	mov	r0, r8
 8014b78:	f000 f882 	bl	8014c80 <_printf_i>
 8014b7c:	e7ea      	b.n	8014b54 <_svfiprintf_r+0x1b0>
 8014b7e:	bf00      	nop
 8014b80:	080180a4 	.word	0x080180a4
 8014b84:	080180aa 	.word	0x080180aa
 8014b88:	080180ae 	.word	0x080180ae
 8014b8c:	00000000 	.word	0x00000000
 8014b90:	080148f1 	.word	0x080148f1

08014b94 <_printf_common>:
 8014b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014b98:	4691      	mov	r9, r2
 8014b9a:	461f      	mov	r7, r3
 8014b9c:	688a      	ldr	r2, [r1, #8]
 8014b9e:	690b      	ldr	r3, [r1, #16]
 8014ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014ba4:	4293      	cmp	r3, r2
 8014ba6:	bfb8      	it	lt
 8014ba8:	4613      	movlt	r3, r2
 8014baa:	f8c9 3000 	str.w	r3, [r9]
 8014bae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014bb2:	4606      	mov	r6, r0
 8014bb4:	460c      	mov	r4, r1
 8014bb6:	b112      	cbz	r2, 8014bbe <_printf_common+0x2a>
 8014bb8:	3301      	adds	r3, #1
 8014bba:	f8c9 3000 	str.w	r3, [r9]
 8014bbe:	6823      	ldr	r3, [r4, #0]
 8014bc0:	0699      	lsls	r1, r3, #26
 8014bc2:	bf42      	ittt	mi
 8014bc4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014bc8:	3302      	addmi	r3, #2
 8014bca:	f8c9 3000 	strmi.w	r3, [r9]
 8014bce:	6825      	ldr	r5, [r4, #0]
 8014bd0:	f015 0506 	ands.w	r5, r5, #6
 8014bd4:	d107      	bne.n	8014be6 <_printf_common+0x52>
 8014bd6:	f104 0a19 	add.w	sl, r4, #25
 8014bda:	68e3      	ldr	r3, [r4, #12]
 8014bdc:	f8d9 2000 	ldr.w	r2, [r9]
 8014be0:	1a9b      	subs	r3, r3, r2
 8014be2:	42ab      	cmp	r3, r5
 8014be4:	dc28      	bgt.n	8014c38 <_printf_common+0xa4>
 8014be6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014bea:	6822      	ldr	r2, [r4, #0]
 8014bec:	3300      	adds	r3, #0
 8014bee:	bf18      	it	ne
 8014bf0:	2301      	movne	r3, #1
 8014bf2:	0692      	lsls	r2, r2, #26
 8014bf4:	d42d      	bmi.n	8014c52 <_printf_common+0xbe>
 8014bf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014bfa:	4639      	mov	r1, r7
 8014bfc:	4630      	mov	r0, r6
 8014bfe:	47c0      	blx	r8
 8014c00:	3001      	adds	r0, #1
 8014c02:	d020      	beq.n	8014c46 <_printf_common+0xb2>
 8014c04:	6823      	ldr	r3, [r4, #0]
 8014c06:	68e5      	ldr	r5, [r4, #12]
 8014c08:	f8d9 2000 	ldr.w	r2, [r9]
 8014c0c:	f003 0306 	and.w	r3, r3, #6
 8014c10:	2b04      	cmp	r3, #4
 8014c12:	bf08      	it	eq
 8014c14:	1aad      	subeq	r5, r5, r2
 8014c16:	68a3      	ldr	r3, [r4, #8]
 8014c18:	6922      	ldr	r2, [r4, #16]
 8014c1a:	bf0c      	ite	eq
 8014c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c20:	2500      	movne	r5, #0
 8014c22:	4293      	cmp	r3, r2
 8014c24:	bfc4      	itt	gt
 8014c26:	1a9b      	subgt	r3, r3, r2
 8014c28:	18ed      	addgt	r5, r5, r3
 8014c2a:	f04f 0900 	mov.w	r9, #0
 8014c2e:	341a      	adds	r4, #26
 8014c30:	454d      	cmp	r5, r9
 8014c32:	d11a      	bne.n	8014c6a <_printf_common+0xd6>
 8014c34:	2000      	movs	r0, #0
 8014c36:	e008      	b.n	8014c4a <_printf_common+0xb6>
 8014c38:	2301      	movs	r3, #1
 8014c3a:	4652      	mov	r2, sl
 8014c3c:	4639      	mov	r1, r7
 8014c3e:	4630      	mov	r0, r6
 8014c40:	47c0      	blx	r8
 8014c42:	3001      	adds	r0, #1
 8014c44:	d103      	bne.n	8014c4e <_printf_common+0xba>
 8014c46:	f04f 30ff 	mov.w	r0, #4294967295
 8014c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c4e:	3501      	adds	r5, #1
 8014c50:	e7c3      	b.n	8014bda <_printf_common+0x46>
 8014c52:	18e1      	adds	r1, r4, r3
 8014c54:	1c5a      	adds	r2, r3, #1
 8014c56:	2030      	movs	r0, #48	; 0x30
 8014c58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014c5c:	4422      	add	r2, r4
 8014c5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014c62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014c66:	3302      	adds	r3, #2
 8014c68:	e7c5      	b.n	8014bf6 <_printf_common+0x62>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	4622      	mov	r2, r4
 8014c6e:	4639      	mov	r1, r7
 8014c70:	4630      	mov	r0, r6
 8014c72:	47c0      	blx	r8
 8014c74:	3001      	adds	r0, #1
 8014c76:	d0e6      	beq.n	8014c46 <_printf_common+0xb2>
 8014c78:	f109 0901 	add.w	r9, r9, #1
 8014c7c:	e7d8      	b.n	8014c30 <_printf_common+0x9c>
	...

08014c80 <_printf_i>:
 8014c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c84:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014c88:	460c      	mov	r4, r1
 8014c8a:	7e09      	ldrb	r1, [r1, #24]
 8014c8c:	b085      	sub	sp, #20
 8014c8e:	296e      	cmp	r1, #110	; 0x6e
 8014c90:	4617      	mov	r7, r2
 8014c92:	4606      	mov	r6, r0
 8014c94:	4698      	mov	r8, r3
 8014c96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c98:	f000 80b3 	beq.w	8014e02 <_printf_i+0x182>
 8014c9c:	d822      	bhi.n	8014ce4 <_printf_i+0x64>
 8014c9e:	2963      	cmp	r1, #99	; 0x63
 8014ca0:	d036      	beq.n	8014d10 <_printf_i+0x90>
 8014ca2:	d80a      	bhi.n	8014cba <_printf_i+0x3a>
 8014ca4:	2900      	cmp	r1, #0
 8014ca6:	f000 80b9 	beq.w	8014e1c <_printf_i+0x19c>
 8014caa:	2958      	cmp	r1, #88	; 0x58
 8014cac:	f000 8083 	beq.w	8014db6 <_printf_i+0x136>
 8014cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014cb4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014cb8:	e032      	b.n	8014d20 <_printf_i+0xa0>
 8014cba:	2964      	cmp	r1, #100	; 0x64
 8014cbc:	d001      	beq.n	8014cc2 <_printf_i+0x42>
 8014cbe:	2969      	cmp	r1, #105	; 0x69
 8014cc0:	d1f6      	bne.n	8014cb0 <_printf_i+0x30>
 8014cc2:	6820      	ldr	r0, [r4, #0]
 8014cc4:	6813      	ldr	r3, [r2, #0]
 8014cc6:	0605      	lsls	r5, r0, #24
 8014cc8:	f103 0104 	add.w	r1, r3, #4
 8014ccc:	d52a      	bpl.n	8014d24 <_printf_i+0xa4>
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	6011      	str	r1, [r2, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	da03      	bge.n	8014cde <_printf_i+0x5e>
 8014cd6:	222d      	movs	r2, #45	; 0x2d
 8014cd8:	425b      	negs	r3, r3
 8014cda:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014cde:	486f      	ldr	r0, [pc, #444]	; (8014e9c <_printf_i+0x21c>)
 8014ce0:	220a      	movs	r2, #10
 8014ce2:	e039      	b.n	8014d58 <_printf_i+0xd8>
 8014ce4:	2973      	cmp	r1, #115	; 0x73
 8014ce6:	f000 809d 	beq.w	8014e24 <_printf_i+0x1a4>
 8014cea:	d808      	bhi.n	8014cfe <_printf_i+0x7e>
 8014cec:	296f      	cmp	r1, #111	; 0x6f
 8014cee:	d020      	beq.n	8014d32 <_printf_i+0xb2>
 8014cf0:	2970      	cmp	r1, #112	; 0x70
 8014cf2:	d1dd      	bne.n	8014cb0 <_printf_i+0x30>
 8014cf4:	6823      	ldr	r3, [r4, #0]
 8014cf6:	f043 0320 	orr.w	r3, r3, #32
 8014cfa:	6023      	str	r3, [r4, #0]
 8014cfc:	e003      	b.n	8014d06 <_printf_i+0x86>
 8014cfe:	2975      	cmp	r1, #117	; 0x75
 8014d00:	d017      	beq.n	8014d32 <_printf_i+0xb2>
 8014d02:	2978      	cmp	r1, #120	; 0x78
 8014d04:	d1d4      	bne.n	8014cb0 <_printf_i+0x30>
 8014d06:	2378      	movs	r3, #120	; 0x78
 8014d08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014d0c:	4864      	ldr	r0, [pc, #400]	; (8014ea0 <_printf_i+0x220>)
 8014d0e:	e055      	b.n	8014dbc <_printf_i+0x13c>
 8014d10:	6813      	ldr	r3, [r2, #0]
 8014d12:	1d19      	adds	r1, r3, #4
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	6011      	str	r1, [r2, #0]
 8014d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d20:	2301      	movs	r3, #1
 8014d22:	e08c      	b.n	8014e3e <_printf_i+0x1be>
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	6011      	str	r1, [r2, #0]
 8014d28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014d2c:	bf18      	it	ne
 8014d2e:	b21b      	sxthne	r3, r3
 8014d30:	e7cf      	b.n	8014cd2 <_printf_i+0x52>
 8014d32:	6813      	ldr	r3, [r2, #0]
 8014d34:	6825      	ldr	r5, [r4, #0]
 8014d36:	1d18      	adds	r0, r3, #4
 8014d38:	6010      	str	r0, [r2, #0]
 8014d3a:	0628      	lsls	r0, r5, #24
 8014d3c:	d501      	bpl.n	8014d42 <_printf_i+0xc2>
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	e002      	b.n	8014d48 <_printf_i+0xc8>
 8014d42:	0668      	lsls	r0, r5, #25
 8014d44:	d5fb      	bpl.n	8014d3e <_printf_i+0xbe>
 8014d46:	881b      	ldrh	r3, [r3, #0]
 8014d48:	4854      	ldr	r0, [pc, #336]	; (8014e9c <_printf_i+0x21c>)
 8014d4a:	296f      	cmp	r1, #111	; 0x6f
 8014d4c:	bf14      	ite	ne
 8014d4e:	220a      	movne	r2, #10
 8014d50:	2208      	moveq	r2, #8
 8014d52:	2100      	movs	r1, #0
 8014d54:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014d58:	6865      	ldr	r5, [r4, #4]
 8014d5a:	60a5      	str	r5, [r4, #8]
 8014d5c:	2d00      	cmp	r5, #0
 8014d5e:	f2c0 8095 	blt.w	8014e8c <_printf_i+0x20c>
 8014d62:	6821      	ldr	r1, [r4, #0]
 8014d64:	f021 0104 	bic.w	r1, r1, #4
 8014d68:	6021      	str	r1, [r4, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d13d      	bne.n	8014dea <_printf_i+0x16a>
 8014d6e:	2d00      	cmp	r5, #0
 8014d70:	f040 808e 	bne.w	8014e90 <_printf_i+0x210>
 8014d74:	4665      	mov	r5, ip
 8014d76:	2a08      	cmp	r2, #8
 8014d78:	d10b      	bne.n	8014d92 <_printf_i+0x112>
 8014d7a:	6823      	ldr	r3, [r4, #0]
 8014d7c:	07db      	lsls	r3, r3, #31
 8014d7e:	d508      	bpl.n	8014d92 <_printf_i+0x112>
 8014d80:	6923      	ldr	r3, [r4, #16]
 8014d82:	6862      	ldr	r2, [r4, #4]
 8014d84:	429a      	cmp	r2, r3
 8014d86:	bfde      	ittt	le
 8014d88:	2330      	movle	r3, #48	; 0x30
 8014d8a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014d8e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014d92:	ebac 0305 	sub.w	r3, ip, r5
 8014d96:	6123      	str	r3, [r4, #16]
 8014d98:	f8cd 8000 	str.w	r8, [sp]
 8014d9c:	463b      	mov	r3, r7
 8014d9e:	aa03      	add	r2, sp, #12
 8014da0:	4621      	mov	r1, r4
 8014da2:	4630      	mov	r0, r6
 8014da4:	f7ff fef6 	bl	8014b94 <_printf_common>
 8014da8:	3001      	adds	r0, #1
 8014daa:	d14d      	bne.n	8014e48 <_printf_i+0x1c8>
 8014dac:	f04f 30ff 	mov.w	r0, #4294967295
 8014db0:	b005      	add	sp, #20
 8014db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014db6:	4839      	ldr	r0, [pc, #228]	; (8014e9c <_printf_i+0x21c>)
 8014db8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014dbc:	6813      	ldr	r3, [r2, #0]
 8014dbe:	6821      	ldr	r1, [r4, #0]
 8014dc0:	1d1d      	adds	r5, r3, #4
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	6015      	str	r5, [r2, #0]
 8014dc6:	060a      	lsls	r2, r1, #24
 8014dc8:	d50b      	bpl.n	8014de2 <_printf_i+0x162>
 8014dca:	07ca      	lsls	r2, r1, #31
 8014dcc:	bf44      	itt	mi
 8014dce:	f041 0120 	orrmi.w	r1, r1, #32
 8014dd2:	6021      	strmi	r1, [r4, #0]
 8014dd4:	b91b      	cbnz	r3, 8014dde <_printf_i+0x15e>
 8014dd6:	6822      	ldr	r2, [r4, #0]
 8014dd8:	f022 0220 	bic.w	r2, r2, #32
 8014ddc:	6022      	str	r2, [r4, #0]
 8014dde:	2210      	movs	r2, #16
 8014de0:	e7b7      	b.n	8014d52 <_printf_i+0xd2>
 8014de2:	064d      	lsls	r5, r1, #25
 8014de4:	bf48      	it	mi
 8014de6:	b29b      	uxthmi	r3, r3
 8014de8:	e7ef      	b.n	8014dca <_printf_i+0x14a>
 8014dea:	4665      	mov	r5, ip
 8014dec:	fbb3 f1f2 	udiv	r1, r3, r2
 8014df0:	fb02 3311 	mls	r3, r2, r1, r3
 8014df4:	5cc3      	ldrb	r3, [r0, r3]
 8014df6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8014dfa:	460b      	mov	r3, r1
 8014dfc:	2900      	cmp	r1, #0
 8014dfe:	d1f5      	bne.n	8014dec <_printf_i+0x16c>
 8014e00:	e7b9      	b.n	8014d76 <_printf_i+0xf6>
 8014e02:	6813      	ldr	r3, [r2, #0]
 8014e04:	6825      	ldr	r5, [r4, #0]
 8014e06:	6961      	ldr	r1, [r4, #20]
 8014e08:	1d18      	adds	r0, r3, #4
 8014e0a:	6010      	str	r0, [r2, #0]
 8014e0c:	0628      	lsls	r0, r5, #24
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	d501      	bpl.n	8014e16 <_printf_i+0x196>
 8014e12:	6019      	str	r1, [r3, #0]
 8014e14:	e002      	b.n	8014e1c <_printf_i+0x19c>
 8014e16:	066a      	lsls	r2, r5, #25
 8014e18:	d5fb      	bpl.n	8014e12 <_printf_i+0x192>
 8014e1a:	8019      	strh	r1, [r3, #0]
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	6123      	str	r3, [r4, #16]
 8014e20:	4665      	mov	r5, ip
 8014e22:	e7b9      	b.n	8014d98 <_printf_i+0x118>
 8014e24:	6813      	ldr	r3, [r2, #0]
 8014e26:	1d19      	adds	r1, r3, #4
 8014e28:	6011      	str	r1, [r2, #0]
 8014e2a:	681d      	ldr	r5, [r3, #0]
 8014e2c:	6862      	ldr	r2, [r4, #4]
 8014e2e:	2100      	movs	r1, #0
 8014e30:	4628      	mov	r0, r5
 8014e32:	f7eb f9f5 	bl	8000220 <memchr>
 8014e36:	b108      	cbz	r0, 8014e3c <_printf_i+0x1bc>
 8014e38:	1b40      	subs	r0, r0, r5
 8014e3a:	6060      	str	r0, [r4, #4]
 8014e3c:	6863      	ldr	r3, [r4, #4]
 8014e3e:	6123      	str	r3, [r4, #16]
 8014e40:	2300      	movs	r3, #0
 8014e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e46:	e7a7      	b.n	8014d98 <_printf_i+0x118>
 8014e48:	6923      	ldr	r3, [r4, #16]
 8014e4a:	462a      	mov	r2, r5
 8014e4c:	4639      	mov	r1, r7
 8014e4e:	4630      	mov	r0, r6
 8014e50:	47c0      	blx	r8
 8014e52:	3001      	adds	r0, #1
 8014e54:	d0aa      	beq.n	8014dac <_printf_i+0x12c>
 8014e56:	6823      	ldr	r3, [r4, #0]
 8014e58:	079b      	lsls	r3, r3, #30
 8014e5a:	d413      	bmi.n	8014e84 <_printf_i+0x204>
 8014e5c:	68e0      	ldr	r0, [r4, #12]
 8014e5e:	9b03      	ldr	r3, [sp, #12]
 8014e60:	4298      	cmp	r0, r3
 8014e62:	bfb8      	it	lt
 8014e64:	4618      	movlt	r0, r3
 8014e66:	e7a3      	b.n	8014db0 <_printf_i+0x130>
 8014e68:	2301      	movs	r3, #1
 8014e6a:	464a      	mov	r2, r9
 8014e6c:	4639      	mov	r1, r7
 8014e6e:	4630      	mov	r0, r6
 8014e70:	47c0      	blx	r8
 8014e72:	3001      	adds	r0, #1
 8014e74:	d09a      	beq.n	8014dac <_printf_i+0x12c>
 8014e76:	3501      	adds	r5, #1
 8014e78:	68e3      	ldr	r3, [r4, #12]
 8014e7a:	9a03      	ldr	r2, [sp, #12]
 8014e7c:	1a9b      	subs	r3, r3, r2
 8014e7e:	42ab      	cmp	r3, r5
 8014e80:	dcf2      	bgt.n	8014e68 <_printf_i+0x1e8>
 8014e82:	e7eb      	b.n	8014e5c <_printf_i+0x1dc>
 8014e84:	2500      	movs	r5, #0
 8014e86:	f104 0919 	add.w	r9, r4, #25
 8014e8a:	e7f5      	b.n	8014e78 <_printf_i+0x1f8>
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d1ac      	bne.n	8014dea <_printf_i+0x16a>
 8014e90:	7803      	ldrb	r3, [r0, #0]
 8014e92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014e96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014e9a:	e76c      	b.n	8014d76 <_printf_i+0xf6>
 8014e9c:	080180b5 	.word	0x080180b5
 8014ea0:	080180c6 	.word	0x080180c6

08014ea4 <memmove>:
 8014ea4:	4288      	cmp	r0, r1
 8014ea6:	b510      	push	{r4, lr}
 8014ea8:	eb01 0302 	add.w	r3, r1, r2
 8014eac:	d807      	bhi.n	8014ebe <memmove+0x1a>
 8014eae:	1e42      	subs	r2, r0, #1
 8014eb0:	4299      	cmp	r1, r3
 8014eb2:	d00a      	beq.n	8014eca <memmove+0x26>
 8014eb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eb8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014ebc:	e7f8      	b.n	8014eb0 <memmove+0xc>
 8014ebe:	4283      	cmp	r3, r0
 8014ec0:	d9f5      	bls.n	8014eae <memmove+0xa>
 8014ec2:	1881      	adds	r1, r0, r2
 8014ec4:	1ad2      	subs	r2, r2, r3
 8014ec6:	42d3      	cmn	r3, r2
 8014ec8:	d100      	bne.n	8014ecc <memmove+0x28>
 8014eca:	bd10      	pop	{r4, pc}
 8014ecc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ed0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014ed4:	e7f7      	b.n	8014ec6 <memmove+0x22>

08014ed6 <_realloc_r>:
 8014ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ed8:	4607      	mov	r7, r0
 8014eda:	4614      	mov	r4, r2
 8014edc:	460e      	mov	r6, r1
 8014ede:	b921      	cbnz	r1, 8014eea <_realloc_r+0x14>
 8014ee0:	4611      	mov	r1, r2
 8014ee2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014ee6:	f7ff bc77 	b.w	80147d8 <_malloc_r>
 8014eea:	b922      	cbnz	r2, 8014ef6 <_realloc_r+0x20>
 8014eec:	f7ff fc26 	bl	801473c <_free_r>
 8014ef0:	4625      	mov	r5, r4
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ef6:	f000 f814 	bl	8014f22 <_malloc_usable_size_r>
 8014efa:	42a0      	cmp	r0, r4
 8014efc:	d20f      	bcs.n	8014f1e <_realloc_r+0x48>
 8014efe:	4621      	mov	r1, r4
 8014f00:	4638      	mov	r0, r7
 8014f02:	f7ff fc69 	bl	80147d8 <_malloc_r>
 8014f06:	4605      	mov	r5, r0
 8014f08:	2800      	cmp	r0, #0
 8014f0a:	d0f2      	beq.n	8014ef2 <_realloc_r+0x1c>
 8014f0c:	4631      	mov	r1, r6
 8014f0e:	4622      	mov	r2, r4
 8014f10:	f7ff fc00 	bl	8014714 <memcpy>
 8014f14:	4631      	mov	r1, r6
 8014f16:	4638      	mov	r0, r7
 8014f18:	f7ff fc10 	bl	801473c <_free_r>
 8014f1c:	e7e9      	b.n	8014ef2 <_realloc_r+0x1c>
 8014f1e:	4635      	mov	r5, r6
 8014f20:	e7e7      	b.n	8014ef2 <_realloc_r+0x1c>

08014f22 <_malloc_usable_size_r>:
 8014f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f26:	1f18      	subs	r0, r3, #4
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	bfbc      	itt	lt
 8014f2c:	580b      	ldrlt	r3, [r1, r0]
 8014f2e:	18c0      	addlt	r0, r0, r3
 8014f30:	4770      	bx	lr
 8014f32:	0000      	movs	r0, r0
 8014f34:	0000      	movs	r0, r0
	...

08014f38 <exp>:
 8014f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f3a:	ed2d 8b02 	vpush	{d8}
 8014f3e:	4e38      	ldr	r6, [pc, #224]	; (8015020 <exp+0xe8>)
 8014f40:	b08b      	sub	sp, #44	; 0x2c
 8014f42:	ec55 4b10 	vmov	r4, r5, d0
 8014f46:	f000 f873 	bl	8015030 <__ieee754_exp>
 8014f4a:	f996 3000 	ldrsb.w	r3, [r6]
 8014f4e:	eeb0 8a40 	vmov.f32	s16, s0
 8014f52:	eef0 8a60 	vmov.f32	s17, s1
 8014f56:	3301      	adds	r3, #1
 8014f58:	d02c      	beq.n	8014fb4 <exp+0x7c>
 8014f5a:	ec45 4b10 	vmov	d0, r4, r5
 8014f5e:	f000 f9d5 	bl	801530c <finite>
 8014f62:	b338      	cbz	r0, 8014fb4 <exp+0x7c>
 8014f64:	a32a      	add	r3, pc, #168	; (adr r3, 8015010 <exp+0xd8>)
 8014f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	4629      	mov	r1, r5
 8014f6e:	f7eb fdf3 	bl	8000b58 <__aeabi_dcmpgt>
 8014f72:	4607      	mov	r7, r0
 8014f74:	2800      	cmp	r0, #0
 8014f76:	d030      	beq.n	8014fda <exp+0xa2>
 8014f78:	2303      	movs	r3, #3
 8014f7a:	9300      	str	r3, [sp, #0]
 8014f7c:	4b29      	ldr	r3, [pc, #164]	; (8015024 <exp+0xec>)
 8014f7e:	9301      	str	r3, [sp, #4]
 8014f80:	2300      	movs	r3, #0
 8014f82:	9308      	str	r3, [sp, #32]
 8014f84:	f996 3000 	ldrsb.w	r3, [r6]
 8014f88:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014f8c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014f90:	b9c3      	cbnz	r3, 8014fc4 <exp+0x8c>
 8014f92:	4b25      	ldr	r3, [pc, #148]	; (8015028 <exp+0xf0>)
 8014f94:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014f98:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014f9c:	4668      	mov	r0, sp
 8014f9e:	f000 f9bd 	bl	801531c <matherr>
 8014fa2:	b1a8      	cbz	r0, 8014fd0 <exp+0x98>
 8014fa4:	9b08      	ldr	r3, [sp, #32]
 8014fa6:	b11b      	cbz	r3, 8014fb0 <exp+0x78>
 8014fa8:	f7ff fb7a 	bl	80146a0 <__errno>
 8014fac:	9b08      	ldr	r3, [sp, #32]
 8014fae:	6003      	str	r3, [r0, #0]
 8014fb0:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8014fb8:	eef0 0a68 	vmov.f32	s1, s17
 8014fbc:	b00b      	add	sp, #44	; 0x2c
 8014fbe:	ecbd 8b02 	vpop	{d8}
 8014fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fc4:	4919      	ldr	r1, [pc, #100]	; (801502c <exp+0xf4>)
 8014fc6:	2000      	movs	r0, #0
 8014fc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014fcc:	2b02      	cmp	r3, #2
 8014fce:	d1e5      	bne.n	8014f9c <exp+0x64>
 8014fd0:	f7ff fb66 	bl	80146a0 <__errno>
 8014fd4:	2322      	movs	r3, #34	; 0x22
 8014fd6:	6003      	str	r3, [r0, #0]
 8014fd8:	e7e4      	b.n	8014fa4 <exp+0x6c>
 8014fda:	a30f      	add	r3, pc, #60	; (adr r3, 8015018 <exp+0xe0>)
 8014fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	4629      	mov	r1, r5
 8014fe4:	f7eb fd9a 	bl	8000b1c <__aeabi_dcmplt>
 8014fe8:	2800      	cmp	r0, #0
 8014fea:	d0e3      	beq.n	8014fb4 <exp+0x7c>
 8014fec:	2304      	movs	r3, #4
 8014fee:	9300      	str	r3, [sp, #0]
 8014ff0:	4b0c      	ldr	r3, [pc, #48]	; (8015024 <exp+0xec>)
 8014ff2:	9301      	str	r3, [sp, #4]
 8014ff4:	2200      	movs	r2, #0
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014ffc:	9708      	str	r7, [sp, #32]
 8014ffe:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8015002:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8015006:	f996 3000 	ldrsb.w	r3, [r6]
 801500a:	e7df      	b.n	8014fcc <exp+0x94>
 801500c:	f3af 8000 	nop.w
 8015010:	fefa39ef 	.word	0xfefa39ef
 8015014:	40862e42 	.word	0x40862e42
 8015018:	d52d3051 	.word	0xd52d3051
 801501c:	c0874910 	.word	0xc0874910
 8015020:	20000134 	.word	0x20000134
 8015024:	080180d7 	.word	0x080180d7
 8015028:	47efffff 	.word	0x47efffff
 801502c:	7ff00000 	.word	0x7ff00000

08015030 <__ieee754_exp>:
 8015030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015034:	ec55 4b10 	vmov	r4, r5, d0
 8015038:	4aab      	ldr	r2, [pc, #684]	; (80152e8 <__ieee754_exp+0x2b8>)
 801503a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801503e:	4296      	cmp	r6, r2
 8015040:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 8015044:	d932      	bls.n	80150ac <__ieee754_exp+0x7c>
 8015046:	4aa9      	ldr	r2, [pc, #676]	; (80152ec <__ieee754_exp+0x2bc>)
 8015048:	4296      	cmp	r6, r2
 801504a:	d913      	bls.n	8015074 <__ieee754_exp+0x44>
 801504c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8015050:	4323      	orrs	r3, r4
 8015052:	ee10 2a10 	vmov	r2, s0
 8015056:	d007      	beq.n	8015068 <__ieee754_exp+0x38>
 8015058:	462b      	mov	r3, r5
 801505a:	4620      	mov	r0, r4
 801505c:	4629      	mov	r1, r5
 801505e:	f7eb f935 	bl	80002cc <__adddf3>
 8015062:	4604      	mov	r4, r0
 8015064:	460d      	mov	r5, r1
 8015066:	e000      	b.n	801506a <__ieee754_exp+0x3a>
 8015068:	b9ef      	cbnz	r7, 80150a6 <__ieee754_exp+0x76>
 801506a:	ec45 4b10 	vmov	d0, r4, r5
 801506e:	b004      	add	sp, #16
 8015070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015074:	a386      	add	r3, pc, #536	; (adr r3, 8015290 <__ieee754_exp+0x260>)
 8015076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507a:	ee10 0a10 	vmov	r0, s0
 801507e:	4629      	mov	r1, r5
 8015080:	f7eb fd6a 	bl	8000b58 <__aeabi_dcmpgt>
 8015084:	b138      	cbz	r0, 8015096 <__ieee754_exp+0x66>
 8015086:	a384      	add	r3, pc, #528	; (adr r3, 8015298 <__ieee754_exp+0x268>)
 8015088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508c:	4610      	mov	r0, r2
 801508e:	4619      	mov	r1, r3
 8015090:	f7eb fad2 	bl	8000638 <__aeabi_dmul>
 8015094:	e7e5      	b.n	8015062 <__ieee754_exp+0x32>
 8015096:	a382      	add	r3, pc, #520	; (adr r3, 80152a0 <__ieee754_exp+0x270>)
 8015098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801509c:	4620      	mov	r0, r4
 801509e:	4629      	mov	r1, r5
 80150a0:	f7eb fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80150a4:	b130      	cbz	r0, 80150b4 <__ieee754_exp+0x84>
 80150a6:	2400      	movs	r4, #0
 80150a8:	2500      	movs	r5, #0
 80150aa:	e7de      	b.n	801506a <__ieee754_exp+0x3a>
 80150ac:	4b90      	ldr	r3, [pc, #576]	; (80152f0 <__ieee754_exp+0x2c0>)
 80150ae:	429e      	cmp	r6, r3
 80150b0:	f240 80a6 	bls.w	8015200 <__ieee754_exp+0x1d0>
 80150b4:	4b8f      	ldr	r3, [pc, #572]	; (80152f4 <__ieee754_exp+0x2c4>)
 80150b6:	429e      	cmp	r6, r3
 80150b8:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 80150bc:	d875      	bhi.n	80151aa <__ieee754_exp+0x17a>
 80150be:	4b8e      	ldr	r3, [pc, #568]	; (80152f8 <__ieee754_exp+0x2c8>)
 80150c0:	4e8e      	ldr	r6, [pc, #568]	; (80152fc <__ieee754_exp+0x2cc>)
 80150c2:	4443      	add	r3, r8
 80150c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150c8:	4620      	mov	r0, r4
 80150ca:	4629      	mov	r1, r5
 80150cc:	f7eb f8fc 	bl	80002c8 <__aeabi_dsub>
 80150d0:	4446      	add	r6, r8
 80150d2:	e9cd 0100 	strd	r0, r1, [sp]
 80150d6:	e9d6 8900 	ldrd	r8, r9, [r6]
 80150da:	f1c7 0a01 	rsb	sl, r7, #1
 80150de:	ebaa 0a07 	sub.w	sl, sl, r7
 80150e2:	4642      	mov	r2, r8
 80150e4:	464b      	mov	r3, r9
 80150e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150ea:	f7eb f8ed 	bl	80002c8 <__aeabi_dsub>
 80150ee:	4604      	mov	r4, r0
 80150f0:	460d      	mov	r5, r1
 80150f2:	4622      	mov	r2, r4
 80150f4:	462b      	mov	r3, r5
 80150f6:	4620      	mov	r0, r4
 80150f8:	4629      	mov	r1, r5
 80150fa:	f7eb fa9d 	bl	8000638 <__aeabi_dmul>
 80150fe:	a36a      	add	r3, pc, #424	; (adr r3, 80152a8 <__ieee754_exp+0x278>)
 8015100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015104:	4606      	mov	r6, r0
 8015106:	460f      	mov	r7, r1
 8015108:	f7eb fa96 	bl	8000638 <__aeabi_dmul>
 801510c:	a368      	add	r3, pc, #416	; (adr r3, 80152b0 <__ieee754_exp+0x280>)
 801510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015112:	f7eb f8d9 	bl	80002c8 <__aeabi_dsub>
 8015116:	4632      	mov	r2, r6
 8015118:	463b      	mov	r3, r7
 801511a:	f7eb fa8d 	bl	8000638 <__aeabi_dmul>
 801511e:	a366      	add	r3, pc, #408	; (adr r3, 80152b8 <__ieee754_exp+0x288>)
 8015120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015124:	f7eb f8d2 	bl	80002cc <__adddf3>
 8015128:	4632      	mov	r2, r6
 801512a:	463b      	mov	r3, r7
 801512c:	f7eb fa84 	bl	8000638 <__aeabi_dmul>
 8015130:	a363      	add	r3, pc, #396	; (adr r3, 80152c0 <__ieee754_exp+0x290>)
 8015132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015136:	f7eb f8c7 	bl	80002c8 <__aeabi_dsub>
 801513a:	4632      	mov	r2, r6
 801513c:	463b      	mov	r3, r7
 801513e:	f7eb fa7b 	bl	8000638 <__aeabi_dmul>
 8015142:	a361      	add	r3, pc, #388	; (adr r3, 80152c8 <__ieee754_exp+0x298>)
 8015144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015148:	f7eb f8c0 	bl	80002cc <__adddf3>
 801514c:	4632      	mov	r2, r6
 801514e:	463b      	mov	r3, r7
 8015150:	f7eb fa72 	bl	8000638 <__aeabi_dmul>
 8015154:	4602      	mov	r2, r0
 8015156:	460b      	mov	r3, r1
 8015158:	4620      	mov	r0, r4
 801515a:	4629      	mov	r1, r5
 801515c:	f7eb f8b4 	bl	80002c8 <__aeabi_dsub>
 8015160:	4602      	mov	r2, r0
 8015162:	460b      	mov	r3, r1
 8015164:	4606      	mov	r6, r0
 8015166:	460f      	mov	r7, r1
 8015168:	4620      	mov	r0, r4
 801516a:	4629      	mov	r1, r5
 801516c:	f7eb fa64 	bl	8000638 <__aeabi_dmul>
 8015170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015174:	f1ba 0f00 	cmp.w	sl, #0
 8015178:	d15c      	bne.n	8015234 <__ieee754_exp+0x204>
 801517a:	2200      	movs	r2, #0
 801517c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015180:	4630      	mov	r0, r6
 8015182:	4639      	mov	r1, r7
 8015184:	f7eb f8a0 	bl	80002c8 <__aeabi_dsub>
 8015188:	4602      	mov	r2, r0
 801518a:	460b      	mov	r3, r1
 801518c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015190:	f7eb fb7c 	bl	800088c <__aeabi_ddiv>
 8015194:	4622      	mov	r2, r4
 8015196:	462b      	mov	r3, r5
 8015198:	f7eb f896 	bl	80002c8 <__aeabi_dsub>
 801519c:	4602      	mov	r2, r0
 801519e:	460b      	mov	r3, r1
 80151a0:	2000      	movs	r0, #0
 80151a2:	4957      	ldr	r1, [pc, #348]	; (8015300 <__ieee754_exp+0x2d0>)
 80151a4:	f7eb f890 	bl	80002c8 <__aeabi_dsub>
 80151a8:	e75b      	b.n	8015062 <__ieee754_exp+0x32>
 80151aa:	4e56      	ldr	r6, [pc, #344]	; (8015304 <__ieee754_exp+0x2d4>)
 80151ac:	a348      	add	r3, pc, #288	; (adr r3, 80152d0 <__ieee754_exp+0x2a0>)
 80151ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b2:	4446      	add	r6, r8
 80151b4:	4620      	mov	r0, r4
 80151b6:	4629      	mov	r1, r5
 80151b8:	f7eb fa3e 	bl	8000638 <__aeabi_dmul>
 80151bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80151c0:	f7eb f884 	bl	80002cc <__adddf3>
 80151c4:	f7eb fcd2 	bl	8000b6c <__aeabi_d2iz>
 80151c8:	4682      	mov	sl, r0
 80151ca:	f7eb f9cb 	bl	8000564 <__aeabi_i2d>
 80151ce:	a342      	add	r3, pc, #264	; (adr r3, 80152d8 <__ieee754_exp+0x2a8>)
 80151d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151d4:	4606      	mov	r6, r0
 80151d6:	460f      	mov	r7, r1
 80151d8:	f7eb fa2e 	bl	8000638 <__aeabi_dmul>
 80151dc:	4602      	mov	r2, r0
 80151de:	460b      	mov	r3, r1
 80151e0:	4620      	mov	r0, r4
 80151e2:	4629      	mov	r1, r5
 80151e4:	f7eb f870 	bl	80002c8 <__aeabi_dsub>
 80151e8:	a33d      	add	r3, pc, #244	; (adr r3, 80152e0 <__ieee754_exp+0x2b0>)
 80151ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ee:	e9cd 0100 	strd	r0, r1, [sp]
 80151f2:	4630      	mov	r0, r6
 80151f4:	4639      	mov	r1, r7
 80151f6:	f7eb fa1f 	bl	8000638 <__aeabi_dmul>
 80151fa:	4680      	mov	r8, r0
 80151fc:	4689      	mov	r9, r1
 80151fe:	e770      	b.n	80150e2 <__ieee754_exp+0xb2>
 8015200:	4b41      	ldr	r3, [pc, #260]	; (8015308 <__ieee754_exp+0x2d8>)
 8015202:	429e      	cmp	r6, r3
 8015204:	d811      	bhi.n	801522a <__ieee754_exp+0x1fa>
 8015206:	a324      	add	r3, pc, #144	; (adr r3, 8015298 <__ieee754_exp+0x268>)
 8015208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520c:	ee10 0a10 	vmov	r0, s0
 8015210:	4629      	mov	r1, r5
 8015212:	f7eb f85b 	bl	80002cc <__adddf3>
 8015216:	2200      	movs	r2, #0
 8015218:	4b39      	ldr	r3, [pc, #228]	; (8015300 <__ieee754_exp+0x2d0>)
 801521a:	f7eb fc9d 	bl	8000b58 <__aeabi_dcmpgt>
 801521e:	b138      	cbz	r0, 8015230 <__ieee754_exp+0x200>
 8015220:	2200      	movs	r2, #0
 8015222:	4b37      	ldr	r3, [pc, #220]	; (8015300 <__ieee754_exp+0x2d0>)
 8015224:	4620      	mov	r0, r4
 8015226:	4629      	mov	r1, r5
 8015228:	e719      	b.n	801505e <__ieee754_exp+0x2e>
 801522a:	f04f 0a00 	mov.w	sl, #0
 801522e:	e760      	b.n	80150f2 <__ieee754_exp+0xc2>
 8015230:	4682      	mov	sl, r0
 8015232:	e75e      	b.n	80150f2 <__ieee754_exp+0xc2>
 8015234:	4632      	mov	r2, r6
 8015236:	463b      	mov	r3, r7
 8015238:	2000      	movs	r0, #0
 801523a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801523e:	f7eb f843 	bl	80002c8 <__aeabi_dsub>
 8015242:	4602      	mov	r2, r0
 8015244:	460b      	mov	r3, r1
 8015246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801524a:	f7eb fb1f 	bl	800088c <__aeabi_ddiv>
 801524e:	4602      	mov	r2, r0
 8015250:	460b      	mov	r3, r1
 8015252:	4640      	mov	r0, r8
 8015254:	4649      	mov	r1, r9
 8015256:	f7eb f837 	bl	80002c8 <__aeabi_dsub>
 801525a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801525e:	f7eb f833 	bl	80002c8 <__aeabi_dsub>
 8015262:	4602      	mov	r2, r0
 8015264:	460b      	mov	r3, r1
 8015266:	2000      	movs	r0, #0
 8015268:	4925      	ldr	r1, [pc, #148]	; (8015300 <__ieee754_exp+0x2d0>)
 801526a:	f7eb f82d 	bl	80002c8 <__aeabi_dsub>
 801526e:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8015272:	4592      	cmp	sl, r2
 8015274:	db02      	blt.n	801527c <__ieee754_exp+0x24c>
 8015276:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 801527a:	e6f2      	b.n	8015062 <__ieee754_exp+0x32>
 801527c:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8015280:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8015284:	2200      	movs	r2, #0
 8015286:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 801528a:	e701      	b.n	8015090 <__ieee754_exp+0x60>
 801528c:	f3af 8000 	nop.w
 8015290:	fefa39ef 	.word	0xfefa39ef
 8015294:	40862e42 	.word	0x40862e42
 8015298:	8800759c 	.word	0x8800759c
 801529c:	7e37e43c 	.word	0x7e37e43c
 80152a0:	d52d3051 	.word	0xd52d3051
 80152a4:	c0874910 	.word	0xc0874910
 80152a8:	72bea4d0 	.word	0x72bea4d0
 80152ac:	3e663769 	.word	0x3e663769
 80152b0:	c5d26bf1 	.word	0xc5d26bf1
 80152b4:	3ebbbd41 	.word	0x3ebbbd41
 80152b8:	af25de2c 	.word	0xaf25de2c
 80152bc:	3f11566a 	.word	0x3f11566a
 80152c0:	16bebd93 	.word	0x16bebd93
 80152c4:	3f66c16c 	.word	0x3f66c16c
 80152c8:	5555553e 	.word	0x5555553e
 80152cc:	3fc55555 	.word	0x3fc55555
 80152d0:	652b82fe 	.word	0x652b82fe
 80152d4:	3ff71547 	.word	0x3ff71547
 80152d8:	fee00000 	.word	0xfee00000
 80152dc:	3fe62e42 	.word	0x3fe62e42
 80152e0:	35793c76 	.word	0x35793c76
 80152e4:	3dea39ef 	.word	0x3dea39ef
 80152e8:	40862e41 	.word	0x40862e41
 80152ec:	7fefffff 	.word	0x7fefffff
 80152f0:	3fd62e42 	.word	0x3fd62e42
 80152f4:	3ff0a2b1 	.word	0x3ff0a2b1
 80152f8:	080180f0 	.word	0x080180f0
 80152fc:	08018100 	.word	0x08018100
 8015300:	3ff00000 	.word	0x3ff00000
 8015304:	080180e0 	.word	0x080180e0
 8015308:	3e2fffff 	.word	0x3e2fffff

0801530c <finite>:
 801530c:	ee10 3a90 	vmov	r3, s1
 8015310:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015314:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015318:	0fc0      	lsrs	r0, r0, #31
 801531a:	4770      	bx	lr

0801531c <matherr>:
 801531c:	2000      	movs	r0, #0
 801531e:	4770      	bx	lr

08015320 <_init>:
 8015320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015322:	bf00      	nop
 8015324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015326:	bc08      	pop	{r3}
 8015328:	469e      	mov	lr, r3
 801532a:	4770      	bx	lr

0801532c <_fini>:
 801532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801532e:	bf00      	nop
 8015330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015332:	bc08      	pop	{r3}
 8015334:	469e      	mov	lr, r3
 8015336:	4770      	bx	lr
